// Generated by Haxe 3.4.0
(function ($hx_exports, $global) { "use strict";
$hx_exports["openfl"] = $hx_exports["openfl"] || {};
$hx_exports["lime"] = $hx_exports["lime"] || {};
var $hxClasses = {},$estr = function() { return js_Boot.__string_rec(this,''); };
function $extend(from, fields) {
	function Inherit() {} Inherit.prototype = from; var proto = new Inherit();
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var ApplicationMain = function() { };
$hxClasses["ApplicationMain"] = ApplicationMain;
ApplicationMain.__name__ = ["ApplicationMain"];
ApplicationMain.main = function() {
	ApplicationMain.config = { build : "216", company : "Gulvan", file : "FracturedUnity", fps : 60, name : "Fractured Unity", orientation : "", packageName : "FracturedUnity", version : "1.0.0", windows : [{ allowHighDPI : false, antialiasing : 0, background : 0, borderless : false, depthBuffer : false, display : 0, fullscreen : false, hardware : true, height : 600, hidden : null, maximized : null, minimized : null, parameters : "{}", resizable : true, stencilBuffer : true, title : "Fractured Unity", vsync : false, width : 900, x : null, y : null}]};
};
ApplicationMain.create = function() {
	var app = new openfl_display_Application();
	app.create(ApplicationMain.config);
	ApplicationMain.preloader = new openfl_display_Preloader(new openfl_display_DefaultPreloader());
	app.setPreloader(ApplicationMain.preloader);
	ApplicationMain.preloader.onComplete.add(ApplicationMain.init);
	var urls = [];
	var types = [];
	urls.push("lib/AssetSource/AssetSource.dat");
	types.push("TEXT");
	urls.push("lib/AssetSource.json");
	types.push("TEXT");
	if(ApplicationMain.config.assetsPrefix != null) {
		var _g1 = 0;
		var _g = urls.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(types[i] != "FONT") {
				urls[i] = ApplicationMain.config.assetsPrefix + urls[i];
			}
		}
	}
	ApplicationMain.preloader.load(urls,types);
	app.exec();
};
ApplicationMain.embed = $hx_exports["lime"]["embed"] = function(element,width,height,background,assetsPrefix) {
	var htmlElement = null;
	if(typeof(element) == "string") {
		htmlElement = window.document.getElementById(js_Boot.__cast(element , String));
	} else if(element == null) {
		htmlElement = window.document.createElement("div");
	} else {
		htmlElement = element;
	}
	var color = null;
	if(background != null && background != "") {
		background = StringTools.replace(background,"#","");
		if(background.indexOf("0x") > -1) {
			color = Std.parseInt(background);
		} else {
			color = Std.parseInt("0x" + background);
		}
	}
	if(width == null) {
		width = 0;
	}
	if(height == null) {
		height = 0;
	}
	ApplicationMain.config.windows[0].background = color;
	ApplicationMain.config.windows[0].element = htmlElement;
	ApplicationMain.config.windows[0].width = width;
	ApplicationMain.config.windows[0].height = height;
	ApplicationMain.config.assetsPrefix = assetsPrefix;
	ApplicationMain.create();
};
ApplicationMain._embed = $hx_exports["openfl"]["embed"] = function(element,width,height,background,assetsPrefix) {
	ApplicationMain.embed(element,width,height,background,assetsPrefix);
};
ApplicationMain.init = function() {
	lime_Assets.registerLibrary("default",new DefaultAssetLibrary());
	var loaded = 0;
	var total = 0;
	var library_onLoad = function(__) {
		loaded += 1;
		if(loaded == total) {
			ApplicationMain.start();
		}
	};
	ApplicationMain.preloader = null;
	total += 1;
	openfl_Assets.loadLibrary("AssetSource").onComplete(library_onLoad);
	if(total == 0) {
		ApplicationMain.start();
	}
};
ApplicationMain.start = function() {
	new DocumentClass();
	openfl_Lib.current.stage.dispatchEvent(new openfl_events_Event("resize",false,false));
	if(openfl_Lib.current.stage.window.__fullscreen) {
		openfl_Lib.current.stage.dispatchEvent(new openfl_events_FullScreenEvent("fullScreen",false,false,true,true));
	}
};
var openfl_events_IEventDispatcher = function() { };
$hxClasses["openfl.events.IEventDispatcher"] = openfl_events_IEventDispatcher;
openfl_events_IEventDispatcher.__name__ = ["openfl","events","IEventDispatcher"];
openfl_events_IEventDispatcher.prototype = {
	addEventListener: null
	,dispatchEvent: null
	,hasEventListener: null
	,removeEventListener: null
	,willTrigger: null
	,__class__: openfl_events_IEventDispatcher
};
var openfl_events_EventDispatcher = function(target) {
	if(target != null) {
		this.__targetDispatcher = target;
	}
};
$hxClasses["openfl.events.EventDispatcher"] = openfl_events_EventDispatcher;
openfl_events_EventDispatcher.__name__ = ["openfl","events","EventDispatcher"];
openfl_events_EventDispatcher.__interfaces__ = [openfl_events_IEventDispatcher];
openfl_events_EventDispatcher.__sortByPriority = function(l1,l2) {
	if(l1.priority == l2.priority) {
		return 0;
	} else if(l1.priority > l2.priority) {
		return -1;
	} else {
		return 1;
	}
};
openfl_events_EventDispatcher.prototype = {
	__eventMap: null
	,__iterators: null
	,__targetDispatcher: null
	,addEventListener: function(type,listener,useCapture,priority,useWeakReference) {
		if(useWeakReference == null) {
			useWeakReference = false;
		}
		if(priority == null) {
			priority = 0;
		}
		if(useCapture == null) {
			useCapture = false;
		}
		if(this.__eventMap == null) {
			this.__eventMap = new haxe_ds_StringMap();
			this.__iterators = new haxe_ds_StringMap();
		}
		var _this = this.__eventMap;
		if(!(__map_reserved[type] != null ? _this.existsReserved(type) : _this.h.hasOwnProperty(type))) {
			var list = [];
			list.push(new openfl_events__$EventDispatcher_Listener(listener,useCapture,priority));
			var iterator = new openfl_events__$EventDispatcher_DispatchIterator(list);
			var _this1 = this.__eventMap;
			if(__map_reserved[type] != null) {
				_this1.setReserved(type,list);
			} else {
				_this1.h[type] = list;
			}
			var _this2 = this.__iterators;
			var value = [iterator];
			if(__map_reserved[type] != null) {
				_this2.setReserved(type,value);
			} else {
				_this2.h[type] = value;
			}
		} else {
			var _this3 = this.__eventMap;
			var list1 = __map_reserved[type] != null ? _this3.getReserved(type) : _this3.h[type];
			var _g1 = 0;
			var _g = list1.length;
			while(_g1 < _g) if(list1[_g1++].match(listener,useCapture)) {
				return;
			}
			var _this4 = this.__iterators;
			var iterators = __map_reserved[type] != null ? _this4.getReserved(type) : _this4.h[type];
			var _g2 = 0;
			while(_g2 < iterators.length) {
				var iterator1 = iterators[_g2];
				++_g2;
				if(iterator1.active) {
					iterator1.copy();
				}
			}
			list1.push(new openfl_events__$EventDispatcher_Listener(listener,useCapture,priority));
			list1.sort(openfl_events_EventDispatcher.__sortByPriority);
		}
	}
	,dispatchEvent: function(event) {
		if(this.__targetDispatcher != null) {
			event.target = this.__targetDispatcher;
		} else {
			event.target = this;
		}
		return this.__dispatchEvent(event);
	}
	,hasEventListener: function(type) {
		if(this.__eventMap == null) {
			return false;
		}
		var _this = this.__eventMap;
		if(__map_reserved[type] != null) {
			return _this.existsReserved(type);
		} else {
			return _this.h.hasOwnProperty(type);
		}
	}
	,removeEventListener: function(type,listener,useCapture) {
		if(useCapture == null) {
			useCapture = false;
		}
		if(this.__eventMap == null) {
			return;
		}
		var _this = this.__eventMap;
		var list = __map_reserved[type] != null ? _this.getReserved(type) : _this.h[type];
		if(list == null) {
			return;
		}
		var _this1 = this.__iterators;
		var iterators = __map_reserved[type] != null ? _this1.getReserved(type) : _this1.h[type];
		var _g1 = 0;
		var _g = list.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(list[i].match(listener,useCapture)) {
				var _g2 = 0;
				while(_g2 < iterators.length) {
					var iterator = iterators[_g2];
					++_g2;
					iterator.remove(list[i],i);
				}
				list.splice(i,1);
				break;
			}
		}
		if(list.length == 0) {
			this.__eventMap.remove(type);
			this.__iterators.remove(type);
		}
		var _this2 = this.__eventMap;
		if(!new haxe_ds__$StringMap_StringMapIterator(_this2,_this2.arrayKeys()).hasNext()) {
			this.__eventMap = null;
			this.__iterators = null;
		}
	}
	,toString: function() {
		var full = Type.getClassName(js_Boot.getClass(this));
		var $short = full.split(".").pop();
		return "[object " + $short + "]";
	}
	,willTrigger: function(type) {
		return this.hasEventListener(type);
	}
	,__dispatchEvent: function(event) {
		if(this.__eventMap == null || event == null) {
			return true;
		}
		var type = event.type;
		var _this = this.__eventMap;
		var list = __map_reserved[type] != null ? _this.getReserved(type) : _this.h[type];
		if(list == null) {
			return true;
		}
		if(event.target == null) {
			if(this.__targetDispatcher != null) {
				event.target = this.__targetDispatcher;
			} else {
				event.target = this;
			}
		}
		event.currentTarget = this;
		var capture = event.eventPhase == 1;
		var _this1 = this.__iterators;
		var iterators = __map_reserved[type] != null ? _this1.getReserved(type) : _this1.h[type];
		var iterator = iterators[0];
		if(iterator.active) {
			iterator = new openfl_events__$EventDispatcher_DispatchIterator(list);
			iterators.push(iterator);
		}
		iterator.reset(list);
		var listener = iterator;
		while(listener.hasNext()) {
			var listener1 = listener.next();
			if(listener1.useCapture == capture) {
				listener1.callback(event);
				if(event.__isCanceledNow) {
					break;
				}
			}
		}
		if(iterator != iterators[0]) {
			HxOverrides.remove(iterators,iterator);
		}
		return true;
	}
	,__class__: openfl_events_EventDispatcher
};
var openfl_display_IBitmapDrawable = function() { };
$hxClasses["openfl.display.IBitmapDrawable"] = openfl_display_IBitmapDrawable;
openfl_display_IBitmapDrawable.__name__ = ["openfl","display","IBitmapDrawable"];
openfl_display_IBitmapDrawable.prototype = {
	__worldTransform: null
	,__worldColorTransform: null
	,__blendMode: null
	,__renderCairo: null
	,__renderCairoMask: null
	,__renderCanvas: null
	,__renderCanvasMask: null
	,__renderGL: null
	,__updateChildren: null
	,__updateTransforms: null
	,__updateMask: null
	,__class__: openfl_display_IBitmapDrawable
};
var openfl_display_DisplayObject = function() {
	openfl_events_EventDispatcher.call(this);
	this.__alpha = 1;
	this.__blendMode = 10;
	this.__cacheAsBitmap = false;
	this.__transform = new openfl_geom_Matrix();
	this.__visible = true;
	this.__rotation = 0;
	this.__rotationSine = 0;
	this.__rotationCosine = 1;
	this.__worldAlpha = 1;
	this.__worldTransform = new openfl_geom_Matrix();
	this.__worldColorTransform = new openfl_geom_ColorTransform();
	this.__renderTransform = new openfl_geom_Matrix();
	this.set_name("instance" + ++openfl_display_DisplayObject.__instanceCount);
};
$hxClasses["openfl.display.DisplayObject"] = openfl_display_DisplayObject;
openfl_display_DisplayObject.__name__ = ["openfl","display","DisplayObject"];
openfl_display_DisplayObject.__interfaces__ = [openfl_display_IBitmapDrawable];
openfl_display_DisplayObject.__super__ = openfl_events_EventDispatcher;
openfl_display_DisplayObject.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	loaderInfo: null
	,opaqueBackground: null
	,parent: null
	,scale9Grid: null
	,stage: null
	,__worldColorTransform: null
	,__worldTransform: null
	,__alpha: null
	,__blendMode: null
	,__cacheAsBitmap: null
	,__cacheAsBitmapMatrix: null
	,__cairo: null
	,__children: null
	,__filters: null
	,__forceCacheAsBitmap: null
	,__graphics: null
	,__interactive: null
	,__isMask: null
	,__mask: null
	,__name: null
	,__objectTransform: null
	,__renderable: null
	,__renderDirty: null
	,__renderParent: null
	,__renderTransform: null
	,__rotation: null
	,__rotationCosine: null
	,__rotationSine: null
	,__scrollRect: null
	,__transform: null
	,__transformDirty: null
	,__visible: null
	,__worldAlpha: null
	,__worldAlphaChanged: null
	,__worldClip: null
	,__worldClipChanged: null
	,__worldTransformCache: null
	,__worldTransformChanged: null
	,__worldVisible: null
	,__worldVisibleChanged: null
	,__worldZ: null
	,__canvas: null
	,__context: null
	,__style: null
	,addEventListener: function(type,listener,useCapture,priority,useWeakReference) {
		if(useWeakReference == null) {
			useWeakReference = false;
		}
		if(priority == null) {
			priority = 0;
		}
		if(useCapture == null) {
			useCapture = false;
		}
		switch(type) {
		case "activate":case "deactivate":case "enterFrame":case "exitFrame":case "frameConstructed":case "render":
			if(!openfl_display_DisplayObject.__broadcastEvents.exists(type)) {
				openfl_display_DisplayObject.__broadcastEvents.set(type,[]);
			}
			var dispatchers = openfl_display_DisplayObject.__broadcastEvents.get(type);
			if(dispatchers.indexOf(this) == -1) {
				dispatchers.push(this);
			}
			break;
		default:
		}
		openfl_events_EventDispatcher.prototype.addEventListener.call(this,type,listener,useCapture,priority,useWeakReference);
	}
	,dispatchEvent: function(event) {
		if(js_Boot.__instanceof(event,openfl_events_MouseEvent)) {
			var mouseEvent = event;
			var _this = this.__getRenderTransform();
			mouseEvent.stageX = mouseEvent.localX * _this.a + mouseEvent.localY * _this.c + _this.tx;
			var _this1 = this.__getRenderTransform();
			mouseEvent.stageY = mouseEvent.localX * _this1.b + mouseEvent.localY * _this1.d + _this1.ty;
		} else if(js_Boot.__instanceof(event,openfl_events_TouchEvent)) {
			var touchEvent = event;
			var _this2 = this.__getRenderTransform();
			touchEvent.stageX = touchEvent.localX * _this2.a + touchEvent.localY * _this2.c + _this2.tx;
			var _this3 = this.__getRenderTransform();
			touchEvent.stageY = touchEvent.localX * _this3.b + touchEvent.localY * _this3.d + _this3.ty;
		}
		return openfl_events_EventDispatcher.prototype.dispatchEvent.call(this,event);
	}
	,getBounds: function(targetCoordinateSpace) {
		var matrix;
		if(targetCoordinateSpace != null) {
			matrix = this.__getWorldTransform().clone();
			matrix.concat(targetCoordinateSpace.__getWorldTransform().clone().invert());
		} else {
			matrix = openfl_geom_Matrix.__temp;
			matrix.identity();
		}
		var bounds = new openfl_geom_Rectangle();
		this.__getBounds(bounds,matrix);
		return bounds;
	}
	,getRect: function(targetCoordinateSpace) {
		return this.getBounds(targetCoordinateSpace);
	}
	,globalToLocal: function(pos) {
		pos = pos.clone();
		var _this = this.__getRenderTransform();
		var norm = _this.a * _this.d - _this.b * _this.c;
		if(norm == 0) {
			pos.x = -_this.tx;
			pos.y = -_this.ty;
		} else {
			var px = 1.0 / norm * (_this.c * (_this.ty - pos.y) + _this.d * (pos.x - _this.tx));
			pos.y = 1.0 / norm * (_this.a * (pos.y - _this.ty) + _this.b * (_this.tx - pos.x));
			pos.x = px;
		}
		return pos;
	}
	,hitTestObject: function(obj) {
		if(obj != null && obj.parent != null && this.parent != null) {
			return this.getBounds(this).intersects(obj.getBounds(this));
		}
		return false;
	}
	,hitTestPoint: function(x,y,shapeFlag) {
		if(shapeFlag == null) {
			shapeFlag = false;
		}
		if(this.stage != null) {
			return this.__hitTest(x,y,shapeFlag,null,false,this);
		} else {
			return false;
		}
	}
	,localToGlobal: function(point) {
		return this.__getRenderTransform().transformPoint(point);
	}
	,removeEventListener: function(type,listener,useCapture) {
		if(useCapture == null) {
			useCapture = false;
		}
		openfl_events_EventDispatcher.prototype.removeEventListener.call(this,type,listener,useCapture);
		switch(type) {
		case "activate":case "deactivate":case "enterFrame":case "exitFrame":case "frameConstructed":case "render":
			if(!this.hasEventListener(type)) {
				if(openfl_display_DisplayObject.__broadcastEvents.exists(type)) {
					HxOverrides.remove(openfl_display_DisplayObject.__broadcastEvents.get(type),this);
				}
			}
			break;
		default:
		}
	}
	,__cleanup: function() {
		this.__cairo = null;
		this.__canvas = null;
		this.__context = null;
		if(this.__graphics != null) {
			this.__graphics.__cleanup();
		}
	}
	,__dispatch: function(event) {
		if(this.__eventMap != null && this.hasEventListener(event.type)) {
			var result = openfl_events_EventDispatcher.prototype.__dispatchEvent.call(this,event);
			if(event.__isCanceled) {
				return true;
			}
			return result;
		}
		return true;
	}
	,__dispatchChildren: function(event) {
		return this.__dispatchEvent(event);
	}
	,__dispatchEvent: function(event) {
		var result = openfl_events_EventDispatcher.prototype.__dispatchEvent.call(this,event);
		if(event.__isCanceled) {
			return true;
		}
		if(event.bubbles && this.parent != null && this.parent != this) {
			event.eventPhase = 3;
			if(event.target == null) {
				event.target = this;
			}
			this.parent.__dispatchEvent(event);
		}
		return result;
	}
	,__enterFrame: function(deltaTime) {
	}
	,__getBounds: function(rect,matrix) {
		if(this.__graphics != null) {
			this.__graphics.__getBounds(rect,matrix);
		}
	}
	,__getCursor: function() {
		return null;
	}
	,__getInteractive: function(stack) {
		return false;
	}
	,__getLocalBounds: function(rect) {
		this.__getBounds(rect,this.__transform);
	}
	,__getRenderBounds: function(rect,matrix) {
		if(this.__scrollRect == null) {
			this.__getBounds(rect,matrix);
		} else {
			var r = openfl_geom_Rectangle.__temp;
			r.copyFrom(this.__scrollRect);
			r.__transform(r,matrix);
			rect.__expand(matrix.tx,matrix.ty,r.width,r.height);
		}
	}
	,__getRenderTransform: function() {
		this.__getWorldTransform();
		return this.__renderTransform;
	}
	,__getWorldTransform: function() {
		if(this.__transformDirty || openfl_display_DisplayObject.__worldTransformDirty > 0) {
			var list = [];
			var current = this;
			var transformDirty = this.__transformDirty;
			if(this.parent == null) {
				if(transformDirty) {
					this.__update(true,false);
				}
			} else {
				while(current != this.stage) {
					list.push(current);
					current = current.parent;
					if(current != this.stage && current.__transformDirty) {
						transformDirty = true;
					}
				}
			}
			if(transformDirty) {
				var i = list.length;
				while(--i >= 0) list[i].__update(true,false);
			}
		}
		return this.__worldTransform;
	}
	,__hitTest: function(x,y,shapeFlag,stack,interactiveOnly,hitObject) {
		if(this.__graphics != null) {
			if(!hitObject.get_visible() || this.__isMask) {
				return false;
			}
			if(this.get_mask() != null && !this.get_mask().__hitTestMask(x,y)) {
				return false;
			}
			if(this.__graphics.__hitTest(x,y,shapeFlag,this.__getRenderTransform())) {
				if(stack != null && !interactiveOnly) {
					stack.push(hitObject);
				}
				return true;
			}
		}
		return false;
	}
	,__hitTestMask: function(x,y) {
		if(this.__graphics != null) {
			if(this.__graphics.__hitTest(x,y,true,this.__getRenderTransform())) {
				return true;
			}
		}
		return false;
	}
	,__readGraphicsData: function(graphicsData,recurse) {
		if(this.__graphics != null) {
			this.__graphics.__readGraphicsData(graphicsData);
		}
	}
	,__renderCairo: function(renderSession) {
	}
	,__renderCairoMask: function(renderSession) {
		if(this.__graphics != null) {
			openfl__$internal_renderer_cairo_CairoGraphics.renderMask(this.__graphics,renderSession);
		}
	}
	,__renderCanvas: function(renderSession) {
		if(!(this.opaqueBackground == null && this.__graphics == null)) {
			if(!(!this.__renderable || this.__worldAlpha <= 0)) {
				if(this.opaqueBackground != null && this.get_width() > 0 && this.get_height() > 0) {
					renderSession.maskManager.pushObject(this);
					var context = renderSession.context;
					var transform = this.__renderTransform;
					if(renderSession.roundPixels) {
						context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx | 0,transform.ty | 0);
					} else {
						context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx,transform.ty);
					}
					var color = this.opaqueBackground;
					context.fillStyle = "rgb(" + (color >>> 16 & 255) + "," + (color >>> 8 & 255) + "," + (color & 255) + ")";
					context.fillRect(0,0,this.get_width(),this.get_height());
					renderSession.maskManager.popObject(this);
				}
				if(this.__graphics != null) {
					if(!(!this.__renderable || this.__worldAlpha <= 0)) {
						var graphics = this.__graphics;
						if(graphics != null) {
							openfl__$internal_renderer_canvas_CanvasGraphics.render(graphics,renderSession,this.__renderTransform);
							if(graphics.__canvas != null) {
								var context1 = renderSession.context;
								var scrollRect = this.__scrollRect;
								if(graphics.__width > 0 && graphics.__height > 0 && (scrollRect == null || scrollRect.width > 0 && scrollRect.height > 0)) {
									renderSession.maskManager.pushObject(this);
									context1.globalAlpha = this.__worldAlpha;
									var transform1 = graphics.__worldTransform;
									if(renderSession.roundPixels) {
										context1.setTransform(transform1.a,transform1.b,transform1.c,transform1.d,transform1.tx | 0,transform1.ty | 0);
									} else {
										context1.setTransform(transform1.a,transform1.b,transform1.c,transform1.d,transform1.tx,transform1.ty);
									}
									context1.drawImage(graphics.__canvas,0,0);
									renderSession.maskManager.popObject(this);
								}
							}
						}
					}
				}
			}
		}
	}
	,__renderCanvasMask: function(renderSession) {
		if(this.__graphics != null) {
			openfl__$internal_renderer_canvas_CanvasGraphics.renderMask(this.__graphics,renderSession);
		}
	}
	,__renderDOM: function(renderSession) {
		if(!(this.opaqueBackground == null && this.__graphics == null)) {
			if(!(!this.__renderable || this.__worldAlpha <= 0)) {
				this.opaqueBackground != null && this.get_width() > 0 && this.get_height() > 0;
				if(this.__graphics != null) {
					var graphics = this.__graphics;
					if(this.stage != null && this.__worldVisible && this.__renderable && graphics != null) {
						if(graphics.__dirty || this.__worldAlphaChanged || this.__canvas == null && graphics.__canvas != null) {
							var matrix = openfl_geom_Matrix.__temp;
							matrix.identity();
							openfl__$internal_renderer_canvas_CanvasGraphics.render(graphics,renderSession,matrix);
							if(graphics.__canvas != null) {
								if(this.__canvas == null) {
									this.__canvas = window.document.createElement("canvas");
									this.__context = this.__canvas.getContext("2d");
									openfl__$internal_renderer_dom_DOMRenderer.initializeElement(this,this.__canvas,renderSession);
								}
								this.__canvas.width = graphics.__canvas.width;
								this.__canvas.height = graphics.__canvas.height;
								this.__context.globalAlpha = this.__worldAlpha;
								this.__context.drawImage(graphics.__canvas,0,0);
							} else if(this.__canvas != null) {
								renderSession.element.removeChild(this.__canvas);
								this.__canvas = null;
								this.__style = null;
							}
						}
						if(this.__canvas != null) {
							if(this.__worldTransformChanged || graphics.__transformDirty) {
								graphics.__transformDirty = false;
								var transform = openfl_geom_Matrix.__temp;
								transform.identity();
								transform.translate(graphics.__bounds.x,graphics.__bounds.y);
								transform.concat(this.__renderTransform);
								this.__style.setProperty(renderSession.transformProperty,renderSession.roundPixels ? "matrix3d(" + transform.a + ", " + transform.b + ", 0, 0, " + transform.c + ", " + transform.d + ", 0, 0, 0, 0, 1, 0, " + (transform.tx | 0) + ", " + (transform.ty | 0) + ", 0, 1)" : "matrix3d(" + transform.a + ", " + transform.b + ", 0, 0, " + transform.c + ", " + transform.d + ", 0, 0, 0, 0, 1, 0, " + transform.tx + ", " + transform.ty + ", 0, 1)",null);
							}
							openfl__$internal_renderer_dom_DOMRenderer.applyStyle(this,renderSession,false,false,true);
						}
					} else if(this.__canvas != null) {
						renderSession.element.removeChild(this.__canvas);
						this.__canvas = null;
						this.__style = null;
					}
				}
			}
		}
	}
	,__renderGL: function(renderSession) {
		if(!(this.opaqueBackground == null && this.__graphics == null)) {
			if(!(!this.__renderable || this.__worldAlpha <= 0)) {
				if(this.opaqueBackground != null && this.get_width() > 0 && this.get_height() > 0) {
					renderSession.maskManager.pushObject(this);
					var gl = renderSession.gl;
					var rect = openfl_geom_Rectangle.__temp;
					rect.setTo(0,0,this.get_width(),this.get_height());
					renderSession.maskManager.pushRect(rect,this.__renderTransform);
					var color = this.opaqueBackground;
					gl.clearColor((color >>> 16 & 255) / 255,(color >>> 8 & 255) / 255,(color & 255) / 255,1);
					gl.clear(gl.COLOR_BUFFER_BIT);
					renderSession.maskManager.popRect();
					renderSession.maskManager.popObject(this);
				}
				if(this.__graphics != null) {
					if(!(!this.__renderable || this.__worldAlpha <= 0)) {
						var graphics = this.__graphics;
						if(graphics != null) {
							openfl__$internal_renderer_canvas_CanvasGraphics.render(graphics,renderSession,this.__renderTransform);
							if(graphics.__bitmap != null && graphics.__visible) {
								var renderer = renderSession.renderer;
								var gl1 = renderSession.gl;
								renderSession.blendModeManager.setBlendMode(this.get_blendMode());
								renderSession.maskManager.pushObject(this);
								var shader = renderSession.filterManager.pushObject(this);
								shader.get_data().uImage0.input = graphics.__bitmap;
								shader.get_data().uImage0.smoothing = renderSession.allowSmoothing;
								shader.get_data().uMatrix.value = renderer.getMatrix(graphics.__worldTransform);
								renderSession.shaderManager.setShader(shader);
								gl1.bindBuffer(gl1.ARRAY_BUFFER,graphics.__bitmap.getBuffer(gl1,this.__worldAlpha));
								gl1.vertexAttribPointer(shader.get_data().aPosition.index,3,gl1.FLOAT,false,24,0);
								gl1.vertexAttribPointer(shader.get_data().aTexCoord.index,2,gl1.FLOAT,false,24,12);
								gl1.vertexAttribPointer(shader.get_data().aAlpha.index,1,gl1.FLOAT,false,24,20);
								gl1.drawArrays(gl1.TRIANGLE_STRIP,0,4);
								renderSession.maskManager.popObject(this);
							}
						}
					}
				}
			}
		}
	}
	,__setRenderDirty: function() {
		if(!this.__renderDirty) {
			this.__renderDirty = true;
			openfl_display_DisplayObject.__worldRenderDirty++;
		}
	}
	,__setStageReference: function(stage) {
		this.stage = stage;
	}
	,__setTransformDirty: function() {
		if(!this.__transformDirty) {
			this.__transformDirty = true;
			openfl_display_DisplayObject.__worldTransformDirty++;
		}
	}
	,__stopAllMovieClips: function() {
	}
	,__update: function(transformOnly,updateChildren,maskGraphics) {
		this.__renderable = this.get_visible() && this.get_scaleX() != 0 && this.get_scaleY() != 0 && !this.__isMask;
		this.__updateTransforms();
		if(updateChildren && this.__transformDirty) {
			this.__transformDirty = false;
			openfl_display_DisplayObject.__worldTransformDirty--;
		}
		if(maskGraphics != null) {
			this.__updateMask(maskGraphics);
		}
		if(!transformOnly) {
			if(!this.__worldColorTransform.__equals(this.get_transform().get_colorTransform())) {
				this.__worldColorTransform = this.get_transform().get_colorTransform().__clone();
			}
			var __parent = this.parent != null ? this.parent : this.__renderParent;
			if(__parent != null) {
				this.__worldAlpha = this.get_alpha() * __parent.__worldAlpha;
				this.__worldColorTransform.__combine(__parent.__worldColorTransform);
				if(this.get_blendMode() == null || this.get_blendMode() == 10) {
					this.__blendMode = __parent.__blendMode;
				}
			} else {
				this.__worldAlpha = this.get_alpha();
			}
			if(updateChildren && this.__renderDirty) {
				this.__renderDirty = false;
			}
		}
	}
	,__updateChildren: function(transformOnly) {
		this.__renderable = this.get_visible() && this.get_scaleX() != 0 && this.get_scaleY() != 0 && !this.__isMask;
		this.__worldAlpha = this.get_alpha();
		if(this.__transformDirty) {
			this.__transformDirty = false;
			openfl_display_DisplayObject.__worldTransformDirty--;
		}
	}
	,__updateMask: function(maskGraphics) {
		if(this.__graphics != null) {
			maskGraphics.__commands.overrideMatrix(this.__worldTransform);
			maskGraphics.__commands.append(this.__graphics.__commands);
			maskGraphics.set___dirty(true);
			maskGraphics.__visible = true;
			if(maskGraphics.__bounds == null) {
				maskGraphics.__bounds = new openfl_geom_Rectangle();
			}
			this.__graphics.__getBounds(maskGraphics.__bounds,openfl_geom_Matrix.__identity);
		}
	}
	,__updateTransforms: function(overrideTransform) {
		var overrided = overrideTransform != null;
		var local = overrided ? overrideTransform : this.__transform;
		if(this.__worldTransform == null) {
			this.__worldTransform = new openfl_geom_Matrix();
		}
		if(this.__renderTransform == null) {
			this.__renderTransform = new openfl_geom_Matrix();
		}
		if(!overrided && this.parent != null) {
			var parentTransform = this.parent.__worldTransform;
			this.__worldTransform.a = local.a * parentTransform.a + local.b * parentTransform.c;
			this.__worldTransform.b = local.a * parentTransform.b + local.b * parentTransform.d;
			this.__worldTransform.c = local.c * parentTransform.a + local.d * parentTransform.c;
			this.__worldTransform.d = local.c * parentTransform.b + local.d * parentTransform.d;
			this.__worldTransform.tx = local.tx * parentTransform.a + local.ty * parentTransform.c + parentTransform.tx;
			this.__worldTransform.ty = local.tx * parentTransform.b + local.ty * parentTransform.d + parentTransform.ty;
			parentTransform = this.parent.__renderTransform;
			this.__renderTransform.a = local.a * parentTransform.a + local.b * parentTransform.c;
			this.__renderTransform.b = local.a * parentTransform.b + local.b * parentTransform.d;
			this.__renderTransform.c = local.c * parentTransform.a + local.d * parentTransform.c;
			this.__renderTransform.d = local.c * parentTransform.b + local.d * parentTransform.d;
			this.__renderTransform.tx = local.tx * parentTransform.a + local.ty * parentTransform.c + parentTransform.tx;
			this.__renderTransform.ty = local.tx * parentTransform.b + local.ty * parentTransform.d + parentTransform.ty;
		} else {
			this.__worldTransform.copyFrom(local);
			this.__renderTransform.copyFrom(local);
		}
		if(this.__scrollRect != null) {
			var _this = this.__renderTransform;
			var px = -this.__scrollRect.x;
			var py = -this.__scrollRect.y;
			_this.tx = px * _this.a + py * _this.c + _this.tx;
			_this.ty = px * _this.b + py * _this.d + _this.ty;
		}
	}
	,get_alpha: function() {
		return this.__alpha;
	}
	,set_alpha: function(value) {
		if(value > 1.0) {
			value = 1.0;
		}
		if(value != this.__alpha) {
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				openfl_display_DisplayObject.__worldRenderDirty++;
			}
		}
		return this.__alpha = value;
	}
	,get_blendMode: function() {
		return this.__blendMode;
	}
	,set_blendMode: function(value) {
		if(value == null) {
			value = 10;
		}
		return this.__blendMode = value;
	}
	,get_cacheAsBitmap: function() {
		if(this.__filters == null) {
			return this.__cacheAsBitmap;
		} else {
			return true;
		}
	}
	,set_cacheAsBitmap: function(value) {
		if(!this.__renderDirty) {
			this.__renderDirty = true;
			openfl_display_DisplayObject.__worldRenderDirty++;
		}
		return this.__cacheAsBitmap = value;
	}
	,get_cacheAsBitmapMatrix: function() {
		return this.__cacheAsBitmapMatrix;
	}
	,set_cacheAsBitmapMatrix: function(value) {
		if(!this.__renderDirty) {
			this.__renderDirty = true;
			openfl_display_DisplayObject.__worldRenderDirty++;
		}
		return this.__cacheAsBitmapMatrix = value.clone();
	}
	,get_filters: function() {
		if(this.__filters == null) {
			return [];
		} else {
			return this.__filters.slice();
		}
	}
	,set_filters: function(value) {
		if(value != null && value.length > 0) {
			this.__filters = value;
		} else {
			this.__filters = null;
		}
		if(!this.__renderDirty) {
			this.__renderDirty = true;
			openfl_display_DisplayObject.__worldRenderDirty++;
		}
		return value;
	}
	,get_height: function() {
		var bounds = new openfl_geom_Rectangle();
		this.__getBounds(bounds,this.__transform);
		return bounds.height;
	}
	,set_height: function(value) {
		var bounds = new openfl_geom_Rectangle();
		var matrix = openfl_geom_Matrix.__temp;
		matrix.identity();
		this.__getBounds(bounds,matrix);
		if(value != bounds.height) {
			this.set_scaleY(value / bounds.height);
		} else {
			this.set_scaleY(1);
		}
		return value;
	}
	,get_mask: function() {
		return this.__mask;
	}
	,set_mask: function(value) {
		if(value != this.__mask) {
			if(!this.__transformDirty) {
				this.__transformDirty = true;
				openfl_display_DisplayObject.__worldTransformDirty++;
			}
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				openfl_display_DisplayObject.__worldRenderDirty++;
			}
		}
		if(this.__mask != null) {
			this.__mask.__isMask = false;
			var _this = this.__mask;
			if(!_this.__transformDirty) {
				_this.__transformDirty = true;
				openfl_display_DisplayObject.__worldTransformDirty++;
			}
			var _this1 = this.__mask;
			if(!_this1.__renderDirty) {
				_this1.__renderDirty = true;
				openfl_display_DisplayObject.__worldRenderDirty++;
			}
		}
		if(value != null) {
			value.__isMask = true;
		}
		return this.__mask = value;
	}
	,get_mouseX: function() {
		var mouseX = this.stage != null ? this.stage.__mouseX : openfl_Lib.current.stage.__mouseX;
		var mouseY = this.stage != null ? this.stage.__mouseY : openfl_Lib.current.stage.__mouseY;
		var _this = this.__getRenderTransform();
		var norm = _this.a * _this.d - _this.b * _this.c;
		if(norm == 0) {
			return -_this.tx;
		} else {
			return 1.0 / norm * (_this.c * (_this.ty - mouseY) + _this.d * (mouseX - _this.tx));
		}
	}
	,get_mouseY: function() {
		var mouseX = this.stage != null ? this.stage.__mouseX : openfl_Lib.current.stage.__mouseX;
		var mouseY = this.stage != null ? this.stage.__mouseY : openfl_Lib.current.stage.__mouseY;
		var _this = this.__getRenderTransform();
		var norm = _this.a * _this.d - _this.b * _this.c;
		if(norm == 0) {
			return -_this.ty;
		} else {
			return 1.0 / norm * (_this.a * (mouseY - _this.ty) + _this.b * (_this.tx - mouseX));
		}
	}
	,get_name: function() {
		return this.__name;
	}
	,set_name: function(value) {
		return this.__name = value;
	}
	,get_root: function() {
		if(this.stage != null) {
			return openfl_Lib.current;
		}
		return null;
	}
	,get_rotation: function() {
		return this.__rotation;
	}
	,set_rotation: function(value) {
		if(value != this.__rotation) {
			this.__rotation = value;
			var radians = this.__rotation * (Math.PI / 180);
			this.__rotationSine = Math.sin(radians);
			this.__rotationCosine = Math.cos(radians);
			var __scaleX = this.get_scaleX();
			var __scaleY = this.get_scaleY();
			this.__transform.a = this.__rotationCosine * __scaleX;
			this.__transform.b = this.__rotationSine * __scaleX;
			this.__transform.c = -this.__rotationSine * __scaleY;
			this.__transform.d = this.__rotationCosine * __scaleY;
			if(!this.__transformDirty) {
				this.__transformDirty = true;
				openfl_display_DisplayObject.__worldTransformDirty++;
			}
		}
		return value;
	}
	,get_scaleX: function() {
		if(this.__transform.b == 0) {
			return this.__transform.a;
		} else {
			return Math.sqrt(this.__transform.a * this.__transform.a + this.__transform.b * this.__transform.b);
		}
	}
	,set_scaleX: function(value) {
		if(this.__transform.b == 0) {
			if(value != this.__transform.a) {
				if(!this.__transformDirty) {
					this.__transformDirty = true;
					openfl_display_DisplayObject.__worldTransformDirty++;
				}
			}
			this.__transform.a = value;
		} else {
			var a = this.__rotationCosine * value;
			var b = this.__rotationSine * value;
			if(this.__transform.a != a || this.__transform.b != b) {
				if(!this.__transformDirty) {
					this.__transformDirty = true;
					openfl_display_DisplayObject.__worldTransformDirty++;
				}
			}
			this.__transform.a = a;
			this.__transform.b = b;
		}
		return value;
	}
	,get_scaleY: function() {
		if(this.__transform.c == 0) {
			return this.__transform.d;
		} else {
			return Math.sqrt(this.__transform.c * this.__transform.c + this.__transform.d * this.__transform.d);
		}
	}
	,set_scaleY: function(value) {
		if(this.__transform.c == 0) {
			if(value != this.__transform.d) {
				if(!this.__transformDirty) {
					this.__transformDirty = true;
					openfl_display_DisplayObject.__worldTransformDirty++;
				}
			}
			this.__transform.d = value;
		} else {
			var c = -this.__rotationSine * value;
			var d = this.__rotationCosine * value;
			if(this.__transform.d != d || this.__transform.c != c) {
				if(!this.__transformDirty) {
					this.__transformDirty = true;
					openfl_display_DisplayObject.__worldTransformDirty++;
				}
			}
			this.__transform.c = c;
			this.__transform.d = d;
		}
		return value;
	}
	,get_scrollRect: function() {
		if(this.__scrollRect == null) {
			return null;
		}
		return this.__scrollRect.clone();
	}
	,set_scrollRect: function(value) {
		if(value != this.__scrollRect) {
			if(!this.__transformDirty) {
				this.__transformDirty = true;
				openfl_display_DisplayObject.__worldTransformDirty++;
			}
		}
		return this.__scrollRect = value;
	}
	,get_transform: function() {
		if(this.__objectTransform == null) {
			this.__objectTransform = new openfl_geom_Transform(this);
		}
		return this.__objectTransform;
	}
	,set_transform: function(value) {
		if(value == null) {
			throw new js__$Boot_HaxeError(new openfl_errors_TypeError("Parameter transform must be non-null."));
		}
		if(this.__objectTransform == null) {
			this.__objectTransform = new openfl_geom_Transform(this);
		}
		if(!this.__transformDirty) {
			this.__transformDirty = true;
			openfl_display_DisplayObject.__worldTransformDirty++;
		}
		this.__objectTransform.set_matrix(value.get_matrix());
		this.__objectTransform.set_colorTransform(value.get_colorTransform().__clone());
		return this.__objectTransform;
	}
	,get_visible: function() {
		return this.__visible;
	}
	,set_visible: function(value) {
		if(value != this.__visible) {
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				openfl_display_DisplayObject.__worldRenderDirty++;
			}
		}
		return this.__visible = value;
	}
	,get_width: function() {
		var bounds = new openfl_geom_Rectangle();
		this.__getBounds(bounds,this.__transform);
		return bounds.width;
	}
	,set_width: function(value) {
		var bounds = new openfl_geom_Rectangle();
		var matrix = openfl_geom_Matrix.__temp;
		matrix.identity();
		this.__getBounds(bounds,matrix);
		if(value != bounds.width) {
			this.set_scaleX(value / bounds.width);
		} else {
			this.set_scaleX(1);
		}
		return value;
	}
	,get_x: function() {
		return this.__transform.tx;
	}
	,set_x: function(value) {
		if(value != this.__transform.tx) {
			if(!this.__transformDirty) {
				this.__transformDirty = true;
				openfl_display_DisplayObject.__worldTransformDirty++;
			}
		}
		return this.__transform.tx = value;
	}
	,get_y: function() {
		return this.__transform.ty;
	}
	,set_y: function(value) {
		if(value != this.__transform.ty) {
			if(!this.__transformDirty) {
				this.__transformDirty = true;
				openfl_display_DisplayObject.__worldTransformDirty++;
			}
		}
		return this.__transform.ty = value;
	}
	,__class__: openfl_display_DisplayObject
	,__properties__: {set_y:"set_y",get_y:"get_y",set_x:"set_x",get_x:"get_x",set_width:"set_width",get_width:"get_width",set_visible:"set_visible",get_visible:"get_visible",set_transform:"set_transform",get_transform:"get_transform",set_scrollRect:"set_scrollRect",get_scrollRect:"get_scrollRect",set_scaleY:"set_scaleY",get_scaleY:"get_scaleY",set_scaleX:"set_scaleX",get_scaleX:"get_scaleX",set_rotation:"set_rotation",get_rotation:"get_rotation",get_root:"get_root",set_name:"set_name",get_name:"get_name",get_mouseY:"get_mouseY",get_mouseX:"get_mouseX",set_mask:"set_mask",get_mask:"get_mask",set_height:"set_height",get_height:"get_height",set_filters:"set_filters",get_filters:"get_filters",set_cacheAsBitmapMatrix:"set_cacheAsBitmapMatrix",get_cacheAsBitmapMatrix:"get_cacheAsBitmapMatrix",set_cacheAsBitmap:"set_cacheAsBitmap",get_cacheAsBitmap:"get_cacheAsBitmap",set_blendMode:"set_blendMode",get_blendMode:"get_blendMode",set_alpha:"set_alpha",get_alpha:"get_alpha"}
});
var openfl_display_InteractiveObject = function() {
	openfl_display_DisplayObject.call(this);
	this.doubleClickEnabled = false;
	this.mouseEnabled = true;
	this.needsSoftKeyboard = false;
	this.__tabEnabled = false;
	this.tabIndex = -1;
};
$hxClasses["openfl.display.InteractiveObject"] = openfl_display_InteractiveObject;
openfl_display_InteractiveObject.__name__ = ["openfl","display","InteractiveObject"];
openfl_display_InteractiveObject.__super__ = openfl_display_DisplayObject;
openfl_display_InteractiveObject.prototype = $extend(openfl_display_DisplayObject.prototype,{
	doubleClickEnabled: null
	,focusRect: null
	,mouseEnabled: null
	,needsSoftKeyboard: null
	,softKeyboardInputAreaOfInterest: null
	,tabIndex: null
	,__tabEnabled: null
	,requestSoftKeyboard: function() {
		openfl_Lib.notImplemented({ fileName : "InteractiveObject.hx", lineNumber : 37, className : "openfl.display.InteractiveObject", methodName : "requestSoftKeyboard"});
		return false;
	}
	,__getInteractive: function(stack) {
		if(stack != null) {
			stack.push(this);
			if(this.parent != null) {
				this.parent.__getInteractive(stack);
			}
		}
		return true;
	}
	,__hitTest: function(x,y,shapeFlag,stack,interactiveOnly,hitObject) {
		if(!hitObject.get_visible() || this.__isMask || interactiveOnly && !this.mouseEnabled) {
			return false;
		}
		return openfl_display_DisplayObject.prototype.__hitTest.call(this,x,y,shapeFlag,stack,interactiveOnly,hitObject);
	}
	,get_tabEnabled: function() {
		return this.__tabEnabled;
	}
	,set_tabEnabled: function(value) {
		return this.__tabEnabled = value;
	}
	,__class__: openfl_display_InteractiveObject
	,__properties__: $extend(openfl_display_DisplayObject.prototype.__properties__,{set_tabEnabled:"set_tabEnabled",get_tabEnabled:"get_tabEnabled"})
});
var openfl_display_DisplayObjectContainer = function() {
	openfl_display_InteractiveObject.call(this);
	this.mouseChildren = true;
	this.__children = [];
	this.__removedChildren = [];
};
$hxClasses["openfl.display.DisplayObjectContainer"] = openfl_display_DisplayObjectContainer;
openfl_display_DisplayObjectContainer.__name__ = ["openfl","display","DisplayObjectContainer"];
openfl_display_DisplayObjectContainer.__super__ = openfl_display_InteractiveObject;
openfl_display_DisplayObjectContainer.prototype = $extend(openfl_display_InteractiveObject.prototype,{
	mouseChildren: null
	,tabChildren: null
	,__removedChildren: null
	,addChild: function(child) {
		return this.addChildAt(child,this.get_numChildren());
	}
	,addChildAt: function(child,index) {
		if(index > this.__children.length || index < 0) {
			throw new js__$Boot_HaxeError("Invalid index position " + index);
		}
		if(child.parent == this) {
			if(this.__children[index] != child) {
				HxOverrides.remove(this.__children,child);
				this.__children.splice(index,0,child);
			}
		} else {
			if(child.parent != null) {
				child.parent.removeChild(child);
			}
			this.__children.splice(index,0,child);
			child.parent = this;
			var addedToStage = this.stage != null && child.stage == null;
			if(addedToStage) {
				this.__setStageReference(this.stage);
			}
			if(!child.__transformDirty) {
				child.__transformDirty = true;
				openfl_display_DisplayObject.__worldTransformDirty++;
			}
			if(!child.__renderDirty) {
				child.__renderDirty = true;
				openfl_display_DisplayObject.__worldRenderDirty++;
			}
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				openfl_display_DisplayObject.__worldRenderDirty++;
			}
			var event = new openfl_events_Event("added",true);
			event.target = child;
			child.__dispatchEvent(event);
			if(addedToStage) {
				child.__dispatchChildren(new openfl_events_Event("addedToStage",false,false));
			}
		}
		return child;
	}
	,areInaccessibleObjectsUnderPoint: function(point) {
		return false;
	}
	,contains: function(child) {
		while(child != this && child != null) child = child.parent;
		return child == this;
	}
	,getChildAt: function(index) {
		if(index >= 0 && index < this.__children.length) {
			return this.__children[index];
		}
		return null;
	}
	,getChildByName: function(name) {
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.get_name() == name) {
				return child;
			}
		}
		return null;
	}
	,getChildIndex: function(child) {
		var _g1 = 0;
		var _g = this.__children.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(this.__children[i] == child) {
				return i;
			}
		}
		return -1;
	}
	,getObjectsUnderPoint: function(point) {
		var stack = [];
		this.__hitTest(point.x,point.y,false,stack,false,this);
		stack.reverse();
		return stack;
	}
	,removeChild: function(child) {
		if(child != null && child.parent == this) {
			if(!child.__transformDirty) {
				child.__transformDirty = true;
				openfl_display_DisplayObject.__worldTransformDirty++;
			}
			if(!child.__renderDirty) {
				child.__renderDirty = true;
				openfl_display_DisplayObject.__worldRenderDirty++;
			}
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				openfl_display_DisplayObject.__worldRenderDirty++;
			}
			child.__dispatchEvent(new openfl_events_Event("removed",true));
			if(this.stage != null) {
				if(child.stage != null && this.stage.get_focus() == child) {
					this.stage.set_focus(null);
				}
				child.__dispatchChildren(new openfl_events_Event("removedFromStage",false,false));
				child.__setStageReference(null);
			}
			child.parent = null;
			HxOverrides.remove(this.__children,child);
			this.__removedChildren.push(child);
			if(!child.__transformDirty) {
				child.__transformDirty = true;
				openfl_display_DisplayObject.__worldTransformDirty++;
			}
		}
		return child;
	}
	,removeChildAt: function(index) {
		if(index >= 0 && index < this.__children.length) {
			return this.removeChild(this.__children[index]);
		}
		return null;
	}
	,removeChildren: function(beginIndex,endIndex) {
		if(endIndex == null) {
			endIndex = 2147483647;
		}
		if(beginIndex == null) {
			beginIndex = 0;
		}
		if(endIndex == 2147483647) {
			endIndex = this.__children.length - 1;
			if(endIndex < 0) {
				return;
			}
		}
		if(beginIndex > this.__children.length - 1) {
			return;
		} else if(endIndex < beginIndex || beginIndex < 0 || endIndex > this.__children.length) {
			throw new js__$Boot_HaxeError(new openfl_errors_RangeError("The supplied index is out of bounds."));
		}
		var numRemovals = endIndex - beginIndex;
		while(numRemovals >= 0) {
			this.removeChildAt(beginIndex);
			--numRemovals;
		}
	}
	,resolve: function(fieldName) {
		if(this.__children == null) {
			return null;
		}
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.get_name() == fieldName) {
				return child;
			}
		}
		return null;
	}
	,setChildIndex: function(child,index) {
		if(index >= 0 && index <= this.__children.length && child.parent == this) {
			HxOverrides.remove(this.__children,child);
			this.__children.splice(index,0,child);
		}
	}
	,stopAllMovieClips: function() {
		this.__stopAllMovieClips();
	}
	,swapChildren: function(child1,child2) {
		if(child1.parent == this && child2.parent == this) {
			var index1 = this.__children.indexOf(child1);
			var index2 = this.__children.indexOf(child2);
			this.__children[index1] = child2;
			this.__children[index2] = child1;
		}
	}
	,swapChildrenAt: function(index1,index2) {
		var swap = this.__children[index1];
		this.__children[index1] = this.__children[index2];
		this.__children[index2] = swap;
		swap = null;
	}
	,__dispatchChildren: function(event) {
		var success = this.__dispatchEvent(event);
		if(success && this.__children != null) {
			var _g = 0;
			var _g1 = this.__children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				event.target = child;
				if(!child.__dispatchChildren(event)) {
					return false;
				}
			}
		}
		return success;
	}
	,__enterFrame: function(deltaTime) {
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.__enterFrame(deltaTime);
		}
	}
	,__getBounds: function(rect,matrix) {
		openfl_display_InteractiveObject.prototype.__getBounds.call(this,rect,matrix);
		if(this.__children.length == 0) {
			return;
		}
		if(matrix != null) {
			this.__updateTransforms(matrix);
			this.__updateChildren(true);
		}
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.get_scaleX() == 0 || child.get_scaleY() == 0) {
				continue;
			}
			child.__getBounds(rect,child.__worldTransform);
		}
		if(matrix != null) {
			this.__updateTransforms();
			this.__updateChildren(true);
		}
	}
	,__getRenderBounds: function(rect,matrix) {
		if(this.__scrollRect != null) {
			openfl_display_InteractiveObject.prototype.__getRenderBounds.call(this,rect,matrix);
			return;
		} else {
			openfl_display_InteractiveObject.prototype.__getBounds.call(this,rect,matrix);
		}
		if(this.__children.length == 0) {
			return;
		}
		if(matrix != null) {
			this.__updateTransforms(matrix);
			this.__updateChildren(true);
		}
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.get_scaleX() == 0 || child.get_scaleY() == 0 || child.__isMask) {
				continue;
			}
			child.__getRenderBounds(rect,child.__worldTransform);
		}
		if(matrix != null) {
			this.__updateTransforms();
			this.__updateChildren(true);
		}
	}
	,__hitTest: function(x,y,shapeFlag,stack,interactiveOnly,hitObject) {
		if(!hitObject.get_visible() || this.__isMask || interactiveOnly && !this.mouseEnabled && !this.mouseChildren) {
			return false;
		}
		if(this.get_mask() != null && !this.get_mask().__hitTestMask(x,y)) {
			return false;
		}
		if(this.__scrollRect != null) {
			var point = openfl_geom_Point.__temp;
			point.setTo(x,y);
			var _this = this.__getRenderTransform();
			var norm = _this.a * _this.d - _this.b * _this.c;
			if(norm == 0) {
				point.x = -_this.tx;
				point.y = -_this.ty;
			} else {
				var px = 1.0 / norm * (_this.c * (_this.ty - point.y) + _this.d * (point.x - _this.tx));
				point.y = 1.0 / norm * (_this.a * (point.y - _this.ty) + _this.b * (_this.tx - point.x));
				point.x = px;
			}
			if(!this.__scrollRect.containsPoint(point)) {
				return false;
			}
		}
		var i = this.__children.length;
		if(interactiveOnly) {
			if(stack == null || !this.mouseChildren) {
				while(--i >= 0) if(this.__children[i].__hitTest(x,y,shapeFlag,null,true,this.__children[i])) {
					if(stack != null) {
						stack.push(hitObject);
					}
					return true;
				}
			} else if(stack != null) {
				var length = stack.length;
				var interactive = false;
				var hitTest = false;
				while(--i >= 0) {
					interactive = this.__children[i].__getInteractive(null);
					if(interactive || this.mouseEnabled && !hitTest) {
						if(this.__children[i].__hitTest(x,y,shapeFlag,stack,true,this.__children[i])) {
							hitTest = true;
							if(interactive) {
								break;
							}
						}
					}
				}
				if(hitTest) {
					stack.splice(length,0,hitObject);
					return true;
				}
			}
		} else {
			while(--i >= 0) this.__children[i].__hitTest(x,y,shapeFlag,stack,false,this.__children[i]);
		}
		return false;
	}
	,__hitTestMask: function(x,y) {
		var i = this.__children.length;
		while(--i >= 0) if(this.__children[i].__hitTestMask(x,y)) {
			return true;
		}
		return false;
	}
	,__readGraphicsData: function(graphicsData,recurse) {
		openfl_display_InteractiveObject.prototype.__readGraphicsData.call(this,graphicsData,recurse);
		if(recurse) {
			var _g = 0;
			var _g1 = this.__children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				child.__readGraphicsData(graphicsData,recurse);
			}
		}
	}
	,__renderCairo: function(renderSession) {
		if(!this.__renderable || this.__worldAlpha <= 0) {
			return;
		}
		openfl_display_InteractiveObject.prototype.__renderCairo.call(this,renderSession);
		renderSession.maskManager.pushObject(this);
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.__renderCairo(renderSession);
		}
		var _g2 = 0;
		var _g11 = this.__removedChildren;
		while(_g2 < _g11.length) {
			var orphan = _g11[_g2];
			++_g2;
			if(orphan.stage == null) {
				orphan.__cleanup();
			}
		}
		if(this.__removedChildren.length > 0) {
			this.__removedChildren.splice(0,this.__removedChildren.length);
		}
		renderSession.maskManager.popObject(this);
	}
	,__renderCairoMask: function(renderSession) {
		if(this.__graphics != null) {
			openfl__$internal_renderer_cairo_CairoGraphics.renderMask(this.__graphics,renderSession);
		}
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.__renderCairoMask(renderSession);
		}
	}
	,__renderCanvas: function(renderSession) {
		if(!this.__renderable || this.__worldAlpha <= 0) {
			return;
		}
		openfl_display_InteractiveObject.prototype.__renderCanvas.call(this,renderSession);
		renderSession.maskManager.pushObject(this);
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.__renderCanvas(renderSession);
		}
		var _g2 = 0;
		var _g11 = this.__removedChildren;
		while(_g2 < _g11.length) {
			var orphan = _g11[_g2];
			++_g2;
			if(orphan.stage == null) {
				orphan.__cleanup();
			}
		}
		if(this.__removedChildren.length > 0) {
			this.__removedChildren.splice(0,this.__removedChildren.length);
		}
		renderSession.maskManager.popObject(this);
	}
	,__renderCanvasMask: function(renderSession) {
		if(this.__graphics != null) {
			openfl__$internal_renderer_canvas_CanvasGraphics.renderMask(this.__graphics,renderSession);
		}
		var bounds = new openfl_geom_Rectangle();
		this.__getBounds(bounds,this.__transform);
		renderSession.context.rect(0,0,bounds.width,bounds.height);
	}
	,__renderDOM: function(renderSession) {
		openfl_display_InteractiveObject.prototype.__renderDOM.call(this,renderSession);
		renderSession.maskManager.pushObject(this);
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.__renderDOM(renderSession);
		}
		var _g2 = 0;
		var _g11 = this.__removedChildren;
		while(_g2 < _g11.length) {
			var orphan = _g11[_g2];
			++_g2;
			if(orphan.stage == null) {
				orphan.__renderDOM(renderSession);
			}
		}
		if(this.__removedChildren.length > 0) {
			this.__removedChildren.splice(0,this.__removedChildren.length);
		}
		renderSession.maskManager.popObject(this);
	}
	,__renderGL: function(renderSession) {
		if(!this.__renderable || this.__worldAlpha <= 0) {
			return;
		}
		openfl_display_InteractiveObject.prototype.__renderGL.call(this,renderSession);
		renderSession.maskManager.pushObject(this);
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.__renderGL(renderSession);
		}
		var _g2 = 0;
		var _g11 = this.__removedChildren;
		while(_g2 < _g11.length) {
			var orphan = _g11[_g2];
			++_g2;
			if(orphan.stage == null) {
				orphan.__cleanup();
			}
		}
		if(this.__removedChildren.length > 0) {
			this.__removedChildren.splice(0,this.__removedChildren.length);
		}
		renderSession.maskManager.popObject(this);
	}
	,__setStageReference: function(stage) {
		openfl_display_InteractiveObject.prototype.__setStageReference.call(this,stage);
		if(this.__children != null) {
			var _g = 0;
			var _g1 = this.__children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				child.__setStageReference(stage);
			}
		}
	}
	,__stopAllMovieClips: function() {
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.__stopAllMovieClips();
		}
	}
	,__update: function(transformOnly,updateChildren,maskGraphics) {
		openfl_display_InteractiveObject.prototype.__update.call(this,transformOnly,updateChildren,maskGraphics);
		if(updateChildren) {
			var _g = 0;
			var _g1 = this.__children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				child.__update(transformOnly,true,maskGraphics);
			}
		}
	}
	,__updateChildren: function(transformOnly) {
		openfl_display_InteractiveObject.prototype.__updateChildren.call(this,transformOnly);
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.__update(transformOnly,true);
		}
	}
	,get_numChildren: function() {
		return this.__children.length;
	}
	,__class__: openfl_display_DisplayObjectContainer
	,__properties__: $extend(openfl_display_InteractiveObject.prototype.__properties__,{get_numChildren:"get_numChildren"})
});
var openfl_display_Sprite = function() {
	openfl_display_DisplayObjectContainer.call(this);
	this.buttonMode = false;
	this.useHandCursor = true;
	this.loaderInfo = openfl_display_LoaderInfo.create(null);
};
$hxClasses["openfl.display.Sprite"] = openfl_display_Sprite;
openfl_display_Sprite.__name__ = ["openfl","display","Sprite"];
openfl_display_Sprite.__super__ = openfl_display_DisplayObjectContainer;
openfl_display_Sprite.prototype = $extend(openfl_display_DisplayObjectContainer.prototype,{
	buttonMode: null
	,hitArea: null
	,useHandCursor: null
	,startDrag: function(lockCenter,bounds) {
		if(lockCenter == null) {
			lockCenter = false;
		}
		if(this.stage != null) {
			this.stage.__startDrag(this,lockCenter,bounds);
		}
	}
	,stopDrag: function() {
		if(this.stage != null) {
			this.stage.__stopDrag(this);
		}
	}
	,__getCursor: function() {
		if(this.buttonMode && this.useHandCursor) {
			return lime_ui_MouseCursor.POINTER;
		} else {
			return null;
		}
	}
	,__hitTest: function(x,y,shapeFlag,stack,interactiveOnly,hitObject) {
		if(this.hitArea != null) {
			if(!this.hitArea.mouseEnabled) {
				this.hitArea.mouseEnabled = true;
				var hitTest = this.hitArea.__hitTest(x,y,shapeFlag,null,true,hitObject);
				this.hitArea.mouseEnabled = false;
				if(hitTest) {
					stack[stack.length] = hitObject;
				}
				return hitTest;
			}
		} else {
			if(!hitObject.get_visible() || this.__isMask || interactiveOnly && !this.mouseEnabled && !this.mouseChildren) {
				return false;
			}
			if(this.get_mask() != null && !this.get_mask().__hitTestMask(x,y)) {
				return false;
			}
			if(this.__scrollRect != null) {
				var point = openfl_geom_Point.__temp;
				point.setTo(x,y);
				var _this = this.__getRenderTransform();
				var norm = _this.a * _this.d - _this.b * _this.c;
				if(norm == 0) {
					point.x = -_this.tx;
					point.y = -_this.ty;
				} else {
					var px = 1.0 / norm * (_this.c * (_this.ty - point.y) + _this.d * (point.x - _this.tx));
					point.y = 1.0 / norm * (_this.a * (point.y - _this.ty) + _this.b * (_this.tx - point.x));
					point.x = px;
				}
				if(!this.__scrollRect.containsPoint(point)) {
					return false;
				}
			}
			if(openfl_display_DisplayObjectContainer.prototype.__hitTest.call(this,x,y,shapeFlag,stack,interactiveOnly,hitObject)) {
				return interactiveOnly;
			} else if((!interactiveOnly || this.mouseEnabled) && this.__graphics != null && this.__graphics.__hitTest(x,y,shapeFlag,this.__getRenderTransform())) {
				if(stack != null) {
					stack.push(hitObject);
				}
				return true;
			}
		}
		return false;
	}
	,__hitTestMask: function(x,y) {
		if(openfl_display_DisplayObjectContainer.prototype.__hitTestMask.call(this,x,y)) {
			return true;
		} else if(this.__graphics != null && this.__graphics.__hitTest(x,y,true,this.__getRenderTransform())) {
			return true;
		}
		return false;
	}
	,get_graphics: function() {
		if(this.__graphics == null) {
			this.__graphics = new openfl_display_Graphics(this);
		}
		return this.__graphics;
	}
	,get_tabEnabled: function() {
		if(!this.__tabEnabled) {
			return this.buttonMode;
		} else {
			return true;
		}
	}
	,__class__: openfl_display_Sprite
	,__properties__: $extend(openfl_display_DisplayObjectContainer.prototype.__properties__,{get_graphics:"get_graphics"})
});
var Main = function() {
	openfl_display_Sprite.call(this);
	motion_Actuate.defaultEase = motion_easing_Linear.get_easeNone();
	new BattleController();
	this.addChild(BattleController.instance);
	var hero = new BattleUnit("unit_zealon",utils_Team.Left,0,data_UnitParameters.getParametersByID("unit_zealon"));
	BattleController.instance.init(0,2,[hero]);
};
$hxClasses["Main"] = Main;
Main.__name__ = ["Main"];
Main.__super__ = openfl_display_Sprite;
Main.prototype = $extend(openfl_display_Sprite.prototype,{
	__class__: Main
});
var DocumentClass = function() {
	openfl_Lib.current.addChild(this);
	Main.call(this);
	this.dispatchEvent(new openfl_events_Event("addedToStage",false,false));
};
$hxClasses["DocumentClass"] = DocumentClass;
DocumentClass.__name__ = ["DocumentClass"];
DocumentClass.__super__ = Main;
DocumentClass.prototype = $extend(Main.prototype,{
	__class__: DocumentClass
});
var openfl_display_MovieClip = function() {
	openfl_display_Sprite.call(this);
	this.__currentFrame = 0;
	this.__currentLabels = [];
	this.__totalFrames = 0;
	this.enabled = true;
};
$hxClasses["openfl.display.MovieClip"] = openfl_display_MovieClip;
openfl_display_MovieClip.__name__ = ["openfl","display","MovieClip"];
openfl_display_MovieClip.__super__ = openfl_display_Sprite;
openfl_display_MovieClip.prototype = $extend(openfl_display_Sprite.prototype,{
	enabled: null
	,__currentFrame: null
	,__currentFrameLabel: null
	,__currentLabel: null
	,__currentLabels: null
	,__frameScripts: null
	,__totalFrames: null
	,addFrameScript: function(index,method) {
		if(method != null) {
			if(this.__frameScripts == null) {
				this.__frameScripts = new haxe_ds_IntMap();
			}
			this.__frameScripts.h[index] = method;
		} else if(this.__frameScripts != null) {
			this.__frameScripts.remove(index);
		}
	}
	,gotoAndPlay: function(frame,scene) {
	}
	,gotoAndStop: function(frame,scene) {
	}
	,nextFrame: function() {
	}
	,play: function() {
	}
	,prevFrame: function() {
	}
	,stop: function() {
	}
	,__stopAllMovieClips: function() {
		openfl_display_Sprite.prototype.__stopAllMovieClips.call(this);
		this.stop();
	}
	,get_currentFrame: function() {
		return this.__currentFrame;
	}
	,get_currentFrameLabel: function() {
		return this.__currentFrameLabel;
	}
	,get_currentLabel: function() {
		return this.__currentLabel;
	}
	,get_currentLabels: function() {
		return this.__currentLabels;
	}
	,get_framesLoaded: function() {
		return this.__totalFrames;
	}
	,get_totalFrames: function() {
		return this.__totalFrames;
	}
	,__class__: openfl_display_MovieClip
	,__properties__: $extend(openfl_display_Sprite.prototype.__properties__,{get_totalFrames:"get_totalFrames",get_framesLoaded:"get_framesLoaded",get_currentLabels:"get_currentLabels",get_currentLabel:"get_currentLabel",get_currentFrameLabel:"get_currentFrameLabel",get_currentFrame:"get_currentFrame"})
});
var format_swf_lite_MovieClip = function(swf,symbol) {
	openfl_display_MovieClip.call(this);
	this.__swf = swf;
	this.__symbol = symbol;
	this.__lastUpdate = -1;
	this.__objects = new haxe_ds_IntMap();
	this.__zeroSymbol = -1;
	this.__currentFrame = 1;
	this.__totalFrames = this.__symbol.frames.length;
	this.__currentLabels = [];
	var _g1 = 0;
	var _g = this.__symbol.frames.length;
	while(_g1 < _g) {
		var i = _g1++;
		if(this.__symbol.frames[i].label != null) {
			this.__currentLabels.push(new openfl_display_FrameLabel(this.__symbol.frames[i].label,i + 1));
		}
	}
	this.__updateFrame();
	if(this.__totalFrames > 1) {
		this.play();
	}
};
$hxClasses["format.swf.lite.MovieClip"] = format_swf_lite_MovieClip;
format_swf_lite_MovieClip.__name__ = ["format","swf","lite","MovieClip"];
format_swf_lite_MovieClip.__super__ = openfl_display_MovieClip;
format_swf_lite_MovieClip.prototype = $extend(openfl_display_MovieClip.prototype,{
	__frameTime: null
	,__lastUpdate: null
	,__objects: null
	,__playing: null
	,__swf: null
	,__symbol: null
	,__timeElapsed: null
	,__zeroSymbol: null
	,gotoAndPlay: function(frame,scene) {
		this.__currentFrame = this.__getFrame(frame);
		this.__updateFrame();
		this.play();
	}
	,gotoAndStop: function(frame,scene) {
		this.__currentFrame = this.__getFrame(frame);
		this.__updateFrame();
		this.stop();
	}
	,nextFrame: function() {
		var next = this.__currentFrame + 1;
		if(next > this.__totalFrames) {
			next = this.__totalFrames;
		}
		this.gotoAndStop(next);
	}
	,play: function() {
		if(!this.__playing && this.__totalFrames > 1) {
			this.__playing = true;
			this.__frameTime = 1000 / this.__swf.frameRate | 0;
			this.__timeElapsed = 0;
		}
	}
	,prevFrame: function() {
		var previous = this.__currentFrame - 1;
		if(previous < 1) {
			previous = 1;
		}
		this.gotoAndStop(previous);
	}
	,stop: function() {
		if(this.__playing) {
			this.__playing = false;
		}
	}
	,unflatten: function() {
		this.__lastUpdate = -1;
		this.__updateFrame();
	}
	,__applyTween: function(start,end,ratio) {
		return start + (end - start) * ratio;
	}
	,__createObject: function(object) {
		var displayObject = null;
		if(this.__swf.symbols.h.hasOwnProperty(object.symbol)) {
			var symbol = this.__swf.symbols.h[object.symbol];
			if(js_Boot.__instanceof(symbol,format_swf_lite_symbols_SpriteSymbol)) {
				displayObject = new format_swf_lite_MovieClip(this.__swf,symbol);
			} else if(js_Boot.__instanceof(symbol,format_swf_lite_symbols_ShapeSymbol)) {
				displayObject = this.__createShape(symbol);
			} else if(js_Boot.__instanceof(symbol,format_swf_lite_symbols_BitmapSymbol)) {
				displayObject = new openfl_display_Bitmap(this.__getBitmap(symbol),1,true);
			} else if(js_Boot.__instanceof(symbol,format_swf_lite_symbols_DynamicTextSymbol)) {
				displayObject = new format_swf_lite_DynamicTextField(this.__swf,symbol);
			} else if(js_Boot.__instanceof(symbol,format_swf_lite_symbols_StaticTextSymbol)) {
				displayObject = new format_swf_lite_StaticTextField(this.__swf,symbol);
			} else if(js_Boot.__instanceof(symbol,format_swf_lite_symbols_ButtonSymbol)) {
				displayObject = new format_swf_lite_SimpleButton(this.__swf,symbol);
			}
		}
		return displayObject;
	}
	,__createShape: function(symbol) {
		var shape = new openfl_display_Shape();
		var graphics = shape.get_graphics();
		if(symbol.rendered != null) {
			graphics.copyFrom(symbol.rendered.get_graphics());
			return shape;
		}
		var _g = 0;
		var _g1 = symbol.commands;
		while(_g < _g1.length) {
			var command = _g1[_g];
			++_g;
			switch(command[1]) {
			case 0:
				var bitmap = this.__swf.symbols.get(command[2]);
				if(bitmap != null && bitmap.path != "") {
					graphics.beginBitmapFill(this.__getBitmap(bitmap),command[3],command[4],command[5]);
				}
				break;
			case 1:
				graphics.beginFill(command[2],command[3]);
				break;
			case 2:
				graphics.beginGradientFill(command[2],command[3],command[4],command[5],command[6],command[7],command[8],command[9]);
				break;
			case 3:
				graphics.curveTo(command[2],command[3],command[4],command[5]);
				break;
			case 4:
				graphics.endFill();
				break;
			case 5:
				var thickness = command[2];
				if(thickness != null) {
					graphics.lineStyle(thickness,command[3],command[4],command[5],command[6],command[7],command[8],command[9]);
				} else {
					graphics.lineStyle();
				}
				break;
			case 6:
				graphics.lineTo(command[2],command[3]);
				break;
			case 7:
				graphics.moveTo(command[2],command[3]);
				break;
			}
		}
		symbol.commands = null;
		symbol.rendered = new openfl_display_Shape();
		symbol.rendered.get_graphics().copyFrom(shape.get_graphics());
		return shape;
	}
	,__enterFrame: function(deltaTime) {
		if(this.__playing) {
			this.__timeElapsed += deltaTime;
			var advanceFrames = Math.floor(this.__timeElapsed / this.__frameTime);
			this.__timeElapsed %= this.__frameTime;
			if(this.__frameScripts != null) {
				var _g1 = 0;
				while(_g1 < advanceFrames) {
					++_g1;
					this.__currentFrame++;
					if(this.__currentFrame > this.__totalFrames) {
						this.__currentFrame = 1;
					}
					if(this.__frameScripts.h.hasOwnProperty(this.__currentFrame - 1)) {
						this.__frameScripts.h[this.__currentFrame - 1]();
						if(!this.__playing) {
							break;
						}
					}
				}
			} else {
				this.__currentFrame += advanceFrames;
				while(this.__currentFrame > this.__totalFrames) this.__currentFrame -= this.__totalFrames;
			}
			this.__updateFrame();
		}
		openfl_display_MovieClip.prototype.__enterFrame.call(this,deltaTime);
	}
	,__getBitmap: function(symbol) {
		if(openfl_Assets.cache.hasBitmapData(symbol.path)) {
			return openfl_Assets.cache.getBitmapData(symbol.path);
		} else {
			var source = lime_Assets.getImage(symbol.path,false);
			if(source != null && symbol.alpha != null && symbol.alpha != "") {
				var alpha = lime_Assets.getImage(symbol.alpha,false);
				source.copyChannel(alpha,alpha.get_rect(),new lime_math_Vector2(),lime_graphics_ImageChannel.RED,lime_graphics_ImageChannel.ALPHA);
				source.buffer.premultiplied = true;
				source.set_premultiplied(false);
			}
			var bitmapData = openfl_display_BitmapData.fromImage(source);
			openfl_Assets.cache.setBitmapData(symbol.path,bitmapData);
			return bitmapData;
		}
	}
	,__getFrame: function(frame) {
		if(typeof(frame) == "number" && ((frame | 0) === frame)) {
			var index = frame;
			if(index < 1) {
				return 1;
			}
			if(index > this.__totalFrames) {
				return this.__totalFrames;
			}
			return index;
		} else if(typeof(frame) == "string") {
			var label = frame;
			var _g1 = 0;
			var _g = this.__symbol.frames.length;
			while(_g1 < _g) {
				var i = _g1++;
				if(this.__symbol.frames[i].label == label) {
					return i + 1;
				}
			}
		}
		return 1;
	}
	,__placeObject: function(displayObject,frameObject) {
		if(frameObject.name != null) {
			displayObject.set_name(frameObject.name);
		}
		if(frameObject.matrix != null) {
			displayObject.get_transform().set_matrix(frameObject.matrix);
			var dynamicTextField;
			if(js_Boot.__instanceof(displayObject,format_swf_lite_DynamicTextField)) {
				dynamicTextField = displayObject;
				displayObject.set_x(displayObject.get_x() + dynamicTextField.symbol.x);
				displayObject.set_y(displayObject.get_y() + dynamicTextField.symbol.y);
			}
		}
		if(frameObject.colorTransform != null) {
			displayObject.get_transform().set_colorTransform(frameObject.colorTransform);
		}
		if(frameObject.filters != null) {
			var filters = [];
			var _g = 0;
			var _g1 = frameObject.filters;
			while(_g < _g1.length) {
				var filter = _g1[_g];
				++_g;
				switch(filter[1]) {
				case 0:
					filters.push(new openfl_filters_BlurFilter(filter[2],filter[3],filter[4]));
					break;
				case 1:
					filters.push(new openfl_filters_ColorMatrixFilter(filter[2]));
					break;
				case 2:
					filters.push(new openfl_filters_DropShadowFilter(filter[2],filter[3],filter[4],filter[5],filter[6],filter[7],filter[8],filter[9],filter[10],filter[11],filter[12]));
					break;
				case 3:
					filters.push(new openfl_filters_GlowFilter(filter[2],filter[3],filter[4],filter[5],filter[6],filter[7],filter[8],filter[9]));
					break;
				}
			}
			displayObject.set_filters(filters);
		}
		this[displayObject.get_name()] = displayObject;
	}
	,__renderFrame: function(index) {
		var previousIndex = this.__lastUpdate - 1;
		if(previousIndex > index) {
			var displayObject;
			var exists;
			var id = this.__objects.keys();
			while(id.hasNext()) {
				var id1 = id.next();
				exists = false;
				var _g = 0;
				var _g1 = this.__symbol.frames[0].objects;
				while(_g < _g1.length) {
					var frameObject = _g1[_g];
					++_g;
					if(frameObject.id == id1) {
						exists = true;
						break;
					}
				}
				if(!exists) {
					displayObject = this.__objects.h[id1];
					if(displayObject.parent == this) {
						this.removeChild(displayObject);
					}
					this.__objects.remove(id1);
				}
			}
			previousIndex = 0;
		}
		var frame;
		var displayObject1;
		var mask = null;
		var maskObject = null;
		var _g11 = previousIndex;
		var _g2 = index + 1;
		while(_g11 < _g2) {
			var i = _g11++;
			if(i < 0) {
				continue;
			}
			frame = this.__symbol.frames[i];
			var _g21 = 0;
			var _g3 = frame.objects;
			while(_g21 < _g3.length) {
				var frameObject1 = _g3[_g21];
				++_g21;
				if(frameObject1.type != format_swf_lite_timeline_FrameObjectType.DESTROY) {
					if(frameObject1.id == 0 && frameObject1.symbol != this.__zeroSymbol) {
						displayObject1 = this.__objects.h[0];
						if(displayObject1 != null && displayObject1.parent == this) {
							this.removeChild(displayObject1);
						}
						this.__objects.remove(0);
						displayObject1 = null;
						this.__zeroSymbol = frameObject1.symbol;
					}
					if(!this.__objects.h.hasOwnProperty(frameObject1.id)) {
						displayObject1 = this.__createObject(frameObject1);
						if(displayObject1 != null) {
							if(frameObject1.depth >= this.get_numChildren()) {
								this.addChild(displayObject1);
							} else {
								this.addChildAt(displayObject1,frameObject1.depth);
							}
							this.__objects.h[frameObject1.id] = displayObject1;
						}
					} else {
						displayObject1 = this.__objects.h[frameObject1.id];
					}
					if(displayObject1 != null) {
						this.__placeObject(displayObject1,frameObject1);
						if(mask != null) {
							if(mask.clipDepth < frameObject1.depth) {
								mask = null;
							} else {
								displayObject1.set_mask(maskObject);
							}
						} else {
							displayObject1.set_mask(null);
						}
						if(frameObject1.clipDepth != 0) {
							mask = frameObject1;
							displayObject1.set_visible(false);
							maskObject = displayObject1;
						}
					}
				} else if(this.__objects.h.hasOwnProperty(frameObject1.id)) {
					displayObject1 = this.__objects.h[frameObject1.id];
					if(displayObject1 != null && displayObject1.parent == this) {
						this.removeChild(displayObject1);
					}
					this.__objects.remove(frameObject1.id);
				}
			}
		}
	}
	,__updateFrame: function() {
		if(this.__currentFrame != this.__lastUpdate) {
			var frameIndex = this.__currentFrame - 1;
			if(frameIndex > -1) {
				if(this.__symbol.frames.length > frameIndex && this.__symbol.frames[frameIndex] != null) {
					this.__currentFrameLabel = this.__symbol.frames[frameIndex].label;
				} else {
					this.__currentFrameLabel = null;
				}
				if(this.__currentFrameLabel != null) {
					this.__currentLabel = this.__currentFrameLabel;
				} else if(this.__currentFrame != this.__lastUpdate + 1) {
					this.__currentLabel = null;
					var _g = 0;
					var _g1 = this.__currentLabels;
					while(_g < _g1.length) {
						var label = _g1[_g];
						++_g;
						if(label.get_frame() <= this.__currentFrame) {
							this.__currentLabel = label.get_name();
						} else {
							break;
						}
					}
				}
				this.__renderFrame(frameIndex);
			}
			this.__renderDirty = true;
			openfl_display_DisplayObject.__worldRenderDirty++;
		}
		this.__lastUpdate = this.__currentFrame;
	}
	,__class__: format_swf_lite_MovieClip
});
var Archghost = function() {
	var _this = format_swf_lite_SWFLite.instances;
	if(!(__map_reserved["lib/AssetSource/AssetSource.dat"] != null ? _this.existsReserved("lib/AssetSource/AssetSource.dat") : _this.h.hasOwnProperty("lib/AssetSource/AssetSource.dat"))) {
		var this1 = format_swf_lite_SWFLite.instances;
		var value = format_swf_lite_SWFLite.unserialize(openfl_Assets.getText("lib/AssetSource/AssetSource.dat"));
		var _this1 = this1;
		if(__map_reserved["lib/AssetSource/AssetSource.dat"] != null) {
			_this1.setReserved("lib/AssetSource/AssetSource.dat",value);
		} else {
			_this1.h["lib/AssetSource/AssetSource.dat"] = value;
		}
	}
	var _this2 = format_swf_lite_SWFLite.instances;
	var swfLite = __map_reserved["lib/AssetSource/AssetSource.dat"] != null ? _this2.getReserved("lib/AssetSource/AssetSource.dat") : _this2.h["lib/AssetSource/AssetSource.dat"];
	format_swf_lite_MovieClip.call(this,swfLite,swfLite.symbols.h[10]);
};
$hxClasses["Archghost"] = Archghost;
Archghost.__name__ = ["Archghost"];
Archghost.__super__ = format_swf_lite_MovieClip;
Archghost.prototype = $extend(format_swf_lite_MovieClip.prototype,{
	__class__: Archghost
});
var BattleAbility = function(id) {
	this.id = id;
	if(!(this.id == "ability_empty" || this.id == "ability_locked")) {
		var params = data_AbilityParameters.getParametersByID(id);
		this.name = params.name;
		this.type = params.type;
		this._cooldown = new utils_Countdown(params.delay,params.cooldown);
		this.manacost = params.manacost;
		this.possibleTarget = params.target;
		this.element = params.element;
	}
};
$hxClasses["BattleAbility"] = BattleAbility;
BattleAbility.__name__ = ["BattleAbility"];
BattleAbility.prototype = {
	id: null
	,name: null
	,type: null
	,possibleTarget: null
	,element: null
	,_cooldown: null
	,cooldown: null
	,manacost: null
	,'use': function(target,caster) {
		data_AbilityBehaviours.useAbility(this.id,target,caster,this.element);
		BattleController.instance.changeUnitMana(caster,caster,-this.manacost,utils_DamageSource.God);
		this._cooldown.value = this._cooldown.keyValue;
	}
	,tick: function() {
		if(this._cooldown.value > 0) {
			this._cooldown.value--;
		}
	}
	,checkOnCooldown: function() {
		return this._cooldown.value > 0;
	}
	,checkEmpty: function() {
		if(this.id != "ability_empty") {
			return this.id == "ability_locked";
		} else {
			return true;
		}
	}
	,checkValidity: function(target,caster) {
		var relation = caster.figureRelation(target);
		switch(this.possibleTarget[1]) {
		case 0:
			return relation == utils_UnitType.Self;
		case 1:
			if(relation != utils_UnitType.Ally) {
				return relation == utils_UnitType.Self;
			} else {
				return true;
			}
			break;
		case 2:
			return relation == utils_UnitType.Enemy;
		case 3:
			return true;
		}
	}
	,get_cooldown: function() {
		return this._cooldown.value;
	}
	,__class__: BattleAbility
	,__properties__: {get_cooldown:"get_cooldown"}
};
var BattleController = function() {
	openfl_display_Sprite.call(this);
	BattleController.instance = this;
};
$hxClasses["BattleController"] = BattleController;
BattleController.__name__ = ["BattleController"];
BattleController.__super__ = openfl_display_Sprite;
BattleController.prototype = $extend(openfl_display_Sprite.prototype,{
	model: null
	,vision: null
	,inputMode: null
	,chosenAbility: null
	,changeUnitHP: function(target,caster,delta,element,source) {
		var finalValue = this.model.changeUnitHP(target,caster,delta,source);
		this.vision.changeUnitHP(target,finalValue,element,source);
		if(target.hpPool.value == 0) {
			this.vision.die(target.team,target.position);
		}
	}
	,changeUnitMana: function(target,caster,delta,source) {
		var finalValue = this.model.changeUnitMana(target,caster,delta,source);
		this.vision.changeUnitMana(target,finalValue);
	}
	,castBuff: function(id,target,caster,duration) {
		this.model.castBuff(id,target,caster,duration);
	}
	,dispellBuffs: function(target,elements,count) {
		if(count == null) {
			count = -1;
		}
		this.model.dispellBuffs(target,elements,count);
	}
	,chooseAbility: function(num) {
		switch(this.model.chooseAbility(num)[1]) {
		case 0:
			this.inputMode = utils_InputMode.Targeting;
			this.chosenAbility = num;
			break;
		case 1:
			this.vision.printWarning("There is no ability in this slot");
			break;
		case 2:
			this.vision.printWarning("Not enough mana");
			break;
		case 3:
			this.vision.printWarning("This ability is currently on cooldown");
			break;
		}
	}
	,target: function(team,pos) {
		switch(this.model.target(team,pos)[1]) {
		case 0:
			this.inputMode = utils_InputMode.None;
			this.chosenAbility = -1;
			this.model.useChosenAbility(team,pos);
			break;
		case 1:
			this.vision.printWarning("Chosen ability cannot be used on this target");
			this.chosenAbility = -1;
			this.inputMode = utils_InputMode.Choosing;
			break;
		case 2:case 3:
			break;
		}
	}
	,useAbility: function(target,caster,ability,mode) {
		if(mode == utils_BattleControllerUseMode.Begin) {
			this.vision.useAbility(target,caster,ability);
		} else if(mode == utils_BattleControllerUseMode.Continue) {
			this.model.useAbility(target,caster,ability);
			if(this.model.isHero(caster)) {
				this.totalProcessing();
			}
		}
	}
	,printAbilityInfo: function(num) {
		this.vision.printAbilityInfo(this.model.getAbilityInfo(num));
	}
	,printUnitInfo: function(team,pos) {
		this.vision.printUnitInfo(this.model.getUnitInfo(team,pos));
	}
	,totalProcessing: function() {
		if(!this.process()) {
			this.end(this.model.defineWinner());
		} else {
			this.inputMode = utils_InputMode.Choosing;
		}
	}
	,process: function() {
		if(!this.model.bothTeamsAlive()) {
			return false;
		}
		this.model.tickHero();
		if(!this.model.bothTeamsAlive()) {
			return false;
		}
		if(!this.model.processBots()) {
			return false;
		}
		return true;
	}
	,end: function(winner) {
		if(winner == utils_Team.Left) {
			this.vision.printWarning("You won!!!");
		} else if(winner == utils_Team.Right) {
			this.vision.printWarning("You lost(");
		} else {
			this.vision.printWarning("A draw...");
		}
	}
	,init: function(zone,stage,allies) {
		var enemyIDs = data_StageEnemies.getIDsByStage(zone,stage);
		var enemies = [];
		var _g1 = 0;
		var _g = enemyIDs.length;
		while(_g1 < _g) {
			var i = _g1++;
			enemies.push(new BattleUnit(enemyIDs[i],utils_Team.Right,i));
		}
		this.model = new BattleModel(allies,enemies);
		this.vision = new BattleVision();
		this.addChild(this.vision);
		this.vision.init(zone,allies,enemies);
		this.chosenAbility = -1;
		this.inputMode = utils_InputMode.Choosing;
	}
	,__class__: BattleController
});
var BattleModel = function(allies,enemies) {
	this.allies = allies;
	this.enemies = enemies;
};
$hxClasses["BattleModel"] = BattleModel;
BattleModel.__name__ = ["BattleModel"];
BattleModel.prototype = {
	allies: null
	,enemies: null
	,chosenAbility: null
	,changeUnitHP: function(target,caster,delta,source) {
		var processedDelta = delta;
		if(source != utils_DamageSource.God) {
			if(delta > 0) {
				processedDelta = Math.round(delta * target.inputHealMultiplier * caster.outputHealMultiplier);
			} else {
				processedDelta = Math.round(delta * target.inputDamageMultiplier * caster.outputDamageMultiplier);
			}
		}
		var _g = target.hpPool;
		_g.set_value(_g.value + processedDelta);
		return processedDelta;
	}
	,changeUnitMana: function(target,caster,delta,source) {
		var _g = target.manaPool;
		_g.set_value(_g.value + delta);
		return delta;
	}
	,castBuff: function(id,target,caster,duration) {
		target.buffQueue.addBuff(new Buff(id,target,caster,duration));
	}
	,dispellBuffs: function(target,elements,count) {
		if(count == null) {
			count = -1;
		}
		target.buffQueue.dispell(elements,count);
		return target.buffQueue.queue;
	}
	,chooseAbility: function(num) {
		var hero = this.allies[0];
		var ability = hero.wheel.get(num);
		haxe_Log.trace("Checking validity of chosen ability",{ fileName : "BattleModel.hx", lineNumber : 69, className : "BattleModel", methodName : "chooseAbility"});
		if(ability.id == "ability_empty" || ability.id == "ability_locked") {
			return returns_ChooseResult.Empty;
		}
		if(ability._cooldown.value > 0) {
			return returns_ChooseResult.Cooldown;
		}
		if(hero.manaPool.value < hero.wheel.get(num).manacost) {
			return returns_ChooseResult.Manacost;
		}
		haxe_Log.trace("Checkers complete",{ fileName : "BattleModel.hx", lineNumber : 76, className : "BattleModel", methodName : "chooseAbility"});
		this.chosenAbility = hero.wheel.get(num);
		haxe_Log.trace(this.chosenAbility,{ fileName : "BattleModel.hx", lineNumber : 78, className : "BattleModel", methodName : "chooseAbility"});
		return returns_ChooseResult.Ok;
	}
	,target: function(team,pos) {
		var array = team == utils_Team.Left ? this.allies : this.enemies;
		if(pos >= array.length) {
			return returns_TargetResult.Nonexistent;
		}
		if(array[pos].hpPool.value == 0) {
			return returns_TargetResult.Dead;
		}
		var relation = this.allies[0].figureRelation(array[pos]);
		var tmp;
		switch(this.chosenAbility.possibleTarget[1]) {
		case 0:
			tmp = relation == utils_UnitType.Self;
			break;
		case 1:
			if(relation != utils_UnitType.Ally) {
				tmp = relation == utils_UnitType.Self;
			} else {
				tmp = true;
			}
			break;
		case 2:
			tmp = relation == utils_UnitType.Enemy;
			break;
		case 3:
			tmp = true;
			break;
		}
		if(!tmp) {
			return returns_TargetResult.Invalid;
		}
		return returns_TargetResult.Ok;
	}
	,useChosenAbility: function(team,pos) {
		BattleController.instance.useAbility((team == utils_Team.Left ? this.allies : this.enemies)[pos],this.allies[0],this.chosenAbility,utils_BattleControllerUseMode.Begin);
	}
	,useAbility: function(target,caster,ability) {
		haxe_Log.trace("Used ability: " + ability.name,{ fileName : "BattleModel.hx", lineNumber : 105, className : "BattleModel", methodName : "useAbility"});
		ability["use"](target,caster);
		return returns_UseResult.Ok;
	}
	,getAbilityInfo: function(num) {
		var info = new dataobj_AbilityInfo();
		var ability = this.allies[0].wheel.get(num);
		info.name = ability.name;
		info.type = ability.type;
		info.target = ability.possibleTarget;
		info.manacost = ability.manacost;
		info.currentCooldown = ability.get_cooldown();
		info.maxCooldown = data_AbilityParameters.getParametersByID(ability.id).cooldown;
		return info;
	}
	,getUnitInfo: function(team,pos) {
		var info = new dataobj_UnitInfo();
		var array = team == utils_Team.Left ? this.allies : this.enemies;
		info.name = array[pos].name;
		info.buffQueue = array[pos].buffQueue;
		return info;
	}
	,processBots: function() {
		var bots = this.allies.slice(1).concat(this.enemies);
		var _g = 0;
		while(_g < bots.length) {
			var bot = bots[_g];
			++_g;
			if(bot.hpPool.value > 0) {
				var decision = data_BotTactics.decide(bot.id,this.allies,this.enemies);
				bot.useAbility((decision.targetTeam == utils_Team.Left ? this.allies : this.enemies)[decision.targetPos],decision.abilityPos);
				if(!this.bothTeamsAlive()) {
					return false;
				}
			}
			if(bot.hpPool.value > 0) {
				bot.tick();
				if(!this.bothTeamsAlive()) {
					return false;
				}
			}
		}
		return true;
	}
	,tickHero: function() {
		if(this.allies[0].hpPool.value > 0) {
			this.allies[0].tick();
		}
	}
	,tick: function(team,pos) {
		(team == utils_Team.Left ? this.allies : this.enemies)[pos].tick();
	}
	,checkAlive: function(array) {
		var _g = 0;
		while(_g < array.length) {
			var unit = array[_g];
			++_g;
			if(unit.hpPool.value > 0) {
				return true;
			}
		}
		return false;
	}
	,bothTeamsAlive: function() {
		if(this.checkAlive(this.allies)) {
			return this.checkAlive(this.enemies);
		} else {
			return false;
		}
	}
	,defineWinner: function() {
		if(this.checkAlive(this.allies)) {
			return utils_Team.Left;
		} else if(this.checkAlive(this.enemies)) {
			return utils_Team.Right;
		} else {
			return null;
		}
	}
	,isHero: function(unit) {
		return this.allies[0].id == unit.id;
	}
	,__class__: BattleModel
};
var BattleUnit = function(id,team,position,parameters) {
	if(false == (position >= 0 && position <= 2)) {
		hxassert_Assert.throwAssertionFailureError(["Assertion failed: position >= 0 && position <= 2"],{ fileName : "BattleUnit.hx", lineNumber : 49, className : "BattleUnit", methodName : "new"});
	}
	if(parameters == null) {
		parameters = data_UnitParameters.getParametersByID(id);
	}
	this.id = id;
	this.name = parameters.name;
	this.team = team;
	this.position = position;
	this.wheel = new BattleWheel(parameters.wheel,8);
	this.hpPool = new utils_Pool(parameters.hp,parameters.hp);
	this.manaPool = new utils_Pool(parameters.mana,parameters.mana);
	this.buffQueue = new BuffQueue();
	this.strength = parameters.strength;
	this.flow = parameters.flow;
	this.intellect = parameters.intellect;
	this.inputDamageMultiplier = 1;
	this.outputDamageMultiplier = 1;
	this.inputHealMultiplier = 1;
	this.outputHealMultiplier = 1;
};
$hxClasses["BattleUnit"] = BattleUnit;
BattleUnit.__name__ = ["BattleUnit"];
BattleUnit.prototype = {
	id: null
	,name: null
	,team: null
	,position: null
	,wheel: null
	,hpPool: null
	,manaPool: null
	,buffQueue: null
	,strength: null
	,flow: null
	,intellect: null
	,inputDamageMultiplier: null
	,outputDamageMultiplier: null
	,inputHealMultiplier: null
	,outputHealMultiplier: null
	,useAbility: function(target,abilityNum) {
		if(false == (abilityNum >= 0 && abilityNum <= 10)) {
			hxassert_Assert.throwAssertionFailureError(["Assertion failed: abilityNum >= 0 && abilityNum <= 10"],{ fileName : "BattleUnit.hx", lineNumber : 37, className : "BattleUnit", methodName : "useAbility"});
		}
		this.wheel.get(abilityNum)["use"](target,this);
	}
	,tick: function() {
		this.wheel.tick();
		this.buffQueue.tick();
	}
	,figureRelation: function(unit) {
		if(this.team != unit.team) {
			return utils_UnitType.Enemy;
		} else if(this.position == unit.position) {
			return utils_UnitType.Self;
		} else {
			return utils_UnitType.Ally;
		}
	}
	,checkManacost: function(abilityNum) {
		return this.manaPool.value >= this.wheel.get(abilityNum).manacost;
	}
	,__class__: BattleUnit
};
var BattleVision = function() {
	openfl_display_Sprite.call(this);
};
$hxClasses["BattleVision"] = BattleVision;
BattleVision.__name__ = ["BattleVision"];
BattleVision.abilityX = function(i) {
	return 15 + i * 70;
};
BattleVision.unitX = function(pos,team) {
	if(pos == 0) {
		if(team == utils_Team.Left) {
			return 235;
		} else {
			return 600;
		}
	} else if(pos == 1 || pos == 2) {
		if(team == utils_Team.Left) {
			return 100;
		} else {
			return 735;
		}
	} else {
		return -1;
	}
};
BattleVision.unitY = function(pos) {
	if(pos == 0) {
		return 215;
	} else if(pos == 1) {
		return 355;
	} else if(pos == 2) {
		return 105;
	} else {
		return -1;
	}
};
BattleVision.unitInfoX = function(team,type) {
	if(type == "name") {
		if(team == utils_Team.Left) {
			return 3;
		} else {
			return 564;
		}
	} else if(type == "hp") {
		if(team == utils_Team.Left) {
			return 180;
		} else {
			return 742;
		}
	} else if(type == "mana") {
		if(team == utils_Team.Left) {
			return 267;
		} else {
			return 828;
		}
	} else {
		return -1;
	}
};
BattleVision.unitInfoY = function(pos) {
	if(pos == 0) {
		return 28;
	} else if(pos == 1) {
		return 53;
	} else if(pos == 2) {
		return 4;
	} else {
		return -1;
	}
};
BattleVision.__super__ = openfl_display_Sprite;
BattleVision.prototype = $extend(openfl_display_Sprite.prototype,{
	bg: null
	,upperBar: null
	,bottomBar: null
	,skipTurn: null
	,leaveBattle: null
	,alliesVision: null
	,enemiesVision: null
	,abilitiesVision: null
	,allyNames: null
	,allyHPs: null
	,allyManas: null
	,enemyNames: null
	,enemyHPs: null
	,enemyManas: null
	,changeUnitHP: function(target,delta,element,source) {
		if(target.team == utils_Team.Left) {
			this.allyHPs[target.position].set_text(target.hpPool.value + "/" + target.hpPool.maxValue);
		} else if(target.team == utils_Team.Right) {
			this.enemyHPs[target.position].set_text(target.hpPool.value + "/" + target.hpPool.maxValue);
		}
	}
	,changeUnitMana: function(target,delta) {
		if(target.team == utils_Team.Left) {
			this.allyManas[target.position].set_text(target.manaPool.value + "/" + target.manaPool.maxValue);
		} else if(target.team == utils_Team.Right) {
			this.enemyManas[target.position].set_text(target.manaPool.value + "/" + target.manaPool.maxValue);
		}
	}
	,castBuff: function(id,duration) {
	}
	,redrawBuffs: function(target,buffs) {
	}
	,selectAbility: function(num) {
	}
	,deselectAbility: function(num) {
	}
	,target: function(team,pos) {
	}
	,useAbility: function(target,caster,ability) {
		if(ability.type == utils_AbilityType.Bolt) {
			var animation = ability.element[1] == 2 ? new LightningBolt() : new LightningBolt();
			var actuator;
			var pos = caster.position;
			var team = caster.team;
			var pos1 = caster.position;
			this.add(animation,pos == 0 ? team == utils_Team.Left ? 235 : 600 : pos == 1 || pos == 2 ? team == utils_Team.Left ? 100 : 735 : -1,(pos1 == 0 ? 215 : pos1 == 1 ? 355 : pos1 == 2 ? 105 : -1) + 50);
			animation.play();
			var pos2 = target.position;
			var team1 = target.team;
			var pos3 = target.position;
			actuator = motion_Actuate.tween(animation,0.7,{ x : pos2 == 0 ? team1 == utils_Team.Left ? 235 : 600 : pos2 == 1 || pos2 == 2 ? team1 == utils_Team.Left ? 100 : 735 : -1, y : (pos3 == 0 ? 215 : pos3 == 1 ? 355 : pos3 == 2 ? 105 : -1) + 50});
			actuator.onComplete($bind(this,this.onUseAnimOver),[target,caster,ability,animation]);
			actuator.ease(motion_easing_Quad.get_easeIn());
		} else if(ability.type == utils_AbilityType.Kick) {
			var actuator1;
			var pos4 = target.position;
			var team2 = target.team;
			var pos5 = target.position;
			actuator1 = motion_Actuate.tween(this.getUnit(caster.team,caster.position),0.5,{ x : (pos4 == 0 ? team2 == utils_Team.Left ? 235 : 600 : pos4 == 1 || pos4 == 2 ? team2 == utils_Team.Left ? 100 : 735 : -1) - 20, y : pos5 == 0 ? 215 : pos5 == 1 ? 355 : pos5 == 2 ? 105 : -1});
			actuator1.onComplete($bind(this,this.onKickINTweenOver),[target,caster,ability]);
			actuator1.ease(motion_easing_Cubic.get_easeOut());
		} else {
			this.onUseAnimOver(target,caster,ability);
		}
	}
	,unitMiss: function(target) {
	}
	,die: function(team,pos) {
		this.remove(this.getUnit(team,pos));
	}
	,printAbilityInfo: function(info) {
		var targetString;
		switch(info.target[1]) {
		case 0:
			targetString = "self";
			break;
		case 1:
			targetString = "allies & self";
			break;
		case 2:
			targetString = "enemies";
			break;
		case 3:
			targetString = "all targets";
			break;
		}
		js_Browser.alert(info.name + "\n\nCooldown: " + info.currentCooldown + "/" + (info.maxCooldown - 1) + ", Manacost: " + info.manacost + "\nType: " + Std.string(info.type) + "\nPossible targets: " + targetString);
	}
	,printUnitInfo: function(info) {
		var buffString = "";
		var _g = 0;
		var _g1 = info.buffQueue.queue;
		while(_g < _g1.length) {
			var buff = _g1[_g];
			++_g;
			if(buffString != "") {
				buffString += ";\n";
			}
			buffString += buff.name + "(" + buff.duration + ")" + ", Element: " + Std.string(buff.element);
		}
		js_Browser.alert(info.name + "\n\nBuffs: \n" + buffString);
	}
	,printWarning: function(text) {
		js_Browser.alert(text);
	}
	,init: function(zone,allies,enemies) {
		this.bg = data_Assets.getBattleBGByZone(zone);
		this.upperBar = new UpperBattleBar();
		this.bottomBar = new BottomBattleBar();
		this.skipTurn = new SkipTurn();
		this.leaveBattle = new LeaveBattle();
		this.alliesVision = [];
		this.enemiesVision = [];
		this.abilitiesVision = [];
		this.allyNames = [];
		this.allyHPs = [];
		this.allyManas = [];
		this.enemyNames = [];
		this.enemyHPs = [];
		this.enemyManas = [];
		var _g = 0;
		while(_g < allies.length) {
			var ally = allies[_g];
			++_g;
			this.alliesVision.push(data_Assets.getAssetByID(ally.id));
		}
		var _g1 = 0;
		while(_g1 < enemies.length) {
			var enemy = enemies[_g1];
			++_g1;
			this.enemiesVision.push(data_Assets.getAssetByID(enemy.id));
		}
		var _g2 = 0;
		while(_g2 < 10) this.abilitiesVision.push(data_Assets.getAssetByID(allies[0].wheel.get(_g2++).id));
		var _g3 = 0;
		while(_g3 < allies.length) {
			var ally1 = allies[_g3];
			++_g3;
			this.addTextfield(this.allyNames,ally1.name,"Trebuchet MS",12);
			this.addTextfield(this.allyHPs,ally1.hpPool.value + "/" + ally1.hpPool.maxValue,"Tw Cen MT Condensed",16,39168,true);
			this.addTextfield(this.allyManas,ally1.manaPool.value + "/" + ally1.manaPool.maxValue,"Tw Cen MT Condensed",16,26265,true);
		}
		var _g4 = 0;
		while(_g4 < enemies.length) {
			var enemy1 = enemies[_g4];
			++_g4;
			this.addTextfield(this.enemyNames,enemy1.name,"Trebuchet MS",12);
			this.addTextfield(this.enemyHPs,enemy1.hpPool.value + "/" + enemy1.hpPool.maxValue,"Tw Cen MT Condensed",16,39168,true);
			this.addTextfield(this.enemyManas,enemy1.manaPool.value + "/" + enemy1.manaPool.maxValue,"Tw Cen MT Condensed",16,26265,true);
		}
		this.add(this.bg,-37.5,-17.5);
		this.add(this.upperBar,4,0);
		this.add(this.bottomBar,4.85,515.7);
		this.add(this.skipTurn,766,537);
		this.add(this.leaveBattle,830,537);
		var _g11 = 0;
		var _g5 = this.alliesVision.length;
		while(_g11 < _g5) {
			var i = _g11++;
			var team = utils_Team.Left;
			this.add(this.alliesVision[i],i == 0 ? team == utils_Team.Left ? 235 : 600 : i == 1 || i == 2 ? team == utils_Team.Left ? 100 : 735 : -1,i == 0 ? 215 : i == 1 ? 355 : i == 2 ? 105 : -1);
		}
		var _g12 = 0;
		var _g6 = this.enemiesVision.length;
		while(_g12 < _g6) {
			var i1 = _g12++;
			var team1 = utils_Team.Right;
			this.add(this.enemiesVision[i1],i1 == 0 ? team1 == utils_Team.Left ? 235 : 600 : i1 == 1 || i1 == 2 ? team1 == utils_Team.Left ? 100 : 735 : -1,i1 == 0 ? 215 : i1 == 1 ? 355 : i1 == 2 ? 105 : -1);
		}
		var _g7 = 0;
		while(_g7 < 10) {
			var i2 = _g7++;
			this.add(this.abilitiesVision[i2],15 + i2 * 70,533);
		}
		var _g13 = 0;
		var _g8 = allies.length;
		while(_g13 < _g8) {
			var i3 = _g13++;
			this.add(this.allyNames[i3],true ? 3 : 564,i3 == 0 ? 28 : i3 == 1 ? 53 : i3 == 2 ? 4 : -1);
			this.add(this.allyHPs[i3],true ? 180 : 742,i3 == 0 ? 28 : i3 == 1 ? 53 : i3 == 2 ? 4 : -1);
			this.add(this.allyManas[i3],true ? 267 : 828,i3 == 0 ? 28 : i3 == 1 ? 53 : i3 == 2 ? 4 : -1);
		}
		var _g14 = 0;
		var _g9 = enemies.length;
		while(_g14 < _g9) {
			var i4 = _g14++;
			this.add(this.enemyNames[i4],false ? 3 : 564,i4 == 0 ? 28 : i4 == 1 ? 53 : i4 == 2 ? 4 : -1);
			this.add(this.enemyHPs[i4],false ? 180 : 742,i4 == 0 ? 28 : i4 == 1 ? 53 : i4 == 2 ? 4 : -1);
			this.add(this.enemyManas[i4],false ? 267 : 828,i4 == 0 ? 28 : i4 == 1 ? 53 : i4 == 2 ? 4 : -1);
		}
		this.stage.addEventListener("keyDown",$bind(this,this.keyHandler));
		this.stage.addEventListener("click",$bind(this,this.clickHandler));
	}
	,keyHandler: function(e) {
		haxe_Log.trace("key handled",{ fileName : "BattleVision.hx", lineNumber : 263, className : "BattleVision", methodName : "keyHandler"});
		if(utils_MathUtils.inRange(e.keyCode,49,57)) {
			haxe_Log.trace("in range",{ fileName : "BattleVision.hx", lineNumber : 266, className : "BattleVision", methodName : "keyHandler"});
			if(e.shiftKey) {
				BattleController.instance.printAbilityInfo(e.keyCode - 49);
			} else if(BattleController.instance.inputMode != utils_InputMode.None) {
				haxe_Log.trace("sufficent mode",{ fileName : "BattleVision.hx", lineNumber : 271, className : "BattleVision", methodName : "keyHandler"});
				BattleController.instance.chooseAbility(e.keyCode - 49);
			}
		}
	}
	,clickHandler: function(e) {
		var point = new openfl_geom_Point(e.stageX,e.stageY);
		haxe_Log.trace("click handled: " + point.x + ", " + point.y,{ fileName : "BattleVision.hx", lineNumber : 280, className : "BattleVision", methodName : "clickHandler"});
		var _g = 0;
		var _g1 = utils_Team.__empty_constructs__;
		while(_g < _g1.length) {
			var team = _g1[_g];
			++_g;
			var _g2 = 0;
			while(_g2 < 3) {
				var i = _g2++;
				var sample = new Ghost();
				var field = new openfl_geom_Rectangle(i == 0 ? team == utils_Team.Left ? 235 : 600 : i == 1 || i == 2 ? team == utils_Team.Left ? 100 : 735 : -1,i == 0 ? 215 : i == 1 ? 355 : i == 2 ? 105 : -1,sample.get_width(),sample.get_height());
				if(point.x >= field.x && point.x <= field.x + field.width && (point.y >= field.y && point.y <= field.y + field.height)) {
					haxe_Log.trace("Overlap found: " + team[0] + ", " + i,{ fileName : "BattleVision.hx", lineNumber : 286, className : "BattleVision", methodName : "clickHandler"});
					if(e.shiftKey) {
						BattleController.instance.printUnitInfo(team,i);
					} else if(BattleController.instance.inputMode == utils_InputMode.Targeting) {
						BattleController.instance.target(team,i);
					}
					return;
				}
			}
		}
		if(utils_MathUtils.getDistance(point,new openfl_geom_Point(787,558)) <= 22) {
			if(BattleController.instance.inputMode != utils_InputMode.None) {
				BattleController.instance.inputMode = utils_InputMode.None;
				BattleController.instance.totalProcessing();
			}
			return;
		} else if(utils_MathUtils.getDistance(point,new openfl_geom_Point(851,559)) <= 22) {
			BattleController.instance.inputMode = utils_InputMode.None;
			BattleController.instance.end(utils_Team.Right);
			return;
		}
	}
	,onKickINTweenOver: function(target,caster,ability) {
		motion_Actuate.timer(1).onComplete($bind(this,this.onKickWaitOver),[target,caster,ability]);
	}
	,onKickWaitOver: function(target,caster,ability) {
		var actuator;
		var pos = caster.position;
		var team = caster.team;
		var pos1 = caster.position;
		actuator = motion_Actuate.tween(this.getUnit(caster.team,caster.position),0.5,{ x : pos == 0 ? team == utils_Team.Left ? 235 : 600 : pos == 1 || pos == 2 ? team == utils_Team.Left ? 100 : 735 : -1, y : pos1 == 0 ? 215 : pos1 == 1 ? 355 : pos1 == 2 ? 105 : -1});
		actuator.onComplete($bind(this,this.onUseAnimOver),[target,caster,ability]);
		actuator.ease(motion_easing_Cubic.get_easeOut());
	}
	,onUseAnimOver: function(target,caster,ability,animation) {
		if(animation != null) {
			this.remove(animation);
		}
		BattleController.instance.useAbility(target,caster,ability,utils_BattleControllerUseMode.Continue);
	}
	,getUnitBounds: function(pos,team) {
		var sample = new Ghost();
		return new openfl_geom_Rectangle(pos == 0 ? team == utils_Team.Left ? 235 : 600 : pos == 1 || pos == 2 ? team == utils_Team.Left ? 100 : 735 : -1,pos == 0 ? 215 : pos == 1 ? 355 : pos == 2 ? 105 : -1,sample.get_width(),sample.get_height());
	}
	,addTextfield: function(targetArray,text,font,size,color,bold) {
		var t = new openfl_text_TextField();
		var format = new openfl_text_TextFormat(font,size,color,bold);
		t.set_text(text);
		t.setTextFormat(format);
		targetArray.push(t);
	}
	,add: function(object,x,y) {
		this.addChild(object);
		object.set_x(x);
		object.set_y(y);
	}
	,remove: function(object) {
		this.removeChild(object);
	}
	,getUnit: function(team,pos) {
		return (team == utils_Team.Left ? this.alliesVision : this.enemiesVision)[pos];
	}
	,__class__: BattleVision
});
var BattleWheel = function(pool,numOfSlots) {
	if(false == (pool.length <= numOfSlots && numOfSlots >= 8 && numOfSlots <= 10)) {
		hxassert_Assert.throwAssertionFailureError(["Assertion failed: pool.length <= numOfSlots && numOfSlots >= 8 && numOfSlots <= 10"],{ fileName : "BattleWheel.hx", lineNumber : 36, className : "BattleWheel", methodName : "new"});
	}
	this.wheel = [];
	var _g = 0;
	while(_g < pool.length) {
		var id = pool[_g];
		++_g;
		this.wheel.push(new BattleAbility(id));
	}
	var _g1 = pool.length;
	while(_g1 < numOfSlots) this.wheel[_g1++] = new BattleAbility("ability_empty");
	var _g2 = numOfSlots;
	while(_g2 < 10) this.wheel[_g2++] = new BattleAbility("ability_locked");
	this.numOfSlots = numOfSlots;
};
$hxClasses["BattleWheel"] = BattleWheel;
BattleWheel.__name__ = ["BattleWheel"];
BattleWheel.prototype = {
	wheel: null
	,numOfSlots: null
	,get: function(pos) {
		if(false == (pos >= 0 && pos <= 9)) {
			hxassert_Assert.throwAssertionFailureError(["Assertion failed: pos >= 0 && pos <= 9"],{ fileName : "BattleWheel.hx", lineNumber : 17, className : "BattleWheel", methodName : "get"});
		}
		return this.wheel[pos];
	}
	,set: function(pos,ability) {
		if(false == (pos >= 0 && pos <= 9)) {
			hxassert_Assert.throwAssertionFailureError(["Assertion failed: pos >= 0 && pos <= 9"],{ fileName : "BattleWheel.hx", lineNumber : 23, className : "BattleWheel", methodName : "set"});
		}
		return this.wheel[pos] = ability;
	}
	,tick: function() {
		var _g = 0;
		var _g1 = this.wheel;
		while(_g < _g1.length) {
			var ability = _g1[_g];
			++_g;
			if(!(ability.id == "ability_empty" || ability.id == "ability_locked")) {
				ability.tick();
			}
		}
	}
	,__class__: BattleWheel
};
var BottomBattleBar = function() {
	var _this = format_swf_lite_SWFLite.instances;
	if(!(__map_reserved["lib/AssetSource/AssetSource.dat"] != null ? _this.existsReserved("lib/AssetSource/AssetSource.dat") : _this.h.hasOwnProperty("lib/AssetSource/AssetSource.dat"))) {
		var this1 = format_swf_lite_SWFLite.instances;
		var value = format_swf_lite_SWFLite.unserialize(openfl_Assets.getText("lib/AssetSource/AssetSource.dat"));
		var _this1 = this1;
		if(__map_reserved["lib/AssetSource/AssetSource.dat"] != null) {
			_this1.setReserved("lib/AssetSource/AssetSource.dat",value);
		} else {
			_this1.h["lib/AssetSource/AssetSource.dat"] = value;
		}
	}
	var _this2 = format_swf_lite_SWFLite.instances;
	var swfLite = __map_reserved["lib/AssetSource/AssetSource.dat"] != null ? _this2.getReserved("lib/AssetSource/AssetSource.dat") : _this2.h["lib/AssetSource/AssetSource.dat"];
	format_swf_lite_MovieClip.call(this,swfLite,swfLite.symbols.h[49]);
};
$hxClasses["BottomBattleBar"] = BottomBattleBar;
BottomBattleBar.__name__ = ["BottomBattleBar"];
BottomBattleBar.__super__ = format_swf_lite_MovieClip;
BottomBattleBar.prototype = $extend(format_swf_lite_MovieClip.prototype,{
	__class__: BottomBattleBar
});
var Buff = function(id,target,caster,duration) {
	var params = data_BuffParameters.getParametersByID(id);
	this.id = id;
	this.name = params.name;
	this.element = params.element;
	this.isOverTime = params.isOverTime;
	this.isStackable = params.isStackable;
	this.owner = target;
	this.caster = caster;
	this.duration = duration;
};
$hxClasses["Buff"] = Buff;
Buff.__name__ = ["Buff"];
Buff.prototype = {
	id: null
	,name: null
	,element: null
	,isOverTime: null
	,isStackable: null
	,owner: null
	,caster: null
	,duration: null
	,tickAndCheckEnded: function() {
		if(this.isOverTime) {
			this.act(utils_BuffMode.OverTime);
		}
		this.duration--;
		if(this.duration == 0) {
			return true;
		} else {
			return false;
		}
	}
	,onCast: function() {
		this.act(utils_BuffMode.Cast);
	}
	,onEnd: function() {
		this.act(utils_BuffMode.End);
	}
	,act: function(mode) {
		data_BuffBehaviours.useBuff(this.id,this.owner,this.caster,this.element,mode);
	}
	,__class__: Buff
};
var BuffQueue = function() {
	this.queue = [];
};
$hxClasses["BuffQueue"] = BuffQueue;
BuffQueue.__name__ = ["BuffQueue"];
BuffQueue.prototype = {
	queue: null
	,addBuff: function(buff) {
		var index = this.indexOfBuff(buff.id);
		if(index == -1 || buff.isStackable) {
			this.queue.push(buff);
		} else {
			this.queue[index] = buff;
		}
		haxe_Log.trace("Buff casted: " + buff.name,{ fileName : "BuffQueue.hx", lineNumber : 24, className : "BuffQueue", methodName : "addBuff"});
		buff.onCast();
		haxe_Log.trace("Buff activated",{ fileName : "BuffQueue.hx", lineNumber : 26, className : "BuffQueue", methodName : "addBuff"});
	}
	,tick: function() {
		var _g1 = 0;
		var _g = this.queue.length;
		while(_g1 < _g) {
			var i = _g1++;
			haxe_Log.trace("Ticking: " + this.queue[i].name + ", cd: " + this.queue[i].duration + "(-1 now)",{ fileName : "BuffQueue.hx", lineNumber : 33, className : "BuffQueue", methodName : "tick"});
			if(this.queue[i].tickAndCheckEnded()) {
				this.dispellBuff(i);
				haxe_Log.trace("Dispelled",{ fileName : "BuffQueue.hx", lineNumber : 37, className : "BuffQueue", methodName : "tick"});
			}
		}
	}
	,dispell: function(elements,count) {
		if(count == null) {
			count = -1;
		}
		if(false == (count > 0 || count == -1)) {
			hxassert_Assert.throwAssertionFailureError(["Assertion failed: count > 0 || count == -1"],{ fileName : "BuffQueue.hx", lineNumber : 44, className : "BuffQueue", methodName : "dispell"});
		}
		var candidates = [];
		if(elements == null) {
			candidates = this.queue;
		} else {
			var _g = 0;
			var _g1 = this.queue;
			while(_g < _g1.length) {
				var buff = _g1[_g];
				++_g;
				var _g2 = 0;
				while(_g2 < elements.length) {
					var element = elements[_g2];
					++_g2;
					if(buff.element == element) {
						candidates.push(buff);
						break;
					}
				}
			}
		}
		if(count == -1) {
			count = 0;
			var _g3 = 0;
			while(_g3 < elements.length) {
				var element1 = elements[_g3];
				++_g3;
				count += this.elementalCount(element1);
			}
		}
		if(count < candidates.length) {
			var _g11 = 0;
			var _g4 = count;
			while(_g11 < _g4) {
				++_g11;
				this.dispellBuff(utils_MathUtils.randomInt(0,candidates.length));
			}
		} else {
			var _g12 = 0;
			var _g5 = candidates.length;
			while(_g12 < _g5) this.dispellBuff(_g12++);
		}
	}
	,dispellBuff: function(index) {
		haxe_Log.trace("Dispelled buff: " + this.queue[index].name,{ fileName : "BuffQueue.hx", lineNumber : 77, className : "BuffQueue", methodName : "dispellBuff"});
		this.queue[index].onEnd();
		this.queue.splice(index,1);
	}
	,elementalCount: function(element) {
		var count = 0;
		var _g = 0;
		var _g1 = this.queue;
		while(_g < _g1.length) {
			var buff = _g1[_g];
			++_g;
			if(buff.element == element) {
				++count;
			}
		}
		return count;
	}
	,indexOfBuff: function(id) {
		var _g = 0;
		var _g1 = this.queue;
		while(_g < _g1.length) {
			var buff = _g1[_g];
			++_g;
			if(buff.id == id) {
				return this.queue.indexOf(buff);
			}
		}
		return -1;
	}
	,__class__: BuffQueue
};
var Charge = function() {
	var _this = format_swf_lite_SWFLite.instances;
	if(!(__map_reserved["lib/AssetSource/AssetSource.dat"] != null ? _this.existsReserved("lib/AssetSource/AssetSource.dat") : _this.h.hasOwnProperty("lib/AssetSource/AssetSource.dat"))) {
		var this1 = format_swf_lite_SWFLite.instances;
		var value = format_swf_lite_SWFLite.unserialize(openfl_Assets.getText("lib/AssetSource/AssetSource.dat"));
		var _this1 = this1;
		if(__map_reserved["lib/AssetSource/AssetSource.dat"] != null) {
			_this1.setReserved("lib/AssetSource/AssetSource.dat",value);
		} else {
			_this1.h["lib/AssetSource/AssetSource.dat"] = value;
		}
	}
	var _this2 = format_swf_lite_SWFLite.instances;
	var swfLite = __map_reserved["lib/AssetSource/AssetSource.dat"] != null ? _this2.getReserved("lib/AssetSource/AssetSource.dat") : _this2.h["lib/AssetSource/AssetSource.dat"];
	format_swf_lite_MovieClip.call(this,swfLite,swfLite.symbols.h[27]);
};
$hxClasses["Charge"] = Charge;
Charge.__name__ = ["Charge"];
Charge.__super__ = format_swf_lite_MovieClip;
Charge.prototype = $extend(format_swf_lite_MovieClip.prototype,{
	__class__: Charge
});
var DarkPact = function() {
	var _this = format_swf_lite_SWFLite.instances;
	if(!(__map_reserved["lib/AssetSource/AssetSource.dat"] != null ? _this.existsReserved("lib/AssetSource/AssetSource.dat") : _this.h.hasOwnProperty("lib/AssetSource/AssetSource.dat"))) {
		var this1 = format_swf_lite_SWFLite.instances;
		var value = format_swf_lite_SWFLite.unserialize(openfl_Assets.getText("lib/AssetSource/AssetSource.dat"));
		var _this1 = this1;
		if(__map_reserved["lib/AssetSource/AssetSource.dat"] != null) {
			_this1.setReserved("lib/AssetSource/AssetSource.dat",value);
		} else {
			_this1.h["lib/AssetSource/AssetSource.dat"] = value;
		}
	}
	var _this2 = format_swf_lite_SWFLite.instances;
	var swfLite = __map_reserved["lib/AssetSource/AssetSource.dat"] != null ? _this2.getReserved("lib/AssetSource/AssetSource.dat") : _this2.h["lib/AssetSource/AssetSource.dat"];
	format_swf_lite_MovieClip.call(this,swfLite,swfLite.symbols.h[37]);
};
$hxClasses["DarkPact"] = DarkPact;
DarkPact.__name__ = ["DarkPact"];
DarkPact.__super__ = format_swf_lite_MovieClip;
DarkPact.prototype = $extend(format_swf_lite_MovieClip.prototype,{
	__class__: DarkPact
});
var lime_AssetLibrary = function() {
	this.onChange = new lime_app__$Event_$Void_$Void();
};
$hxClasses["lime.AssetLibrary"] = lime_AssetLibrary;
lime_AssetLibrary.__name__ = ["lime","AssetLibrary"];
lime_AssetLibrary.prototype = {
	onChange: null
	,exists: function(id,type) {
		return false;
	}
	,getAudioBuffer: function(id) {
		return null;
	}
	,getBytes: function(id) {
		return null;
	}
	,getFont: function(id) {
		return null;
	}
	,getImage: function(id) {
		return null;
	}
	,getPath: function(id) {
		return null;
	}
	,getText: function(id) {
		var bytes = this.getBytes(id);
		if(bytes == null) {
			return null;
		} else {
			return bytes.getString(0,bytes.length);
		}
	}
	,isLocal: function(id,type) {
		return true;
	}
	,list: function(type) {
		return null;
	}
	,load: function() {
		var _gthis = this;
		return new lime_app_Future(function() {
			return _gthis;
		});
	}
	,loadAudioBuffer: function(id) {
		var _gthis = this;
		return new lime_app_Future(function() {
			return _gthis.getAudioBuffer(id);
		});
	}
	,loadBytes: function(id) {
		var _gthis = this;
		return new lime_app_Future(function() {
			return _gthis.getBytes(id);
		});
	}
	,loadFont: function(id) {
		var _gthis = this;
		return new lime_app_Future(function() {
			return _gthis.getFont(id);
		});
	}
	,loadImage: function(id) {
		var _gthis = this;
		return new lime_app_Future(function() {
			return _gthis.getImage(id);
		});
	}
	,loadText: function(id) {
		return this.loadBytes(id).then(function(bytes) {
			return new lime_app_Future(function() {
				if(bytes == null) {
					return null;
				} else {
					return bytes.getString(0,bytes.length);
				}
			});
		});
	}
	,unload: function() {
	}
	,__class__: lime_AssetLibrary
};
var DefaultAssetLibrary = function() {
	this.rootPath = "";
	this.type = new haxe_ds_StringMap();
	this.path = new haxe_ds_StringMap();
	this.className = new haxe_ds_StringMap();
	lime_AssetLibrary.call(this);
	var _this = this.path;
	if(__map_reserved["lib/AssetSource/AssetSource.dat"] != null) {
		_this.setReserved("lib/AssetSource/AssetSource.dat","lib/AssetSource/AssetSource.dat");
	} else {
		_this.h["lib/AssetSource/AssetSource.dat"] = "lib/AssetSource/AssetSource.dat";
	}
	var _this1 = this.type;
	var value = "TEXT";
	if(__map_reserved["lib/AssetSource/AssetSource.dat"] != null) {
		_this1.setReserved("lib/AssetSource/AssetSource.dat",value);
	} else {
		_this1.h["lib/AssetSource/AssetSource.dat"] = value;
	}
	var _this2 = this.path;
	if(__map_reserved["libraries/AssetSource.json"] != null) {
		_this2.setReserved("libraries/AssetSource.json","lib/AssetSource.json");
	} else {
		_this2.h["libraries/AssetSource.json"] = "lib/AssetSource.json";
	}
	var _this3 = this.type;
	var value1 = "TEXT";
	if(__map_reserved["libraries/AssetSource.json"] != null) {
		_this3.setReserved("libraries/AssetSource.json",value1);
	} else {
		_this3.h["libraries/AssetSource.json"] = value1;
	}
	var assetsPrefix = null;
	if(ApplicationMain.config != null && Object.prototype.hasOwnProperty.call(ApplicationMain.config,"assetsPrefix")) {
		assetsPrefix = ApplicationMain.config.assetsPrefix;
	}
	if(assetsPrefix != null) {
		var k = this.path.keys();
		while(k.hasNext()) {
			var k1 = k.next();
			var _this4 = this.path;
			var value2 = assetsPrefix + (__map_reserved[k1] != null ? _this4.getReserved(k1) : _this4.h[k1]);
			var _this5 = this.path;
			if(__map_reserved[k1] != null) {
				_this5.setReserved(k1,value2);
			} else {
				_this5.h[k1] = value2;
			}
		}
	}
};
$hxClasses["DefaultAssetLibrary"] = DefaultAssetLibrary;
DefaultAssetLibrary.__name__ = ["DefaultAssetLibrary"];
DefaultAssetLibrary.__super__ = lime_AssetLibrary;
DefaultAssetLibrary.prototype = $extend(lime_AssetLibrary.prototype,{
	className: null
	,path: null
	,type: null
	,lastModified: null
	,timer: null
	,rootPath: null
	,exists: function(id,type) {
		var requestedType = type != null ? js_Boot.__cast(type , String) : null;
		var _this = this.type;
		var assetType = __map_reserved[id] != null ? _this.getReserved(id) : _this.h[id];
		if(assetType != null) {
			if(assetType == requestedType || (requestedType == "SOUND" || requestedType == "MUSIC") && (assetType == "MUSIC" || assetType == "SOUND")) {
				return true;
			}
			if(requestedType == "BINARY" || requestedType == null || assetType == "BINARY" && requestedType == "TEXT") {
				return true;
			}
		}
		return false;
	}
	,getAudioBuffer: function(id) {
		var _this = this.path;
		var key = __map_reserved[id] != null ? _this.getReserved(id) : _this.h[id];
		var _this1 = lime_app_Preloader.audioBuffers;
		if(__map_reserved[key] != null) {
			return _this1.getReserved(key);
		} else {
			return _this1.h[key];
		}
	}
	,getBytes: function(id) {
		var _this = this.path;
		var key = __map_reserved[id] != null ? _this.getReserved(id) : _this.h[id];
		var _this1 = lime_app_Preloader.loaders;
		var loader = __map_reserved[key] != null ? _this1.getReserved(key) : _this1.h[key];
		if(loader == null) {
			return null;
		}
		var bytes = loader.bytes;
		if(bytes != null) {
			return bytes;
		} else {
			return null;
		}
	}
	,getFont: function(id) {
		var _this = this.className;
		return js_Boot.__cast(Type.createInstance(__map_reserved[id] != null ? _this.getReserved(id) : _this.h[id],[]) , lime_text_Font);
	}
	,getImage: function(id) {
		var _this = this.path;
		var key = __map_reserved[id] != null ? _this.getReserved(id) : _this.h[id];
		var _this1 = lime_app_Preloader.images;
		return lime_graphics_Image.fromImageElement(__map_reserved[key] != null ? _this1.getReserved(key) : _this1.h[key]);
	}
	,getPath: function(id) {
		var _this = this.path;
		if(__map_reserved[id] != null) {
			return _this.getReserved(id);
		} else {
			return _this.h[id];
		}
	}
	,getText: function(id) {
		var _this = this.path;
		var key = __map_reserved[id] != null ? _this.getReserved(id) : _this.h[id];
		var _this1 = lime_app_Preloader.loaders;
		var loader = __map_reserved[key] != null ? _this1.getReserved(key) : _this1.h[key];
		if(loader == null) {
			return null;
		}
		var bytes = loader.bytes;
		if(bytes != null) {
			return bytes.getString(0,bytes.length);
		} else {
			return null;
		}
	}
	,isLocal: function(id,type) {
		switch(type != null ? js_Boot.__cast(type , String) : null) {
		case "FONT":
			return this.className.exists(id);
		case "IMAGE":
			return lime_app_Preloader.images.exists(this.path.get(id));
		case "MUSIC":case "SOUND":
			return lime_app_Preloader.audioBuffers.exists(this.path.get(id));
		default:
			return lime_app_Preloader.loaders.exists(this.path.get(id));
		}
	}
	,list: function(type) {
		var requestedType = type != null ? js_Boot.__cast(type , String) : null;
		var items = [];
		var id = this.type.keys();
		while(id.hasNext()) {
			var id1 = id.next();
			if(requestedType == null || this.exists(id1,type)) {
				items.push(id1);
			}
		}
		return items;
	}
	,loadAudioBuffer: function(id) {
		var _gthis = this;
		var promise = new lime_app_Promise();
		if(lime_Assets.isLocal(id)) {
			promise.completeWith(new lime_app_Future(function() {
				return _gthis.getAudioBuffer(id);
			}));
		} else {
			var _this = this.path;
			if(__map_reserved[id] != null ? _this.existsReserved(id) : _this.h.hasOwnProperty(id)) {
				var _this1 = this.path;
				promise.completeWith(lime_audio_AudioBuffer.loadFromFile(__map_reserved[id] != null ? _this1.getReserved(id) : _this1.h[id]));
			} else {
				promise.error(null);
			}
		}
		return promise.future;
	}
	,loadBytes: function(id) {
		var promise = new lime_app_Promise();
		var _this = this.path;
		if(__map_reserved[id] != null ? _this.existsReserved(id) : _this.h.hasOwnProperty(id)) {
			var request = new lime_net_HTTPRequest();
			var _this1 = this.path;
			promise.completeWith(request.load((__map_reserved[id] != null ? _this1.getReserved(id) : _this1.h[id]) + "?" + lime_Assets.cache.version));
		} else {
			promise.complete(this.getBytes(id));
		}
		return promise.future;
	}
	,loadImage: function(id) {
		var promise = new lime_app_Promise();
		var _this = this.path;
		if(__map_reserved[id] != null ? _this.existsReserved(id) : _this.h.hasOwnProperty(id)) {
			var image = new Image();
			image.onload = function(_) {
				var tmp = lime_graphics_Image.fromImageElement(image);
				promise.complete(tmp);
			};
			image.onerror = $bind(promise,promise.error);
			var _this1 = this.path;
			image.src = (__map_reserved[id] != null ? _this1.getReserved(id) : _this1.h[id]) + "?" + lime_Assets.cache.version;
		} else {
			var tmp1 = this.getImage(id);
			promise.complete(tmp1);
		}
		return promise.future;
	}
	,loadText: function(id) {
		var promise = new lime_app_Promise();
		var _this = this.path;
		if(__map_reserved[id] != null ? _this.existsReserved(id) : _this.h.hasOwnProperty(id)) {
			var request = new lime_net_HTTPRequest();
			var _this1 = this.path;
			var future = request.load((__map_reserved[id] != null ? _this1.getReserved(id) : _this1.h[id]) + "?" + lime_Assets.cache.version);
			future.onProgress(function(progress) {
				promise.progress(progress);
			});
			future.onError(function(msg) {
				promise.error(msg);
			});
			future.onComplete(function(bytes) {
				var tmp = bytes.getString(0,bytes.length);
				promise.complete(tmp);
			});
		} else {
			var tmp1 = this.getText(id);
			promise.complete(tmp1);
		}
		return promise.future;
	}
	,__class__: DefaultAssetLibrary
});
var EReg = function(r,opt) {
	this.r = new RegExp(r,opt.split("u").join(""));
};
$hxClasses["EReg"] = EReg;
EReg.__name__ = ["EReg"];
EReg.prototype = {
	r: null
	,match: function(s) {
		if(this.r.global) {
			this.r.lastIndex = 0;
		}
		this.r.m = this.r.exec(s);
		this.r.s = s;
		return this.r.m != null;
	}
	,matched: function(n) {
		if(this.r.m != null && n >= 0 && n < this.r.m.length) {
			return this.r.m[n];
		} else {
			throw new js__$Boot_HaxeError("EReg::matched");
		}
	}
	,matchedPos: function() {
		if(this.r.m == null) {
			throw new js__$Boot_HaxeError("No string matched");
		}
		return { pos : this.r.m.index, len : this.r.m[0].length};
	}
	,matchSub: function(s,pos,len) {
		if(len == null) {
			len = -1;
		}
		if(this.r.global) {
			this.r.lastIndex = pos;
			var tmp = this.r;
			var tmp1 = len < 0 ? s : HxOverrides.substr(s,0,pos + len);
			this.r.m = tmp.exec(tmp1);
			var b = this.r.m != null;
			if(b) {
				this.r.s = s;
			}
			return b;
		} else {
			var b1 = this.match(len < 0 ? HxOverrides.substr(s,pos,null) : HxOverrides.substr(s,pos,len));
			if(b1) {
				this.r.s = s;
				this.r.m.index += pos;
			}
			return b1;
		}
	}
	,__class__: EReg
};
var ElectricalStorm = function() {
	var _this = format_swf_lite_SWFLite.instances;
	if(!(__map_reserved["lib/AssetSource/AssetSource.dat"] != null ? _this.existsReserved("lib/AssetSource/AssetSource.dat") : _this.h.hasOwnProperty("lib/AssetSource/AssetSource.dat"))) {
		var this1 = format_swf_lite_SWFLite.instances;
		var value = format_swf_lite_SWFLite.unserialize(openfl_Assets.getText("lib/AssetSource/AssetSource.dat"));
		var _this1 = this1;
		if(__map_reserved["lib/AssetSource/AssetSource.dat"] != null) {
			_this1.setReserved("lib/AssetSource/AssetSource.dat",value);
		} else {
			_this1.h["lib/AssetSource/AssetSource.dat"] = value;
		}
	}
	var _this2 = format_swf_lite_SWFLite.instances;
	var swfLite = __map_reserved["lib/AssetSource/AssetSource.dat"] != null ? _this2.getReserved("lib/AssetSource/AssetSource.dat") : _this2.h["lib/AssetSource/AssetSource.dat"];
	format_swf_lite_MovieClip.call(this,swfLite,swfLite.symbols.h[25]);
};
$hxClasses["ElectricalStorm"] = ElectricalStorm;
ElectricalStorm.__name__ = ["ElectricalStorm"];
ElectricalStorm.__super__ = format_swf_lite_MovieClip;
ElectricalStorm.prototype = $extend(format_swf_lite_MovieClip.prototype,{
	__class__: ElectricalStorm
});
var Ghost = function() {
	var _this = format_swf_lite_SWFLite.instances;
	if(!(__map_reserved["lib/AssetSource/AssetSource.dat"] != null ? _this.existsReserved("lib/AssetSource/AssetSource.dat") : _this.h.hasOwnProperty("lib/AssetSource/AssetSource.dat"))) {
		var this1 = format_swf_lite_SWFLite.instances;
		var value = format_swf_lite_SWFLite.unserialize(openfl_Assets.getText("lib/AssetSource/AssetSource.dat"));
		var _this1 = this1;
		if(__map_reserved["lib/AssetSource/AssetSource.dat"] != null) {
			_this1.setReserved("lib/AssetSource/AssetSource.dat",value);
		} else {
			_this1.h["lib/AssetSource/AssetSource.dat"] = value;
		}
	}
	var _this2 = format_swf_lite_SWFLite.instances;
	var swfLite = __map_reserved["lib/AssetSource/AssetSource.dat"] != null ? _this2.getReserved("lib/AssetSource/AssetSource.dat") : _this2.h["lib/AssetSource/AssetSource.dat"];
	format_swf_lite_MovieClip.call(this,swfLite,swfLite.symbols.h[43]);
};
$hxClasses["Ghost"] = Ghost;
Ghost.__name__ = ["Ghost"];
Ghost.__super__ = format_swf_lite_MovieClip;
Ghost.prototype = $extend(format_swf_lite_MovieClip.prototype,{
	__class__: Ghost
});
var Heal = function() {
	var _this = format_swf_lite_SWFLite.instances;
	if(!(__map_reserved["lib/AssetSource/AssetSource.dat"] != null ? _this.existsReserved("lib/AssetSource/AssetSource.dat") : _this.h.hasOwnProperty("lib/AssetSource/AssetSource.dat"))) {
		var this1 = format_swf_lite_SWFLite.instances;
		var value = format_swf_lite_SWFLite.unserialize(openfl_Assets.getText("lib/AssetSource/AssetSource.dat"));
		var _this1 = this1;
		if(__map_reserved["lib/AssetSource/AssetSource.dat"] != null) {
			_this1.setReserved("lib/AssetSource/AssetSource.dat",value);
		} else {
			_this1.h["lib/AssetSource/AssetSource.dat"] = value;
		}
	}
	var _this2 = format_swf_lite_SWFLite.instances;
	var swfLite = __map_reserved["lib/AssetSource/AssetSource.dat"] != null ? _this2.getReserved("lib/AssetSource/AssetSource.dat") : _this2.h["lib/AssetSource/AssetSource.dat"];
	format_swf_lite_MovieClip.call(this,swfLite,swfLite.symbols.h[39]);
};
$hxClasses["Heal"] = Heal;
Heal.__name__ = ["Heal"];
Heal.__super__ = format_swf_lite_MovieClip;
Heal.prototype = $extend(format_swf_lite_MovieClip.prototype,{
	__class__: Heal
});
var Hero = function() {
	var _this = format_swf_lite_SWFLite.instances;
	if(!(__map_reserved["lib/AssetSource/AssetSource.dat"] != null ? _this.existsReserved("lib/AssetSource/AssetSource.dat") : _this.h.hasOwnProperty("lib/AssetSource/AssetSource.dat"))) {
		var this1 = format_swf_lite_SWFLite.instances;
		var value = format_swf_lite_SWFLite.unserialize(openfl_Assets.getText("lib/AssetSource/AssetSource.dat"));
		var _this1 = this1;
		if(__map_reserved["lib/AssetSource/AssetSource.dat"] != null) {
			_this1.setReserved("lib/AssetSource/AssetSource.dat",value);
		} else {
			_this1.h["lib/AssetSource/AssetSource.dat"] = value;
		}
	}
	var _this2 = format_swf_lite_SWFLite.instances;
	var swfLite = __map_reserved["lib/AssetSource/AssetSource.dat"] != null ? _this2.getReserved("lib/AssetSource/AssetSource.dat") : _this2.h["lib/AssetSource/AssetSource.dat"];
	format_swf_lite_MovieClip.call(this,swfLite,swfLite.symbols.h[45]);
};
$hxClasses["Hero"] = Hero;
Hero.__name__ = ["Hero"];
Hero.__super__ = format_swf_lite_MovieClip;
Hero.prototype = $extend(format_swf_lite_MovieClip.prototype,{
	__class__: Hero
});
var HighVoltage = function() {
	var _this = format_swf_lite_SWFLite.instances;
	if(!(__map_reserved["lib/AssetSource/AssetSource.dat"] != null ? _this.existsReserved("lib/AssetSource/AssetSource.dat") : _this.h.hasOwnProperty("lib/AssetSource/AssetSource.dat"))) {
		var this1 = format_swf_lite_SWFLite.instances;
		var value = format_swf_lite_SWFLite.unserialize(openfl_Assets.getText("lib/AssetSource/AssetSource.dat"));
		var _this1 = this1;
		if(__map_reserved["lib/AssetSource/AssetSource.dat"] != null) {
			_this1.setReserved("lib/AssetSource/AssetSource.dat",value);
		} else {
			_this1.h["lib/AssetSource/AssetSource.dat"] = value;
		}
	}
	var _this2 = format_swf_lite_SWFLite.instances;
	var swfLite = __map_reserved["lib/AssetSource/AssetSource.dat"] != null ? _this2.getReserved("lib/AssetSource/AssetSource.dat") : _this2.h["lib/AssetSource/AssetSource.dat"];
	format_swf_lite_MovieClip.call(this,swfLite,swfLite.symbols.h[23]);
};
$hxClasses["HighVoltage"] = HighVoltage;
HighVoltage.__name__ = ["HighVoltage"];
HighVoltage.__super__ = format_swf_lite_MovieClip;
HighVoltage.prototype = $extend(format_swf_lite_MovieClip.prototype,{
	__class__: HighVoltage
});
var Hugo = function() {
	var _this = format_swf_lite_SWFLite.instances;
	if(!(__map_reserved["lib/AssetSource/AssetSource.dat"] != null ? _this.existsReserved("lib/AssetSource/AssetSource.dat") : _this.h.hasOwnProperty("lib/AssetSource/AssetSource.dat"))) {
		var this1 = format_swf_lite_SWFLite.instances;
		var value = format_swf_lite_SWFLite.unserialize(openfl_Assets.getText("lib/AssetSource/AssetSource.dat"));
		var _this1 = this1;
		if(__map_reserved["lib/AssetSource/AssetSource.dat"] != null) {
			_this1.setReserved("lib/AssetSource/AssetSource.dat",value);
		} else {
			_this1.h["lib/AssetSource/AssetSource.dat"] = value;
		}
	}
	var _this2 = format_swf_lite_SWFLite.instances;
	var swfLite = __map_reserved["lib/AssetSource/AssetSource.dat"] != null ? _this2.getReserved("lib/AssetSource/AssetSource.dat") : _this2.h["lib/AssetSource/AssetSource.dat"];
	format_swf_lite_MovieClip.call(this,swfLite,swfLite.symbols.h[8]);
};
$hxClasses["Hugo"] = Hugo;
Hugo.__name__ = ["Hugo"];
Hugo.__super__ = format_swf_lite_MovieClip;
Hugo.prototype = $extend(format_swf_lite_MovieClip.prototype,{
	__class__: Hugo
});
var HxOverrides = function() { };
$hxClasses["HxOverrides"] = HxOverrides;
HxOverrides.__name__ = ["HxOverrides"];
HxOverrides.dateStr = function(date) {
	var m = date.getMonth() + 1;
	var d = date.getDate();
	var h = date.getHours();
	var mi = date.getMinutes();
	var s = date.getSeconds();
	return date.getFullYear() + "-" + (m < 10 ? "0" + m : "" + m) + "-" + (d < 10 ? "0" + d : "" + d) + " " + (h < 10 ? "0" + h : "" + h) + ":" + (mi < 10 ? "0" + mi : "" + mi) + ":" + (s < 10 ? "0" + s : "" + s);
};
HxOverrides.strDate = function(s) {
	var _g = s.length;
	switch(_g) {
	case 8:
		var k = s.split(":");
		var d = new Date();
		d["setTime"](0);
		d["setUTCHours"](k[0]);
		d["setUTCMinutes"](k[1]);
		d["setUTCSeconds"](k[2]);
		return d;
	case 10:
		var k1 = s.split("-");
		return new Date(k1[0],k1[1] - 1,k1[2],0,0,0);
	case 19:
		var k2 = s.split(" ");
		var y = k2[0].split("-");
		var t = k2[1].split(":");
		return new Date(y[0],y[1] - 1,y[2],t[0],t[1],t[2]);
	default:
		throw new js__$Boot_HaxeError("Invalid date format : " + s);
	}
};
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) {
		return undefined;
	}
	return x;
};
HxOverrides.substr = function(s,pos,len) {
	if(len == null) {
		len = s.length;
	} else if(len < 0) {
		if(pos == 0) {
			len = s.length + len;
		} else {
			return "";
		}
	}
	return s.substr(pos,len);
};
HxOverrides.remove = function(a,obj) {
	var i = a.indexOf(obj);
	if(i == -1) {
		return false;
	}
	a.splice(i,1);
	return true;
};
HxOverrides.iter = function(a) {
	return { cur : 0, arr : a, hasNext : function() {
		return this.cur < this.arr.length;
	}, next : function() {
		return this.arr[this.cur++];
	}};
};
var Icarus = function() {
	var _this = format_swf_lite_SWFLite.instances;
	if(!(__map_reserved["lib/AssetSource/AssetSource.dat"] != null ? _this.existsReserved("lib/AssetSource/AssetSource.dat") : _this.h.hasOwnProperty("lib/AssetSource/AssetSource.dat"))) {
		var this1 = format_swf_lite_SWFLite.instances;
		var value = format_swf_lite_SWFLite.unserialize(openfl_Assets.getText("lib/AssetSource/AssetSource.dat"));
		var _this1 = this1;
		if(__map_reserved["lib/AssetSource/AssetSource.dat"] != null) {
			_this1.setReserved("lib/AssetSource/AssetSource.dat",value);
		} else {
			_this1.h["lib/AssetSource/AssetSource.dat"] = value;
		}
	}
	var _this2 = format_swf_lite_SWFLite.instances;
	var swfLite = __map_reserved["lib/AssetSource/AssetSource.dat"] != null ? _this2.getReserved("lib/AssetSource/AssetSource.dat") : _this2.h["lib/AssetSource/AssetSource.dat"];
	format_swf_lite_MovieClip.call(this,swfLite,swfLite.symbols.h[6]);
};
$hxClasses["Icarus"] = Icarus;
Icarus.__name__ = ["Icarus"];
Icarus.__super__ = format_swf_lite_MovieClip;
Icarus.prototype = $extend(format_swf_lite_MovieClip.prototype,{
	__class__: Icarus
});
var Lambda = function() { };
$hxClasses["Lambda"] = Lambda;
Lambda.__name__ = ["Lambda"];
Lambda.array = function(it) {
	var a = [];
	var i = $iterator(it)();
	while(i.hasNext()) a.push(i.next());
	return a;
};
var LeaveBattle = function() {
	var _this = format_swf_lite_SWFLite.instances;
	if(!(__map_reserved["lib/AssetSource/AssetSource.dat"] != null ? _this.existsReserved("lib/AssetSource/AssetSource.dat") : _this.h.hasOwnProperty("lib/AssetSource/AssetSource.dat"))) {
		var this1 = format_swf_lite_SWFLite.instances;
		var value = format_swf_lite_SWFLite.unserialize(openfl_Assets.getText("lib/AssetSource/AssetSource.dat"));
		var _this1 = this1;
		if(__map_reserved["lib/AssetSource/AssetSource.dat"] != null) {
			_this1.setReserved("lib/AssetSource/AssetSource.dat",value);
		} else {
			_this1.h["lib/AssetSource/AssetSource.dat"] = value;
		}
	}
	var _this2 = format_swf_lite_SWFLite.instances;
	var swfLite = __map_reserved["lib/AssetSource/AssetSource.dat"] != null ? _this2.getReserved("lib/AssetSource/AssetSource.dat") : _this2.h["lib/AssetSource/AssetSource.dat"];
	format_swf_lite_MovieClip.call(this,swfLite,swfLite.symbols.h[29]);
};
$hxClasses["LeaveBattle"] = LeaveBattle;
LeaveBattle.__name__ = ["LeaveBattle"];
LeaveBattle.__super__ = format_swf_lite_MovieClip;
LeaveBattle.prototype = $extend(format_swf_lite_MovieClip.prototype,{
	__class__: LeaveBattle
});
var LightningBolt = function() {
	var _this = format_swf_lite_SWFLite.instances;
	if(!(__map_reserved["lib/AssetSource/AssetSource.dat"] != null ? _this.existsReserved("lib/AssetSource/AssetSource.dat") : _this.h.hasOwnProperty("lib/AssetSource/AssetSource.dat"))) {
		var this1 = format_swf_lite_SWFLite.instances;
		var value = format_swf_lite_SWFLite.unserialize(openfl_Assets.getText("lib/AssetSource/AssetSource.dat"));
		var _this1 = this1;
		if(__map_reserved["lib/AssetSource/AssetSource.dat"] != null) {
			_this1.setReserved("lib/AssetSource/AssetSource.dat",value);
		} else {
			_this1.h["lib/AssetSource/AssetSource.dat"] = value;
		}
	}
	var _this2 = format_swf_lite_SWFLite.instances;
	var swfLite = __map_reserved["lib/AssetSource/AssetSource.dat"] != null ? _this2.getReserved("lib/AssetSource/AssetSource.dat") : _this2.h["lib/AssetSource/AssetSource.dat"];
	format_swf_lite_MovieClip.call(this,swfLite,swfLite.symbols.h[19]);
};
$hxClasses["LightningBolt"] = LightningBolt;
LightningBolt.__name__ = ["LightningBolt"];
LightningBolt.__super__ = format_swf_lite_MovieClip;
LightningBolt.prototype = $extend(format_swf_lite_MovieClip.prototype,{
	__class__: LightningBolt
});
var List = function() {
	this.length = 0;
};
$hxClasses["List"] = List;
List.__name__ = ["List"];
List.prototype = {
	h: null
	,q: null
	,length: null
	,add: function(item) {
		var x = new _$List_ListNode(item,null);
		if(this.h == null) {
			this.h = x;
		} else {
			this.q.next = x;
		}
		this.q = x;
		this.length++;
	}
	,push: function(item) {
		var x = new _$List_ListNode(item,this.h);
		this.h = x;
		if(this.q == null) {
			this.q = x;
		}
		this.length++;
	}
	,pop: function() {
		if(this.h == null) {
			return null;
		}
		var x = this.h.item;
		this.h = this.h.next;
		if(this.h == null) {
			this.q = null;
		}
		this.length--;
		return x;
	}
	,isEmpty: function() {
		return this.h == null;
	}
	,clear: function() {
		this.h = null;
		this.q = null;
		this.length = 0;
	}
	,iterator: function() {
		return new _$List_ListIterator(this.h);
	}
	,__class__: List
};
var _$List_ListNode = function(item,next) {
	this.item = item;
	this.next = next;
};
$hxClasses["_List.ListNode"] = _$List_ListNode;
_$List_ListNode.__name__ = ["_List","ListNode"];
_$List_ListNode.prototype = {
	item: null
	,next: null
	,__class__: _$List_ListNode
};
var _$List_ListIterator = function(head) {
	this.head = head;
};
$hxClasses["_List.ListIterator"] = _$List_ListIterator;
_$List_ListIterator.__name__ = ["_List","ListIterator"];
_$List_ListIterator.prototype = {
	head: null
	,hasNext: function() {
		return this.head != null;
	}
	,next: function() {
		var val = this.head.item;
		this.head = this.head.next;
		return val;
	}
	,__class__: _$List_ListIterator
};
var LockedAbility = function() {
	var _this = format_swf_lite_SWFLite.instances;
	if(!(__map_reserved["lib/AssetSource/AssetSource.dat"] != null ? _this.existsReserved("lib/AssetSource/AssetSource.dat") : _this.h.hasOwnProperty("lib/AssetSource/AssetSource.dat"))) {
		var this1 = format_swf_lite_SWFLite.instances;
		var value = format_swf_lite_SWFLite.unserialize(openfl_Assets.getText("lib/AssetSource/AssetSource.dat"));
		var _this1 = this1;
		if(__map_reserved["lib/AssetSource/AssetSource.dat"] != null) {
			_this1.setReserved("lib/AssetSource/AssetSource.dat",value);
		} else {
			_this1.h["lib/AssetSource/AssetSource.dat"] = value;
		}
	}
	var _this2 = format_swf_lite_SWFLite.instances;
	var swfLite = __map_reserved["lib/AssetSource/AssetSource.dat"] != null ? _this2.getReserved("lib/AssetSource/AssetSource.dat") : _this2.h["lib/AssetSource/AssetSource.dat"];
	format_swf_lite_MovieClip.call(this,swfLite,swfLite.symbols.h[33]);
};
$hxClasses["LockedAbility"] = LockedAbility;
LockedAbility.__name__ = ["LockedAbility"];
LockedAbility.__super__ = format_swf_lite_MovieClip;
LockedAbility.prototype = $extend(format_swf_lite_MovieClip.prototype,{
	__class__: LockedAbility
});
Math.__name__ = ["Math"];
var NoAbility = function() {
	var _this = format_swf_lite_SWFLite.instances;
	if(!(__map_reserved["lib/AssetSource/AssetSource.dat"] != null ? _this.existsReserved("lib/AssetSource/AssetSource.dat") : _this.h.hasOwnProperty("lib/AssetSource/AssetSource.dat"))) {
		var this1 = format_swf_lite_SWFLite.instances;
		var value = format_swf_lite_SWFLite.unserialize(openfl_Assets.getText("lib/AssetSource/AssetSource.dat"));
		var _this1 = this1;
		if(__map_reserved["lib/AssetSource/AssetSource.dat"] != null) {
			_this1.setReserved("lib/AssetSource/AssetSource.dat",value);
		} else {
			_this1.h["lib/AssetSource/AssetSource.dat"] = value;
		}
	}
	var _this2 = format_swf_lite_SWFLite.instances;
	var swfLite = __map_reserved["lib/AssetSource/AssetSource.dat"] != null ? _this2.getReserved("lib/AssetSource/AssetSource.dat") : _this2.h["lib/AssetSource/AssetSource.dat"];
	format_swf_lite_MovieClip.call(this,swfLite,swfLite.symbols.h[35]);
};
$hxClasses["NoAbility"] = NoAbility;
NoAbility.__name__ = ["NoAbility"];
NoAbility.__super__ = format_swf_lite_MovieClip;
NoAbility.prototype = $extend(format_swf_lite_MovieClip.prototype,{
	__class__: NoAbility
});
var NullZoneBG = function() {
	var _this = format_swf_lite_SWFLite.instances;
	if(!(__map_reserved["lib/AssetSource/AssetSource.dat"] != null ? _this.existsReserved("lib/AssetSource/AssetSource.dat") : _this.h.hasOwnProperty("lib/AssetSource/AssetSource.dat"))) {
		var this1 = format_swf_lite_SWFLite.instances;
		var value = format_swf_lite_SWFLite.unserialize(openfl_Assets.getText("lib/AssetSource/AssetSource.dat"));
		var _this1 = this1;
		if(__map_reserved["lib/AssetSource/AssetSource.dat"] != null) {
			_this1.setReserved("lib/AssetSource/AssetSource.dat",value);
		} else {
			_this1.h["lib/AssetSource/AssetSource.dat"] = value;
		}
	}
	var _this2 = format_swf_lite_SWFLite.instances;
	var swfLite = __map_reserved["lib/AssetSource/AssetSource.dat"] != null ? _this2.getReserved("lib/AssetSource/AssetSource.dat") : _this2.h["lib/AssetSource/AssetSource.dat"];
	format_swf_lite_MovieClip.call(this,swfLite,swfLite.symbols.h[51]);
};
$hxClasses["NullZoneBG"] = NullZoneBG;
NullZoneBG.__name__ = ["NullZoneBG"];
NullZoneBG.__super__ = format_swf_lite_MovieClip;
NullZoneBG.prototype = $extend(format_swf_lite_MovieClip.prototype,{
	__class__: NullZoneBG
});
var QuickStrike = function() {
	var _this = format_swf_lite_SWFLite.instances;
	if(!(__map_reserved["lib/AssetSource/AssetSource.dat"] != null ? _this.existsReserved("lib/AssetSource/AssetSource.dat") : _this.h.hasOwnProperty("lib/AssetSource/AssetSource.dat"))) {
		var this1 = format_swf_lite_SWFLite.instances;
		var value = format_swf_lite_SWFLite.unserialize(openfl_Assets.getText("lib/AssetSource/AssetSource.dat"));
		var _this1 = this1;
		if(__map_reserved["lib/AssetSource/AssetSource.dat"] != null) {
			_this1.setReserved("lib/AssetSource/AssetSource.dat",value);
		} else {
			_this1.h["lib/AssetSource/AssetSource.dat"] = value;
		}
	}
	var _this2 = format_swf_lite_SWFLite.instances;
	var swfLite = __map_reserved["lib/AssetSource/AssetSource.dat"] != null ? _this2.getReserved("lib/AssetSource/AssetSource.dat") : _this2.h["lib/AssetSource/AssetSource.dat"];
	format_swf_lite_MovieClip.call(this,swfLite,swfLite.symbols.h[41]);
};
$hxClasses["QuickStrike"] = QuickStrike;
QuickStrike.__name__ = ["QuickStrike"];
QuickStrike.__super__ = format_swf_lite_MovieClip;
QuickStrike.prototype = $extend(format_swf_lite_MovieClip.prototype,{
	__class__: QuickStrike
});
var Reflect = function() { };
$hxClasses["Reflect"] = Reflect;
Reflect.__name__ = ["Reflect"];
Reflect.field = function(o,field) {
	try {
		return o[field];
	} catch( e ) {
		haxe_CallStack.lastException = e;
		return null;
	}
};
Reflect.fields = function(o) {
	var a = [];
	if(o != null) {
		var hasOwnProperty = Object.prototype.hasOwnProperty;
		for( var f in o ) {
		if(f != "__id__" && f != "hx__closures__" && hasOwnProperty.call(o,f)) {
			a.push(f);
		}
		}
	}
	return a;
};
Reflect.isFunction = function(f) {
	if(typeof(f) == "function") {
		return !(f.__name__ || f.__ename__);
	} else {
		return false;
	}
};
Reflect.compare = function(a,b) {
	if(a == b) {
		return 0;
	} else if(a > b) {
		return 1;
	} else {
		return -1;
	}
};
Reflect.compareMethods = function(f1,f2) {
	if(f1 == f2) {
		return true;
	}
	if(!Reflect.isFunction(f1) || !Reflect.isFunction(f2)) {
		return false;
	}
	if(f1.scope == f2.scope && f1.method == f2.method) {
		return f1.method != null;
	} else {
		return false;
	}
};
Reflect.deleteField = function(o,field) {
	if(!Object.prototype.hasOwnProperty.call(o,field)) {
		return false;
	}
	delete(o[field]);
	return true;
};
Reflect.makeVarArgs = function(f) {
	return function() {
		var a = Array.prototype.slice.call(arguments);
		return f(a);
	};
};
var ShockTherapy = function() {
	var _this = format_swf_lite_SWFLite.instances;
	if(!(__map_reserved["lib/AssetSource/AssetSource.dat"] != null ? _this.existsReserved("lib/AssetSource/AssetSource.dat") : _this.h.hasOwnProperty("lib/AssetSource/AssetSource.dat"))) {
		var this1 = format_swf_lite_SWFLite.instances;
		var value = format_swf_lite_SWFLite.unserialize(openfl_Assets.getText("lib/AssetSource/AssetSource.dat"));
		var _this1 = this1;
		if(__map_reserved["lib/AssetSource/AssetSource.dat"] != null) {
			_this1.setReserved("lib/AssetSource/AssetSource.dat",value);
		} else {
			_this1.h["lib/AssetSource/AssetSource.dat"] = value;
		}
	}
	var _this2 = format_swf_lite_SWFLite.instances;
	var swfLite = __map_reserved["lib/AssetSource/AssetSource.dat"] != null ? _this2.getReserved("lib/AssetSource/AssetSource.dat") : _this2.h["lib/AssetSource/AssetSource.dat"];
	format_swf_lite_MovieClip.call(this,swfLite,swfLite.symbols.h[21]);
};
$hxClasses["ShockTherapy"] = ShockTherapy;
ShockTherapy.__name__ = ["ShockTherapy"];
ShockTherapy.__super__ = format_swf_lite_MovieClip;
ShockTherapy.prototype = $extend(format_swf_lite_MovieClip.prototype,{
	__class__: ShockTherapy
});
var SkipTurn = function() {
	var _this = format_swf_lite_SWFLite.instances;
	if(!(__map_reserved["lib/AssetSource/AssetSource.dat"] != null ? _this.existsReserved("lib/AssetSource/AssetSource.dat") : _this.h.hasOwnProperty("lib/AssetSource/AssetSource.dat"))) {
		var this1 = format_swf_lite_SWFLite.instances;
		var value = format_swf_lite_SWFLite.unserialize(openfl_Assets.getText("lib/AssetSource/AssetSource.dat"));
		var _this1 = this1;
		if(__map_reserved["lib/AssetSource/AssetSource.dat"] != null) {
			_this1.setReserved("lib/AssetSource/AssetSource.dat",value);
		} else {
			_this1.h["lib/AssetSource/AssetSource.dat"] = value;
		}
	}
	var _this2 = format_swf_lite_SWFLite.instances;
	var swfLite = __map_reserved["lib/AssetSource/AssetSource.dat"] != null ? _this2.getReserved("lib/AssetSource/AssetSource.dat") : _this2.h["lib/AssetSource/AssetSource.dat"];
	format_swf_lite_MovieClip.call(this,swfLite,swfLite.symbols.h[31]);
};
$hxClasses["SkipTurn"] = SkipTurn;
SkipTurn.__name__ = ["SkipTurn"];
SkipTurn.__super__ = format_swf_lite_MovieClip;
SkipTurn.prototype = $extend(format_swf_lite_MovieClip.prototype,{
	__class__: SkipTurn
});
var Std = function() { };
$hxClasses["Std"] = Std;
Std.__name__ = ["Std"];
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
Std.parseInt = function(x) {
	var v = parseInt(x,10);
	if(v == 0 && (HxOverrides.cca(x,1) == 120 || HxOverrides.cca(x,1) == 88)) {
		v = parseInt(x);
	}
	if(isNaN(v)) {
		return null;
	}
	return v;
};
var StringBuf = function() {
	this.b = "";
};
$hxClasses["StringBuf"] = StringBuf;
StringBuf.__name__ = ["StringBuf"];
StringBuf.prototype = {
	b: null
	,__class__: StringBuf
};
var StringTools = function() { };
$hxClasses["StringTools"] = StringTools;
StringTools.__name__ = ["StringTools"];
StringTools.htmlEscape = function(s,quotes) {
	s = s.split("&").join("&amp;").split("<").join("&lt;").split(">").join("&gt;");
	if(quotes) {
		return s.split("\"").join("&quot;").split("'").join("&#039;");
	} else {
		return s;
	}
};
StringTools.htmlUnescape = function(s) {
	return s.split("&gt;").join(">").split("&lt;").join("<").split("&quot;").join("\"").split("&#039;").join("'").split("&amp;").join("&");
};
StringTools.startsWith = function(s,start) {
	if(s.length >= start.length) {
		return HxOverrides.substr(s,0,start.length) == start;
	} else {
		return false;
	}
};
StringTools.endsWith = function(s,end) {
	var elen = end.length;
	var slen = s.length;
	if(slen >= elen) {
		return HxOverrides.substr(s,slen - elen,elen) == end;
	} else {
		return false;
	}
};
StringTools.isSpace = function(s,pos) {
	var c = HxOverrides.cca(s,pos);
	if(!(c > 8 && c < 14)) {
		return c == 32;
	} else {
		return true;
	}
};
StringTools.ltrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,r)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,r,l - r);
	} else {
		return s;
	}
};
StringTools.rtrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,l - r - 1)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,0,l - r);
	} else {
		return s;
	}
};
StringTools.trim = function(s) {
	return StringTools.ltrim(StringTools.rtrim(s));
};
StringTools.replace = function(s,sub,by) {
	return s.split(sub).join(by);
};
StringTools.hex = function(n,digits) {
	var s = "";
	while(true) {
		s = "0123456789ABCDEF".charAt(n & 15) + s;
		n >>>= 4;
		if(!(n > 0)) {
			break;
		}
	}
	if(digits != null) {
		while(s.length < digits) s = "0" + s;
	}
	return s;
};
var Terminator = function() {
	var _this = format_swf_lite_SWFLite.instances;
	if(!(__map_reserved["lib/AssetSource/AssetSource.dat"] != null ? _this.existsReserved("lib/AssetSource/AssetSource.dat") : _this.h.hasOwnProperty("lib/AssetSource/AssetSource.dat"))) {
		var this1 = format_swf_lite_SWFLite.instances;
		var value = format_swf_lite_SWFLite.unserialize(openfl_Assets.getText("lib/AssetSource/AssetSource.dat"));
		var _this1 = this1;
		if(__map_reserved["lib/AssetSource/AssetSource.dat"] != null) {
			_this1.setReserved("lib/AssetSource/AssetSource.dat",value);
		} else {
			_this1.h["lib/AssetSource/AssetSource.dat"] = value;
		}
	}
	var _this2 = format_swf_lite_SWFLite.instances;
	var swfLite = __map_reserved["lib/AssetSource/AssetSource.dat"] != null ? _this2.getReserved("lib/AssetSource/AssetSource.dat") : _this2.h["lib/AssetSource/AssetSource.dat"];
	format_swf_lite_MovieClip.call(this,swfLite,swfLite.symbols.h[4]);
};
$hxClasses["Terminator"] = Terminator;
Terminator.__name__ = ["Terminator"];
Terminator.__super__ = format_swf_lite_MovieClip;
Terminator.prototype = $extend(format_swf_lite_MovieClip.prototype,{
	__class__: Terminator
});
var ValueType = $hxClasses["ValueType"] = { __ename__ : ["ValueType"], __constructs__ : ["TNull","TInt","TFloat","TBool","TObject","TFunction","TClass","TEnum","TUnknown"] };
ValueType.TNull = ["TNull",0];
ValueType.TNull.toString = $estr;
ValueType.TNull.__enum__ = ValueType;
ValueType.TInt = ["TInt",1];
ValueType.TInt.toString = $estr;
ValueType.TInt.__enum__ = ValueType;
ValueType.TFloat = ["TFloat",2];
ValueType.TFloat.toString = $estr;
ValueType.TFloat.__enum__ = ValueType;
ValueType.TBool = ["TBool",3];
ValueType.TBool.toString = $estr;
ValueType.TBool.__enum__ = ValueType;
ValueType.TObject = ["TObject",4];
ValueType.TObject.toString = $estr;
ValueType.TObject.__enum__ = ValueType;
ValueType.TFunction = ["TFunction",5];
ValueType.TFunction.toString = $estr;
ValueType.TFunction.__enum__ = ValueType;
ValueType.TClass = function(c) { var $x = ["TClass",6,c]; $x.__enum__ = ValueType; $x.toString = $estr; return $x; };
ValueType.TEnum = function(e) { var $x = ["TEnum",7,e]; $x.__enum__ = ValueType; $x.toString = $estr; return $x; };
ValueType.TUnknown = ["TUnknown",8];
ValueType.TUnknown.toString = $estr;
ValueType.TUnknown.__enum__ = ValueType;
ValueType.__empty_constructs__ = [ValueType.TNull,ValueType.TInt,ValueType.TFloat,ValueType.TBool,ValueType.TObject,ValueType.TFunction,ValueType.TUnknown];
var Type = function() { };
$hxClasses["Type"] = Type;
Type.__name__ = ["Type"];
Type.getSuperClass = function(c) {
	return c.__super__;
};
Type.getClassName = function(c) {
	var a = c.__name__;
	if(a == null) {
		return null;
	}
	return a.join(".");
};
Type.getEnumName = function(e) {
	var a = e.__ename__;
	return a.join(".");
};
Type.resolveClass = function(name) {
	var cl = $hxClasses[name];
	if(cl == null || !cl.__name__) {
		return null;
	}
	return cl;
};
Type.resolveEnum = function(name) {
	var e = $hxClasses[name];
	if(e == null || !e.__ename__) {
		return null;
	}
	return e;
};
Type.createInstance = function(cl,args) {
	var _g = args.length;
	switch(_g) {
	case 0:
		return new cl();
	case 1:
		return new cl(args[0]);
	case 2:
		return new cl(args[0],args[1]);
	case 3:
		return new cl(args[0],args[1],args[2]);
	case 4:
		return new cl(args[0],args[1],args[2],args[3]);
	case 5:
		return new cl(args[0],args[1],args[2],args[3],args[4]);
	case 6:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5]);
	case 7:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6]);
	case 8:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7]);
	case 9:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7],args[8]);
	case 10:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7],args[8],args[9]);
	case 11:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7],args[8],args[9],args[10]);
	case 12:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7],args[8],args[9],args[10],args[11]);
	case 13:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7],args[8],args[9],args[10],args[11],args[12]);
	case 14:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7],args[8],args[9],args[10],args[11],args[12],args[13]);
	default:
		throw new js__$Boot_HaxeError("Too many arguments");
	}
};
Type.createEmptyInstance = function(cl) {
	function empty() {}; empty.prototype = cl.prototype;
	return new empty();
};
Type.createEnum = function(e,constr,params) {
	var f = Reflect.field(e,constr);
	if(f == null) {
		throw new js__$Boot_HaxeError("No such constructor " + constr);
	}
	if(Reflect.isFunction(f)) {
		if(params == null) {
			throw new js__$Boot_HaxeError("Constructor " + constr + " need parameters");
		}
		return f.apply(e,params);
	}
	if(params != null && params.length != 0) {
		throw new js__$Boot_HaxeError("Constructor " + constr + " does not need parameters");
	}
	return f;
};
Type.getInstanceFields = function(c) {
	var a = [];
	for(var i in c.prototype) a.push(i);
	HxOverrides.remove(a,"__class__");
	HxOverrides.remove(a,"__properties__");
	return a;
};
Type["typeof"] = function(v) {
	var _g = typeof(v);
	switch(_g) {
	case "boolean":
		return ValueType.TBool;
	case "function":
		if(v.__name__ || v.__ename__) {
			return ValueType.TObject;
		}
		return ValueType.TFunction;
	case "number":
		if(Math.ceil(v) == v % 2147483648.0) {
			return ValueType.TInt;
		}
		return ValueType.TFloat;
	case "object":
		if(v == null) {
			return ValueType.TNull;
		}
		var e = v.__enum__;
		if(e != null) {
			return ValueType.TEnum(e);
		}
		var c = js_Boot.getClass(v);
		if(c != null) {
			return ValueType.TClass(c);
		}
		return ValueType.TObject;
	case "string":
		return ValueType.TClass(String);
	case "undefined":
		return ValueType.TNull;
	default:
		return ValueType.TUnknown;
	}
};
var _$UInt_UInt_$Impl_$ = {};
$hxClasses["_UInt.UInt_Impl_"] = _$UInt_UInt_$Impl_$;
_$UInt_UInt_$Impl_$.__name__ = ["_UInt","UInt_Impl_"];
_$UInt_UInt_$Impl_$.gt = function(a,b) {
	var aNeg = a < 0;
	if(aNeg != b < 0) {
		return aNeg;
	} else {
		return a > b;
	}
};
_$UInt_UInt_$Impl_$.gte = function(a,b) {
	var aNeg = a < 0;
	if(aNeg != b < 0) {
		return aNeg;
	} else {
		return a >= b;
	}
};
_$UInt_UInt_$Impl_$.toFloat = function(this1) {
	if(this1 < 0) {
		return 4294967296.0 + this1;
	} else {
		return this1 + 0.0;
	}
};
var UpperBattleBar = function() {
	var _this = format_swf_lite_SWFLite.instances;
	if(!(__map_reserved["lib/AssetSource/AssetSource.dat"] != null ? _this.existsReserved("lib/AssetSource/AssetSource.dat") : _this.h.hasOwnProperty("lib/AssetSource/AssetSource.dat"))) {
		var this1 = format_swf_lite_SWFLite.instances;
		var value = format_swf_lite_SWFLite.unserialize(openfl_Assets.getText("lib/AssetSource/AssetSource.dat"));
		var _this1 = this1;
		if(__map_reserved["lib/AssetSource/AssetSource.dat"] != null) {
			_this1.setReserved("lib/AssetSource/AssetSource.dat",value);
		} else {
			_this1.h["lib/AssetSource/AssetSource.dat"] = value;
		}
	}
	var _this2 = format_swf_lite_SWFLite.instances;
	var swfLite = __map_reserved["lib/AssetSource/AssetSource.dat"] != null ? _this2.getReserved("lib/AssetSource/AssetSource.dat") : _this2.h["lib/AssetSource/AssetSource.dat"];
	format_swf_lite_MovieClip.call(this,swfLite,swfLite.symbols.h[47]);
};
$hxClasses["UpperBattleBar"] = UpperBattleBar;
UpperBattleBar.__name__ = ["UpperBattleBar"];
UpperBattleBar.__super__ = format_swf_lite_MovieClip;
UpperBattleBar.prototype = $extend(format_swf_lite_MovieClip.prototype,{
	__class__: UpperBattleBar
});
var Xml = function(nodeType) {
	this.nodeType = nodeType;
	this.children = [];
	this.attributeMap = new haxe_ds_StringMap();
};
$hxClasses["Xml"] = Xml;
Xml.__name__ = ["Xml"];
Xml.parse = function(str) {
	return haxe_xml_Parser.parse(str);
};
Xml.createElement = function(name) {
	var xml = new Xml(Xml.Element);
	if(xml.nodeType != Xml.Element) {
		throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + xml.nodeType);
	}
	xml.nodeName = name;
	return xml;
};
Xml.createPCData = function(data) {
	var xml = new Xml(Xml.PCData);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw new js__$Boot_HaxeError("Bad node type, unexpected " + xml.nodeType);
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createCData = function(data) {
	var xml = new Xml(Xml.CData);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw new js__$Boot_HaxeError("Bad node type, unexpected " + xml.nodeType);
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createComment = function(data) {
	var xml = new Xml(Xml.Comment);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw new js__$Boot_HaxeError("Bad node type, unexpected " + xml.nodeType);
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createDocType = function(data) {
	var xml = new Xml(Xml.DocType);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw new js__$Boot_HaxeError("Bad node type, unexpected " + xml.nodeType);
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createProcessingInstruction = function(data) {
	var xml = new Xml(Xml.ProcessingInstruction);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw new js__$Boot_HaxeError("Bad node type, unexpected " + xml.nodeType);
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createDocument = function() {
	return new Xml(Xml.Document);
};
Xml.prototype = {
	nodeType: null
	,nodeName: null
	,nodeValue: null
	,parent: null
	,children: null
	,attributeMap: null
	,get: function(att) {
		if(this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + this.nodeType);
		}
		var _this = this.attributeMap;
		if(__map_reserved[att] != null) {
			return _this.getReserved(att);
		} else {
			return _this.h[att];
		}
	}
	,set: function(att,value) {
		if(this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + this.nodeType);
		}
		var _this = this.attributeMap;
		if(__map_reserved[att] != null) {
			_this.setReserved(att,value);
		} else {
			_this.h[att] = value;
		}
	}
	,exists: function(att) {
		if(this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + this.nodeType);
		}
		var _this = this.attributeMap;
		if(__map_reserved[att] != null) {
			return _this.existsReserved(att);
		} else {
			return _this.h.hasOwnProperty(att);
		}
	}
	,attributes: function() {
		if(this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + this.nodeType);
		}
		return this.attributeMap.keys();
	}
	,addChild: function(x) {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + this.nodeType);
		}
		if(x.parent != null) {
			x.parent.removeChild(x);
		}
		this.children.push(x);
		x.parent = this;
	}
	,removeChild: function(x) {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + this.nodeType);
		}
		if(HxOverrides.remove(this.children,x)) {
			x.parent = null;
			return true;
		}
		return false;
	}
	,__class__: Xml
};
var Zealon = function() {
	var _this = format_swf_lite_SWFLite.instances;
	if(!(__map_reserved["lib/AssetSource/AssetSource.dat"] != null ? _this.existsReserved("lib/AssetSource/AssetSource.dat") : _this.h.hasOwnProperty("lib/AssetSource/AssetSource.dat"))) {
		var this1 = format_swf_lite_SWFLite.instances;
		var value = format_swf_lite_SWFLite.unserialize(openfl_Assets.getText("lib/AssetSource/AssetSource.dat"));
		var _this1 = this1;
		if(__map_reserved["lib/AssetSource/AssetSource.dat"] != null) {
			_this1.setReserved("lib/AssetSource/AssetSource.dat",value);
		} else {
			_this1.h["lib/AssetSource/AssetSource.dat"] = value;
		}
	}
	var _this2 = format_swf_lite_SWFLite.instances;
	var swfLite = __map_reserved["lib/AssetSource/AssetSource.dat"] != null ? _this2.getReserved("lib/AssetSource/AssetSource.dat") : _this2.h["lib/AssetSource/AssetSource.dat"];
	format_swf_lite_MovieClip.call(this,swfLite,swfLite.symbols.h[2]);
};
$hxClasses["Zealon"] = Zealon;
Zealon.__name__ = ["Zealon"];
Zealon.__super__ = format_swf_lite_MovieClip;
Zealon.prototype = $extend(format_swf_lite_MovieClip.prototype,{
	__class__: Zealon
});
var data_AbilityBehaviours = function() { };
$hxClasses["data.AbilityBehaviours"] = data_AbilityBehaviours;
data_AbilityBehaviours.__name__ = ["data","AbilityBehaviours"];
data_AbilityBehaviours.useAbility = function(id,target,caster,element) {
	switch(id) {
	case "ability_affliction":
		break;
	case "ability_burn":
		break;
	case "ability_charge":
		data_AbilityBehaviours.charge(target,caster,element);
		break;
	case "ability_dark_pact":
		data_AbilityBehaviours.darkPact(target,caster,element);
		break;
	case "ability_electrical_storm":
		data_AbilityBehaviours.electricalStorm(target,caster,element);
		break;
	case "ability_heal":
		data_AbilityBehaviours.heal(target,caster,element);
		break;
	case "ability_high_voltage":
		data_AbilityBehaviours.highVoltage(target,caster,element);
		break;
	case "ability_in_flames":
		break;
	case "ability_kick":
		break;
	case "ability_nature_heal":
		break;
	case "ability_quick_strike":
		data_AbilityBehaviours.quickStrike(target,caster,element);
		break;
	case "ability_replenish":
		break;
	case "ability_shock_therapy":
		data_AbilityBehaviours.shockTherapy(target,caster,element);
		break;
	case "ability_stone_form":
		break;
	case "ability_stub":
		break;
	case "ability_throw_stone":
		break;
	default:
		haxe_Log.trace("No ability with such ID: " + id,{ fileName : "AbilityBehaviours.hx", lineNumber : 55, className : "data.AbilityBehaviours", methodName : "useAbility"});
		throw new js__$Boot_HaxeError(0);
	}
};
data_AbilityBehaviours.quickStrike = function(target,caster,element) {
	BattleController.instance.changeUnitHP(target,caster,-30,element,utils_DamageSource.Ability);
};
data_AbilityBehaviours.heal = function(target,caster,element) {
	BattleController.instance.changeUnitHP(target,caster,50,element,utils_DamageSource.Ability);
};
data_AbilityBehaviours.darkPact = function(target,caster,element) {
	var selfDamage = caster.intellect * 10 + 10;
	BattleController.instance.changeUnitHP(target,caster,-(selfDamage * 2),element,utils_DamageSource.Ability);
	BattleController.instance.changeUnitHP(caster,caster,-selfDamage,element,utils_DamageSource.Ability);
};
data_AbilityBehaviours.shockTherapy = function(target,caster,element) {
	var delta = 20 + caster.intellect * 20;
	if(caster.figureRelation(target) == utils_UnitType.Enemy) {
		delta = -delta;
	}
	BattleController.instance.changeUnitHP(target,caster,delta,element,utils_DamageSource.Ability);
	BattleController.instance.dispellBuffs(target,[utils_Element.Lightning]);
};
data_AbilityBehaviours.highVoltage = function(target,caster,element) {
	BattleController.instance.changeUnitHP(target,caster,-(40 + caster.intellect * 10),element,utils_DamageSource.Ability);
	BattleController.instance.castBuff("buff_conductivity",target,caster,2);
};
data_AbilityBehaviours.electricalStorm = function(target,caster,element) {
	var delta;
	switch(target.buffQueue.elementalCount(utils_Element.Lightning)) {
	case 0:
		delta = 25 + 10 * caster.intellect;
		break;
	case 1:
		delta = -(20 + 10 * caster.intellect);
		break;
	default:
		delta = -(70 + 20 * caster.intellect);
	}
	BattleController.instance.changeUnitHP(target,caster,delta,element,utils_DamageSource.Ability);
};
data_AbilityBehaviours.charge = function(target,caster,element) {
	BattleController.instance.changeUnitHP(target,caster,-(30 + caster.intellect * 10),element,utils_DamageSource.Ability);
	BattleController.instance.castBuff("buff_charged",target,caster,3);
};
data_AbilityBehaviours.burn = function(target,caster,element) {
};
data_AbilityBehaviours.affliction = function(target,caster,element) {
};
data_AbilityBehaviours.replenish = function(caster,element) {
};
data_AbilityBehaviours.inFlames = function(caster,element) {
};
data_AbilityBehaviours.kick = function(target,caster,element) {
};
data_AbilityBehaviours.throwStone = function(target,caster,element) {
};
data_AbilityBehaviours.natureHeal = function(target,caster,element) {
};
data_AbilityBehaviours.stoneForm = function(caster,element) {
};
data_AbilityBehaviours.stub = function() {
};
var data_AbilityParameters = function() { };
$hxClasses["data.AbilityParameters"] = data_AbilityParameters;
data_AbilityParameters.__name__ = ["data","AbilityParameters"];
data_AbilityParameters.getParametersByID = function(id) {
	var parameters = new dataobj_ParamsAbility();
	switch(id) {
	case "ability_affliction":
		parameters.name = "Affliction";
		parameters.cooldown = 2;
		parameters.delay = 0;
		parameters.manacost = 50;
		parameters.target = utils_AbilityTarget.Enemy;
		parameters.type = utils_AbilityType.Bolt;
		parameters.element = utils_Element.Fire;
		break;
	case "ability_burn":
		parameters.name = "Burn";
		parameters.cooldown = 2;
		parameters.delay = 0;
		parameters.manacost = 50;
		parameters.target = utils_AbilityTarget.Enemy;
		parameters.type = utils_AbilityType.Bolt;
		parameters.element = utils_Element.Fire;
		break;
	case "ability_charge":
		parameters.name = "Charge";
		parameters.cooldown = 3;
		parameters.delay = 0;
		parameters.manacost = 20;
		parameters.target = utils_AbilityTarget.Enemy;
		parameters.type = utils_AbilityType.Spell;
		parameters.element = utils_Element.Lightning;
		break;
	case "ability_dark_pact":
		parameters.name = "Dark Pact";
		parameters.cooldown = 2;
		parameters.delay = 1;
		parameters.manacost = 10;
		parameters.target = utils_AbilityTarget.Enemy;
		parameters.type = utils_AbilityType.Spell;
		parameters.element = utils_Element.Shadow;
		break;
	case "ability_electrical_storm":
		parameters.name = "Electrical Storm";
		parameters.cooldown = 3;
		parameters.delay = 0;
		parameters.manacost = 80;
		parameters.target = utils_AbilityTarget.Enemy;
		parameters.type = utils_AbilityType.Bolt;
		parameters.element = utils_Element.Lightning;
		break;
	case "ability_heal":
		parameters.name = "Heal";
		parameters.cooldown = 3;
		parameters.delay = 0;
		parameters.manacost = 50;
		parameters.target = utils_AbilityTarget.Allied;
		parameters.type = utils_AbilityType.Spell;
		parameters.element = utils_Element.Natura;
		break;
	case "ability_high_voltage":
		parameters.name = "High Voltage";
		parameters.cooldown = 2;
		parameters.delay = 0;
		parameters.manacost = 40;
		parameters.target = utils_AbilityTarget.Enemy;
		parameters.type = utils_AbilityType.Bolt;
		parameters.element = utils_Element.Lightning;
		break;
	case "ability_in_flames":
		parameters.name = "In Flames";
		parameters.cooldown = 6;
		parameters.delay = 0;
		parameters.manacost = 10;
		parameters.target = utils_AbilityTarget.Self;
		parameters.type = utils_AbilityType.Spell;
		parameters.element = utils_Element.Fire;
		break;
	case "ability_kick":
		parameters.name = "Kick";
		parameters.cooldown = 0;
		parameters.delay = 0;
		parameters.manacost = 0;
		parameters.target = utils_AbilityTarget.Enemy;
		parameters.type = utils_AbilityType.Kick;
		parameters.element = utils_Element.Terra;
		break;
	case "ability_nature_heal":
		parameters.name = "Nature Heal";
		parameters.cooldown = 2;
		parameters.delay = 0;
		parameters.manacost = 70;
		parameters.target = utils_AbilityTarget.Allied;
		parameters.type = utils_AbilityType.Spell;
		parameters.element = utils_Element.Terra;
		break;
	case "ability_quick_strike":
		parameters.name = "Quick Strike";
		parameters.cooldown = 0;
		parameters.delay = 0;
		parameters.manacost = 0;
		parameters.target = utils_AbilityTarget.Enemy;
		parameters.type = utils_AbilityType.Kick;
		parameters.element = utils_Element.Physical;
		break;
	case "ability_replenish":
		parameters.name = "Replenish";
		parameters.cooldown = 10;
		parameters.delay = 0;
		parameters.manacost = 0;
		parameters.target = utils_AbilityTarget.Self;
		parameters.type = utils_AbilityType.Spell;
		parameters.element = utils_Element.Fire;
		break;
	case "ability_shock_therapy":
		parameters.name = "Shock Therapy";
		parameters.cooldown = 3;
		parameters.delay = 0;
		parameters.manacost = 60;
		parameters.target = utils_AbilityTarget.All;
		parameters.type = utils_AbilityType.Spell;
		parameters.element = utils_Element.Lightning;
		break;
	case "ability_stone_form":
		parameters.name = "Stone Form";
		parameters.cooldown = 6;
		parameters.delay = 0;
		parameters.manacost = 70;
		parameters.target = utils_AbilityTarget.Self;
		parameters.type = utils_AbilityType.Spell;
		parameters.element = utils_Element.Terra;
		break;
	case "ability_empty":case "ability_stub":
		parameters.name = "Unnamed";
		parameters.cooldown = 0;
		parameters.delay = 0;
		parameters.manacost = 0;
		parameters.target = utils_AbilityTarget.All;
		parameters.type = utils_AbilityType.Kick;
		parameters.element = utils_Element.Physical;
		break;
	case "ability_throw_stone":
		parameters.name = "Throw Stone";
		parameters.cooldown = 4;
		parameters.delay = 0;
		parameters.manacost = 70;
		parameters.target = utils_AbilityTarget.Enemy;
		parameters.type = utils_AbilityType.Bolt;
		parameters.element = utils_Element.Terra;
		break;
	default:
		haxe_Log.trace("Incorrect ability ID: " + id,{ fileName : "AbilityParameters.hx", lineNumber : 154, className : "data.AbilityParameters", methodName : "getParametersByID"});
		throw new js__$Boot_HaxeError(0);
	}
	return parameters;
};
var data_Assets = function() { };
$hxClasses["data.Assets"] = data_Assets;
data_Assets.__name__ = ["data","Assets"];
data_Assets.getAssetByID = function(id) {
	switch(id) {
	case "ability_charge":
		return new Charge();
	case "ability_dark_pact":
		return new DarkPact();
	case "ability_electrical_storm":
		return new ElectricalStorm();
	case "ability_empty":
		return new NoAbility();
	case "ability_heal":
		return new Heal();
	case "ability_high_voltage":
		return new HighVoltage();
	case "ability_locked":
		return new LockedAbility();
	case "ability_quick_strike":
		return new QuickStrike();
	case "ability_shock_therapy":
		return new ShockTherapy();
	case "unit_archghost":
		return new Archghost();
	case "unit_ghost":
		return new Ghost();
	case "unit_hero":
		return new Hero();
	case "unit_hugo":
		return new Hugo();
	case "unit_icarus":
		return new Icarus();
	case "unit_terminator":
		return new Terminator();
	case "unit_zealon":
		return new Zealon();
	default:
		haxe_Log.trace("ERROR! No asset was found with such ID: " + id,{ fileName : "Assets.hx", lineNumber : 52, className : "data.Assets", methodName : "getAssetByID"});
		throw new js__$Boot_HaxeError(0);
	}
};
data_Assets.getBattleBGByZone = function(zone) {
	if(zone == 0) {
		return new NullZoneBG();
	} else {
		haxe_Log.trace("ERROR! Incorrect zone number: " + zone,{ fileName : "Assets.hx", lineNumber : 64, className : "data.Assets", methodName : "getBattleBGByZone"});
		throw new js__$Boot_HaxeError(0);
	}
};
data_Assets.getRoamingBGByZone = function(zone) {
	haxe_Log.trace("ERROR! Incorrect zone number: " + zone,{ fileName : "Assets.hx", lineNumber : 74, className : "data.Assets", methodName : "getRoamingBGByZone"});
	throw new js__$Boot_HaxeError(0);
};
var data_BotTactics = function() { };
$hxClasses["data.BotTactics"] = data_BotTactics;
data_BotTactics.__name__ = ["data","BotTactics"];
data_BotTactics.decide = function(id,allies,enemies) {
	switch(id) {
	case "unit_archghost":case "unit_ghost":
		return data_BotTactics.ghost(allies);
	default:
		haxe_Log.trace("Incorrect unit ID: " + id,{ fileName : "BotTactics.hx", lineNumber : 21, className : "data.BotTactics", methodName : "decide"});
		throw new js__$Boot_HaxeError(0);
	}
};
data_BotTactics.ghost = function(allies) {
	var target = utils_Utils.findWeakestUnit(allies);
	return new returns_BotDecision(target.team,target.position,0);
};
var data_BuffBehaviours = function() { };
$hxClasses["data.BuffBehaviours"] = data_BuffBehaviours;
data_BuffBehaviours.__name__ = ["data","BuffBehaviours"];
data_BuffBehaviours.useBuff = function(id,target,caster,element,mode) {
	switch(id) {
	case "buff_charged":
		data_BuffBehaviours.charged(target,mode);
		break;
	case "buff_conductivity":
		data_BuffBehaviours.conductivity(target,mode);
		break;
	default:
		haxe_Log.trace("No ability with such ID: " + id,{ fileName : "BuffBehaviours.hx", lineNumber : 21, className : "data.BuffBehaviours", methodName : "useBuff"});
		throw new js__$Boot_HaxeError(0);
	}
};
data_BuffBehaviours.conductivity = function(target,mode) {
	switch(mode[1]) {
	case 0:
		target.inputHealMultiplier *= 3;
		break;
	case 1:
		break;
	case 2:
		target.inputHealMultiplier /= 3;
		break;
	}
};
data_BuffBehaviours.charged = function(target,mode) {
	switch(mode[1]) {
	case 0:
		target.flow *= 2;
		break;
	case 1:
		break;
	case 2:
		target.flow = Math.round(target.flow / 2);
		break;
	}
};
var data_BuffParameters = function() { };
$hxClasses["data.BuffParameters"] = data_BuffParameters;
data_BuffParameters.__name__ = ["data","BuffParameters"];
data_BuffParameters.getParametersByID = function(id) {
	var parameters = new dataobj_ParamsBuff();
	switch(id) {
	case "buff_charged":
		parameters.name = "Charged";
		parameters.element = utils_Element.Lightning;
		parameters.isOverTime = false;
		parameters.isStackable = false;
		break;
	case "buff_conductivity":
		parameters.name = "Conductivity";
		parameters.element = utils_Element.Lightning;
		parameters.isOverTime = false;
		parameters.isStackable = false;
		break;
	default:
		haxe_Log.trace("Incorrect ability ID: " + id,{ fileName : "BuffParameters.hx", lineNumber : 29, className : "data.BuffParameters", methodName : "getParametersByID"});
		throw new js__$Boot_HaxeError(0);
	}
	return parameters;
};
var data_StageEnemies = function() { };
$hxClasses["data.StageEnemies"] = data_StageEnemies;
data_StageEnemies.__name__ = ["data","StageEnemies"];
data_StageEnemies.getIDsByStage = function(zone,stage) {
	var a = [];
	switch((zone == null ? "null" : "" + zone) + "_" + (stage == null ? "null" : "" + stage)) {
	case "0_1":
		a = ["unit_ghost"];
		break;
	case "0_2":
		a = ["unit_ghost","unit_ghost","unit_ghost"];
		break;
	case "0_3":
		a = ["unit_archghost"];
		break;
	default:
		haxe_Log.trace("ERROR! Incorrect zone&stage combination: " + zone + ", " + stage,{ fileName : "StageEnemies.hx", lineNumber : 23, className : "data.StageEnemies", methodName : "getIDsByStage"});
		throw new js__$Boot_HaxeError(0);
	}
	return a;
};
var data_UnitParameters = function() { };
$hxClasses["data.UnitParameters"] = data_UnitParameters;
data_UnitParameters.__name__ = ["data","UnitParameters"];
data_UnitParameters.getParametersByID = function(id,godMode) {
	if(godMode == null) {
		godMode = false;
	}
	var parameters = new dataobj_ParamsUnit();
	switch(id) {
	case "unit_archghost":
		parameters.name = "Archghost";
		parameters.hp = 10000;
		parameters.mana = 5000;
		parameters.wheel = ["ability_quick_strike"];
		parameters.strength = 1;
		parameters.flow = 1;
		parameters.intellect = 1;
		break;
	case "unit_ghost":
		parameters.name = "Ghost";
		parameters.hp = 100;
		parameters.mana = 50;
		parameters.wheel = ["ability_quick_strike"];
		parameters.strength = 1;
		parameters.flow = 1;
		parameters.intellect = 1;
		break;
	case "unit_hugo":
		parameters.name = "Hugo";
		parameters.hp = 400;
		parameters.mana = 140;
		parameters.wheel = ["ability_kick","ability_throw_stone","ability_nature_heal","ability_stone_form"];
		parameters.strength = 4;
		parameters.flow = 2;
		parameters.intellect = 2;
		break;
	case "unit_icarus":
		parameters.name = "Icarus";
		parameters.hp = 200;
		parameters.mana = 200;
		parameters.wheel = ["ability_burn","ability_affliction","ability_replenish","ability_in_flames"];
		parameters.strength = 2;
		parameters.flow = 4;
		parameters.intellect = 2;
		break;
	case "unit_zealon":
		parameters.name = "Zealon";
		parameters.hp = 140;
		parameters.mana = 400;
		parameters.wheel = ["ability_shock_therapy","ability_high_voltage","ability_electrical_storm","ability_charge"];
		parameters.strength = 2;
		parameters.flow = 2;
		parameters.intellect = 4;
		break;
	default:
		haxe_Log.trace("Incorrect unit ID: " + id,{ fileName : "UnitParameters.hx", lineNumber : 58, className : "data.UnitParameters", methodName : "getParametersByID"});
		throw new js__$Boot_HaxeError(0);
	}
	if(godMode) {
		parameters.hp *= 100;
		parameters.mana *= 100;
	}
	return parameters;
};
var dataobj_AbilityInfo = function() {
};
$hxClasses["dataobj.AbilityInfo"] = dataobj_AbilityInfo;
dataobj_AbilityInfo.__name__ = ["dataobj","AbilityInfo"];
dataobj_AbilityInfo.prototype = {
	name: null
	,type: null
	,maxCooldown: null
	,currentCooldown: null
	,manacost: null
	,target: null
	,__class__: dataobj_AbilityInfo
};
var dataobj_ParamsAbility = function() {
};
$hxClasses["dataobj.ParamsAbility"] = dataobj_ParamsAbility;
dataobj_ParamsAbility.__name__ = ["dataobj","ParamsAbility"];
dataobj_ParamsAbility.prototype = {
	name: null
	,type: null
	,cooldown: null
	,delay: null
	,manacost: null
	,target: null
	,element: null
	,__class__: dataobj_ParamsAbility
};
var dataobj_ParamsBuff = function() {
};
$hxClasses["dataobj.ParamsBuff"] = dataobj_ParamsBuff;
dataobj_ParamsBuff.__name__ = ["dataobj","ParamsBuff"];
dataobj_ParamsBuff.prototype = {
	name: null
	,element: null
	,isOverTime: null
	,isStackable: null
	,__class__: dataobj_ParamsBuff
};
var dataobj_ParamsUnit = function() {
};
$hxClasses["dataobj.ParamsUnit"] = dataobj_ParamsUnit;
dataobj_ParamsUnit.__name__ = ["dataobj","ParamsUnit"];
dataobj_ParamsUnit.prototype = {
	name: null
	,hp: null
	,mana: null
	,wheel: null
	,strength: null
	,flow: null
	,intellect: null
	,__class__: dataobj_ParamsUnit
};
var dataobj_UnitInfo = function() {
};
$hxClasses["dataobj.UnitInfo"] = dataobj_UnitInfo;
dataobj_UnitInfo.__name__ = ["dataobj","UnitInfo"];
dataobj_UnitInfo.prototype = {
	name: null
	,buffQueue: null
	,__class__: dataobj_UnitInfo
};
var format_SWF = function(bytes) {
	openfl_events_EventDispatcher.call(this);
	this.data = new format_swf_SWFRoot(bytes);
	this.backgroundColor = this.data.backgroundColor;
	this.frameRate = this.data.frameRate;
	this.width = this.data.frameSize.get_rect().width | 0;
	this.height = this.data.frameSize.get_rect().height | 0;
	this.symbols = this.data.symbols;
	var tmr = new openfl_utils_Timer(1,1);
	tmr.addEventListener("timerComplete",$bind(this,this.dispatchComplete));
	tmr.start();
};
$hxClasses["format.SWF"] = format_SWF;
format_SWF.__name__ = ["format","SWF"];
format_SWF.__super__ = openfl_events_EventDispatcher;
format_SWF.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	data: null
	,backgroundColor: null
	,frameRate: null
	,height: null
	,symbols: null
	,width: null
	,complete: null
	,dispatchCompleteTimer: function() {
		var tmr = new openfl_utils_Timer(1,1);
		tmr.addEventListener("timerComplete",$bind(this,this.dispatchComplete));
		tmr.start();
	}
	,dispatchComplete: function(e) {
		this.complete = true;
		this.dispatchEvent(new openfl_events_Event("complete"));
	}
	,addEventListener: function(type,listener,useCapture,priority,useWeakReference) {
		if(useWeakReference == null) {
			useWeakReference = false;
		}
		if(priority == null) {
			priority = 0;
		}
		if(useCapture == null) {
			useCapture = false;
		}
		openfl_events_EventDispatcher.prototype.addEventListener.call(this,type,listener,useCapture,priority,useWeakReference);
		if(this.complete) {
			this.dispatchEvent(new openfl_events_Event("complete"));
		}
	}
	,createButton: function(className) {
		var symbol = null;
		var charId;
		var _this = this.symbols;
		if(__map_reserved[className] != null ? _this.existsReserved(className) : _this.h.hasOwnProperty(className)) {
			var _this1 = this.symbols;
			if(__map_reserved[className] != null) {
				charId = _this1.getReserved(className);
			} else {
				charId = _this1.h[className];
			}
			symbol = this.data.getCharacter(charId);
		}
		if(js_Boot.__instanceof(symbol,format_swf_tags_TagDefineButton2)) {
			return new format_swf_instance_SimpleButton(this.data,symbol);
		}
		return null;
	}
	,createMovieClip: function(className) {
		if(className == null) {
			className = "";
		}
		var symbol = null;
		var charId;
		if(className == "") {
			symbol = this.data;
		} else {
			var _this = this.symbols;
			if(__map_reserved[className] != null ? _this.existsReserved(className) : _this.h.hasOwnProperty(className)) {
				var _this1 = this.symbols;
				if(__map_reserved[className] != null) {
					charId = _this1.getReserved(className);
				} else {
					charId = _this1.h[className];
				}
				if(charId > 0) {
					symbol = this.data.getCharacter(charId);
				} else {
					symbol = this.data;
				}
			}
		}
		if(js_Boot.__instanceof(symbol,format_swf_SWFTimelineContainer)) {
			return new format_swf_instance_MovieClip(symbol);
		}
		return null;
	}
	,getBitmapData: function(className) {
		var symbol = null;
		if(className == "") {
			symbol = this.data;
		} else {
			var _this = this.symbols;
			if(__map_reserved[className] != null ? _this.existsReserved(className) : _this.h.hasOwnProperty(className)) {
				var _this1 = this.symbols;
				symbol = this.data.getCharacter(__map_reserved[className] != null ? _this1.getReserved(className) : _this1.h[className]);
			}
		}
		if(js_Boot.__instanceof(symbol,format_swf_tags_TagDefineBits) || js_Boot.__instanceof(symbol,format_swf_tags_TagDefineBitsLossless)) {
			return new format_swf_instance_Bitmap(symbol).bitmapData;
		}
		return null;
	}
	,hasSymbol: function(className) {
		var _this = this.symbols;
		if(__map_reserved[className] != null) {
			return _this.existsReserved(className);
		} else {
			return _this.h.hasOwnProperty(className);
		}
	}
	,__class__: format_SWF
});
var format_swf__$SWFData_SWFData_$Impl_$ = {};
$hxClasses["format.swf._SWFData.SWFData_Impl_"] = format_swf__$SWFData_SWFData_$Impl_$;
format_swf__$SWFData_SWFData_$Impl_$.__name__ = ["format","swf","_SWFData","SWFData_Impl_"];
format_swf__$SWFData_SWFData_$Impl_$.__properties__ = {set_length:"set_length",get_length:"get_length"}
format_swf__$SWFData_SWFData_$Impl_$._new = function() {
	var this1 = new format_swf_utils_BitArray();
	this1.__endian = 1;
	return this1;
};
format_swf__$SWFData_SWFData_$Impl_$.readSI8 = function(this1) {
	this1.resetBitsPending();
	return this1.readByte();
};
format_swf__$SWFData_SWFData_$Impl_$.writeSI8 = function(this1,value) {
	this1.resetBitsPending();
	this1.writeByte(value);
};
format_swf__$SWFData_SWFData_$Impl_$.readSI16 = function(this1) {
	this1.resetBitsPending();
	return this1.readShort();
};
format_swf__$SWFData_SWFData_$Impl_$.writeSI16 = function(this1,value) {
	this1.resetBitsPending();
	this1.writeShort(value);
};
format_swf__$SWFData_SWFData_$Impl_$.readSI32 = function(this1) {
	this1.resetBitsPending();
	return this1.readInt();
};
format_swf__$SWFData_SWFData_$Impl_$.writeSI32 = function(this1,value) {
	this1.resetBitsPending();
	this1.writeInt(value);
};
format_swf__$SWFData_SWFData_$Impl_$.readUI8 = function(this1) {
	this1.resetBitsPending();
	return this1.readUnsignedByte();
};
format_swf__$SWFData_SWFData_$Impl_$.writeUI8 = function(this1,value) {
	this1.resetBitsPending();
	this1.writeByte(value);
};
format_swf__$SWFData_SWFData_$Impl_$.readUI16 = function(this1) {
	this1.resetBitsPending();
	return this1.readUnsignedShort();
};
format_swf__$SWFData_SWFData_$Impl_$.writeUI16 = function(this1,value) {
	this1.resetBitsPending();
	this1.writeShort(value);
};
format_swf__$SWFData_SWFData_$Impl_$.readUI24 = function(this1) {
	this1.resetBitsPending();
	var loWord = this1.readUnsignedShort();
	return this1.readUnsignedByte() << 16 | loWord;
};
format_swf__$SWFData_SWFData_$Impl_$.writeUI24 = function(this1,value) {
	this1.resetBitsPending();
	this1.writeShort(value & 65535);
	this1.writeByte(value >> 16);
};
format_swf__$SWFData_SWFData_$Impl_$.readUI32 = function(this1) {
	this1.resetBitsPending();
	return this1.readUnsignedInt();
};
format_swf__$SWFData_SWFData_$Impl_$.writeUI32 = function(this1,value) {
	this1.resetBitsPending();
	this1.writeUnsignedInt(value);
};
format_swf__$SWFData_SWFData_$Impl_$.readFIXED = function(this1) {
	this1.resetBitsPending();
	return this1.readInt() / 65536;
};
format_swf__$SWFData_SWFData_$Impl_$.writeFIXED = function(this1,value) {
	this1.resetBitsPending();
	this1.writeInt(value * 65536 | 0);
};
format_swf__$SWFData_SWFData_$Impl_$.readFIXED8 = function(this1) {
	this1.resetBitsPending();
	return this1.readShort() / 256;
};
format_swf__$SWFData_SWFData_$Impl_$.writeFIXED8 = function(this1,value) {
	this1.resetBitsPending();
	this1.writeShort(value * 256 | 0);
};
format_swf__$SWFData_SWFData_$Impl_$.readFLOAT = function(this1) {
	this1.resetBitsPending();
	return this1.readFloat();
};
format_swf__$SWFData_SWFData_$Impl_$.writeFLOAT = function(this1,value) {
	this1.resetBitsPending();
	this1.writeFloat(value);
};
format_swf__$SWFData_SWFData_$Impl_$.readDOUBLE = function(this1) {
	this1.resetBitsPending();
	return this1.readDouble();
};
format_swf__$SWFData_SWFData_$Impl_$.writeDOUBLE = function(this1,value) {
	this1.resetBitsPending();
	this1.writeDouble(value);
};
format_swf__$SWFData_SWFData_$Impl_$.readFLOAT16 = function(this1) {
	this1.resetBitsPending();
	var word = this1.readUnsignedShort();
	var sign = (word & 32768) != 0 ? -1 : 1;
	var exponent = word >> 10 & 31;
	var significand = word & 1023;
	if(exponent == 0) {
		if(significand == 0) {
			return 0;
		} else {
			return sign * Math.pow(2,-14.) * (significand / 1024);
		}
	}
	if(exponent == 31) {
		if(significand == 0) {
			if(sign < 0) {
				return -Infinity;
			} else {
				return Infinity;
			}
		} else {
			return NaN;
		}
	}
	return sign * Math.pow(2,exponent - 15) * (1 + significand / 1024);
};
format_swf__$SWFData_SWFData_$Impl_$.writeFLOAT16 = function(this1,value) {
	format_swf_utils_HalfPrecisionWriter.write(value,this1);
};
format_swf__$SWFData_SWFData_$Impl_$.readEncodedU32 = function(this1) {
	this1.resetBitsPending();
	var result = this1.readUnsignedByte();
	if((result & 128) > 0) {
		result = result & 127 | this1.readUnsignedByte() << 7;
		if((result & 16384) > 0) {
			result = result & 16383 | this1.readUnsignedByte() << 14;
			if((result & 2097152) > 0) {
				result = result & 2097151 | this1.readUnsignedByte() << 21;
				if((result & 268435456) > 0) {
					result = result & 268435455 | this1.readUnsignedByte() << 28;
				}
			}
		}
	}
	return result;
};
format_swf__$SWFData_SWFData_$Impl_$.writeEncodedU32 = function(this1,value) {
	var v = value & 127;
	if((value >>= 7) == 0) {
		format_swf__$SWFData_SWFData_$Impl_$.writeUI8(this1,v);
		return;
	}
	format_swf__$SWFData_SWFData_$Impl_$.writeUI8(this1,v | 128);
};
format_swf__$SWFData_SWFData_$Impl_$.readUB = function(this1,bits) {
	return this1.readBits(bits);
};
format_swf__$SWFData_SWFData_$Impl_$.writeUB = function(this1,bits,value) {
	this1.writeBits(bits,value);
};
format_swf__$SWFData_SWFData_$Impl_$.readSB = function(this1,bits) {
	var shift = 32 - bits;
	return (this1.readBits(bits) << shift | 0) >> shift;
};
format_swf__$SWFData_SWFData_$Impl_$.writeSB = function(this1,bits,value) {
	this1.writeBits(bits,value);
};
format_swf__$SWFData_SWFData_$Impl_$.readFB = function(this1,bits) {
	return format_swf__$SWFData_SWFData_$Impl_$.readSB(this1,bits) / 65536;
};
format_swf__$SWFData_SWFData_$Impl_$.writeFB = function(this1,bits,value) {
	format_swf__$SWFData_SWFData_$Impl_$.writeSB(this1,bits,value * 65536 | 0);
};
format_swf__$SWFData_SWFData_$Impl_$.readSTRING = function(this1) {
	var index = this1.position;
	while(this1.b[index++] > 0) {
	}
	this1.resetBitsPending();
	return this1.readUTFBytes(index - this1.position);
};
format_swf__$SWFData_SWFData_$Impl_$.writeSTRING = function(this1,value) {
	if(value != null && value.length > 0) {
		this1.writeUTFBytes(value);
	}
	this1.writeByte(0);
};
format_swf__$SWFData_SWFData_$Impl_$.readLANGCODE = function(this1) {
	this1.resetBitsPending();
	return this1.readUnsignedByte();
};
format_swf__$SWFData_SWFData_$Impl_$.writeLANGCODE = function(this1,value) {
	this1.resetBitsPending();
	this1.writeByte(value);
};
format_swf__$SWFData_SWFData_$Impl_$.readRGB = function(this1) {
	this1.resetBitsPending();
	return -16777216 | this1.readUnsignedByte() << 16 | this1.readUnsignedByte() << 8 | this1.readUnsignedByte();
};
format_swf__$SWFData_SWFData_$Impl_$.writeRGB = function(this1,value) {
	this1.resetBitsPending();
	this1.writeByte(value >> 16 & 255);
	this1.writeByte(value >> 8 & 255);
	this1.writeByte(value & 255);
};
format_swf__$SWFData_SWFData_$Impl_$.readRGBA = function(this1) {
	this1.resetBitsPending();
	var rgb = format_swf__$SWFData_SWFData_$Impl_$.readRGB(this1) & 16777215;
	return this1.readUnsignedByte() << 24 | rgb;
};
format_swf__$SWFData_SWFData_$Impl_$.writeRGBA = function(this1,value) {
	this1.resetBitsPending();
	format_swf__$SWFData_SWFData_$Impl_$.writeRGB(this1,value);
	this1.writeByte(value >> 24 & 255);
};
format_swf__$SWFData_SWFData_$Impl_$.readARGB = function(this1) {
	this1.resetBitsPending();
	return this1.readUnsignedByte() << 24 | format_swf__$SWFData_SWFData_$Impl_$.readRGB(this1) & 16777215;
};
format_swf__$SWFData_SWFData_$Impl_$.writeARGB = function(this1,value) {
	this1.resetBitsPending();
	this1.writeByte(value >> 24 & 255);
	format_swf__$SWFData_SWFData_$Impl_$.writeRGB(this1,value);
};
format_swf__$SWFData_SWFData_$Impl_$.readRECT = function(this1) {
	return new format_swf_data_SWFRectangle(this1);
};
format_swf__$SWFData_SWFData_$Impl_$.writeRECT = function(this1,value) {
	value.publish(this1);
};
format_swf__$SWFData_SWFData_$Impl_$.readMATRIX = function(this1) {
	return new format_swf_data_SWFMatrix(this1);
};
format_swf__$SWFData_SWFData_$Impl_$.writeMATRIX = function(this1,value) {
	this1.resetBitsPending();
	var hasScale = value.scaleX != 1 || value.scaleY != 1;
	var hasRotate = value.rotateSkew0 != 0 || value.rotateSkew1 != 0;
	this1.writeBits(1,hasScale ? 1 : 0);
	if(hasScale) {
		var scaleBits;
		if(value.scaleX == 0 && value.scaleY == 0) {
			scaleBits = 1;
		} else {
			scaleBits = this1.calculateMaxBits(true,[value.scaleX * 65536 | 0,value.scaleY * 65536 | 0]);
		}
		format_swf__$SWFData_SWFData_$Impl_$.writeUB(this1,5,scaleBits);
		format_swf__$SWFData_SWFData_$Impl_$.writeFB(this1,scaleBits,value.scaleX);
		format_swf__$SWFData_SWFData_$Impl_$.writeFB(this1,scaleBits,value.scaleY);
	}
	this1.writeBits(1,hasRotate ? 1 : 0);
	if(hasRotate) {
		var rotateBits = this1.calculateMaxBits(true,[value.rotateSkew0 * 65536 | 0,value.rotateSkew1 * 65536 | 0]);
		format_swf__$SWFData_SWFData_$Impl_$.writeUB(this1,5,rotateBits);
		format_swf__$SWFData_SWFData_$Impl_$.writeFB(this1,rotateBits,value.rotateSkew0);
		format_swf__$SWFData_SWFData_$Impl_$.writeFB(this1,rotateBits,value.rotateSkew1);
	}
	var translateBits = this1.calculateMaxBits(true,[value.translateX,value.translateY]);
	format_swf__$SWFData_SWFData_$Impl_$.writeUB(this1,5,translateBits);
	format_swf__$SWFData_SWFData_$Impl_$.writeSB(this1,translateBits,value.translateX);
	format_swf__$SWFData_SWFData_$Impl_$.writeSB(this1,translateBits,value.translateY);
};
format_swf__$SWFData_SWFData_$Impl_$.readCXFORM = function(this1) {
	return new format_swf_data_SWFColorTransform(this1);
};
format_swf__$SWFData_SWFData_$Impl_$.writeCXFORM = function(this1,value) {
	value.publish(this1);
};
format_swf__$SWFData_SWFData_$Impl_$.readCXFORMWITHALPHA = function(this1) {
	return new format_swf_data_SWFColorTransformWithAlpha(this1);
};
format_swf__$SWFData_SWFData_$Impl_$.writeCXFORMWITHALPHA = function(this1,value) {
	value.publish(this1);
};
format_swf__$SWFData_SWFData_$Impl_$.readSHAPE = function(this1,unitDivisor) {
	if(unitDivisor == null) {
		unitDivisor = 20;
	}
	return new format_swf_data_SWFShape(this1,1,unitDivisor);
};
format_swf__$SWFData_SWFData_$Impl_$.writeSHAPE = function(this1,value) {
	value.publish(this1);
};
format_swf__$SWFData_SWFData_$Impl_$.readSHAPEWITHSTYLE = function(this1,level,unitDivisor) {
	if(unitDivisor == null) {
		unitDivisor = 20;
	}
	if(level == null) {
		level = 1;
	}
	return new format_swf_data_SWFShapeWithStyle(this1,level,unitDivisor);
};
format_swf__$SWFData_SWFData_$Impl_$.writeSHAPEWITHSTYLE = function(this1,value,level) {
	if(level == null) {
		level = 1;
	}
	value.publish(this1,level);
};
format_swf__$SWFData_SWFData_$Impl_$.readSTRAIGHTEDGERECORD = function(this1,numBits) {
	return new format_swf_data_SWFShapeRecordStraightEdge(this1,numBits);
};
format_swf__$SWFData_SWFData_$Impl_$.writeSTRAIGHTEDGERECORD = function(this1,value) {
	value.publish(this1);
};
format_swf__$SWFData_SWFData_$Impl_$.readCURVEDEDGERECORD = function(this1,numBits) {
	return new format_swf_data_SWFShapeRecordCurvedEdge(this1,numBits);
};
format_swf__$SWFData_SWFData_$Impl_$.writeCURVEDEDGERECORD = function(this1,value) {
	value.publish(this1);
};
format_swf__$SWFData_SWFData_$Impl_$.readSTYLECHANGERECORD = function(this1,states,fillBits,lineBits,level) {
	if(level == null) {
		level = 1;
	}
	return new format_swf_data_SWFShapeRecordStyleChange(this1,states,fillBits,lineBits,level);
};
format_swf__$SWFData_SWFData_$Impl_$.writeSTYLECHANGERECORD = function(this1,value,fillBits,lineBits,level) {
	if(level == null) {
		level = 1;
	}
	value.numFillBits = fillBits;
	value.numLineBits = lineBits;
	value.publish(this1,level);
};
format_swf__$SWFData_SWFData_$Impl_$.readFILLSTYLE = function(this1,level) {
	if(level == null) {
		level = 1;
	}
	return new format_swf_data_SWFFillStyle(this1,level);
};
format_swf__$SWFData_SWFData_$Impl_$.writeFILLSTYLE = function(this1,value,level) {
	if(level == null) {
		level = 1;
	}
	value.publish(this1,level);
};
format_swf__$SWFData_SWFData_$Impl_$.readLINESTYLE = function(this1,level) {
	if(level == null) {
		level = 1;
	}
	return new format_swf_data_SWFLineStyle(this1,level);
};
format_swf__$SWFData_SWFData_$Impl_$.writeLINESTYLE = function(this1,value,level) {
	if(level == null) {
		level = 1;
	}
	value.publish(this1,level);
};
format_swf__$SWFData_SWFData_$Impl_$.readLINESTYLE2 = function(this1,level) {
	if(level == null) {
		level = 1;
	}
	return new format_swf_data_SWFLineStyle2(this1,level);
};
format_swf__$SWFData_SWFData_$Impl_$.writeLINESTYLE2 = function(this1,value,level) {
	if(level == null) {
		level = 1;
	}
	value.publish(this1,level);
};
format_swf__$SWFData_SWFData_$Impl_$.readBUTTONRECORD = function(this1,level) {
	if(level == null) {
		level = 1;
	}
	if(format_swf__$SWFData_SWFData_$Impl_$.readUI8(this1) == 0) {
		return null;
	} else {
		this1.position--;
		return new format_swf_data_SWFButtonRecord(this1,level);
	}
};
format_swf__$SWFData_SWFData_$Impl_$.writeBUTTONRECORD = function(this1,value,level) {
	if(level == null) {
		level = 1;
	}
	value.publish(this1,level);
};
format_swf__$SWFData_SWFData_$Impl_$.readBUTTONCONDACTION = function(this1) {
	return new format_swf_data_SWFButtonCondAction(this1);
};
format_swf__$SWFData_SWFData_$Impl_$.writeBUTTONCONDACTION = function(this1,value) {
	value.publish(this1);
};
format_swf__$SWFData_SWFData_$Impl_$.readFILTER = function(this1) {
	var filter = format_swf_factories_SWFFilterFactory.create(format_swf__$SWFData_SWFData_$Impl_$.readUI8(this1));
	filter.parse(this1);
	return filter;
};
format_swf__$SWFData_SWFData_$Impl_$.writeFILTER = function(this1,value) {
	format_swf__$SWFData_SWFData_$Impl_$.writeUI8(this1,value.id);
	value.publish(this1);
};
format_swf__$SWFData_SWFData_$Impl_$.readTEXTRECORD = function(this1,glyphBits,advanceBits,previousRecord,level) {
	if(level == null) {
		level = 1;
	}
	if(format_swf__$SWFData_SWFData_$Impl_$.readUI8(this1) == 0) {
		return null;
	} else {
		this1.position--;
		return new format_swf_data_SWFTextRecord(this1,glyphBits,advanceBits,previousRecord,level);
	}
};
format_swf__$SWFData_SWFData_$Impl_$.writeTEXTRECORD = function(this1,value,glyphBits,advanceBits,previousRecord,level) {
	if(level == null) {
		level = 1;
	}
	value.publish(this1,glyphBits,advanceBits,previousRecord,level);
};
format_swf__$SWFData_SWFData_$Impl_$.readGLYPHENTRY = function(this1,glyphBits,advanceBits) {
	return new format_swf_data_SWFGlyphEntry(this1,glyphBits,advanceBits);
};
format_swf__$SWFData_SWFData_$Impl_$.writeGLYPHENTRY = function(this1,value,glyphBits,advanceBits) {
	value.publish(this1,glyphBits,advanceBits);
};
format_swf__$SWFData_SWFData_$Impl_$.readZONERECORD = function(this1) {
	return new format_swf_data_SWFZoneRecord(this1);
};
format_swf__$SWFData_SWFData_$Impl_$.writeZONERECORD = function(this1,value) {
	value.publish(this1);
};
format_swf__$SWFData_SWFData_$Impl_$.readZONEDATA = function(this1) {
	return new format_swf_data_SWFZoneData(this1);
};
format_swf__$SWFData_SWFData_$Impl_$.writeZONEDATA = function(this1,value) {
	value.publish(this1);
};
format_swf__$SWFData_SWFData_$Impl_$.readKERNINGRECORD = function(this1,wideCodes) {
	return new format_swf_data_SWFKerningRecord(this1,wideCodes);
};
format_swf__$SWFData_SWFData_$Impl_$.writeKERNINGRECORD = function(this1,value,wideCodes) {
	value.publish(this1,wideCodes);
};
format_swf__$SWFData_SWFData_$Impl_$.readGRADIENT = function(this1,level) {
	if(level == null) {
		level = 1;
	}
	return new format_swf_data_SWFGradient(this1,level);
};
format_swf__$SWFData_SWFData_$Impl_$.writeGRADIENT = function(this1,value,level) {
	if(level == null) {
		level = 1;
	}
	value.publish(this1,level);
};
format_swf__$SWFData_SWFData_$Impl_$.readFOCALGRADIENT = function(this1,level) {
	if(level == null) {
		level = 1;
	}
	return new format_swf_data_SWFFocalGradient(this1,level);
};
format_swf__$SWFData_SWFData_$Impl_$.writeFOCALGRADIENT = function(this1,value,level) {
	if(level == null) {
		level = 1;
	}
	value.publish(this1,level);
};
format_swf__$SWFData_SWFData_$Impl_$.readGRADIENTRECORD = function(this1,level) {
	if(level == null) {
		level = 1;
	}
	return new format_swf_data_SWFGradientRecord(this1,level);
};
format_swf__$SWFData_SWFData_$Impl_$.writeGRADIENTRECORD = function(this1,value,level) {
	if(level == null) {
		level = 1;
	}
	value.publish(this1,level);
};
format_swf__$SWFData_SWFData_$Impl_$.readMORPHFILLSTYLE = function(this1,level) {
	if(level == null) {
		level = 1;
	}
	return new format_swf_data_SWFMorphFillStyle(this1,level);
};
format_swf__$SWFData_SWFData_$Impl_$.writeMORPHFILLSTYLE = function(this1,value,level) {
	if(level == null) {
		level = 1;
	}
	value.publish(this1,level);
};
format_swf__$SWFData_SWFData_$Impl_$.readMORPHLINESTYLE = function(this1,level) {
	if(level == null) {
		level = 1;
	}
	return new format_swf_data_SWFMorphLineStyle(this1,level);
};
format_swf__$SWFData_SWFData_$Impl_$.writeMORPHLINESTYLE = function(this1,value,level) {
	if(level == null) {
		level = 1;
	}
	value.publish(this1,level);
};
format_swf__$SWFData_SWFData_$Impl_$.readMORPHLINESTYLE2 = function(this1,level) {
	if(level == null) {
		level = 1;
	}
	return new format_swf_data_SWFMorphLineStyle2(this1,level);
};
format_swf__$SWFData_SWFData_$Impl_$.writeMORPHLINESTYLE2 = function(this1,value,level) {
	if(level == null) {
		level = 1;
	}
	value.publish(this1,level);
};
format_swf__$SWFData_SWFData_$Impl_$.readMORPHGRADIENT = function(this1,level) {
	if(level == null) {
		level = 1;
	}
	return new format_swf_data_SWFMorphGradient(this1,level);
};
format_swf__$SWFData_SWFData_$Impl_$.writeMORPHGRADIENT = function(this1,value,level) {
	if(level == null) {
		level = 1;
	}
	value.publish(this1,level);
};
format_swf__$SWFData_SWFData_$Impl_$.readMORPHFOCALGRADIENT = function(this1,level) {
	if(level == null) {
		level = 1;
	}
	return new format_swf_data_SWFMorphFocalGradient(this1,level);
};
format_swf__$SWFData_SWFData_$Impl_$.writeMORPHFOCALGRADIENT = function(this1,value,level) {
	if(level == null) {
		level = 1;
	}
	value.publish(this1,level);
};
format_swf__$SWFData_SWFData_$Impl_$.readMORPHGRADIENTRECORD = function(this1) {
	return new format_swf_data_SWFMorphGradientRecord(this1);
};
format_swf__$SWFData_SWFData_$Impl_$.writeMORPHGRADIENTRECORD = function(this1,value) {
	value.publish(this1);
};
format_swf__$SWFData_SWFData_$Impl_$.readACTIONRECORD = function(this1) {
	var pos = this1.position;
	var action = null;
	var actionCode = format_swf__$SWFData_SWFData_$Impl_$.readUI8(this1);
	if(actionCode != 0) {
		action = format_swf_factories_SWFActionFactory.create(actionCode,actionCode >= 128 ? format_swf__$SWFData_SWFData_$Impl_$.readUI16(this1) : 0,pos);
		action.parse(this1);
	}
	return action;
};
format_swf__$SWFData_SWFData_$Impl_$.writeACTIONRECORD = function(this1,action) {
	action.publish(this1);
};
format_swf__$SWFData_SWFData_$Impl_$.readREGISTERPARAM = function(this1) {
	return new format_swf_data_SWFRegisterParam(this1);
};
format_swf__$SWFData_SWFData_$Impl_$.writeREGISTERPARAM = function(this1,value) {
	value.publish(this1);
};
format_swf__$SWFData_SWFData_$Impl_$.readSYMBOL = function(this1) {
	return new format_swf_data_SWFSymbol(this1);
};
format_swf__$SWFData_SWFData_$Impl_$.writeSYMBOL = function(this1,value) {
	value.publish(this1);
};
format_swf__$SWFData_SWFData_$Impl_$.readSOUNDINFO = function(this1) {
	return new format_swf_data_SWFSoundInfo(this1);
};
format_swf__$SWFData_SWFData_$Impl_$.writeSOUNDINFO = function(this1,value) {
	value.publish(this1);
};
format_swf__$SWFData_SWFData_$Impl_$.readSOUNDENVELOPE = function(this1) {
	return new format_swf_data_SWFSoundEnvelope(this1);
};
format_swf__$SWFData_SWFData_$Impl_$.writeSOUNDENVELOPE = function(this1,value) {
	value.publish(this1);
};
format_swf__$SWFData_SWFData_$Impl_$.readCLIPACTIONS = function(this1,version) {
	return new format_swf_data_SWFClipActions(this1,version);
};
format_swf__$SWFData_SWFData_$Impl_$.writeCLIPACTIONS = function(this1,value,version) {
	value.publish(this1,version);
};
format_swf__$SWFData_SWFData_$Impl_$.readCLIPACTIONRECORD = function(this1,version) {
	var pos = this1.position;
	if((version >= 6 ? format_swf__$SWFData_SWFData_$Impl_$.readUI32(this1) : format_swf__$SWFData_SWFData_$Impl_$.readUI16(this1)) == 0) {
		return null;
	} else {
		this1.position = pos;
		return new format_swf_data_SWFClipActionRecord(this1,version);
	}
};
format_swf__$SWFData_SWFData_$Impl_$.writeCLIPACTIONRECORD = function(this1,value,version) {
	value.publish(this1,version);
};
format_swf__$SWFData_SWFData_$Impl_$.readCLIPEVENTFLAGS = function(this1,version) {
	return new format_swf_data_SWFClipEventFlags(this1,version);
};
format_swf__$SWFData_SWFData_$Impl_$.writeCLIPEVENTFLAGS = function(this1,value,version) {
	value.publish(this1,version);
};
format_swf__$SWFData_SWFData_$Impl_$.readTagHeader = function(this1) {
	var pos = this1.position;
	var tagTypeAndLength = format_swf__$SWFData_SWFData_$Impl_$.readUI16(this1);
	var tagLength = tagTypeAndLength & 63;
	if(tagLength == 63) {
		tagLength = format_swf__$SWFData_SWFData_$Impl_$.readSI32(this1);
	}
	return new format_swf_data_SWFRecordHeader(tagTypeAndLength >> 6,tagLength,this1.position - pos);
};
format_swf__$SWFData_SWFData_$Impl_$.writeTagHeader = function(this1,type,length,forceLongHeader) {
	if(forceLongHeader == null) {
		forceLongHeader = false;
	}
	if(length < 63 && !forceLongHeader) {
		format_swf__$SWFData_SWFData_$Impl_$.writeUI16(this1,type << 6 | length);
	} else {
		format_swf__$SWFData_SWFData_$Impl_$.writeUI16(this1,type << 6 | 63);
		format_swf__$SWFData_SWFData_$Impl_$.writeSI32(this1,length);
	}
};
format_swf__$SWFData_SWFData_$Impl_$.swfUncompress = function(this1,compressionMethod,uncompressedLength) {
	if(uncompressedLength == null) {
		uncompressedLength = 0;
	}
	var pos = this1.position;
	var ba = new openfl_utils_ByteArrayData(0);
	if(compressionMethod == 2) {
		this1.readBytes(ba);
		ba.position = 0;
		ba.uncompress();
	} else if(compressionMethod == 1) {
		var _g = 0;
		while(_g < 5) ba.writeByte(this1.b[_g++ + 12]);
		ba.__endian = 1;
		ba.writeUnsignedInt(uncompressedLength - 8);
		ba.writeUnsignedInt(0);
		this1.position = 17;
		this1.readBytes(ba,13);
		ba.position = 0;
		ba.uncompress(compressionMethod);
	} else {
		throw new js__$Boot_HaxeError(new openfl_errors_Error("Unknown compression method: " + openfl_utils__$CompressionAlgorithm_CompressionAlgorithm_$Impl_$.toString(compressionMethod)));
	}
	format_swf__$SWFData_SWFData_$Impl_$.set_length(this1,this1.position = pos);
	this1.writeBytes(ba);
	this1.position = pos;
};
format_swf__$SWFData_SWFData_$Impl_$.swfCompress = function(this1,compressionMethod) {
	var pos = this1.position;
	var ba = new openfl_utils_ByteArrayData(0);
	if(compressionMethod == 2) {
		this1.readBytes(ba);
		ba.position = 0;
		ba.compress();
	} else if(compressionMethod == 1) {
		throw new js__$Boot_HaxeError(new openfl_errors_Error("Can't publish LZMA compressed SWFs"));
	} else {
		throw new js__$Boot_HaxeError(new openfl_errors_Error("Unknown compression method: " + openfl_utils__$CompressionAlgorithm_CompressionAlgorithm_$Impl_$.toString(compressionMethod)));
	}
	format_swf__$SWFData_SWFData_$Impl_$.set_length(this1,this1.position = pos);
	this1.writeBytes(ba);
};
format_swf__$SWFData_SWFData_$Impl_$.readRawTag = function(this1) {
	return new format_swf_data_SWFRawTag(this1);
};
format_swf__$SWFData_SWFData_$Impl_$.skipBytes = function(this1,length) {
	this1.position += length;
};
format_swf__$SWFData_SWFData_$Impl_$.dump = function(ba,length,offset) {
	if(offset == null) {
		offset = 0;
	}
	var posOrig = ba.position;
	var pos = ba.position = Math.min(Math.max(posOrig + offset,0),openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(ba) - length) | 0;
	var str = "[Dump] total length: " + openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(ba) + ", original position: " + posOrig;
	var _g1 = 0;
	while(_g1 < length) {
		var i = _g1++;
		var b = StringTools.hex(ba.readUnsignedByte());
		if(b.length == 1) {
			b = "0" + b;
		}
		if(i % 16 == 0) {
			var addr = StringTools.hex(pos + i);
			addr = HxOverrides.substr("00000000",0,8 - addr.length) + addr;
			str += "\r" + addr + ": ";
		}
		b += " ";
		str += b;
	}
	ba.position = posOrig;
	haxe_Log.trace(str,{ fileName : "SWFData.hx", lineNumber : 959, className : "format.swf._SWFData.SWFData_Impl_", methodName : "dump"});
};
format_swf__$SWFData_SWFData_$Impl_$.get_length = function(this1) {
	return this1.__length;
};
format_swf__$SWFData_SWFData_$Impl_$.set_length = function(this1,value) {
	if(value > 0) {
		this1.__resize(value);
	}
	this1.__length = value;
	return value;
};
var format_swf_events_SWFEventDispatcher = function() {
	this.dispatcher = new openfl_events_EventDispatcher(this);
};
$hxClasses["format.swf.events.SWFEventDispatcher"] = format_swf_events_SWFEventDispatcher;
format_swf_events_SWFEventDispatcher.__name__ = ["format","swf","events","SWFEventDispatcher"];
format_swf_events_SWFEventDispatcher.__interfaces__ = [openfl_events_IEventDispatcher];
format_swf_events_SWFEventDispatcher.prototype = {
	dispatcher: null
	,addEventListener: function(type,listener,useCapture,priority,useWeakReference) {
		if(useWeakReference == null) {
			useWeakReference = false;
		}
		if(priority == null) {
			priority = 0;
		}
		if(useCapture == null) {
			useCapture = false;
		}
		this.dispatcher.addEventListener(type,listener,useCapture,priority,useWeakReference);
	}
	,removeEventListener: function(type,listener,useCapture) {
		if(useCapture == null) {
			useCapture = false;
		}
		this.dispatcher.removeEventListener(type,listener,useCapture);
	}
	,dispatchEvent: function(event) {
		return this.dispatcher.dispatchEvent(event);
	}
	,hasEventListener: function(type) {
		return this.dispatcher.hasEventListener(type);
	}
	,willTrigger: function(type) {
		return this.dispatcher.willTrigger(type);
	}
	,__class__: format_swf_events_SWFEventDispatcher
};
var format_swf_SWFTimelineContainer = function() {
	this._tmpTagIterator = 0;
	format_swf_events_SWFEventDispatcher.call(this);
	if(format_swf_SWFTimelineContainer.scalingGrids == null) {
		format_swf_SWFTimelineContainer.scalingGrids = new haxe_ds_IntMap();
	}
	this.backgroundColor = 16777215;
	this.tags = [];
	this.tagsRaw = [];
	this.dictionary = new haxe_ds_IntMap();
	this.scenes = [];
	this.frames = [];
	this.layers = [];
	this.tagFactory = new format_swf_factories_SWFTagFactory();
	this.rootTimelineContainer = this;
	this.enterFrameProvider = new openfl_display_Sprite();
};
$hxClasses["format.swf.SWFTimelineContainer"] = format_swf_SWFTimelineContainer;
format_swf_SWFTimelineContainer.__name__ = ["format","swf","SWFTimelineContainer"];
format_swf_SWFTimelineContainer.__super__ = format_swf_events_SWFEventDispatcher;
format_swf_SWFTimelineContainer.prototype = $extend(format_swf_events_SWFEventDispatcher.prototype,{
	tags: null
	,tagsRaw: null
	,dictionary: null
	,scenes: null
	,frames: null
	,layers: null
	,soundStream: null
	,frameLabels: null
	,frameIndexes: null
	,currentFrame: null
	,hasSoundStream: null
	,enterFrameProvider: null
	,eof: null
	,_tmpData: null
	,_tmpVersion: null
	,_tmpTagIterator: null
	,tagFactory: null
	,rootTimelineContainer: null
	,backgroundColor: null
	,jpegTablesTag: null
	,getCharacter: function(characterId) {
		var tagIndex = this.rootTimelineContainer.dictionary.h[characterId];
		if(tagIndex >= 0 && tagIndex < this.rootTimelineContainer.tags.length) {
			return this.rootTimelineContainer.tags[tagIndex];
		}
		return null;
	}
	,getScalingGrid: function(characterId) {
		if(format_swf_SWFTimelineContainer.scalingGrids.h.hasOwnProperty(characterId)) {
			return this.rootTimelineContainer.tags[format_swf_SWFTimelineContainer.scalingGrids.h[characterId]];
		}
		return null;
	}
	,parseTags: function(data,version) {
		var tag;
		this.parseTagsInit(data,version);
		while(true) {
			var tmp;
			tag = this.parseTag(data);
			if(tag != null) {
				tmp = tag.type != 0;
			} else {
				tmp = false;
			}
			if(!tmp) {
				break;
			}
		}
		this.parseTagsFinalize();
	}
	,parseTagsAsync: function(data,version) {
		this.parseTagsInit(data,version);
		this.enterFrameProvider.addEventListener("enterFrame",$bind(this,this.parseTagsAsyncHandler));
	}
	,parseTagsAsyncHandler: function(event) {
		this.enterFrameProvider.removeEventListener("enterFrame",$bind(this,this.parseTagsAsyncHandler));
		if(this.dispatchEvent(new format_swf_events_SWFProgressEvent("progress",this._tmpData.position,format_swf__$SWFData_SWFData_$Impl_$.get_length(this._tmpData),false,true))) {
			this.parseTagsAsyncInternal();
		}
	}
	,parseTagsAsyncInternal: function() {
		var tag;
		var time = openfl_Lib.getTimer();
		while(true) {
			var tmp;
			tag = this.parseTag(this._tmpData,true);
			if(tag != null) {
				tmp = tag.type != 0;
			} else {
				tmp = false;
			}
			if(!tmp) {
				break;
			}
			if(openfl_Lib.getTimer() - time > format_swf_SWFTimelineContainer.TIMEOUT) {
				this.enterFrameProvider.addEventListener("enterFrame",$bind(this,this.parseTagsAsyncHandler));
				return;
			}
		}
		this.parseTagsFinalize();
		if(this.eof) {
			this.dispatchEvent(new format_swf_events_SWFErrorEvent("error","eof"));
		} else {
			this.dispatchEvent(new format_swf_events_SWFProgressEvent("progress",this._tmpData.position,format_swf__$SWFData_SWFData_$Impl_$.get_length(this._tmpData)));
			this.dispatchEvent(new format_swf_events_SWFProgressEvent("complete",this._tmpData.position,format_swf__$SWFData_SWFData_$Impl_$.get_length(this._tmpData)));
		}
	}
	,parseTagsInit: function(data,version) {
		this.tags = [];
		this.frames = [];
		this.layers = [];
		this.dictionary = new haxe_ds_IntMap();
		this.currentFrame = new format_swf_timeline_Frame();
		this.frameLabels = new haxe_ds_IntMap();
		this.frameIndexes = new haxe_ds_StringMap();
		this.hasSoundStream = false;
		this._tmpData = data;
		this._tmpVersion = version;
	}
	,parseTag: function(data,async) {
		if(async == null) {
			async = false;
		}
		var pos = data.position;
		this.eof = pos >= format_swf__$SWFData_SWFData_$Impl_$.get_length(data);
		if(this.eof) {
			haxe_Log.trace("WARNING: end of file encountered, no end tag.",{ fileName : "SWFTimelineContainer.hx", lineNumber : 201, className : "format.swf.SWFTimelineContainer", methodName : "parseTag"});
			return null;
		}
		var tagRaw = format_swf__$SWFData_SWFData_$Impl_$.readRawTag(data);
		var tagHeader = tagRaw.header;
		var tag = this.tagFactory.create(tagHeader.type);
		try {
			if(js_Boot.__instanceof(tag,format_swf_SWFTimelineContainer)) {
				var timelineContainer = tag;
				timelineContainer.tagFactory = this.tagFactory;
				timelineContainer.rootTimelineContainer = this;
			}
			tag.parse(data,tagHeader.contentLength,this._tmpVersion,async);
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			if( js_Boot.__instanceof(e,openfl_errors_Error) ) {
				haxe_Log.trace("WARNING: parse error: " + e.message + ", Tag: " + tag.name + ", Index: " + this.tags.length,{ fileName : "SWFTimelineContainer.hx", lineNumber : 223, className : "format.swf.SWFTimelineContainer", methodName : "parseTag"});
				throw new js__$Boot_HaxeError(e);
			} else throw(e);
		}
		this.tags.push(tag);
		this.tagsRaw.push(tagRaw);
		this.processTag(tag);
		if(data.position != pos + tagHeader.get_tagLength()) {
			var index = this.tags.length - 1;
			var excessBytes = data.position - (pos + tagHeader.get_tagLength());
			var eventData = { pos : pos, bytes : excessBytes < 0 ? -excessBytes : excessBytes};
			if(this.rootTimelineContainer == this) {
				haxe_Log.trace("WARNING: excess bytes: " + excessBytes + ", " + "Tag: " + tag.name + ", " + "Index: " + index,{ fileName : "SWFTimelineContainer.hx", lineNumber : 243, className : "format.swf.SWFTimelineContainer", methodName : "parseTag"});
			} else {
				eventData.indexRoot = this.rootTimelineContainer.tags.length;
				haxe_Log.trace("WARNING: excess bytes: " + excessBytes + ", " + "Tag: " + tag.name + ", " + "Index: " + index + ", " + "IndexRoot: " + Std.string(eventData.indexRoot),{ fileName : "SWFTimelineContainer.hx", lineNumber : 249, className : "format.swf.SWFTimelineContainer", methodName : "parseTag"});
			}
			if(!this.dispatchEvent(new format_swf_events_SWFWarningEvent(excessBytes < 0 ? "underflow" : "overflow",index,eventData,false,true))) {
				tag = null;
			}
			data.position = pos + tagHeader.get_tagLength();
		}
		return tag;
	}
	,parseTagsFinalize: function() {
		if(this.soundStream != null && openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(this.soundStream.data) == 0) {
			this.soundStream = null;
		}
		if(format_swf_SWFTimelineContainer.AUTOBUILD_LAYERS) {
			this.buildLayers();
		}
	}
	,publishTags: function(data,version) {
		var tag;
		var tagRaw;
		var _g1 = 0;
		var _g = this.tags.length;
		while(_g1 < _g) {
			var i = _g1++;
			tag = this.tags[i];
			if(i < this.tagsRaw.length) {
				tagRaw = this.tagsRaw[i];
			} else {
				tagRaw = null;
			}
			this.publishTag(data,tag,tagRaw,version);
		}
	}
	,publishTagsAsync: function(data,version) {
		this._tmpData = data;
		this._tmpVersion = version;
		this._tmpTagIterator = 0;
		this.enterFrameProvider.addEventListener("enterFrame",$bind(this,this.publishTagsAsyncHandler));
	}
	,publishTagsAsyncHandler: function(event) {
		this.enterFrameProvider.removeEventListener("enterFrame",$bind(this,this.publishTagsAsyncHandler));
		if(this.dispatchEvent(new format_swf_events_SWFProgressEvent("progress",this._tmpTagIterator,this.tags.length))) {
			this.publishTagsAsyncInternal();
		}
	}
	,publishTagsAsyncInternal: function() {
		var tag;
		var tagRaw;
		var time = openfl_Lib.getTimer();
		while(true) {
			if(this._tmpTagIterator < this.tags.length) {
				tag = this.tags[this._tmpTagIterator];
			} else {
				tag = null;
			}
			if(this._tmpTagIterator < this.tagsRaw.length) {
				tagRaw = this.tagsRaw[this._tmpTagIterator];
			} else {
				tagRaw = null;
			}
			this.publishTag(this._tmpData,tag,tagRaw,this._tmpVersion);
			this._tmpTagIterator++;
			if(openfl_Lib.getTimer() - time > format_swf_SWFTimelineContainer.TIMEOUT) {
				this.enterFrameProvider.addEventListener("enterFrame",$bind(this,this.publishTagsAsyncHandler));
				return;
			}
			if(!(tag.type != 0)) {
				break;
			}
		}
		this.dispatchEvent(new format_swf_events_SWFProgressEvent("progress",this._tmpTagIterator,this.tags.length));
		this.dispatchEvent(new format_swf_events_SWFProgressEvent("complete",this._tmpTagIterator,this.tags.length));
	}
	,publishTag: function(data,tag,rawTag,version) {
		try {
			tag.publish(data,version);
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			if( js_Boot.__instanceof(e,openfl_errors_Error) ) {
				haxe_Log.trace("WARNING: publish error: " + e.message + " (tag: " + tag.name + ")",{ fileName : "SWFTimelineContainer.hx", lineNumber : 324, className : "format.swf.SWFTimelineContainer", methodName : "publishTag"});
				if(rawTag != null) {
					rawTag.publish(data);
				} else {
					haxe_Log.trace("FATAL: publish error: No raw tag fallback",{ fileName : "SWFTimelineContainer.hx", lineNumber : 328, className : "format.swf.SWFTimelineContainer", methodName : "publishTag"});
				}
			} else throw(e);
		}
	}
	,processTag: function(tag) {
		var currentTagIndex = this.tags.length - 1;
		if(js_Boot.__instanceof(tag,format_swf_tags_IDefinitionTag)) {
			this.processDefinitionTag(tag,currentTagIndex);
			return;
		} else if(js_Boot.__instanceof(tag,format_swf_tags_IDisplayListTag)) {
			this.processDisplayListTag(tag,currentTagIndex);
			return;
		}
		switch(js_Boot.__cast(tag.type , Int)) {
		case 8:
			this.processJPEGTablesTag(tag,currentTagIndex);
			break;
		case 9:
			this.processBackgroundColorTag(tag,currentTagIndex);
			break;
		case 18:case 19:case 45:
			if(format_swf_SWFTimelineContainer.EXTRACT_SOUND_STREAM) {
				this.processSoundStreamTag(tag,currentTagIndex);
			}
			break;
		case 78:
			this.processScalingGridTag(tag,currentTagIndex);
			break;
		case 43:case 86:
			this.processFrameLabelTag(tag,currentTagIndex);
			break;
		}
	}
	,processDefinitionTag: function(tag,currentTagIndex) {
		if(tag.characterId > 0) {
			this.dictionary.h[tag.characterId] = currentTagIndex;
			this.currentFrame.characters.push(tag.characterId);
		}
	}
	,processDisplayListTag: function(tag,currentTagIndex) {
		switch(js_Boot.__cast(tag.type , Int)) {
		case 1:
			this.currentFrame.tagIndexEnd = currentTagIndex;
			if(this.currentFrame.label == null && this.frameLabels.exists(this.currentFrame.frameNumber)) {
				var tmp = this.frameLabels.get(this.currentFrame.frameNumber);
				this.currentFrame.label = tmp;
			}
			this.frames.push(this.currentFrame);
			this.currentFrame = this.currentFrame.clone();
			this.currentFrame.frameNumber = this.frames.length;
			this.currentFrame.tagIndexStart = currentTagIndex + 1;
			break;
		case 4:case 26:case 70:
			this.currentFrame.placeObject(currentTagIndex,tag);
			break;
		case 5:case 28:
			this.currentFrame.removeObject(tag);
			break;
		}
	}
	,processFrameLabelTag: function(tag,currentTagIndex) {
		switch(js_Boot.__cast(tag.type , Int)) {
		case 43:
			var tagFrameLabel = tag;
			this.currentFrame.label = tagFrameLabel.frameName;
			this.frameLabels.set(this.currentFrame.frameNumber,tagFrameLabel.frameName);
			this.frameIndexes.set(tagFrameLabel.frameName,this.currentFrame.frameNumber + 1);
			break;
		case 86:
			var tagSceneAndFrameLabelData = tag;
			var _g1 = 0;
			var _g = tagSceneAndFrameLabelData.frameLabels.length;
			while(_g1 < _g) {
				var frameLabel = tagSceneAndFrameLabelData.frameLabels[_g1++];
				this.frameLabels.set(frameLabel.frameNumber,frameLabel.name);
				this.frameIndexes.set(frameLabel.name,frameLabel.frameNumber + 1);
			}
			var _g11 = 0;
			var _g2 = tagSceneAndFrameLabelData.scenes.length;
			while(_g11 < _g2) {
				var scene = tagSceneAndFrameLabelData.scenes[_g11++];
				this.scenes.push(new format_swf_timeline_Scene(scene.offset,scene.name));
			}
			break;
		}
	}
	,processSoundStreamTag: function(tag,currentTagIndex) {
		switch(js_Boot.__cast(tag.type , Int)) {
		case 18:case 45:
			var tagSoundStreamHead = tag;
			this.soundStream = new format_swf_timeline_SoundStream();
			this.soundStream.compression = tagSoundStreamHead.streamSoundCompression;
			this.soundStream.rate = tagSoundStreamHead.streamSoundRate;
			this.soundStream.size = tagSoundStreamHead.streamSoundSize;
			this.soundStream.type = tagSoundStreamHead.streamSoundType;
			this.soundStream.numFrames = 0;
			this.soundStream.numSamples = 0;
			break;
		case 19:
			if(this.soundStream != null) {
				if(!this.hasSoundStream) {
					this.hasSoundStream = true;
					this.soundStream.startFrame = this.currentFrame.frameNumber;
				}
				var soundData = tag.soundData;
				soundData.__endian = 1;
				soundData.position = 0;
				switch(this.soundStream.compression) {
				case 1:
					break;
				case 2:
					var numSamples = soundData.readUnsignedShort();
					soundData.readShort();
					if(numSamples > 0) {
						this.soundStream.numSamples += numSamples;
						this.soundStream.data.writeBytes(soundData,4);
					}
					break;
				}
				this.soundStream.numFrames++;
			}
			break;
		}
	}
	,processBackgroundColorTag: function(tag,currentTagIndex) {
		this.backgroundColor = tag.color;
	}
	,processJPEGTablesTag: function(tag,currentTagIndex) {
		this.jpegTablesTag = tag;
	}
	,processScalingGridTag: function(tag,currentTagIndex) {
		format_swf_SWFTimelineContainer.scalingGrids.h[tag.characterId] = currentTagIndex;
	}
	,buildLayers: function() {
		var depthInt;
		var depths = new haxe_ds_IntMap();
		var depthsAvailable = [];
		var _g1 = 0;
		var _g = this.frames.length;
		while(_g1 < _g) {
			var frame = this.frames[_g1++];
			var depth = frame.objects.keys();
			while(depth.hasNext()) {
				var depth1 = depth.next();
				depthInt = depth1 | 0;
				var foundIndex = false;
				while(0 < depthsAvailable.length) {
					if(depthsAvailable[0] == depthInt) {
						foundIndex = true;
					}
					break;
				}
				if(foundIndex) {
					depths.h[depth1].push(frame.frameNumber);
				} else {
					depths.h[depth1] = [frame.frameNumber];
					depthsAvailable.push(depthInt);
				}
			}
		}
		depthsAvailable.sort($bind(this,this.sortNumeric));
		var _g11 = 0;
		var _g2 = depthsAvailable.length;
		while(_g11 < _g2) {
			var i = _g11++;
			var layer = new format_swf_timeline_Layer(depthsAvailable[i],this.frames.length);
			var frameIndices = depths.h[depthsAvailable[i]];
			var frameIndicesLen = frameIndices.length;
			if(frameIndicesLen > 0) {
				var curStripType = 0;
				var startFrameIndex = format_swf__$SWFData_SWFData_$Impl_$.MAX_FLOAT_VALUE | 0;
				var endFrameIndex = format_swf__$SWFData_SWFData_$Impl_$.MAX_FLOAT_VALUE | 0;
				var _g3 = 0;
				while(_g3 < frameIndicesLen) {
					var curFrameIndex = frameIndices[_g3++];
					var curFrameObject = this.frames[curFrameIndex].objects.h[layer.depth];
					if(curFrameObject.isKeyframe) {
						layer.appendStrip(curStripType,startFrameIndex,endFrameIndex);
						startFrameIndex = curFrameIndex;
						if(js_Boot.__instanceof(this.getCharacter(curFrameObject.characterId),format_swf_tags_TagDefineMorphShape)) {
							curStripType = 4;
						} else {
							curStripType = 2;
						}
					} else if(curStripType == 2 && curFrameObject.lastModifiedAtIndex > 0) {
						curStripType = 3;
					}
					endFrameIndex = curFrameIndex;
				}
				layer.appendStrip(curStripType,startFrameIndex,endFrameIndex);
			}
			this.layers.push(layer);
		}
		var _g12 = 0;
		var _g4 = this.frames.length;
		while(_g12 < _g4) {
			var frameObjs = this.frames[_g12++].objects;
			var depth2 = frameObjs.keys();
			while(depth2.hasNext()) {
				var depth3 = depth2.next();
				var _g31 = 0;
				var _g21 = depthsAvailable.length;
				while(_g31 < _g21) {
					var j = _g31++;
					if(depth3 == depthsAvailable[j]) {
						frameObjs.h[depth3].layer = j;
					}
				}
			}
		}
	}
	,sortNumeric: function(a,b) {
		return a - b;
	}
	,toString: function(indent) {
		if(indent == null) {
			indent = 0;
		}
		var str = "";
		if(this.tags.length > 0) {
			str = "" + ("\n" + format_swf_utils_StringUtils.repeat(indent + 2) + "Tags:");
			var _g1 = 0;
			var _g = this.tags.length;
			while(_g1 < _g) str += "\n" + this.tags[_g1++].toString(indent + 4);
		}
		if(this.scenes.length > 0) {
			str += "\n" + format_swf_utils_StringUtils.repeat(indent + 2) + "Scenes:";
			var _g11 = 0;
			var _g2 = this.scenes.length;
			while(_g11 < _g2) str += "\n" + this.scenes[_g11++].toString(indent + 4);
		}
		if(this.frames.length > 0) {
			str += "\n" + format_swf_utils_StringUtils.repeat(indent + 2) + "Frames:";
			var _g12 = 0;
			var _g3 = this.frames.length;
			while(_g12 < _g3) str += "\n" + this.frames[_g12++].toString(indent + 4);
		}
		if(this.layers.length > 0) {
			str += "\n" + format_swf_utils_StringUtils.repeat(indent + 2) + "Layers:";
			var _g13 = 0;
			var _g4 = this.layers.length;
			while(_g13 < _g4) {
				var i = _g13++;
				str += "\n" + format_swf_utils_StringUtils.repeat(indent + 4) + "[" + i + "] " + this.layers[i].toString(indent + 4);
			}
		}
		return str;
	}
	,__class__: format_swf_SWFTimelineContainer
});
var format_swf_SWFRoot = function(ba) {
	format_swf_SWFTimelineContainer.call(this);
	this.bytes = format_swf__$SWFData_SWFData_$Impl_$._new();
	if(ba != null) {
		this.loadBytes(ba);
	} else {
		this.version = 10;
		this.fileLength = 0;
		this.fileLengthCompressed = 0;
		this.frameSize = new format_swf_data_SWFRectangle();
		this.frameRate = 50;
		this.frameCount = 1;
		this.compressed = true;
		this.compressionMethod = 2;
	}
	this.symbols = new haxe_ds_StringMap();
	var _g = 0;
	var _g1 = this.tags;
	while(_g < _g1.length) {
		var tag = _g1[_g];
		++_g;
		if(js_Boot.__instanceof(tag,format_swf_tags_TagSymbolClass)) {
			var _g2 = 0;
			var _g3 = (js_Boot.__cast(tag , format_swf_tags_TagSymbolClass)).symbols;
			while(_g2 < _g3.length) {
				var symbol = _g3[_g2];
				++_g2;
				var key = symbol.name;
				var value = symbol.tagId;
				var _this = this.symbols;
				if(__map_reserved[key] != null) {
					_this.setReserved(key,value);
				} else {
					_this.h[key] = value;
				}
			}
		}
	}
};
$hxClasses["format.swf.SWFRoot"] = format_swf_SWFRoot;
format_swf_SWFRoot.__name__ = ["format","swf","SWFRoot"];
format_swf_SWFRoot.__super__ = format_swf_SWFTimelineContainer;
format_swf_SWFRoot.prototype = $extend(format_swf_SWFTimelineContainer.prototype,{
	signature: null
	,version: null
	,fileLength: null
	,fileLengthCompressed: null
	,frameSize: null
	,frameRate: null
	,frameCount: null
	,compressed: null
	,compressionMethod: null
	,symbols: null
	,bytes: null
	,loadBytes: function(ba) {
		this.bytes = format_swf__$SWFData_SWFData_$Impl_$._new();
		ba.position = 0;
		ba.readBytes(openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytes(this.bytes));
		this.parse(this.bytes);
	}
	,loadBytesAsync: function(ba) {
		this.bytes = format_swf__$SWFData_SWFData_$Impl_$._new();
		ba.position = 0;
		ba.readBytes(openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytes(this.bytes));
		this.parseAsync(this.bytes);
	}
	,parse: function(data) {
		this.bytes = data;
		this.parseHeader();
		this.parseTags(data,this.version);
	}
	,parseAsync: function(data) {
		this.bytes = data;
		this.parseHeader();
		this.parseTagsAsync(data,this.version);
	}
	,publish: function(ba) {
		var data = format_swf__$SWFData_SWFData_$Impl_$._new();
		this.publishHeader(data);
		this.publishTags(data,this.version);
		this.publishFinalize(data);
		ba.writeBytes(openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytes(data));
	}
	,publishAsync: function(ba) {
		var _gthis = this;
		var data = format_swf__$SWFData_SWFData_$Impl_$._new();
		this.publishHeader(data);
		this.publishTagsAsync(data,this.version);
		this.addEventListener("complete",function(event) {
			_gthis.removeEventListener("complete",_gthis);
			_gthis.publishFinalize(data);
			ba = openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytes(format_swf__$SWFData_SWFData_$Impl_$._new());
			ba.writeBytes(openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytes(data));
		},false);
	}
	,parseHeader: function() {
		this.signature = "";
		this.compressed = false;
		this.compressionMethod = 2;
		this.bytes.position = 0;
		var signatureByte = format_swf__$SWFData_SWFData_$Impl_$.readUI8(this.bytes);
		if(signatureByte == 67) {
			this.compressed = true;
		} else if(signatureByte == 90) {
			this.compressed = true;
			this.compressionMethod = 1;
		} else if(signatureByte != 70) {
			throw new js__$Boot_HaxeError(new openfl_errors_Error("Not a SWF. First signature byte is 0x" + StringTools.hex(signatureByte) + " (expected: 0x43 or 0x5A or 0x46)"));
		}
		this.signature += String.fromCharCode(signatureByte);
		signatureByte = format_swf__$SWFData_SWFData_$Impl_$.readUI8(this.bytes);
		if(signatureByte != 87) {
			throw new js__$Boot_HaxeError(new openfl_errors_Error("Not a SWF. Second signature byte is 0x" + StringTools.hex(signatureByte) + " (expected: 0x57)"));
		}
		this.signature += String.fromCharCode(signatureByte);
		signatureByte = format_swf__$SWFData_SWFData_$Impl_$.readUI8(this.bytes);
		if(signatureByte != 83) {
			throw new js__$Boot_HaxeError(new openfl_errors_Error("Not a SWF. Third signature byte is 0x" + StringTools.hex(signatureByte) + " (expected: 0x53)"));
		}
		this.signature += String.fromCharCode(signatureByte);
		this.version = format_swf__$SWFData_SWFData_$Impl_$.readUI8(this.bytes);
		this.fileLength = format_swf__$SWFData_SWFData_$Impl_$.readUI32(this.bytes);
		this.fileLengthCompressed = format_swf__$SWFData_SWFData_$Impl_$.get_length(this.bytes);
		if(this.compressed) {
			format_swf__$SWFData_SWFData_$Impl_$.swfUncompress(this.bytes,this.compressionMethod,this.fileLength);
		}
		this.frameSize = format_swf__$SWFData_SWFData_$Impl_$.readRECT(this.bytes);
		this.frameRate = format_swf__$SWFData_SWFData_$Impl_$.readFIXED8(this.bytes);
		this.frameCount = format_swf__$SWFData_SWFData_$Impl_$.readUI16(this.bytes);
	}
	,publishHeader: function(data) {
		var firstHeaderByte = 70;
		if(this.compressed) {
			if(this.compressionMethod == 2) {
				firstHeaderByte = 67;
			} else if(this.compressionMethod == 1) {
				firstHeaderByte = 90;
			}
		}
		format_swf__$SWFData_SWFData_$Impl_$.writeUI8(data,firstHeaderByte);
		format_swf__$SWFData_SWFData_$Impl_$.writeUI8(data,87);
		format_swf__$SWFData_SWFData_$Impl_$.writeUI8(data,83);
		format_swf__$SWFData_SWFData_$Impl_$.writeUI8(data,this.version);
		format_swf__$SWFData_SWFData_$Impl_$.writeUI32(data,0);
		format_swf__$SWFData_SWFData_$Impl_$.writeRECT(data,this.frameSize);
		format_swf__$SWFData_SWFData_$Impl_$.writeFIXED8(data,this.frameRate);
		format_swf__$SWFData_SWFData_$Impl_$.writeUI16(data,this.frameCount);
	}
	,publishFinalize: function(data) {
		this.fileLength = this.fileLengthCompressed = format_swf__$SWFData_SWFData_$Impl_$.get_length(data);
		if(this.compressed) {
			this.compressionMethod = 2;
			data.position = 8;
			format_swf__$SWFData_SWFData_$Impl_$.swfCompress(data,this.compressionMethod);
			this.fileLengthCompressed = format_swf__$SWFData_SWFData_$Impl_$.get_length(data);
		}
		data.position = 4;
		format_swf__$SWFData_SWFData_$Impl_$.writeUI32(data,this.fileLength);
		data.position = 0;
	}
	,toString: function(indent) {
		if(indent == null) {
			indent = 0;
		}
		var s = "[SWF]\n" + "  Header:\n" + "    Version: " + this.version + "\n" + "    Compression: ";
		if(this.compressed) {
			if(this.compressionMethod == 2) {
				s += "ZLIB";
			} else if(this.compressionMethod == 1) {
				s += "LZMA";
			} else {
				s += "Unknown";
			}
		} else {
			s += "None";
		}
		return s + "\n    FileLength: " + this.fileLength + "\n" + "    FileLengthCompressed: " + this.fileLengthCompressed + "\n" + "    FrameSize: " + this.frameSize.toStringSize() + "\n" + "    FrameRate: " + this.frameRate + "\n" + "    FrameCount: " + this.frameCount + format_swf_SWFTimelineContainer.prototype.toString.call(this,indent);
	}
	,__class__: format_swf_SWFRoot
});
var format_swf_data_SWFButtonCondAction = function(data) {
	this.actions = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
	if(data != null) {
		this.parse(data);
	}
};
$hxClasses["format.swf.data.SWFButtonCondAction"] = format_swf_data_SWFButtonCondAction;
format_swf_data_SWFButtonCondAction.__name__ = ["format","swf","data","SWFButtonCondAction"];
format_swf_data_SWFButtonCondAction.prototype = {
	condActionSize: null
	,condIdleToOverDown: null
	,condOutDownToIdle: null
	,condOutDownToOverDown: null
	,condOverDownToOutDown: null
	,condOverDownToOverUp: null
	,condOverUpToOverDown: null
	,condOverUpToIdle: null
	,condIdleToOverUp: null
	,condOverDownToIdle: null
	,condKeyPress: null
	,actions: null
	,parse: function(data) {
		var flags = format_swf__$SWFData_SWFData_$Impl_$.readUI8(data) << 8 | format_swf__$SWFData_SWFData_$Impl_$.readUI8(data);
		this.condIdleToOverDown = (flags & 32768) != 0;
		this.condOutDownToIdle = (flags & 16384) != 0;
		this.condOutDownToOverDown = (flags & 8192) != 0;
		this.condOverDownToOutDown = (flags & 4096) != 0;
		this.condOverDownToOverUp = (flags & 2048) != 0;
		this.condOverUpToOverDown = (flags & 1024) != 0;
		this.condOverUpToIdle = (flags & 512) != 0;
		this.condIdleToOverUp = (flags & 256) != 0;
		this.condOverDownToIdle = (flags & 1) != 0;
		this.condKeyPress = (flags & 255) >> 1;
		var action;
		while(true) {
			action = format_swf__$SWFData_SWFData_$Impl_$.readACTIONRECORD(data);
			if(!(action != null)) {
				break;
			}
			this.actions.push(action);
		}
		format_swf_data_actions_Action.resolveOffsets(this.actions);
	}
	,publish: function(data) {
		var flags1 = 0;
		if(this.condIdleToOverDown) {
			flags1 = 128;
		}
		if(this.condOutDownToIdle) {
			flags1 |= 64;
		}
		if(this.condOutDownToOverDown) {
			flags1 |= 32;
		}
		if(this.condOverDownToOutDown) {
			flags1 |= 16;
		}
		if(this.condOverDownToOverUp) {
			flags1 |= 8;
		}
		if(this.condOverUpToOverDown) {
			flags1 |= 4;
		}
		if(this.condOverUpToIdle) {
			flags1 |= 2;
		}
		if(this.condIdleToOverUp) {
			flags1 |= 1;
		}
		format_swf__$SWFData_SWFData_$Impl_$.writeUI8(data,flags1);
		var flags2 = this.condKeyPress << 1;
		if(this.condOverDownToIdle) {
			flags2 |= 1;
		}
		format_swf__$SWFData_SWFData_$Impl_$.writeUI8(data,flags2);
		var _g1 = 0;
		var _g = this.actions.get_length();
		while(_g1 < _g) format_swf__$SWFData_SWFData_$Impl_$.writeACTIONRECORD(data,this.actions.get(_g1++));
		format_swf__$SWFData_SWFData_$Impl_$.writeUI8(data,0);
	}
	,clone: function() {
		var condAction = new format_swf_data_SWFButtonCondAction();
		condAction.condActionSize = this.condActionSize;
		condAction.condIdleToOverDown = this.condIdleToOverDown;
		condAction.condOutDownToIdle = this.condOutDownToIdle;
		condAction.condOutDownToOverDown = this.condOutDownToOverDown;
		condAction.condOverDownToOutDown = this.condOverDownToOutDown;
		condAction.condOverDownToOverUp = this.condOverDownToOverUp;
		condAction.condOverUpToOverDown = this.condOverUpToOverDown;
		condAction.condOverUpToIdle = this.condOverUpToIdle;
		condAction.condIdleToOverUp = this.condIdleToOverUp;
		condAction.condOverDownToIdle = this.condOverDownToIdle;
		condAction.condKeyPress = this.condKeyPress;
		var _g1 = 0;
		var _g = this.actions.get_length();
		while(_g1 < _g) condAction.actions.push(this.actions.get(_g1++).clone());
		return condAction;
	}
	,toString: function(indent) {
		if(indent == null) {
			indent = 0;
		}
		var a = [];
		if(this.condIdleToOverDown) {
			a.push("idleToOverDown");
		}
		if(this.condOutDownToIdle) {
			a.push("outDownToIdle");
		}
		if(this.condOutDownToOverDown) {
			a.push("outDownToOverDown");
		}
		if(this.condOverDownToOutDown) {
			a.push("overDownToOutDown");
		}
		if(this.condOverDownToOverUp) {
			a.push("overDownToOverUp");
		}
		if(this.condOverUpToOverDown) {
			a.push("overUpToOverDown");
		}
		if(this.condOverUpToIdle) {
			a.push("overUpToIdle");
		}
		if(this.condIdleToOverUp) {
			a.push("idleToOverUp");
		}
		if(this.condOverDownToIdle) {
			a.push("overDownToIdle");
		}
		var str = "Cond: (" + a.join(",") + "), KeyPress: " + this.condKeyPress;
		var _g1 = 0;
		var _g = this.actions.get_length();
		while(_g1 < _g) {
			var i = _g1++;
			str += "\n" + format_swf_utils_StringUtils.repeat(indent + 2) + "[" + i + "] " + this.actions.get(i).toString(indent + 2);
		}
		return str;
	}
	,__class__: format_swf_data_SWFButtonCondAction
};
var format_swf_data_SWFButtonRecord = function(data,level) {
	if(level == null) {
		level = 1;
	}
	this.filterList = [];
	if(data != null) {
		this.parse(data,level);
	}
};
$hxClasses["format.swf.data.SWFButtonRecord"] = format_swf_data_SWFButtonRecord;
format_swf_data_SWFButtonRecord.__name__ = ["format","swf","data","SWFButtonRecord"];
format_swf_data_SWFButtonRecord.prototype = {
	hasBlendMode: null
	,hasFilterList: null
	,stateHitTest: null
	,stateDown: null
	,stateOver: null
	,stateUp: null
	,characterId: null
	,placeDepth: null
	,placeMatrix: null
	,colorTransform: null
	,blendMode: null
	,filterList: null
	,parse: function(data,level) {
		if(level == null) {
			level = 1;
		}
		var flags = format_swf__$SWFData_SWFData_$Impl_$.readUI8(data);
		this.stateHitTest = (flags & 8) != 0;
		this.stateDown = (flags & 4) != 0;
		this.stateOver = (flags & 2) != 0;
		this.stateUp = (flags & 1) != 0;
		this.characterId = format_swf__$SWFData_SWFData_$Impl_$.readUI16(data);
		this.placeDepth = format_swf__$SWFData_SWFData_$Impl_$.readUI16(data);
		this.placeMatrix = format_swf__$SWFData_SWFData_$Impl_$.readMATRIX(data);
		if(level >= 2) {
			this.colorTransform = format_swf__$SWFData_SWFData_$Impl_$.readCXFORMWITHALPHA(data);
			this.hasFilterList = (flags & 16) != 0;
			if(this.hasFilterList) {
				var numberOfFilters = format_swf__$SWFData_SWFData_$Impl_$.readUI8(data);
				var _g1 = 0;
				while(_g1 < numberOfFilters) {
					++_g1;
					this.filterList.push(format_swf__$SWFData_SWFData_$Impl_$.readFILTER(data));
				}
			}
			this.hasBlendMode = (flags & 32) != 0;
			if(this.hasBlendMode) {
				this.blendMode = format_swf__$SWFData_SWFData_$Impl_$.readUI8(data);
			}
		}
	}
	,publish: function(data,level) {
		if(level == null) {
			level = 1;
		}
		var flags = 0;
		if(level >= 2 && this.hasBlendMode) {
			flags = 32;
		}
		if(level >= 2 && this.hasFilterList) {
			flags |= 16;
		}
		if(this.stateHitTest) {
			flags |= 8;
		}
		if(this.stateDown) {
			flags |= 4;
		}
		if(this.stateOver) {
			flags |= 2;
		}
		if(this.stateUp) {
			flags |= 1;
		}
		format_swf__$SWFData_SWFData_$Impl_$.writeUI8(data,flags);
		format_swf__$SWFData_SWFData_$Impl_$.writeUI16(data,this.characterId);
		format_swf__$SWFData_SWFData_$Impl_$.writeUI16(data,this.placeDepth);
		format_swf__$SWFData_SWFData_$Impl_$.writeMATRIX(data,this.placeMatrix);
		if(level >= 2) {
			format_swf__$SWFData_SWFData_$Impl_$.writeCXFORMWITHALPHA(data,this.colorTransform);
			if(this.hasFilterList) {
				var numberOfFilters = this.filterList.length;
				format_swf__$SWFData_SWFData_$Impl_$.writeUI8(data,numberOfFilters);
				var _g1 = 0;
				while(_g1 < numberOfFilters) format_swf__$SWFData_SWFData_$Impl_$.writeFILTER(data,this.filterList[_g1++]);
			}
			if(this.hasBlendMode) {
				format_swf__$SWFData_SWFData_$Impl_$.writeUI8(data,this.blendMode);
			}
		}
	}
	,clone: function() {
		var data = new format_swf_data_SWFButtonRecord();
		data.hasBlendMode = this.hasBlendMode;
		data.hasFilterList = this.hasFilterList;
		data.stateHitTest = this.stateHitTest;
		data.stateDown = this.stateDown;
		data.stateOver = this.stateOver;
		data.stateUp = this.stateUp;
		data.characterId = this.characterId;
		data.placeDepth = this.placeDepth;
		data.placeMatrix = this.placeMatrix.clone();
		if(this.colorTransform != null) {
			data.colorTransform = js_Boot.__cast(this.colorTransform.clone() , format_swf_data_SWFColorTransformWithAlpha);
		}
		var _g1 = 0;
		var _g = this.filterList.length;
		while(_g1 < _g) data.filterList.push(this.filterList[_g1++].clone());
		data.blendMode = this.blendMode;
		return data;
	}
	,toString: function(indent) {
		if(indent == null) {
			indent = 0;
		}
		var str = "Depth: " + this.placeDepth + ", CharacterID: " + this.characterId + ", States: ";
		var states = [];
		if(this.stateUp) {
			states.push("up");
		}
		if(this.stateOver) {
			states.push("over");
		}
		if(this.stateDown) {
			states.push("down");
		}
		if(this.stateHitTest) {
			states.push("hit");
		}
		str += states.join(",");
		if(this.hasBlendMode) {
			str += ", BlendMode: " + format_swf_data_consts_BlendMode.toString(this.blendMode);
		}
		if(this.placeMatrix != null && !this.placeMatrix.isIdentity()) {
			str += "\n" + format_swf_utils_StringUtils.repeat(indent + 2) + "Matrix: " + Std.string(this.placeMatrix);
		}
		if(this.colorTransform != null && !this.colorTransform.isIdentity()) {
			str += "\n" + format_swf_utils_StringUtils.repeat(indent + 2) + "ColorTransform: " + Std.string(this.colorTransform);
		}
		if(this.hasFilterList) {
			str += "\n" + format_swf_utils_StringUtils.repeat(indent + 2) + "Filters:";
			var _g1 = 0;
			var _g = this.filterList.length;
			while(_g1 < _g) {
				var i = _g1++;
				str += "\n" + format_swf_utils_StringUtils.repeat(indent + 4) + "[" + i + "] " + this.filterList[i].toString(indent + 4);
			}
		}
		return str;
	}
	,__class__: format_swf_data_SWFButtonRecord
};
var format_swf_data_SWFClipActionRecord = function(data,version) {
	if(version == null) {
		version = 0;
	}
	this.actions = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
	if(data != null) {
		this.parse(data,version);
	}
};
$hxClasses["format.swf.data.SWFClipActionRecord"] = format_swf_data_SWFClipActionRecord;
format_swf_data_SWFClipActionRecord.__name__ = ["format","swf","data","SWFClipActionRecord"];
format_swf_data_SWFClipActionRecord.prototype = {
	eventFlags: null
	,keyCode: null
	,actions: null
	,parse: function(data,version) {
		this.eventFlags = format_swf__$SWFData_SWFData_$Impl_$.readCLIPEVENTFLAGS(data,version);
		format_swf__$SWFData_SWFData_$Impl_$.readUI32(data);
		if(this.eventFlags.keyPressEvent) {
			this.keyCode = format_swf__$SWFData_SWFData_$Impl_$.readUI8(data);
		}
		var action;
		while(true) {
			action = format_swf__$SWFData_SWFData_$Impl_$.readACTIONRECORD(data);
			if(!(action != null)) {
				break;
			}
			this.actions.push(action);
		}
		format_swf_data_actions_Action.resolveOffsets(this.actions);
	}
	,publish: function(data,version) {
		format_swf__$SWFData_SWFData_$Impl_$.writeCLIPEVENTFLAGS(data,this.eventFlags,version);
		var actionBlock = format_swf__$SWFData_SWFData_$Impl_$._new();
		if(this.eventFlags.keyPressEvent) {
			format_swf__$SWFData_SWFData_$Impl_$.writeUI8(actionBlock,this.keyCode);
		}
		var _g1 = 0;
		var _g = this.actions.get_length();
		while(_g1 < _g) format_swf__$SWFData_SWFData_$Impl_$.writeACTIONRECORD(actionBlock,this.actions.get(_g1++));
		format_swf__$SWFData_SWFData_$Impl_$.writeUI8(actionBlock,0);
		format_swf__$SWFData_SWFData_$Impl_$.writeUI32(data,format_swf__$SWFData_SWFData_$Impl_$.get_length(actionBlock));
		data.writeBytes(openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytes(actionBlock));
	}
	,toString: function(indent) {
		if(indent == null) {
			indent = 0;
		}
		var str = "ClipActionRecords (" + this.eventFlags.toString() + "):";
		if(this.keyCode > 0) {
			str += ", KeyCode: " + this.keyCode;
		}
		str += ":";
		var _g1 = 0;
		var _g = this.actions.get_length();
		while(_g1 < _g) {
			var i = _g1++;
			str += "\n" + format_swf_utils_StringUtils.repeat(indent + 2) + "[" + i + "] " + this.actions.get(i).toString(indent + 2);
		}
		return str;
	}
	,__class__: format_swf_data_SWFClipActionRecord
};
var format_swf_data_SWFClipActions = function(data,version) {
	if(version == null) {
		version = 0;
	}
	this.records = [];
	if(data != null) {
		this.parse(data,version);
	}
};
$hxClasses["format.swf.data.SWFClipActions"] = format_swf_data_SWFClipActions;
format_swf_data_SWFClipActions.__name__ = ["format","swf","data","SWFClipActions"];
format_swf_data_SWFClipActions.prototype = {
	eventFlags: null
	,records: null
	,parse: function(data,version) {
		format_swf__$SWFData_SWFData_$Impl_$.readUI16(data);
		this.eventFlags = format_swf__$SWFData_SWFData_$Impl_$.readCLIPEVENTFLAGS(data,version);
		var record;
		while(true) {
			record = format_swf__$SWFData_SWFData_$Impl_$.readCLIPACTIONRECORD(data,version);
			if(!(record != null)) {
				break;
			}
			this.records.push(record);
		}
	}
	,publish: function(data,version) {
		format_swf__$SWFData_SWFData_$Impl_$.writeUI16(data,0);
		format_swf__$SWFData_SWFData_$Impl_$.writeCLIPEVENTFLAGS(data,this.eventFlags,version);
		var _g1 = 0;
		var _g = this.records.length;
		while(_g1 < _g) format_swf__$SWFData_SWFData_$Impl_$.writeCLIPACTIONRECORD(data,this.records[_g1++],version);
		if(version >= 6) {
			format_swf__$SWFData_SWFData_$Impl_$.writeUI32(data,0);
		} else {
			format_swf__$SWFData_SWFData_$Impl_$.writeUI16(data,0);
		}
	}
	,toString: function(indent) {
		if(indent == null) {
			indent = 0;
		}
		var str = "ClipActions (" + this.eventFlags.toString() + "):";
		var _g1 = 0;
		var _g = this.records.length;
		while(_g1 < _g) {
			var i = _g1++;
			str += "\n" + format_swf_utils_StringUtils.repeat(indent + 2) + "[" + i + "] " + this.records[i].toString(indent + 2);
		}
		return str;
	}
	,__class__: format_swf_data_SWFClipActions
};
var format_swf_data_SWFClipEventFlags = function(data,version) {
	if(version == null) {
		version = 0;
	}
	if(data != null) {
		this.parse(data,version);
	}
};
$hxClasses["format.swf.data.SWFClipEventFlags"] = format_swf_data_SWFClipEventFlags;
format_swf_data_SWFClipEventFlags.__name__ = ["format","swf","data","SWFClipEventFlags"];
format_swf_data_SWFClipEventFlags.prototype = {
	keyUpEvent: null
	,keyDownEvent: null
	,mouseUpEvent: null
	,mouseDownEvent: null
	,mouseMoveEvent: null
	,unloadEvent: null
	,enterFrameEvent: null
	,loadEvent: null
	,dragOverEvent: null
	,rollOutEvent: null
	,rollOverEvent: null
	,releaseOutsideEvent: null
	,releaseEvent: null
	,pressEvent: null
	,initializeEvent: null
	,dataEvent: null
	,constructEvent: null
	,keyPressEvent: null
	,dragOutEvent: null
	,parse: function(data,version) {
		var flags1 = format_swf__$SWFData_SWFData_$Impl_$.readUI8(data);
		this.keyUpEvent = (flags1 & 128) != 0;
		this.keyDownEvent = (flags1 & 64) != 0;
		this.mouseUpEvent = (flags1 & 32) != 0;
		this.mouseDownEvent = (flags1 & 16) != 0;
		this.mouseMoveEvent = (flags1 & 8) != 0;
		this.unloadEvent = (flags1 & 4) != 0;
		this.enterFrameEvent = (flags1 & 2) != 0;
		this.loadEvent = (flags1 & 1) != 0;
		var flags2 = format_swf__$SWFData_SWFData_$Impl_$.readUI8(data);
		this.dragOverEvent = (flags2 & 128) != 0;
		this.rollOutEvent = (flags2 & 64) != 0;
		this.rollOverEvent = (flags2 & 32) != 0;
		this.releaseOutsideEvent = (flags2 & 16) != 0;
		this.releaseEvent = (flags2 & 8) != 0;
		this.pressEvent = (flags2 & 4) != 0;
		this.initializeEvent = (flags2 & 2) != 0;
		this.dataEvent = (flags2 & 1) != 0;
		if(version >= 6) {
			var flags3 = format_swf__$SWFData_SWFData_$Impl_$.readUI8(data);
			this.constructEvent = (flags3 & 4) != 0;
			this.keyPressEvent = (flags3 & 2) != 0;
			this.dragOutEvent = (flags3 & 1) != 0;
			format_swf__$SWFData_SWFData_$Impl_$.readUI8(data);
		}
	}
	,publish: function(data,version) {
		var flags1 = 0;
		if(this.keyUpEvent) {
			flags1 = 128;
		}
		if(this.keyDownEvent) {
			flags1 |= 64;
		}
		if(this.mouseUpEvent) {
			flags1 |= 32;
		}
		if(this.mouseDownEvent) {
			flags1 |= 16;
		}
		if(this.mouseMoveEvent) {
			flags1 |= 8;
		}
		if(this.unloadEvent) {
			flags1 |= 4;
		}
		if(this.enterFrameEvent) {
			flags1 |= 2;
		}
		if(this.loadEvent) {
			flags1 |= 1;
		}
		format_swf__$SWFData_SWFData_$Impl_$.writeUI8(data,flags1);
		var flags2 = 0;
		if(this.dragOverEvent) {
			flags2 = 128;
		}
		if(this.rollOutEvent) {
			flags2 |= 64;
		}
		if(this.rollOverEvent) {
			flags2 |= 32;
		}
		if(this.releaseOutsideEvent) {
			flags2 |= 16;
		}
		if(this.releaseEvent) {
			flags2 |= 8;
		}
		if(this.pressEvent) {
			flags2 |= 4;
		}
		if(this.initializeEvent) {
			flags2 |= 2;
		}
		if(this.dataEvent) {
			flags2 |= 1;
		}
		format_swf__$SWFData_SWFData_$Impl_$.writeUI8(data,flags2);
		if(version >= 6) {
			var flags3 = 0;
			if(this.constructEvent) {
				flags3 = 4;
			}
			if(this.keyPressEvent) {
				flags3 |= 2;
			}
			if(this.dragOutEvent) {
				flags3 |= 1;
			}
			format_swf__$SWFData_SWFData_$Impl_$.writeUI8(data,flags3);
			format_swf__$SWFData_SWFData_$Impl_$.writeUI8(data,0);
		}
	}
	,toString: function() {
		var a = [];
		if(this.keyUpEvent) {
			a.push("keyup");
		}
		if(this.keyDownEvent) {
			a.push("keydown");
		}
		if(this.mouseUpEvent) {
			a.push("mouseup");
		}
		if(this.mouseDownEvent) {
			a.push("mousedown");
		}
		if(this.mouseMoveEvent) {
			a.push("mousemove");
		}
		if(this.unloadEvent) {
			a.push("unload");
		}
		if(this.enterFrameEvent) {
			a.push("enterframe");
		}
		if(this.loadEvent) {
			a.push("load");
		}
		if(this.dragOverEvent) {
			a.push("dragover");
		}
		if(this.rollOutEvent) {
			a.push("rollout");
		}
		if(this.rollOverEvent) {
			a.push("rollover");
		}
		if(this.releaseOutsideEvent) {
			a.push("releaseoutside");
		}
		if(this.releaseEvent) {
			a.push("release");
		}
		if(this.pressEvent) {
			a.push("press");
		}
		if(this.initializeEvent) {
			a.push("initialize");
		}
		if(this.dataEvent) {
			a.push("data");
		}
		if(this.constructEvent) {
			a.push("construct");
		}
		if(this.keyPressEvent) {
			a.push("keypress");
		}
		if(this.dragOutEvent) {
			a.push("dragout");
		}
		return a.join(",");
	}
	,__class__: format_swf_data_SWFClipEventFlags
};
var format_swf_data_SWFColorTransform = function(data) {
	this.aAdd = 0;
	this.aMult = 255;
	this.bAdd = 0;
	this.gAdd = 0;
	this.rAdd = 0;
	this.bMult = 255;
	this.gMult = 255;
	this.rMult = 255;
	if(data != null) {
		this.parse(data);
	}
};
$hxClasses["format.swf.data.SWFColorTransform"] = format_swf_data_SWFColorTransform;
format_swf_data_SWFColorTransform.__name__ = ["format","swf","data","SWFColorTransform"];
format_swf_data_SWFColorTransform.prototype = {
	colorTransform: null
	,rMult: null
	,gMult: null
	,bMult: null
	,rAdd: null
	,gAdd: null
	,bAdd: null
	,aMult: null
	,aAdd: null
	,hasMultTerms: null
	,hasAddTerms: null
	,get_colorTransform: function() {
		return new openfl_geom_ColorTransform(this.rMult / 255,this.gMult / 255,this.bMult / 255,this.aMult / 255,this.rAdd,this.gAdd,this.bAdd,this.aAdd);
	}
	,parse: function(data) {
		data.resetBitsPending();
		this.hasAddTerms = format_swf__$SWFData_SWFData_$Impl_$.readUB(data,1) == 1;
		this.hasMultTerms = format_swf__$SWFData_SWFData_$Impl_$.readUB(data,1) == 1;
		var bits = format_swf__$SWFData_SWFData_$Impl_$.readUB(data,4);
		this.rMult = 255;
		this.gMult = 255;
		this.bMult = 255;
		if(this.hasMultTerms) {
			this.rMult = format_swf__$SWFData_SWFData_$Impl_$.readSB(data,bits);
			this.gMult = format_swf__$SWFData_SWFData_$Impl_$.readSB(data,bits);
			this.bMult = format_swf__$SWFData_SWFData_$Impl_$.readSB(data,bits);
		}
		this.rAdd = 0;
		this.gAdd = 0;
		this.bAdd = 0;
		if(this.hasAddTerms) {
			this.rAdd = format_swf__$SWFData_SWFData_$Impl_$.readSB(data,bits);
			this.gAdd = format_swf__$SWFData_SWFData_$Impl_$.readSB(data,bits);
			this.bAdd = format_swf__$SWFData_SWFData_$Impl_$.readSB(data,bits);
		}
	}
	,publish: function(data) {
		data.resetBitsPending();
		format_swf__$SWFData_SWFData_$Impl_$.writeUB(data,1,this.hasAddTerms ? 1 : 0);
		format_swf__$SWFData_SWFData_$Impl_$.writeUB(data,1,this.hasMultTerms ? 1 : 0);
		var values = [];
		if(this.hasMultTerms) {
			values.push(this.rMult);
			values.push(this.gMult);
			values.push(this.bMult);
		}
		if(this.hasAddTerms) {
			values.push(this.rAdd);
			values.push(this.gAdd);
			values.push(this.bAdd);
		}
		var bits = data.calculateMaxBits(true,values);
		format_swf__$SWFData_SWFData_$Impl_$.writeUB(data,4,bits);
		if(this.hasMultTerms) {
			format_swf__$SWFData_SWFData_$Impl_$.writeSB(data,bits,this.rMult);
			format_swf__$SWFData_SWFData_$Impl_$.writeSB(data,bits,this.gMult);
			format_swf__$SWFData_SWFData_$Impl_$.writeSB(data,bits,this.bMult);
		}
		if(this.hasAddTerms) {
			format_swf__$SWFData_SWFData_$Impl_$.writeSB(data,bits,this.rAdd);
			format_swf__$SWFData_SWFData_$Impl_$.writeSB(data,bits,this.gAdd);
			format_swf__$SWFData_SWFData_$Impl_$.writeSB(data,bits,this.bAdd);
		}
	}
	,clone: function() {
		var colorTransform = new format_swf_data_SWFColorTransform();
		colorTransform.hasAddTerms = this.hasAddTerms;
		colorTransform.hasMultTerms = this.hasMultTerms;
		colorTransform.rMult = this.rMult;
		colorTransform.gMult = this.gMult;
		colorTransform.bMult = this.bMult;
		colorTransform.rAdd = this.rAdd;
		colorTransform.gAdd = this.gAdd;
		colorTransform.bAdd = this.bAdd;
		return colorTransform;
	}
	,isIdentity: function() {
		if(this.rMult == 1 && this.gMult == 1 && this.bMult == 1 && this.aMult == 1) {
			if(this.rAdd == 0 && this.gAdd == 0 && this.bAdd == 0) {
				return this.aAdd == 0;
			} else {
				return false;
			}
		} else {
			return false;
		}
	}
	,toString: function() {
		return "(redMultiplier=" + this.rMult + ", greenMultiplier=" + this.gMult + ", blueMultiplier=" + this.bMult + ", alphaMultiplier=" + this.aMult + ", redOffset=" + this.rAdd + ", greenOffset=" + this.gAdd + ", blueOffset=" + this.bAdd + ", alphaOffset=" + this.aAdd + ")";
	}
	,__class__: format_swf_data_SWFColorTransform
	,__properties__: {get_colorTransform:"get_colorTransform"}
};
var format_swf_data_SWFColorTransformWithAlpha = function(data) {
	format_swf_data_SWFColorTransform.call(this,data);
};
$hxClasses["format.swf.data.SWFColorTransformWithAlpha"] = format_swf_data_SWFColorTransformWithAlpha;
format_swf_data_SWFColorTransformWithAlpha.__name__ = ["format","swf","data","SWFColorTransformWithAlpha"];
format_swf_data_SWFColorTransformWithAlpha.__super__ = format_swf_data_SWFColorTransform;
format_swf_data_SWFColorTransformWithAlpha.prototype = $extend(format_swf_data_SWFColorTransform.prototype,{
	parse: function(data) {
		data.resetBitsPending();
		this.hasAddTerms = format_swf__$SWFData_SWFData_$Impl_$.readUB(data,1) == 1;
		this.hasMultTerms = format_swf__$SWFData_SWFData_$Impl_$.readUB(data,1) == 1;
		var bits = format_swf__$SWFData_SWFData_$Impl_$.readUB(data,4);
		this.rMult = 255;
		this.gMult = 255;
		this.bMult = 255;
		this.aMult = 255;
		if(this.hasMultTerms) {
			this.rMult = format_swf__$SWFData_SWFData_$Impl_$.readSB(data,bits);
			this.gMult = format_swf__$SWFData_SWFData_$Impl_$.readSB(data,bits);
			this.bMult = format_swf__$SWFData_SWFData_$Impl_$.readSB(data,bits);
			this.aMult = format_swf__$SWFData_SWFData_$Impl_$.readSB(data,bits);
		}
		this.rAdd = 0;
		this.gAdd = 0;
		this.bAdd = 0;
		this.aAdd = 0;
		if(this.hasAddTerms) {
			this.rAdd = format_swf__$SWFData_SWFData_$Impl_$.readSB(data,bits);
			this.gAdd = format_swf__$SWFData_SWFData_$Impl_$.readSB(data,bits);
			this.bAdd = format_swf__$SWFData_SWFData_$Impl_$.readSB(data,bits);
			this.aAdd = format_swf__$SWFData_SWFData_$Impl_$.readSB(data,bits);
		}
	}
	,publish: function(data) {
		data.resetBitsPending();
		format_swf__$SWFData_SWFData_$Impl_$.writeUB(data,1,this.hasAddTerms ? 1 : 0);
		format_swf__$SWFData_SWFData_$Impl_$.writeUB(data,1,this.hasMultTerms ? 1 : 0);
		var values = [];
		if(this.hasMultTerms) {
			values.push(this.rMult);
			values.push(this.gMult);
			values.push(this.bMult);
			values.push(this.aMult);
		}
		if(this.hasAddTerms) {
			values.push(this.rAdd);
			values.push(this.gAdd);
			values.push(this.bAdd);
			values.push(this.aAdd);
		}
		var bits = this.hasMultTerms || this.hasAddTerms ? data.calculateMaxBits(true,values) : 1;
		format_swf__$SWFData_SWFData_$Impl_$.writeUB(data,4,bits);
		if(this.hasMultTerms) {
			format_swf__$SWFData_SWFData_$Impl_$.writeSB(data,bits,this.rMult);
			format_swf__$SWFData_SWFData_$Impl_$.writeSB(data,bits,this.gMult);
			format_swf__$SWFData_SWFData_$Impl_$.writeSB(data,bits,this.bMult);
			format_swf__$SWFData_SWFData_$Impl_$.writeSB(data,bits,this.aMult);
		}
		if(this.hasAddTerms) {
			format_swf__$SWFData_SWFData_$Impl_$.writeSB(data,bits,this.rAdd);
			format_swf__$SWFData_SWFData_$Impl_$.writeSB(data,bits,this.gAdd);
			format_swf__$SWFData_SWFData_$Impl_$.writeSB(data,bits,this.bAdd);
			format_swf__$SWFData_SWFData_$Impl_$.writeSB(data,bits,this.aAdd);
		}
	}
	,clone: function() {
		var colorTransform = new format_swf_data_SWFColorTransformWithAlpha();
		colorTransform.hasAddTerms = this.hasAddTerms;
		colorTransform.hasMultTerms = this.hasMultTerms;
		colorTransform.rMult = this.rMult;
		colorTransform.gMult = this.gMult;
		colorTransform.bMult = this.bMult;
		colorTransform.aMult = this.aMult;
		colorTransform.rAdd = this.rAdd;
		colorTransform.gAdd = this.gAdd;
		colorTransform.bAdd = this.bAdd;
		colorTransform.aAdd = this.aAdd;
		return colorTransform;
	}
	,toString: function() {
		return "(redMultiplier=" + this.rMult + ", greenMultiplier=" + this.gMult + ", blueMultiplier=" + this.bMult + ", alphaMultiplier=" + this.aMult + ", redOffset=" + this.rAdd + ", greenOffset=" + this.gAdd + ", blueOffset=" + this.bAdd + ", alphaOffset=" + this.aAdd + ")";
	}
	,__class__: format_swf_data_SWFColorTransformWithAlpha
});
var format_swf_data_SWFFillStyle = function(data,level) {
	if(level == null) {
		level = 1;
	}
	if(data != null) {
		this.parse(data,level);
	}
};
$hxClasses["format.swf.data.SWFFillStyle"] = format_swf_data_SWFFillStyle;
format_swf_data_SWFFillStyle.__name__ = ["format","swf","data","SWFFillStyle"];
format_swf_data_SWFFillStyle.prototype = {
	type: null
	,rgb: null
	,gradient: null
	,gradientMatrix: null
	,bitmapId: null
	,bitmapMatrix: null
	,_level: null
	,parse: function(data,level) {
		if(level == null) {
			level = 1;
		}
		this._level = level;
		this.type = format_swf__$SWFData_SWFData_$Impl_$.readUI8(data);
		switch(this.type) {
		case 0:
			this.rgb = level <= 2 ? format_swf__$SWFData_SWFData_$Impl_$.readRGB(data) : format_swf__$SWFData_SWFData_$Impl_$.readRGBA(data);
			break;
		case 16:case 18:case 19:
			this.gradientMatrix = format_swf__$SWFData_SWFData_$Impl_$.readMATRIX(data);
			this.gradient = this.type == 19 ? format_swf__$SWFData_SWFData_$Impl_$.readFOCALGRADIENT(data,level) : format_swf__$SWFData_SWFData_$Impl_$.readGRADIENT(data,level);
			break;
		case 64:case 65:case 66:case 67:
			this.bitmapId = format_swf__$SWFData_SWFData_$Impl_$.readUI16(data);
			this.bitmapMatrix = format_swf__$SWFData_SWFData_$Impl_$.readMATRIX(data);
			break;
		default:
			throw new js__$Boot_HaxeError(new openfl_errors_Error("Unknown fill style type: 0x" + StringTools.hex(this.type)));
		}
	}
	,publish: function(data,level) {
		if(level == null) {
			level = 1;
		}
		format_swf__$SWFData_SWFData_$Impl_$.writeUI8(data,this.type);
		switch(this.type) {
		case 0:
			if(level <= 2) {
				format_swf__$SWFData_SWFData_$Impl_$.writeRGB(data,this.rgb);
			} else {
				format_swf__$SWFData_SWFData_$Impl_$.writeRGBA(data,this.rgb);
			}
			break;
		case 16:case 18:
			format_swf__$SWFData_SWFData_$Impl_$.writeMATRIX(data,this.gradientMatrix);
			format_swf__$SWFData_SWFData_$Impl_$.writeGRADIENT(data,this.gradient,level);
			break;
		case 19:
			format_swf__$SWFData_SWFData_$Impl_$.writeMATRIX(data,this.gradientMatrix);
			format_swf__$SWFData_SWFData_$Impl_$.writeFOCALGRADIENT(data,js_Boot.__cast(this.gradient , format_swf_data_SWFFocalGradient),level);
			break;
		case 64:case 65:case 66:case 67:
			format_swf__$SWFData_SWFData_$Impl_$.writeUI16(data,this.bitmapId);
			format_swf__$SWFData_SWFData_$Impl_$.writeMATRIX(data,this.bitmapMatrix);
			break;
		default:
			throw new js__$Boot_HaxeError(new openfl_errors_Error("Unknown fill style type: 0x" + StringTools.hex(this.type)));
		}
	}
	,clone: function() {
		var fillStyle = new format_swf_data_SWFFillStyle();
		fillStyle.type = this.type;
		fillStyle.rgb = this.rgb;
		fillStyle.gradient = this.gradient.clone();
		fillStyle.gradientMatrix = this.gradientMatrix.clone();
		fillStyle.bitmapId = this.bitmapId;
		fillStyle.bitmapMatrix = this.bitmapMatrix.clone();
		return fillStyle;
	}
	,toString: function() {
		var str = "[SWFFillStyle] Type: " + format_swf_utils_StringUtils.printf("%02x",[this.type]);
		switch(this.type) {
		case 0:
			str += " (solid), Color: " + (this._level <= 2 ? format_swf_utils_ColorUtils.rgbToString(this.rgb) : format_swf_utils_ColorUtils.rgbaToString(this.rgb));
			break;
		case 16:
			str += " (linear gradient), Gradient: " + Std.string(this.gradient) + ", Matrix: " + Std.string(this.gradientMatrix);
			break;
		case 18:
			str += " (radial gradient), Gradient: " + Std.string(this.gradient) + ", Matrix: " + Std.string(this.gradientMatrix);
			break;
		case 19:
			str += " (focal radial gradient), Gradient: " + Std.string(this.gradient) + ", Matrix: " + Std.string(this.gradientMatrix) + ", FocalPoint: " + this.gradient.focalPoint;
			break;
		case 64:
			str += " (repeating bitmap), BitmapID: " + this.bitmapId;
			break;
		case 65:
			str += " (clipped bitmap), BitmapID: " + this.bitmapId;
			break;
		case 66:
			str += " (non-smoothed repeating bitmap), BitmapID: " + this.bitmapId;
			break;
		case 67:
			str += " (non-smoothed clipped bitmap), BitmapID: " + this.bitmapId;
			break;
		}
		return str;
	}
	,__class__: format_swf_data_SWFFillStyle
};
var format_swf_data_SWFGradient = function(data,level) {
	if(level == null) {
		level = 1;
	}
	this.focalPoint = 0.0;
	this.records = [];
	if(data != null) {
		this.parse(data,level);
	}
};
$hxClasses["format.swf.data.SWFGradient"] = format_swf_data_SWFGradient;
format_swf_data_SWFGradient.__name__ = ["format","swf","data","SWFGradient"];
format_swf_data_SWFGradient.prototype = {
	spreadMode: null
	,interpolationMode: null
	,focalPoint: null
	,records: null
	,parse: function(data,level) {
		data.resetBitsPending();
		this.spreadMode = format_swf__$SWFData_SWFData_$Impl_$.readUB(data,2);
		this.interpolationMode = format_swf__$SWFData_SWFData_$Impl_$.readUB(data,2);
		var numGradients = format_swf__$SWFData_SWFData_$Impl_$.readUB(data,4);
		var _g1 = 0;
		while(_g1 < numGradients) {
			++_g1;
			this.records.push(format_swf__$SWFData_SWFData_$Impl_$.readGRADIENTRECORD(data,level));
		}
	}
	,publish: function(data,level) {
		if(level == null) {
			level = 1;
		}
		var numRecords = this.records.length;
		data.resetBitsPending();
		format_swf__$SWFData_SWFData_$Impl_$.writeUB(data,2,this.spreadMode);
		format_swf__$SWFData_SWFData_$Impl_$.writeUB(data,2,this.interpolationMode);
		format_swf__$SWFData_SWFData_$Impl_$.writeUB(data,4,numRecords);
		var _g1 = 0;
		while(_g1 < numRecords) format_swf__$SWFData_SWFData_$Impl_$.writeGRADIENTRECORD(data,this.records[_g1++],level);
	}
	,clone: function() {
		var gradient = new format_swf_data_SWFGradient();
		gradient.spreadMode = this.spreadMode;
		gradient.interpolationMode = this.interpolationMode;
		gradient.focalPoint = this.focalPoint;
		var _g1 = 0;
		var _g = this.records.length;
		while(_g1 < _g) gradient.records.push(this.records[_g1++].clone());
		return gradient;
	}
	,toString: function() {
		return "(" + this.records.join(",") + "), SpreadMode: " + this.spreadMode + ", InterpolationMode: " + this.interpolationMode;
	}
	,__class__: format_swf_data_SWFGradient
};
var format_swf_data_SWFFocalGradient = function(data,level) {
	if(level == null) {
		level = 1;
	}
	format_swf_data_SWFGradient.call(this,data,level);
};
$hxClasses["format.swf.data.SWFFocalGradient"] = format_swf_data_SWFFocalGradient;
format_swf_data_SWFFocalGradient.__name__ = ["format","swf","data","SWFFocalGradient"];
format_swf_data_SWFFocalGradient.__super__ = format_swf_data_SWFGradient;
format_swf_data_SWFFocalGradient.prototype = $extend(format_swf_data_SWFGradient.prototype,{
	parse: function(data,level) {
		format_swf_data_SWFGradient.prototype.parse.call(this,data,level);
		this.focalPoint = format_swf__$SWFData_SWFData_$Impl_$.readFIXED8(data);
	}
	,publish: function(data,level) {
		if(level == null) {
			level = 1;
		}
		format_swf_data_SWFGradient.prototype.publish.call(this,data,level);
		format_swf__$SWFData_SWFData_$Impl_$.writeFIXED8(data,this.focalPoint);
	}
	,toString: function() {
		return "(" + this.records.join(",") + ")";
	}
	,__class__: format_swf_data_SWFFocalGradient
});
var format_swf_data_SWFFrameLabel = function(frameNumber,name) {
	this.frameNumber = frameNumber;
	this.name = name;
};
$hxClasses["format.swf.data.SWFFrameLabel"] = format_swf_data_SWFFrameLabel;
format_swf_data_SWFFrameLabel.__name__ = ["format","swf","data","SWFFrameLabel"];
format_swf_data_SWFFrameLabel.prototype = {
	frameNumber: null
	,name: null
	,toString: function() {
		return "Frame: " + this.frameNumber + ", Name: " + this.name;
	}
	,__class__: format_swf_data_SWFFrameLabel
};
var format_swf_data_SWFGlyphEntry = function(data,glyphBits,advanceBits) {
	if(advanceBits == null) {
		advanceBits = 0;
	}
	if(glyphBits == null) {
		glyphBits = 0;
	}
	if(data != null) {
		this.parse(data,glyphBits,advanceBits);
	}
};
$hxClasses["format.swf.data.SWFGlyphEntry"] = format_swf_data_SWFGlyphEntry;
format_swf_data_SWFGlyphEntry.__name__ = ["format","swf","data","SWFGlyphEntry"];
format_swf_data_SWFGlyphEntry.prototype = {
	index: null
	,advance: null
	,parse: function(data,glyphBits,advanceBits) {
		this.index = format_swf__$SWFData_SWFData_$Impl_$.readUB(data,glyphBits);
		this.advance = format_swf__$SWFData_SWFData_$Impl_$.readSB(data,advanceBits);
	}
	,publish: function(data,glyphBits,advanceBits) {
		format_swf__$SWFData_SWFData_$Impl_$.writeUB(data,glyphBits,this.index);
		format_swf__$SWFData_SWFData_$Impl_$.writeSB(data,advanceBits,this.advance);
	}
	,clone: function() {
		var entry = new format_swf_data_SWFGlyphEntry();
		entry.index = this.index;
		entry.advance = this.advance;
		return entry;
	}
	,toString: function() {
		return "[SWFGlyphEntry] Index: " + Std.string(this.index) + ", Advance: " + Std.string(this.advance);
	}
	,__class__: format_swf_data_SWFGlyphEntry
};
var format_swf_data_SWFGradientRecord = function(data,level) {
	if(level == null) {
		level = 1;
	}
	if(data != null) {
		this.parse(data,level);
	}
};
$hxClasses["format.swf.data.SWFGradientRecord"] = format_swf_data_SWFGradientRecord;
format_swf_data_SWFGradientRecord.__name__ = ["format","swf","data","SWFGradientRecord"];
format_swf_data_SWFGradientRecord.prototype = {
	ratio: null
	,color: null
	,_level: null
	,parse: function(data,level) {
		this._level = level;
		this.ratio = format_swf__$SWFData_SWFData_$Impl_$.readUI8(data);
		this.color = level <= 2 ? format_swf__$SWFData_SWFData_$Impl_$.readRGB(data) : format_swf__$SWFData_SWFData_$Impl_$.readRGBA(data);
	}
	,publish: function(data,level) {
		format_swf__$SWFData_SWFData_$Impl_$.writeUI8(data,this.ratio);
		if(level <= 2) {
			format_swf__$SWFData_SWFData_$Impl_$.writeRGB(data,this.color);
		} else {
			format_swf__$SWFData_SWFData_$Impl_$.writeRGBA(data,this.color);
		}
	}
	,clone: function() {
		var gradientRecord = new format_swf_data_SWFGradientRecord();
		gradientRecord.ratio = this.ratio;
		gradientRecord.color = this.color;
		return gradientRecord;
	}
	,toString: function() {
		return "[" + this.ratio + "," + (this._level <= 2 ? format_swf_utils_ColorUtils.rgbToString(this.color) : format_swf_utils_ColorUtils.rgbaToString(this.color)) + "]";
	}
	,__class__: format_swf_data_SWFGradientRecord
};
var format_swf_data_SWFKerningRecord = function(data,wideCodes) {
	if(wideCodes == null) {
		wideCodes = false;
	}
	if(data != null) {
		this.parse(data,wideCodes);
	}
};
$hxClasses["format.swf.data.SWFKerningRecord"] = format_swf_data_SWFKerningRecord;
format_swf_data_SWFKerningRecord.__name__ = ["format","swf","data","SWFKerningRecord"];
format_swf_data_SWFKerningRecord.prototype = {
	code1: null
	,code2: null
	,adjustment: null
	,parse: function(data,wideCodes) {
		this.code1 = wideCodes ? format_swf__$SWFData_SWFData_$Impl_$.readUI16(data) : format_swf__$SWFData_SWFData_$Impl_$.readUI8(data);
		this.code2 = wideCodes ? format_swf__$SWFData_SWFData_$Impl_$.readUI16(data) : format_swf__$SWFData_SWFData_$Impl_$.readUI8(data);
		this.adjustment = format_swf__$SWFData_SWFData_$Impl_$.readSI16(data);
	}
	,publish: function(data,wideCodes) {
		if(wideCodes) {
			format_swf__$SWFData_SWFData_$Impl_$.writeUI16(data,this.code1);
		} else {
			format_swf__$SWFData_SWFData_$Impl_$.writeUI8(data,this.code1);
		}
		if(wideCodes) {
			format_swf__$SWFData_SWFData_$Impl_$.writeUI16(data,this.code2);
		} else {
			format_swf__$SWFData_SWFData_$Impl_$.writeUI8(data,this.code2);
		}
		format_swf__$SWFData_SWFData_$Impl_$.writeSI16(data,this.adjustment);
	}
	,toString: function(indent) {
		if(indent == null) {
			indent = 0;
		}
		return "Code1: " + this.code1 + ", " + "Code2: " + this.code2 + ", " + "Adjustment: " + this.adjustment;
	}
	,__class__: format_swf_data_SWFKerningRecord
};
var format_swf_data_SWFLineStyle = function(data,level) {
	if(level == null) {
		level = 1;
	}
	this.startCapsStyle = 0;
	this.endCapsStyle = 0;
	this.jointStyle = 0;
	this.hasFillFlag = false;
	this.noHScaleFlag = false;
	this.noVScaleFlag = false;
	this.pixelHintingFlag = false;
	this.noClose = false;
	this.miterLimitFactor = 3;
	this.color = 0;
	if(data != null) {
		this.parse(data,level);
	}
};
$hxClasses["format.swf.data.SWFLineStyle"] = format_swf_data_SWFLineStyle;
format_swf_data_SWFLineStyle.__name__ = ["format","swf","data","SWFLineStyle"];
format_swf_data_SWFLineStyle.prototype = {
	width: null
	,color: null
	,_level: null
	,startCapsStyle: null
	,endCapsStyle: null
	,jointStyle: null
	,hasFillFlag: null
	,noHScaleFlag: null
	,noVScaleFlag: null
	,pixelHintingFlag: null
	,noClose: null
	,miterLimitFactor: null
	,fillType: null
	,parse: function(data,level) {
		if(level == null) {
			level = 1;
		}
		this._level = level;
		this.width = format_swf__$SWFData_SWFData_$Impl_$.readUI16(data);
		this.color = level <= 2 ? format_swf__$SWFData_SWFData_$Impl_$.readRGB(data) : format_swf__$SWFData_SWFData_$Impl_$.readRGBA(data);
	}
	,publish: function(data,level) {
		if(level == null) {
			level = 1;
		}
		format_swf__$SWFData_SWFData_$Impl_$.writeUI16(data,this.width);
		if(level <= 2) {
			format_swf__$SWFData_SWFData_$Impl_$.writeRGB(data,this.color);
		} else {
			format_swf__$SWFData_SWFData_$Impl_$.writeRGBA(data,this.color);
		}
	}
	,clone: function() {
		var lineStyle = new format_swf_data_SWFLineStyle();
		lineStyle.width = this.width;
		lineStyle.color = this.color;
		lineStyle.startCapsStyle = this.startCapsStyle;
		lineStyle.endCapsStyle = this.endCapsStyle;
		lineStyle.jointStyle = this.jointStyle;
		lineStyle.hasFillFlag = this.hasFillFlag;
		lineStyle.noHScaleFlag = this.noHScaleFlag;
		lineStyle.noVScaleFlag = this.noVScaleFlag;
		lineStyle.pixelHintingFlag = this.pixelHintingFlag;
		lineStyle.noClose = this.noClose;
		lineStyle.miterLimitFactor = this.miterLimitFactor;
		lineStyle.fillType = this.fillType.clone();
		return lineStyle;
	}
	,toString: function() {
		return "[SWFLineStyle] Width: " + this.width + " Color: " + (this._level <= 2 ? format_swf_utils_ColorUtils.rgbToString(this.color) : format_swf_utils_ColorUtils.rgbaToString(this.color));
	}
	,__class__: format_swf_data_SWFLineStyle
};
var format_swf_data_SWFLineStyle2 = function(data,level) {
	if(level == null) {
		level = 1;
	}
	format_swf_data_SWFLineStyle.call(this,data,level);
};
$hxClasses["format.swf.data.SWFLineStyle2"] = format_swf_data_SWFLineStyle2;
format_swf_data_SWFLineStyle2.__name__ = ["format","swf","data","SWFLineStyle2"];
format_swf_data_SWFLineStyle2.__super__ = format_swf_data_SWFLineStyle;
format_swf_data_SWFLineStyle2.prototype = $extend(format_swf_data_SWFLineStyle.prototype,{
	parse: function(data,level) {
		if(level == null) {
			level = 1;
		}
		this.width = format_swf__$SWFData_SWFData_$Impl_$.readUI16(data);
		this.startCapsStyle = format_swf__$SWFData_SWFData_$Impl_$.readUB(data,2);
		this.jointStyle = format_swf__$SWFData_SWFData_$Impl_$.readUB(data,2);
		this.hasFillFlag = format_swf__$SWFData_SWFData_$Impl_$.readUB(data,1) == 1;
		this.noHScaleFlag = format_swf__$SWFData_SWFData_$Impl_$.readUB(data,1) == 1;
		this.noVScaleFlag = format_swf__$SWFData_SWFData_$Impl_$.readUB(data,1) == 1;
		this.pixelHintingFlag = format_swf__$SWFData_SWFData_$Impl_$.readUB(data,1) == 1;
		format_swf__$SWFData_SWFData_$Impl_$.readUB(data,5);
		this.noClose = format_swf__$SWFData_SWFData_$Impl_$.readUB(data,1) == 1;
		this.endCapsStyle = format_swf__$SWFData_SWFData_$Impl_$.readUB(data,2);
		if(this.jointStyle == 2) {
			this.miterLimitFactor = format_swf__$SWFData_SWFData_$Impl_$.readFIXED8(data);
		}
		if(this.hasFillFlag) {
			this.fillType = format_swf__$SWFData_SWFData_$Impl_$.readFILLSTYLE(data,level);
		} else {
			this.color = format_swf__$SWFData_SWFData_$Impl_$.readRGBA(data);
		}
	}
	,publish: function(data,level) {
		if(level == null) {
			level = 1;
		}
		format_swf__$SWFData_SWFData_$Impl_$.writeUI16(data,this.width);
		format_swf__$SWFData_SWFData_$Impl_$.writeUB(data,2,this.startCapsStyle);
		format_swf__$SWFData_SWFData_$Impl_$.writeUB(data,2,this.jointStyle);
		format_swf__$SWFData_SWFData_$Impl_$.writeUB(data,1,this.hasFillFlag ? 1 : 0);
		format_swf__$SWFData_SWFData_$Impl_$.writeUB(data,1,this.noHScaleFlag ? 1 : 0);
		format_swf__$SWFData_SWFData_$Impl_$.writeUB(data,1,this.noVScaleFlag ? 1 : 0);
		format_swf__$SWFData_SWFData_$Impl_$.writeUB(data,1,this.pixelHintingFlag ? 1 : 0);
		format_swf__$SWFData_SWFData_$Impl_$.writeUB(data,5,0);
		format_swf__$SWFData_SWFData_$Impl_$.writeUB(data,1,this.noClose ? 1 : 0);
		format_swf__$SWFData_SWFData_$Impl_$.writeUB(data,2,this.endCapsStyle);
		if(this.jointStyle == 2) {
			format_swf__$SWFData_SWFData_$Impl_$.writeFIXED8(data,this.miterLimitFactor);
		}
		if(this.hasFillFlag) {
			format_swf__$SWFData_SWFData_$Impl_$.writeFILLSTYLE(data,this.fillType,level);
		} else {
			format_swf__$SWFData_SWFData_$Impl_$.writeRGBA(data,this.color);
		}
	}
	,toString: function() {
		var str = "[SWFLineStyle2] Width: " + this.width + ", " + "StartCaps: " + format_swf_data_consts_LineCapsStyle.toString(this.startCapsStyle) + ", " + "EndCaps: " + format_swf_data_consts_LineCapsStyle.toString(this.endCapsStyle) + ", " + "Joint: " + format_swf_data_consts_LineJointStyle.toString(this.jointStyle) + ", ";
		if(this.noClose) {
			str += "NoClose, ";
		}
		if(this.noHScaleFlag) {
			str += "NoHScale, ";
		}
		if(this.noVScaleFlag) {
			str += "NoVScale, ";
		}
		if(this.pixelHintingFlag) {
			str += "PixelHinting, ";
		}
		if(this.hasFillFlag) {
			str += "Fill: " + this.fillType.toString();
		} else {
			str += "Color: " + format_swf_utils_ColorUtils.rgbaToString(this.color);
		}
		return str;
	}
	,__class__: format_swf_data_SWFLineStyle2
});
var format_swf_data_SWFMatrix = function(data) {
	this.translateY = 0;
	this.translateX = 0;
	this.rotateSkew1 = 0.0;
	this.rotateSkew0 = 0.0;
	this.scaleY = 1.0;
	this.scaleX = 1.0;
	if(data != null) {
		this.parse(data);
	}
};
$hxClasses["format.swf.data.SWFMatrix"] = format_swf_data_SWFMatrix;
format_swf_data_SWFMatrix.__name__ = ["format","swf","data","SWFMatrix"];
format_swf_data_SWFMatrix.prototype = {
	matrix: null
	,scaleX: null
	,scaleY: null
	,rotateSkew0: null
	,rotateSkew1: null
	,translateX: null
	,translateY: null
	,xscale: null
	,yscale: null
	,rotation: null
	,get_matrix: function() {
		return new openfl_geom_Matrix(this.scaleX,this.rotateSkew0,this.rotateSkew1,this.scaleY,this.translateX,this.translateY);
	}
	,parse: function(data) {
		data.resetBitsPending();
		this.scaleX = 1.0;
		this.scaleY = 1.0;
		if(format_swf__$SWFData_SWFData_$Impl_$.readUB(data,1) == 1) {
			var scaleBits = format_swf__$SWFData_SWFData_$Impl_$.readUB(data,5);
			this.scaleX = format_swf__$SWFData_SWFData_$Impl_$.readFB(data,scaleBits);
			this.scaleY = format_swf__$SWFData_SWFData_$Impl_$.readFB(data,scaleBits);
		}
		this.rotateSkew0 = 0.0;
		this.rotateSkew1 = 0.0;
		if(format_swf__$SWFData_SWFData_$Impl_$.readUB(data,1) == 1) {
			var rotateBits = format_swf__$SWFData_SWFData_$Impl_$.readUB(data,5);
			this.rotateSkew0 = format_swf__$SWFData_SWFData_$Impl_$.readFB(data,rotateBits);
			this.rotateSkew1 = format_swf__$SWFData_SWFData_$Impl_$.readFB(data,rotateBits);
		}
		var translateBits = format_swf__$SWFData_SWFData_$Impl_$.readUB(data,5);
		this.translateX = format_swf__$SWFData_SWFData_$Impl_$.readSB(data,translateBits);
		this.translateY = format_swf__$SWFData_SWFData_$Impl_$.readSB(data,translateBits);
		var px = this.get_matrix().deltaTransformPoint(new openfl_geom_Point(0,1));
		this.rotation = 180 / Math.PI * Math.atan2(px.y,px.x) - 90;
		if(this.rotation < 0) {
			this.rotation = 360 + this.rotation;
		}
		this.xscale = Math.sqrt(this.scaleX * this.scaleX + this.rotateSkew0 * this.rotateSkew0) * (this.scaleX < 0 ? -1 : 1);
		this.yscale = Math.sqrt(this.rotateSkew1 * this.rotateSkew1 + this.scaleY * this.scaleY) * (this.scaleY < 0 ? -1 : 1);
	}
	,clone: function() {
		var matrix = new format_swf_data_SWFMatrix();
		matrix.scaleX = this.scaleX;
		matrix.scaleY = this.scaleY;
		matrix.rotateSkew0 = this.rotateSkew0;
		matrix.rotateSkew1 = this.rotateSkew1;
		matrix.translateX = this.translateX;
		matrix.translateY = this.translateY;
		return matrix;
	}
	,isIdentity: function() {
		if(this.scaleX == 1 && this.scaleY == 1 && this.rotateSkew0 == 0 && this.rotateSkew1 == 0 && this.translateX == 0) {
			return this.translateY == 0;
		} else {
			return false;
		}
	}
	,toString: function() {
		return "(" + this.scaleX + "," + this.rotateSkew0 + "," + this.rotateSkew1 + "," + this.scaleY + "," + this.translateX + "," + this.translateY + ")";
	}
	,__class__: format_swf_data_SWFMatrix
	,__properties__: {get_matrix:"get_matrix"}
};
var format_swf_data_SWFMorphFillStyle = function(data,level) {
	if(level == null) {
		level = 1;
	}
	if(data != null) {
		this.parse(data,level);
	}
};
$hxClasses["format.swf.data.SWFMorphFillStyle"] = format_swf_data_SWFMorphFillStyle;
format_swf_data_SWFMorphFillStyle.__name__ = ["format","swf","data","SWFMorphFillStyle"];
format_swf_data_SWFMorphFillStyle.prototype = {
	type: null
	,startColor: null
	,endColor: null
	,startGradientMatrix: null
	,endGradientMatrix: null
	,gradient: null
	,bitmapId: null
	,startBitmapMatrix: null
	,endBitmapMatrix: null
	,parse: function(data,level) {
		if(level == null) {
			level = 1;
		}
		this.type = format_swf__$SWFData_SWFData_$Impl_$.readUI8(data);
		switch(this.type) {
		case 0:
			this.startColor = format_swf__$SWFData_SWFData_$Impl_$.readRGBA(data);
			this.endColor = format_swf__$SWFData_SWFData_$Impl_$.readRGBA(data);
			break;
		case 16:case 18:case 19:
			this.startGradientMatrix = format_swf__$SWFData_SWFData_$Impl_$.readMATRIX(data);
			this.endGradientMatrix = format_swf__$SWFData_SWFData_$Impl_$.readMATRIX(data);
			this.gradient = this.type == 19 ? format_swf__$SWFData_SWFData_$Impl_$.readMORPHFOCALGRADIENT(data,level) : format_swf__$SWFData_SWFData_$Impl_$.readMORPHGRADIENT(data,level);
			break;
		case 64:case 65:case 66:case 67:
			this.bitmapId = format_swf__$SWFData_SWFData_$Impl_$.readUI16(data);
			this.startBitmapMatrix = format_swf__$SWFData_SWFData_$Impl_$.readMATRIX(data);
			this.endBitmapMatrix = format_swf__$SWFData_SWFData_$Impl_$.readMATRIX(data);
			break;
		default:
			throw new js__$Boot_HaxeError(new openfl_errors_Error("Unknown fill style type: 0x" + StringTools.hex(this.type)));
		}
	}
	,publish: function(data,level) {
		if(level == null) {
			level = 1;
		}
		format_swf__$SWFData_SWFData_$Impl_$.writeUI8(data,this.type);
		switch(this.type) {
		case 0:
			format_swf__$SWFData_SWFData_$Impl_$.writeRGBA(data,this.startColor);
			format_swf__$SWFData_SWFData_$Impl_$.writeRGBA(data,this.endColor);
			break;
		case 16:case 18:case 19:
			format_swf__$SWFData_SWFData_$Impl_$.writeMATRIX(data,this.startGradientMatrix);
			format_swf__$SWFData_SWFData_$Impl_$.writeMATRIX(data,this.endGradientMatrix);
			if(this.type == 19) {
				format_swf__$SWFData_SWFData_$Impl_$.writeMORPHFOCALGRADIENT(data,js_Boot.__cast(this.gradient , format_swf_data_SWFMorphFocalGradient),level);
			} else {
				format_swf__$SWFData_SWFData_$Impl_$.writeMORPHGRADIENT(data,this.gradient,level);
			}
			break;
		case 64:case 65:case 66:case 67:
			format_swf__$SWFData_SWFData_$Impl_$.writeUI16(data,this.bitmapId);
			format_swf__$SWFData_SWFData_$Impl_$.writeMATRIX(data,this.startBitmapMatrix);
			format_swf__$SWFData_SWFData_$Impl_$.writeMATRIX(data,this.endBitmapMatrix);
			break;
		default:
			throw new js__$Boot_HaxeError(new openfl_errors_Error("Unknown fill style type: 0x" + StringTools.hex(this.type)));
		}
	}
	,getMorphedFillStyle: function(ratio) {
		if(ratio == null) {
			ratio = 0;
		}
		var fillStyle = new format_swf_data_SWFFillStyle();
		fillStyle.type = this.type;
		switch(this.type) {
		case 0:
			fillStyle.rgb = format_swf_utils_ColorUtils.interpolate(this.startColor,this.endColor,ratio);
			break;
		case 16:case 18:
			fillStyle.gradientMatrix = format_swf_utils_MatrixUtils.interpolate(this.startGradientMatrix,this.endGradientMatrix,ratio);
			fillStyle.gradient = this.gradient.getMorphedGradient(ratio);
			break;
		case 64:case 65:case 66:case 67:
			fillStyle.bitmapId = this.bitmapId;
			fillStyle.bitmapMatrix = format_swf_utils_MatrixUtils.interpolate(this.startBitmapMatrix,this.endBitmapMatrix,ratio);
			break;
		}
		return fillStyle;
	}
	,toString: function() {
		var str = "[SWFMorphFillStyle] Type: " + StringTools.hex(this.type);
		switch(this.type) {
		case 0:
			str += " (solid), StartColor: " + format_swf_utils_ColorUtils.rgbaToString(this.startColor) + ", EndColor: " + format_swf_utils_ColorUtils.rgbaToString(this.endColor);
			break;
		case 16:
			str += " (linear gradient), Gradient: " + Std.string(this.gradient);
			break;
		case 18:
			str += " (radial gradient), Gradient: " + Std.string(this.gradient);
			break;
		case 19:
			str += " (focal radial gradient), Gradient: " + Std.string(this.gradient);
			break;
		case 64:
			str += " (repeating bitmap), BitmapID: " + this.bitmapId;
			break;
		case 65:
			str += " (clipped bitmap), BitmapID: " + this.bitmapId;
			break;
		case 66:
			str += " (non-smoothed repeating bitmap), BitmapID: " + this.bitmapId;
			break;
		case 67:
			str += " (non-smoothed clipped bitmap), BitmapID: " + this.bitmapId;
			break;
		}
		return str;
	}
	,__class__: format_swf_data_SWFMorphFillStyle
};
var format_swf_data_SWFMorphGradient = function(data,level) {
	if(level == null) {
		level = 1;
	}
	this.records = [];
	if(data != null) {
		this.parse(data,level);
	}
};
$hxClasses["format.swf.data.SWFMorphGradient"] = format_swf_data_SWFMorphGradient;
format_swf_data_SWFMorphGradient.__name__ = ["format","swf","data","SWFMorphGradient"];
format_swf_data_SWFMorphGradient.prototype = {
	spreadMode: null
	,interpolationMode: null
	,startFocalPoint: null
	,endFocalPoint: null
	,records: null
	,parse: function(data,level) {
		data.resetBitsPending();
		this.spreadMode = format_swf__$SWFData_SWFData_$Impl_$.readUB(data,2);
		this.interpolationMode = format_swf__$SWFData_SWFData_$Impl_$.readUB(data,2);
		var numGradients = format_swf__$SWFData_SWFData_$Impl_$.readUB(data,4);
		var _g1 = 0;
		while(_g1 < numGradients) {
			++_g1;
			this.records.push(format_swf__$SWFData_SWFData_$Impl_$.readMORPHGRADIENTRECORD(data));
		}
	}
	,publish: function(data,level) {
		var numGradients = this.records.length;
		data.resetBitsPending();
		format_swf__$SWFData_SWFData_$Impl_$.writeUB(data,2,this.spreadMode);
		format_swf__$SWFData_SWFData_$Impl_$.writeUB(data,2,this.interpolationMode);
		format_swf__$SWFData_SWFData_$Impl_$.writeUB(data,4,numGradients);
		var _g1 = 0;
		while(_g1 < numGradients) format_swf__$SWFData_SWFData_$Impl_$.writeMORPHGRADIENTRECORD(data,this.records[_g1++]);
	}
	,getMorphedGradient: function(ratio) {
		if(ratio == null) {
			ratio = 0;
		}
		var gradient = new format_swf_data_SWFGradient();
		var _g1 = 0;
		var _g = this.records.length;
		while(_g1 < _g) gradient.records.push(this.records[_g1++].getMorphedGradientRecord(ratio));
		return gradient;
	}
	,toString: function() {
		return "(" + this.records.join(",") + "), spread:" + this.spreadMode + ", interpolation:" + this.interpolationMode;
	}
	,__class__: format_swf_data_SWFMorphGradient
};
var format_swf_data_SWFMorphFocalGradient = function(data,level) {
	if(level == null) {
		level = 1;
	}
	format_swf_data_SWFMorphGradient.call(this,data,level);
};
$hxClasses["format.swf.data.SWFMorphFocalGradient"] = format_swf_data_SWFMorphFocalGradient;
format_swf_data_SWFMorphFocalGradient.__name__ = ["format","swf","data","SWFMorphFocalGradient"];
format_swf_data_SWFMorphFocalGradient.__super__ = format_swf_data_SWFMorphGradient;
format_swf_data_SWFMorphFocalGradient.prototype = $extend(format_swf_data_SWFMorphGradient.prototype,{
	parse: function(data,level) {
		format_swf_data_SWFMorphGradient.prototype.parse.call(this,data,level);
		this.startFocalPoint = format_swf__$SWFData_SWFData_$Impl_$.readFIXED8(data);
		this.endFocalPoint = format_swf__$SWFData_SWFData_$Impl_$.readFIXED8(data);
	}
	,publish: function(data,level) {
		format_swf_data_SWFMorphGradient.prototype.publish.call(this,data,level);
		format_swf__$SWFData_SWFData_$Impl_$.writeFIXED8(data,this.startFocalPoint);
		format_swf__$SWFData_SWFData_$Impl_$.writeFIXED8(data,this.endFocalPoint);
	}
	,getMorphedGradient: function(ratio) {
		if(ratio == null) {
			ratio = 0;
		}
		var gradient = new format_swf_data_SWFGradient();
		var _g1 = 0;
		var _g = this.records.length;
		while(_g1 < _g) gradient.records.push(this.records[_g1++].getMorphedGradientRecord(ratio));
		return gradient;
	}
	,toString: function() {
		return "FocalPoint: " + this.startFocalPoint + "," + this.endFocalPoint + " (" + this.records.join(",") + ")";
	}
	,__class__: format_swf_data_SWFMorphFocalGradient
});
var format_swf_data_SWFMorphGradientRecord = function(data) {
	if(data != null) {
		this.parse(data);
	}
};
$hxClasses["format.swf.data.SWFMorphGradientRecord"] = format_swf_data_SWFMorphGradientRecord;
format_swf_data_SWFMorphGradientRecord.__name__ = ["format","swf","data","SWFMorphGradientRecord"];
format_swf_data_SWFMorphGradientRecord.prototype = {
	startRatio: null
	,startColor: null
	,endRatio: null
	,endColor: null
	,parse: function(data) {
		this.startRatio = format_swf__$SWFData_SWFData_$Impl_$.readUI8(data);
		this.startColor = format_swf__$SWFData_SWFData_$Impl_$.readRGBA(data);
		this.endRatio = format_swf__$SWFData_SWFData_$Impl_$.readUI8(data);
		this.endColor = format_swf__$SWFData_SWFData_$Impl_$.readRGBA(data);
	}
	,publish: function(data) {
		format_swf__$SWFData_SWFData_$Impl_$.writeUI8(data,this.startRatio);
		format_swf__$SWFData_SWFData_$Impl_$.writeRGBA(data,this.startColor);
		format_swf__$SWFData_SWFData_$Impl_$.writeUI8(data,this.endRatio);
		format_swf__$SWFData_SWFData_$Impl_$.writeRGBA(data,this.endColor);
	}
	,getMorphedGradientRecord: function(ratio) {
		if(ratio == null) {
			ratio = 0;
		}
		var gradientRecord = new format_swf_data_SWFGradientRecord();
		gradientRecord.color = format_swf_utils_ColorUtils.interpolate(this.startColor,this.endColor,ratio);
		gradientRecord.ratio = this.startRatio + (this.endRatio - this.startRatio) * ratio | 0;
		return gradientRecord;
	}
	,toString: function() {
		return "[" + this.startRatio + "," + format_swf_utils_ColorUtils.rgbaToString(this.startColor) + "," + this.endRatio + "," + format_swf_utils_ColorUtils.rgbaToString(this.endColor) + "]";
	}
	,__class__: format_swf_data_SWFMorphGradientRecord
};
var format_swf_data_SWFMorphLineStyle = function(data,level) {
	if(level == null) {
		level = 1;
	}
	this.startCapsStyle = 0;
	this.endCapsStyle = 0;
	this.jointStyle = 0;
	this.miterLimitFactor = 3;
	if(data != null) {
		this.parse(data,level);
	}
};
$hxClasses["format.swf.data.SWFMorphLineStyle"] = format_swf_data_SWFMorphLineStyle;
format_swf_data_SWFMorphLineStyle.__name__ = ["format","swf","data","SWFMorphLineStyle"];
format_swf_data_SWFMorphLineStyle.prototype = {
	startWidth: null
	,endWidth: null
	,startColor: null
	,endColor: null
	,startCapsStyle: null
	,endCapsStyle: null
	,jointStyle: null
	,hasFillFlag: null
	,noHScaleFlag: null
	,noVScaleFlag: null
	,pixelHintingFlag: null
	,noClose: null
	,miterLimitFactor: null
	,fillType: null
	,parse: function(data,level) {
		if(level == null) {
			level = 1;
		}
		this.startWidth = format_swf__$SWFData_SWFData_$Impl_$.readUI16(data);
		this.endWidth = format_swf__$SWFData_SWFData_$Impl_$.readUI16(data);
		this.startColor = format_swf__$SWFData_SWFData_$Impl_$.readRGBA(data);
		this.endColor = format_swf__$SWFData_SWFData_$Impl_$.readRGBA(data);
	}
	,publish: function(data,level) {
		if(level == null) {
			level = 1;
		}
		format_swf__$SWFData_SWFData_$Impl_$.writeUI16(data,this.startWidth);
		format_swf__$SWFData_SWFData_$Impl_$.writeUI16(data,this.endWidth);
		format_swf__$SWFData_SWFData_$Impl_$.writeRGBA(data,this.startColor);
		format_swf__$SWFData_SWFData_$Impl_$.writeRGBA(data,this.endColor);
	}
	,getMorphedLineStyle: function(ratio) {
		if(ratio == null) {
			ratio = 0;
		}
		var lineStyle = new format_swf_data_SWFLineStyle();
		if(this.hasFillFlag) {
			lineStyle.fillType = this.fillType.getMorphedFillStyle(ratio);
		} else {
			lineStyle.color = format_swf_utils_ColorUtils.interpolate(this.startColor,this.endColor,ratio);
			lineStyle.width = this.startWidth + (this.endWidth - this.startWidth) * ratio | 0;
		}
		lineStyle.startCapsStyle = this.startCapsStyle;
		lineStyle.endCapsStyle = this.endCapsStyle;
		lineStyle.jointStyle = this.jointStyle;
		lineStyle.hasFillFlag = this.hasFillFlag;
		lineStyle.noHScaleFlag = this.noHScaleFlag;
		lineStyle.noVScaleFlag = this.noVScaleFlag;
		lineStyle.pixelHintingFlag = this.pixelHintingFlag;
		lineStyle.noClose = this.noClose;
		lineStyle.miterLimitFactor = this.miterLimitFactor;
		return lineStyle;
	}
	,toString: function() {
		return "[SWFMorphLineStyle] " + "StartWidth: " + this.startWidth + ", " + "EndWidth: " + this.endWidth + ", " + "StartColor: " + format_swf_utils_ColorUtils.rgbaToString(this.startColor) + ", " + "EndColor: " + format_swf_utils_ColorUtils.rgbaToString(this.endColor);
	}
	,__class__: format_swf_data_SWFMorphLineStyle
};
var format_swf_data_SWFMorphLineStyle2 = function(data,level) {
	if(level == null) {
		level = 1;
	}
	format_swf_data_SWFMorphLineStyle.call(this,data,level);
};
$hxClasses["format.swf.data.SWFMorphLineStyle2"] = format_swf_data_SWFMorphLineStyle2;
format_swf_data_SWFMorphLineStyle2.__name__ = ["format","swf","data","SWFMorphLineStyle2"];
format_swf_data_SWFMorphLineStyle2.__super__ = format_swf_data_SWFMorphLineStyle;
format_swf_data_SWFMorphLineStyle2.prototype = $extend(format_swf_data_SWFMorphLineStyle.prototype,{
	parse: function(data,level) {
		if(level == null) {
			level = 1;
		}
		this.startWidth = format_swf__$SWFData_SWFData_$Impl_$.readUI16(data);
		this.endWidth = format_swf__$SWFData_SWFData_$Impl_$.readUI16(data);
		this.startCapsStyle = format_swf__$SWFData_SWFData_$Impl_$.readUB(data,2);
		this.jointStyle = format_swf__$SWFData_SWFData_$Impl_$.readUB(data,2);
		this.hasFillFlag = format_swf__$SWFData_SWFData_$Impl_$.readUB(data,1) == 1;
		this.noHScaleFlag = format_swf__$SWFData_SWFData_$Impl_$.readUB(data,1) == 1;
		this.noVScaleFlag = format_swf__$SWFData_SWFData_$Impl_$.readUB(data,1) == 1;
		this.pixelHintingFlag = format_swf__$SWFData_SWFData_$Impl_$.readUB(data,1) == 1;
		format_swf__$SWFData_SWFData_$Impl_$.readUB(data,5);
		this.noClose = format_swf__$SWFData_SWFData_$Impl_$.readUB(data,1) == 1;
		this.endCapsStyle = format_swf__$SWFData_SWFData_$Impl_$.readUB(data,2);
		if(this.jointStyle == 2) {
			this.miterLimitFactor = format_swf__$SWFData_SWFData_$Impl_$.readFIXED8(data);
		}
		if(this.hasFillFlag) {
			this.fillType = format_swf__$SWFData_SWFData_$Impl_$.readMORPHFILLSTYLE(data,level);
		} else {
			this.startColor = format_swf__$SWFData_SWFData_$Impl_$.readRGBA(data);
			this.endColor = format_swf__$SWFData_SWFData_$Impl_$.readRGBA(data);
		}
	}
	,publish: function(data,level) {
		if(level == null) {
			level = 1;
		}
		format_swf__$SWFData_SWFData_$Impl_$.writeUI16(data,this.startWidth);
		format_swf__$SWFData_SWFData_$Impl_$.writeUI16(data,this.endWidth);
		format_swf__$SWFData_SWFData_$Impl_$.writeUB(data,2,this.startCapsStyle);
		format_swf__$SWFData_SWFData_$Impl_$.writeUB(data,2,this.jointStyle);
		format_swf__$SWFData_SWFData_$Impl_$.writeUB(data,1,this.hasFillFlag ? 1 : 0);
		format_swf__$SWFData_SWFData_$Impl_$.writeUB(data,1,this.noHScaleFlag ? 1 : 0);
		format_swf__$SWFData_SWFData_$Impl_$.writeUB(data,1,this.noVScaleFlag ? 1 : 0);
		format_swf__$SWFData_SWFData_$Impl_$.writeUB(data,1,this.pixelHintingFlag ? 1 : 0);
		format_swf__$SWFData_SWFData_$Impl_$.writeUB(data,5,0);
		format_swf__$SWFData_SWFData_$Impl_$.writeUB(data,1,this.noClose ? 1 : 0);
		format_swf__$SWFData_SWFData_$Impl_$.writeUB(data,2,this.endCapsStyle);
		if(this.jointStyle == 2) {
			format_swf__$SWFData_SWFData_$Impl_$.writeFIXED8(data,this.miterLimitFactor);
		}
		if(this.hasFillFlag) {
			format_swf__$SWFData_SWFData_$Impl_$.writeMORPHFILLSTYLE(data,this.fillType,level);
		} else {
			format_swf__$SWFData_SWFData_$Impl_$.writeRGBA(data,this.startColor);
			format_swf__$SWFData_SWFData_$Impl_$.writeRGBA(data,this.endColor);
		}
	}
	,toString: function() {
		var str = "[SWFMorphLineStyle2] " + "StartWidth: " + this.startWidth + ", " + "EndWidth: " + this.endWidth + ", " + "StartCaps: " + format_swf_data_consts_LineCapsStyle.toString(this.startCapsStyle) + ", " + "EndCaps: " + format_swf_data_consts_LineCapsStyle.toString(this.endCapsStyle) + ", " + "Joint: " + format_swf_data_consts_LineJointStyle.toString(this.jointStyle);
		if(this.hasFillFlag) {
			str += ", Fill: " + this.fillType.toString();
		} else {
			str += ", StartColor: " + format_swf_utils_ColorUtils.rgbaToString(this.startColor);
			str += ", EndColor: " + format_swf_utils_ColorUtils.rgbaToString(this.endColor);
		}
		return str;
	}
	,__class__: format_swf_data_SWFMorphLineStyle2
});
var format_swf_data_SWFRawTag = function(data) {
	if(data != null) {
		this.parse(data);
	}
};
$hxClasses["format.swf.data.SWFRawTag"] = format_swf_data_SWFRawTag;
format_swf_data_SWFRawTag.__name__ = ["format","swf","data","SWFRawTag"];
format_swf_data_SWFRawTag.prototype = {
	header: null
	,bytes: null
	,parse: function(data) {
		var pos = data.position;
		this.header = format_swf__$SWFData_SWFData_$Impl_$.readTagHeader(data);
		this.bytes = format_swf__$SWFData_SWFData_$Impl_$._new();
		var posContent = data.position;
		data.position = pos;
		data.readBytes(openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytes(this.bytes),0,this.header.get_tagLength());
		data.position = posContent;
	}
	,publish: function(data) {
		data.writeBytes(openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytes(this.bytes));
	}
	,__class__: format_swf_data_SWFRawTag
};
var format_swf_data_SWFRecordHeader = function(type,contentLength,headerLength) {
	this.type = type;
	this.contentLength = contentLength;
	this.headerLength = headerLength;
};
$hxClasses["format.swf.data.SWFRecordHeader"] = format_swf_data_SWFRecordHeader;
format_swf_data_SWFRecordHeader.__name__ = ["format","swf","data","SWFRecordHeader"];
format_swf_data_SWFRecordHeader.prototype = {
	type: null
	,contentLength: null
	,headerLength: null
	,tagLength: null
	,get_tagLength: function() {
		return this.headerLength + this.contentLength;
	}
	,toString: function() {
		return "[SWFRecordHeader] type: " + this.type + ", headerLength: " + this.headerLength + ", contentlength: " + this.contentLength;
	}
	,__class__: format_swf_data_SWFRecordHeader
	,__properties__: {get_tagLength:"get_tagLength"}
};
var format_swf_data_SWFRectangle = function(data) {
	this.xmax = 11000;
	this.ymax = 8000;
	this._rectangle = new openfl_geom_Rectangle();
	if(data != null) {
		this.parse(data);
	}
};
$hxClasses["format.swf.data.SWFRectangle"] = format_swf_data_SWFRectangle;
format_swf_data_SWFRectangle.__name__ = ["format","swf","data","SWFRectangle"];
format_swf_data_SWFRectangle.prototype = {
	xmin: null
	,xmax: null
	,ymin: null
	,ymax: null
	,rect: null
	,_rectangle: null
	,parse: function(data) {
		data.resetBitsPending();
		var bits = format_swf__$SWFData_SWFData_$Impl_$.readUB(data,5);
		this.xmin = format_swf__$SWFData_SWFData_$Impl_$.readSB(data,bits);
		this.xmax = format_swf__$SWFData_SWFData_$Impl_$.readSB(data,bits);
		this.ymin = format_swf__$SWFData_SWFData_$Impl_$.readSB(data,bits);
		this.ymax = format_swf__$SWFData_SWFData_$Impl_$.readSB(data,bits);
	}
	,publish: function(data) {
		var numBits = data.calculateMaxBits(true,[this.xmin,this.xmax,this.ymin,this.ymax]);
		data.resetBitsPending();
		format_swf__$SWFData_SWFData_$Impl_$.writeUB(data,5,numBits);
		format_swf__$SWFData_SWFData_$Impl_$.writeSB(data,numBits,this.xmin);
		format_swf__$SWFData_SWFData_$Impl_$.writeSB(data,numBits,this.xmax);
		format_swf__$SWFData_SWFData_$Impl_$.writeSB(data,numBits,this.ymin);
		format_swf__$SWFData_SWFData_$Impl_$.writeSB(data,numBits,this.ymax);
	}
	,clone: function() {
		var rect = new format_swf_data_SWFRectangle();
		rect.xmin = this.xmin;
		rect.xmax = this.xmax;
		rect.ymin = this.ymin;
		rect.ymax = this.ymax;
		return rect;
	}
	,get_rect: function() {
		this._rectangle.set_left(format_swf_utils_NumberUtils.roundPixels20(this.xmin / 20));
		this._rectangle.set_right(format_swf_utils_NumberUtils.roundPixels20(this.xmax / 20));
		this._rectangle.set_top(format_swf_utils_NumberUtils.roundPixels20(this.ymin / 20));
		this._rectangle.set_bottom(format_swf_utils_NumberUtils.roundPixels20(this.ymax / 20));
		return this._rectangle;
	}
	,toString: function() {
		return "(" + this.xmin + "," + this.xmax + "," + this.ymin + "," + this.ymax + ")";
	}
	,toStringSize: function() {
		return "(" + (this.xmax / 20 - this.xmin / 20) + "," + (this.ymax / 20 - this.ymin / 20) + ")";
	}
	,__class__: format_swf_data_SWFRectangle
	,__properties__: {get_rect:"get_rect"}
};
var format_swf_data_SWFRegisterParam = function(data) {
	if(data != null) {
		this.parse(data);
	}
};
$hxClasses["format.swf.data.SWFRegisterParam"] = format_swf_data_SWFRegisterParam;
format_swf_data_SWFRegisterParam.__name__ = ["format","swf","data","SWFRegisterParam"];
format_swf_data_SWFRegisterParam.prototype = {
	register: null
	,name: null
	,parse: function(data) {
		this.register = format_swf__$SWFData_SWFData_$Impl_$.readUI8(data);
		this.name = format_swf__$SWFData_SWFData_$Impl_$.readSTRING(data);
	}
	,publish: function(data) {
		format_swf__$SWFData_SWFData_$Impl_$.writeUI8(data,this.register);
		format_swf__$SWFData_SWFData_$Impl_$.writeSTRING(data,this.name);
	}
	,toString: function() {
		return this.register + ":" + this.name;
	}
	,__class__: format_swf_data_SWFRegisterParam
};
var format_swf_data_SWFScene = function(offset,name) {
	this.offset = offset;
	this.name = name;
};
$hxClasses["format.swf.data.SWFScene"] = format_swf_data_SWFScene;
format_swf_data_SWFScene.__name__ = ["format","swf","data","SWFScene"];
format_swf_data_SWFScene.prototype = {
	offset: null
	,name: null
	,toString: function() {
		return "Frame: " + this.offset + ", Name: " + this.name;
	}
	,__class__: format_swf_data_SWFScene
};
var format_swf_data_SWFShape = function(data,level,unitDivisor) {
	if(unitDivisor == null) {
		unitDivisor = 20;
	}
	if(level == null) {
		level = 1;
	}
	this.edgeMapsCreated = false;
	this.records = [];
	this.fillStyles = [];
	this.lineStyles = [];
	this.referencePoint = new openfl_geom_Point(0,0);
	this.unitDivisor = unitDivisor;
	if(data != null) {
		this.parse(data,level);
	}
};
$hxClasses["format.swf.data.SWFShape"] = format_swf_data_SWFShape;
format_swf_data_SWFShape.__name__ = ["format","swf","data","SWFShape"];
format_swf_data_SWFShape.prototype = {
	records: null
	,fillStyles: null
	,lineStyles: null
	,referencePoint: null
	,fillEdgeMaps: null
	,lineEdgeMaps: null
	,currentFillEdgeMap: null
	,currentLineEdgeMap: null
	,numGroups: null
	,coordMap: null
	,unitDivisor: null
	,edgeMapsCreated: null
	,getMaxFillStyleIndex: function() {
		var ret = 0;
		var _g1 = 0;
		var _g = this.records.length;
		while(_g1 < _g) {
			var shapeRecord = this.records[_g1++];
			if(shapeRecord.get_type() == 2) {
				var shapeRecordStyleChange = js_Boot.__cast(shapeRecord , format_swf_data_SWFShapeRecordStyleChange);
				if(shapeRecordStyleChange.fillStyle0 > ret) {
					ret = shapeRecordStyleChange.fillStyle0;
				}
				if(shapeRecordStyleChange.fillStyle1 > ret) {
					ret = shapeRecordStyleChange.fillStyle1;
				}
				if(shapeRecordStyleChange.stateNewStyles) {
					break;
				}
			}
		}
		return ret;
	}
	,getMaxLineStyleIndex: function() {
		var ret = 0;
		var _g1 = 0;
		var _g = this.records.length;
		while(_g1 < _g) {
			var shapeRecord = this.records[_g1++];
			if(shapeRecord.get_type() == 2) {
				var shapeRecordStyleChange = js_Boot.__cast(shapeRecord , format_swf_data_SWFShapeRecordStyleChange);
				if(shapeRecordStyleChange.lineStyle > ret) {
					ret = shapeRecordStyleChange.lineStyle;
				}
				if(shapeRecordStyleChange.stateNewStyles) {
					break;
				}
			}
		}
		return ret;
	}
	,parse: function(data,level) {
		if(level == null) {
			level = 1;
		}
		data.resetBitsPending();
		this.readShapeRecords(data,format_swf__$SWFData_SWFData_$Impl_$.readUB(data,4),format_swf__$SWFData_SWFData_$Impl_$.readUB(data,4),level);
		this.determineReferencePoint();
	}
	,publish: function(data,level) {
		if(level == null) {
			level = 1;
		}
		var numFillBits = data.calculateMaxBits(false,[this.getMaxFillStyleIndex()]);
		var numLineBits = data.calculateMaxBits(false,[this.getMaxLineStyleIndex()]);
		data.resetBitsPending();
		format_swf__$SWFData_SWFData_$Impl_$.writeUB(data,4,numFillBits);
		format_swf__$SWFData_SWFData_$Impl_$.writeUB(data,4,numLineBits);
		this.writeShapeRecords(data,numFillBits,numLineBits,level);
	}
	,readShapeRecords: function(data,fillBits,lineBits,level) {
		if(level == null) {
			level = 1;
		}
		var shapeRecord = null;
		while(!js_Boot.__instanceof(shapeRecord,format_swf_data_SWFShapeRecordEnd)) {
			if(format_swf__$SWFData_SWFData_$Impl_$.readUB(data,1) == 1) {
				var straightFlag = format_swf__$SWFData_SWFData_$Impl_$.readUB(data,1) == 1;
				var numBits = format_swf__$SWFData_SWFData_$Impl_$.readUB(data,4) + 2;
				if(straightFlag) {
					shapeRecord = format_swf__$SWFData_SWFData_$Impl_$.readSTRAIGHTEDGERECORD(data,numBits);
				} else {
					shapeRecord = format_swf__$SWFData_SWFData_$Impl_$.readCURVEDEDGERECORD(data,numBits);
				}
			} else {
				var states = format_swf__$SWFData_SWFData_$Impl_$.readUB(data,5);
				if(states == 0) {
					shapeRecord = new format_swf_data_SWFShapeRecordEnd();
				} else {
					var styleChangeRecord = format_swf__$SWFData_SWFData_$Impl_$.readSTYLECHANGERECORD(data,states,fillBits,lineBits,level);
					if(styleChangeRecord.stateNewStyles) {
						fillBits = styleChangeRecord.numFillBits;
						lineBits = styleChangeRecord.numLineBits;
					}
					shapeRecord = styleChangeRecord;
				}
			}
			this.records.push(shapeRecord);
		}
	}
	,writeShapeRecords: function(data,fillBits,lineBits,level) {
		if(level == null) {
			level = 1;
		}
		if(this.records.length == 0 || !js_Boot.__instanceof(this.records[this.records.length - 1],format_swf_data_SWFShapeRecordEnd)) {
			this.records.push(new format_swf_data_SWFShapeRecordEnd());
		}
		var _g1 = 0;
		var _g = this.records.length;
		while(_g1 < _g) {
			var shapeRecord = this.records[_g1++];
			if(shapeRecord.get_isEdgeRecord()) {
				format_swf__$SWFData_SWFData_$Impl_$.writeUB(data,1,1);
				if(shapeRecord.get_type() == 3) {
					format_swf__$SWFData_SWFData_$Impl_$.writeUB(data,1,1);
					format_swf__$SWFData_SWFData_$Impl_$.writeSTRAIGHTEDGERECORD(data,js_Boot.__cast(shapeRecord , format_swf_data_SWFShapeRecordStraightEdge));
				} else {
					format_swf__$SWFData_SWFData_$Impl_$.writeUB(data,1,0);
					format_swf__$SWFData_SWFData_$Impl_$.writeCURVEDEDGERECORD(data,js_Boot.__cast(shapeRecord , format_swf_data_SWFShapeRecordCurvedEdge));
				}
			} else {
				format_swf__$SWFData_SWFData_$Impl_$.writeUB(data,1,0);
				if(shapeRecord.get_type() == 1) {
					format_swf__$SWFData_SWFData_$Impl_$.writeUB(data,5,0);
				} else {
					var states = 0;
					var styleChangeRecord = js_Boot.__cast(shapeRecord , format_swf_data_SWFShapeRecordStyleChange);
					if(styleChangeRecord.stateNewStyles) {
						states = 16;
					}
					if(styleChangeRecord.stateLineStyle) {
						states |= 8;
					}
					if(styleChangeRecord.stateFillStyle1) {
						states |= 4;
					}
					if(styleChangeRecord.stateFillStyle0) {
						states |= 2;
					}
					if(styleChangeRecord.stateMoveTo) {
						states |= 1;
					}
					format_swf__$SWFData_SWFData_$Impl_$.writeUB(data,5,states);
					format_swf__$SWFData_SWFData_$Impl_$.writeSTYLECHANGERECORD(data,styleChangeRecord,fillBits,lineBits,level);
					if(styleChangeRecord.stateNewStyles) {
						fillBits = styleChangeRecord.numFillBits;
						lineBits = styleChangeRecord.numLineBits;
					}
				}
			}
		}
	}
	,determineReferencePoint: function() {
		if(js_Boot.__instanceof(this.records[0],format_swf_data_SWFShapeRecordStyleChange)) {
			var styleChangeRecord = this.records[0];
			if(styleChangeRecord != null && styleChangeRecord.stateMoveTo) {
				this.referencePoint.x = format_swf_utils_NumberUtils.roundPixels400(styleChangeRecord.moveDeltaX / this.unitDivisor);
				this.referencePoint.y = format_swf_utils_NumberUtils.roundPixels400(styleChangeRecord.moveDeltaY / this.unitDivisor);
			}
		}
	}
	,'export': function(handler) {
		this.edgeMapsCreated = false;
		this.createEdgeMaps();
		if(handler == null) {
			handler = new format_swf_exporters_core_DefaultShapeExporter(null);
		}
		handler.beginShape();
		var _g1 = 0;
		var _g = this.numGroups;
		while(_g1 < _g) {
			var i = _g1++;
			this.exportFillPath(handler,i);
			this.exportLinePath(handler,i);
		}
		handler.endShape();
	}
	,createEdgeMaps: function() {
		if(!this.edgeMapsCreated) {
			var xPos = 0;
			var yPos = 0;
			var from;
			var to;
			var control;
			var fillStyleIdxOffset = 0;
			var lineStyleIdxOffset = 0;
			var currentFillStyleIdx0 = 0;
			var currentFillStyleIdx1 = 0;
			var currentLineStyleIdx = 0;
			var subPath = [];
			this.numGroups = 0;
			this.fillEdgeMaps = [];
			this.lineEdgeMaps = [];
			this.currentFillEdgeMap = new haxe_ds_IntMap();
			this.currentLineEdgeMap = new haxe_ds_IntMap();
			var _g1 = 0;
			var _g = this.records.length;
			while(_g1 < _g) {
				var shapeRecord = this.records[_g1++];
				switch(shapeRecord.get_type()) {
				case 1:
					this.processSubPath(subPath,currentLineStyleIdx,currentFillStyleIdx0,currentFillStyleIdx1);
					this.cleanEdgeMap(this.currentFillEdgeMap);
					this.cleanEdgeMap(this.currentLineEdgeMap);
					this.fillEdgeMaps.push(this.currentFillEdgeMap);
					this.lineEdgeMaps.push(this.currentLineEdgeMap);
					this.numGroups++;
					break;
				case 2:
					var styleChangeRecord = js_Boot.__cast(shapeRecord , format_swf_data_SWFShapeRecordStyleChange);
					if(styleChangeRecord.stateLineStyle || styleChangeRecord.stateFillStyle0 || styleChangeRecord.stateFillStyle1) {
						this.processSubPath(subPath,currentLineStyleIdx,currentFillStyleIdx0,currentFillStyleIdx1);
						subPath = [];
					}
					if(styleChangeRecord.stateNewStyles) {
						fillStyleIdxOffset = this.fillStyles.length;
						lineStyleIdxOffset = this.lineStyles.length;
						this.appendFillStyles(this.fillStyles,styleChangeRecord.fillStyles);
						this.appendLineStyles(this.lineStyles,styleChangeRecord.lineStyles);
					}
					if(styleChangeRecord.stateLineStyle && styleChangeRecord.lineStyle == 0 && styleChangeRecord.stateFillStyle0 && styleChangeRecord.fillStyle0 == 0 && styleChangeRecord.stateFillStyle1 && styleChangeRecord.fillStyle1 == 0) {
						this.cleanEdgeMap(this.currentFillEdgeMap);
						this.cleanEdgeMap(this.currentLineEdgeMap);
						this.fillEdgeMaps.push(this.currentFillEdgeMap);
						this.lineEdgeMaps.push(this.currentLineEdgeMap);
						this.currentFillEdgeMap = new haxe_ds_IntMap();
						this.currentLineEdgeMap = new haxe_ds_IntMap();
						currentLineStyleIdx = 0;
						currentFillStyleIdx0 = 0;
						currentFillStyleIdx1 = 0;
						this.numGroups++;
					} else {
						if(styleChangeRecord.stateLineStyle) {
							currentLineStyleIdx = styleChangeRecord.lineStyle;
							if(currentLineStyleIdx > 0) {
								currentLineStyleIdx += lineStyleIdxOffset;
							}
						}
						if(styleChangeRecord.stateFillStyle0) {
							currentFillStyleIdx0 = styleChangeRecord.fillStyle0;
							if(currentFillStyleIdx0 > 0) {
								currentFillStyleIdx0 += fillStyleIdxOffset;
							}
						}
						if(styleChangeRecord.stateFillStyle1) {
							currentFillStyleIdx1 = styleChangeRecord.fillStyle1;
							if(currentFillStyleIdx1 > 0) {
								currentFillStyleIdx1 += fillStyleIdxOffset;
							}
						}
					}
					if(styleChangeRecord.stateMoveTo) {
						xPos = styleChangeRecord.moveDeltaX / this.unitDivisor;
						yPos = styleChangeRecord.moveDeltaY / this.unitDivisor;
					}
					break;
				case 3:
					var straightEdgeRecord = js_Boot.__cast(shapeRecord , format_swf_data_SWFShapeRecordStraightEdge);
					from = new openfl_geom_Point(format_swf_utils_NumberUtils.roundPixels400(xPos),format_swf_utils_NumberUtils.roundPixels400(yPos));
					if(straightEdgeRecord.generalLineFlag) {
						xPos += straightEdgeRecord.deltaX / this.unitDivisor;
						yPos += straightEdgeRecord.deltaY / this.unitDivisor;
					} else if(straightEdgeRecord.vertLineFlag) {
						yPos += straightEdgeRecord.deltaY / this.unitDivisor;
					} else {
						xPos += straightEdgeRecord.deltaX / this.unitDivisor;
					}
					to = new openfl_geom_Point(format_swf_utils_NumberUtils.roundPixels400(xPos),format_swf_utils_NumberUtils.roundPixels400(yPos));
					subPath.push(new format_swf_data_etc_StraightEdge(from,to,currentLineStyleIdx,currentFillStyleIdx1));
					break;
				case 4:
					var curvedEdgeRecord = js_Boot.__cast(shapeRecord , format_swf_data_SWFShapeRecordCurvedEdge);
					from = new openfl_geom_Point(format_swf_utils_NumberUtils.roundPixels400(xPos),format_swf_utils_NumberUtils.roundPixels400(yPos));
					var xPosControl = xPos + curvedEdgeRecord.controlDeltaX / this.unitDivisor;
					var yPosControl = yPos + curvedEdgeRecord.controlDeltaY / this.unitDivisor;
					xPos = xPosControl + curvedEdgeRecord.anchorDeltaX / this.unitDivisor;
					yPos = yPosControl + curvedEdgeRecord.anchorDeltaY / this.unitDivisor;
					control = new openfl_geom_Point(xPosControl,yPosControl);
					to = new openfl_geom_Point(format_swf_utils_NumberUtils.roundPixels400(xPos),format_swf_utils_NumberUtils.roundPixels400(yPos));
					subPath.push(new format_swf_data_etc_CurvedEdge(from,control,to,currentLineStyleIdx,currentFillStyleIdx1));
					break;
				}
			}
			this.edgeMapsCreated = true;
		}
	}
	,processSubPath: function(subPath,lineStyleIdx,fillStyleIdx0,fillStyleIdx1) {
		var path;
		if(fillStyleIdx0 != 0) {
			path = this.currentFillEdgeMap.h[fillStyleIdx0];
			if(path == null) {
				var this1 = this.currentFillEdgeMap;
				var value = [];
				this1.h[fillStyleIdx0] = value;
				path = this.currentFillEdgeMap.h[fillStyleIdx0];
			}
			var j = subPath.length - 1;
			while(j >= 0) {
				path.push(subPath[j].reverseWithNewFillStyle(fillStyleIdx0));
				--j;
			}
		}
		if(fillStyleIdx1 != 0) {
			path = this.currentFillEdgeMap.h[fillStyleIdx1];
			if(path == null) {
				var this2 = this.currentFillEdgeMap;
				var value1 = [];
				this2.h[fillStyleIdx1] = value1;
				path = this.currentFillEdgeMap.h[fillStyleIdx1];
			}
			this.appendEdges(path,subPath);
		}
		if(lineStyleIdx != 0) {
			path = this.currentLineEdgeMap.h[lineStyleIdx];
			if(path == null) {
				var this3 = this.currentLineEdgeMap;
				var value2 = [];
				this3.h[lineStyleIdx] = value2;
				path = this.currentLineEdgeMap.h[lineStyleIdx];
			}
			this.appendEdges(path,subPath);
		}
	}
	,exportFillPath: function(handler,groupIndex) {
		var path = this.createPathFromEdgeMap(this.fillEdgeMaps[groupIndex]);
		var pos = new openfl_geom_Point(format_swf__$SWFData_SWFData_$Impl_$.MAX_FLOAT_VALUE,format_swf__$SWFData_SWFData_$Impl_$.MAX_FLOAT_VALUE);
		var fillStyleIdx = format_swf__$SWFData_SWFData_$Impl_$.MAX_FLOAT_VALUE | 0;
		if(path.length > 0) {
			handler.beginFills();
			var _g1 = 0;
			var _g = path.length;
			while(_g1 < _g) {
				var e = path[_g1++];
				if(fillStyleIdx != e.fillStyleIdx) {
					if(fillStyleIdx != format_swf__$SWFData_SWFData_$Impl_$.MAX_FLOAT_VALUE) {
						handler.endFill();
					}
					fillStyleIdx = e.fillStyleIdx;
					pos = new openfl_geom_Point(format_swf__$SWFData_SWFData_$Impl_$.MAX_FLOAT_VALUE,format_swf__$SWFData_SWFData_$Impl_$.MAX_FLOAT_VALUE);
					try {
						var matrix;
						var fillStyle = this.fillStyles[fillStyleIdx - 1];
						if(fillStyle != null) {
							switch(fillStyle.type) {
							case 0:
								handler.beginFill(format_swf_utils_ColorUtils.rgb(fillStyle.rgb),format_swf_utils_ColorUtils.alpha(fillStyle.rgb));
								break;
							case 16:case 18:case 19:
								var colors = [];
								var alphas = [];
								var ratios = [];
								var gradientRecord;
								matrix = fillStyle.gradientMatrix.get_matrix().clone();
								matrix.tx /= 20;
								matrix.ty /= 20;
								var _g3 = 0;
								var _g2 = fillStyle.gradient.records.length;
								while(_g3 < _g2) {
									gradientRecord = fillStyle.gradient.records[_g3++];
									colors.push(format_swf_utils_ColorUtils.rgb(gradientRecord.color));
									alphas.push(format_swf_utils_ColorUtils.alpha(gradientRecord.color));
									ratios.push(gradientRecord.ratio);
								}
								handler.beginGradientFill(fillStyle.type == 16 ? 0 : 1,colors,alphas,ratios,matrix,format_swf_data_consts_GradientSpreadMode.toEnum(fillStyle.gradient.spreadMode),format_swf_data_consts_GradientInterpolationMode.toEnum(fillStyle.gradient.interpolationMode),fillStyle.gradient.focalPoint);
								break;
							case 64:case 65:case 66:case 67:
								var m = fillStyle.bitmapMatrix;
								matrix = new openfl_geom_Matrix(m.scaleX / 20,m.rotateSkew0 / 20,m.rotateSkew1 / 20,m.scaleY / 20,m.translateX / 20,m.translateY / 20);
								handler.beginBitmapFill(fillStyle.bitmapId,matrix,fillStyle.type == 64 || fillStyle.type == 66,fillStyle.type == 64 || fillStyle.type == 65);
								break;
							}
						} else {
							handler.beginFill(16777215);
						}
					} catch( e1 ) {
						haxe_CallStack.lastException = e1;
						if (e1 instanceof js__$Boot_HaxeError) e1 = e1.val;
						if( js_Boot.__instanceof(e1,openfl_errors_Error) ) {
							handler.beginFill(0);
						} else throw(e1);
					}
				}
				if(!pos.equals(e.from)) {
					handler.moveTo(e.from.x,e.from.y);
				}
				if(js_Boot.__instanceof(e,format_swf_data_etc_CurvedEdge)) {
					var c = e;
					handler.curveTo(c.control.x,c.control.y,c.to.x,c.to.y);
				} else {
					handler.lineTo(e.to.x,e.to.y);
				}
				pos = e.to;
			}
			if(fillStyleIdx != format_swf__$SWFData_SWFData_$Impl_$.MAX_FLOAT_VALUE) {
				handler.endFill();
			}
			handler.endFills();
		}
	}
	,exportLinePath: function(handler,groupIndex) {
		var path = this.createPathFromEdgeMap(this.lineEdgeMaps[groupIndex]);
		var pos = new openfl_geom_Point(format_swf__$SWFData_SWFData_$Impl_$.MAX_FLOAT_VALUE,format_swf__$SWFData_SWFData_$Impl_$.MAX_FLOAT_VALUE);
		var lineStyleIdx = format_swf__$SWFData_SWFData_$Impl_$.MAX_FLOAT_VALUE | 0;
		var lineStyle;
		if(path.length > 0) {
			handler.beginLines();
			var _g1 = 0;
			var _g = path.length;
			while(_g1 < _g) {
				var e = path[_g1++];
				if(lineStyleIdx != e.lineStyleIdx) {
					lineStyleIdx = e.lineStyleIdx;
					pos = new openfl_geom_Point(format_swf__$SWFData_SWFData_$Impl_$.MAX_FLOAT_VALUE,format_swf__$SWFData_SWFData_$Impl_$.MAX_FLOAT_VALUE);
					try {
						lineStyle = this.lineStyles[lineStyleIdx - 1];
					} catch( e1 ) {
						haxe_CallStack.lastException = e1;
						if (e1 instanceof js__$Boot_HaxeError) e1 = e1.val;
						if( js_Boot.__instanceof(e1,openfl_errors_Error) ) {
							lineStyle = null;
						} else throw(e1);
					}
					if(lineStyle != null) {
						var scaleMode = 2;
						if(lineStyle.noHScaleFlag && lineStyle.noVScaleFlag) {
							scaleMode = 1;
						} else if(lineStyle.noHScaleFlag) {
							scaleMode = 0;
						} else if(lineStyle.noVScaleFlag) {
							scaleMode = 3;
						}
						handler.lineStyle(lineStyle.width / 20,format_swf_utils_ColorUtils.rgb(lineStyle.color),format_swf_utils_ColorUtils.alpha(lineStyle.color),lineStyle.pixelHintingFlag,scaleMode,format_swf_data_consts_LineCapsStyle.toEnum(lineStyle.startCapsStyle),format_swf_data_consts_LineCapsStyle.toEnum(lineStyle.endCapsStyle),format_swf_data_consts_LineJointStyle.toEnum(lineStyle.jointStyle),lineStyle.miterLimitFactor);
						if(lineStyle.hasFillFlag) {
							var fillStyle = lineStyle.fillType;
							switch(fillStyle.type) {
							case 16:case 18:case 19:
								var colors = [];
								var alphas = [];
								var ratios = [];
								var gradientRecord;
								var matrix = fillStyle.gradientMatrix.get_matrix().clone();
								matrix.tx /= 20;
								matrix.ty /= 20;
								var _g3 = 0;
								var _g2 = fillStyle.gradient.records.length;
								while(_g3 < _g2) {
									gradientRecord = fillStyle.gradient.records[_g3++];
									colors.push(format_swf_utils_ColorUtils.rgb(gradientRecord.color));
									alphas.push(format_swf_utils_ColorUtils.alpha(gradientRecord.color));
									ratios.push(gradientRecord.ratio);
								}
								handler.lineGradientStyle(fillStyle.type == 16 ? 0 : 1,colors,alphas,ratios,matrix,format_swf_data_consts_GradientSpreadMode.toEnum(fillStyle.gradient.spreadMode),format_swf_data_consts_GradientInterpolationMode.toEnum(fillStyle.gradient.interpolationMode),fillStyle.gradient.focalPoint);
								break;
							}
						}
					} else {
						handler.lineStyle(0);
					}
				}
				if(!e.from.equals(pos)) {
					handler.moveTo(e.from.x,e.from.y);
				}
				if(js_Boot.__instanceof(e,format_swf_data_etc_CurvedEdge)) {
					var c = e;
					handler.curveTo(c.control.x,c.control.y,c.to.x,c.to.y);
				} else {
					handler.lineTo(e.to.x,e.to.y);
				}
				pos = e.to;
			}
			handler.endLines();
		}
	}
	,createPathFromEdgeMap: function(edgeMap) {
		var newPath = [];
		var styleIdxArray = [];
		var styleIdx = edgeMap.keys();
		while(styleIdx.hasNext()) styleIdxArray.push(styleIdx.next() | 0);
		styleIdxArray.sort(function(a,b) {
			return a - b;
		});
		var _g1 = 0;
		var _g = styleIdxArray.length;
		while(_g1 < _g) this.appendEdges(newPath,edgeMap.h[styleIdxArray[_g1++]]);
		return newPath;
	}
	,cleanEdgeMap: function(edgeMap) {
		var styleIdx = edgeMap.keys();
		while(styleIdx.hasNext()) {
			var styleIdx1 = styleIdx.next();
			var subPath = edgeMap.h[styleIdx1];
			if(subPath != null && subPath.length > 0) {
				var idx;
				var prevEdge = null;
				var tmpPath = [];
				this.createCoordMap(subPath);
				while(subPath.length > 0) {
					idx = 0;
					while(idx < subPath.length) if(prevEdge == null || prevEdge.to.equals(subPath[idx].from)) {
						var edge = subPath.splice(idx,1)[0];
						tmpPath.push(edge);
						this.removeEdgeFromCoordMap(edge);
						prevEdge = edge;
					} else {
						var edge1 = this.findNextEdgeInCoordMap(prevEdge);
						if(edge1 != null) {
							var _g1 = 0;
							var _g = subPath.length;
							while(_g1 < _g) {
								var i = _g1++;
								if(subPath[i] == edge1) {
									idx = i;
								}
							}
						} else {
							idx = 0;
							prevEdge = null;
						}
					}
				}
				edgeMap.h[styleIdx1] = tmpPath;
			}
		}
	}
	,createCoordMap: function(path) {
		this.coordMap = new haxe_ds_StringMap();
		var _g1 = 0;
		var _g = path.length;
		while(_g1 < _g) {
			var i = _g1++;
			var from = path[i].from;
			var key = from.x + "_" + from.y;
			var _this = this.coordMap;
			var coordMapArray = __map_reserved[key] != null ? _this.getReserved(key) : _this.h[key];
			if(coordMapArray == null) {
				var _this1 = this.coordMap;
				var value = [path[i]];
				if(__map_reserved[key] != null) {
					_this1.setReserved(key,value);
				} else {
					_this1.h[key] = value;
				}
			} else {
				coordMapArray.push(path[i]);
			}
		}
	}
	,removeEdgeFromCoordMap: function(edge) {
		var key = edge.from.x + "_" + edge.from.y;
		var _this = this.coordMap;
		if((__map_reserved[key] != null ? _this.getReserved(key) : _this.h[key]) != null) {
			this.coordMap.remove(key);
		}
	}
	,findNextEdgeInCoordMap: function(edge) {
		var key = edge.to.x + "_" + edge.to.y;
		var _this = this.coordMap;
		var coordMapArray = __map_reserved[key] != null ? _this.getReserved(key) : _this.h[key];
		if(coordMapArray != null && coordMapArray.length > 0) {
			return coordMapArray[0];
		}
		return null;
	}
	,appendFillStyles: function(v1,v2) {
		var _g1 = 0;
		var _g = v2.length;
		while(_g1 < _g) v1.push(v2[_g1++]);
	}
	,appendLineStyles: function(v1,v2) {
		var _g1 = 0;
		var _g = v2.length;
		while(_g1 < _g) v1.push(v2[_g1++]);
	}
	,appendEdges: function(v1,v2) {
		var _g1 = 0;
		var _g = v2.length;
		while(_g1 < _g) v1.push(v2[_g1++]);
	}
	,toString: function(indent) {
		if(indent == null) {
			indent = 0;
		}
		var str = "\n" + format_swf_utils_StringUtils.repeat(indent) + "ShapeRecords:";
		var _g1 = 0;
		var _g = this.records.length;
		while(_g1 < _g) {
			var i = _g1++;
			str += "\n" + format_swf_utils_StringUtils.repeat(indent + 2) + "[" + i + "] " + this.records[i].toString(indent + 2);
		}
		return str;
	}
	,__class__: format_swf_data_SWFShape
};
var format_swf_data_SWFShapeRecord = function(data,level) {
	if(level == null) {
		level = 1;
	}
	if(data != null) {
		this.parse(data,level);
	}
};
$hxClasses["format.swf.data.SWFShapeRecord"] = format_swf_data_SWFShapeRecord;
format_swf_data_SWFShapeRecord.__name__ = ["format","swf","data","SWFShapeRecord"];
format_swf_data_SWFShapeRecord.prototype = {
	type: null
	,isEdgeRecord: null
	,get_type: function() {
		return 0;
	}
	,get_isEdgeRecord: function() {
		if(this.get_type() != 3) {
			return this.get_type() == 4;
		} else {
			return true;
		}
	}
	,parse: function(data,level) {
		if(level == null) {
			level = 1;
		}
	}
	,publish: function(data,level) {
		if(level == null) {
			level = 1;
		}
	}
	,clone: function() {
		return null;
	}
	,toString: function(indent) {
		if(indent == null) {
			indent = 0;
		}
		return "[SWFShapeRecord]";
	}
	,__class__: format_swf_data_SWFShapeRecord
	,__properties__: {get_isEdgeRecord:"get_isEdgeRecord",get_type:"get_type"}
};
var format_swf_data_SWFShapeRecordCurvedEdge = function(data,numBits,level) {
	if(level == null) {
		level = 1;
	}
	if(numBits == null) {
		numBits = 0;
	}
	this.numBits = numBits;
	format_swf_data_SWFShapeRecord.call(this,data,level);
};
$hxClasses["format.swf.data.SWFShapeRecordCurvedEdge"] = format_swf_data_SWFShapeRecordCurvedEdge;
format_swf_data_SWFShapeRecordCurvedEdge.__name__ = ["format","swf","data","SWFShapeRecordCurvedEdge"];
format_swf_data_SWFShapeRecordCurvedEdge.__super__ = format_swf_data_SWFShapeRecord;
format_swf_data_SWFShapeRecordCurvedEdge.prototype = $extend(format_swf_data_SWFShapeRecord.prototype,{
	controlDeltaX: null
	,controlDeltaY: null
	,anchorDeltaX: null
	,anchorDeltaY: null
	,numBits: null
	,parse: function(data,level) {
		if(level == null) {
			level = 1;
		}
		this.controlDeltaX = format_swf__$SWFData_SWFData_$Impl_$.readSB(data,this.numBits);
		this.controlDeltaY = format_swf__$SWFData_SWFData_$Impl_$.readSB(data,this.numBits);
		this.anchorDeltaX = format_swf__$SWFData_SWFData_$Impl_$.readSB(data,this.numBits);
		this.anchorDeltaY = format_swf__$SWFData_SWFData_$Impl_$.readSB(data,this.numBits);
	}
	,publish: function(data,level) {
		if(level == null) {
			level = 1;
		}
		this.numBits = data.calculateMaxBits(true,[this.controlDeltaX,this.controlDeltaY,this.anchorDeltaX,this.anchorDeltaY]);
		if(this.numBits < 2) {
			this.numBits = 2;
		}
		format_swf__$SWFData_SWFData_$Impl_$.writeUB(data,4,this.numBits - 2);
		format_swf__$SWFData_SWFData_$Impl_$.writeSB(data,this.numBits,this.controlDeltaX);
		format_swf__$SWFData_SWFData_$Impl_$.writeSB(data,this.numBits,this.controlDeltaY);
		format_swf__$SWFData_SWFData_$Impl_$.writeSB(data,this.numBits,this.anchorDeltaX);
		format_swf__$SWFData_SWFData_$Impl_$.writeSB(data,this.numBits,this.anchorDeltaY);
	}
	,clone: function() {
		var record = new format_swf_data_SWFShapeRecordCurvedEdge();
		record.anchorDeltaX = this.anchorDeltaX;
		record.anchorDeltaY = this.anchorDeltaY;
		record.controlDeltaX = this.controlDeltaX;
		record.controlDeltaY = this.controlDeltaY;
		record.numBits = this.numBits;
		return record;
	}
	,get_type: function() {
		return 4;
	}
	,toString: function(indent) {
		if(indent == null) {
			indent = 0;
		}
		return "[SWFShapeRecordCurvedEdge] " + "ControlDelta: " + this.controlDeltaX + "," + this.controlDeltaY + ", " + "AnchorDelta: " + this.anchorDeltaX + "," + this.anchorDeltaY;
	}
	,__class__: format_swf_data_SWFShapeRecordCurvedEdge
});
var format_swf_data_SWFShapeRecordEnd = function() {
	format_swf_data_SWFShapeRecord.call(this);
};
$hxClasses["format.swf.data.SWFShapeRecordEnd"] = format_swf_data_SWFShapeRecordEnd;
format_swf_data_SWFShapeRecordEnd.__name__ = ["format","swf","data","SWFShapeRecordEnd"];
format_swf_data_SWFShapeRecordEnd.__super__ = format_swf_data_SWFShapeRecord;
format_swf_data_SWFShapeRecordEnd.prototype = $extend(format_swf_data_SWFShapeRecord.prototype,{
	clone: function() {
		return new format_swf_data_SWFShapeRecordEnd();
	}
	,get_type: function() {
		return 1;
	}
	,toString: function(indent) {
		if(indent == null) {
			indent = 0;
		}
		return "[SWFShapeRecordEnd]";
	}
	,__class__: format_swf_data_SWFShapeRecordEnd
});
var format_swf_data_SWFShapeRecordStraightEdge = function(data,numBits,level) {
	if(level == null) {
		level = 1;
	}
	if(numBits == null) {
		numBits = 0;
	}
	this.numBits = numBits;
	format_swf_data_SWFShapeRecord.call(this,data,level);
};
$hxClasses["format.swf.data.SWFShapeRecordStraightEdge"] = format_swf_data_SWFShapeRecordStraightEdge;
format_swf_data_SWFShapeRecordStraightEdge.__name__ = ["format","swf","data","SWFShapeRecordStraightEdge"];
format_swf_data_SWFShapeRecordStraightEdge.__super__ = format_swf_data_SWFShapeRecord;
format_swf_data_SWFShapeRecordStraightEdge.prototype = $extend(format_swf_data_SWFShapeRecord.prototype,{
	generalLineFlag: null
	,vertLineFlag: null
	,deltaY: null
	,deltaX: null
	,numBits: null
	,parse: function(data,level) {
		if(level == null) {
			level = 1;
		}
		this.generalLineFlag = format_swf__$SWFData_SWFData_$Impl_$.readUB(data,1) == 1;
		this.vertLineFlag = !this.generalLineFlag && format_swf__$SWFData_SWFData_$Impl_$.readUB(data,1) == 1;
		this.deltaX = this.generalLineFlag || !this.vertLineFlag ? format_swf__$SWFData_SWFData_$Impl_$.readSB(data,this.numBits) : 0;
		this.deltaY = this.generalLineFlag || this.vertLineFlag ? format_swf__$SWFData_SWFData_$Impl_$.readSB(data,this.numBits) : 0;
	}
	,publish: function(data,level) {
		if(level == null) {
			level = 1;
		}
		var deltas = [];
		if(this.generalLineFlag || !this.vertLineFlag) {
			deltas.push(this.deltaX);
		}
		if(this.generalLineFlag || this.vertLineFlag) {
			deltas.push(this.deltaY);
		}
		this.numBits = data.calculateMaxBits(true,deltas);
		if(this.numBits < 2) {
			this.numBits = 2;
		}
		format_swf__$SWFData_SWFData_$Impl_$.writeUB(data,4,this.numBits - 2);
		format_swf__$SWFData_SWFData_$Impl_$.writeUB(data,1,this.generalLineFlag ? 1 : 0);
		if(!this.generalLineFlag) {
			format_swf__$SWFData_SWFData_$Impl_$.writeUB(data,1,this.vertLineFlag ? 1 : 0);
		}
		var _g1 = 0;
		var _g = deltas.length;
		while(_g1 < _g) format_swf__$SWFData_SWFData_$Impl_$.writeSB(data,this.numBits,deltas[_g1++] | 0);
	}
	,clone: function() {
		var record = new format_swf_data_SWFShapeRecordStraightEdge();
		record.deltaX = this.deltaX;
		record.deltaY = this.deltaY;
		record.generalLineFlag = this.generalLineFlag;
		record.vertLineFlag = this.vertLineFlag;
		record.numBits = this.numBits;
		return record;
	}
	,get_type: function() {
		return 3;
	}
	,toString: function(indent) {
		if(indent == null) {
			indent = 0;
		}
		var str = "[SWFShapeRecordStraightEdge] ";
		if(this.generalLineFlag) {
			str = "[SWFShapeRecordStraightEdge] " + ("General: " + this.deltaX + "," + this.deltaY);
		} else if(this.vertLineFlag) {
			str = "[SWFShapeRecordStraightEdge] " + ("Vertical: " + this.deltaY);
		} else {
			str = "[SWFShapeRecordStraightEdge] " + ("Horizontal: " + this.deltaX);
		}
		return str;
	}
	,__class__: format_swf_data_SWFShapeRecordStraightEdge
});
var format_swf_data_SWFShapeRecordStyleChange = function(data,states,fillBits,lineBits,level) {
	if(level == null) {
		level = 1;
	}
	if(lineBits == null) {
		lineBits = 0;
	}
	if(fillBits == null) {
		fillBits = 0;
	}
	if(states == null) {
		states = 0;
	}
	this.numLineBits = 0;
	this.numFillBits = 0;
	this.fillStyles = [];
	this.lineStyles = [];
	this.stateNewStyles = (states & 16) != 0;
	this.stateLineStyle = (states & 8) != 0;
	this.stateFillStyle1 = (states & 4) != 0;
	this.stateFillStyle0 = (states & 2) != 0;
	this.stateMoveTo = (states & 1) != 0;
	this.numFillBits = fillBits;
	this.numLineBits = lineBits;
	format_swf_data_SWFShapeRecord.call(this,data,level);
};
$hxClasses["format.swf.data.SWFShapeRecordStyleChange"] = format_swf_data_SWFShapeRecordStyleChange;
format_swf_data_SWFShapeRecordStyleChange.__name__ = ["format","swf","data","SWFShapeRecordStyleChange"];
format_swf_data_SWFShapeRecordStyleChange.__super__ = format_swf_data_SWFShapeRecord;
format_swf_data_SWFShapeRecordStyleChange.prototype = $extend(format_swf_data_SWFShapeRecord.prototype,{
	stateNewStyles: null
	,stateLineStyle: null
	,stateFillStyle1: null
	,stateFillStyle0: null
	,stateMoveTo: null
	,moveDeltaX: null
	,moveDeltaY: null
	,fillStyle0: null
	,fillStyle1: null
	,lineStyle: null
	,numFillBits: null
	,numLineBits: null
	,fillStyles: null
	,lineStyles: null
	,get_type: function() {
		return 2;
	}
	,parse: function(data,level) {
		if(level == null) {
			level = 1;
		}
		if(this.stateMoveTo) {
			var moveBits = format_swf__$SWFData_SWFData_$Impl_$.readUB(data,5);
			this.moveDeltaX = format_swf__$SWFData_SWFData_$Impl_$.readSB(data,moveBits);
			this.moveDeltaY = format_swf__$SWFData_SWFData_$Impl_$.readSB(data,moveBits);
		}
		this.fillStyle0 = this.stateFillStyle0 ? format_swf__$SWFData_SWFData_$Impl_$.readUB(data,this.numFillBits) : 0;
		this.fillStyle1 = this.stateFillStyle1 ? format_swf__$SWFData_SWFData_$Impl_$.readUB(data,this.numFillBits) : 0;
		this.lineStyle = this.stateLineStyle ? format_swf__$SWFData_SWFData_$Impl_$.readUB(data,this.numLineBits) : 0;
		if(this.stateNewStyles) {
			data.resetBitsPending();
			var fillStylesLen = this.readStyleArrayLength(data,level);
			var _g1 = 0;
			while(_g1 < fillStylesLen) {
				++_g1;
				this.fillStyles.push(format_swf__$SWFData_SWFData_$Impl_$.readFILLSTYLE(data,level));
			}
			var lineStylesLen = this.readStyleArrayLength(data,level);
			var _g11 = 0;
			while(_g11 < lineStylesLen) {
				++_g11;
				this.lineStyles.push(level <= 3 ? format_swf__$SWFData_SWFData_$Impl_$.readLINESTYLE(data,level) : format_swf__$SWFData_SWFData_$Impl_$.readLINESTYLE2(data,level));
			}
			data.resetBitsPending();
			this.numFillBits = format_swf__$SWFData_SWFData_$Impl_$.readUB(data,4);
			this.numLineBits = format_swf__$SWFData_SWFData_$Impl_$.readUB(data,4);
		}
	}
	,publish: function(data,level) {
		if(level == null) {
			level = 1;
		}
		if(this.stateMoveTo) {
			var moveBits = data.calculateMaxBits(true,[this.moveDeltaX,this.moveDeltaY]);
			format_swf__$SWFData_SWFData_$Impl_$.writeUB(data,5,moveBits);
			format_swf__$SWFData_SWFData_$Impl_$.writeSB(data,moveBits,this.moveDeltaX);
			format_swf__$SWFData_SWFData_$Impl_$.writeSB(data,moveBits,this.moveDeltaY);
		}
		if(this.stateFillStyle0) {
			format_swf__$SWFData_SWFData_$Impl_$.writeUB(data,this.numFillBits,this.fillStyle0);
		}
		if(this.stateFillStyle1) {
			format_swf__$SWFData_SWFData_$Impl_$.writeUB(data,this.numFillBits,this.fillStyle1);
		}
		if(this.stateLineStyle) {
			format_swf__$SWFData_SWFData_$Impl_$.writeUB(data,this.numLineBits,this.lineStyle);
		}
		if(this.stateNewStyles) {
			data.resetBitsPending();
			var fillStylesLen = this.fillStyles.length;
			this.writeStyleArrayLength(data,fillStylesLen,level);
			var _g1 = 0;
			while(_g1 < fillStylesLen) this.fillStyles[_g1++].publish(data,level);
			var lineStylesLen = this.lineStyles.length;
			this.writeStyleArrayLength(data,lineStylesLen,level);
			var _g11 = 0;
			while(_g11 < lineStylesLen) this.lineStyles[_g11++].publish(data,level);
			this.numFillBits = data.calculateMaxBits(false,[fillStylesLen]);
			this.numLineBits = data.calculateMaxBits(false,[lineStylesLen]);
			data.resetBitsPending();
			format_swf__$SWFData_SWFData_$Impl_$.writeUB(data,4,this.numFillBits);
			format_swf__$SWFData_SWFData_$Impl_$.writeUB(data,4,this.numLineBits);
		}
	}
	,readStyleArrayLength: function(data,level) {
		if(level == null) {
			level = 1;
		}
		var len = format_swf__$SWFData_SWFData_$Impl_$.readUI8(data);
		if(level >= 2 && len == 255) {
			len = format_swf__$SWFData_SWFData_$Impl_$.readUI16(data);
		}
		return len;
	}
	,writeStyleArrayLength: function(data,length,level) {
		if(level == null) {
			level = 1;
		}
		if(level >= 2 && length > 254) {
			format_swf__$SWFData_SWFData_$Impl_$.writeUI8(data,255);
			format_swf__$SWFData_SWFData_$Impl_$.writeUI16(data,length);
		} else {
			format_swf__$SWFData_SWFData_$Impl_$.writeUI8(data,length);
		}
	}
	,clone: function() {
		var record = new format_swf_data_SWFShapeRecordStyleChange();
		record.stateNewStyles = this.stateNewStyles;
		record.stateLineStyle = this.stateLineStyle;
		record.stateFillStyle1 = this.stateFillStyle1;
		record.stateFillStyle0 = this.stateFillStyle0;
		record.stateMoveTo = this.stateMoveTo;
		record.moveDeltaX = this.moveDeltaX;
		record.moveDeltaY = this.moveDeltaY;
		record.fillStyle0 = this.fillStyle0;
		record.fillStyle1 = this.fillStyle1;
		record.lineStyle = this.lineStyle;
		record.numFillBits = this.numFillBits;
		record.numLineBits = this.numLineBits;
		var _g1 = 0;
		var _g = this.fillStyles.length;
		while(_g1 < _g) record.fillStyles.push(this.fillStyles[_g1++].clone());
		var _g11 = 0;
		var _g2 = this.lineStyles.length;
		while(_g11 < _g2) record.lineStyles.push(this.lineStyles[_g11++].clone());
		return record;
	}
	,toString: function(indent) {
		if(indent == null) {
			indent = 0;
		}
		var str = "[SWFShapeRecordStyleChange] ";
		var cmds = [];
		if(this.stateMoveTo) {
			cmds.push("MoveTo: " + this.moveDeltaX + "," + this.moveDeltaY);
		}
		if(this.stateFillStyle0) {
			cmds.push("FillStyle0: " + this.fillStyle0);
		}
		if(this.stateFillStyle1) {
			cmds.push("FillStyle1: " + this.fillStyle1);
		}
		if(this.stateLineStyle) {
			cmds.push("LineStyle: " + this.lineStyle);
		}
		if(cmds.length > 0) {
			str = "[SWFShapeRecordStyleChange] " + cmds.join(", ");
		}
		if(this.stateNewStyles) {
			if(this.fillStyles.length > 0) {
				str += "\n" + format_swf_utils_StringUtils.repeat(indent + 2) + "New FillStyles:";
				var _g1 = 0;
				var _g = this.fillStyles.length;
				while(_g1 < _g) {
					var i = _g1++;
					str += "\n" + format_swf_utils_StringUtils.repeat(indent + 4) + "[" + (i + 1) + "] " + this.fillStyles[i].toString();
				}
			}
			if(this.lineStyles.length > 0) {
				str += "\n" + format_swf_utils_StringUtils.repeat(indent + 2) + "New LineStyles:";
				var _g11 = 0;
				var _g2 = this.lineStyles.length;
				while(_g11 < _g2) {
					var i1 = _g11++;
					str += "\n" + format_swf_utils_StringUtils.repeat(indent + 4) + "[" + (i1 + 1) + "] " + this.lineStyles[i1].toString();
				}
			}
		}
		return str;
	}
	,__class__: format_swf_data_SWFShapeRecordStyleChange
});
var format_swf_data_SWFShapeWithStyle = function(data,level,unitDivisor) {
	if(unitDivisor == null) {
		unitDivisor = 20;
	}
	if(level == null) {
		level = 1;
	}
	this.initialFillStyles = [];
	this.initialLineStyles = [];
	format_swf_data_SWFShape.call(this,data,level,unitDivisor);
};
$hxClasses["format.swf.data.SWFShapeWithStyle"] = format_swf_data_SWFShapeWithStyle;
format_swf_data_SWFShapeWithStyle.__name__ = ["format","swf","data","SWFShapeWithStyle"];
format_swf_data_SWFShapeWithStyle.__super__ = format_swf_data_SWFShape;
format_swf_data_SWFShapeWithStyle.prototype = $extend(format_swf_data_SWFShape.prototype,{
	initialFillStyles: null
	,initialLineStyles: null
	,parse: function(data,level) {
		if(level == null) {
			level = 1;
		}
		data.resetBitsPending();
		var fillStylesLen = this.readStyleArrayLength(data,level);
		var _g1 = 0;
		while(_g1 < fillStylesLen) {
			++_g1;
			this.initialFillStyles.push(format_swf__$SWFData_SWFData_$Impl_$.readFILLSTYLE(data,level));
		}
		var lineStylesLen = this.readStyleArrayLength(data,level);
		var _g11 = 0;
		while(_g11 < lineStylesLen) {
			++_g11;
			this.initialLineStyles.push(level <= 3 ? format_swf__$SWFData_SWFData_$Impl_$.readLINESTYLE(data,level) : format_swf__$SWFData_SWFData_$Impl_$.readLINESTYLE2(data,level));
		}
		data.resetBitsPending();
		this.readShapeRecords(data,format_swf__$SWFData_SWFData_$Impl_$.readUB(data,4),format_swf__$SWFData_SWFData_$Impl_$.readUB(data,4),level);
	}
	,publish: function(data,level) {
		if(level == null) {
			level = 1;
		}
		data.resetBitsPending();
		var fillStylesLen = this.initialFillStyles.length;
		this.writeStyleArrayLength(data,fillStylesLen,level);
		var _g1 = 0;
		while(_g1 < fillStylesLen) this.initialFillStyles[_g1++].publish(data,level);
		var lineStylesLen = this.initialLineStyles.length;
		this.writeStyleArrayLength(data,lineStylesLen,level);
		var _g11 = 0;
		while(_g11 < lineStylesLen) this.initialLineStyles[_g11++].publish(data,level);
		var fillBits = data.calculateMaxBits(false,[this.getMaxFillStyleIndex()]);
		var lineBits = data.calculateMaxBits(false,[this.getMaxLineStyleIndex()]);
		data.resetBitsPending();
		format_swf__$SWFData_SWFData_$Impl_$.writeUB(data,4,fillBits);
		format_swf__$SWFData_SWFData_$Impl_$.writeUB(data,4,lineBits);
		this.writeShapeRecords(data,fillBits,lineBits,level);
	}
	,'export': function(handler) {
		this.fillStyles = this.initialFillStyles.slice();
		this.lineStyles = this.initialLineStyles.slice();
		format_swf_data_SWFShape.prototype["export"].call(this,handler);
	}
	,toString: function(indent) {
		if(indent == null) {
			indent = 0;
		}
		var str = "";
		if(this.initialFillStyles.length > 0) {
			str = "" + ("\n" + format_swf_utils_StringUtils.repeat(indent) + "FillStyles:");
			var _g1 = 0;
			var _g = this.initialFillStyles.length;
			while(_g1 < _g) {
				var i = _g1++;
				str += "\n" + format_swf_utils_StringUtils.repeat(indent + 2) + "[" + (i + 1) + "] " + this.initialFillStyles[i].toString();
			}
		}
		if(this.initialLineStyles.length > 0) {
			str += "\n" + format_swf_utils_StringUtils.repeat(indent) + "LineStyles:";
			var _g11 = 0;
			var _g2 = this.initialLineStyles.length;
			while(_g11 < _g2) {
				var i1 = _g11++;
				str += "\n" + format_swf_utils_StringUtils.repeat(indent + 2) + "[" + (i1 + 1) + "] " + this.initialLineStyles[i1].toString();
			}
		}
		return str + format_swf_data_SWFShape.prototype.toString.call(this,indent);
	}
	,readStyleArrayLength: function(data,level) {
		if(level == null) {
			level = 1;
		}
		var len = format_swf__$SWFData_SWFData_$Impl_$.readUI8(data);
		if(level >= 2 && len == 255) {
			len = format_swf__$SWFData_SWFData_$Impl_$.readUI16(data);
		}
		return len;
	}
	,writeStyleArrayLength: function(data,length,level) {
		if(level == null) {
			level = 1;
		}
		if(level >= 2 && length > 254) {
			format_swf__$SWFData_SWFData_$Impl_$.writeUI8(data,255);
			format_swf__$SWFData_SWFData_$Impl_$.writeUI16(data,length);
		} else {
			format_swf__$SWFData_SWFData_$Impl_$.writeUI8(data,length);
		}
	}
	,__class__: format_swf_data_SWFShapeWithStyle
});
var format_swf_data_SWFSoundEnvelope = function(data) {
	if(data != null) {
		this.parse(data);
	}
};
$hxClasses["format.swf.data.SWFSoundEnvelope"] = format_swf_data_SWFSoundEnvelope;
format_swf_data_SWFSoundEnvelope.__name__ = ["format","swf","data","SWFSoundEnvelope"];
format_swf_data_SWFSoundEnvelope.prototype = {
	pos44: null
	,leftLevel: null
	,rightLevel: null
	,parse: function(data) {
		this.pos44 = format_swf__$SWFData_SWFData_$Impl_$.readUI32(data);
		this.leftLevel = format_swf__$SWFData_SWFData_$Impl_$.readUI16(data);
		this.rightLevel = format_swf__$SWFData_SWFData_$Impl_$.readUI16(data);
	}
	,publish: function(data) {
		format_swf__$SWFData_SWFData_$Impl_$.writeUI32(data,this.pos44);
		format_swf__$SWFData_SWFData_$Impl_$.writeUI16(data,this.leftLevel);
		format_swf__$SWFData_SWFData_$Impl_$.writeUI16(data,this.rightLevel);
	}
	,clone: function() {
		var soundEnvelope = new format_swf_data_SWFSoundEnvelope();
		soundEnvelope.pos44 = this.pos44;
		soundEnvelope.leftLevel = this.leftLevel;
		soundEnvelope.rightLevel = this.rightLevel;
		return soundEnvelope;
	}
	,toString: function() {
		return "[SWFSoundEnvelope]";
	}
	,__class__: format_swf_data_SWFSoundEnvelope
};
var format_swf_data_SWFSoundInfo = function(data) {
	this.envelopeRecords = [];
	if(data != null) {
		this.parse(data);
	}
};
$hxClasses["format.swf.data.SWFSoundInfo"] = format_swf_data_SWFSoundInfo;
format_swf_data_SWFSoundInfo.__name__ = ["format","swf","data","SWFSoundInfo"];
format_swf_data_SWFSoundInfo.prototype = {
	syncStop: null
	,syncNoMultiple: null
	,hasEnvelope: null
	,hasLoops: null
	,hasOutPoint: null
	,hasInPoint: null
	,outPoint: null
	,inPoint: null
	,loopCount: null
	,envelopeRecords: null
	,parse: function(data) {
		var flags = format_swf__$SWFData_SWFData_$Impl_$.readUI8(data);
		this.syncStop = (flags & 32) != 0;
		this.syncNoMultiple = (flags & 16) != 0;
		this.hasEnvelope = (flags & 8) != 0;
		this.hasLoops = (flags & 4) != 0;
		this.hasOutPoint = (flags & 2) != 0;
		this.hasInPoint = (flags & 1) != 0;
		if(this.hasInPoint) {
			this.inPoint = format_swf__$SWFData_SWFData_$Impl_$.readUI32(data);
		}
		if(this.hasOutPoint) {
			this.outPoint = format_swf__$SWFData_SWFData_$Impl_$.readUI32(data);
		}
		if(this.hasLoops) {
			this.loopCount = format_swf__$SWFData_SWFData_$Impl_$.readUI16(data);
		}
		if(this.hasEnvelope) {
			var envPoints = format_swf__$SWFData_SWFData_$Impl_$.readUI8(data);
			var _g1 = 0;
			while(_g1 < envPoints) {
				++_g1;
				this.envelopeRecords.push(format_swf__$SWFData_SWFData_$Impl_$.readSOUNDENVELOPE(data));
			}
		}
	}
	,publish: function(data) {
		var flags = 0;
		if(this.syncStop) {
			flags = 32;
		}
		if(this.syncNoMultiple) {
			flags |= 16;
		}
		if(this.hasEnvelope) {
			flags |= 8;
		}
		if(this.hasLoops) {
			flags |= 4;
		}
		if(this.hasOutPoint) {
			flags |= 2;
		}
		if(this.hasInPoint) {
			flags |= 1;
		}
		format_swf__$SWFData_SWFData_$Impl_$.writeUI8(data,flags);
		if(this.hasInPoint) {
			format_swf__$SWFData_SWFData_$Impl_$.writeUI32(data,this.inPoint);
		}
		if(this.hasOutPoint) {
			format_swf__$SWFData_SWFData_$Impl_$.writeUI32(data,this.outPoint);
		}
		if(this.hasLoops) {
			format_swf__$SWFData_SWFData_$Impl_$.writeUI16(data,this.loopCount);
		}
		if(this.hasEnvelope) {
			var envPoints = this.envelopeRecords.length;
			format_swf__$SWFData_SWFData_$Impl_$.writeUI8(data,envPoints);
			var _g1 = 0;
			while(_g1 < envPoints) format_swf__$SWFData_SWFData_$Impl_$.writeSOUNDENVELOPE(data,this.envelopeRecords[_g1++]);
		}
	}
	,clone: function() {
		var soundInfo = new format_swf_data_SWFSoundInfo();
		soundInfo.syncStop = this.syncStop;
		soundInfo.syncNoMultiple = this.syncNoMultiple;
		soundInfo.hasEnvelope = this.hasEnvelope;
		soundInfo.hasLoops = this.hasLoops;
		soundInfo.hasOutPoint = this.hasOutPoint;
		soundInfo.hasInPoint = this.hasInPoint;
		soundInfo.outPoint = this.outPoint;
		soundInfo.inPoint = this.inPoint;
		soundInfo.loopCount = this.loopCount;
		var _g1 = 0;
		var _g = this.envelopeRecords.length;
		while(_g1 < _g) soundInfo.envelopeRecords.push(this.envelopeRecords[_g1++].clone());
		return soundInfo;
	}
	,toString: function() {
		return "[SWFSoundInfo]";
	}
	,__class__: format_swf_data_SWFSoundInfo
};
var format_swf_data_SWFSymbol = function(data) {
	if(data != null) {
		this.parse(data);
	}
};
$hxClasses["format.swf.data.SWFSymbol"] = format_swf_data_SWFSymbol;
format_swf_data_SWFSymbol.__name__ = ["format","swf","data","SWFSymbol"];
format_swf_data_SWFSymbol.create = function(aTagID,aName) {
	var swfSymbol = new format_swf_data_SWFSymbol();
	swfSymbol.tagId = aTagID;
	swfSymbol.name = aName;
	return swfSymbol;
};
format_swf_data_SWFSymbol.prototype = {
	tagId: null
	,name: null
	,parse: function(data) {
		this.tagId = format_swf__$SWFData_SWFData_$Impl_$.readUI16(data);
		this.name = format_swf__$SWFData_SWFData_$Impl_$.readSTRING(data);
	}
	,publish: function(data) {
		format_swf__$SWFData_SWFData_$Impl_$.writeUI16(data,this.tagId);
		format_swf__$SWFData_SWFData_$Impl_$.writeSTRING(data,this.name);
	}
	,toString: function() {
		return "TagID: " + this.tagId + ", Name: " + this.name;
	}
	,__class__: format_swf_data_SWFSymbol
};
var format_swf_data_SWFTextRecord = function(data,glyphBits,advanceBits,previousRecord,level) {
	if(level == null) {
		level = 1;
	}
	if(advanceBits == null) {
		advanceBits = 0;
	}
	if(glyphBits == null) {
		glyphBits = 0;
	}
	this.glyphEntries = [];
	if(data != null) {
		this.parse(data,glyphBits,advanceBits,previousRecord,level);
	}
};
$hxClasses["format.swf.data.SWFTextRecord"] = format_swf_data_SWFTextRecord;
format_swf_data_SWFTextRecord.__name__ = ["format","swf","data","SWFTextRecord"];
format_swf_data_SWFTextRecord.prototype = {
	type: null
	,hasFont: null
	,hasColor: null
	,hasXOffset: null
	,hasYOffset: null
	,fontId: null
	,textColor: null
	,textHeight: null
	,xOffset: null
	,yOffset: null
	,glyphEntries: null
	,_level: null
	,parse: function(data,glyphBits,advanceBits,previousRecord,level) {
		if(level == null) {
			level = 1;
		}
		this._level = level;
		var styles = format_swf__$SWFData_SWFData_$Impl_$.readUI8(data);
		this.type = styles >> 7;
		this.hasFont = (styles & 8) != 0;
		this.hasColor = (styles & 4) != 0;
		this.hasYOffset = (styles & 2) != 0;
		this.hasXOffset = (styles & 1) != 0;
		if(this.hasFont) {
			this.fontId = format_swf__$SWFData_SWFData_$Impl_$.readUI16(data);
		} else if(previousRecord != null) {
			this.fontId = previousRecord.fontId;
		}
		if(this.hasColor) {
			this.textColor = level < 2 ? format_swf__$SWFData_SWFData_$Impl_$.readRGB(data) : format_swf__$SWFData_SWFData_$Impl_$.readRGBA(data);
		} else if(previousRecord != null) {
			this.textColor = previousRecord.textColor;
		}
		if(this.hasXOffset) {
			this.xOffset = format_swf__$SWFData_SWFData_$Impl_$.readSI16(data);
		} else if(previousRecord != null) {
			this.xOffset = previousRecord.xOffset;
		}
		if(this.hasYOffset) {
			this.yOffset = format_swf__$SWFData_SWFData_$Impl_$.readSI16(data);
		} else if(previousRecord != null) {
			this.yOffset = previousRecord.yOffset;
		}
		if(this.hasFont) {
			this.textHeight = format_swf__$SWFData_SWFData_$Impl_$.readUI16(data);
		} else if(previousRecord != null) {
			this.textHeight = previousRecord.textHeight;
		}
		var glyphCount = format_swf__$SWFData_SWFData_$Impl_$.readUI8(data);
		var _g1 = 0;
		while(_g1 < glyphCount) {
			++_g1;
			this.glyphEntries.push(format_swf__$SWFData_SWFData_$Impl_$.readGLYPHENTRY(data,glyphBits,advanceBits));
		}
	}
	,publish: function(data,glyphBits,advanceBits,previousRecord,level) {
		if(level == null) {
			level = 1;
		}
		var flags = this.type << 7;
		this.hasFont = previousRecord == null || previousRecord.fontId != this.fontId || previousRecord.textHeight != this.textHeight;
		this.hasColor = previousRecord == null || previousRecord.textColor != this.textColor;
		this.hasXOffset = previousRecord == null || previousRecord.xOffset != this.xOffset;
		this.hasYOffset = previousRecord == null || previousRecord.yOffset != this.yOffset;
		if(this.hasFont) {
			flags |= 8;
		}
		if(this.hasColor) {
			flags |= 4;
		}
		if(this.hasYOffset) {
			flags |= 2;
		}
		if(this.hasXOffset) {
			flags |= 1;
		}
		format_swf__$SWFData_SWFData_$Impl_$.writeUI8(data,flags);
		if(this.hasFont) {
			format_swf__$SWFData_SWFData_$Impl_$.writeUI16(data,this.fontId);
		}
		if(this.hasColor) {
			if(level >= 2) {
				format_swf__$SWFData_SWFData_$Impl_$.writeRGBA(data,this.textColor);
			} else {
				format_swf__$SWFData_SWFData_$Impl_$.writeRGB(data,this.textColor);
			}
		}
		if(this.hasXOffset) {
			format_swf__$SWFData_SWFData_$Impl_$.writeSI16(data,this.xOffset);
		}
		if(this.hasYOffset) {
			format_swf__$SWFData_SWFData_$Impl_$.writeSI16(data,this.yOffset);
		}
		if(this.hasFont) {
			format_swf__$SWFData_SWFData_$Impl_$.writeUI16(data,this.textHeight);
		}
		var glyphCount = this.glyphEntries.length;
		format_swf__$SWFData_SWFData_$Impl_$.writeUI8(data,glyphCount);
		var _g1 = 0;
		while(_g1 < glyphCount) format_swf__$SWFData_SWFData_$Impl_$.writeGLYPHENTRY(data,this.glyphEntries[_g1++],glyphBits,advanceBits);
	}
	,clone: function() {
		var record = new format_swf_data_SWFTextRecord();
		record.type = this.type;
		record.hasFont = this.hasFont;
		record.hasColor = this.hasColor;
		record.hasXOffset = this.hasXOffset;
		record.hasYOffset = this.hasYOffset;
		record.fontId = this.fontId;
		record.textColor = this.textColor;
		record.textHeight = this.textHeight;
		record.xOffset = this.xOffset;
		record.yOffset = this.yOffset;
		var _g1 = 0;
		var _g = this.glyphEntries.length;
		while(_g1 < _g) record.glyphEntries.push(this.glyphEntries[_g1++].clone());
		return record;
	}
	,toString: function(indent) {
		if(indent == null) {
			indent = 0;
		}
		var params = ["Glyphs: " + Std.string(this.glyphEntries.length)];
		if(this.hasFont) {
			params.push("FontID: " + this.fontId);
			params.push("Height: " + this.textHeight);
		}
		if(this.hasColor) {
			params.push("Color: " + (this._level <= 2 ? format_swf_utils_ColorUtils.rgbToString(this.textColor) : format_swf_utils_ColorUtils.rgbaToString(this.textColor)));
		}
		if(this.hasXOffset) {
			params.push("XOffset: " + this.xOffset);
		}
		if(this.hasYOffset) {
			params.push("YOffset: " + this.yOffset);
		}
		var str = params.join(", ");
		var _g1 = 0;
		var _g = this.glyphEntries.length;
		while(_g1 < _g) {
			var i = _g1++;
			str += "\n" + format_swf_utils_StringUtils.repeat(indent + 2) + "[" + i + "] " + this.glyphEntries[i].toString();
		}
		return str;
	}
	,__class__: format_swf_data_SWFTextRecord
};
var format_swf_data_SWFZoneData = function(data) {
	if(data != null) {
		this.parse(data);
	}
};
$hxClasses["format.swf.data.SWFZoneData"] = format_swf_data_SWFZoneData;
format_swf_data_SWFZoneData.__name__ = ["format","swf","data","SWFZoneData"];
format_swf_data_SWFZoneData.prototype = {
	alignmentCoordinate: null
	,range: null
	,parse: function(data) {
		this.alignmentCoordinate = format_swf__$SWFData_SWFData_$Impl_$.readFLOAT16(data);
		this.range = format_swf__$SWFData_SWFData_$Impl_$.readFLOAT16(data);
	}
	,publish: function(data) {
		format_swf__$SWFData_SWFData_$Impl_$.writeFLOAT16(data,this.alignmentCoordinate);
		format_swf__$SWFData_SWFData_$Impl_$.writeFLOAT16(data,this.range);
	}
	,toString: function() {
		return "(" + this.alignmentCoordinate + "," + this.range + ")";
	}
	,__class__: format_swf_data_SWFZoneData
};
var format_swf_data_SWFZoneRecord = function(data) {
	this.zoneData = [];
	if(data != null) {
		this.parse(data);
	}
};
$hxClasses["format.swf.data.SWFZoneRecord"] = format_swf_data_SWFZoneRecord;
format_swf_data_SWFZoneRecord.__name__ = ["format","swf","data","SWFZoneRecord"];
format_swf_data_SWFZoneRecord.prototype = {
	maskX: null
	,maskY: null
	,zoneData: null
	,parse: function(data) {
		var numZoneData = format_swf__$SWFData_SWFData_$Impl_$.readUI8(data);
		var _g1 = 0;
		while(_g1 < numZoneData) {
			++_g1;
			this.zoneData.push(format_swf__$SWFData_SWFData_$Impl_$.readZONEDATA(data));
		}
		var mask = format_swf__$SWFData_SWFData_$Impl_$.readUI8(data);
		this.maskX = (mask & 1) != 0;
		this.maskY = (mask & 2) != 0;
	}
	,publish: function(data) {
		var numZoneData = this.zoneData.length;
		format_swf__$SWFData_SWFData_$Impl_$.writeUI8(data,numZoneData);
		var _g1 = 0;
		while(_g1 < numZoneData) format_swf__$SWFData_SWFData_$Impl_$.writeZONEDATA(data,this.zoneData[_g1++]);
		var mask = 0;
		if(this.maskX) {
			mask = 1;
		}
		if(this.maskY) {
			mask |= 2;
		}
		format_swf__$SWFData_SWFData_$Impl_$.writeUI8(data,mask);
	}
	,toString: function(indent) {
		if(indent == null) {
			indent = 0;
		}
		var str = "MaskY: " + Std.string(this.maskY) + ", MaskX: " + Std.string(this.maskX);
		var _g1 = 0;
		var _g = this.zoneData.length;
		while(_g1 < _g) {
			var i = _g1++;
			str += ", " + i + ": " + this.zoneData[i].toString();
		}
		return str;
	}
	,__class__: format_swf_data_SWFZoneRecord
};
var format_swf_data_actions_IAction = function() { };
$hxClasses["format.swf.data.actions.IAction"] = format_swf_data_actions_IAction;
format_swf_data_actions_IAction.__name__ = ["format","swf","data","actions","IAction"];
format_swf_data_actions_IAction.prototype = {
	get_lengthWithHeader: null
	,code: null
	,length: null
	,lengthWithHeader: null
	,pos: null
	,parse: null
	,publish: null
	,clone: null
	,toString: null
	,__class__: format_swf_data_actions_IAction
	,__properties__: {get_lengthWithHeader:"get_lengthWithHeader"}
};
var format_swf_data_actions_Action = function(code,length,pos) {
	this.code = code;
	this.length = length;
	this.pos = pos;
};
$hxClasses["format.swf.data.actions.Action"] = format_swf_data_actions_Action;
format_swf_data_actions_Action.__name__ = ["format","swf","data","actions","Action"];
format_swf_data_actions_Action.__interfaces__ = [format_swf_data_actions_IAction];
format_swf_data_actions_Action.resolveOffsets = function(actions) {
	var action;
	var n = actions.get_length();
	var _g1 = 0;
	while(_g1 < n) {
		var i = _g1++;
		action = actions.get(i);
		if(js_Boot.__instanceof(action,format_swf_data_actions_IActionBranch)) {
			var j = 0;
			var found = false;
			var actionBranch = action;
			var targetPos = actionBranch.pos + actionBranch.get_lengthWithHeader() + actionBranch.branchOffset;
			if(targetPos <= actionBranch.pos) {
				j = i;
				while(j >= 0) {
					if(targetPos == actions.get(j).pos) {
						found = true;
						break;
					}
					--j;
				}
			} else {
				while(j < n) {
					if(targetPos == actions.get(j).pos) {
						found = true;
						break;
					}
					++j;
				}
				if(!found) {
					action = actions.get(j - 1);
					if(targetPos == action.pos + action.get_lengthWithHeader()) {
						j = -1;
						found = true;
					}
				}
			}
			actionBranch.branchIndex = found ? j : -2;
		}
	}
};
format_swf_data_actions_Action.prototype = {
	code: null
	,length: null
	,lengthWithHeader: null
	,pos: null
	,get_lengthWithHeader: function() {
		return this.length + (this.code >= 128 ? 3 : 1);
	}
	,parse: function(data) {
	}
	,publish: function(data) {
		this.write(data);
	}
	,clone: function() {
		return new format_swf_data_actions_Action(this.code,this.length,this.pos);
	}
	,write: function(data,body) {
		format_swf__$SWFData_SWFData_$Impl_$.writeUI8(data,this.code);
		if(this.code >= 128) {
			if(body != null && format_swf__$SWFData_SWFData_$Impl_$.get_length(body) > 0) {
				this.length = format_swf__$SWFData_SWFData_$Impl_$.get_length(body);
				format_swf__$SWFData_SWFData_$Impl_$.writeUI16(data,this.length);
				data.writeBytes(openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytes(body));
			} else {
				this.length = 0;
				throw new js__$Boot_HaxeError(new openfl_errors_Error("Action body null or empty."));
			}
		} else {
			this.length = 0;
		}
	}
	,toString: function(indent) {
		if(indent == null) {
			indent = 0;
		}
		return "[Action] Code: " + StringTools.hex(this.code) + ", Length: " + this.length;
	}
	,__class__: format_swf_data_actions_Action
	,__properties__: {get_lengthWithHeader:"get_lengthWithHeader"}
};
var format_swf_data_actions_ActionUnknown = function(code,length,pos) {
	format_swf_data_actions_Action.call(this,code,length,pos);
};
$hxClasses["format.swf.data.actions.ActionUnknown"] = format_swf_data_actions_ActionUnknown;
format_swf_data_actions_ActionUnknown.__name__ = ["format","swf","data","actions","ActionUnknown"];
format_swf_data_actions_ActionUnknown.__interfaces__ = [format_swf_data_actions_IAction];
format_swf_data_actions_ActionUnknown.__super__ = format_swf_data_actions_Action;
format_swf_data_actions_ActionUnknown.prototype = $extend(format_swf_data_actions_Action.prototype,{
	parse: function(data) {
		if(this.length > 0) {
			format_swf__$SWFData_SWFData_$Impl_$.skipBytes(data,this.length);
		}
	}
	,toString: function(indent) {
		if(indent == null) {
			indent = 0;
		}
		return "[????] Code: " + StringTools.hex(this.code) + ", Length: " + this.length;
	}
	,__class__: format_swf_data_actions_ActionUnknown
});
var format_swf_data_actions_IActionBranch = function() { };
$hxClasses["format.swf.data.actions.IActionBranch"] = format_swf_data_actions_IActionBranch;
format_swf_data_actions_IActionBranch.__name__ = ["format","swf","data","actions","IActionBranch"];
format_swf_data_actions_IActionBranch.__interfaces__ = [format_swf_data_actions_IAction];
format_swf_data_actions_IActionBranch.prototype = {
	branchOffset: null
	,branchIndex: null
	,__class__: format_swf_data_actions_IActionBranch
};
var format_swf_data_actions_swf3_ActionStop = function(code,length,pos) {
	format_swf_data_actions_Action.call(this,code,length,pos);
};
$hxClasses["format.swf.data.actions.swf3.ActionStop"] = format_swf_data_actions_swf3_ActionStop;
format_swf_data_actions_swf3_ActionStop.__name__ = ["format","swf","data","actions","swf3","ActionStop"];
format_swf_data_actions_swf3_ActionStop.__interfaces__ = [format_swf_data_actions_IAction];
format_swf_data_actions_swf3_ActionStop.__super__ = format_swf_data_actions_Action;
format_swf_data_actions_swf3_ActionStop.prototype = $extend(format_swf_data_actions_Action.prototype,{
	toString: function(indent) {
		if(indent == null) {
			indent = 0;
		}
		return "[ActionStop]";
	}
	,__class__: format_swf_data_actions_swf3_ActionStop
});
var format_swf_data_consts_BitmapFormat = function() { };
$hxClasses["format.swf.data.consts.BitmapFormat"] = format_swf_data_consts_BitmapFormat;
format_swf_data_consts_BitmapFormat.__name__ = ["format","swf","data","consts","BitmapFormat"];
format_swf_data_consts_BitmapFormat.toString = function(bitmapFormat) {
	switch(bitmapFormat) {
	case 3:
		return "8 BPP";
	case 4:
		return "15 BPP";
	case 5:
		return "24 BPP";
	default:
		return "unknown";
	}
};
var format_swf_data_consts_BitmapType = function() { };
$hxClasses["format.swf.data.consts.BitmapType"] = format_swf_data_consts_BitmapType;
format_swf_data_consts_BitmapType.__name__ = ["format","swf","data","consts","BitmapType"];
format_swf_data_consts_BitmapType.toString = function(bitmapFormat) {
	switch(bitmapFormat) {
	case 1:
		return "JPEG";
	case 2:
		return "GIF89a";
	case 3:
		return "PNG";
	default:
		return "unknown";
	}
};
var format_swf_data_consts_BlendMode = function() { };
$hxClasses["format.swf.data.consts.BlendMode"] = format_swf_data_consts_BlendMode;
format_swf_data_consts_BlendMode.__name__ = ["format","swf","data","consts","BlendMode"];
format_swf_data_consts_BlendMode.toString = function(blendMode) {
	switch(blendMode) {
	case 0:case 1:
		return "normal";
	case 2:
		return "layer";
	case 3:
		return "multiply";
	case 4:
		return "screen";
	case 5:
		return "lighten";
	case 6:
		return "darken";
	case 7:
		return "difference";
	case 8:
		return "add";
	case 9:
		return "subtract";
	case 10:
		return "invert";
	case 11:
		return "alpha";
	case 12:
		return "erase";
	case 13:
		return "overlay";
	case 14:
		return "hardlight";
	default:
		return "unknown";
	}
};
var format_swf_data_consts_CSMTableHint = function() { };
$hxClasses["format.swf.data.consts.CSMTableHint"] = format_swf_data_consts_CSMTableHint;
format_swf_data_consts_CSMTableHint.__name__ = ["format","swf","data","consts","CSMTableHint"];
format_swf_data_consts_CSMTableHint.toString = function(csmTableHint) {
	switch(csmTableHint) {
	case 0:
		return "thin";
	case 1:
		return "medium";
	case 2:
		return "thick";
	default:
		return "unknown";
	}
};
var format_swf_data_consts_GradientInterpolationMode = function() { };
$hxClasses["format.swf.data.consts.GradientInterpolationMode"] = format_swf_data_consts_GradientInterpolationMode;
format_swf_data_consts_GradientInterpolationMode.__name__ = ["format","swf","data","consts","GradientInterpolationMode"];
format_swf_data_consts_GradientInterpolationMode.toEnum = function(interpolationMode) {
	switch(interpolationMode) {
	case 0:
		return 1;
	case 1:
		return 0;
	default:
		return 1;
	}
};
format_swf_data_consts_GradientInterpolationMode.toString = function(interpolationMode) {
	switch(interpolationMode) {
	case 0:
		return openfl_display__$InterpolationMethod_InterpolationMethod_$Impl_$.toString(1).toLowerCase();
	case 1:
		return openfl_display__$InterpolationMethod_InterpolationMethod_$Impl_$.toString(0).toLowerCase();
	default:
		return openfl_display__$InterpolationMethod_InterpolationMethod_$Impl_$.toString(1).toLowerCase();
	}
};
var format_swf_data_consts_GradientSpreadMode = function() { };
$hxClasses["format.swf.data.consts.GradientSpreadMode"] = format_swf_data_consts_GradientSpreadMode;
format_swf_data_consts_GradientSpreadMode.__name__ = ["format","swf","data","consts","GradientSpreadMode"];
format_swf_data_consts_GradientSpreadMode.toEnum = function(spreadMode) {
	switch(spreadMode) {
	case 0:
		return 0;
	case 1:
		return 1;
	case 2:
		return 2;
	default:
		return 0;
	}
};
format_swf_data_consts_GradientSpreadMode.toString = function(spreadMode) {
	switch(spreadMode) {
	case 0:
		return openfl_display__$SpreadMethod_SpreadMethod_$Impl_$.toString(0).toLowerCase();
	case 1:
		return openfl_display__$SpreadMethod_SpreadMethod_$Impl_$.toString(1).toLowerCase();
	case 2:
		return openfl_display__$SpreadMethod_SpreadMethod_$Impl_$.toString(2).toLowerCase();
	default:
		return "unknown";
	}
};
var format_swf_data_consts_LineCapsStyle = function() { };
$hxClasses["format.swf.data.consts.LineCapsStyle"] = format_swf_data_consts_LineCapsStyle;
format_swf_data_consts_LineCapsStyle.__name__ = ["format","swf","data","consts","LineCapsStyle"];
format_swf_data_consts_LineCapsStyle.toEnum = function(lineCapsStyle) {
	switch(lineCapsStyle) {
	case 0:
		break;
	case 1:
		break;
	case 2:
		break;
	}
	return 1;
};
format_swf_data_consts_LineCapsStyle.toString = function(lineCapsStyle) {
	switch(lineCapsStyle) {
	case 0:
		return openfl_display__$CapsStyle_CapsStyle_$Impl_$.toString(1).toLowerCase();
	case 1:
		return openfl_display__$CapsStyle_CapsStyle_$Impl_$.toString(0).toLowerCase();
	case 2:
		return openfl_display__$CapsStyle_CapsStyle_$Impl_$.toString(2).toLowerCase();
	default:
		return "unknown";
	}
};
var format_swf_data_consts_LineJointStyle = function() { };
$hxClasses["format.swf.data.consts.LineJointStyle"] = format_swf_data_consts_LineJointStyle;
format_swf_data_consts_LineJointStyle.__name__ = ["format","swf","data","consts","LineJointStyle"];
format_swf_data_consts_LineJointStyle.toEnum = function(lineJointStyle) {
	switch(lineJointStyle) {
	case 0:
		return 2;
	case 1:
		return 0;
	case 2:
		return 1;
	default:
		return 2;
	}
};
format_swf_data_consts_LineJointStyle.toString = function(lineJointStyle) {
	switch(lineJointStyle) {
	case 0:
		return openfl_display__$JointStyle_JointStyle_$Impl_$.toString(2).toLowerCase();
	case 1:
		return openfl_display__$JointStyle_JointStyle_$Impl_$.toString(0).toLowerCase();
	case 2:
		return openfl_display__$JointStyle_JointStyle_$Impl_$.toString(1).toLowerCase();
	default:
		return "null";
	}
};
var format_swf_data_consts_SoundCompression = function() { };
$hxClasses["format.swf.data.consts.SoundCompression"] = format_swf_data_consts_SoundCompression;
format_swf_data_consts_SoundCompression.__name__ = ["format","swf","data","consts","SoundCompression"];
format_swf_data_consts_SoundCompression.toString = function(soundCompression) {
	switch(soundCompression) {
	case 0:
		return "Uncompressed Native Endian";
	case 1:
		return "ADPCM";
	case 2:
		return "MP3";
	case 3:
		return "Uncompressed Little Endian";
	case 4:
		return "Nellymoser 16kHz";
	case 5:
		return "Nellymoser 8kHz";
	case 6:
		return "Nellymoser";
	case 11:
		return "Speex";
	default:
		return "unknown";
	}
};
var format_swf_data_consts_SoundRate = function() { };
$hxClasses["format.swf.data.consts.SoundRate"] = format_swf_data_consts_SoundRate;
format_swf_data_consts_SoundRate.__name__ = ["format","swf","data","consts","SoundRate"];
format_swf_data_consts_SoundRate.toString = function(soundRate) {
	switch(soundRate) {
	case 0:
		return "5.5kHz";
	case 1:
		return "11kHz";
	case 2:
		return "22kHz";
	case 3:
		return "44kHz";
	default:
		return "unknown";
	}
};
var format_swf_data_consts_SoundSize = function() { };
$hxClasses["format.swf.data.consts.SoundSize"] = format_swf_data_consts_SoundSize;
format_swf_data_consts_SoundSize.__name__ = ["format","swf","data","consts","SoundSize"];
format_swf_data_consts_SoundSize.toString = function(soundSize) {
	switch(soundSize) {
	case 0:
		return "8bit";
	case 1:
		return "16bit";
	default:
		return "unknown";
	}
};
var format_swf_data_consts_SoundType = function() { };
$hxClasses["format.swf.data.consts.SoundType"] = format_swf_data_consts_SoundType;
format_swf_data_consts_SoundType.__name__ = ["format","swf","data","consts","SoundType"];
format_swf_data_consts_SoundType.toString = function(soundType) {
	switch(soundType) {
	case 0:
		return "mono";
	case 1:
		return "stereo";
	default:
		return "unknown";
	}
};
var format_swf_data_consts_VideoCodecID = function() { };
$hxClasses["format.swf.data.consts.VideoCodecID"] = format_swf_data_consts_VideoCodecID;
format_swf_data_consts_VideoCodecID.__name__ = ["format","swf","data","consts","VideoCodecID"];
format_swf_data_consts_VideoCodecID.toString = function(codecId) {
	switch(codecId) {
	case 2:
		return "H.263";
	case 3:
		return "Screen Video";
	case 4:
		return "VP6";
	case 5:
		return "VP6 With Alpha";
	case 6:
		return "Screen Video V2";
	default:
		return "unknown";
	}
};
var format_swf_data_consts_VideoDeblockingType = function() { };
$hxClasses["format.swf.data.consts.VideoDeblockingType"] = format_swf_data_consts_VideoDeblockingType;
format_swf_data_consts_VideoDeblockingType.__name__ = ["format","swf","data","consts","VideoDeblockingType"];
format_swf_data_consts_VideoDeblockingType.toString = function(deblockingType) {
	switch(deblockingType) {
	case 0:
		return "videopacket";
	case 1:
		return "off";
	case 2:
		return "level 1";
	case 3:
		return "level 2";
	case 4:
		return "level 3";
	case 5:
		return "level 4";
	default:
		return "unknown";
	}
};
var format_swf_data_etc_IEdge = function() { };
$hxClasses["format.swf.data.etc.IEdge"] = format_swf_data_etc_IEdge;
format_swf_data_etc_IEdge.__name__ = ["format","swf","data","etc","IEdge"];
format_swf_data_etc_IEdge.prototype = {
	from: null
	,to: null
	,lineStyleIdx: null
	,fillStyleIdx: null
	,reverseWithNewFillStyle: null
	,__class__: format_swf_data_etc_IEdge
};
var format_swf_data_etc_StraightEdge = function(aFrom,aTo,aLineStyleIdx,aFillStyleIdx) {
	if(aFillStyleIdx == null) {
		aFillStyleIdx = 0;
	}
	if(aLineStyleIdx == null) {
		aLineStyleIdx = 0;
	}
	this.from = aFrom;
	this.to = aTo;
	this.lineStyleIdx = aLineStyleIdx;
	this.fillStyleIdx = aFillStyleIdx;
};
$hxClasses["format.swf.data.etc.StraightEdge"] = format_swf_data_etc_StraightEdge;
format_swf_data_etc_StraightEdge.__name__ = ["format","swf","data","etc","StraightEdge"];
format_swf_data_etc_StraightEdge.__interfaces__ = [format_swf_data_etc_IEdge];
format_swf_data_etc_StraightEdge.prototype = {
	from: null
	,to: null
	,lineStyleIdx: null
	,fillStyleIdx: null
	,reverseWithNewFillStyle: function(newFillStyleIdx) {
		return new format_swf_data_etc_StraightEdge(this.to,this.from,this.lineStyleIdx,newFillStyleIdx);
	}
	,toString: function() {
		return "stroke:" + this.lineStyleIdx + ", fill:" + this.fillStyleIdx + ", start:" + this.from.toString() + ", end:" + this.to.toString();
	}
	,__class__: format_swf_data_etc_StraightEdge
};
var format_swf_data_etc_CurvedEdge = function(aFrom,aControl,aTo,aLineStyleIdx,aFillStyleIdx) {
	if(aFillStyleIdx == null) {
		aFillStyleIdx = 0;
	}
	if(aLineStyleIdx == null) {
		aLineStyleIdx = 0;
	}
	format_swf_data_etc_StraightEdge.call(this,aFrom,aTo,aLineStyleIdx,aFillStyleIdx);
	this.control = aControl;
};
$hxClasses["format.swf.data.etc.CurvedEdge"] = format_swf_data_etc_CurvedEdge;
format_swf_data_etc_CurvedEdge.__name__ = ["format","swf","data","etc","CurvedEdge"];
format_swf_data_etc_CurvedEdge.__interfaces__ = [format_swf_data_etc_IEdge];
format_swf_data_etc_CurvedEdge.__super__ = format_swf_data_etc_StraightEdge;
format_swf_data_etc_CurvedEdge.prototype = $extend(format_swf_data_etc_StraightEdge.prototype,{
	control: null
	,reverseWithNewFillStyle: function(newFillStyleIdx) {
		return new format_swf_data_etc_CurvedEdge(this.to,this.control,this.from,this.lineStyleIdx,newFillStyleIdx);
	}
	,toString: function() {
		return "stroke:" + this.lineStyleIdx + ", fill:" + this.fillStyleIdx + ", start:" + this.from.toString() + ", control:" + this.control.toString() + ", end:" + this.to.toString();
	}
	,__class__: format_swf_data_etc_CurvedEdge
});
var format_swf_data_etc_MPEGFrame = function() {
	this.samples = 1152;
	this.init();
};
$hxClasses["format.swf.data.etc.MPEGFrame"] = format_swf_data_etc_MPEGFrame;
format_swf_data_etc_MPEGFrame.__name__ = ["format","swf","data","etc","MPEGFrame"];
format_swf_data_etc_MPEGFrame.prototype = {
	version: null
	,layer: null
	,bitrate: null
	,samplingrate: null
	,padding: null
	,channelMode: null
	,channelModeExt: null
	,copyright: null
	,original: null
	,emphasis: null
	,_header: null
	,data: null
	,_crc: null
	,crc: null
	,size: null
	,hasCRC: null
	,samples: null
	,get_crc: function() {
		this._crc.position = 0;
		return this._crc.readUnsignedShort();
	}
	,get_size: function() {
		var ret = 0;
		if(this.layer == 0) {
			ret = Math.floor(12000.0 * this.bitrate / this.samplingrate);
			if(this.padding) {
				++ret;
			}
			ret <<= 2;
		} else {
			ret = Math.floor((this.version == 0 ? 144000.0 : 72000.0) * this.bitrate / this.samplingrate);
			if(this.padding) {
				++ret;
			}
		}
		return ret - 4 - (this.hasCRC ? 2 : 0);
	}
	,setHeaderByteAt: function(index,value) {
		switch(index) {
		case 0:
			if(value != 255) {
				throw new js__$Boot_HaxeError(new openfl_errors_Error("Not a MPEG header."));
			}
			break;
		case 1:
			if((value & 224) != 224) {
				throw new js__$Boot_HaxeError(new openfl_errors_Error("Not a MPEG header."));
			}
			switch((value & 24) >> 3) {
			case 2:
				this.version = 1;
				break;
			case 3:
				this.version = 0;
				break;
			default:
				throw new js__$Boot_HaxeError(new openfl_errors_Error("Unsupported MPEG version."));
			}
			if((value & 6) >> 1 == 1) {
				this.layer = 2;
			} else {
				throw new js__$Boot_HaxeError(new openfl_errors_Error("Unsupported MPEG layer."));
			}
			this.hasCRC = (value & 1) == 0;
			break;
		case 2:
			var bitrateIndex = (value & 240) >> 4;
			if(bitrateIndex == 0 || bitrateIndex == 15) {
				throw new js__$Boot_HaxeError(new openfl_errors_Error("Unsupported bitrate index."));
			}
			this.bitrate = format_swf_data_etc_MPEGFrame.mpegBitrates[this.version][this.layer][bitrateIndex];
			var samplingrateIndex = (value & 12) >> 2;
			if(samplingrateIndex == 3) {
				throw new js__$Boot_HaxeError(new openfl_errors_Error("Unsupported samplingrate index."));
			}
			this.samplingrate = format_swf_data_etc_MPEGFrame.mpegsamplingrates[this.version][samplingrateIndex];
			this.padding = (value & 2) == 2;
			break;
		case 3:
			this.channelMode = (value & 192) >> 6;
			this.channelModeExt = (value & 48) >> 4;
			this.copyright = (value & 8) == 8;
			this.original = (value & 4) == 4;
			this.emphasis = value & 2;
			break;
		default:
			throw new js__$Boot_HaxeError(new openfl_errors_Error("Index out of bounds."));
		}
		var this1 = this._header;
		this1.__resize(index + 1);
		this1.b[index] = value & 255;
	}
	,setCRCByteAt: function(index,value) {
		if(index > 1) {
			throw new js__$Boot_HaxeError(new openfl_errors_Error("Index out of bounds."));
		}
		var this1 = this._crc;
		this1.__resize(index + 1);
		this1.b[index] = value & 255;
	}
	,init: function() {
		this._header = new openfl_utils_ByteArrayData(0);
		this._header.writeByte(0);
		this._header.writeByte(0);
		this._header.writeByte(0);
		this._header.writeByte(0);
		this._crc = new openfl_utils_ByteArrayData(0);
		this._crc.writeByte(0);
		this._crc.writeByte(0);
	}
	,getFrame: function() {
		var ba = new openfl_utils_ByteArrayData(0);
		ba.writeBytes(this._header,0,4);
		if(this.hasCRC) {
			ba.writeBytes(this._crc,0,2);
		}
		ba.writeBytes(this.data);
		return ba;
	}
	,toString: function() {
		var encoding = "MPEG ";
		switch(this.version) {
		case 0:
			encoding = "MPEG " + "1.0 ";
			break;
		case 1:
			encoding = "MPEG " + "2.0 ";
			break;
		case 2:
			encoding = "MPEG " + "2.5 ";
			break;
		default:
			encoding = "MPEG " + "?.? ";
		}
		switch(this.layer) {
		case 0:
			encoding += "Layer I";
			break;
		case 1:
			encoding += "Layer II";
			break;
		case 2:
			encoding += "Layer III";
			break;
		default:
			encoding += "Layer ?";
		}
		var channel = "unknown";
		switch(this.channelMode) {
		case 0:
			channel = "Stereo";
			break;
		case 1:
			channel = "Joint stereo";
			break;
		case 2:
			channel = "Dual channel";
			break;
		case 3:
			channel = "Mono";
			break;
		}
		return encoding + ", " + this.bitrate + " kbit/s, " + this.samplingrate + " Hz, " + channel + ", " + this.get_size() + " bytes";
	}
	,__class__: format_swf_data_etc_MPEGFrame
	,__properties__: {get_size:"get_size",get_crc:"get_crc"}
};
var format_swf_data_filters_IFilter = function() { };
$hxClasses["format.swf.data.filters.IFilter"] = format_swf_data_filters_IFilter;
format_swf_data_filters_IFilter.__name__ = ["format","swf","data","filters","IFilter"];
format_swf_data_filters_IFilter.prototype = {
	get_filter: null
	,get_type: null
	,id: null
	,filter: null
	,type: null
	,parse: null
	,publish: null
	,clone: null
	,toString: null
	,__class__: format_swf_data_filters_IFilter
	,__properties__: {get_type:"get_type",get_filter:"get_filter"}
};
var format_swf_data_filters_Filter = function(id) {
	this.id = id;
};
$hxClasses["format.swf.data.filters.Filter"] = format_swf_data_filters_Filter;
format_swf_data_filters_Filter.__name__ = ["format","swf","data","filters","Filter"];
format_swf_data_filters_Filter.__interfaces__ = [format_swf_data_filters_IFilter];
format_swf_data_filters_Filter.prototype = {
	filter: null
	,id: null
	,type: null
	,get_filter: function() {
		throw new js__$Boot_HaxeError(new openfl_errors_Error("Implement in subclasses!"));
	}
	,get_type: function() {
		return null;
	}
	,parse: function(data) {
		throw new js__$Boot_HaxeError(new openfl_errors_Error("Implement in subclasses!"));
	}
	,publish: function(data) {
		throw new js__$Boot_HaxeError(new openfl_errors_Error("Implement in subclasses!"));
	}
	,clone: function() {
		throw new js__$Boot_HaxeError(new openfl_errors_Error("Implement in subclasses!"));
	}
	,toString: function(indent) {
		if(indent == null) {
			indent = 0;
		}
		return "[Filter]";
	}
	,__class__: format_swf_data_filters_Filter
	,__properties__: {get_type:"get_type",get_filter:"get_filter"}
};
var format_swf_data_filters_FilterBevel = function(id) {
	format_swf_data_filters_Filter.call(this,id);
};
$hxClasses["format.swf.data.filters.FilterBevel"] = format_swf_data_filters_FilterBevel;
format_swf_data_filters_FilterBevel.__name__ = ["format","swf","data","filters","FilterBevel"];
format_swf_data_filters_FilterBevel.__interfaces__ = [format_swf_data_filters_IFilter];
format_swf_data_filters_FilterBevel.__super__ = format_swf_data_filters_Filter;
format_swf_data_filters_FilterBevel.prototype = $extend(format_swf_data_filters_Filter.prototype,{
	shadowColor: null
	,highlightColor: null
	,blurX: null
	,blurY: null
	,angle: null
	,distance: null
	,strength: null
	,innerShadow: null
	,knockout: null
	,compositeSource: null
	,onTop: null
	,passes: null
	,get_filter: function() {
		return new openfl_filters_BitmapFilter();
	}
	,parse: function(data) {
		this.shadowColor = format_swf__$SWFData_SWFData_$Impl_$.readRGBA(data);
		this.highlightColor = format_swf__$SWFData_SWFData_$Impl_$.readRGBA(data);
		this.blurX = format_swf__$SWFData_SWFData_$Impl_$.readFIXED(data);
		this.blurY = format_swf__$SWFData_SWFData_$Impl_$.readFIXED(data);
		this.angle = format_swf__$SWFData_SWFData_$Impl_$.readFIXED(data);
		this.distance = format_swf__$SWFData_SWFData_$Impl_$.readFIXED(data);
		this.strength = format_swf__$SWFData_SWFData_$Impl_$.readFIXED8(data);
		var flags = format_swf__$SWFData_SWFData_$Impl_$.readUI8(data);
		this.innerShadow = (flags & 128) != 0;
		this.knockout = (flags & 64) != 0;
		this.compositeSource = (flags & 32) != 0;
		this.onTop = (flags & 16) != 0;
		this.passes = flags & 15;
	}
	,publish: function(data) {
		format_swf__$SWFData_SWFData_$Impl_$.writeRGBA(data,this.shadowColor);
		format_swf__$SWFData_SWFData_$Impl_$.writeRGBA(data,this.highlightColor);
		format_swf__$SWFData_SWFData_$Impl_$.writeFIXED(data,this.blurX);
		format_swf__$SWFData_SWFData_$Impl_$.writeFIXED(data,this.blurY);
		format_swf__$SWFData_SWFData_$Impl_$.writeFIXED(data,this.angle);
		format_swf__$SWFData_SWFData_$Impl_$.writeFIXED(data,this.distance);
		format_swf__$SWFData_SWFData_$Impl_$.writeFIXED8(data,this.strength);
		var flags = this.passes & 15;
		if(this.innerShadow) {
			flags |= 128;
		}
		if(this.knockout) {
			flags |= 64;
		}
		if(this.compositeSource) {
			flags |= 32;
		}
		if(this.onTop) {
			flags |= 16;
		}
		format_swf__$SWFData_SWFData_$Impl_$.writeUI8(data,flags);
	}
	,clone: function() {
		var filter = new format_swf_data_filters_FilterBevel(this.id);
		filter.shadowColor = this.shadowColor;
		filter.highlightColor = this.highlightColor;
		filter.blurX = this.blurX;
		filter.blurY = this.blurY;
		filter.angle = this.angle;
		filter.distance = this.distance;
		filter.strength = this.strength;
		filter.passes = this.passes;
		filter.innerShadow = this.innerShadow;
		filter.knockout = this.knockout;
		filter.compositeSource = this.compositeSource;
		filter.onTop = this.onTop;
		return filter;
	}
	,toString: function(indent) {
		if(indent == null) {
			indent = 0;
		}
		var str = "[BevelFilter] " + "ShadowColor: " + format_swf_utils_ColorUtils.rgbToString(this.shadowColor) + ", " + "HighlightColor: " + format_swf_utils_ColorUtils.rgbToString(this.highlightColor) + ", " + "BlurX: " + this.blurX + ", " + "BlurY: " + this.blurY + ", " + "Angle: " + this.angle + ", " + "Distance: " + this.distance + ", " + "Strength: " + this.strength + ", " + "Passes: " + this.passes;
		var flags = [];
		if(this.innerShadow) {
			flags.push("InnerShadow");
		}
		if(this.knockout) {
			flags.push("Knockout");
		}
		if(this.compositeSource) {
			flags.push("CompositeSource");
		}
		if(this.onTop) {
			flags.push("OnTop");
		}
		if(flags.length > 0) {
			str += ", Flags: " + flags.join(", ");
		}
		return str;
	}
	,__class__: format_swf_data_filters_FilterBevel
});
var format_swf_data_filters_FilterBlur = function(id) {
	format_swf_data_filters_Filter.call(this,id);
};
$hxClasses["format.swf.data.filters.FilterBlur"] = format_swf_data_filters_FilterBlur;
format_swf_data_filters_FilterBlur.__name__ = ["format","swf","data","filters","FilterBlur"];
format_swf_data_filters_FilterBlur.__interfaces__ = [format_swf_data_filters_IFilter];
format_swf_data_filters_FilterBlur.__super__ = format_swf_data_filters_Filter;
format_swf_data_filters_FilterBlur.prototype = $extend(format_swf_data_filters_Filter.prototype,{
	blurX: null
	,blurY: null
	,passes: null
	,get_filter: function() {
		return new openfl_filters_BlurFilter(this.blurX,this.blurY,this.passes);
	}
	,get_type: function() {
		return format_swf_exporters_core_FilterType.BlurFilter(this.blurX,this.blurY,this.passes);
	}
	,parse: function(data) {
		this.blurX = format_swf__$SWFData_SWFData_$Impl_$.readFIXED(data);
		this.blurY = format_swf__$SWFData_SWFData_$Impl_$.readFIXED(data);
		this.passes = format_swf__$SWFData_SWFData_$Impl_$.readUI8(data) >> 3;
	}
	,publish: function(data) {
		format_swf__$SWFData_SWFData_$Impl_$.writeFIXED(data,this.blurX);
		format_swf__$SWFData_SWFData_$Impl_$.writeFIXED(data,this.blurY);
		format_swf__$SWFData_SWFData_$Impl_$.writeUI8(data,this.passes << 3);
	}
	,clone: function() {
		var filter = new format_swf_data_filters_FilterBlur(this.id);
		filter.blurX = this.blurX;
		filter.blurY = this.blurY;
		filter.passes = this.passes;
		return filter;
	}
	,toString: function(indent) {
		if(indent == null) {
			indent = 0;
		}
		return "[BlurFilter] " + "BlurX: " + this.blurX + ", " + "BlurY: " + this.blurY + ", " + "Passes: " + this.passes;
	}
	,__class__: format_swf_data_filters_FilterBlur
});
var format_swf_data_filters_FilterColorMatrix = function(id) {
	format_swf_data_filters_Filter.call(this,id);
	this.colorMatrix = [];
};
$hxClasses["format.swf.data.filters.FilterColorMatrix"] = format_swf_data_filters_FilterColorMatrix;
format_swf_data_filters_FilterColorMatrix.__name__ = ["format","swf","data","filters","FilterColorMatrix"];
format_swf_data_filters_FilterColorMatrix.__interfaces__ = [format_swf_data_filters_IFilter];
format_swf_data_filters_FilterColorMatrix.__super__ = format_swf_data_filters_Filter;
format_swf_data_filters_FilterColorMatrix.prototype = $extend(format_swf_data_filters_Filter.prototype,{
	colorMatrix: null
	,get_filter: function() {
		return new openfl_filters_ColorMatrixFilter([this.colorMatrix[0],this.colorMatrix[1],this.colorMatrix[2],this.colorMatrix[3],this.colorMatrix[4],this.colorMatrix[5],this.colorMatrix[6],this.colorMatrix[7],this.colorMatrix[8],this.colorMatrix[9],this.colorMatrix[10],this.colorMatrix[11],this.colorMatrix[12],this.colorMatrix[13],this.colorMatrix[14],this.colorMatrix[15],this.colorMatrix[16],this.colorMatrix[17],this.colorMatrix[18],this.colorMatrix[19]]);
	}
	,get_type: function() {
		return format_swf_exporters_core_FilterType.ColorMatrixFilter([this.colorMatrix[0],this.colorMatrix[1],this.colorMatrix[2],this.colorMatrix[3],this.colorMatrix[4],this.colorMatrix[5],this.colorMatrix[6],this.colorMatrix[7],this.colorMatrix[8],this.colorMatrix[9],this.colorMatrix[10],this.colorMatrix[11],this.colorMatrix[12],this.colorMatrix[13],this.colorMatrix[14],this.colorMatrix[15],this.colorMatrix[16],this.colorMatrix[17],this.colorMatrix[18],this.colorMatrix[19]]);
	}
	,parse: function(data) {
		var _g = 0;
		while(_g < 20) {
			++_g;
			this.colorMatrix.push(format_swf__$SWFData_SWFData_$Impl_$.readFLOAT(data));
		}
	}
	,publish: function(data) {
		var _g = 0;
		while(_g < 20) format_swf__$SWFData_SWFData_$Impl_$.writeFLOAT(data,this.colorMatrix[_g++]);
	}
	,clone: function() {
		var filter = new format_swf_data_filters_FilterColorMatrix(this.id);
		var _g = 0;
		while(_g < 20) filter.colorMatrix.push(this.colorMatrix[_g++]);
		return filter;
	}
	,toString: function(indent) {
		if(indent == null) {
			indent = 0;
		}
		var si = format_swf_utils_StringUtils.repeat(indent + 2);
		return "[ColorMatrixFilter]" + "\n" + si + "[R] " + this.colorMatrix[0] + ", " + this.colorMatrix[1] + ", " + this.colorMatrix[2] + ", " + this.colorMatrix[3] + ", " + this.colorMatrix[4] + "\n" + si + "[G] " + this.colorMatrix[5] + ", " + this.colorMatrix[6] + ", " + this.colorMatrix[7] + ", " + this.colorMatrix[8] + ", " + this.colorMatrix[9] + "\n" + si + "[B] " + this.colorMatrix[10] + ", " + this.colorMatrix[11] + ", " + this.colorMatrix[12] + ", " + this.colorMatrix[13] + ", " + this.colorMatrix[14] + "\n" + si + "[A] " + this.colorMatrix[15] + ", " + this.colorMatrix[16] + ", " + this.colorMatrix[17] + ", " + this.colorMatrix[18] + ", " + this.colorMatrix[19];
	}
	,__class__: format_swf_data_filters_FilterColorMatrix
});
var format_swf_data_filters_FilterConvolution = function(id) {
	format_swf_data_filters_Filter.call(this,id);
	this.matrix = [];
};
$hxClasses["format.swf.data.filters.FilterConvolution"] = format_swf_data_filters_FilterConvolution;
format_swf_data_filters_FilterConvolution.__name__ = ["format","swf","data","filters","FilterConvolution"];
format_swf_data_filters_FilterConvolution.__interfaces__ = [format_swf_data_filters_IFilter];
format_swf_data_filters_FilterConvolution.__super__ = format_swf_data_filters_Filter;
format_swf_data_filters_FilterConvolution.prototype = $extend(format_swf_data_filters_Filter.prototype,{
	matrixX: null
	,matrixY: null
	,divisor: null
	,bias: null
	,defaultColor: null
	,clamp: null
	,preserveAlpha: null
	,matrix: null
	,get_filter: function() {
		var convolutionMatrix = [];
		var _g1 = 0;
		var _g = this.matrix.length;
		while(_g1 < _g) convolutionMatrix.push(this.matrix[_g1++]);
		return new openfl_filters_BitmapFilter();
	}
	,parse: function(data) {
		this.matrixX = format_swf__$SWFData_SWFData_$Impl_$.readUI8(data);
		this.matrixY = format_swf__$SWFData_SWFData_$Impl_$.readUI8(data);
		this.divisor = format_swf__$SWFData_SWFData_$Impl_$.readFLOAT(data);
		this.bias = format_swf__$SWFData_SWFData_$Impl_$.readFLOAT(data);
		var len = this.matrixX * this.matrixY;
		var _g1 = 0;
		while(_g1 < len) {
			++_g1;
			this.matrix.push(format_swf__$SWFData_SWFData_$Impl_$.readFLOAT(data));
		}
		this.defaultColor = format_swf__$SWFData_SWFData_$Impl_$.readRGBA(data);
		var flags = format_swf__$SWFData_SWFData_$Impl_$.readUI8(data);
		this.clamp = (flags & 2) != 0;
		this.preserveAlpha = (flags & 1) != 0;
	}
	,publish: function(data) {
		format_swf__$SWFData_SWFData_$Impl_$.writeUI8(data,this.matrixX);
		format_swf__$SWFData_SWFData_$Impl_$.writeUI8(data,this.matrixY);
		format_swf__$SWFData_SWFData_$Impl_$.writeFLOAT(data,this.divisor);
		format_swf__$SWFData_SWFData_$Impl_$.writeFLOAT(data,this.bias);
		var len = this.matrixX * this.matrixY;
		var _g1 = 0;
		while(_g1 < len) format_swf__$SWFData_SWFData_$Impl_$.writeFLOAT(data,this.matrix[_g1++]);
		format_swf__$SWFData_SWFData_$Impl_$.writeRGBA(data,this.defaultColor);
		var flags = 0;
		if(this.clamp) {
			flags = 2;
		}
		if(this.preserveAlpha) {
			flags |= 1;
		}
		format_swf__$SWFData_SWFData_$Impl_$.writeUI8(data,flags);
	}
	,clone: function() {
		var filter = new format_swf_data_filters_FilterConvolution(this.id);
		filter.matrixX = this.matrixX;
		filter.matrixY = this.matrixY;
		filter.divisor = this.divisor;
		filter.bias = this.bias;
		var len = this.matrixX * this.matrixY;
		var _g1 = 0;
		while(_g1 < len) filter.matrix.push(this.matrix[_g1++]);
		filter.defaultColor = this.defaultColor;
		filter.clamp = this.clamp;
		filter.preserveAlpha = this.preserveAlpha;
		return filter;
	}
	,toString: function(indent) {
		if(indent == null) {
			indent = 0;
		}
		var str = "[ConvolutionFilter] " + "DefaultColor: " + format_swf_utils_ColorUtils.rgbToString(this.defaultColor) + ", " + "Divisor: " + this.divisor + ", " + "Bias: " + this.bias;
		var flags = [];
		if(this.clamp) {
			flags.push("Clamp");
		}
		if(this.preserveAlpha) {
			flags.push("PreserveAlpha");
		}
		if(flags.length > 0) {
			str += ", Flags: " + flags.join(", ");
		}
		if(this.matrix.length > 0) {
			str += "\n" + format_swf_utils_StringUtils.repeat(indent + 2) + "Matrix:";
			var _g1 = 0;
			var _g = this.matrixY;
			while(_g1 < _g) {
				var y = _g1++;
				str += "\n" + format_swf_utils_StringUtils.repeat(indent + 4) + "[" + y + "]";
				var _g3 = 0;
				var _g2 = this.matrixX;
				while(_g3 < _g2) {
					var x = _g3++;
					str += (x > 0 ? ", " : " ") + this.matrix[this.matrixX * y + x];
				}
			}
		}
		return str;
	}
	,__class__: format_swf_data_filters_FilterConvolution
});
var format_swf_data_filters_FilterDropShadow = function(id) {
	format_swf_data_filters_Filter.call(this,id);
};
$hxClasses["format.swf.data.filters.FilterDropShadow"] = format_swf_data_filters_FilterDropShadow;
format_swf_data_filters_FilterDropShadow.__name__ = ["format","swf","data","filters","FilterDropShadow"];
format_swf_data_filters_FilterDropShadow.__interfaces__ = [format_swf_data_filters_IFilter];
format_swf_data_filters_FilterDropShadow.__super__ = format_swf_data_filters_Filter;
format_swf_data_filters_FilterDropShadow.prototype = $extend(format_swf_data_filters_Filter.prototype,{
	dropShadowColor: null
	,blurX: null
	,blurY: null
	,angle: null
	,distance: null
	,strength: null
	,innerShadow: null
	,knockout: null
	,compositeSource: null
	,passes: null
	,get_filter: function() {
		return new openfl_filters_DropShadowFilter(this.distance,this.angle * 180 / Math.PI,format_swf_utils_ColorUtils.rgb(this.dropShadowColor),format_swf_utils_ColorUtils.alpha(this.dropShadowColor),this.blurX,this.blurY,this.strength,this.passes,this.innerShadow,this.knockout);
	}
	,get_type: function() {
		return format_swf_exporters_core_FilterType.DropShadowFilter(this.distance,this.angle * 180 / Math.PI,format_swf_utils_ColorUtils.rgb(this.dropShadowColor),format_swf_utils_ColorUtils.alpha(this.dropShadowColor),this.blurX,this.blurY,this.strength,this.passes,this.innerShadow,this.knockout,false);
	}
	,parse: function(data) {
		this.dropShadowColor = format_swf__$SWFData_SWFData_$Impl_$.readRGBA(data);
		this.blurX = format_swf__$SWFData_SWFData_$Impl_$.readFIXED(data);
		this.blurY = format_swf__$SWFData_SWFData_$Impl_$.readFIXED(data);
		this.angle = format_swf__$SWFData_SWFData_$Impl_$.readFIXED(data);
		this.distance = format_swf__$SWFData_SWFData_$Impl_$.readFIXED(data);
		this.strength = format_swf__$SWFData_SWFData_$Impl_$.readFIXED8(data);
		var flags = format_swf__$SWFData_SWFData_$Impl_$.readUI8(data);
		this.innerShadow = (flags & 128) != 0;
		this.knockout = (flags & 64) != 0;
		this.compositeSource = (flags & 32) != 0;
		this.passes = flags & 31;
	}
	,publish: function(data) {
		format_swf__$SWFData_SWFData_$Impl_$.writeRGBA(data,this.dropShadowColor);
		format_swf__$SWFData_SWFData_$Impl_$.writeFIXED(data,this.blurX);
		format_swf__$SWFData_SWFData_$Impl_$.writeFIXED(data,this.blurY);
		format_swf__$SWFData_SWFData_$Impl_$.writeFIXED(data,this.angle);
		format_swf__$SWFData_SWFData_$Impl_$.writeFIXED(data,this.distance);
		format_swf__$SWFData_SWFData_$Impl_$.writeFIXED8(data,this.strength);
		var flags = this.passes & 31;
		if(this.innerShadow) {
			flags |= 128;
		}
		if(this.knockout) {
			flags |= 64;
		}
		if(this.compositeSource) {
			flags |= 32;
		}
		format_swf__$SWFData_SWFData_$Impl_$.writeUI8(data,flags);
	}
	,clone: function() {
		var filter = new format_swf_data_filters_FilterDropShadow(this.id);
		filter.dropShadowColor = this.dropShadowColor;
		filter.blurX = this.blurX;
		filter.blurY = this.blurY;
		filter.angle = this.angle;
		filter.distance = this.distance;
		filter.strength = this.strength;
		filter.passes = this.passes;
		filter.innerShadow = this.innerShadow;
		filter.knockout = this.knockout;
		filter.compositeSource = this.compositeSource;
		return filter;
	}
	,toString: function(indent) {
		if(indent == null) {
			indent = 0;
		}
		var str = "[DropShadowFilter] " + "DropShadowColor: " + format_swf_utils_ColorUtils.rgbToString(this.dropShadowColor) + ", " + "BlurX: " + this.blurX + ", " + "BlurY: " + this.blurY + ", " + "Angle: " + this.angle + ", " + "Distance: " + this.distance + ", " + "Strength: " + this.strength + ", " + "Passes: " + this.passes;
		var flags = [];
		if(this.innerShadow) {
			flags.push("InnerShadow");
		}
		if(this.knockout) {
			flags.push("Knockout");
		}
		if(this.compositeSource) {
			flags.push("CompositeSource");
		}
		if(flags.length > 0) {
			str += ", Flags: " + flags.join(", ");
		}
		return str;
	}
	,__class__: format_swf_data_filters_FilterDropShadow
});
var format_swf_data_filters_FilterGlow = function(id) {
	format_swf_data_filters_Filter.call(this,id);
};
$hxClasses["format.swf.data.filters.FilterGlow"] = format_swf_data_filters_FilterGlow;
format_swf_data_filters_FilterGlow.__name__ = ["format","swf","data","filters","FilterGlow"];
format_swf_data_filters_FilterGlow.__interfaces__ = [format_swf_data_filters_IFilter];
format_swf_data_filters_FilterGlow.__super__ = format_swf_data_filters_Filter;
format_swf_data_filters_FilterGlow.prototype = $extend(format_swf_data_filters_Filter.prototype,{
	glowColor: null
	,blurX: null
	,blurY: null
	,strength: null
	,innerGlow: null
	,knockout: null
	,compositeSource: null
	,passes: null
	,get_filter: function() {
		return new openfl_filters_GlowFilter(format_swf_utils_ColorUtils.rgb(this.glowColor),format_swf_utils_ColorUtils.alpha(this.glowColor),this.blurX,this.blurY,this.strength,this.passes,this.innerGlow,this.knockout);
	}
	,get_type: function() {
		return format_swf_exporters_core_FilterType.GlowFilter(format_swf_utils_ColorUtils.rgb(this.glowColor),format_swf_utils_ColorUtils.alpha(this.glowColor),this.blurX,this.blurY,this.strength,this.passes,this.innerGlow,this.knockout);
	}
	,parse: function(data) {
		this.glowColor = format_swf__$SWFData_SWFData_$Impl_$.readRGBA(data);
		this.blurX = format_swf__$SWFData_SWFData_$Impl_$.readFIXED(data);
		this.blurY = format_swf__$SWFData_SWFData_$Impl_$.readFIXED(data);
		this.strength = format_swf__$SWFData_SWFData_$Impl_$.readFIXED8(data);
		var flags = format_swf__$SWFData_SWFData_$Impl_$.readUI8(data);
		this.innerGlow = (flags & 128) != 0;
		this.knockout = (flags & 64) != 0;
		this.compositeSource = (flags & 32) != 0;
		this.passes = flags & 31;
	}
	,publish: function(data) {
		format_swf__$SWFData_SWFData_$Impl_$.writeRGBA(data,this.glowColor);
		format_swf__$SWFData_SWFData_$Impl_$.writeFIXED(data,this.blurX);
		format_swf__$SWFData_SWFData_$Impl_$.writeFIXED(data,this.blurY);
		format_swf__$SWFData_SWFData_$Impl_$.writeFIXED8(data,this.strength);
		var flags = this.passes & 31;
		if(this.innerGlow) {
			flags |= 128;
		}
		if(this.knockout) {
			flags |= 64;
		}
		if(this.compositeSource) {
			flags |= 32;
		}
		format_swf__$SWFData_SWFData_$Impl_$.writeUI8(data,flags);
	}
	,clone: function() {
		var filter = new format_swf_data_filters_FilterGlow(this.id);
		filter.glowColor = this.glowColor;
		filter.blurX = this.blurX;
		filter.blurY = this.blurY;
		filter.strength = this.strength;
		filter.passes = this.passes;
		filter.innerGlow = this.innerGlow;
		filter.knockout = this.knockout;
		filter.compositeSource = this.compositeSource;
		return filter;
	}
	,toString: function(indent) {
		if(indent == null) {
			indent = 0;
		}
		var str = "[GlowFilter] " + "GlowColor: " + format_swf_utils_ColorUtils.rgbToString(this.glowColor) + ", " + "BlurX: " + this.blurX + ", " + "BlurY: " + this.blurY + ", " + "Strength: " + this.strength + ", " + "Passes: " + this.passes;
		var flags = [];
		if(this.innerGlow) {
			flags.push("InnerGlow");
		}
		if(this.knockout) {
			flags.push("Knockout");
		}
		if(this.compositeSource) {
			flags.push("CompositeSource");
		}
		if(flags.length > 0) {
			str += ", Flags: " + flags.join(", ");
		}
		return str;
	}
	,__class__: format_swf_data_filters_FilterGlow
});
var format_swf_data_filters_FilterGradientGlow = function(id) {
	format_swf_data_filters_Filter.call(this,id);
	this.gradientColors = [];
	this.gradientRatios = [];
};
$hxClasses["format.swf.data.filters.FilterGradientGlow"] = format_swf_data_filters_FilterGradientGlow;
format_swf_data_filters_FilterGradientGlow.__name__ = ["format","swf","data","filters","FilterGradientGlow"];
format_swf_data_filters_FilterGradientGlow.__interfaces__ = [format_swf_data_filters_IFilter];
format_swf_data_filters_FilterGradientGlow.__super__ = format_swf_data_filters_Filter;
format_swf_data_filters_FilterGradientGlow.prototype = $extend(format_swf_data_filters_Filter.prototype,{
	numColors: null
	,blurX: null
	,blurY: null
	,angle: null
	,distance: null
	,strength: null
	,innerShadow: null
	,knockout: null
	,compositeSource: null
	,onTop: null
	,passes: null
	,gradientColors: null
	,gradientRatios: null
	,filterName: null
	,get_filter: function() {
		var gradientGlowColors = [];
		var gradientGlowAlphas = [];
		var gradientGlowRatios = [];
		var _g1 = 0;
		var _g = this.numColors;
		while(_g1 < _g) {
			var i = _g1++;
			gradientGlowColors.push(format_swf_utils_ColorUtils.rgb(this.gradientColors[i]));
			gradientGlowAlphas.push(format_swf_utils_ColorUtils.alpha(this.gradientColors[i]));
			gradientGlowRatios.push(this.gradientRatios[i]);
		}
		return new openfl_filters_BitmapFilter();
	}
	,parse: function(data) {
		this.numColors = format_swf__$SWFData_SWFData_$Impl_$.readUI8(data);
		var _g1 = 0;
		var _g = this.numColors;
		while(_g1 < _g) {
			++_g1;
			this.gradientColors.push(format_swf__$SWFData_SWFData_$Impl_$.readRGBA(data));
		}
		var _g11 = 0;
		var _g2 = this.numColors;
		while(_g11 < _g2) {
			++_g11;
			this.gradientRatios.push(format_swf__$SWFData_SWFData_$Impl_$.readUI8(data));
		}
		this.blurX = format_swf__$SWFData_SWFData_$Impl_$.readFIXED(data);
		this.blurY = format_swf__$SWFData_SWFData_$Impl_$.readFIXED(data);
		this.angle = format_swf__$SWFData_SWFData_$Impl_$.readFIXED(data);
		this.distance = format_swf__$SWFData_SWFData_$Impl_$.readFIXED(data);
		this.strength = format_swf__$SWFData_SWFData_$Impl_$.readFIXED8(data);
		var flags = format_swf__$SWFData_SWFData_$Impl_$.readUI8(data);
		this.innerShadow = (flags & 128) != 0;
		this.knockout = (flags & 64) != 0;
		this.compositeSource = (flags & 32) != 0;
		this.onTop = (flags & 16) != 0;
		this.passes = flags & 15;
	}
	,publish: function(data) {
		format_swf__$SWFData_SWFData_$Impl_$.writeUI8(data,this.numColors);
		var _g1 = 0;
		var _g = this.numColors;
		while(_g1 < _g) format_swf__$SWFData_SWFData_$Impl_$.writeRGBA(data,this.gradientColors[_g1++]);
		var _g11 = 0;
		var _g2 = this.numColors;
		while(_g11 < _g2) format_swf__$SWFData_SWFData_$Impl_$.writeUI8(data,this.gradientRatios[_g11++]);
		format_swf__$SWFData_SWFData_$Impl_$.writeFIXED(data,this.blurX);
		format_swf__$SWFData_SWFData_$Impl_$.writeFIXED(data,this.blurY);
		format_swf__$SWFData_SWFData_$Impl_$.writeFIXED(data,this.angle);
		format_swf__$SWFData_SWFData_$Impl_$.writeFIXED(data,this.distance);
		format_swf__$SWFData_SWFData_$Impl_$.writeFIXED8(data,this.strength);
		var flags = this.passes & 15;
		if(this.innerShadow) {
			flags |= 128;
		}
		if(this.knockout) {
			flags |= 64;
		}
		if(this.compositeSource) {
			flags |= 32;
		}
		if(this.onTop) {
			flags |= 16;
		}
		format_swf__$SWFData_SWFData_$Impl_$.writeUI8(data,flags);
	}
	,clone: function() {
		var filter = new format_swf_data_filters_FilterGradientGlow(this.id);
		filter.numColors = this.numColors;
		var _g1 = 0;
		var _g = this.numColors;
		while(_g1 < _g) filter.gradientColors.push(this.gradientColors[_g1++]);
		var _g11 = 0;
		var _g2 = this.numColors;
		while(_g11 < _g2) filter.gradientRatios.push(this.gradientRatios[_g11++]);
		filter.blurX = this.blurX;
		filter.blurY = this.blurY;
		filter.angle = this.angle;
		filter.distance = this.distance;
		filter.strength = this.strength;
		filter.passes = this.passes;
		filter.innerShadow = this.innerShadow;
		filter.knockout = this.knockout;
		filter.compositeSource = this.compositeSource;
		filter.onTop = this.onTop;
		return filter;
	}
	,toString: function(indent) {
		if(indent == null) {
			indent = 0;
		}
		var str = "[" + this.get_filterName() + "] " + "BlurX: " + this.blurX + ", " + "BlurY: " + this.blurY + ", " + "Angle: " + this.angle + ", " + "Distance: " + this.distance + ", " + "Strength: " + this.strength + ", " + "Passes: " + this.passes;
		var flags = [];
		if(this.innerShadow) {
			flags.push("InnerShadow");
		}
		if(this.knockout) {
			flags.push("Knockout");
		}
		if(this.compositeSource) {
			flags.push("CompositeSource");
		}
		if(this.onTop) {
			flags.push("OnTop");
		}
		if(flags.length > 0) {
			str += ", Flags: " + flags.join(", ");
		}
		if(this.gradientColors.length > 0) {
			str += "\n" + format_swf_utils_StringUtils.repeat(indent + 2) + "GradientColors:";
			var _g1 = 0;
			var _g = this.gradientColors.length;
			while(_g1 < _g) {
				var i = _g1++;
				str += (i > 0 ? ", " : " ") + format_swf_utils_ColorUtils.rgbToString(this.gradientColors[i]);
			}
		}
		if(this.gradientRatios.length > 0) {
			str += "\n" + format_swf_utils_StringUtils.repeat(indent + 2) + "GradientRatios:";
			var _g11 = 0;
			var _g2 = this.gradientRatios.length;
			while(_g11 < _g2) {
				var i1 = _g11++;
				str += (i1 > 0 ? ", " : " ") + this.gradientRatios[i1];
			}
		}
		return str;
	}
	,get_filterName: function() {
		return "GradientGlowFilter";
	}
	,__class__: format_swf_data_filters_FilterGradientGlow
	,__properties__: $extend(format_swf_data_filters_Filter.prototype.__properties__,{get_filterName:"get_filterName"})
});
var format_swf_data_filters_FilterGradientBevel = function(id) {
	format_swf_data_filters_FilterGradientGlow.call(this,id);
};
$hxClasses["format.swf.data.filters.FilterGradientBevel"] = format_swf_data_filters_FilterGradientBevel;
format_swf_data_filters_FilterGradientBevel.__name__ = ["format","swf","data","filters","FilterGradientBevel"];
format_swf_data_filters_FilterGradientBevel.__interfaces__ = [format_swf_data_filters_IFilter];
format_swf_data_filters_FilterGradientBevel.__super__ = format_swf_data_filters_FilterGradientGlow;
format_swf_data_filters_FilterGradientBevel.prototype = $extend(format_swf_data_filters_FilterGradientGlow.prototype,{
	get_filter: function() {
		var gradientGlowColors = [];
		var gradientGlowAlphas = [];
		var gradientGlowRatios = [];
		var _g1 = 0;
		var _g = this.numColors;
		while(_g1 < _g) {
			var i = _g1++;
			gradientGlowColors.push(format_swf_utils_ColorUtils.rgb(this.gradientColors[i]));
			gradientGlowAlphas.push(format_swf_utils_ColorUtils.alpha(this.gradientColors[i]));
			gradientGlowRatios.push(this.gradientRatios[i]);
		}
		return new openfl_filters_BitmapFilter();
	}
	,clone: function() {
		var filter = new format_swf_data_filters_FilterGradientBevel(this.id);
		filter.numColors = this.numColors;
		var _g1 = 0;
		var _g = this.numColors;
		while(_g1 < _g) filter.gradientColors.push(this.gradientColors[_g1++]);
		var _g11 = 0;
		var _g2 = this.numColors;
		while(_g11 < _g2) filter.gradientRatios.push(this.gradientRatios[_g11++]);
		filter.blurX = this.blurX;
		filter.blurY = this.blurY;
		filter.angle = this.angle;
		filter.distance = this.distance;
		filter.strength = this.strength;
		filter.passes = this.passes;
		filter.innerShadow = this.innerShadow;
		filter.knockout = this.knockout;
		filter.compositeSource = this.compositeSource;
		filter.onTop = this.onTop;
		return filter;
	}
	,get_filterName: function() {
		return "GradientBevelFilter";
	}
	,__class__: format_swf_data_filters_FilterGradientBevel
});
var openfl_events_Event = function(type,bubbles,cancelable) {
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = false;
	}
	this.type = type;
	this.bubbles = bubbles;
	this.cancelable = cancelable;
	this.eventPhase = 2;
};
$hxClasses["openfl.events.Event"] = openfl_events_Event;
openfl_events_Event.__name__ = ["openfl","events","Event"];
openfl_events_Event.prototype = {
	bubbles: null
	,cancelable: null
	,currentTarget: null
	,eventPhase: null
	,target: null
	,type: null
	,__isCanceled: null
	,__isCanceledNow: null
	,__preventDefault: null
	,clone: function() {
		var event = new openfl_events_Event(this.type,this.bubbles,this.cancelable);
		event.eventPhase = this.eventPhase;
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		return event;
	}
	,formatToString: function(className,p1,p2,p3,p4,p5) {
		var parameters = [];
		if(p1 != null) {
			parameters.push(p1);
		}
		if(p2 != null) {
			parameters.push(p2);
		}
		if(p3 != null) {
			parameters.push(p3);
		}
		if(p4 != null) {
			parameters.push(p4);
		}
		if(p5 != null) {
			parameters.push(p5);
		}
		return $bind(this,this.__formatToString).apply(this,[className,parameters]);
	}
	,isDefaultPrevented: function() {
		return this.__preventDefault;
	}
	,preventDefault: function() {
		if(this.cancelable) {
			this.__preventDefault = true;
		}
	}
	,stopImmediatePropagation: function() {
		this.__isCanceled = true;
		this.__isCanceledNow = true;
	}
	,stopPropagation: function() {
		this.__isCanceled = true;
	}
	,toString: function() {
		return this.__formatToString("Event",["type","bubbles","cancelable"]);
	}
	,__formatToString: function(className,parameters) {
		var output = "[" + className;
		var arg = null;
		var _g = 0;
		while(_g < parameters.length) {
			var param = parameters[_g];
			++_g;
			arg = Reflect.field(this,param);
			if(typeof(arg) == "string") {
				output += " " + param + "=\"" + Std.string(arg) + "\"";
			} else {
				output += " " + param + "=" + Std.string(arg);
			}
		}
		output += "]";
		return output;
	}
	,__class__: openfl_events_Event
};
var format_swf_events_SWFErrorEvent = function(type,reason,bubbles,cancelable) {
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = false;
	}
	openfl_events_Event.call(this,type,bubbles,cancelable);
	this.reason = reason;
};
$hxClasses["format.swf.events.SWFErrorEvent"] = format_swf_events_SWFErrorEvent;
format_swf_events_SWFErrorEvent.__name__ = ["format","swf","events","SWFErrorEvent"];
format_swf_events_SWFErrorEvent.__super__ = openfl_events_Event;
format_swf_events_SWFErrorEvent.prototype = $extend(openfl_events_Event.prototype,{
	reason: null
	,clone: function() {
		return new format_swf_events_SWFErrorEvent(this.type,this.reason,this.bubbles,this.cancelable);
	}
	,toString: function() {
		return "[SWFErrorEvent] reason: " + this.reason;
	}
	,__class__: format_swf_events_SWFErrorEvent
});
var format_swf_events_SWFProgressEvent = function(type,processed,total,bubbles,cancelable) {
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = false;
	}
	openfl_events_Event.call(this,type,bubbles,cancelable);
	this.processed = processed;
	this.total = total;
};
$hxClasses["format.swf.events.SWFProgressEvent"] = format_swf_events_SWFProgressEvent;
format_swf_events_SWFProgressEvent.__name__ = ["format","swf","events","SWFProgressEvent"];
format_swf_events_SWFProgressEvent.__super__ = openfl_events_Event;
format_swf_events_SWFProgressEvent.prototype = $extend(openfl_events_Event.prototype,{
	progress: null
	,progressPercent: null
	,processed: null
	,total: null
	,get_progress: function() {
		return this.processed / this.total;
	}
	,get_progressPercent: function() {
		return Math.round(this.get_progress() * 100);
	}
	,clone: function() {
		return new format_swf_events_SWFProgressEvent(this.type,this.processed,this.total,this.bubbles,this.cancelable);
	}
	,toString: function() {
		return "[SWFProgressEvent] processed: " + this.processed + ", total: " + this.total + " (" + this.get_progressPercent() + "%)";
	}
	,__class__: format_swf_events_SWFProgressEvent
	,__properties__: {get_progressPercent:"get_progressPercent",get_progress:"get_progress"}
});
var format_swf_events_SWFWarningEvent = function(type,index,data,bubbles,cancelable) {
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = false;
	}
	openfl_events_Event.call(this,type,bubbles,cancelable);
	this.index = index;
	this.data = data;
};
$hxClasses["format.swf.events.SWFWarningEvent"] = format_swf_events_SWFWarningEvent;
format_swf_events_SWFWarningEvent.__name__ = ["format","swf","events","SWFWarningEvent"];
format_swf_events_SWFWarningEvent.__super__ = openfl_events_Event;
format_swf_events_SWFWarningEvent.prototype = $extend(openfl_events_Event.prototype,{
	index: null
	,data: null
	,clone: function() {
		return new format_swf_events_SWFWarningEvent(this.type,this.index,this.data,this.bubbles,this.cancelable);
	}
	,toString: function() {
		return "[SWFWarningEvent] index: " + this.index;
	}
	,__class__: format_swf_events_SWFWarningEvent
});
var format_swf_exporters_core_IShapeExporter = function() { };
$hxClasses["format.swf.exporters.core.IShapeExporter"] = format_swf_exporters_core_IShapeExporter;
format_swf_exporters_core_IShapeExporter.__name__ = ["format","swf","exporters","core","IShapeExporter"];
format_swf_exporters_core_IShapeExporter.prototype = {
	beginShape: null
	,endShape: null
	,beginFills: null
	,endFills: null
	,beginLines: null
	,endLines: null
	,beginFill: null
	,beginGradientFill: null
	,beginBitmapFill: null
	,endFill: null
	,lineStyle: null
	,lineGradientStyle: null
	,moveTo: null
	,lineTo: null
	,curveTo: null
	,__class__: format_swf_exporters_core_IShapeExporter
};
var format_swf_exporters_core_DefaultShapeExporter = function(swf) {
	this.swf = swf;
};
$hxClasses["format.swf.exporters.core.DefaultShapeExporter"] = format_swf_exporters_core_DefaultShapeExporter;
format_swf_exporters_core_DefaultShapeExporter.__name__ = ["format","swf","exporters","core","DefaultShapeExporter"];
format_swf_exporters_core_DefaultShapeExporter.__interfaces__ = [format_swf_exporters_core_IShapeExporter];
format_swf_exporters_core_DefaultShapeExporter.prototype = {
	swf: null
	,beginShape: function() {
	}
	,endShape: function() {
	}
	,beginFills: function() {
	}
	,endFills: function() {
	}
	,beginLines: function() {
	}
	,endLines: function() {
	}
	,beginFill: function(color,alpha) {
		if(alpha == null) {
			alpha = 1.0;
		}
	}
	,beginGradientFill: function(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio) {
		if(focalPointRatio == null) {
			focalPointRatio = 0;
		}
	}
	,beginBitmapFill: function(bitmapId,matrix,repeat,smooth) {
		if(smooth == null) {
			smooth = false;
		}
		if(repeat == null) {
			repeat = true;
		}
	}
	,endFill: function() {
	}
	,lineStyle: function(thickness,color,alpha,pixelHinting,scaleMode,startCaps,endCaps,joints,miterLimit) {
		if(miterLimit == null) {
			miterLimit = 3;
		}
		if(pixelHinting == null) {
			pixelHinting = false;
		}
		if(alpha == null) {
			alpha = 1.0;
		}
		if(color == null) {
			color = 0;
		}
		if(thickness == null) {
			thickness = 0;
		}
	}
	,lineGradientStyle: function(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio) {
		if(focalPointRatio == null) {
			focalPointRatio = 0;
		}
	}
	,moveTo: function(x,y) {
	}
	,lineTo: function(x,y) {
	}
	,curveTo: function(controlX,controlY,anchorX,anchorY) {
	}
	,__class__: format_swf_exporters_core_DefaultShapeExporter
};
var format_swf_exporters_ShapeCommandExporter = function(swf) {
	format_swf_exporters_core_DefaultShapeExporter.call(this,swf);
	this.commands = [];
};
$hxClasses["format.swf.exporters.ShapeCommandExporter"] = format_swf_exporters_ShapeCommandExporter;
format_swf_exporters_ShapeCommandExporter.__name__ = ["format","swf","exporters","ShapeCommandExporter"];
format_swf_exporters_ShapeCommandExporter.__super__ = format_swf_exporters_core_DefaultShapeExporter;
format_swf_exporters_ShapeCommandExporter.prototype = $extend(format_swf_exporters_core_DefaultShapeExporter.prototype,{
	commands: null
	,beginShape: function() {
		this.commands = [];
	}
	,beginFills: function() {
		this.commands.push(format_swf_exporters_core_ShapeCommand.LineStyle(null,null,null,null,null,null,null,null));
	}
	,beginLines: function() {
	}
	,beginFill: function(color,alpha) {
		if(alpha == null) {
			alpha = 1.0;
		}
		this.commands.push(format_swf_exporters_core_ShapeCommand.BeginFill(color,alpha));
	}
	,beginGradientFill: function(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio) {
		if(focalPointRatio == null) {
			focalPointRatio = 0;
		}
		this.commands.push(format_swf_exporters_core_ShapeCommand.BeginGradientFill(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio));
	}
	,beginBitmapFill: function(bitmapId,matrix,repeat,smooth) {
		if(smooth == null) {
			smooth = false;
		}
		if(repeat == null) {
			repeat = true;
		}
		this.commands.push(format_swf_exporters_core_ShapeCommand.BeginBitmapFill(bitmapId,matrix,repeat,smooth));
	}
	,endFill: function() {
		this.commands.push(format_swf_exporters_core_ShapeCommand.EndFill);
	}
	,lineStyle: function(thickness,color,alpha,pixelHinting,scaleMode,startCaps,endCaps,joints,miterLimit) {
		if(miterLimit == null) {
			miterLimit = 3;
		}
		if(pixelHinting == null) {
			pixelHinting = false;
		}
		if(alpha == null) {
			alpha = 1.0;
		}
		if(color == null) {
			color = 0;
		}
		if(thickness == null) {
			thickness = 0;
		}
		this.commands.push(format_swf_exporters_core_ShapeCommand.LineStyle(thickness,color,alpha,pixelHinting,scaleMode,startCaps,joints,miterLimit));
	}
	,moveTo: function(x,y) {
		this.commands.push(format_swf_exporters_core_ShapeCommand.MoveTo(x,y));
	}
	,lineTo: function(x,y) {
		this.commands.push(format_swf_exporters_core_ShapeCommand.LineTo(x,y));
	}
	,curveTo: function(controlX,controlY,anchorX,anchorY) {
		this.commands.push(format_swf_exporters_core_ShapeCommand.CurveTo(controlX,controlY,anchorX,anchorY));
	}
	,__class__: format_swf_exporters_ShapeCommandExporter
});
var format_swf_exporters_core_FilterType = $hxClasses["format.swf.exporters.core.FilterType"] = { __ename__ : ["format","swf","exporters","core","FilterType"], __constructs__ : ["BlurFilter","ColorMatrixFilter","DropShadowFilter","GlowFilter"] };
format_swf_exporters_core_FilterType.BlurFilter = function(blurX,blurY,quality) { var $x = ["BlurFilter",0,blurX,blurY,quality]; $x.__enum__ = format_swf_exporters_core_FilterType; $x.toString = $estr; return $x; };
format_swf_exporters_core_FilterType.ColorMatrixFilter = function(matrix) { var $x = ["ColorMatrixFilter",1,matrix]; $x.__enum__ = format_swf_exporters_core_FilterType; $x.toString = $estr; return $x; };
format_swf_exporters_core_FilterType.DropShadowFilter = function(distance,angle,color,alpha,blurX,blurY,strength,quality,inner,knockout,hideObject) { var $x = ["DropShadowFilter",2,distance,angle,color,alpha,blurX,blurY,strength,quality,inner,knockout,hideObject]; $x.__enum__ = format_swf_exporters_core_FilterType; $x.toString = $estr; return $x; };
format_swf_exporters_core_FilterType.GlowFilter = function(color,alpha,blurX,blurY,strength,quality,inner,knockout) { var $x = ["GlowFilter",3,color,alpha,blurX,blurY,strength,quality,inner,knockout]; $x.__enum__ = format_swf_exporters_core_FilterType; $x.toString = $estr; return $x; };
format_swf_exporters_core_FilterType.__empty_constructs__ = [];
var format_swf_exporters_core_ShapeCommand = $hxClasses["format.swf.exporters.core.ShapeCommand"] = { __ename__ : ["format","swf","exporters","core","ShapeCommand"], __constructs__ : ["BeginBitmapFill","BeginFill","BeginGradientFill","CurveTo","EndFill","LineStyle","LineTo","MoveTo"] };
format_swf_exporters_core_ShapeCommand.BeginBitmapFill = function(bitmap,matrix,repeat,smooth) { var $x = ["BeginBitmapFill",0,bitmap,matrix,repeat,smooth]; $x.__enum__ = format_swf_exporters_core_ShapeCommand; $x.toString = $estr; return $x; };
format_swf_exporters_core_ShapeCommand.BeginFill = function(color,alpha) { var $x = ["BeginFill",1,color,alpha]; $x.__enum__ = format_swf_exporters_core_ShapeCommand; $x.toString = $estr; return $x; };
format_swf_exporters_core_ShapeCommand.BeginGradientFill = function(fillType,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio) { var $x = ["BeginGradientFill",2,fillType,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio]; $x.__enum__ = format_swf_exporters_core_ShapeCommand; $x.toString = $estr; return $x; };
format_swf_exporters_core_ShapeCommand.CurveTo = function(controlX,controlY,anchorX,anchorY) { var $x = ["CurveTo",3,controlX,controlY,anchorX,anchorY]; $x.__enum__ = format_swf_exporters_core_ShapeCommand; $x.toString = $estr; return $x; };
format_swf_exporters_core_ShapeCommand.EndFill = ["EndFill",4];
format_swf_exporters_core_ShapeCommand.EndFill.toString = $estr;
format_swf_exporters_core_ShapeCommand.EndFill.__enum__ = format_swf_exporters_core_ShapeCommand;
format_swf_exporters_core_ShapeCommand.LineStyle = function(thickness,color,alpha,pixelHinting,scaleMode,caps,joints,miterLimit) { var $x = ["LineStyle",5,thickness,color,alpha,pixelHinting,scaleMode,caps,joints,miterLimit]; $x.__enum__ = format_swf_exporters_core_ShapeCommand; $x.toString = $estr; return $x; };
format_swf_exporters_core_ShapeCommand.LineTo = function(x,y) { var $x = ["LineTo",6,x,y]; $x.__enum__ = format_swf_exporters_core_ShapeCommand; $x.toString = $estr; return $x; };
format_swf_exporters_core_ShapeCommand.MoveTo = function(x,y) { var $x = ["MoveTo",7,x,y]; $x.__enum__ = format_swf_exporters_core_ShapeCommand; $x.toString = $estr; return $x; };
format_swf_exporters_core_ShapeCommand.__empty_constructs__ = [format_swf_exporters_core_ShapeCommand.EndFill];
var format_swf_factories_ISWFTagFactory = function() { };
$hxClasses["format.swf.factories.ISWFTagFactory"] = format_swf_factories_ISWFTagFactory;
format_swf_factories_ISWFTagFactory.__name__ = ["format","swf","factories","ISWFTagFactory"];
format_swf_factories_ISWFTagFactory.prototype = {
	create: null
	,__class__: format_swf_factories_ISWFTagFactory
};
var format_swf_factories_SWFActionFactory = function() { };
$hxClasses["format.swf.factories.SWFActionFactory"] = format_swf_factories_SWFActionFactory;
format_swf_factories_SWFActionFactory.__name__ = ["format","swf","factories","SWFActionFactory"];
format_swf_factories_SWFActionFactory.create = function(code,length,pos) {
	if(code == 7) {
		return new format_swf_data_actions_swf3_ActionStop(code,length,pos);
	} else {
		return new format_swf_data_actions_ActionUnknown(code,length,pos);
	}
};
var format_swf_factories_SWFFilterFactory = function() { };
$hxClasses["format.swf.factories.SWFFilterFactory"] = format_swf_factories_SWFFilterFactory;
format_swf_factories_SWFFilterFactory.__name__ = ["format","swf","factories","SWFFilterFactory"];
format_swf_factories_SWFFilterFactory.create = function(id) {
	switch(id) {
	case 0:
		return new format_swf_data_filters_FilterDropShadow(id);
	case 1:
		return new format_swf_data_filters_FilterBlur(id);
	case 2:
		return new format_swf_data_filters_FilterGlow(id);
	case 3:
		return new format_swf_data_filters_FilterBevel(id);
	case 4:
		return new format_swf_data_filters_FilterGradientGlow(id);
	case 5:
		return new format_swf_data_filters_FilterConvolution(id);
	case 6:
		return new format_swf_data_filters_FilterColorMatrix(id);
	case 7:
		return new format_swf_data_filters_FilterGradientBevel(id);
	default:
		throw new js__$Boot_HaxeError(new openfl_errors_Error("Unknown filter ID: " + id));
	}
};
var format_swf_factories_SWFTagFactory = function() {
};
$hxClasses["format.swf.factories.SWFTagFactory"] = format_swf_factories_SWFTagFactory;
format_swf_factories_SWFTagFactory.__name__ = ["format","swf","factories","SWFTagFactory"];
format_swf_factories_SWFTagFactory.__interfaces__ = [format_swf_factories_ISWFTagFactory];
format_swf_factories_SWFTagFactory.prototype = {
	create: function(type) {
		switch(type) {
		case 0:
			return this.createTagEnd();
		case 1:
			return this.createTagShowFrame();
		case 2:
			return this.createTagDefineShape();
		case 4:
			return this.createTagPlaceObject();
		case 5:
			return this.createTagRemoveObject();
		case 6:
			return this.createTagDefineBits();
		case 7:
			return this.createTagDefineButton();
		case 8:
			return this.createTagJPEGTables();
		case 9:
			return this.createTagSetBackgroundColor();
		case 10:
			return this.createTagDefineFont();
		case 11:
			return this.createTagDefineText();
		case 12:
			return this.createTagDoAction();
		case 13:
			return this.createTagDefineFontInfo();
		case 14:
			return this.createTagDefineSound();
		case 15:
			return this.createTagStartSound();
		case 17:
			return this.createTagDefineButtonSound();
		case 18:
			return this.createTagSoundStreamHead();
		case 19:
			return this.createTagSoundStreamBlock();
		case 20:
			return this.createTagDefineBitsLossless();
		case 21:
			return this.createTagDefineBitsJPEG2();
		case 22:
			return this.createTagDefineShape2();
		case 23:
			return this.createTagDefineButtonCxform();
		case 24:
			return this.createTagProtect();
		case 26:
			return this.createTagPlaceObject2();
		case 28:
			return this.createTagRemoveObject2();
		case 32:
			return this.createTagDefineShape3();
		case 33:
			return this.createTagDefineText2();
		case 34:
			return this.createTagDefineButton2();
		case 35:
			return this.createTagDefineBitsJPEG3();
		case 36:
			return this.createTagDefineBitsLossless2();
		case 37:
			return this.createTagDefineEditText();
		case 39:
			return this.createTagDefineSprite();
		case 40:
			return this.createTagNameCharacter();
		case 41:
			return this.createTagProductInfo();
		case 43:
			return this.createTagFrameLabel();
		case 45:
			return this.createTagSoundStreamHead2();
		case 46:
			return this.createTagDefineMorphShape();
		case 48:
			return this.createTagDefineFont2();
		case 56:
			return this.createTagExportAssets();
		case 57:
			return this.createTagImportAssets();
		case 58:
			return this.createTagEnableDebugger();
		case 59:
			return this.createTagDoInitAction();
		case 60:
			return this.createTagDefineVideoStream();
		case 61:
			return this.createTagVideoFrame();
		case 62:
			return this.createTagDefineFontInfo2();
		case 63:
			return this.createTagDebugID();
		case 64:
			return this.createTagEnableDebugger2();
		case 65:
			return this.createTagScriptLimits();
		case 66:
			return this.createTagSetTabIndex();
		case 69:
			return this.createTagFileAttributes();
		case 70:
			return this.createTagPlaceObject3();
		case 71:
			return this.createTagImportAssets2();
		case 72:
			return this.createTagDoABCDeprecated();
		case 73:
			return this.createTagDefineFontAlignZones();
		case 74:
			return this.createTagCSMTextSettings();
		case 75:
			return this.createTagDefineFont3();
		case 76:
			return this.createTagSymbolClass();
		case 77:
			return this.createTagMetadata();
		case 78:
			return this.createTagDefineScalingGrid();
		case 82:
			return this.createTagDoABC();
		case 83:
			return this.createTagDefineShape4();
		case 84:
			return this.createTagDefineMorphShape2();
		case 86:
			return this.createTagDefineSceneAndFrameLabelData();
		case 87:
			return this.createTagDefineBinaryData();
		case 88:
			return this.createTagDefineFontName();
		case 89:
			return this.createTagStartSound2();
		case 90:
			return this.createTagDefineBitsJPEG4();
		case 91:
			return this.createTagDefineFont4();
		case 93:
			return this.createTagEnableTelemetry();
		case 94:
			return this.createTagPlaceObject4();
		case 253:
			return this.createTagSWFEncryptActions();
		case 255:
			return this.createTagSWFEncryptSignature();
		default:
			return this.createTagUnknown(type);
		}
	}
	,createTagEnd: function() {
		return new format_swf_tags_TagEnd();
	}
	,createTagShowFrame: function() {
		return new format_swf_tags_TagShowFrame();
	}
	,createTagDefineShape: function() {
		return new format_swf_tags_TagDefineShape();
	}
	,createTagPlaceObject: function() {
		return new format_swf_tags_TagPlaceObject();
	}
	,createTagRemoveObject: function() {
		return new format_swf_tags_TagRemoveObject();
	}
	,createTagDefineBits: function() {
		return new format_swf_tags_TagDefineBits();
	}
	,createTagDefineButton: function() {
		return new format_swf_tags_TagDefineButton();
	}
	,createTagJPEGTables: function() {
		return new format_swf_tags_TagJPEGTables();
	}
	,createTagSetBackgroundColor: function() {
		return new format_swf_tags_TagSetBackgroundColor();
	}
	,createTagDefineFont: function() {
		return new format_swf_tags_TagDefineFont();
	}
	,createTagDefineText: function() {
		return new format_swf_tags_TagDefineText();
	}
	,createTagDoAction: function() {
		return new format_swf_tags_TagDoAction();
	}
	,createTagDefineFontInfo: function() {
		return new format_swf_tags_TagDefineFontInfo();
	}
	,createTagDefineSound: function() {
		return new format_swf_tags_TagDefineSound();
	}
	,createTagStartSound: function() {
		return new format_swf_tags_TagStartSound();
	}
	,createTagDefineButtonSound: function() {
		return new format_swf_tags_TagDefineButtonSound();
	}
	,createTagSoundStreamHead: function() {
		return new format_swf_tags_TagSoundStreamHead();
	}
	,createTagSoundStreamBlock: function() {
		return new format_swf_tags_TagSoundStreamBlock();
	}
	,createTagDefineBitsLossless: function() {
		return new format_swf_tags_TagDefineBitsLossless();
	}
	,createTagDefineBitsJPEG2: function() {
		return new format_swf_tags_TagDefineBitsJPEG2();
	}
	,createTagDefineShape2: function() {
		return new format_swf_tags_TagDefineShape2();
	}
	,createTagDefineButtonCxform: function() {
		return new format_swf_tags_TagDefineButtonCxform();
	}
	,createTagProtect: function() {
		return new format_swf_tags_TagProtect();
	}
	,createTagPlaceObject2: function() {
		return new format_swf_tags_TagPlaceObject2();
	}
	,createTagRemoveObject2: function() {
		return new format_swf_tags_TagRemoveObject2();
	}
	,createTagDefineShape3: function() {
		return new format_swf_tags_TagDefineShape3();
	}
	,createTagDefineText2: function() {
		return new format_swf_tags_TagDefineText2();
	}
	,createTagDefineButton2: function() {
		return new format_swf_tags_TagDefineButton2();
	}
	,createTagDefineBitsJPEG3: function() {
		return new format_swf_tags_TagDefineBitsJPEG3();
	}
	,createTagDefineBitsLossless2: function() {
		return new format_swf_tags_TagDefineBitsLossless2();
	}
	,createTagDefineEditText: function() {
		return new format_swf_tags_TagDefineEditText();
	}
	,createTagDefineSprite: function() {
		return new format_swf_tags_TagDefineSprite();
	}
	,createTagNameCharacter: function() {
		return new format_swf_tags_TagNameCharacter();
	}
	,createTagProductInfo: function() {
		return new format_swf_tags_TagProductInfo();
	}
	,createTagFrameLabel: function() {
		return new format_swf_tags_TagFrameLabel();
	}
	,createTagSoundStreamHead2: function() {
		return new format_swf_tags_TagSoundStreamHead2();
	}
	,createTagDefineMorphShape: function() {
		return new format_swf_tags_TagDefineMorphShape();
	}
	,createTagDefineFont2: function() {
		return new format_swf_tags_TagDefineFont2();
	}
	,createTagExportAssets: function() {
		return new format_swf_tags_TagExportAssets();
	}
	,createTagImportAssets: function() {
		return new format_swf_tags_TagImportAssets();
	}
	,createTagEnableDebugger: function() {
		return new format_swf_tags_TagEnableDebugger();
	}
	,createTagDoInitAction: function() {
		return new format_swf_tags_TagDoInitAction();
	}
	,createTagDefineVideoStream: function() {
		return new format_swf_tags_TagDefineVideoStream();
	}
	,createTagVideoFrame: function() {
		return new format_swf_tags_TagVideoFrame();
	}
	,createTagDefineFontInfo2: function() {
		return new format_swf_tags_TagDefineFontInfo2();
	}
	,createTagDebugID: function() {
		return new format_swf_tags_TagDebugID();
	}
	,createTagEnableDebugger2: function() {
		return new format_swf_tags_TagEnableDebugger2();
	}
	,createTagScriptLimits: function() {
		return new format_swf_tags_TagScriptLimits();
	}
	,createTagSetTabIndex: function() {
		return new format_swf_tags_TagSetTabIndex();
	}
	,createTagFileAttributes: function() {
		return new format_swf_tags_TagFileAttributes();
	}
	,createTagPlaceObject3: function() {
		return new format_swf_tags_TagPlaceObject3();
	}
	,createTagImportAssets2: function() {
		return new format_swf_tags_TagImportAssets2();
	}
	,createTagDefineFontAlignZones: function() {
		return new format_swf_tags_TagDefineFontAlignZones();
	}
	,createTagCSMTextSettings: function() {
		return new format_swf_tags_TagCSMTextSettings();
	}
	,createTagDefineFont3: function() {
		return new format_swf_tags_TagDefineFont3();
	}
	,createTagSymbolClass: function() {
		return new format_swf_tags_TagSymbolClass();
	}
	,createTagMetadata: function() {
		return new format_swf_tags_TagMetadata();
	}
	,createTagDefineScalingGrid: function() {
		return new format_swf_tags_TagDefineScalingGrid();
	}
	,createTagDoABC: function() {
		return new format_swf_tags_TagDoABC();
	}
	,createTagDoABCDeprecated: function() {
		return new format_swf_tags_TagDoABCDeprecated();
	}
	,createTagDefineShape4: function() {
		return new format_swf_tags_TagDefineShape4();
	}
	,createTagDefineMorphShape2: function() {
		return new format_swf_tags_TagDefineMorphShape2();
	}
	,createTagDefineSceneAndFrameLabelData: function() {
		return new format_swf_tags_TagDefineSceneAndFrameLabelData();
	}
	,createTagDefineBinaryData: function() {
		return new format_swf_tags_TagDefineBinaryData();
	}
	,createTagDefineFontName: function() {
		return new format_swf_tags_TagDefineFontName();
	}
	,createTagStartSound2: function() {
		return new format_swf_tags_TagStartSound2();
	}
	,createTagDefineBitsJPEG4: function() {
		return new format_swf_tags_TagDefineBitsJPEG4();
	}
	,createTagDefineFont4: function() {
		return new format_swf_tags_TagDefineFont4();
	}
	,createTagEnableTelemetry: function() {
		return new format_swf_tags_TagEnableTelemetry();
	}
	,createTagPlaceObject4: function() {
		return new format_swf_tags_TagPlaceObject4();
	}
	,createTagSWFEncryptActions: function() {
		return new format_swf_tags_etc_TagSWFEncryptActions();
	}
	,createTagSWFEncryptSignature: function() {
		return new format_swf_tags_etc_TagSWFEncryptSignature();
	}
	,createTagUnknown: function(type) {
		return new format_swf_tags_TagUnknown(type);
	}
	,__class__: format_swf_factories_SWFTagFactory
};
var openfl_display_Bitmap = function(bitmapData,pixelSnapping,smoothing) {
	if(smoothing == null) {
		smoothing = false;
	}
	openfl_display_DisplayObject.call(this);
	this.set_bitmapData(bitmapData);
	this.pixelSnapping = pixelSnapping;
	this.smoothing = smoothing;
	if(pixelSnapping == null) {
		this.pixelSnapping = 1;
	}
};
$hxClasses["openfl.display.Bitmap"] = openfl_display_Bitmap;
openfl_display_Bitmap.__name__ = ["openfl","display","Bitmap"];
openfl_display_Bitmap.__super__ = openfl_display_DisplayObject;
openfl_display_Bitmap.prototype = $extend(openfl_display_DisplayObject.prototype,{
	bitmapData: null
	,pixelSnapping: null
	,smoothing: null
	,__image: null
	,__getBounds: function(rect,matrix) {
		if(this.bitmapData != null) {
			var bounds = openfl_geom_Rectangle.__temp;
			bounds.setTo(0,0,this.bitmapData.width,this.bitmapData.height);
			bounds.__transform(bounds,matrix);
			rect.__expand(bounds.x,bounds.y,bounds.width,bounds.height);
		}
	}
	,__hitTest: function(x,y,shapeFlag,stack,interactiveOnly,hitObject) {
		if(!hitObject.get_visible() || this.__isMask || this.bitmapData == null) {
			return false;
		}
		if(this.get_mask() != null && !this.get_mask().__hitTestMask(x,y)) {
			return false;
		}
		this.__getRenderTransform();
		var _this = this.__renderTransform;
		var norm = _this.a * _this.d - _this.b * _this.c;
		var px = norm == 0 ? -_this.tx : 1.0 / norm * (_this.c * (_this.ty - y) + _this.d * (x - _this.tx));
		var _this1 = this.__renderTransform;
		var norm1 = _this1.a * _this1.d - _this1.b * _this1.c;
		var py = norm1 == 0 ? -_this1.ty : 1.0 / norm1 * (_this1.a * (y - _this1.ty) + _this1.b * (_this1.tx - x));
		if(px > 0 && py > 0 && px <= this.bitmapData.width && py <= this.bitmapData.height) {
			if(stack != null && !interactiveOnly) {
				stack.push(hitObject);
			}
			return true;
		}
		return false;
	}
	,__hitTestMask: function(x,y) {
		if(this.bitmapData == null) {
			return false;
		}
		this.__getRenderTransform();
		var _this = this.__renderTransform;
		var norm = _this.a * _this.d - _this.b * _this.c;
		var px = norm == 0 ? -_this.tx : 1.0 / norm * (_this.c * (_this.ty - y) + _this.d * (x - _this.tx));
		var _this1 = this.__renderTransform;
		var norm1 = _this1.a * _this1.d - _this1.b * _this1.c;
		var py = norm1 == 0 ? -_this1.ty : 1.0 / norm1 * (_this1.a * (y - _this1.ty) + _this1.b * (_this1.tx - x));
		if(px > 0 && py > 0 && px <= this.bitmapData.width && py <= this.bitmapData.height) {
			return true;
		}
		return false;
	}
	,__renderCairo: function(renderSession) {
		if(!(!this.__renderable || this.__worldAlpha <= 0)) {
			if(this.bitmapData != null && this.bitmapData.__isValid) {
				renderSession.maskManager.pushObject(this);
				var transform = this.__renderTransform;
				if(renderSession.roundPixels) {
					var matrix = transform.__toMatrix3();
					matrix.tx = Math.round(matrix.tx);
					matrix.ty = Math.round(matrix.ty);
				} else {
					transform.__toMatrix3();
				}
				if(this.bitmapData.getSurface() != null) {
					if(renderSession.allowSmoothing && this.smoothing) {
						1;
					} else {
						3;
					}
				}
				renderSession.maskManager.popObject(this);
			}
		}
	}
	,__renderCairoMask: function(renderSession) {
		this.get_width();
		this.get_height();
	}
	,__renderCanvas: function(renderSession) {
		if(!(!this.__renderable || this.__worldAlpha <= 0)) {
			var context = renderSession.context;
			if(this.bitmapData != null && this.bitmapData.__isValid) {
				renderSession.maskManager.pushObject(this,false);
				lime_graphics_utils_ImageCanvasUtil.convertToCanvas(this.bitmapData.image);
				context.globalAlpha = this.__worldAlpha;
				var transform = this.__renderTransform;
				var scrollRect = this.__scrollRect;
				if(renderSession.roundPixels) {
					context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx | 0,transform.ty | 0);
				} else {
					context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx,transform.ty);
				}
				if(!renderSession.allowSmoothing || !this.smoothing) {
					context.mozImageSmoothingEnabled = false;
					context.msImageSmoothingEnabled = false;
					context.imageSmoothingEnabled = false;
				}
				if(scrollRect == null) {
					context.drawImage(this.bitmapData.image.get_src(),0,0);
				} else {
					context.drawImage(this.bitmapData.image.get_src(),scrollRect.x,scrollRect.y,scrollRect.width,scrollRect.height,scrollRect.x,scrollRect.y,scrollRect.width,scrollRect.height);
				}
				if(!renderSession.allowSmoothing || !this.smoothing) {
					context.mozImageSmoothingEnabled = true;
					context.msImageSmoothingEnabled = true;
					context.imageSmoothingEnabled = true;
				}
				renderSession.maskManager.popObject(this,false);
			}
		}
	}
	,__renderCanvasMask: function(renderSession) {
		renderSession.context.rect(0,0,this.get_width(),this.get_height());
	}
	,__renderDOM: function(renderSession) {
		if(this.stage != null && this.__worldVisible && this.__renderable && this.bitmapData != null && this.bitmapData.__isValid) {
			if(this.bitmapData.image.buffer.__srcImage != null) {
				openfl__$internal_renderer_dom_DOMBitmap.renderImage(this,renderSession);
			} else {
				openfl__$internal_renderer_dom_DOMBitmap.renderCanvas(this,renderSession);
			}
		} else {
			if(this.__image != null) {
				renderSession.element.removeChild(this.__image);
				this.__image = null;
				this.__style = null;
			}
			if(this.__canvas != null) {
				renderSession.element.removeChild(this.__canvas);
				this.__canvas = null;
				this.__style = null;
			}
		}
	}
	,__renderGL: function(renderSession) {
		if(!(!this.__renderable || this.__worldAlpha <= 0)) {
			if(this.bitmapData != null && this.bitmapData.__isValid) {
				var renderer = renderSession.renderer;
				var gl = renderSession.gl;
				renderSession.blendModeManager.setBlendMode(this.get_blendMode());
				renderSession.maskManager.pushObject(this);
				var shader = renderSession.filterManager.pushObject(this);
				shader.get_data().uImage0.input = this.bitmapData;
				var tmp = renderSession.allowSmoothing && (this.smoothing || renderSession.upscaled);
				shader.get_data().uImage0.smoothing = tmp;
				shader.get_data().uMatrix.value = renderer.getMatrix(this.__renderTransform);
				renderSession.shaderManager.setShader(shader);
				gl.bindBuffer(gl.ARRAY_BUFFER,this.bitmapData.getBuffer(gl,this.__worldAlpha));
				gl.vertexAttribPointer(shader.get_data().aPosition.index,3,gl.FLOAT,false,24,0);
				gl.vertexAttribPointer(shader.get_data().aTexCoord.index,2,gl.FLOAT,false,24,12);
				gl.vertexAttribPointer(shader.get_data().aAlpha.index,1,gl.FLOAT,false,24,20);
				gl.drawArrays(gl.TRIANGLE_STRIP,0,4);
				renderSession.maskManager.popObject(this);
			}
		}
	}
	,__updateMask: function(maskGraphics) {
		if(this.bitmapData == null) {
			return;
		}
		maskGraphics.__commands.overrideMatrix(this.__worldTransform);
		maskGraphics.beginFill(0);
		maskGraphics.drawRect(0,0,this.bitmapData.width,this.bitmapData.height);
		if(maskGraphics.__bounds == null) {
			maskGraphics.__bounds = new openfl_geom_Rectangle();
		}
		this.__getBounds(maskGraphics.__bounds,openfl_geom_Matrix.__identity);
		openfl_display_DisplayObject.prototype.__updateMask.call(this,maskGraphics);
	}
	,set_bitmapData: function(value) {
		this.bitmapData = value;
		this.smoothing = false;
		this.__filters != null && this.__filters.length > 0;
		return this.bitmapData;
	}
	,get_height: function() {
		if(this.bitmapData != null) {
			return this.bitmapData.height * Math.abs(this.get_scaleY());
		}
		return 0;
	}
	,set_height: function(value) {
		if(this.bitmapData != null) {
			if(value != this.bitmapData.height) {
				this.set_scaleY(value / this.bitmapData.height);
			}
			return value;
		}
		return 0;
	}
	,get_width: function() {
		if(this.bitmapData != null) {
			return this.bitmapData.width * Math.abs(this.get_scaleX());
		}
		return 0;
	}
	,set_width: function(value) {
		if(this.bitmapData != null) {
			if(value != this.bitmapData.width) {
				this.set_scaleX(value / this.bitmapData.width);
			}
			return value;
		}
		return 0;
	}
	,__class__: openfl_display_Bitmap
	,__properties__: $extend(openfl_display_DisplayObject.prototype.__properties__,{set_bitmapData:"set_bitmapData"})
});
var format_swf_instance_Bitmap = function(tag) {
	openfl_display_Bitmap.call(this);
	if(js_Boot.__instanceof(tag,format_swf_tags_TagDefineBitsLossless)) {
		var data = tag;
		if(data.instance != null) {
			this.set_bitmapData(data.instance);
		} else {
			var transparent = data.level > 1;
			var buffer = data.zlibBitmapData;
			buffer.uncompress();
			buffer.position = 0;
			if(data.bitmapFormat == 3) {
				var colorTable = [];
				var _g1 = 0;
				var _g = data.bitmapColorTableSize;
				while(_g1 < _g) {
					++_g1;
					var r = buffer.readUnsignedByte();
					var g = buffer.readUnsignedByte();
					var b = buffer.readUnsignedByte();
					if(transparent) {
						colorTable.push((buffer.readUnsignedByte() << 24) + (r << 16) + (g << 8) + b);
					} else {
						colorTable.push((r << 16) + (g << 8) + b);
					}
				}
				var imageData = new openfl_utils_ByteArrayData(0);
				var padding = (4 - data.bitmapWidth % 4) % 4;
				var index = 0;
				var _g11 = 0;
				var _g2 = data.bitmapHeight;
				while(_g11 < _g2) {
					++_g11;
					var _g3 = 0;
					var _g21 = data.bitmapWidth;
					while(_g3 < _g21) {
						++_g3;
						index = buffer.readUnsignedByte();
						if(index >= 0 && index < colorTable.length) {
							imageData.writeUnsignedInt(colorTable[index]);
						} else {
							imageData.writeUnsignedInt(0);
						}
					}
					buffer.position += padding;
				}
				buffer = imageData;
				imageData.position = 0;
			}
			this.set_bitmapData(new openfl_display_BitmapData(data.bitmapWidth,data.bitmapHeight,transparent));
			this.bitmapData.image.buffer.premultiplied = false;
			this.bitmapData.setPixels(this.bitmapData.rect,buffer);
			this.bitmapData.image.buffer.premultiplied = true;
			data.instance = this.bitmapData;
		}
	} else if(js_Boot.__instanceof(tag,format_swf_tags_TagDefineBitsJPEG2)) {
		var data1 = tag;
		if(data1.instance != null) {
			this.set_bitmapData(data1.instance);
		} else {
			if(js_Boot.__instanceof(tag,format_swf_tags_TagDefineBitsJPEG3)) {
				var alpha = (js_Boot.__cast(tag , format_swf_tags_TagDefineBitsJPEG3)).bitmapAlphaData;
				alpha.uncompress();
				this.set_bitmapData(openfl_display_BitmapData.fromBytes(data1.bitmapData,alpha));
				this.bitmapData.image.buffer.premultiplied = true;
			} else {
				this.set_bitmapData(openfl_display_BitmapData.fromBytes(data1.bitmapData,null));
			}
			data1.instance = this.bitmapData;
		}
	} else if(js_Boot.__instanceof(tag,format_swf_tags_TagDefineBits)) {
		this.set_bitmapData(openfl_display_BitmapData.fromBytes(tag.bitmapData,null));
	}
};
$hxClasses["format.swf.instance.Bitmap"] = format_swf_instance_Bitmap;
format_swf_instance_Bitmap.__name__ = ["format","swf","instance","Bitmap"];
format_swf_instance_Bitmap.__super__ = openfl_display_Bitmap;
format_swf_instance_Bitmap.prototype = $extend(openfl_display_Bitmap.prototype,{
	__class__: format_swf_instance_Bitmap
});
var openfl_text_TextField = function() {
	openfl_display_InteractiveObject.call(this);
	this.__caretIndex = -1;
	this.__displayAsPassword = false;
	this.__graphics = new openfl_display_Graphics(this);
	this.__textEngine = new openfl__$internal_text_TextEngine(this);
	this.__layoutDirty = true;
	this.__tabEnabled = true;
	this.__mouseWheelEnabled = true;
	this.__text = "";
	if(openfl_text_TextField.__defaultTextFormat == null) {
		openfl_text_TextField.__defaultTextFormat = new openfl_text_TextFormat("Times New Roman",12,0,false,false,false,"","",3,0,0,0,0);
		openfl_text_TextField.__defaultTextFormat.blockIndent = 0;
		openfl_text_TextField.__defaultTextFormat.bullet = false;
		openfl_text_TextField.__defaultTextFormat.letterSpacing = 0;
		openfl_text_TextField.__defaultTextFormat.kerning = false;
	}
	this.__textFormat = openfl_text_TextField.__defaultTextFormat.clone();
	this.__textEngine.textFormatRanges.push(new openfl__$internal_text_TextFormatRange(this.__textFormat,0,0));
	this.addEventListener("mouseDown",$bind(this,this.this_onMouseDown));
};
$hxClasses["openfl.text.TextField"] = openfl_text_TextField;
openfl_text_TextField.__name__ = ["openfl","text","TextField"];
openfl_text_TextField.__super__ = openfl_display_InteractiveObject;
openfl_text_TextField.prototype = $extend(openfl_display_InteractiveObject.prototype,{
	__bounds: null
	,__caretIndex: null
	,__cursorTimer: null
	,__dirty: null
	,__displayAsPassword: null
	,__inputEnabled: null
	,__isHTML: null
	,__layoutDirty: null
	,__mouseWheelEnabled: null
	,__selectionIndex: null
	,__showCursor: null
	,__text: null
	,__textEngine: null
	,__textFormat: null
	,__div: null
	,appendText: function(text) {
		this.__text += text;
		this.__textEngine.textFormatRanges.get(this.__textEngine.textFormatRanges.get_length() - 1).end = this.__text.length;
		this.__dirty = true;
		this.__layoutDirty = true;
	}
	,getCharBoundaries: function(charIndex) {
		if(charIndex < 0 || charIndex > this.__text.length - 1) {
			return null;
		}
		this.__updateLayout();
		var _g = 0;
		var _g1 = this.__textEngine.layoutGroups;
		while(_g < _g1.get_length()) {
			var group = _g1.get(_g);
			++_g;
			if(charIndex >= group.startIndex && charIndex <= group.endIndex) {
				var x = group.offsetX;
				var _g3 = 0;
				var _g2 = charIndex - group.startIndex;
				while(_g3 < _g2) x += group.advances[_g3++];
				return new openfl_geom_Rectangle(x,group.offsetY,group.advances[charIndex - group.startIndex],group.ascent + group.descent);
			}
		}
		return null;
	}
	,getCharIndexAtPoint: function(x,y) {
		if(x <= 2 || x > this.get_width() + 4 || y <= 0 || y > this.get_height() + 4) {
			return -1;
		}
		this.__updateLayout();
		x += this.get_scrollH();
		var _g1 = 0;
		var _g = this.get_scrollV() - 1;
		while(_g1 < _g) y += this.__textEngine.lineHeights.get(_g1++);
		var _g2 = 0;
		var _g11 = this.__textEngine.layoutGroups;
		while(_g2 < _g11.get_length()) {
			var group = _g11.get(_g2);
			++_g2;
			if(y >= group.offsetY && y <= group.offsetY + group.height) {
				if(x >= group.offsetX && x <= group.offsetX + group.width) {
					var advance = 0.0;
					var _g3 = 0;
					var _g21 = group.advances.length;
					while(_g3 < _g21) {
						var i = _g3++;
						advance += group.advances[i];
						if(x <= group.offsetX + advance) {
							return group.startIndex + i;
						}
					}
					return group.endIndex;
				}
			}
		}
		return -1;
	}
	,getFirstCharInParagraph: function(charIndex) {
		if(charIndex < 0 || charIndex > this.__text.length - 1) {
			return 0;
		}
		var index = this.__textEngine.getLineBreakIndex();
		var startIndex = 0;
		while(index > -1) {
			if(index <= charIndex) {
				startIndex = index + 1;
			} else if(index > charIndex) {
				break;
			}
			index = this.__textEngine.getLineBreakIndex(index + 1);
		}
		return startIndex;
	}
	,getLineIndexAtPoint: function(x,y) {
		this.__updateLayout();
		if(x <= 2 || x > this.get_width() + 4 || y <= 0 || y > this.get_height() + 4) {
			return -1;
		}
		var _g1 = 0;
		var _g = this.get_scrollV() - 1;
		while(_g1 < _g) y += this.__textEngine.lineHeights.get(_g1++);
		var _g2 = 0;
		var _g11 = this.__textEngine.layoutGroups;
		while(_g2 < _g11.get_length()) {
			var group = _g11.get(_g2);
			++_g2;
			if(y >= group.offsetY && y <= group.offsetY + group.height) {
				return group.lineIndex;
			}
		}
		return -1;
	}
	,getLineIndexOfChar: function(charIndex) {
		if(charIndex < 0 || charIndex > this.__text.length - 1) {
			return -1;
		}
		this.__updateLayout();
		var _g = 0;
		var _g1 = this.__textEngine.layoutGroups;
		while(_g < _g1.get_length()) {
			var group = _g1.get(_g);
			++_g;
			if(group.startIndex <= charIndex && group.endIndex >= charIndex) {
				return group.lineIndex;
			}
		}
		return -1;
	}
	,getLineLength: function(lineIndex) {
		this.__updateLayout();
		if(lineIndex < 0 || lineIndex > this.__textEngine.numLines - 1) {
			return 0;
		}
		var startIndex = -1;
		var endIndex = -1;
		var _g = 0;
		var _g1 = this.__textEngine.layoutGroups;
		while(_g < _g1.get_length()) {
			var group = _g1.get(_g);
			++_g;
			if(group.lineIndex == lineIndex) {
				if(startIndex == -1) {
					startIndex = group.startIndex;
				}
			} else if(group.lineIndex == lineIndex + 1) {
				endIndex = group.startIndex;
				break;
			}
		}
		if(endIndex == -1) {
			endIndex = this.__text.length;
		}
		return endIndex - startIndex;
	}
	,getLineMetrics: function(lineIndex) {
		this.__updateLayout();
		var ascender = this.__textEngine.lineAscents.get(lineIndex);
		var descender = this.__textEngine.lineDescents.get(lineIndex);
		var leading = this.__textEngine.lineLeadings.get(lineIndex);
		var lineHeight = this.__textEngine.lineHeights.get(lineIndex);
		var lineWidth = this.__textEngine.lineWidths.get(lineIndex);
		var margin;
		switch(this.__textFormat.align) {
		case 0:
			margin = (this.__textEngine.width - lineWidth) / 2;
			break;
		case 1:case 4:
			margin = this.__textEngine.width - lineWidth - 2;
			break;
		case 2:case 3:case 5:
			margin = 2;
			break;
		}
		return new openfl_text_TextLineMetrics(margin,lineWidth,lineHeight,ascender,descender,leading);
	}
	,getLineOffset: function(lineIndex) {
		this.__updateLayout();
		if(lineIndex < 0 || lineIndex > this.__textEngine.numLines - 1) {
			return -1;
		}
		var _g = 0;
		var _g1 = this.__textEngine.layoutGroups;
		while(_g < _g1.get_length()) {
			var group = _g1.get(_g);
			++_g;
			if(group.lineIndex == lineIndex) {
				return group.startIndex;
			}
		}
		return 0;
	}
	,getLineText: function(lineIndex) {
		this.__updateLayout();
		if(lineIndex < 0 || lineIndex > this.__textEngine.numLines - 1) {
			return null;
		}
		var startIndex = -1;
		var endIndex = -1;
		var _g = 0;
		var _g1 = this.__textEngine.layoutGroups;
		while(_g < _g1.get_length()) {
			var group = _g1.get(_g);
			++_g;
			if(group.lineIndex == lineIndex) {
				if(startIndex == -1) {
					startIndex = group.startIndex;
				}
			} else if(group.lineIndex == lineIndex + 1) {
				endIndex = group.startIndex;
				break;
			}
		}
		if(endIndex == -1) {
			endIndex = this.__text.length;
		}
		return this.__textEngine.text.substring(startIndex,endIndex);
	}
	,getParagraphLength: function(charIndex) {
		if(charIndex < 0 || charIndex > this.__text.length - 1) {
			return 0;
		}
		var startIndex = this.getFirstCharInParagraph(charIndex);
		var endIndex = this.__textEngine.getLineBreakIndex(charIndex) + 1;
		if(endIndex == 0) {
			endIndex = this.__text.length;
		}
		return endIndex - startIndex;
	}
	,getTextFormat: function(beginIndex,endIndex) {
		if(endIndex == null) {
			endIndex = 0;
		}
		if(beginIndex == null) {
			beginIndex = 0;
		}
		var format = null;
		var _g = 0;
		var _g1 = this.__textEngine.textFormatRanges;
		while(_g < _g1.get_length()) {
			var group = _g1.get(_g);
			++_g;
			if(group.start <= beginIndex && group.end >= beginIndex || group.start <= endIndex && group.end >= endIndex) {
				if(format == null) {
					format = group.format.clone();
				} else {
					if(group.format.font != format.font) {
						format.font = null;
					}
					if(group.format.size != format.size) {
						format.size = null;
					}
					if(group.format.color != format.color) {
						format.color = null;
					}
					if(group.format.bold != format.bold) {
						format.bold = null;
					}
					if(group.format.italic != format.italic) {
						format.italic = null;
					}
					if(group.format.underline != format.underline) {
						format.underline = null;
					}
					if(group.format.url != format.url) {
						format.url = null;
					}
					if(group.format.target != format.target) {
						format.target = null;
					}
					if(group.format.align != format.align) {
						format.align = null;
					}
					if(group.format.leftMargin != format.leftMargin) {
						format.leftMargin = null;
					}
					if(group.format.rightMargin != format.rightMargin) {
						format.rightMargin = null;
					}
					if(group.format.indent != format.indent) {
						format.indent = null;
					}
					if(group.format.leading != format.leading) {
						format.leading = null;
					}
					if(group.format.blockIndent != format.blockIndent) {
						format.blockIndent = null;
					}
					if(group.format.bullet != format.bullet) {
						format.bullet = null;
					}
					if(group.format.kerning != format.kerning) {
						format.kerning = null;
					}
					if(group.format.letterSpacing != format.letterSpacing) {
						format.letterSpacing = null;
					}
					if(group.format.tabStops != format.tabStops) {
						format.tabStops = null;
					}
				}
			}
		}
		return format;
	}
	,replaceSelectedText: function(value) {
		if(value == "" && this.__selectionIndex == this.__caretIndex) {
			return;
		}
		var startIndex = this.__caretIndex < this.__selectionIndex ? this.__caretIndex : this.__selectionIndex;
		this.replaceText(startIndex,this.__caretIndex > this.__selectionIndex ? this.__caretIndex : this.__selectionIndex,value);
		this.__caretIndex = startIndex + value.length;
		this.__selectionIndex = this.__caretIndex;
	}
	,replaceText: function(beginIndex,endIndex,newText) {
		if(endIndex < beginIndex || beginIndex < 0 || endIndex > this.__text.length || newText == null) {
			return;
		}
		this.__updateText(this.__text.substring(0,beginIndex) + newText + this.__text.substring(endIndex));
		var offset = newText.length - (endIndex - beginIndex);
		var i = 0;
		var range;
		while(i < this.__textEngine.textFormatRanges.get_length()) {
			range = this.__textEngine.textFormatRanges.get(i);
			if(range.start <= beginIndex && range.end >= endIndex) {
				range.end += offset;
				++i;
			} else if(range.start >= beginIndex && range.end <= endIndex) {
				this.__textEngine.textFormatRanges.splice(i,1);
				offset -= range.end - range.start;
			} else if(range.start > beginIndex && range.start <= endIndex) {
				range.start += offset;
				++i;
			} else {
				++i;
			}
		}
		this.__dirty = true;
		this.__layoutDirty = true;
	}
	,setSelection: function(beginIndex,endIndex) {
		this.__selectionIndex = beginIndex;
		this.__caretIndex = endIndex;
	}
	,setTextFormat: function(format,beginIndex,endIndex) {
		if(endIndex == null) {
			endIndex = 0;
		}
		if(beginIndex == null) {
			beginIndex = 0;
		}
		if(format.font != null) {
			this.__textFormat.font = format.font;
		}
		if(format.size != null) {
			this.__textFormat.size = format.size;
		}
		if(format.color != null) {
			this.__textFormat.color = format.color;
		}
		if(format.bold != null) {
			this.__textFormat.bold = format.bold;
		}
		if(format.italic != null) {
			this.__textFormat.italic = format.italic;
		}
		if(format.underline != null) {
			this.__textFormat.underline = format.underline;
		}
		if(format.url != null) {
			this.__textFormat.url = format.url;
		}
		if(format.target != null) {
			this.__textFormat.target = format.target;
		}
		if(format.align != null) {
			this.__textFormat.align = format.align;
		}
		if(format.leftMargin != null) {
			this.__textFormat.leftMargin = format.leftMargin;
		}
		if(format.rightMargin != null) {
			this.__textFormat.rightMargin = format.rightMargin;
		}
		if(format.indent != null) {
			this.__textFormat.indent = format.indent;
		}
		if(format.leading != null) {
			this.__textFormat.leading = format.leading;
		}
		if(format.blockIndent != null) {
			this.__textFormat.blockIndent = format.blockIndent;
		}
		if(format.bullet != null) {
			this.__textFormat.bullet = format.bullet;
		}
		if(format.kerning != null) {
			this.__textFormat.kerning = format.kerning;
		}
		if(format.letterSpacing != null) {
			this.__textFormat.letterSpacing = format.letterSpacing;
		}
		if(format.tabStops != null) {
			this.__textFormat.tabStops = format.tabStops;
		}
		this.__dirty = true;
		this.__layoutDirty = true;
	}
	,__getAttributeMatch: function(regex) {
		if(regex.matched(2) != null) {
			return regex.matched(2);
		} else {
			return regex.matched(3);
		}
	}
	,__getBounds: function(rect,matrix) {
		this.__updateLayout();
		var bounds = openfl_geom_Rectangle.__temp;
		this.__textEngine.bounds.__transform(bounds,matrix);
		rect.__expand(bounds.x,bounds.y,bounds.width,bounds.height);
	}
	,__getCursor: function() {
		if(this.__textEngine.selectable) {
			return lime_ui_MouseCursor.TEXT;
		} else {
			return null;
		}
	}
	,__getPosition: function(x,y) {
		this.__updateLayout();
		x += this.get_scrollH();
		var _g1 = 0;
		var _g = this.get_scrollV() - 1;
		while(_g1 < _g) y += this.__textEngine.lineHeights.get(_g1++);
		if(y > this.__textEngine.textHeight) {
			y = this.__textEngine.textHeight;
		}
		var firstGroup = true;
		var group;
		var nextGroup;
		var _g11 = 0;
		var _g2 = this.__textEngine.layoutGroups.get_length();
		while(_g11 < _g2) {
			var i = _g11++;
			group = this.__textEngine.layoutGroups.get(i);
			if(i < this.__textEngine.layoutGroups.get_length() - 1) {
				nextGroup = this.__textEngine.layoutGroups.get(i + 1);
			} else {
				nextGroup = null;
			}
			if(firstGroup) {
				if(y < group.offsetY) {
					y = group.offsetY;
				}
				if(x < group.offsetX) {
					x = group.offsetX;
				}
				firstGroup = false;
			}
			if(y >= group.offsetY && y <= group.offsetY + group.height || nextGroup == null) {
				if(x >= group.offsetX && x <= group.offsetX + group.width || (nextGroup == null || nextGroup.lineIndex != group.lineIndex)) {
					var advance = 0.0;
					var _g3 = 0;
					var _g21 = group.advances.length;
					while(_g3 < _g21) {
						var i1 = _g3++;
						advance += group.advances[i1];
						if(x <= group.offsetX + advance) {
							if(x <= group.offsetX + (advance - group.advances[i1]) + group.advances[i1] / 2) {
								return group.startIndex + i1;
							} else if(group.startIndex + i1 < group.endIndex) {
								return group.startIndex + i1 + 1;
							} else {
								return group.endIndex;
							}
						}
					}
					return group.endIndex;
				}
			}
		}
		return this.__text.length;
	}
	,__hitTest: function(x,y,shapeFlag,stack,interactiveOnly,hitObject) {
		if(!hitObject.get_visible() || this.__isMask || interactiveOnly && !this.mouseEnabled) {
			return false;
		}
		if(this.get_mask() != null && !this.get_mask().__hitTestMask(x,y)) {
			return false;
		}
		this.__getRenderTransform();
		this.__updateLayout();
		var _this = this.__renderTransform;
		var norm = _this.a * _this.d - _this.b * _this.c;
		var _this1 = this.__renderTransform;
		var norm1 = _this1.a * _this1.d - _this1.b * _this1.c;
		if(this.__textEngine.bounds.contains(norm == 0 ? -_this.tx : 1.0 / norm * (_this.c * (_this.ty - y) + _this.d * (x - _this.tx)),norm1 == 0 ? -_this1.ty : 1.0 / norm1 * (_this1.a * (y - _this1.ty) + _this1.b * (_this1.tx - x)))) {
			if(stack != null) {
				stack.push(hitObject);
			}
			return true;
		}
		return false;
	}
	,__hitTestMask: function(x,y) {
		this.__getRenderTransform();
		this.__updateLayout();
		var _this = this.__renderTransform;
		var norm = _this.a * _this.d - _this.b * _this.c;
		var _this1 = this.__renderTransform;
		var norm1 = _this1.a * _this1.d - _this1.b * _this1.c;
		if(this.__textEngine.bounds.contains(norm == 0 ? -_this.tx : 1.0 / norm * (_this.c * (_this.ty - y) + _this.d * (x - _this.tx)),norm1 == 0 ? -_this1.ty : 1.0 / norm1 * (_this1.a * (y - _this1.ty) + _this1.b * (_this1.tx - x)))) {
			return true;
		}
		return false;
	}
	,__renderCairo: function(renderSession) {
		openfl_display_InteractiveObject.prototype.__renderCairo.call(this,renderSession);
	}
	,__renderCanvas: function(renderSession) {
		var transform = this.__worldTransform;
		var textEngine = this.__textEngine;
		var bounds = textEngine.bounds;
		var graphics = this.__graphics;
		if(this.__dirty) {
			this.__updateLayout();
			if(graphics.__bounds == null) {
				graphics.__bounds = new openfl_geom_Rectangle();
			}
			graphics.__bounds.copyFrom(bounds);
		}
		graphics.__update();
		if(this.__dirty || graphics.__dirty) {
			var width = graphics.__width;
			var height = graphics.__height;
			if((textEngine.text == null || textEngine.text == "") && !textEngine.background && !textEngine.border && !textEngine.__hasFocus && (textEngine.type != 1 || !textEngine.selectable) || (textEngine.width <= 0 || textEngine.height <= 0) && textEngine.autoSize != 2) {
				this.__graphics.__canvas = null;
				this.__graphics.__context = null;
				this.__graphics.__bitmap = null;
				this.__graphics.set___dirty(false);
				this.__dirty = false;
			} else {
				if(this.__graphics.__canvas == null) {
					this.__graphics.__canvas = window.document.createElement("canvas");
					this.__graphics.__context = this.__graphics.__canvas.getContext("2d");
				}
				openfl__$internal_renderer_canvas_CanvasTextField.context = graphics.__context;
				graphics.__canvas.width = width;
				graphics.__canvas.height = height;
				var transform1 = graphics.__renderTransform;
				if(renderSession.roundPixels) {
					openfl__$internal_renderer_canvas_CanvasTextField.context.setTransform(transform1.a,transform1.b,transform1.c,transform1.d,transform1.tx | 0,transform1.ty | 0);
				} else {
					openfl__$internal_renderer_canvas_CanvasTextField.context.setTransform(transform1.a,transform1.b,transform1.c,transform1.d,transform1.tx,transform1.ty);
				}
				if(textEngine.text != null && textEngine.text != "" || textEngine.__hasFocus) {
					var text = textEngine.text;
					if(!renderSession.allowSmoothing || textEngine.antiAliasType == 0 && textEngine.sharpness == 400) {
						graphics.__context.mozImageSmoothingEnabled = false;
						graphics.__context.msImageSmoothingEnabled = false;
						graphics.__context.imageSmoothingEnabled = false;
					} else {
						graphics.__context.mozImageSmoothingEnabled = true;
						graphics.__context.msImageSmoothingEnabled = true;
						graphics.__context.imageSmoothingEnabled = true;
					}
					if(textEngine.border || textEngine.background) {
						openfl__$internal_renderer_canvas_CanvasTextField.context.rect(0.5,0.5,bounds.width - 1,bounds.height - 1);
						if(textEngine.background) {
							var tmp = StringTools.hex(textEngine.backgroundColor,6);
							openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle = "#" + tmp;
							openfl__$internal_renderer_canvas_CanvasTextField.context.fill();
						}
						if(textEngine.border) {
							openfl__$internal_renderer_canvas_CanvasTextField.context.lineWidth = 1;
							var tmp1 = StringTools.hex(textEngine.borderColor,6);
							openfl__$internal_renderer_canvas_CanvasTextField.context.strokeStyle = "#" + tmp1;
							openfl__$internal_renderer_canvas_CanvasTextField.context.stroke();
						}
					}
					openfl__$internal_renderer_canvas_CanvasTextField.context.textBaseline = "top";
					openfl__$internal_renderer_canvas_CanvasTextField.context.textAlign = "start";
					var scrollX = -this.get_scrollH();
					var scrollY = 0.0;
					var _g1 = 0;
					var _g = this.get_scrollV() - 1;
					while(_g1 < _g) {
						var i = _g1++;
						scrollY -= textEngine.lineHeights.get(i);
					}
					var advance;
					var offsetY = 0.0;
					var applyHack = new EReg("(iPad|iPhone|iPod|Firefox)","g").match(window.navigator.userAgent);
					var _g2 = 0;
					var _g11 = textEngine.layoutGroups;
					while(_g2 < _g11.get_length()) {
						var group = _g11.get(_g2);
						++_g2;
						if(group.lineIndex < this.get_scrollV() - 1) {
							continue;
						}
						if(group.lineIndex > this.get_scrollV() + textEngine.bottomScrollV - 2) {
							break;
						}
						openfl__$internal_renderer_canvas_CanvasTextField.context.font = openfl__$internal_text_TextEngine.getFont(group.format);
						var tmp2 = StringTools.hex(group.format.color,6);
						openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle = "#" + tmp2;
						if(applyHack) {
							offsetY = group.format.size * 0.185;
						}
						haxe_Log.trace(scrollY,{ fileName : "CanvasTextField.hx", lineNumber : 249, className : "openfl._internal.renderer.canvas.CanvasTextField", methodName : "render"});
						haxe_Log.trace(this.get_scrollV(),{ fileName : "CanvasTextField.hx", lineNumber : 250, className : "openfl._internal.renderer.canvas.CanvasTextField", methodName : "render"});
						openfl__$internal_renderer_canvas_CanvasTextField.context.fillText(text.substring(group.startIndex,group.endIndex),group.offsetX + scrollX,group.offsetY + offsetY + scrollY);
						if(this.__caretIndex > -1 && textEngine.selectable) {
							if(this.__selectionIndex == this.__caretIndex) {
								if(this.__showCursor && group.startIndex <= this.__caretIndex && group.endIndex >= this.__caretIndex) {
									advance = 0.0;
									var _g3 = 0;
									var _g21 = this.__caretIndex - group.startIndex;
									while(_g3 < _g21) {
										var i1 = _g3++;
										if(group.advances.length <= i1) {
											break;
										}
										advance += group.advances[i1];
									}
									openfl__$internal_renderer_canvas_CanvasTextField.context.fillRect(group.offsetX + advance,group.offsetY,1,group.height);
								}
							} else if(group.startIndex <= this.__caretIndex && group.endIndex >= this.__caretIndex || group.startIndex <= this.__selectionIndex && group.endIndex >= this.__selectionIndex) {
								var selectionStart = Math.min(this.__selectionIndex,this.__caretIndex) | 0;
								var selectionEnd = Math.max(this.__selectionIndex,this.__caretIndex) | 0;
								if(group.startIndex > selectionStart) {
									selectionStart = group.startIndex;
								}
								if(group.endIndex < selectionEnd) {
									selectionEnd = group.endIndex;
								}
								var start;
								var end;
								start = this.getCharBoundaries(selectionStart);
								if(selectionEnd >= textEngine.text.length) {
									end = this.getCharBoundaries(textEngine.text.length - 1);
									end.x += end.width + 2;
								} else {
									end = this.getCharBoundaries(selectionEnd);
								}
								if(start != null && end != null) {
									openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle = "#000000";
									openfl__$internal_renderer_canvas_CanvasTextField.context.fillRect(start.x,start.y,end.x - start.x,group.height);
									openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle = "#FFFFFF";
									openfl__$internal_renderer_canvas_CanvasTextField.context.fillText(text.substring(selectionStart,selectionEnd),scrollX + start.x,group.offsetY + offsetY + scrollY);
								}
							}
						}
					}
				} else {
					if(textEngine.border || textEngine.background) {
						if(textEngine.border) {
							openfl__$internal_renderer_canvas_CanvasTextField.context.rect(0.5,0.5,bounds.width - 1,bounds.height - 1);
						} else {
							openfl__$internal_renderer_canvas_CanvasTextField.context.rect(0,0,bounds.width,bounds.height);
						}
						if(textEngine.background) {
							var tmp3 = StringTools.hex(textEngine.backgroundColor,6);
							openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle = "#" + tmp3;
							openfl__$internal_renderer_canvas_CanvasTextField.context.fill();
						}
						if(textEngine.border) {
							openfl__$internal_renderer_canvas_CanvasTextField.context.lineWidth = 1;
							openfl__$internal_renderer_canvas_CanvasTextField.context.lineCap = "square";
							var tmp4 = StringTools.hex(textEngine.borderColor,6);
							openfl__$internal_renderer_canvas_CanvasTextField.context.strokeStyle = "#" + tmp4;
							openfl__$internal_renderer_canvas_CanvasTextField.context.stroke();
						}
					}
					if(this.__caretIndex > -1 && textEngine.selectable && this.__showCursor) {
						var scrollX1 = -this.get_scrollH();
						var scrollY1 = 0.0;
						var _g12 = 0;
						var _g4 = this.get_scrollV() - 1;
						while(_g12 < _g4) {
							var i2 = _g12++;
							scrollY1 -= textEngine.lineHeights.get(i2);
						}
						openfl__$internal_renderer_canvas_CanvasTextField.context.beginPath();
						var tmp5 = StringTools.hex(this.get_defaultTextFormat().color,6);
						openfl__$internal_renderer_canvas_CanvasTextField.context.strokeStyle = "#" + tmp5;
						openfl__$internal_renderer_canvas_CanvasTextField.context.moveTo(scrollX1 + 2.5,scrollY1 + 2.5);
						openfl__$internal_renderer_canvas_CanvasTextField.context.lineWidth = 1;
						openfl__$internal_renderer_canvas_CanvasTextField.context.lineTo(scrollX1 + 2.5,scrollY1 + openfl__$internal_text_TextEngine.getFormatHeight(this.get_defaultTextFormat()) - 1);
						openfl__$internal_renderer_canvas_CanvasTextField.context.stroke();
						openfl__$internal_renderer_canvas_CanvasTextField.context.closePath();
					}
				}
				graphics.__bitmap = openfl_display_BitmapData.fromCanvas(this.__graphics.__canvas);
				graphics.__visible = true;
				this.__dirty = false;
				graphics.set___dirty(false);
			}
		}
		if(this.__textEngine.antiAliasType == 0 && this.__textEngine.gridFitType == 1) {
			var smoothingEnabled = renderSession.context.imageSmoothingEnabled;
			if(smoothingEnabled) {
				renderSession.context.mozImageSmoothingEnabled = false;
				renderSession.context.msImageSmoothingEnabled = false;
				renderSession.context.imageSmoothingEnabled = false;
			}
			openfl_display_InteractiveObject.prototype.__renderCanvas.call(this,renderSession);
			if(smoothingEnabled) {
				renderSession.context.mozImageSmoothingEnabled = true;
				renderSession.context.msImageSmoothingEnabled = true;
				renderSession.context.imageSmoothingEnabled = true;
			}
		} else {
			openfl_display_InteractiveObject.prototype.__renderCanvas.call(this,renderSession);
		}
	}
	,__renderDOM: function(renderSession) {
		var textField = this;
		var textEngine = textField.__textEngine;
		if(textField.stage != null && textField.__worldVisible && textField.__renderable) {
			if(textField.__dirty || textField.__div == null) {
				if(textEngine.text != "" || textEngine.background || textEngine.border || textEngine.type == 1) {
					if(textField.__div == null) {
						textField.__div = window.document.createElement("div");
						openfl__$internal_renderer_dom_DOMRenderer.initializeElement(textField,textField.__div,renderSession);
						textField.__style.setProperty("outline","none",null);
						textField.__div.addEventListener("input",function(event) {
							event.preventDefault();
							if(textField.get_htmlText() != textField.__div.innerHTML) {
								textField.set_htmlText(textField.__div.innerHTML);
								textField.__dirty = false;
							}
						},true);
					}
					if(!textEngine.multiline) {
						textField.__style.setProperty("white-space","nowrap",null);
					} else {
						textField.__style.setProperty("word-wrap","break-word",null);
					}
					textField.__style.setProperty("overflow","hidden",null);
					if(textEngine.selectable) {
						textField.__style.setProperty("cursor","text",null);
					} else {
						textField.__style.setProperty("cursor","inherit",null);
					}
					textField.__div.contentEditable = textEngine.type == 1;
					var style = textField.__style;
					textField.__div.innerHTML = textEngine.text;
					if(textEngine.background) {
						style.setProperty("background-color","#" + StringTools.hex(textEngine.backgroundColor,6),null);
					} else {
						style.removeProperty("background-color");
					}
					if(textEngine.border) {
						style.setProperty("border","solid 1px #" + StringTools.hex(textEngine.borderColor,6),null);
					} else {
						style.removeProperty("border");
					}
					style.setProperty("font",openfl__$internal_text_TextEngine.getFont(textField.__textFormat),null);
					style.setProperty("color","#" + StringTools.hex(textField.__textFormat.color,6),null);
					if(textEngine.autoSize != 2) {
						style.setProperty("width","auto",null);
					} else {
						style.setProperty("width",textEngine.width + "px",null);
					}
					style.setProperty("height",textEngine.height + "px",null);
					switch(textField.__textFormat.align) {
					case 0:
						style.setProperty("text-align","center",null);
						break;
					case 4:
						style.setProperty("text-align","right",null);
						break;
					default:
						style.setProperty("text-align","left",null);
					}
					textField.__dirty = false;
				} else if(textField.__div != null) {
					renderSession.element.removeChild(textField.__div);
					textField.__div = null;
				}
			}
			if(textField.__div != null) {
				openfl__$internal_renderer_dom_DOMRenderer.applyStyle(textField,renderSession,true,true,false);
			}
		} else if(textField.__div != null) {
			renderSession.element.removeChild(textField.__div);
			textField.__div = null;
			textField.__style = null;
		}
	}
	,__renderGL: function(renderSession) {
		var textEngine = this.__textEngine;
		var bounds = textEngine.bounds;
		var graphics = this.__graphics;
		if(this.__dirty) {
			this.__updateLayout();
			if(graphics.__bounds == null) {
				graphics.__bounds = new openfl_geom_Rectangle();
			}
			graphics.__bounds.copyFrom(bounds);
		}
		graphics.__update();
		if(this.__dirty || graphics.__dirty) {
			var width = graphics.__width;
			var height = graphics.__height;
			if((textEngine.text == null || textEngine.text == "") && !textEngine.background && !textEngine.border && !textEngine.__hasFocus && (textEngine.type != 1 || !textEngine.selectable) || (textEngine.width <= 0 || textEngine.height <= 0) && textEngine.autoSize != 2) {
				this.__graphics.__canvas = null;
				this.__graphics.__context = null;
				this.__graphics.__bitmap = null;
				this.__graphics.set___dirty(false);
				this.__dirty = false;
			} else {
				if(this.__graphics.__canvas == null) {
					this.__graphics.__canvas = window.document.createElement("canvas");
					this.__graphics.__context = this.__graphics.__canvas.getContext("2d");
				}
				openfl__$internal_renderer_canvas_CanvasTextField.context = graphics.__context;
				graphics.__canvas.width = width;
				graphics.__canvas.height = height;
				var transform = graphics.__renderTransform;
				if(renderSession.roundPixels) {
					openfl__$internal_renderer_canvas_CanvasTextField.context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx | 0,transform.ty | 0);
				} else {
					openfl__$internal_renderer_canvas_CanvasTextField.context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx,transform.ty);
				}
				if(textEngine.text != null && textEngine.text != "" || textEngine.__hasFocus) {
					var text = textEngine.text;
					if(!renderSession.allowSmoothing || textEngine.antiAliasType == 0 && textEngine.sharpness == 400) {
						graphics.__context.mozImageSmoothingEnabled = false;
						graphics.__context.msImageSmoothingEnabled = false;
						graphics.__context.imageSmoothingEnabled = false;
					} else {
						graphics.__context.mozImageSmoothingEnabled = true;
						graphics.__context.msImageSmoothingEnabled = true;
						graphics.__context.imageSmoothingEnabled = true;
					}
					if(textEngine.border || textEngine.background) {
						openfl__$internal_renderer_canvas_CanvasTextField.context.rect(0.5,0.5,bounds.width - 1,bounds.height - 1);
						if(textEngine.background) {
							var tmp = StringTools.hex(textEngine.backgroundColor,6);
							openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle = "#" + tmp;
							openfl__$internal_renderer_canvas_CanvasTextField.context.fill();
						}
						if(textEngine.border) {
							openfl__$internal_renderer_canvas_CanvasTextField.context.lineWidth = 1;
							var tmp1 = StringTools.hex(textEngine.borderColor,6);
							openfl__$internal_renderer_canvas_CanvasTextField.context.strokeStyle = "#" + tmp1;
							openfl__$internal_renderer_canvas_CanvasTextField.context.stroke();
						}
					}
					openfl__$internal_renderer_canvas_CanvasTextField.context.textBaseline = "top";
					openfl__$internal_renderer_canvas_CanvasTextField.context.textAlign = "start";
					var scrollX = -this.get_scrollH();
					var scrollY = 0.0;
					var _g1 = 0;
					var _g = this.get_scrollV() - 1;
					while(_g1 < _g) scrollY -= textEngine.lineHeights.get(_g1++);
					var advance;
					var offsetY = 0.0;
					var applyHack = new EReg("(iPad|iPhone|iPod|Firefox)","g").match(window.navigator.userAgent);
					var _g2 = 0;
					var _g11 = textEngine.layoutGroups;
					while(_g2 < _g11.get_length()) {
						var group = _g11.get(_g2);
						++_g2;
						if(group.lineIndex < this.get_scrollV() - 1) {
							continue;
						}
						if(group.lineIndex > this.get_scrollV() + textEngine.bottomScrollV - 2) {
							break;
						}
						openfl__$internal_renderer_canvas_CanvasTextField.context.font = openfl__$internal_text_TextEngine.getFont(group.format);
						var tmp2 = StringTools.hex(group.format.color,6);
						openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle = "#" + tmp2;
						if(applyHack) {
							offsetY = group.format.size * 0.185;
						}
						haxe_Log.trace(scrollY,{ fileName : "CanvasTextField.hx", lineNumber : 249, className : "openfl._internal.renderer.canvas.CanvasTextField", methodName : "render"});
						haxe_Log.trace(this.get_scrollV(),{ fileName : "CanvasTextField.hx", lineNumber : 250, className : "openfl._internal.renderer.canvas.CanvasTextField", methodName : "render"});
						openfl__$internal_renderer_canvas_CanvasTextField.context.fillText(text.substring(group.startIndex,group.endIndex),group.offsetX + scrollX,group.offsetY + offsetY + scrollY);
						if(this.__caretIndex > -1 && textEngine.selectable) {
							if(this.__selectionIndex == this.__caretIndex) {
								if(this.__showCursor && group.startIndex <= this.__caretIndex && group.endIndex >= this.__caretIndex) {
									advance = 0.0;
									var _g3 = 0;
									var _g21 = this.__caretIndex - group.startIndex;
									while(_g3 < _g21) {
										var i = _g3++;
										if(group.advances.length <= i) {
											break;
										}
										advance += group.advances[i];
									}
									openfl__$internal_renderer_canvas_CanvasTextField.context.fillRect(group.offsetX + advance,group.offsetY,1,group.height);
								}
							} else if(group.startIndex <= this.__caretIndex && group.endIndex >= this.__caretIndex || group.startIndex <= this.__selectionIndex && group.endIndex >= this.__selectionIndex) {
								var selectionStart = Math.min(this.__selectionIndex,this.__caretIndex) | 0;
								var selectionEnd = Math.max(this.__selectionIndex,this.__caretIndex) | 0;
								if(group.startIndex > selectionStart) {
									selectionStart = group.startIndex;
								}
								if(group.endIndex < selectionEnd) {
									selectionEnd = group.endIndex;
								}
								var start;
								var end;
								start = this.getCharBoundaries(selectionStart);
								if(selectionEnd >= textEngine.text.length) {
									end = this.getCharBoundaries(textEngine.text.length - 1);
									end.x += end.width + 2;
								} else {
									end = this.getCharBoundaries(selectionEnd);
								}
								if(start != null && end != null) {
									openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle = "#000000";
									openfl__$internal_renderer_canvas_CanvasTextField.context.fillRect(start.x,start.y,end.x - start.x,group.height);
									openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle = "#FFFFFF";
									openfl__$internal_renderer_canvas_CanvasTextField.context.fillText(text.substring(selectionStart,selectionEnd),scrollX + start.x,group.offsetY + offsetY + scrollY);
								}
							}
						}
					}
				} else {
					if(textEngine.border || textEngine.background) {
						if(textEngine.border) {
							openfl__$internal_renderer_canvas_CanvasTextField.context.rect(0.5,0.5,bounds.width - 1,bounds.height - 1);
						} else {
							openfl__$internal_renderer_canvas_CanvasTextField.context.rect(0,0,bounds.width,bounds.height);
						}
						if(textEngine.background) {
							var tmp3 = StringTools.hex(textEngine.backgroundColor,6);
							openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle = "#" + tmp3;
							openfl__$internal_renderer_canvas_CanvasTextField.context.fill();
						}
						if(textEngine.border) {
							openfl__$internal_renderer_canvas_CanvasTextField.context.lineWidth = 1;
							openfl__$internal_renderer_canvas_CanvasTextField.context.lineCap = "square";
							var tmp4 = StringTools.hex(textEngine.borderColor,6);
							openfl__$internal_renderer_canvas_CanvasTextField.context.strokeStyle = "#" + tmp4;
							openfl__$internal_renderer_canvas_CanvasTextField.context.stroke();
						}
					}
					if(this.__caretIndex > -1 && textEngine.selectable && this.__showCursor) {
						var scrollX1 = -this.get_scrollH();
						var scrollY1 = 0.0;
						var _g12 = 0;
						var _g4 = this.get_scrollV() - 1;
						while(_g12 < _g4) scrollY1 -= textEngine.lineHeights.get(_g12++);
						openfl__$internal_renderer_canvas_CanvasTextField.context.beginPath();
						var tmp5 = StringTools.hex(this.get_defaultTextFormat().color,6);
						openfl__$internal_renderer_canvas_CanvasTextField.context.strokeStyle = "#" + tmp5;
						openfl__$internal_renderer_canvas_CanvasTextField.context.moveTo(scrollX1 + 2.5,scrollY1 + 2.5);
						openfl__$internal_renderer_canvas_CanvasTextField.context.lineWidth = 1;
						openfl__$internal_renderer_canvas_CanvasTextField.context.lineTo(scrollX1 + 2.5,scrollY1 + openfl__$internal_text_TextEngine.getFormatHeight(this.get_defaultTextFormat()) - 1);
						openfl__$internal_renderer_canvas_CanvasTextField.context.stroke();
						openfl__$internal_renderer_canvas_CanvasTextField.context.closePath();
					}
				}
				graphics.__bitmap = openfl_display_BitmapData.fromCanvas(this.__graphics.__canvas);
				graphics.__visible = true;
				this.__dirty = false;
				graphics.set___dirty(false);
			}
		}
		openfl_display_InteractiveObject.prototype.__renderGL.call(this,renderSession);
	}
	,__startCursorTimer: function() {
		this.__cursorTimer = haxe_Timer.delay($bind(this,this.__startCursorTimer),600);
		this.__showCursor = !this.__showCursor;
		this.__dirty = true;
	}
	,__startTextInput: function() {
		if(this.__caretIndex < 0) {
			this.__caretIndex = this.__text.length;
			this.__selectionIndex = this.__caretIndex;
		}
		if(this.stage != null) {
			this.stage.window.backend.setEnableTextEvents(true);
			if(!this.__inputEnabled) {
				this.stage.window.backend.setEnableTextEvents(true);
				if(!this.stage.window.onTextInput.has($bind(this,this.window_onTextInput))) {
					this.stage.window.onTextInput.add($bind(this,this.window_onTextInput));
					this.stage.window.onKeyDown.add($bind(this,this.window_onKeyDown));
				}
				this.__inputEnabled = true;
				this.__startCursorTimer();
			}
		}
	}
	,__stopCursorTimer: function() {
		if(this.__cursorTimer != null) {
			this.__cursorTimer.stop();
			this.__cursorTimer = null;
		}
		if(this.__showCursor) {
			this.__showCursor = false;
			this.__dirty = true;
		}
	}
	,__stopTextInput: function() {
		if(this.__inputEnabled && this.stage != null) {
			this.stage.window.backend.setEnableTextEvents(false);
			this.stage.window.onTextInput.remove($bind(this,this.window_onTextInput));
			this.stage.window.onKeyDown.remove($bind(this,this.window_onKeyDown));
			this.__inputEnabled = false;
			this.__stopCursorTimer();
		}
	}
	,__updateLayout: function() {
		if(this.__layoutDirty) {
			var cacheWidth = this.__textEngine.width;
			this.__textEngine.update();
			if(this.__textEngine.autoSize != 2) {
				if(this.__textEngine.width != cacheWidth) {
					switch(this.__textEngine.autoSize) {
					case 0:
						var _g = this;
						_g.set_x(_g.get_x() + (cacheWidth - this.__textEngine.width) / 2);
						break;
					case 3:
						var _g1 = this;
						_g1.set_x(_g1.get_x() + (cacheWidth - this.__textEngine.width));
						break;
					default:
					}
				}
				this.__textEngine.getBounds();
			}
			this.__layoutDirty = false;
		}
	}
	,__updateText: function(value) {
		this.__text = value;
		if(this.__text.length < this.__caretIndex) {
			this.__selectionIndex = this.__caretIndex = this.__text.length;
		}
		if(!this.__displayAsPassword) {
			this.__textEngine.text = this.__text;
		} else {
			var length = this.get_text().length;
			var mask = "";
			var _g1 = 0;
			while(_g1 < length) {
				++_g1;
				mask += "*";
			}
			this.__textEngine.text = mask;
		}
	}
	,get_antiAliasType: function() {
		return this.__textEngine.antiAliasType;
	}
	,set_antiAliasType: function(value) {
		return this.__textEngine.antiAliasType = value;
	}
	,get_autoSize: function() {
		return this.__textEngine.autoSize;
	}
	,set_autoSize: function(value) {
		if(value != this.__textEngine.autoSize) {
			this.__dirty = true;
			this.__layoutDirty = true;
		}
		return this.__textEngine.autoSize = value;
	}
	,get_background: function() {
		return this.__textEngine.background;
	}
	,set_background: function(value) {
		if(value != this.__textEngine.background) {
			this.__dirty = true;
		}
		return this.__textEngine.background = value;
	}
	,get_backgroundColor: function() {
		return this.__textEngine.backgroundColor;
	}
	,set_backgroundColor: function(value) {
		if(value != this.__textEngine.backgroundColor) {
			this.__dirty = true;
		}
		return this.__textEngine.backgroundColor = value;
	}
	,get_border: function() {
		return this.__textEngine.border;
	}
	,set_border: function(value) {
		if(value != this.__textEngine.border) {
			this.__dirty = true;
		}
		return this.__textEngine.border = value;
	}
	,get_borderColor: function() {
		return this.__textEngine.borderColor;
	}
	,set_borderColor: function(value) {
		if(value != this.__textEngine.borderColor) {
			this.__dirty = true;
		}
		return this.__textEngine.borderColor = value;
	}
	,get_bottomScrollV: function() {
		this.__updateLayout();
		return this.__textEngine.bottomScrollV;
	}
	,get_caretIndex: function() {
		return this.__caretIndex;
	}
	,get_defaultTextFormat: function() {
		return this.__textFormat.clone();
	}
	,set_defaultTextFormat: function(value) {
		this.__textFormat.__merge(value);
		this.__layoutDirty = true;
		this.__dirty = true;
		return value;
	}
	,get_displayAsPassword: function() {
		return this.__displayAsPassword;
	}
	,set_displayAsPassword: function(value) {
		if(value != this.__displayAsPassword) {
			this.__dirty = true;
			this.__layoutDirty = true;
			this.__displayAsPassword = value;
			this.__updateText(this.__text);
		}
		return value;
	}
	,get_embedFonts: function() {
		return this.__textEngine.embedFonts;
	}
	,set_embedFonts: function(value) {
		return this.__textEngine.embedFonts = value;
	}
	,get_gridFitType: function() {
		return this.__textEngine.gridFitType;
	}
	,set_gridFitType: function(value) {
		return this.__textEngine.gridFitType = value;
	}
	,get_height: function() {
		this.__updateLayout();
		return this.__textEngine.height;
	}
	,set_height: function(value) {
		if(this.get_scaleY() != 1 || value != this.__textEngine.height) {
			if(!this.__transformDirty) {
				this.__transformDirty = true;
				openfl_display_DisplayObject.__worldTransformDirty++;
			}
			this.__dirty = true;
			this.__layoutDirty = true;
		}
		this.set_scaleY(1);
		return this.__textEngine.height = value;
	}
	,get_htmlText: function() {
		return this.__text;
	}
	,set_htmlText: function(value) {
		if(!this.__isHTML || this.__text != value) {
			this.__dirty = true;
			this.__layoutDirty = true;
		}
		this.__isHTML = true;
		if(this.__div == null) {
			value = value.replace(openfl_text_TextField.__regexBreakTag.r,"\n");
			value = value.replace(openfl_text_TextField.__regexEntities[0].r,"\"");
			value = value.replace(openfl_text_TextField.__regexEntities[1].r,"'");
			value = value.replace(openfl_text_TextField.__regexEntities[2].r,"&");
			var segments = value.split("<");
			if(segments.length == 1) {
				value = value.replace(openfl_text_TextField.__regexHTMLTag.r,"");
				if(this.__textEngine.textFormatRanges.get_length() > 1) {
					this.__textEngine.textFormatRanges.splice(1,this.__textEngine.textFormatRanges.get_length() - 1);
				}
				value = value.replace(openfl_text_TextField.__regexEntities[3].r,"<");
				value = value.replace(openfl_text_TextField.__regexEntities[4].r,">");
				var range = this.__textEngine.textFormatRanges.get(0);
				range.format = this.__textFormat;
				range.start = 0;
				range.end = value.length;
				this.__updateText(value);
				return value;
			} else {
				this.__textEngine.textFormatRanges.splice(0,this.__textEngine.textFormatRanges.get_length());
				value = "";
				var segment;
				var _g1 = 0;
				var _g = segments.length;
				while(_g1 < _g) {
					var i = _g1++;
					segment = segments[i];
					segment = segment.replace(openfl_text_TextField.__regexEntities[3].r,"<");
					segment = segment.replace(openfl_text_TextField.__regexEntities[4].r,">");
					segments[i] = segment;
				}
				var formatStack = [this.__textFormat.clone()];
				var sub;
				var noLineBreak = false;
				var _g2 = 0;
				while(_g2 < segments.length) {
					var segment1 = segments[_g2];
					++_g2;
					if(segment1 == "") {
						continue;
					}
					var isClosingTag = HxOverrides.substr(segment1,0,1) == "/";
					var tagEndIndex = segment1.indexOf(">");
					var start = tagEndIndex + 1;
					var spaceIndex = segment1.indexOf(" ");
					var tagName = segment1.substring(isClosingTag ? 1 : 0,spaceIndex > -1 && spaceIndex < tagEndIndex ? spaceIndex : tagEndIndex);
					var format;
					if(isClosingTag) {
						formatStack.pop();
						format = formatStack[formatStack.length - 1].clone();
						if(tagName.toLowerCase() == "p" && this.__textEngine.textFormatRanges.get_length() > 0) {
							value += "\n";
							noLineBreak = true;
						}
						if(start < segment1.length) {
							sub = HxOverrides.substr(segment1,start,null);
							this.__textEngine.textFormatRanges.push(new openfl__$internal_text_TextFormatRange(format,value.length,value.length + sub.length));
							value += sub;
							noLineBreak = false;
						}
					} else {
						format = formatStack[formatStack.length - 1].clone();
						if(tagEndIndex > -1) {
							switch(tagName.toLowerCase()) {
							case "b":
								format.bold = true;
								break;
							case "em":case "i":
								format.italic = true;
								break;
							case "font":
								if(openfl_text_TextField.__regexFace.match(segment1)) {
									format.font = this.__getAttributeMatch(openfl_text_TextField.__regexFace);
								}
								if(openfl_text_TextField.__regexColor.match(segment1)) {
									format.color = Std.parseInt("0x" + this.__getAttributeMatch(openfl_text_TextField.__regexColor));
								}
								if(openfl_text_TextField.__regexSize.match(segment1)) {
									format.size = Std.parseInt(this.__getAttributeMatch(openfl_text_TextField.__regexSize));
								}
								break;
							case "p":
								if(this.__textEngine.textFormatRanges.get_length() > 0 && !noLineBreak) {
									value += "\n";
								}
								if(openfl_text_TextField.__regexAlign.match(segment1)) {
									format.align = openfl_text__$TextFormatAlign_TextFormatAlign_$Impl_$.fromString(this.__getAttributeMatch(openfl_text_TextField.__regexAlign).toLowerCase());
								}
								break;
							case "textformat":
								if(openfl_text_TextField.__regexBlockIndent.match(segment1)) {
									format.blockIndent = Std.parseInt(this.__getAttributeMatch(openfl_text_TextField.__regexBlockIndent));
								}
								if(openfl_text_TextField.__regexIndent.match(segment1)) {
									format.indent = Std.parseInt(this.__getAttributeMatch(openfl_text_TextField.__regexIndent));
								}
								if(openfl_text_TextField.__regexLeading.match(segment1)) {
									format.leading = Std.parseInt(this.__getAttributeMatch(openfl_text_TextField.__regexLeading));
								}
								if(openfl_text_TextField.__regexLeftMargin.match(segment1)) {
									format.leftMargin = Std.parseInt(this.__getAttributeMatch(openfl_text_TextField.__regexLeftMargin));
								}
								if(openfl_text_TextField.__regexRightMargin.match(segment1)) {
									format.rightMargin = Std.parseInt(this.__getAttributeMatch(openfl_text_TextField.__regexRightMargin));
								}
								if(openfl_text_TextField.__regexTabStops.match(segment1)) {
									var values = this.__getAttributeMatch(openfl_text_TextField.__regexTabStops).split(" ");
									var tabStops = [];
									var _g11 = 0;
									while(_g11 < values.length) {
										var stop = values[_g11];
										++_g11;
										tabStops.push(Std.parseInt(stop));
									}
									format.tabStops = tabStops;
								}
								break;
							case "u":
								format.underline = true;
								break;
							}
							formatStack.push(format);
							if(start < segment1.length) {
								sub = segment1.substring(start);
								this.__textEngine.textFormatRanges.push(new openfl__$internal_text_TextFormatRange(format,value.length,value.length + sub.length));
								value += sub;
								noLineBreak = false;
							}
						} else {
							this.__textEngine.textFormatRanges.push(new openfl__$internal_text_TextFormatRange(format,value.length,value.length + segment1.length));
							value += segment1;
							noLineBreak = false;
						}
					}
				}
			}
		}
		this.__updateText(value);
		return value;
	}
	,get_length: function() {
		if(this.__text != null) {
			return this.__text.length;
		}
		return 0;
	}
	,get_maxChars: function() {
		return this.__textEngine.maxChars;
	}
	,set_maxChars: function(value) {
		if(value != this.__textEngine.maxChars) {
			this.__dirty = true;
			this.__layoutDirty = true;
		}
		return this.__textEngine.maxChars = value;
	}
	,get_maxScrollH: function() {
		this.__updateLayout();
		return this.__textEngine.maxScrollH;
	}
	,get_maxScrollV: function() {
		this.__updateLayout();
		return this.__textEngine.maxScrollV;
	}
	,get_mouseWheelEnabled: function() {
		return this.__mouseWheelEnabled;
	}
	,set_mouseWheelEnabled: function(value) {
		return this.__mouseWheelEnabled = value;
	}
	,get_multiline: function() {
		return this.__textEngine.multiline;
	}
	,set_multiline: function(value) {
		if(value != this.__textEngine.multiline) {
			this.__dirty = true;
			this.__layoutDirty = true;
		}
		return this.__textEngine.multiline = value;
	}
	,get_numLines: function() {
		this.__updateLayout();
		return this.__textEngine.numLines;
	}
	,get_restrict: function() {
		return this.__textEngine.restrict;
	}
	,set_restrict: function(value) {
		return this.__textEngine.restrict = value;
	}
	,get_scrollH: function() {
		return this.__textEngine.scrollH;
	}
	,set_scrollH: function(value) {
		this.__updateLayout();
		if(value > this.__textEngine.maxScrollH) {
			value = this.__textEngine.maxScrollH;
		}
		if(value < 0) {
			value = 0;
		}
		if(value != this.__textEngine.scrollH) {
			this.__dirty = true;
		}
		return this.__textEngine.scrollH = value;
	}
	,get_scrollV: function() {
		return this.__textEngine.scrollV;
	}
	,set_scrollV: function(value) {
		this.__updateLayout();
		if(value > this.__textEngine.maxScrollV) {
			value = this.__textEngine.maxScrollV;
		}
		if(value < 1) {
			value = 1;
		}
		if(value != this.__textEngine.scrollV) {
			this.__dirty = true;
		}
		return this.__textEngine.scrollV = value;
	}
	,get_selectable: function() {
		return this.__textEngine.selectable;
	}
	,set_selectable: function(value) {
		if(value != this.__textEngine.selectable && this.get_type() == 1) {
			if(this.stage != null && this.stage.get_focus() == this) {
				this.__startTextInput();
			} else if(!value) {
				this.__stopTextInput();
			}
		}
		return this.__textEngine.selectable = value;
	}
	,get_selectionBeginIndex: function() {
		return Math.min(this.__caretIndex,this.__selectionIndex) | 0;
	}
	,get_selectionEndIndex: function() {
		return Math.max(this.__caretIndex,this.__selectionIndex) | 0;
	}
	,get_sharpness: function() {
		return this.__textEngine.sharpness;
	}
	,set_sharpness: function(value) {
		if(value != this.__textEngine.sharpness) {
			this.__dirty = true;
		}
		return this.__textEngine.sharpness = value;
	}
	,get_text: function() {
		return this.__text;
	}
	,set_text: function(value) {
		if(this.__isHTML || this.__text != value) {
			this.__dirty = true;
			this.__layoutDirty = true;
		} else {
			return value;
		}
		if(this.__textEngine.textFormatRanges.get_length() > 1) {
			this.__textEngine.textFormatRanges.splice(1,this.__textEngine.textFormatRanges.get_length() - 1);
		}
		var range = this.__textEngine.textFormatRanges.get(0);
		range.format = this.__textFormat;
		range.start = 0;
		range.end = value.length;
		this.__isHTML = false;
		this.__updateText(value);
		return value;
	}
	,get_textColor: function() {
		return this.__textFormat.color;
	}
	,set_textColor: function(value) {
		if(value != this.__textFormat.color) {
			this.__dirty = true;
		}
		var _g = 0;
		var _g1 = this.__textEngine.textFormatRanges;
		while(_g < _g1.get_length()) {
			var range = _g1.get(_g);
			++_g;
			range.format.color = value;
		}
		return this.__textFormat.color = value;
	}
	,get_textWidth: function() {
		this.__updateLayout();
		return this.__textEngine.textWidth;
	}
	,get_textHeight: function() {
		this.__updateLayout();
		return this.__textEngine.textHeight;
	}
	,get_type: function() {
		return this.__textEngine.type;
	}
	,set_type: function(value) {
		if(value != this.__textEngine.type) {
			if(value == 1) {
				this.addEventListener("focusIn",$bind(this,this.this_onFocusIn));
				this.addEventListener("focusOut",$bind(this,this.this_onFocusOut));
				this.addEventListener("addedToStage",$bind(this,this.this_onAddedToStage));
				this.this_onFocusIn(null);
			} else {
				this.removeEventListener("focusIn",$bind(this,this.this_onFocusIn));
				this.removeEventListener("focusOut",$bind(this,this.this_onFocusOut));
				this.removeEventListener("addedToStage",$bind(this,this.this_onAddedToStage));
				this.__stopTextInput();
			}
			this.__dirty = true;
		}
		return this.__textEngine.type = value;
	}
	,get_width: function() {
		this.__updateLayout();
		return this.__textEngine.width;
	}
	,set_width: function(value) {
		if(this.get_scaleX() != 1 || this.__textEngine.width != value) {
			if(!this.__transformDirty) {
				this.__transformDirty = true;
				openfl_display_DisplayObject.__worldTransformDirty++;
			}
			this.__dirty = true;
			this.__layoutDirty = true;
		}
		this.set_scaleX(1);
		return this.__textEngine.width = value;
	}
	,get_wordWrap: function() {
		return this.__textEngine.wordWrap;
	}
	,set_wordWrap: function(value) {
		if(value != this.__textEngine.wordWrap) {
			this.__dirty = true;
			this.__layoutDirty = true;
		}
		return this.__textEngine.wordWrap = value;
	}
	,stage_onMouseMove: function(event) {
		if(this.stage == null) {
			return;
		}
		if(this.__textEngine.selectable && this.__selectionIndex >= 0) {
			this.__updateLayout();
			var position = this.__getPosition(this.get_mouseX(),this.get_mouseY());
			if(position != this.__caretIndex) {
				this.__caretIndex = position;
				this.__dirty = true;
			}
		}
	}
	,stage_onMouseUp: function(event) {
		if(this.stage == null) {
			return;
		}
		this.stage.removeEventListener("mouseMove",$bind(this,this.stage_onMouseMove));
		this.stage.removeEventListener("mouseUp",$bind(this,this.stage_onMouseUp));
		if(this.stage.get_focus() == this) {
			this.__getWorldTransform();
			this.__updateLayout();
			var upPos = this.__getPosition(this.get_mouseX(),this.get_mouseY());
			var leftPos;
			var rightPos;
			leftPos = Math.min(this.__selectionIndex,upPos) | 0;
			rightPos = Math.max(this.__selectionIndex,upPos) | 0;
			this.__selectionIndex = leftPos;
			this.__caretIndex = rightPos;
			if(this.__inputEnabled) {
				this.this_onFocusIn(null);
				this.__stopCursorTimer();
				this.__startCursorTimer();
			}
		}
	}
	,this_onAddedToStage: function(event) {
		this.this_onFocusIn(null);
	}
	,this_onFocusIn: function(event) {
		if(this.get_selectable() && this.get_type() == 1 && this.stage != null && this.stage.get_focus() == this) {
			this.__startTextInput();
		}
	}
	,this_onFocusOut: function(event) {
		this.__stopTextInput();
	}
	,this_onMouseDown: function(event) {
		if(!this.get_selectable()) {
			return;
		}
		this.__updateLayout();
		this.__caretIndex = this.__getPosition(this.get_mouseX(),this.get_mouseY());
		this.__selectionIndex = this.__caretIndex;
		this.__dirty = true;
		this.stage.addEventListener("mouseMove",$bind(this,this.stage_onMouseMove));
		this.stage.addEventListener("mouseUp",$bind(this,this.stage_onMouseUp));
	}
	,window_onKeyDown: function(key,modifier) {
		switch(key) {
		case 8:
			if(this.__selectionIndex == this.__caretIndex && this.__caretIndex > 0) {
				this.__selectionIndex = this.__caretIndex - 1;
			}
			if(this.__selectionIndex != this.__caretIndex) {
				this.replaceSelectedText("");
				this.__selectionIndex = this.__caretIndex;
				this.dispatchEvent(new openfl_events_Event("change",true));
			}
			break;
		case 99:
			if(modifier == 64 || modifier == 128) {
				this.__text.substring(this.__caretIndex,this.__selectionIndex);
			}
			break;
		case 118:
			if(modifier == 64 || modifier == 128) {
				var text = lime_system_Clipboard.get_text();
				if(text != null) {
					this.replaceSelectedText(text);
				} else {
					this.replaceSelectedText("");
				}
				this.dispatchEvent(new openfl_events_Event("change",true));
			} else {
				this.__textEngine.textFormatRanges.get(this.__textEngine.textFormatRanges.get_length() - 1).end = this.__text.length;
			}
			break;
		case 120:
			if(modifier == 64 || modifier == 128) {
				this.__text.substring(this.__caretIndex,this.__selectionIndex);
				if(this.__caretIndex != this.__selectionIndex) {
					this.replaceSelectedText("");
					this.dispatchEvent(new openfl_events_Event("change",true));
				}
			}
			break;
		case 127:
			if(this.__selectionIndex == this.__caretIndex && this.__caretIndex < this.__text.length) {
				this.__selectionIndex = this.__caretIndex + 1;
			}
			if(this.__selectionIndex != this.__caretIndex) {
				this.replaceSelectedText("");
				this.__selectionIndex = this.__caretIndex;
				this.dispatchEvent(new openfl_events_Event("change",true));
			}
			break;
		case 1073741903:
			if(lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_shiftKey(modifier)) {
				if(this.__caretIndex < this.__text.length) {
					this.__caretIndex++;
				}
			} else {
				if(this.__selectionIndex == this.__caretIndex) {
					if(this.__caretIndex < this.__text.length) {
						this.__caretIndex++;
					}
				} else {
					this.__caretIndex = Math.max(this.__caretIndex,this.__selectionIndex) | 0;
				}
				this.__selectionIndex = this.__caretIndex;
			}
			this.__stopCursorTimer();
			this.__startCursorTimer();
			break;
		case 1073741904:
			if(lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_shiftKey(modifier)) {
				if(this.__caretIndex > 0) {
					this.__caretIndex--;
				}
			} else {
				if(this.__selectionIndex == this.__caretIndex) {
					if(this.__caretIndex > 0) {
						this.__caretIndex--;
					}
				} else {
					this.__caretIndex = Math.min(this.__caretIndex,this.__selectionIndex) | 0;
				}
				this.__selectionIndex = this.__caretIndex;
			}
			this.__stopCursorTimer();
			this.__startCursorTimer();
			break;
		case 13:case 1073741912:
			this.replaceSelectedText("\n");
			this.dispatchEvent(new openfl_events_Event("change",true));
			break;
		default:
		}
	}
	,window_onTextInput: function(value) {
		this.replaceSelectedText(value);
		this.dispatchEvent(new openfl_events_Event("change",true));
	}
	,__class__: openfl_text_TextField
	,__properties__: $extend(openfl_display_InteractiveObject.prototype.__properties__,{set_wordWrap:"set_wordWrap",get_wordWrap:"get_wordWrap",set_type:"set_type",get_type:"get_type",get_textWidth:"get_textWidth",get_textHeight:"get_textHeight",set_textColor:"set_textColor",get_textColor:"get_textColor",set_text:"set_text",get_text:"get_text",set_sharpness:"set_sharpness",get_sharpness:"get_sharpness",get_selectionEndIndex:"get_selectionEndIndex",get_selectionBeginIndex:"get_selectionBeginIndex",set_selectable:"set_selectable",get_selectable:"get_selectable",set_scrollV:"set_scrollV",get_scrollV:"get_scrollV",set_scrollH:"set_scrollH",get_scrollH:"get_scrollH",set_restrict:"set_restrict",get_restrict:"get_restrict",get_numLines:"get_numLines",set_multiline:"set_multiline",get_multiline:"get_multiline",set_mouseWheelEnabled:"set_mouseWheelEnabled",get_mouseWheelEnabled:"get_mouseWheelEnabled",get_maxScrollV:"get_maxScrollV",get_maxScrollH:"get_maxScrollH",set_maxChars:"set_maxChars",get_maxChars:"get_maxChars",get_length:"get_length",set_htmlText:"set_htmlText",get_htmlText:"get_htmlText",set_gridFitType:"set_gridFitType",get_gridFitType:"get_gridFitType",set_embedFonts:"set_embedFonts",get_embedFonts:"get_embedFonts",set_displayAsPassword:"set_displayAsPassword",get_displayAsPassword:"get_displayAsPassword",set_defaultTextFormat:"set_defaultTextFormat",get_defaultTextFormat:"get_defaultTextFormat",get_caretIndex:"get_caretIndex",get_bottomScrollV:"get_bottomScrollV",set_borderColor:"set_borderColor",get_borderColor:"get_borderColor",set_border:"set_border",get_border:"get_border",set_backgroundColor:"set_backgroundColor",get_backgroundColor:"get_backgroundColor",set_background:"set_background",get_background:"get_background",set_autoSize:"set_autoSize",get_autoSize:"get_autoSize",set_antiAliasType:"set_antiAliasType",get_antiAliasType:"get_antiAliasType"})
});
var format_swf_instance_DynamicText = function(data,tag) {
	openfl_text_TextField.call(this);
	var rect = tag.bounds.get_rect();
	this.offset = new openfl_geom_Matrix(1,0,0,1,rect.x,rect.y - 2);
	this.set_width(rect.width);
	this.set_height(rect.height);
	this.set_multiline(tag.multiline);
	this.set_wordWrap(tag.wordWrap);
	this.set_displayAsPassword(tag.password);
	this.set_border(tag.border);
	this.set_selectable(!tag.noSelect);
	var format1 = new openfl_text_TextFormat();
	if(tag.hasTextColor) {
		format1.color = tag.textColor & 16777215;
	}
	format1.size = Math.round(tag.fontHeight / 20);
	if(tag.hasFont) {
		var font = data.getCharacter(tag.fontId);
		if(js_Boot.__instanceof(font,format_swf_tags_TagDefineFont2)) {
			format1.font = (js_Boot.__cast(font , format_swf_tags_TagDefineFont2)).fontName;
			this.set_embedFonts(true);
		}
	}
	if(tag.hasLayout) {
		switch(tag.align) {
		case 0:
			format1.align = 3;
			break;
		case 1:
			format1.align = 4;
			break;
		case 2:
			format1.align = 0;
			break;
		case 3:
			format1.align = 2;
			break;
		}
		format1.leftMargin = tag.leftMargin / 20 | 0;
		format1.rightMargin = tag.rightMargin / 20 | 0;
		format1.indent = tag.indent / 20 | 0;
		format1.leading = tag.leading / 20 | 0;
		if(this.get_embedFonts()) {
			format1.leading += 4;
		}
	}
	this.set_defaultTextFormat(format1);
	if(tag.hasText) {
		if(tag.html) {
			this.set_htmlText(tag.initialText);
		} else {
			this.set_text(tag.initialText);
		}
	}
	this.set_autoSize(tag.autoSize ? 1 : 2);
};
$hxClasses["format.swf.instance.DynamicText"] = format_swf_instance_DynamicText;
format_swf_instance_DynamicText.__name__ = ["format","swf","instance","DynamicText"];
format_swf_instance_DynamicText.__super__ = openfl_text_TextField;
format_swf_instance_DynamicText.prototype = $extend(openfl_text_TextField.prototype,{
	offset: null
	,data: null
	,tag: null
	,__class__: format_swf_instance_DynamicText
});
var openfl_display_Shape = function() {
	openfl_display_DisplayObject.call(this);
};
$hxClasses["openfl.display.Shape"] = openfl_display_Shape;
openfl_display_Shape.__name__ = ["openfl","display","Shape"];
openfl_display_Shape.__super__ = openfl_display_DisplayObject;
openfl_display_Shape.prototype = $extend(openfl_display_DisplayObject.prototype,{
	get_graphics: function() {
		if(this.__graphics == null) {
			this.__graphics = new openfl_display_Graphics(this);
		}
		return this.__graphics;
	}
	,__class__: openfl_display_Shape
	,__properties__: $extend(openfl_display_DisplayObject.prototype.__properties__,{get_graphics:"get_graphics"})
});
var format_swf_instance_MorphShape = function(data,tag) {
	openfl_display_Shape.call(this);
	this.handler = new format_swf_exporters_ShapeCommandExporter(data);
	this.tag = tag;
	this.tag.exportHandler = this.handler;
	this.data = data;
};
$hxClasses["format.swf.instance.MorphShape"] = format_swf_instance_MorphShape;
format_swf_instance_MorphShape.__name__ = ["format","swf","instance","MorphShape"];
format_swf_instance_MorphShape.__super__ = openfl_display_Shape;
format_swf_instance_MorphShape.prototype = $extend(openfl_display_Shape.prototype,{
	tag: null
	,handler: null
	,data: null
	,render: function(ratio) {
		if(ratio == null) {
			ratio = 0;
		}
		this.tag["export"](ratio / 65536.0);
		this.get_graphics().clear();
		var _g = 0;
		var _g1 = this.handler.commands;
		while(_g < _g1.length) {
			var command = _g1[_g];
			++_g;
			switch(command[1]) {
			case 0:
				var bitmap = new format_swf_instance_Bitmap(this.data.getCharacter(command[2]));
				if(bitmap.bitmapData != null) {
					this.get_graphics().beginBitmapFill(bitmap.bitmapData,command[3],command[4],command[5]);
				}
				break;
			case 1:
				this.get_graphics().beginFill(command[2],command[3]);
				break;
			case 2:
				this.get_graphics().beginGradientFill(command[2],command[3],command[4],command[5],command[6],command[7],command[8],command[9]);
				break;
			case 3:
				this.get_graphics().curveTo(command[2],command[3],command[4],command[5]);
				break;
			case 4:
				this.get_graphics().endFill();
				break;
			case 5:
				var thickness = command[2];
				if(thickness != null) {
					this.get_graphics().lineStyle(thickness,command[3],command[4],command[5],command[6],command[7],command[8],command[9]);
				} else {
					this.get_graphics().lineStyle();
				}
				break;
			case 6:
				this.get_graphics().lineTo(command[2],command[3]);
				break;
			case 7:
				this.get_graphics().moveTo(command[2],command[3]);
				break;
			}
		}
	}
	,__class__: format_swf_instance_MorphShape
});
var format_swf_instance_MovieClip = function(data) {
	this._scale9ScaleY = 1;
	this._scale9ScaleX = 1;
	openfl_display_MovieClip.call(this);
	this.data = data;
	if(!format_swf_instance_MovieClip.initialized) {
		format_swf_instance_MovieClip.clips = [];
		format_swf_instance_MovieClip.initialized = true;
	}
	this.__currentFrame = 1;
	this.__totalFrames = data.frames.length;
	this.__currentLabels = [];
	var frame = data.frameLabels.keys();
	while(frame.hasNext()) {
		var frame1 = frame.next();
		this.__currentLabels.push(new openfl_display_FrameLabel(data.frameLabels.h[frame1],frame1 + 1));
	}
	if(this.__currentLabels.length > 0) {
		this.__currentLabels.sort(function(a,b) {
			return a.get_frame() - b.get_frame();
		});
	}
	this.objectPool = new haxe_ds_IntMap();
	this.activeObjects = [];
	this.update();
	if(this.__totalFrames > 1) {
		this.play();
	}
};
$hxClasses["format.swf.instance.MovieClip"] = format_swf_instance_MovieClip;
format_swf_instance_MovieClip.__name__ = ["format","swf","instance","MovieClip"];
format_swf_instance_MovieClip.stopAllClips = function() {
	if(format_swf_instance_MovieClip.clips != null) {
		while(format_swf_instance_MovieClip.clips.length > 0) format_swf_instance_MovieClip.clips[0].stop();
	}
};
format_swf_instance_MovieClip.stage_onEnterFrame = function(event) {
	var _g = 0;
	var _g1 = format_swf_instance_MovieClip.clips;
	while(_g < _g1.length) {
		var clip = _g1[_g];
		++_g;
		clip.enterFrame();
	}
};
format_swf_instance_MovieClip.__super__ = openfl_display_MovieClip;
format_swf_instance_MovieClip.prototype = $extend(openfl_display_MovieClip.prototype,{
	data: null
	,lastUpdate: null
	,playing: null
	,objectPool: null
	,activeObjects: null
	,_scale9BitmapGrid: null
	,_scale9BitmapData: null
	,_scale9ScaleX: null
	,_scale9ScaleY: null
	,applyTween: function(start,end,ratio) {
		return start + (end - start) * ratio;
	}
	,enterFrame: function() {
		if(this.lastUpdate == this.__currentFrame) {
			this.__currentFrame++;
			if(this.__currentFrame > this.__totalFrames) {
				this.__currentFrame = 1;
			}
		}
		this.update();
	}
	,flatten: function() {
		var bounds = this.getBounds(this);
		var bitmapData = null;
		if(bounds.width > 0 && bounds.height > 0) {
			bitmapData = new openfl_display_BitmapData(bounds.width | 0,bounds.height | 0,true,0);
			var matrix = new openfl_geom_Matrix();
			matrix.translate(-bounds.get_left(),-bounds.get_top());
			bitmapData.draw(this,matrix);
		}
		var _g1 = 0;
		var _g = this.get_numChildren();
		while(_g1 < _g) {
			var i = _g1++;
			var child = this.getChildAt(0);
			if(js_Boot.__instanceof(child,format_swf_instance_MovieClip)) {
				child.stop();
			}
			this.removeChildAt(0);
		}
		if(bounds.width > 0 && bounds.height > 0) {
			var bitmap = new openfl_display_Bitmap(bitmapData);
			bitmap.smoothing = true;
			bitmap.set_x(bounds.get_left());
			bitmap.set_y(bounds.get_top());
			this.addChild(bitmap);
		}
		this.stop();
	}
	,getFrame: function(frame) {
		var value = 1;
		if(typeof(frame) == "number" && ((frame | 0) === frame)) {
			value = frame;
			if(value < 1) {
				value = 1;
			}
			if(value > this.__totalFrames) {
				value = this.__totalFrames;
			}
		} else if(typeof(frame) == "string") {
			var _this = this.data.frameIndexes;
			var key = frame;
			if(__map_reserved[key] != null ? _this.existsReserved(key) : _this.h.hasOwnProperty(key)) {
				var _this1 = this.data.frameIndexes;
				var key1 = frame;
				if(__map_reserved[key1] != null) {
					value = _this1.getReserved(key1);
				} else {
					value = _this1.h[key1];
				}
			} else {
				value = 1;
			}
		}
		return value;
	}
	,gotoAndPlay: function(frame,scene) {
		this.__currentFrame = this.getFrame(frame);
		this.update();
		this.play();
	}
	,gotoAndStop: function(frame,scene) {
		this.__currentFrame = this.getFrame(frame);
		this.update();
		this.stop();
	}
	,nextFrame: function() {
		var next = this.__currentFrame + 1;
		if(next > this.__totalFrames) {
			next = this.__totalFrames;
		}
		this.gotoAndStop(next);
	}
	,placeObject: function(displayObject,frameObject) {
		var firstTag = this.data.tags[frameObject.placedAtIndex];
		var lastTag = null;
		if(frameObject.lastModifiedAtIndex > 0) {
			lastTag = this.data.tags[frameObject.lastModifiedAtIndex];
		}
		if(lastTag != null && lastTag.hasName) {
			displayObject.set_name(lastTag.instanceName);
		} else if(firstTag.hasName) {
			displayObject.set_name(firstTag.instanceName);
		}
		var oldScaleX = displayObject.get_scaleX();
		var oldScaleY = displayObject.get_scaleY();
		if(lastTag != null) {
			if(lastTag.hasMatrix) {
				var matrix = lastTag.matrix.get_matrix();
				matrix.tx *= 0.05;
				matrix.ty *= 0.05;
				if(js_Boot.__instanceof(displayObject,format_swf_instance_DynamicText)) {
					var offset = (js_Boot.__cast(displayObject , format_swf_instance_DynamicText)).offset.clone();
					offset.concat(matrix);
					matrix = offset;
				}
				displayObject.get_transform().set_matrix(matrix);
			}
		} else if(firstTag.hasMatrix) {
			var matrix1 = firstTag.matrix.get_matrix();
			matrix1.tx *= 0.05;
			matrix1.ty *= 0.05;
			if(js_Boot.__instanceof(displayObject,format_swf_instance_DynamicText)) {
				var offset1 = (js_Boot.__cast(displayObject , format_swf_instance_DynamicText)).offset.clone();
				offset1.concat(matrix1);
				matrix1 = offset1;
			}
			displayObject.get_transform().set_matrix(matrix1);
		}
		if(js_Boot.__instanceof(displayObject,format_swf_instance_MovieClip)) {
			var mc = js_Boot.__cast(displayObject , format_swf_instance_MovieClip);
			if(mc.get_scale9BitmapGrid() != null && (mc.get_transform().get_matrix().a != oldScaleX || mc.get_transform().get_matrix().d != oldScaleY)) {
				mc._scale9ScaleX = mc.get_transform().get_matrix().a;
				mc._scale9ScaleY = mc.get_transform().get_matrix().d;
				var mt = mc.get_transform().get_matrix();
				mt.a = 1;
				mt.d = 1;
				mc.get_transform().set_matrix(mt);
				if(mc._scale9BitmapData != null) {
					mc.drawScale9Bitmap(mc._scale9BitmapData,mc._scale9BitmapData.width * mc._scale9ScaleX,mc._scale9BitmapData.height * mc._scale9ScaleY,mc._scale9BitmapGrid);
				}
			}
		}
		if(lastTag != null) {
			if(lastTag.hasColorTransform) {
				displayObject.get_transform().set_colorTransform(lastTag.colorTransform.get_colorTransform());
			}
		} else if(firstTag.hasColorTransform) {
			displayObject.get_transform().set_colorTransform(firstTag.colorTransform.get_colorTransform());
		}
		if(lastTag != null) {
			if(lastTag.hasFilterList) {
				var filters = [];
				var _g1 = 0;
				var _g = lastTag.surfaceFilterList.length;
				while(_g1 < _g) {
					var i = _g1++;
					filters[i] = lastTag.surfaceFilterList[i].get_filter();
				}
				displayObject.set_filters(filters);
			}
		} else if(firstTag.hasFilterList) {
			var filters1 = [];
			var _g11 = 0;
			var _g2 = firstTag.surfaceFilterList.length;
			while(_g11 < _g2) {
				var i1 = _g11++;
				filters1[i1] = firstTag.surfaceFilterList[i1].get_filter();
			}
			displayObject.set_filters(filters1);
		}
		if(js_Boot.__instanceof(displayObject,format_swf_instance_MorphShape)) {
			if(lastTag != null) {
				(js_Boot.__cast(displayObject , format_swf_instance_MorphShape)).render(lastTag.ratio);
			}
		}
		this[displayObject.get_name()] = displayObject;
	}
	,play: function() {
		if(!this.playing && this.__totalFrames > 1) {
			this.playing = true;
			format_swf_instance_MovieClip.clips.push(this);
			openfl_Lib.current.stage.removeEventListener("enterFrame",format_swf_instance_MovieClip.stage_onEnterFrame);
			openfl_Lib.current.stage.addEventListener("enterFrame",format_swf_instance_MovieClip.stage_onEnterFrame);
		}
	}
	,prevFrame: function() {
		var previous = this.__currentFrame - 1;
		if(previous < 1) {
			previous = 1;
		}
		this.gotoAndStop(previous);
	}
	,renderFrame: function(index) {
		var frame = this.data.frames[index];
		var sameCharIdList;
		if(frame != null) {
			var frameObject = null;
			var newActiveObjects = [];
			var _g = 0;
			var _g1 = this.activeObjects;
			while(_g < _g1.length) {
				var activeObject = _g1[_g];
				++_g;
				frameObject = frame.objects.h[activeObject.frameObject.depth];
				if(frameObject == null || frameObject.characterId != activeObject.frameObject.characterId) {
					sameCharIdList = this.objectPool.h[activeObject.frameObject.characterId];
					if(sameCharIdList == null) {
						sameCharIdList = new List();
						this.objectPool.h[activeObject.frameObject.characterId] = sameCharIdList;
					}
					sameCharIdList.push(activeObject);
					this.removeChild(activeObject.object);
					if(activeObject.object.get_name() != null && Object.prototype.hasOwnProperty.call(this,activeObject.object.get_name())) {
						Reflect.deleteField(this,activeObject.object.get_name());
					}
				} else {
					newActiveObjects.push(activeObject);
				}
			}
			this.activeObjects = newActiveObjects;
			var displayObject;
			var child;
			var mask = null;
			var activeIdx;
			var _g2 = 0;
			var _g11 = frame.getObjectsSortedByDepth();
			while(_g2 < _g11.length) {
				var object = _g11[_g2];
				++_g2;
				child = null;
				activeIdx = this.activeObjects.length - 1;
				if(activeIdx > -1) {
					while(activeIdx > -1 && (this.activeObjects[activeIdx].frameObject.characterId != object.characterId || this.activeObjects[activeIdx].frameObject.characterId == object.characterId && this.activeObjects[activeIdx].frameObject.depth != object.depth)) --activeIdx;
				}
				if(activeIdx > -1) {
					child = this.activeObjects[activeIdx];
					child.frameObject = object;
					displayObject = child.object;
				} else {
					sameCharIdList = this.objectPool.h[object.characterId];
					if(sameCharIdList != null && !sameCharIdList.isEmpty()) {
						child = sameCharIdList.pop();
						child.frameObject = object;
						this.activeObjects.push(child);
						displayObject = child.object;
					} else {
						var charId = object.characterId;
						var displayObject1 = null;
						var symbol = this.data.getCharacter(charId);
						if(js_Boot.__instanceof(symbol,format_swf_tags_TagDefineSprite)) {
							displayObject1 = new format_swf_instance_MovieClip(symbol);
							var grid = this.data.getScalingGrid(charId);
							if(grid != null) {
								(js_Boot.__cast(displayObject1 , format_swf_instance_MovieClip)).set_scale9BitmapGrid(grid.splitter.get_rect().clone());
							}
						} else if(js_Boot.__instanceof(symbol,format_swf_tags_TagDefineBitsLossless) || js_Boot.__instanceof(symbol,format_swf_tags_TagDefineBits)) {
							displayObject1 = new openfl_display_Bitmap(symbol);
						} else if(js_Boot.__instanceof(symbol,format_swf_tags_TagDefineShape)) {
							displayObject1 = new format_swf_instance_Shape(this.data,symbol);
						} else if(js_Boot.__instanceof(symbol,format_swf_tags_TagDefineText)) {
							displayObject1 = new format_swf_instance_StaticText(this.data,symbol);
						} else if(js_Boot.__instanceof(symbol,format_swf_tags_TagDefineEditText)) {
							displayObject1 = new format_swf_instance_DynamicText(this.data,symbol);
						} else if(js_Boot.__instanceof(symbol,format_swf_tags_TagDefineButton2)) {
							displayObject1 = new format_swf_instance_SimpleButton(this.data,symbol);
						} else if(js_Boot.__instanceof(symbol,format_swf_tags_TagDefineMorphShape)) {
							displayObject1 = new format_swf_instance_MorphShape(this.data,symbol);
						}
						displayObject = displayObject1;
						if(displayObject != null) {
							child = { object : displayObject, frameObject : object};
							this.activeObjects.push(child);
						}
					}
				}
				if(displayObject != null) {
					var firstTag = this.data.tags[object.placedAtIndex];
					var lastTag = null;
					if(object.lastModifiedAtIndex > 0) {
						lastTag = this.data.tags[object.lastModifiedAtIndex];
					}
					if(lastTag != null && lastTag.hasName) {
						displayObject.set_name(lastTag.instanceName);
					} else if(firstTag.hasName) {
						displayObject.set_name(firstTag.instanceName);
					}
					var oldScaleX = displayObject.get_scaleX();
					var oldScaleY = displayObject.get_scaleY();
					if(lastTag != null) {
						if(lastTag.hasMatrix) {
							var matrix = lastTag.matrix.get_matrix();
							matrix.tx *= 0.05;
							matrix.ty *= 0.05;
							if(js_Boot.__instanceof(displayObject,format_swf_instance_DynamicText)) {
								var offset = (js_Boot.__cast(displayObject , format_swf_instance_DynamicText)).offset.clone();
								offset.concat(matrix);
								matrix = offset;
							}
							displayObject.get_transform().set_matrix(matrix);
						}
					} else if(firstTag.hasMatrix) {
						var matrix1 = firstTag.matrix.get_matrix();
						matrix1.tx *= 0.05;
						matrix1.ty *= 0.05;
						if(js_Boot.__instanceof(displayObject,format_swf_instance_DynamicText)) {
							var offset1 = (js_Boot.__cast(displayObject , format_swf_instance_DynamicText)).offset.clone();
							offset1.concat(matrix1);
							matrix1 = offset1;
						}
						displayObject.get_transform().set_matrix(matrix1);
					}
					if(js_Boot.__instanceof(displayObject,format_swf_instance_MovieClip)) {
						var mc = js_Boot.__cast(displayObject , format_swf_instance_MovieClip);
						if(mc.get_scale9BitmapGrid() != null && (mc.get_transform().get_matrix().a != oldScaleX || mc.get_transform().get_matrix().d != oldScaleY)) {
							mc._scale9ScaleX = mc.get_transform().get_matrix().a;
							mc._scale9ScaleY = mc.get_transform().get_matrix().d;
							var mt = mc.get_transform().get_matrix();
							mt.a = 1;
							mt.d = 1;
							mc.get_transform().set_matrix(mt);
							if(mc._scale9BitmapData != null) {
								mc.drawScale9Bitmap(mc._scale9BitmapData,mc._scale9BitmapData.width * mc._scale9ScaleX,mc._scale9BitmapData.height * mc._scale9ScaleY,mc._scale9BitmapGrid);
							}
						}
					}
					if(lastTag != null) {
						if(lastTag.hasColorTransform) {
							displayObject.get_transform().set_colorTransform(lastTag.colorTransform.get_colorTransform());
						}
					} else if(firstTag.hasColorTransform) {
						displayObject.get_transform().set_colorTransform(firstTag.colorTransform.get_colorTransform());
					}
					if(lastTag != null) {
						if(lastTag.hasFilterList) {
							var filters = [];
							var _g12 = 0;
							var _g3 = lastTag.surfaceFilterList.length;
							while(_g12 < _g3) {
								var i = _g12++;
								filters[i] = lastTag.surfaceFilterList[i].get_filter();
							}
							displayObject.set_filters(filters);
						}
					} else if(firstTag.hasFilterList) {
						var filters1 = [];
						var _g13 = 0;
						var _g4 = firstTag.surfaceFilterList.length;
						while(_g13 < _g4) {
							var i1 = _g13++;
							filters1[i1] = firstTag.surfaceFilterList[i1].get_filter();
						}
						displayObject.set_filters(filters1);
					}
					if(js_Boot.__instanceof(displayObject,format_swf_instance_MorphShape)) {
						if(lastTag != null) {
							(js_Boot.__cast(displayObject , format_swf_instance_MorphShape)).render(lastTag.ratio);
						}
					}
					this[displayObject.get_name()] = displayObject;
					if(mask != null) {
						if(mask.frameObject.clipDepth < object.depth) {
							mask = null;
						} else {
							displayObject.set_mask(mask.object);
						}
					} else {
						displayObject.set_mask(null);
					}
					if(object.clipDepth != 0) {
						mask = child;
						displayObject.set_visible(false);
					}
					this.addChild(displayObject);
				}
			}
		}
	}
	,getDisplayObject: function(charId) {
		var displayObject = null;
		var symbol = this.data.getCharacter(charId);
		if(js_Boot.__instanceof(symbol,format_swf_tags_TagDefineSprite)) {
			displayObject = new format_swf_instance_MovieClip(symbol);
			var grid = this.data.getScalingGrid(charId);
			if(grid != null) {
				(js_Boot.__cast(displayObject , format_swf_instance_MovieClip)).set_scale9BitmapGrid(grid.splitter.get_rect().clone());
			}
		} else if(js_Boot.__instanceof(symbol,format_swf_tags_TagDefineBitsLossless) || js_Boot.__instanceof(symbol,format_swf_tags_TagDefineBits)) {
			displayObject = new openfl_display_Bitmap(symbol);
		} else if(js_Boot.__instanceof(symbol,format_swf_tags_TagDefineShape)) {
			displayObject = new format_swf_instance_Shape(this.data,symbol);
		} else if(js_Boot.__instanceof(symbol,format_swf_tags_TagDefineText)) {
			displayObject = new format_swf_instance_StaticText(this.data,symbol);
		} else if(js_Boot.__instanceof(symbol,format_swf_tags_TagDefineEditText)) {
			displayObject = new format_swf_instance_DynamicText(this.data,symbol);
		} else if(js_Boot.__instanceof(symbol,format_swf_tags_TagDefineButton2)) {
			displayObject = new format_swf_instance_SimpleButton(this.data,symbol);
		} else if(js_Boot.__instanceof(symbol,format_swf_tags_TagDefineMorphShape)) {
			displayObject = new format_swf_instance_MorphShape(this.data,symbol);
		}
		return displayObject;
	}
	,stop: function() {
		if(this.playing) {
			this.playing = false;
			HxOverrides.remove(format_swf_instance_MovieClip.clips,this);
			if(format_swf_instance_MovieClip.clips.length == 0) {
				openfl_Lib.current.stage.removeEventListener("enterFrame",format_swf_instance_MovieClip.stage_onEnterFrame);
			}
		}
	}
	,unflatten: function() {
		var bmp_do = this.getChildAt(0);
		if(bmp_do != null && js_Boot.__instanceof(bmp_do,openfl_display_Bitmap)) {
			this.removeChild(bmp_do);
			bmp_do.set_bitmapData(null);
		}
		this.lastUpdate = -1;
		this.update();
	}
	,update: function() {
		if(this.__currentFrame != this.lastUpdate) {
			var frameIndex = this.__currentFrame - 1;
			if(frameIndex > -1) {
				this.__currentFrameLabel = this.data.frames[frameIndex].label;
				if(this.__currentFrameLabel != null) {
					this.__currentLabel = this.__currentFrameLabel;
				}
				var frame = this.data.frames[frameIndex];
				var sameCharIdList;
				if(frame != null) {
					var frameObject = null;
					var newActiveObjects = [];
					var _g = 0;
					var _g1 = this.activeObjects;
					while(_g < _g1.length) {
						var activeObject = _g1[_g];
						++_g;
						frameObject = frame.objects.get(activeObject.frameObject.depth);
						if(frameObject == null || frameObject.characterId != activeObject.frameObject.characterId) {
							sameCharIdList = this.objectPool.get(activeObject.frameObject.characterId);
							if(sameCharIdList == null) {
								sameCharIdList = new List();
								this.objectPool.set(activeObject.frameObject.characterId,sameCharIdList);
							}
							sameCharIdList.push(activeObject);
							this.removeChild(activeObject.object);
							if(activeObject.object.get_name() != null && Object.prototype.hasOwnProperty.call(this,activeObject.object.get_name())) {
								Reflect.deleteField(this,activeObject.object.get_name());
							}
						} else {
							newActiveObjects.push(activeObject);
						}
					}
					this.activeObjects = newActiveObjects;
					var displayObject;
					var child;
					var mask = null;
					var activeIdx;
					var _g2 = 0;
					var _g11 = frame.getObjectsSortedByDepth();
					while(_g2 < _g11.length) {
						var object = _g11[_g2];
						++_g2;
						child = null;
						activeIdx = this.activeObjects.length - 1;
						if(activeIdx > -1) {
							while(activeIdx > -1 && (this.activeObjects[activeIdx].frameObject.characterId != object.characterId || this.activeObjects[activeIdx].frameObject.characterId == object.characterId && this.activeObjects[activeIdx].frameObject.depth != object.depth)) --activeIdx;
						}
						if(activeIdx > -1) {
							child = this.activeObjects[activeIdx];
							child.frameObject = object;
							displayObject = child.object;
						} else {
							sameCharIdList = this.objectPool.get(object.characterId);
							if(sameCharIdList != null && !sameCharIdList.isEmpty()) {
								child = sameCharIdList.pop();
								child.frameObject = object;
								this.activeObjects.push(child);
								displayObject = child.object;
							} else {
								var charId = object.characterId;
								var displayObject1 = null;
								var symbol = this.data.getCharacter(charId);
								if(js_Boot.__instanceof(symbol,format_swf_tags_TagDefineSprite)) {
									displayObject1 = new format_swf_instance_MovieClip(symbol);
									var grid = this.data.getScalingGrid(charId);
									if(grid != null) {
										(js_Boot.__cast(displayObject1 , format_swf_instance_MovieClip)).set_scale9BitmapGrid(grid.splitter.get_rect().clone());
									}
								} else if(js_Boot.__instanceof(symbol,format_swf_tags_TagDefineBitsLossless) || js_Boot.__instanceof(symbol,format_swf_tags_TagDefineBits)) {
									displayObject1 = new openfl_display_Bitmap(symbol);
								} else if(js_Boot.__instanceof(symbol,format_swf_tags_TagDefineShape)) {
									displayObject1 = new format_swf_instance_Shape(this.data,symbol);
								} else if(js_Boot.__instanceof(symbol,format_swf_tags_TagDefineText)) {
									displayObject1 = new format_swf_instance_StaticText(this.data,symbol);
								} else if(js_Boot.__instanceof(symbol,format_swf_tags_TagDefineEditText)) {
									displayObject1 = new format_swf_instance_DynamicText(this.data,symbol);
								} else if(js_Boot.__instanceof(symbol,format_swf_tags_TagDefineButton2)) {
									displayObject1 = new format_swf_instance_SimpleButton(this.data,symbol);
								} else if(js_Boot.__instanceof(symbol,format_swf_tags_TagDefineMorphShape)) {
									displayObject1 = new format_swf_instance_MorphShape(this.data,symbol);
								}
								displayObject = displayObject1;
								if(displayObject != null) {
									child = { object : displayObject, frameObject : object};
									this.activeObjects.push(child);
								}
							}
						}
						if(displayObject != null) {
							var firstTag = this.data.tags[object.placedAtIndex];
							var lastTag = null;
							if(object.lastModifiedAtIndex > 0) {
								lastTag = this.data.tags[object.lastModifiedAtIndex];
							}
							if(lastTag != null && lastTag.hasName) {
								displayObject.set_name(lastTag.instanceName);
							} else if(firstTag.hasName) {
								displayObject.set_name(firstTag.instanceName);
							}
							var oldScaleX = displayObject.get_scaleX();
							var oldScaleY = displayObject.get_scaleY();
							if(lastTag != null) {
								if(lastTag.hasMatrix) {
									var matrix = lastTag.matrix.get_matrix();
									matrix.tx *= 0.05;
									matrix.ty *= 0.05;
									if(js_Boot.__instanceof(displayObject,format_swf_instance_DynamicText)) {
										var offset = (js_Boot.__cast(displayObject , format_swf_instance_DynamicText)).offset.clone();
										offset.concat(matrix);
										matrix = offset;
									}
									displayObject.get_transform().set_matrix(matrix);
								}
							} else if(firstTag.hasMatrix) {
								var matrix1 = firstTag.matrix.get_matrix();
								matrix1.tx *= 0.05;
								matrix1.ty *= 0.05;
								if(js_Boot.__instanceof(displayObject,format_swf_instance_DynamicText)) {
									var offset1 = (js_Boot.__cast(displayObject , format_swf_instance_DynamicText)).offset.clone();
									offset1.concat(matrix1);
									matrix1 = offset1;
								}
								displayObject.get_transform().set_matrix(matrix1);
							}
							if(js_Boot.__instanceof(displayObject,format_swf_instance_MovieClip)) {
								var mc = js_Boot.__cast(displayObject , format_swf_instance_MovieClip);
								if(mc.get_scale9BitmapGrid() != null && (mc.get_transform().get_matrix().a != oldScaleX || mc.get_transform().get_matrix().d != oldScaleY)) {
									mc._scale9ScaleX = mc.get_transform().get_matrix().a;
									mc._scale9ScaleY = mc.get_transform().get_matrix().d;
									var mt = mc.get_transform().get_matrix();
									mt.a = 1;
									mt.d = 1;
									mc.get_transform().set_matrix(mt);
									if(mc._scale9BitmapData != null) {
										mc.drawScale9Bitmap(mc._scale9BitmapData,mc._scale9BitmapData.width * mc._scale9ScaleX,mc._scale9BitmapData.height * mc._scale9ScaleY,mc._scale9BitmapGrid);
									}
								}
							}
							if(lastTag != null) {
								if(lastTag.hasColorTransform) {
									displayObject.get_transform().set_colorTransform(lastTag.colorTransform.get_colorTransform());
								}
							} else if(firstTag.hasColorTransform) {
								displayObject.get_transform().set_colorTransform(firstTag.colorTransform.get_colorTransform());
							}
							if(lastTag != null) {
								if(lastTag.hasFilterList) {
									var filters = [];
									var _g12 = 0;
									var _g3 = lastTag.surfaceFilterList.length;
									while(_g12 < _g3) {
										var i = _g12++;
										filters[i] = lastTag.surfaceFilterList[i].get_filter();
									}
									displayObject.set_filters(filters);
								}
							} else if(firstTag.hasFilterList) {
								var filters1 = [];
								var _g13 = 0;
								var _g4 = firstTag.surfaceFilterList.length;
								while(_g13 < _g4) {
									var i1 = _g13++;
									filters1[i1] = firstTag.surfaceFilterList[i1].get_filter();
								}
								displayObject.set_filters(filters1);
							}
							if(js_Boot.__instanceof(displayObject,format_swf_instance_MorphShape)) {
								if(lastTag != null) {
									(js_Boot.__cast(displayObject , format_swf_instance_MorphShape)).render(lastTag.ratio);
								}
							}
							this[displayObject.get_name()] = displayObject;
							if(mask != null) {
								if(mask.frameObject.clipDepth < object.depth) {
									mask = null;
								} else {
									displayObject.set_mask(mask.object);
								}
							} else {
								displayObject.set_mask(null);
							}
							if(object.clipDepth != 0) {
								mask = child;
								displayObject.set_visible(false);
							}
							this.addChild(displayObject);
						}
					}
				}
			}
		}
		this.lastUpdate = this.__currentFrame;
	}
	,drawScale9BitmapData: function() {
		if(this._scale9BitmapData != null) {
			this.drawScale9Bitmap(this._scale9BitmapData,this._scale9BitmapData.width * this._scale9ScaleX,this._scale9BitmapData.height * this._scale9ScaleY,this._scale9BitmapGrid);
		}
	}
	,drawScale9Bitmap: function(bitmap,drawWidth,drawHeight,scale9Rect) {
		this.get_graphics().clear();
		var matrix = new openfl_geom_Matrix();
		var cols = [0,scale9Rect.get_left(),scale9Rect.get_right(),bitmap.width];
		var rows = [0,scale9Rect.get_top(),scale9Rect.get_bottom(),bitmap.height];
		var outerWidth = bitmap.width - (cols[2] - cols[1]);
		var outerHeight = bitmap.height - (rows[2] - rows[1]);
		var innerScaleX = (drawWidth - outerWidth) / (bitmap.width - outerWidth);
		var innerScaleY = (drawHeight - outerHeight) / (bitmap.height - outerHeight);
		var dx = 0.0;
		var dy = 0.0;
		var w = 0.0;
		var h = 0.0;
		var _g = 0;
		while(_g < 3) {
			var row = _g++;
			var _g1 = 0;
			while(_g1 < 3) {
				var col = _g1++;
				var sourceX = cols[col];
				var sourceY = rows[row];
				w = cols[col + 1] - cols[col];
				h = rows[row + 1] - rows[row];
				matrix.identity();
				matrix.translate(dx - sourceX,dy - sourceY);
				if(row == 1) {
					h *= innerScaleY;
					matrix.scale(1,innerScaleY);
					matrix.translate(0,dy - sourceY * innerScaleY);
				}
				if(col == 1) {
					w *= innerScaleX;
					matrix.scale(innerScaleX,1);
					matrix.translate(dx - sourceX * innerScaleX,0);
				}
				this.get_graphics().beginBitmapFill(bitmap,matrix,false,true);
				this.get_graphics().drawRect(dx,dy,w,h);
				this.get_graphics().endFill();
				dx += w;
			}
			dx = 0;
			dy += h;
		}
	}
	,set_scaleX: function(val) {
		if(this._scale9BitmapGrid == null) {
			openfl_display_MovieClip.prototype.set_scaleX.call(this,val);
		} else {
			openfl_display_MovieClip.prototype.set_scaleX.call(this,1);
			this._scale9ScaleX = val;
			if(this._scale9BitmapData != null) {
				this.drawScale9Bitmap(this._scale9BitmapData,this._scale9BitmapData.width * this._scale9ScaleX,this._scale9BitmapData.height * this._scale9ScaleY,this._scale9BitmapGrid);
			}
		}
		return val;
	}
	,get_scaleX: function() {
		if(this._scale9BitmapGrid == null) {
			return openfl_display_MovieClip.prototype.get_scaleX.call(this);
		} else {
			return this._scale9ScaleX;
		}
	}
	,set_scaleY: function(val) {
		if(this._scale9BitmapGrid == null) {
			openfl_display_MovieClip.prototype.set_scaleY.call(this,val);
		} else {
			openfl_display_MovieClip.prototype.set_scaleY.call(this,1);
			this._scale9ScaleY = val;
			if(this._scale9BitmapData != null) {
				this.drawScale9Bitmap(this._scale9BitmapData,this._scale9BitmapData.width * this._scale9ScaleX,this._scale9BitmapData.height * this._scale9ScaleY,this._scale9BitmapGrid);
			}
		}
		return val;
	}
	,get_scaleY: function() {
		if(this._scale9BitmapGrid == null) {
			return openfl_display_MovieClip.prototype.get_scaleY.call(this);
		} else {
			return this._scale9ScaleY;
		}
	}
	,set_width: function(val) {
		if(this._scale9BitmapGrid == null) {
			openfl_display_MovieClip.prototype.set_width.call(this,val);
		} else {
			this._scale9ScaleX = val / this._scale9BitmapData.width;
			if(this._scale9BitmapData != null) {
				this.drawScale9Bitmap(this._scale9BitmapData,this._scale9BitmapData.width * this._scale9ScaleX,this._scale9BitmapData.height * this._scale9ScaleY,this._scale9BitmapGrid);
			}
		}
		return val;
	}
	,set_height: function(val) {
		if(this._scale9BitmapGrid == null) {
			openfl_display_MovieClip.prototype.set_height.call(this,val);
		} else {
			this._scale9ScaleY = val / this._scale9BitmapData.height;
			if(this._scale9BitmapData != null) {
				this.drawScale9Bitmap(this._scale9BitmapData,this._scale9BitmapData.width * this._scale9ScaleX,this._scale9BitmapData.height * this._scale9ScaleY,this._scale9BitmapGrid);
			}
		}
		return val;
	}
	,get_scale9BitmapGrid: function() {
		return this._scale9BitmapGrid;
	}
	,set_scale9BitmapGrid: function(value) {
		this._scale9BitmapGrid = value;
		if(this._scale9BitmapGrid != null) {
			this.flatten();
			var bmp = js_Boot.__cast(this.getChildAt(0) , openfl_display_Bitmap);
			this._scale9BitmapData = bmp.bitmapData;
			if(this._scale9BitmapData != null) {
				this.drawScale9Bitmap(this._scale9BitmapData,this._scale9BitmapData.width * this._scale9ScaleX,this._scale9BitmapData.height * this._scale9ScaleY,this._scale9BitmapGrid);
			}
			this.removeChild(bmp);
		} else {
			this.unflatten();
		}
		return value;
	}
	,__class__: format_swf_instance_MovieClip
	,__properties__: $extend(openfl_display_MovieClip.prototype.__properties__,{set_scale9BitmapGrid:"set_scale9BitmapGrid",get_scale9BitmapGrid:"get_scale9BitmapGrid"})
});
var format_swf_instance_Shape = function(data,tag) {
	openfl_display_Shape.call(this);
	if(tag != null) {
		var handler = new format_swf_exporters_ShapeCommandExporter(data);
		tag["export"](handler);
		var _g = 0;
		var _g1 = handler.commands;
		while(_g < _g1.length) {
			var command = _g1[_g];
			++_g;
			switch(command[1]) {
			case 0:
				var bitmap = new format_swf_instance_Bitmap(data.getCharacter(command[2]));
				if(bitmap.bitmapData != null) {
					this.get_graphics().beginBitmapFill(bitmap.bitmapData,command[3],command[4],command[5]);
				}
				break;
			case 1:
				this.get_graphics().beginFill(command[2],command[3]);
				break;
			case 2:
				this.get_graphics().beginGradientFill(command[2],command[3],command[4],command[5],command[6],command[7],command[8],command[9]);
				break;
			case 3:
				this.get_graphics().curveTo(command[2],command[3],command[4],command[5]);
				break;
			case 4:
				this.get_graphics().endFill();
				break;
			case 5:
				var thickness = command[2];
				if(thickness != null) {
					this.get_graphics().lineStyle(thickness,command[3],command[4],command[5],command[6],command[7],command[8],command[9]);
				} else {
					this.get_graphics().lineStyle();
				}
				break;
			case 6:
				this.get_graphics().lineTo(command[2],command[3]);
				break;
			case 7:
				this.get_graphics().moveTo(command[2],command[3]);
				break;
			}
		}
	}
};
$hxClasses["format.swf.instance.Shape"] = format_swf_instance_Shape;
format_swf_instance_Shape.__name__ = ["format","swf","instance","Shape"];
format_swf_instance_Shape.__super__ = openfl_display_Shape;
format_swf_instance_Shape.prototype = $extend(openfl_display_Shape.prototype,{
	__class__: format_swf_instance_Shape
});
var openfl_display_SimpleButton = function(upState,overState,downState,hitTestState) {
	openfl_display_InteractiveObject.call(this);
	this.enabled = true;
	this.trackAsMenu = false;
	this.useHandCursor = true;
	this.set_upState(upState != null ? upState : new openfl_display_DisplayObject());
	this.set_overState(overState);
	this.set_downState(downState);
	this.set_hitTestState(hitTestState != null ? hitTestState : new openfl_display_DisplayObject());
	this.addEventListener("mouseDown",$bind(this,this.__this_onMouseDown));
	this.addEventListener("mouseOut",$bind(this,this.__this_onMouseOut));
	this.addEventListener("mouseOver",$bind(this,this.__this_onMouseOver));
	this.addEventListener("mouseUp",$bind(this,this.__this_onMouseUp));
	this.set___currentState(this.upState);
};
$hxClasses["openfl.display.SimpleButton"] = openfl_display_SimpleButton;
openfl_display_SimpleButton.__name__ = ["openfl","display","SimpleButton"];
openfl_display_SimpleButton.__super__ = openfl_display_InteractiveObject;
openfl_display_SimpleButton.prototype = $extend(openfl_display_InteractiveObject.prototype,{
	downState: null
	,enabled: null
	,hitTestState: null
	,overState: null
	,trackAsMenu: null
	,upState: null
	,useHandCursor: null
	,__currentState: null
	,__ignoreEvent: null
	,__soundTransform: null
	,__getBounds: function(rect,matrix) {
		openfl_display_InteractiveObject.prototype.__getBounds.call(this,rect,matrix);
		if(matrix != null) {
			this.__updateTransforms(matrix);
			this.__updateChildren(true);
		}
		this.__currentState.__getBounds(rect,this.__currentState.__worldTransform);
		if(matrix != null) {
			this.__updateTransforms();
			this.__updateChildren(true);
		}
	}
	,__getRenderBounds: function(rect,matrix) {
		if(this.__scrollRect != null) {
			openfl_display_InteractiveObject.prototype.__getRenderBounds.call(this,rect,matrix);
			return;
		} else {
			openfl_display_InteractiveObject.prototype.__getBounds.call(this,rect,matrix);
		}
		if(matrix != null) {
			this.__updateTransforms(matrix);
			this.__updateChildren(true);
		}
		this.__currentState.__getRenderBounds(rect,this.__currentState.__worldTransform);
		if(matrix != null) {
			this.__updateTransforms();
			this.__updateChildren(true);
		}
	}
	,__getCursor: function() {
		if(this.useHandCursor && !this.__ignoreEvent) {
			return lime_ui_MouseCursor.POINTER;
		} else {
			return null;
		}
	}
	,__hitTest: function(x,y,shapeFlag,stack,interactiveOnly,hitObject) {
		var hitTest = false;
		if(this.hitTestState != null) {
			var cacheTransform = this.__updateTransform(this.hitTestState);
			if(this.hitTestState.__hitTest(x,y,shapeFlag,stack,interactiveOnly,hitObject)) {
				if(stack != null) {
					stack[stack.length - 1] = hitObject;
				}
				hitTest = true;
			}
			this.__resetTransform(this.hitTestState,cacheTransform);
		} else if(this.__currentState != null) {
			if(!hitObject.get_visible() || this.__isMask || interactiveOnly && !this.mouseEnabled) {
				return false;
			}
			if(this.get_mask() != null && !this.get_mask().__hitTestMask(x,y)) {
				return false;
			}
			var cacheTransform1 = this.__updateTransform(this.__currentState);
			if(this.__currentState.__hitTest(x,y,shapeFlag,stack,interactiveOnly,hitObject)) {
				hitTest = interactiveOnly;
			}
			this.__resetTransform(this.__currentState,cacheTransform1);
		}
		if(stack != null) {
			while(stack.length > 1 && stack[stack.length - 1] == stack[stack.length - 2]) stack.pop();
		}
		return hitTest;
	}
	,__hitTestMask: function(x,y) {
		var hitTest = false;
		var cacheTransform = this.__updateTransform(this.__currentState);
		if(this.__currentState.__hitTestMask(x,y)) {
			hitTest = true;
		}
		this.__resetTransform(this.__currentState,cacheTransform);
		return hitTest;
	}
	,__renderCairo: function(renderSession) {
		if(!this.__renderable || this.__worldAlpha <= 0) {
			return;
		}
		renderSession.maskManager.pushObject(this);
		this.__currentState.__renderCairo(renderSession);
		renderSession.maskManager.popObject(this);
	}
	,__renderCairoMask: function(renderSession) {
		this.__currentState.__renderCairoMask(renderSession);
	}
	,__renderCanvas: function(renderSession) {
		if(!this.__renderable || this.__worldAlpha <= 0) {
			return;
		}
		renderSession.maskManager.pushObject(this);
		this.__currentState.__renderCanvas(renderSession);
		renderSession.maskManager.popObject(this);
	}
	,__renderCanvasMask: function(renderSession) {
		var bounds = new openfl_geom_Rectangle();
		this.__getBounds(bounds,this.__transform);
		renderSession.context.rect(0,0,bounds.width,bounds.height);
		this.__currentState.__renderCanvasMask(renderSession);
	}
	,__renderDOM: function(renderSession) {
		renderSession.maskManager.pushObject(this);
		this.__currentState.__renderDOM(renderSession);
		renderSession.maskManager.popObject(this);
	}
	,__renderGL: function(renderSession) {
		if(!this.__renderable || this.__worldAlpha <= 0) {
			return;
		}
		renderSession.maskManager.pushObject(this);
		this.__currentState.__renderGL(renderSession);
		renderSession.maskManager.popObject(this);
	}
	,__resetTransform: function(state,cacheTransform) {
		state.__updateTransforms(cacheTransform);
		state.__updateChildren(false);
	}
	,__updateTransform: function(state) {
		var local = state.__transform;
		var parentTransform = this.__worldTransform;
		var overrideTransform = openfl_geom_Matrix.__temp;
		overrideTransform.a = local.a * parentTransform.a + local.b * parentTransform.c;
		overrideTransform.b = local.a * parentTransform.b + local.b * parentTransform.d;
		overrideTransform.c = local.c * parentTransform.a + local.d * parentTransform.c;
		overrideTransform.d = local.c * parentTransform.b + local.d * parentTransform.d;
		overrideTransform.tx = local.tx * parentTransform.a + local.ty * parentTransform.c + parentTransform.tx;
		overrideTransform.ty = local.tx * parentTransform.b + local.ty * parentTransform.d + parentTransform.ty;
		var cacheTransform = state.__transform;
		state.__transform = overrideTransform;
		state.__update(false,true);
		state.__transform = cacheTransform;
		return cacheTransform;
	}
	,__updateTransforms: function(overrideTransform) {
		openfl_display_InteractiveObject.prototype.__updateTransforms.call(this,overrideTransform);
		this.__updateTransform(this.__currentState);
	}
	,set_downState: function(downState) {
		if(this.downState != null && this.__currentState == this.downState) {
			this.set___currentState(downState);
		}
		return this.downState = downState;
	}
	,set_hitTestState: function(hitTestState) {
		return this.hitTestState = hitTestState;
	}
	,set_overState: function(overState) {
		if(this.overState != null && this.__currentState == this.overState) {
			this.set___currentState(overState);
		}
		return this.overState = overState;
	}
	,get_soundTransform: function() {
		if(this.__soundTransform == null) {
			this.__soundTransform = new openfl_media_SoundTransform();
		}
		return new openfl_media_SoundTransform(this.__soundTransform.volume,this.__soundTransform.pan);
	}
	,set_soundTransform: function(value) {
		this.__soundTransform = new openfl_media_SoundTransform(value.volume,value.pan);
		return value;
	}
	,set_upState: function(upState) {
		if(this.upState != null && this.__currentState == this.upState) {
			this.set___currentState(upState);
		}
		return this.upState = upState;
	}
	,set___currentState: function(value) {
		if(this.__currentState != null) {
			this.__currentState.__renderParent = null;
		}
		if(value.parent != null) {
			value.parent.removeChild(value);
		}
		value.__renderParent = this;
		return this.__currentState = value;
	}
	,__this_onMouseDown: function(event) {
		if(this.downState != null) {
			this.set___currentState(this.downState);
		}
	}
	,__this_onMouseOut: function(event) {
		this.__ignoreEvent = false;
		if(this.upState != this.__currentState) {
			this.set___currentState(this.upState);
		}
	}
	,__this_onMouseOver: function(event) {
		if(event.buttonDown) {
			this.__ignoreEvent = true;
		}
		if(this.overState != this.__currentState && this.overState != null && !this.__ignoreEvent) {
			this.set___currentState(this.overState);
		}
	}
	,__this_onMouseUp: function(event) {
		this.__ignoreEvent = false;
		if(this.overState != null) {
			this.set___currentState(this.overState);
		} else {
			this.set___currentState(this.upState);
		}
	}
	,__class__: openfl_display_SimpleButton
	,__properties__: $extend(openfl_display_InteractiveObject.prototype.__properties__,{set___currentState:"set___currentState",set_upState:"set_upState",set_soundTransform:"set_soundTransform",get_soundTransform:"get_soundTransform",set_overState:"set_overState",set_hitTestState:"set_hitTestState",set_downState:"set_downState"})
});
var format_swf_instance_SimpleButton = function(data,tag) {
	openfl_display_SimpleButton.call(this);
	this.data = data;
	this.tag = tag;
	var displayObject;
	var rec;
	var _g1 = 0;
	var _g = tag.characters.length;
	while(_g1 < _g) {
		rec = tag.characters[_g1++];
		if(rec.stateUp) {
			this.set_upState(new openfl_display_Sprite());
			var symbol = this.data.getCharacter(rec.characterId);
			var displayObject1 = null;
			if(js_Boot.__instanceof(symbol,format_swf_tags_TagDefineSprite)) {
				displayObject1 = new format_swf_instance_MovieClip(symbol);
			} else if(js_Boot.__instanceof(symbol,format_swf_tags_TagDefineBitsLossless) || js_Boot.__instanceof(symbol,format_swf_tags_TagDefineBits)) {
				displayObject1 = new format_swf_instance_Bitmap(symbol);
			} else if(js_Boot.__instanceof(symbol,format_swf_tags_TagDefineShape)) {
				displayObject1 = new format_swf_instance_Shape(this.data,symbol);
			} else if(js_Boot.__instanceof(symbol,format_swf_tags_TagDefineText)) {
				displayObject1 = new format_swf_instance_StaticText(this.data,symbol);
			} else if(js_Boot.__instanceof(symbol,format_swf_tags_TagDefineEditText)) {
				displayObject1 = new format_swf_instance_DynamicText(this.data,symbol);
			} else if(js_Boot.__instanceof(symbol,format_swf_tags_TagDefineButton2)) {
				displayObject1 = new format_swf_instance_SimpleButton(this.data,symbol);
			}
			displayObject = displayObject1;
			haxe_Log.trace(displayObject,{ fileName : "SimpleButton.hx", lineNumber : 54, className : "format.swf.instance.SimpleButton", methodName : "new"});
			if(displayObject != null) {
				var container = this.upState;
				if(rec.placeMatrix != null) {
					var tmp = rec.placeMatrix.get_matrix().a;
					var tmp1 = rec.placeMatrix.get_matrix().b;
					var tmp2 = rec.placeMatrix.get_matrix().c;
					var tmp3 = rec.placeMatrix.get_matrix().d;
					var tmp4 = rec.placeMatrix.get_matrix().tx / 20;
					var tmp5 = rec.placeMatrix.get_matrix().ty / 20;
					displayObject.get_transform().set_matrix(new openfl_geom_Matrix(tmp,tmp1,tmp2,tmp3,tmp4,tmp5));
				}
				if(rec.hasFilterList) {
					var filters = [];
					var _g11 = 0;
					var _g2 = rec.filterList.length;
					while(_g11 < _g2) filters.push(rec.filterList[_g11++].get_filter());
					displayObject.set_filters(filters);
				}
				if(rec.hasBlendMode) {
					displayObject.set_blendMode(format_swf_instance_SimpleButton.blendModes[rec.blendMode]);
				}
				if(rec.colorTransform != null) {
					displayObject.get_transform().set_colorTransform(rec.colorTransform.get_colorTransform());
				}
				var spr = js_Boot.__cast(container , openfl_display_Sprite);
				spr.addChildAt(displayObject,spr.get_numChildren() < rec.placeDepth ? spr.get_numChildren() : rec.placeDepth - 1);
			}
		}
		if(rec.stateOver) {
			this.set_overState(new openfl_display_Sprite());
			var symbol1 = this.data.getCharacter(rec.characterId);
			var displayObject2 = null;
			if(js_Boot.__instanceof(symbol1,format_swf_tags_TagDefineSprite)) {
				displayObject2 = new format_swf_instance_MovieClip(symbol1);
			} else if(js_Boot.__instanceof(symbol1,format_swf_tags_TagDefineBitsLossless) || js_Boot.__instanceof(symbol1,format_swf_tags_TagDefineBits)) {
				displayObject2 = new format_swf_instance_Bitmap(symbol1);
			} else if(js_Boot.__instanceof(symbol1,format_swf_tags_TagDefineShape)) {
				displayObject2 = new format_swf_instance_Shape(this.data,symbol1);
			} else if(js_Boot.__instanceof(symbol1,format_swf_tags_TagDefineText)) {
				displayObject2 = new format_swf_instance_StaticText(this.data,symbol1);
			} else if(js_Boot.__instanceof(symbol1,format_swf_tags_TagDefineEditText)) {
				displayObject2 = new format_swf_instance_DynamicText(this.data,symbol1);
			} else if(js_Boot.__instanceof(symbol1,format_swf_tags_TagDefineButton2)) {
				displayObject2 = new format_swf_instance_SimpleButton(this.data,symbol1);
			}
			displayObject = displayObject2;
			if(displayObject != null) {
				var container1 = this.overState;
				if(rec.placeMatrix != null) {
					var tmp6 = rec.placeMatrix.get_matrix().a;
					var tmp7 = rec.placeMatrix.get_matrix().b;
					var tmp8 = rec.placeMatrix.get_matrix().c;
					var tmp9 = rec.placeMatrix.get_matrix().d;
					var tmp10 = rec.placeMatrix.get_matrix().tx / 20;
					var tmp11 = rec.placeMatrix.get_matrix().ty / 20;
					displayObject.get_transform().set_matrix(new openfl_geom_Matrix(tmp6,tmp7,tmp8,tmp9,tmp10,tmp11));
				}
				if(rec.hasFilterList) {
					var filters1 = [];
					var _g12 = 0;
					var _g3 = rec.filterList.length;
					while(_g12 < _g3) filters1.push(rec.filterList[_g12++].get_filter());
					displayObject.set_filters(filters1);
				}
				if(rec.hasBlendMode) {
					displayObject.set_blendMode(format_swf_instance_SimpleButton.blendModes[rec.blendMode]);
				}
				if(rec.colorTransform != null) {
					displayObject.get_transform().set_colorTransform(rec.colorTransform.get_colorTransform());
				}
				var spr1 = js_Boot.__cast(container1 , openfl_display_Sprite);
				spr1.addChildAt(displayObject,spr1.get_numChildren() < rec.placeDepth ? spr1.get_numChildren() : rec.placeDepth - 1);
			}
		}
		if(rec.stateDown) {
			this.set_downState(new openfl_display_Sprite());
			var symbol2 = this.data.getCharacter(rec.characterId);
			var displayObject3 = null;
			if(js_Boot.__instanceof(symbol2,format_swf_tags_TagDefineSprite)) {
				displayObject3 = new format_swf_instance_MovieClip(symbol2);
			} else if(js_Boot.__instanceof(symbol2,format_swf_tags_TagDefineBitsLossless) || js_Boot.__instanceof(symbol2,format_swf_tags_TagDefineBits)) {
				displayObject3 = new format_swf_instance_Bitmap(symbol2);
			} else if(js_Boot.__instanceof(symbol2,format_swf_tags_TagDefineShape)) {
				displayObject3 = new format_swf_instance_Shape(this.data,symbol2);
			} else if(js_Boot.__instanceof(symbol2,format_swf_tags_TagDefineText)) {
				displayObject3 = new format_swf_instance_StaticText(this.data,symbol2);
			} else if(js_Boot.__instanceof(symbol2,format_swf_tags_TagDefineEditText)) {
				displayObject3 = new format_swf_instance_DynamicText(this.data,symbol2);
			} else if(js_Boot.__instanceof(symbol2,format_swf_tags_TagDefineButton2)) {
				displayObject3 = new format_swf_instance_SimpleButton(this.data,symbol2);
			}
			displayObject = displayObject3;
			if(displayObject != null) {
				var container2 = this.downState;
				if(rec.placeMatrix != null) {
					var tmp12 = rec.placeMatrix.get_matrix().a;
					var tmp13 = rec.placeMatrix.get_matrix().b;
					var tmp14 = rec.placeMatrix.get_matrix().c;
					var tmp15 = rec.placeMatrix.get_matrix().d;
					var tmp16 = rec.placeMatrix.get_matrix().tx / 20;
					var tmp17 = rec.placeMatrix.get_matrix().ty / 20;
					displayObject.get_transform().set_matrix(new openfl_geom_Matrix(tmp12,tmp13,tmp14,tmp15,tmp16,tmp17));
				}
				if(rec.hasFilterList) {
					var filters2 = [];
					var _g13 = 0;
					var _g4 = rec.filterList.length;
					while(_g13 < _g4) filters2.push(rec.filterList[_g13++].get_filter());
					displayObject.set_filters(filters2);
				}
				if(rec.hasBlendMode) {
					displayObject.set_blendMode(format_swf_instance_SimpleButton.blendModes[rec.blendMode]);
				}
				if(rec.colorTransform != null) {
					displayObject.get_transform().set_colorTransform(rec.colorTransform.get_colorTransform());
				}
				var spr2 = js_Boot.__cast(container2 , openfl_display_Sprite);
				spr2.addChildAt(displayObject,spr2.get_numChildren() < rec.placeDepth ? spr2.get_numChildren() : rec.placeDepth - 1);
			}
		}
		if(rec.stateHitTest) {
			this.set_hitTestState(new openfl_display_Sprite());
			var symbol3 = this.data.getCharacter(rec.characterId);
			var displayObject4 = null;
			if(js_Boot.__instanceof(symbol3,format_swf_tags_TagDefineSprite)) {
				displayObject4 = new format_swf_instance_MovieClip(symbol3);
			} else if(js_Boot.__instanceof(symbol3,format_swf_tags_TagDefineBitsLossless) || js_Boot.__instanceof(symbol3,format_swf_tags_TagDefineBits)) {
				displayObject4 = new format_swf_instance_Bitmap(symbol3);
			} else if(js_Boot.__instanceof(symbol3,format_swf_tags_TagDefineShape)) {
				displayObject4 = new format_swf_instance_Shape(this.data,symbol3);
			} else if(js_Boot.__instanceof(symbol3,format_swf_tags_TagDefineText)) {
				displayObject4 = new format_swf_instance_StaticText(this.data,symbol3);
			} else if(js_Boot.__instanceof(symbol3,format_swf_tags_TagDefineEditText)) {
				displayObject4 = new format_swf_instance_DynamicText(this.data,symbol3);
			} else if(js_Boot.__instanceof(symbol3,format_swf_tags_TagDefineButton2)) {
				displayObject4 = new format_swf_instance_SimpleButton(this.data,symbol3);
			}
			displayObject = displayObject4;
			if(displayObject != null) {
				var container3 = this.hitTestState;
				if(rec.placeMatrix != null) {
					var tmp18 = rec.placeMatrix.get_matrix().a;
					var tmp19 = rec.placeMatrix.get_matrix().b;
					var tmp20 = rec.placeMatrix.get_matrix().c;
					var tmp21 = rec.placeMatrix.get_matrix().d;
					var tmp22 = rec.placeMatrix.get_matrix().tx / 20;
					var tmp23 = rec.placeMatrix.get_matrix().ty / 20;
					displayObject.get_transform().set_matrix(new openfl_geom_Matrix(tmp18,tmp19,tmp20,tmp21,tmp22,tmp23));
				}
				if(rec.hasFilterList) {
					var filters3 = [];
					var _g14 = 0;
					var _g5 = rec.filterList.length;
					while(_g14 < _g5) filters3.push(rec.filterList[_g14++].get_filter());
					displayObject.set_filters(filters3);
				}
				if(rec.hasBlendMode) {
					displayObject.set_blendMode(format_swf_instance_SimpleButton.blendModes[rec.blendMode]);
				}
				if(rec.colorTransform != null) {
					displayObject.get_transform().set_colorTransform(rec.colorTransform.get_colorTransform());
				}
				var spr3 = js_Boot.__cast(container3 , openfl_display_Sprite);
				spr3.addChildAt(displayObject,spr3.get_numChildren() < rec.placeDepth ? spr3.get_numChildren() : rec.placeDepth - 1);
			}
		}
	}
};
$hxClasses["format.swf.instance.SimpleButton"] = format_swf_instance_SimpleButton;
format_swf_instance_SimpleButton.__name__ = ["format","swf","instance","SimpleButton"];
format_swf_instance_SimpleButton.__super__ = openfl_display_SimpleButton;
format_swf_instance_SimpleButton.prototype = $extend(openfl_display_SimpleButton.prototype,{
	data: null
	,tag: null
	,getDisplayObject: function(charId) {
		var symbol = this.data.getCharacter(charId);
		var displayObject = null;
		if(js_Boot.__instanceof(symbol,format_swf_tags_TagDefineSprite)) {
			displayObject = new format_swf_instance_MovieClip(symbol);
		} else if(js_Boot.__instanceof(symbol,format_swf_tags_TagDefineBitsLossless) || js_Boot.__instanceof(symbol,format_swf_tags_TagDefineBits)) {
			displayObject = new format_swf_instance_Bitmap(symbol);
		} else if(js_Boot.__instanceof(symbol,format_swf_tags_TagDefineShape)) {
			displayObject = new format_swf_instance_Shape(this.data,symbol);
		} else if(js_Boot.__instanceof(symbol,format_swf_tags_TagDefineText)) {
			displayObject = new format_swf_instance_StaticText(this.data,symbol);
		} else if(js_Boot.__instanceof(symbol,format_swf_tags_TagDefineEditText)) {
			displayObject = new format_swf_instance_DynamicText(this.data,symbol);
		} else if(js_Boot.__instanceof(symbol,format_swf_tags_TagDefineButton2)) {
			displayObject = new format_swf_instance_SimpleButton(this.data,symbol);
		}
		return displayObject;
	}
	,placeButtonRecord: function(displayObject,record,container) {
		if(record.placeMatrix != null) {
			var tmp = record.placeMatrix.get_matrix().a;
			var tmp1 = record.placeMatrix.get_matrix().b;
			var tmp2 = record.placeMatrix.get_matrix().c;
			var tmp3 = record.placeMatrix.get_matrix().d;
			var tmp4 = record.placeMatrix.get_matrix().tx / 20;
			var tmp5 = record.placeMatrix.get_matrix().ty / 20;
			displayObject.get_transform().set_matrix(new openfl_geom_Matrix(tmp,tmp1,tmp2,tmp3,tmp4,tmp5));
		}
		if(record.hasFilterList) {
			var filters = [];
			var _g1 = 0;
			var _g = record.filterList.length;
			while(_g1 < _g) filters.push(record.filterList[_g1++].get_filter());
			displayObject.set_filters(filters);
		}
		if(record.hasBlendMode) {
			displayObject.set_blendMode(format_swf_instance_SimpleButton.blendModes[record.blendMode]);
		}
		if(record.colorTransform != null) {
			displayObject.get_transform().set_colorTransform(record.colorTransform.get_colorTransform());
		}
		var spr = js_Boot.__cast(container , openfl_display_Sprite);
		spr.addChildAt(displayObject,spr.get_numChildren() < record.placeDepth ? spr.get_numChildren() : record.placeDepth - 1);
	}
	,__class__: format_swf_instance_SimpleButton
});
var format_swf_instance_StaticText = function(data,tag) {
	openfl_display_Shape.call(this);
	var matrix = null;
	var cacheMatrix = null;
	var tx = tag.textMatrix.get_matrix().tx * 0.05;
	var ty = tag.textMatrix.get_matrix().ty * 0.05;
	var color = 0;
	var _g = 0;
	var _g1 = tag.records;
	while(_g < _g1.length) {
		var record = _g1[_g];
		++_g;
		var scale = record.textHeight / 1024 * 0.05;
		cacheMatrix = matrix;
		matrix = tag.textMatrix.get_matrix().clone();
		matrix.scale(scale,scale);
		if(record.hasColor) {
			color = record.textColor & 16777215;
			js_Boot.__instanceof(tag,format_swf_tags_TagDefineText2);
		}
		if(cacheMatrix != null && (record.hasColor || record.hasFont) && (!record.hasXOffset && !record.hasYOffset)) {
			matrix.tx = cacheMatrix.tx;
			matrix.ty = cacheMatrix.ty;
		} else {
			matrix.tx = record.hasXOffset ? tx + record.xOffset * 0.05 : tx;
			matrix.ty = record.hasYOffset ? ty + record.yOffset * 0.05 : ty;
		}
		var _g3 = 0;
		var _g2 = record.glyphEntries.length;
		while(_g3 < _g2) {
			var i = _g3++;
			this.get_graphics().lineStyle();
			this.get_graphics().beginFill(color,1);
			this.renderGlyph(data.getCharacter(record.fontId),record.glyphEntries[i].index,matrix.a,matrix.tx,matrix.ty);
			this.get_graphics().endFill();
			matrix.tx += record.glyphEntries[i].advance * 0.05;
		}
	}
};
$hxClasses["format.swf.instance.StaticText"] = format_swf_instance_StaticText;
format_swf_instance_StaticText.__name__ = ["format","swf","instance","StaticText"];
format_swf_instance_StaticText.__super__ = openfl_display_Shape;
format_swf_instance_StaticText.prototype = $extend(openfl_display_Shape.prototype,{
	data: null
	,tag: null
	,renderGlyph: function(font,character,scale,offsetX,offsetY) {
		var handler = new format_swf_exporters_ShapeCommandExporter(this.data);
		font["export"](handler,character);
		var _g = 0;
		var _g1 = handler.commands;
		while(_g < _g1.length) {
			var command = _g1[_g];
			++_g;
			switch(command[1]) {
			case 3:
				this.set_cacheAsBitmap(true);
				this.get_graphics().curveTo(command[2] * scale + offsetX,command[3] * scale + offsetY,command[4] * scale + offsetX,command[5] * scale + offsetY);
				break;
			case 5:
				var thickness = command[2];
				if(thickness != null) {
					this.get_graphics().lineStyle(thickness,command[3],command[4],command[5],command[6],command[7],command[8],command[9]);
				} else {
					this.get_graphics().lineStyle();
				}
				break;
			case 6:
				this.get_graphics().lineTo(command[2] * scale + offsetX,command[3] * scale + offsetY);
				break;
			case 7:
				this.get_graphics().moveTo(command[2] * scale + offsetX,command[3] * scale + offsetY);
				break;
			default:
			}
		}
	}
	,__class__: format_swf_instance_StaticText
});
var format_swf_lite_DynamicTextField = function(swf,symbol) {
	openfl_text_TextField.call(this);
	this.swf = swf;
	this.symbol = symbol;
	this.set_width(symbol.width);
	this.set_height(symbol.height);
	this.set_multiline(symbol.multiline);
	this.set_wordWrap(symbol.wordWrap);
	this.set_displayAsPassword(symbol.password);
	this.set_border(symbol.border);
	this.set_selectable(symbol.selectable);
	var format1 = new openfl_text_TextFormat();
	if(symbol.color != null) {
		format1.color = symbol.color & 16777215;
	}
	format1.size = Math.round(symbol.fontHeight / 20);
	format1.font = symbol.fontName;
	var found = false;
	var _g = format1.font;
	if(_g == null) {
		found = true;
	} else {
		switch(_g) {
		case "":case "_sans":case "_serif":case "_typewriter":
			found = true;
			break;
		default:
			var _g1 = 0;
			var _g11 = openfl_text_Font.enumerateFonts();
			while(_g1 < _g11.length) {
				var font = _g11[_g1];
				++_g1;
				if(font.name == format1.font) {
					found = true;
					break;
				}
			}
		}
	}
	if(found) {
		this.set_embedFonts(true);
	} else {
		haxe_Log.trace("Warning: Could not find required font \"" + format1.font + "\", it has not been embedded",{ fileName : "DynamicTextField.hx", lineNumber : 91, className : "format.swf.lite.DynamicTextField", methodName : "new"});
	}
	if(symbol.align != null) {
		if(symbol.align == "center") {
			format1.align = 0;
		} else if(symbol.align == "right") {
			format1.align = 4;
		} else if(symbol.align == "justify") {
			format1.align = 2;
		}
		format1.leftMargin = symbol.leftMargin / 20 | 0;
		format1.rightMargin = symbol.rightMargin / 20 | 0;
		format1.indent = symbol.indent / 20 | 0;
		format1.leading = symbol.leading / 20 | 0;
		if(this.get_embedFonts()) {
			format1.leading += 4;
		}
	}
	this.set_defaultTextFormat(format1);
	if(symbol.text != null) {
		var _this_r = new RegExp("</p>","g".split("u").join(""));
		var plain = symbol.text.replace(_this_r,"\n");
		var _this_r1 = new RegExp("<br>","g".split("u").join(""));
		plain = plain.replace(_this_r1,"\n");
		var _this_r2 = new RegExp("<.*?>","g".split("u").join(""));
		plain = plain.replace(_this_r2,"");
		this.set_text(StringTools.htmlUnescape(plain));
	}
};
$hxClasses["format.swf.lite.DynamicTextField"] = format_swf_lite_DynamicTextField;
format_swf_lite_DynamicTextField.__name__ = ["format","swf","lite","DynamicTextField"];
format_swf_lite_DynamicTextField.__super__ = openfl_text_TextField;
format_swf_lite_DynamicTextField.prototype = $extend(openfl_text_TextField.prototype,{
	symbol: null
	,glyphs: null
	,swf: null
	,_text: null
	,__class__: format_swf_lite_DynamicTextField
});
var format_swf_lite_SWFLite = function() {
	this.symbols = new haxe_ds_IntMap();
};
$hxClasses["format.swf.lite.SWFLite"] = format_swf_lite_SWFLite;
format_swf_lite_SWFLite.__name__ = ["format","swf","lite","SWFLite"];
format_swf_lite_SWFLite.resolveClass = function(name) {
	var value = Type.resolveClass(name);
	if(value == null) {
		value = Type.resolveClass(StringTools.replace(name,"openfl._legacy","openfl"));
	}
	if(value == null) {
		value = Type.resolveClass(StringTools.replace(name,"openfl._v2","openfl"));
	}
	return value;
};
format_swf_lite_SWFLite.resolveEnum = function(name) {
	var value = Type.resolveEnum(name);
	if(value == null) {
		value = Type.resolveEnum(StringTools.replace(name,"openfl._legacy","openfl"));
	}
	if(value == null) {
		value = Type.resolveEnum(StringTools.replace(name,"openfl._v2","openfl"));
	}
	return value;
};
format_swf_lite_SWFLite.unserialize = function(data) {
	if(data == null) {
		return null;
	}
	var unserializer = new haxe_Unserializer(data);
	unserializer.setResolver({ resolveClass : format_swf_lite_SWFLite.resolveClass, resolveEnum : format_swf_lite_SWFLite.resolveEnum});
	return unserializer.unserialize();
};
format_swf_lite_SWFLite.prototype = {
	frameRate: null
	,root: null
	,symbols: null
	,createButton: function(className) {
		return null;
	}
	,createMovieClip: function(className) {
		if(className == null) {
			className = "";
		}
		if(className == "") {
			return new format_swf_lite_MovieClip(this,this.root);
		} else {
			var symbol = this.symbols.iterator();
			while(symbol.hasNext()) {
				var symbol1 = symbol.next();
				if(symbol1.className == className) {
					if(js_Boot.__instanceof(symbol1,format_swf_lite_symbols_SpriteSymbol)) {
						return new format_swf_lite_MovieClip(this,symbol1);
					}
				}
			}
		}
		return null;
	}
	,getBitmapData: function(className) {
		var symbol = this.symbols.iterator();
		while(symbol.hasNext()) {
			var symbol1 = symbol.next();
			if(symbol1.className == className) {
				if(js_Boot.__instanceof(symbol1,format_swf_lite_symbols_BitmapSymbol)) {
					return openfl_Assets.getBitmapData(symbol1.path);
				}
			}
		}
		return null;
	}
	,hasSymbol: function(className) {
		var symbol = this.symbols.iterator();
		while(symbol.hasNext()) if(symbol.next().className == className) {
			return true;
		}
		return false;
	}
	,serialize: function() {
		var serializer = new haxe_Serializer();
		serializer.serialize(this);
		return serializer.toString();
	}
	,__class__: format_swf_lite_SWFLite
};
var openfl_AssetLibrary = function() {
	lime_AssetLibrary.call(this);
};
$hxClasses["openfl.AssetLibrary"] = openfl_AssetLibrary;
openfl_AssetLibrary.__name__ = ["openfl","AssetLibrary"];
openfl_AssetLibrary.__super__ = lime_AssetLibrary;
openfl_AssetLibrary.prototype = $extend(lime_AssetLibrary.prototype,{
	getMovieClip: function(id) {
		return null;
	}
	,loadMovieClip: function(id) {
		var _gthis = this;
		return new lime_app_Future(function() {
			return _gthis.getMovieClip(id);
		});
	}
	,__class__: openfl_AssetLibrary
});
var format_swf_lite_SWFLiteLibrary = function(id) {
	openfl_AssetLibrary.call(this);
	if(id != null) {
		this.swf = format_swf_lite_SWFLite.unserialize(openfl_Assets.getText(id));
	}
};
$hxClasses["format.swf.lite.SWFLiteLibrary"] = format_swf_lite_SWFLiteLibrary;
format_swf_lite_SWFLiteLibrary.__name__ = ["format","swf","lite","SWFLiteLibrary"];
format_swf_lite_SWFLiteLibrary.__super__ = openfl_AssetLibrary;
format_swf_lite_SWFLiteLibrary.prototype = $extend(openfl_AssetLibrary.prototype,{
	swf: null
	,exists: function(id,type) {
		if(id == "" && type == "MOVIE_CLIP") {
			return true;
		}
		if(type == "IMAGE" || type == "MOVIE_CLIP") {
			return this.swf.hasSymbol(id);
		}
		return false;
	}
	,getImage: function(id) {
		return lime_graphics_Image.fromBitmapData(this.swf.getBitmapData(id));
	}
	,getMovieClip: function(id) {
		return this.swf.createMovieClip(id);
	}
	,load: function() {
		var promise = new lime_app_Promise();
		promise.complete(this);
		return promise.future;
	}
	,unload: function() {
		var bitmap;
		var symbol = this.swf.symbols.iterator();
		while(symbol.hasNext()) {
			var symbol1 = symbol.next();
			if(js_Boot.__instanceof(symbol1,format_swf_lite_symbols_BitmapSymbol)) {
				bitmap = symbol1;
				openfl_Assets.cache.removeBitmapData(bitmap.path);
			}
		}
	}
	,__class__: format_swf_lite_SWFLiteLibrary
});
var format_swf_lite_SimpleButton = function(swf,symbol) {
	openfl_display_SimpleButton.call(this);
	this.symbol = symbol;
	if(symbol.downState != null) {
		this.set_downState(new format_swf_lite_MovieClip(swf,symbol.downState));
	}
	if(symbol.hitState != null) {
		this.set_hitTestState(new format_swf_lite_MovieClip(swf,symbol.hitState));
	}
	if(symbol.overState != null) {
		this.set_overState(new format_swf_lite_MovieClip(swf,symbol.overState));
	}
	if(symbol.upState != null) {
		this.set_upState(new format_swf_lite_MovieClip(swf,symbol.upState));
	}
};
$hxClasses["format.swf.lite.SimpleButton"] = format_swf_lite_SimpleButton;
format_swf_lite_SimpleButton.__name__ = ["format","swf","lite","SimpleButton"];
format_swf_lite_SimpleButton.__super__ = openfl_display_SimpleButton;
format_swf_lite_SimpleButton.prototype = $extend(openfl_display_SimpleButton.prototype,{
	symbol: null
	,__class__: format_swf_lite_SimpleButton
});
var format_swf_lite_StaticTextField = function(swf,symbol) {
	openfl_display_Shape.call(this);
	this.symbol = symbol;
	if(symbol.records != null) {
		var font = null;
		var color = 16777215;
		var x = symbol.matrix.tx;
		var y = symbol.matrix.ty;
		var _g = 0;
		var _g1 = symbol.records;
		while(_g < _g1.length) {
			var record = _g1[_g];
			++_g;
			if(record.fontID != null) {
				font = swf.symbols.h[record.fontID];
			}
			if(record.offsetX != null) {
				x = symbol.matrix.tx + record.offsetX * 0.05;
			}
			if(record.offsetY != null) {
				y = symbol.matrix.ty + record.offsetY * 0.05;
			}
			if(record.color != null) {
				color = record.color;
			}
			if(font != null) {
				var scale = record.fontHeight / 1024 * 0.05;
				var index;
				var _g3 = 0;
				var _g2 = record.glyphs.length;
				while(_g3 < _g2) {
					var i = _g3++;
					index = record.glyphs[i];
					this.renderGlyph(font,index,color,scale,x,y);
					x += record.advances[i] * 0.05;
				}
			}
		}
	}
};
$hxClasses["format.swf.lite.StaticTextField"] = format_swf_lite_StaticTextField;
format_swf_lite_StaticTextField.__name__ = ["format","swf","lite","StaticTextField"];
format_swf_lite_StaticTextField.__super__ = openfl_display_Shape;
format_swf_lite_StaticTextField.prototype = $extend(openfl_display_Shape.prototype,{
	symbol: null
	,renderGlyph: function(font,character,color,scale,offsetX,offsetY) {
		var _g = 0;
		var _g1 = font.glyphs[character];
		while(_g < _g1.length) {
			var command = _g1[_g];
			++_g;
			switch(command[1]) {
			case 1:
				this.get_graphics().beginFill(color & 16777215,(color >> 24 & 255) / 255);
				break;
			case 3:
				this.get_graphics().curveTo(command[2] * scale + offsetX,command[3] * scale + offsetY,command[4] * scale + offsetX,command[5] * scale + offsetY);
				break;
			case 4:
				this.get_graphics().endFill();
				break;
			case 5:
				var thickness = command[2];
				if(thickness != null) {
					this.get_graphics().lineStyle(thickness,command[3],command[4],command[5],command[6],command[7],command[8],command[9]);
				} else {
					this.get_graphics().lineStyle();
				}
				break;
			case 6:
				this.get_graphics().lineTo(command[2] * scale + offsetX,command[3] * scale + offsetY);
				break;
			case 7:
				this.get_graphics().moveTo(command[2] * scale + offsetX,command[3] * scale + offsetY);
				break;
			default:
			}
		}
	}
	,__class__: format_swf_lite_StaticTextField
});
var format_swf_lite_symbols_SWFSymbol = function() {
};
$hxClasses["format.swf.lite.symbols.SWFSymbol"] = format_swf_lite_symbols_SWFSymbol;
format_swf_lite_symbols_SWFSymbol.__name__ = ["format","swf","lite","symbols","SWFSymbol"];
format_swf_lite_symbols_SWFSymbol.prototype = {
	className: null
	,id: null
	,__class__: format_swf_lite_symbols_SWFSymbol
};
var format_swf_lite_symbols_BitmapSymbol = function() {
	format_swf_lite_symbols_SWFSymbol.call(this);
};
$hxClasses["format.swf.lite.symbols.BitmapSymbol"] = format_swf_lite_symbols_BitmapSymbol;
format_swf_lite_symbols_BitmapSymbol.__name__ = ["format","swf","lite","symbols","BitmapSymbol"];
format_swf_lite_symbols_BitmapSymbol.__super__ = format_swf_lite_symbols_SWFSymbol;
format_swf_lite_symbols_BitmapSymbol.prototype = $extend(format_swf_lite_symbols_SWFSymbol.prototype,{
	alpha: null
	,path: null
	,__class__: format_swf_lite_symbols_BitmapSymbol
});
var format_swf_lite_symbols_ButtonSymbol = function() {
	format_swf_lite_symbols_SWFSymbol.call(this);
};
$hxClasses["format.swf.lite.symbols.ButtonSymbol"] = format_swf_lite_symbols_ButtonSymbol;
format_swf_lite_symbols_ButtonSymbol.__name__ = ["format","swf","lite","symbols","ButtonSymbol"];
format_swf_lite_symbols_ButtonSymbol.__super__ = format_swf_lite_symbols_SWFSymbol;
format_swf_lite_symbols_ButtonSymbol.prototype = $extend(format_swf_lite_symbols_SWFSymbol.prototype,{
	downState: null
	,hitState: null
	,overState: null
	,upState: null
	,__class__: format_swf_lite_symbols_ButtonSymbol
});
var format_swf_lite_symbols_DynamicTextSymbol = function() {
	format_swf_lite_symbols_SWFSymbol.call(this);
};
$hxClasses["format.swf.lite.symbols.DynamicTextSymbol"] = format_swf_lite_symbols_DynamicTextSymbol;
format_swf_lite_symbols_DynamicTextSymbol.__name__ = ["format","swf","lite","symbols","DynamicTextSymbol"];
format_swf_lite_symbols_DynamicTextSymbol.__super__ = format_swf_lite_symbols_SWFSymbol;
format_swf_lite_symbols_DynamicTextSymbol.prototype = $extend(format_swf_lite_symbols_SWFSymbol.prototype,{
	align: null
	,border: null
	,color: null
	,fontHeight: null
	,fontID: null
	,fontName: null
	,height: null
	,html: null
	,indent: null
	,leading: null
	,leftMargin: null
	,multiline: null
	,password: null
	,rightMargin: null
	,selectable: null
	,text: null
	,width: null
	,wordWrap: null
	,x: null
	,y: null
	,__class__: format_swf_lite_symbols_DynamicTextSymbol
});
var format_swf_lite_symbols_FontSymbol = function() {
	format_swf_lite_symbols_SWFSymbol.call(this);
};
$hxClasses["format.swf.lite.symbols.FontSymbol"] = format_swf_lite_symbols_FontSymbol;
format_swf_lite_symbols_FontSymbol.__name__ = ["format","swf","lite","symbols","FontSymbol"];
format_swf_lite_symbols_FontSymbol.__super__ = format_swf_lite_symbols_SWFSymbol;
format_swf_lite_symbols_FontSymbol.prototype = $extend(format_swf_lite_symbols_SWFSymbol.prototype,{
	advances: null
	,bold: null
	,codes: null
	,glyphs: null
	,italic: null
	,leading: null
	,name: null
	,__class__: format_swf_lite_symbols_FontSymbol
});
var format_swf_lite_symbols_ShapeSymbol = function() {
	format_swf_lite_symbols_SWFSymbol.call(this);
};
$hxClasses["format.swf.lite.symbols.ShapeSymbol"] = format_swf_lite_symbols_ShapeSymbol;
format_swf_lite_symbols_ShapeSymbol.__name__ = ["format","swf","lite","symbols","ShapeSymbol"];
format_swf_lite_symbols_ShapeSymbol.__super__ = format_swf_lite_symbols_SWFSymbol;
format_swf_lite_symbols_ShapeSymbol.prototype = $extend(format_swf_lite_symbols_SWFSymbol.prototype,{
	commands: null
	,rendered: null
	,__class__: format_swf_lite_symbols_ShapeSymbol
});
var format_swf_lite_symbols_SpriteSymbol = function() {
	format_swf_lite_symbols_SWFSymbol.call(this);
	this.frames = [];
};
$hxClasses["format.swf.lite.symbols.SpriteSymbol"] = format_swf_lite_symbols_SpriteSymbol;
format_swf_lite_symbols_SpriteSymbol.__name__ = ["format","swf","lite","symbols","SpriteSymbol"];
format_swf_lite_symbols_SpriteSymbol.__super__ = format_swf_lite_symbols_SWFSymbol;
format_swf_lite_symbols_SpriteSymbol.prototype = $extend(format_swf_lite_symbols_SWFSymbol.prototype,{
	frames: null
	,__class__: format_swf_lite_symbols_SpriteSymbol
});
var format_swf_lite_symbols_StaticTextSymbol = function() {
	format_swf_lite_symbols_SWFSymbol.call(this);
};
$hxClasses["format.swf.lite.symbols.StaticTextSymbol"] = format_swf_lite_symbols_StaticTextSymbol;
format_swf_lite_symbols_StaticTextSymbol.__name__ = ["format","swf","lite","symbols","StaticTextSymbol"];
format_swf_lite_symbols_StaticTextSymbol.__super__ = format_swf_lite_symbols_SWFSymbol;
format_swf_lite_symbols_StaticTextSymbol.prototype = $extend(format_swf_lite_symbols_SWFSymbol.prototype,{
	matrix: null
	,records: null
	,__class__: format_swf_lite_symbols_StaticTextSymbol
});
var format_swf_lite_symbols_StaticTextRecord = function() {
};
$hxClasses["format.swf.lite.symbols.StaticTextRecord"] = format_swf_lite_symbols_StaticTextRecord;
format_swf_lite_symbols_StaticTextRecord.__name__ = ["format","swf","lite","symbols","StaticTextRecord"];
format_swf_lite_symbols_StaticTextRecord.prototype = {
	advances: null
	,color: null
	,fontHeight: null
	,fontID: null
	,glyphs: null
	,offsetX: null
	,offsetY: null
	,__class__: format_swf_lite_symbols_StaticTextRecord
};
var format_swf_lite_timeline_Frame = function() {
	this.objects = [];
};
$hxClasses["format.swf.lite.timeline.Frame"] = format_swf_lite_timeline_Frame;
format_swf_lite_timeline_Frame.__name__ = ["format","swf","lite","timeline","Frame"];
format_swf_lite_timeline_Frame.prototype = {
	label: null
	,objects: null
	,__class__: format_swf_lite_timeline_Frame
};
var format_swf_lite_timeline_FrameObject = function() {
};
$hxClasses["format.swf.lite.timeline.FrameObject"] = format_swf_lite_timeline_FrameObject;
format_swf_lite_timeline_FrameObject.__name__ = ["format","swf","lite","timeline","FrameObject"];
format_swf_lite_timeline_FrameObject.prototype = {
	clipDepth: null
	,colorTransform: null
	,depth: null
	,filters: null
	,id: null
	,matrix: null
	,name: null
	,symbol: null
	,type: null
	,__class__: format_swf_lite_timeline_FrameObject
};
var format_swf_lite_timeline_FrameObjectType = $hxClasses["format.swf.lite.timeline.FrameObjectType"] = { __ename__ : ["format","swf","lite","timeline","FrameObjectType"], __constructs__ : ["CREATE","UPDATE","DESTROY"] };
format_swf_lite_timeline_FrameObjectType.CREATE = ["CREATE",0];
format_swf_lite_timeline_FrameObjectType.CREATE.toString = $estr;
format_swf_lite_timeline_FrameObjectType.CREATE.__enum__ = format_swf_lite_timeline_FrameObjectType;
format_swf_lite_timeline_FrameObjectType.UPDATE = ["UPDATE",1];
format_swf_lite_timeline_FrameObjectType.UPDATE.toString = $estr;
format_swf_lite_timeline_FrameObjectType.UPDATE.__enum__ = format_swf_lite_timeline_FrameObjectType;
format_swf_lite_timeline_FrameObjectType.DESTROY = ["DESTROY",2];
format_swf_lite_timeline_FrameObjectType.DESTROY.toString = $estr;
format_swf_lite_timeline_FrameObjectType.DESTROY.__enum__ = format_swf_lite_timeline_FrameObjectType;
format_swf_lite_timeline_FrameObjectType.__empty_constructs__ = [format_swf_lite_timeline_FrameObjectType.CREATE,format_swf_lite_timeline_FrameObjectType.UPDATE,format_swf_lite_timeline_FrameObjectType.DESTROY];
var format_swf_tags_ITag = function() { };
$hxClasses["format.swf.tags.ITag"] = format_swf_tags_ITag;
format_swf_tags_ITag.__name__ = ["format","swf","tags","ITag"];
format_swf_tags_ITag.prototype = {
	type: null
	,name: null
	,version: null
	,level: null
	,parse: null
	,publish: null
	,toString: null
	,__class__: format_swf_tags_ITag
};
var format_swf_tags_IDefinitionTag = function() { };
$hxClasses["format.swf.tags.IDefinitionTag"] = format_swf_tags_IDefinitionTag;
format_swf_tags_IDefinitionTag.__name__ = ["format","swf","tags","IDefinitionTag"];
format_swf_tags_IDefinitionTag.__interfaces__ = [format_swf_tags_ITag];
format_swf_tags_IDefinitionTag.prototype = {
	characterId: null
	,clone: null
	,__class__: format_swf_tags_IDefinitionTag
};
var format_swf_tags_IDisplayListTag = function() { };
$hxClasses["format.swf.tags.IDisplayListTag"] = format_swf_tags_IDisplayListTag;
format_swf_tags_IDisplayListTag.__name__ = ["format","swf","tags","IDisplayListTag"];
format_swf_tags_IDisplayListTag.__interfaces__ = [format_swf_tags_ITag];
var format_swf_tags_Tag = function() { };
$hxClasses["format.swf.tags.Tag"] = format_swf_tags_Tag;
format_swf_tags_Tag.__name__ = ["format","swf","tags","Tag"];
format_swf_tags_Tag.toStringCommon = function(type,name,indent) {
	if(indent == null) {
		indent = 0;
	}
	return format_swf_utils_StringUtils.repeat(indent) + "[" + format_swf_utils_StringUtils.printf("%02d",[type]) + ":" + name + "] ";
};
var format_swf_tags_TagCSMTextSettings = function() {
	this.type = 74;
	this.name = "CSMTextSettings";
	this.version = 8;
	this.level = 1;
};
$hxClasses["format.swf.tags.TagCSMTextSettings"] = format_swf_tags_TagCSMTextSettings;
format_swf_tags_TagCSMTextSettings.__name__ = ["format","swf","tags","TagCSMTextSettings"];
format_swf_tags_TagCSMTextSettings.__interfaces__ = [format_swf_tags_ITag];
format_swf_tags_TagCSMTextSettings.prototype = {
	type: null
	,name: null
	,version: null
	,level: null
	,textId: null
	,useFlashType: null
	,gridFit: null
	,thickness: null
	,sharpness: null
	,parse: function(data,length,version,async) {
		if(async == null) {
			async = false;
		}
		this.textId = format_swf__$SWFData_SWFData_$Impl_$.readUI16(data);
		this.useFlashType = format_swf__$SWFData_SWFData_$Impl_$.readUB(data,2);
		this.gridFit = format_swf__$SWFData_SWFData_$Impl_$.readUB(data,3);
		format_swf__$SWFData_SWFData_$Impl_$.readUB(data,3);
		this.thickness = format_swf__$SWFData_SWFData_$Impl_$.readFIXED(data);
		this.sharpness = format_swf__$SWFData_SWFData_$Impl_$.readFIXED(data);
		format_swf__$SWFData_SWFData_$Impl_$.readUI8(data);
	}
	,publish: function(data,version) {
		format_swf__$SWFData_SWFData_$Impl_$.writeTagHeader(data,this.type,12);
		format_swf__$SWFData_SWFData_$Impl_$.writeUI16(data,this.textId);
		format_swf__$SWFData_SWFData_$Impl_$.writeUB(data,2,this.useFlashType);
		format_swf__$SWFData_SWFData_$Impl_$.writeUB(data,3,this.gridFit);
		format_swf__$SWFData_SWFData_$Impl_$.writeUB(data,3,0);
		format_swf__$SWFData_SWFData_$Impl_$.writeFIXED(data,this.thickness);
		format_swf__$SWFData_SWFData_$Impl_$.writeFIXED(data,this.sharpness);
		format_swf__$SWFData_SWFData_$Impl_$.writeUI8(data,0);
	}
	,toString: function(indent) {
		if(indent == null) {
			indent = 0;
		}
		return format_swf_tags_Tag.toStringCommon(this.type,this.name,indent) + "TextID: " + this.textId + ", " + "UseFlashType: " + this.useFlashType + ", " + "GridFit: " + this.gridFit + ", " + "Thickness: " + this.thickness + ", " + "Sharpness: " + this.sharpness;
	}
	,__class__: format_swf_tags_TagCSMTextSettings
};
var format_swf_tags_TagDebugID = function() {
	this.type = 63;
	this.name = "DebugID";
	this.version = 6;
	this.level = 1;
	this.uuid = new openfl_utils_ByteArrayData(0);
};
$hxClasses["format.swf.tags.TagDebugID"] = format_swf_tags_TagDebugID;
format_swf_tags_TagDebugID.__name__ = ["format","swf","tags","TagDebugID"];
format_swf_tags_TagDebugID.__interfaces__ = [format_swf_tags_ITag];
format_swf_tags_TagDebugID.prototype = {
	type: null
	,name: null
	,version: null
	,level: null
	,uuid: null
	,parse: function(data,length,version,async) {
		if(async == null) {
			async = false;
		}
		if(length > 0) {
			data.readBytes(this.uuid,0,length);
		}
	}
	,publish: function(data,version) {
		format_swf__$SWFData_SWFData_$Impl_$.writeTagHeader(data,this.type,openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(this.uuid));
		if(openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(this.uuid) > 0) {
			data.writeBytes(this.uuid);
		}
	}
	,toString: function(indent) {
		if(indent == null) {
			indent = 0;
		}
		var str = format_swf_tags_Tag.toStringCommon(this.type,this.name,indent) + "UUID: ";
		if(openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(this.uuid) == 16) {
			str += format_swf_utils_StringUtils.printf("%02x%02x%02x%02x-",[this.uuid.b[0],this.uuid.b[1],this.uuid.b[2],this.uuid.b[3]]);
			str += format_swf_utils_StringUtils.printf("%02x%02x-",[this.uuid.b[4],this.uuid.b[5]]);
			str += format_swf_utils_StringUtils.printf("%02x%02x-",[this.uuid.b[6],this.uuid.b[7]]);
			str += format_swf_utils_StringUtils.printf("%02x%02x-",[this.uuid.b[8],this.uuid.b[9]]);
			str += format_swf_utils_StringUtils.printf("%02x%02x%02x%02x%02x%02x",[this.uuid.b[10],this.uuid.b[11],this.uuid.b[12],this.uuid.b[13],this.uuid.b[14],this.uuid.b[15]]);
		} else {
			str += "(invalid length: " + openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(this.uuid) + ")";
		}
		return str;
	}
	,__class__: format_swf_tags_TagDebugID
};
var format_swf_tags_TagDefineBinaryData = function() {
	this.type = 87;
	this.name = "DefineBinaryData";
	this.version = 9;
	this.level = 1;
	this.binaryData = new openfl_utils_ByteArrayData(0);
};
$hxClasses["format.swf.tags.TagDefineBinaryData"] = format_swf_tags_TagDefineBinaryData;
format_swf_tags_TagDefineBinaryData.__name__ = ["format","swf","tags","TagDefineBinaryData"];
format_swf_tags_TagDefineBinaryData.__interfaces__ = [format_swf_tags_IDefinitionTag];
format_swf_tags_TagDefineBinaryData.prototype = {
	type: null
	,name: null
	,version: null
	,level: null
	,characterId: null
	,binaryData: null
	,parse: function(data,length,version,async) {
		if(async == null) {
			async = false;
		}
		this.characterId = format_swf__$SWFData_SWFData_$Impl_$.readUI16(data);
		format_swf__$SWFData_SWFData_$Impl_$.readUI32(data);
		if(length > 6) {
			data.readBytes(this.binaryData,0,length - 6);
		}
	}
	,publish: function(data,version) {
		var body = format_swf__$SWFData_SWFData_$Impl_$._new();
		format_swf__$SWFData_SWFData_$Impl_$.writeUI16(body,this.characterId);
		format_swf__$SWFData_SWFData_$Impl_$.writeUI32(body,0);
		if(openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(this.binaryData) > 0) {
			body.writeBytes(this.binaryData);
		}
		format_swf__$SWFData_SWFData_$Impl_$.writeTagHeader(data,this.type,format_swf__$SWFData_SWFData_$Impl_$.get_length(body));
		data.writeBytes(openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytes(body));
	}
	,clone: function() {
		var tag = new format_swf_tags_TagDefineBinaryData();
		tag.characterId = this.characterId;
		if(openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(this.binaryData) > 0) {
			tag.binaryData.writeBytes(this.binaryData);
		}
		return tag;
	}
	,toString: function(indent) {
		if(indent == null) {
			indent = 0;
		}
		return format_swf_tags_Tag.toStringCommon(this.type,this.name,indent) + "ID: " + this.characterId + ", " + "Length: " + openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(this.binaryData);
	}
	,__class__: format_swf_tags_TagDefineBinaryData
};
var format_swf_tags_TagDefineBits = function() {
	this.bitmapType = 1;
	this.type = 6;
	this.name = "DefineBits";
	this.version = 1;
	this.level = 1;
	this.bitmapData = new openfl_utils_ByteArrayData(0);
};
$hxClasses["format.swf.tags.TagDefineBits"] = format_swf_tags_TagDefineBits;
format_swf_tags_TagDefineBits.__name__ = ["format","swf","tags","TagDefineBits"];
format_swf_tags_TagDefineBits.__interfaces__ = [format_swf_tags_IDefinitionTag];
format_swf_tags_TagDefineBits.prototype = {
	type: null
	,name: null
	,version: null
	,level: null
	,bitmapType: null
	,characterId: null
	,bitmapData: null
	,instance: null
	,parse: function(data,length,version,async) {
		if(async == null) {
			async = false;
		}
		this.characterId = format_swf__$SWFData_SWFData_$Impl_$.readUI16(data);
		if(length > 2) {
			data.readBytes(this.bitmapData,0,length - 2);
		}
	}
	,publish: function(data,version) {
		format_swf__$SWFData_SWFData_$Impl_$.writeTagHeader(data,this.type,openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(this.bitmapData) + 2,true);
		format_swf__$SWFData_SWFData_$Impl_$.writeUI16(data,this.characterId);
		if(openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(this.bitmapData) > 0) {
			data.writeBytes(this.bitmapData);
		}
	}
	,clone: function() {
		var tag = new format_swf_tags_TagDefineBits();
		tag.characterId = this.characterId;
		tag.bitmapType = this.bitmapType;
		if(openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(this.bitmapData) > 0) {
			tag.bitmapData.writeBytes(this.bitmapData);
		}
		return tag;
	}
	,loader: null
	,onCompleteCallback: null
	,exportBitmapData: function(onComplete) {
		this.onCompleteCallback = onComplete;
		this.loader = new openfl_display_Loader();
		this.loader.contentLoaderInfo.addEventListener("complete",$bind(this,this.exportCompleteHandler));
		this.loader.loadBytes(this.bitmapData);
	}
	,exportCompleteHandler: function(event) {
		var loader = event.target.loader;
		var bitmapData = new openfl_display_BitmapData(Math.ceil(loader.content.get_width()),Math.ceil(loader.content.get_height()));
		bitmapData.draw(loader);
		this.instance = bitmapData;
		this.onCompleteCallback(bitmapData);
	}
	,toString: function(indent) {
		if(indent == null) {
			indent = 0;
		}
		return format_swf_tags_Tag.toStringCommon(this.type,this.name,indent) + "ID: " + this.characterId + ", " + "BitmapLength: " + openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(this.bitmapData);
	}
	,__class__: format_swf_tags_TagDefineBits
};
var format_swf_tags_TagDefineBitsJPEG2 = function() {
	format_swf_tags_TagDefineBits.call(this);
	this.type = 21;
	this.name = "DefineBitsJPEG2";
	this.version = 2;
	this.level = 2;
};
$hxClasses["format.swf.tags.TagDefineBitsJPEG2"] = format_swf_tags_TagDefineBitsJPEG2;
format_swf_tags_TagDefineBitsJPEG2.__name__ = ["format","swf","tags","TagDefineBitsJPEG2"];
format_swf_tags_TagDefineBitsJPEG2.__interfaces__ = [format_swf_tags_IDefinitionTag];
format_swf_tags_TagDefineBitsJPEG2.__super__ = format_swf_tags_TagDefineBits;
format_swf_tags_TagDefineBitsJPEG2.prototype = $extend(format_swf_tags_TagDefineBits.prototype,{
	parse: function(data,length,version,async) {
		if(async == null) {
			async = false;
		}
		format_swf_tags_TagDefineBits.prototype.parse.call(this,data,length,version);
		if(this.bitmapData.b[0] == 255 && (this.bitmapData.b[1] == 216 || this.bitmapData.b[1] == 217)) {
			this.bitmapType = 1;
		} else if(this.bitmapData.b[0] == 137 && this.bitmapData.b[1] == 80 && this.bitmapData.b[2] == 78 && this.bitmapData.b[3] == 71 && this.bitmapData.b[4] == 13 && this.bitmapData.b[5] == 10 && this.bitmapData.b[6] == 26 && this.bitmapData.b[7] == 10) {
			this.bitmapType = 3;
		} else if(this.bitmapData.b[0] == 71 && this.bitmapData.b[1] == 73 && this.bitmapData.b[2] == 70 && this.bitmapData.b[3] == 56 && this.bitmapData.b[4] == 57 && this.bitmapData.b[5] == 97) {
			this.bitmapType = 2;
		}
		if(this.bitmapType != 1) {
			version = 8;
		}
	}
	,clone: function() {
		var tag = new format_swf_tags_TagDefineBitsJPEG2();
		tag.characterId = this.characterId;
		tag.bitmapType = this.bitmapType;
		if(openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(this.bitmapData) > 0) {
			tag.bitmapData.writeBytes(this.bitmapData);
		}
		return tag;
	}
	,toString: function(indent) {
		if(indent == null) {
			indent = 0;
		}
		return format_swf_tags_Tag.toStringCommon(this.type,this.name,indent) + "ID: " + this.characterId + ", " + "Type: " + format_swf_data_consts_BitmapType.toString(this.bitmapType) + ", " + "BitmapLength: " + openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(this.bitmapData);
	}
	,__class__: format_swf_tags_TagDefineBitsJPEG2
});
var format_swf_tags_TagDefineBitsJPEG3 = function() {
	format_swf_tags_TagDefineBitsJPEG2.call(this);
	this.type = 35;
	this.name = "DefineBitsJPEG3";
	this.version = 3;
	this.level = 3;
	this.bitmapAlphaData = new openfl_utils_ByteArrayData(0);
};
$hxClasses["format.swf.tags.TagDefineBitsJPEG3"] = format_swf_tags_TagDefineBitsJPEG3;
format_swf_tags_TagDefineBitsJPEG3.__name__ = ["format","swf","tags","TagDefineBitsJPEG3"];
format_swf_tags_TagDefineBitsJPEG3.__interfaces__ = [format_swf_tags_IDefinitionTag];
format_swf_tags_TagDefineBitsJPEG3.__super__ = format_swf_tags_TagDefineBitsJPEG2;
format_swf_tags_TagDefineBitsJPEG3.prototype = $extend(format_swf_tags_TagDefineBitsJPEG2.prototype,{
	bitmapAlphaData: null
	,parse: function(data,length,version,async) {
		if(async == null) {
			async = false;
		}
		this.characterId = format_swf__$SWFData_SWFData_$Impl_$.readUI16(data);
		var alphaDataOffset = format_swf__$SWFData_SWFData_$Impl_$.readUI32(data);
		data.readBytes(this.bitmapData,0,alphaDataOffset);
		if(this.bitmapData.b[0] == 255 && (this.bitmapData.b[1] == 216 || this.bitmapData.b[1] == 217)) {
			this.bitmapType = 1;
		} else if(this.bitmapData.b[0] == 137 && this.bitmapData.b[1] == 80 && this.bitmapData.b[2] == 78 && this.bitmapData.b[3] == 71 && this.bitmapData.b[4] == 13 && this.bitmapData.b[5] == 10 && this.bitmapData.b[6] == 26 && this.bitmapData.b[7] == 10) {
			this.bitmapType = 3;
		} else if(this.bitmapData.b[0] == 71 && this.bitmapData.b[1] == 73 && this.bitmapData.b[2] == 70 && this.bitmapData.b[3] == 56 && this.bitmapData.b[4] == 57 && this.bitmapData.b[5] == 97) {
			this.bitmapType = 2;
		}
		var alphaDataSize = length - alphaDataOffset - 6;
		if(alphaDataSize > 0) {
			data.readBytes(this.bitmapAlphaData,0,alphaDataSize);
		}
	}
	,publish: function(data,version) {
		format_swf__$SWFData_SWFData_$Impl_$.writeTagHeader(data,this.type,openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(this.bitmapData) + openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(this.bitmapAlphaData) + 6,true);
		format_swf__$SWFData_SWFData_$Impl_$.writeUI16(data,this.characterId);
		format_swf__$SWFData_SWFData_$Impl_$.writeUI32(data,openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(this.bitmapData));
		if(openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(this.bitmapData) > 0) {
			data.writeBytes(this.bitmapData);
		}
		if(openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(this.bitmapAlphaData) > 0) {
			data.writeBytes(this.bitmapAlphaData);
		}
	}
	,clone: function() {
		var tag = new format_swf_tags_TagDefineBitsJPEG3();
		tag.characterId = this.characterId;
		tag.bitmapType = this.bitmapType;
		if(openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(this.bitmapData) > 0) {
			tag.bitmapData.writeBytes(this.bitmapData);
		}
		if(openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(this.bitmapAlphaData) > 0) {
			tag.bitmapAlphaData.writeBytes(this.bitmapAlphaData);
		}
		return tag;
	}
	,exportCompleteHandler: function(event) {
		var loader = event.target.loader;
		var bitmapData = new openfl_display_BitmapData(Math.ceil(loader.content.get_width()),Math.ceil(loader.content.get_height()),true);
		bitmapData.draw(loader);
		try {
			this.bitmapAlphaData.uncompress();
		} catch( e ) {
			haxe_CallStack.lastException = e;
		}
		this.bitmapAlphaData.position = 0;
		var constrain = function(value) {
			if(value > 255) {
				return 255;
			} else if(value < 0) {
				return 0;
			}
			return value | 0;
		};
		var _g1 = 0;
		var _g = bitmapData.height;
		while(_g1 < _g) {
			var y = _g1++;
			var _g3 = 0;
			var _g2 = bitmapData.width;
			while(_g3 < _g2) {
				var x = _g3++;
				var a = this.bitmapAlphaData.readUnsignedByte();
				var unmultiply = 255.0 / a;
				var pixel = bitmapData.getPixel(x,y);
				bitmapData.setPixel32(x,y,(a << 24) + (constrain((pixel >> 16 & 255) * unmultiply) << 16) + (constrain((pixel >> 8 & 255) * unmultiply) << 8) + constrain((pixel & 255) * unmultiply));
			}
		}
		this.instance = bitmapData;
		this.onCompleteCallback(bitmapData);
	}
	,toString: function(indent) {
		if(indent == null) {
			indent = 0;
		}
		return format_swf_tags_Tag.toStringCommon(this.type,this.name,indent) + "ID: " + this.characterId + ", " + "Type: " + format_swf_data_consts_BitmapType.toString(this.bitmapType) + ", " + "HasAlphaData: " + Std.string(openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(this.bitmapAlphaData) > 0) + ", " + (openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(this.bitmapAlphaData) > 0 ? "BitmapAlphaLength: " + openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(this.bitmapAlphaData) + ", " : "") + "BitmapLength: " + openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(this.bitmapData);
	}
	,__class__: format_swf_tags_TagDefineBitsJPEG3
});
var format_swf_tags_TagDefineBitsJPEG4 = function() {
	format_swf_tags_TagDefineBitsJPEG3.call(this);
	this.type = 90;
	this.name = "DefineBitsJPEG4";
	this.version = 10;
	this.level = 4;
};
$hxClasses["format.swf.tags.TagDefineBitsJPEG4"] = format_swf_tags_TagDefineBitsJPEG4;
format_swf_tags_TagDefineBitsJPEG4.__name__ = ["format","swf","tags","TagDefineBitsJPEG4"];
format_swf_tags_TagDefineBitsJPEG4.__interfaces__ = [format_swf_tags_IDefinitionTag];
format_swf_tags_TagDefineBitsJPEG4.__super__ = format_swf_tags_TagDefineBitsJPEG3;
format_swf_tags_TagDefineBitsJPEG4.prototype = $extend(format_swf_tags_TagDefineBitsJPEG3.prototype,{
	deblockParam: null
	,parse: function(data,length,version,async) {
		if(async == null) {
			async = false;
		}
		this.characterId = format_swf__$SWFData_SWFData_$Impl_$.readUI16(data);
		var alphaDataOffset = format_swf__$SWFData_SWFData_$Impl_$.readUI32(data);
		this.deblockParam = format_swf__$SWFData_SWFData_$Impl_$.readFIXED8(data);
		data.readBytes(this.bitmapData,0,alphaDataOffset);
		if(this.bitmapData.b[0] == 255 && (this.bitmapData.b[1] == 216 || this.bitmapData.b[1] == 217)) {
			this.bitmapType = 1;
		} else if(this.bitmapData.b[0] == 137 && this.bitmapData.b[1] == 80 && this.bitmapData.b[2] == 78 && this.bitmapData.b[3] == 71 && this.bitmapData.b[4] == 13 && this.bitmapData.b[5] == 10 && this.bitmapData.b[6] == 26 && this.bitmapData.b[7] == 10) {
			this.bitmapType = 3;
		} else if(this.bitmapData.b[0] == 71 && this.bitmapData.b[1] == 73 && this.bitmapData.b[2] == 70 && this.bitmapData.b[3] == 56 && this.bitmapData.b[4] == 57 && this.bitmapData.b[5] == 97) {
			this.bitmapType = 2;
		}
		var alphaDataSize = length - alphaDataOffset - 6;
		if(alphaDataSize > 0) {
			data.readBytes(this.bitmapAlphaData,0,alphaDataSize);
		}
	}
	,publish: function(data,version) {
		format_swf__$SWFData_SWFData_$Impl_$.writeTagHeader(data,this.type,openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(this.bitmapData) + openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(this.bitmapAlphaData) + 6,true);
		format_swf__$SWFData_SWFData_$Impl_$.writeUI16(data,this.characterId);
		format_swf__$SWFData_SWFData_$Impl_$.writeUI32(data,openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(this.bitmapData));
		format_swf__$SWFData_SWFData_$Impl_$.writeFIXED8(data,this.deblockParam);
		if(openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(this.bitmapData) > 0) {
			data.writeBytes(this.bitmapData);
		}
		if(openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(this.bitmapAlphaData) > 0) {
			data.writeBytes(this.bitmapAlphaData);
		}
	}
	,clone: function() {
		var tag = new format_swf_tags_TagDefineBitsJPEG4();
		tag.characterId = this.characterId;
		tag.bitmapType = this.bitmapType;
		tag.deblockParam = this.deblockParam;
		if(openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(this.bitmapData) > 0) {
			tag.bitmapData.writeBytes(this.bitmapData);
		}
		if(openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(this.bitmapAlphaData) > 0) {
			tag.bitmapAlphaData.writeBytes(this.bitmapAlphaData);
		}
		return tag;
	}
	,toString: function(indent) {
		if(indent == null) {
			indent = 0;
		}
		return format_swf_tags_Tag.toStringCommon(this.type,this.name,indent) + "ID: " + this.characterId + ", " + "Type: " + format_swf_data_consts_BitmapType.toString(this.bitmapType) + ", " + "DeblockParam: " + this.deblockParam + ", " + "HasAlphaData: " + Std.string(openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(this.bitmapAlphaData) > 0) + ", " + (openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(this.bitmapAlphaData) > 0 ? "BitmapAlphaLength: " + openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(this.bitmapAlphaData) + ", " : "") + "BitmapLength: " + openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(this.bitmapData);
	}
	,__class__: format_swf_tags_TagDefineBitsJPEG4
});
var format_swf_tags_TagDefineBitsLossless = function() {
	this.type = 20;
	this.name = "DefineBitsLossless";
	this.version = 2;
	this.level = 1;
	this.zlibBitmapData = new openfl_utils_ByteArrayData(0);
};
$hxClasses["format.swf.tags.TagDefineBitsLossless"] = format_swf_tags_TagDefineBitsLossless;
format_swf_tags_TagDefineBitsLossless.__name__ = ["format","swf","tags","TagDefineBitsLossless"];
format_swf_tags_TagDefineBitsLossless.__interfaces__ = [format_swf_tags_IDefinitionTag];
format_swf_tags_TagDefineBitsLossless.prototype = {
	type: null
	,name: null
	,version: null
	,level: null
	,bitmapFormat: null
	,bitmapWidth: null
	,bitmapHeight: null
	,bitmapColorTableSize: null
	,characterId: null
	,zlibBitmapData: null
	,instance: null
	,parse: function(data,length,version,async) {
		if(async == null) {
			async = false;
		}
		this.characterId = format_swf__$SWFData_SWFData_$Impl_$.readUI16(data);
		this.bitmapFormat = format_swf__$SWFData_SWFData_$Impl_$.readUI8(data);
		this.bitmapWidth = format_swf__$SWFData_SWFData_$Impl_$.readUI16(data);
		this.bitmapHeight = format_swf__$SWFData_SWFData_$Impl_$.readUI16(data);
		if(this.bitmapFormat == 3) {
			this.bitmapColorTableSize = format_swf__$SWFData_SWFData_$Impl_$.readUI8(data) + 1;
		}
		data.readBytes(this.zlibBitmapData,0,length - (this.bitmapFormat == 3 ? 8 : 7));
	}
	,publish: function(data,version) {
		var body = format_swf__$SWFData_SWFData_$Impl_$._new();
		format_swf__$SWFData_SWFData_$Impl_$.writeUI16(body,this.characterId);
		format_swf__$SWFData_SWFData_$Impl_$.writeUI8(body,this.bitmapFormat);
		format_swf__$SWFData_SWFData_$Impl_$.writeUI16(body,this.bitmapWidth);
		format_swf__$SWFData_SWFData_$Impl_$.writeUI16(body,this.bitmapHeight);
		if(this.bitmapFormat == 3) {
			format_swf__$SWFData_SWFData_$Impl_$.writeUI8(body,this.bitmapColorTableSize - 1);
		}
		if(openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(this.zlibBitmapData) > 0) {
			body.writeBytes(this.zlibBitmapData);
		}
		format_swf__$SWFData_SWFData_$Impl_$.writeTagHeader(data,this.type,format_swf__$SWFData_SWFData_$Impl_$.get_length(body),true);
		data.writeBytes(openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytes(body));
	}
	,clone: function() {
		var tag = new format_swf_tags_TagDefineBitsLossless();
		tag.characterId = this.characterId;
		tag.bitmapFormat = this.bitmapFormat;
		tag.bitmapWidth = this.bitmapWidth;
		tag.bitmapHeight = this.bitmapHeight;
		if(openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(this.zlibBitmapData) > 0) {
			tag.zlibBitmapData.writeBytes(this.zlibBitmapData);
		}
		return tag;
	}
	,toString: function(indent) {
		if(indent == null) {
			indent = 0;
		}
		return format_swf_tags_Tag.toStringCommon(this.type,this.name,indent) + "ID: " + this.characterId + ", " + "Format: " + format_swf_data_consts_BitmapFormat.toString(this.bitmapFormat) + ", " + "Size: (" + this.bitmapWidth + "," + this.bitmapHeight + ")";
	}
	,__class__: format_swf_tags_TagDefineBitsLossless
};
var format_swf_tags_TagDefineBitsLossless2 = function() {
	format_swf_tags_TagDefineBitsLossless.call(this);
	this.type = 36;
	this.name = "DefineBitsLossless2";
	this.version = 3;
	this.level = 2;
};
$hxClasses["format.swf.tags.TagDefineBitsLossless2"] = format_swf_tags_TagDefineBitsLossless2;
format_swf_tags_TagDefineBitsLossless2.__name__ = ["format","swf","tags","TagDefineBitsLossless2"];
format_swf_tags_TagDefineBitsLossless2.__super__ = format_swf_tags_TagDefineBitsLossless;
format_swf_tags_TagDefineBitsLossless2.prototype = $extend(format_swf_tags_TagDefineBitsLossless.prototype,{
	clone: function() {
		var tag = new format_swf_tags_TagDefineBitsLossless2();
		tag.characterId = this.characterId;
		tag.bitmapFormat = this.bitmapFormat;
		tag.bitmapWidth = this.bitmapWidth;
		tag.bitmapHeight = this.bitmapHeight;
		if(openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(this.zlibBitmapData) > 0) {
			tag.zlibBitmapData.writeBytes(this.zlibBitmapData);
		}
		return tag;
	}
	,toString: function(indent) {
		if(indent == null) {
			indent = 0;
		}
		return format_swf_tags_Tag.toStringCommon(this.type,this.name,indent) + "ID: " + this.characterId + ", " + "Format: " + format_swf_data_consts_BitmapFormat.toString(this.bitmapFormat) + ", " + "Size: (" + this.bitmapWidth + "," + this.bitmapHeight + ")";
	}
	,__class__: format_swf_tags_TagDefineBitsLossless2
});
var format_swf_tags_TagDefineButton = function() {
	this.type = 7;
	this.name = "DefineButton";
	this.version = 1;
	this.level = 1;
	this.characters = [];
	this.actions = [];
	this.frames = new haxe_ds_StringMap();
};
$hxClasses["format.swf.tags.TagDefineButton"] = format_swf_tags_TagDefineButton;
format_swf_tags_TagDefineButton.__name__ = ["format","swf","tags","TagDefineButton"];
format_swf_tags_TagDefineButton.__interfaces__ = [format_swf_tags_IDefinitionTag];
format_swf_tags_TagDefineButton.prototype = {
	type: null
	,name: null
	,version: null
	,level: null
	,characterId: null
	,characters: null
	,actions: null
	,frames: null
	,parse: function(data,length,version,async) {
		if(async == null) {
			async = false;
		}
		this.characterId = format_swf__$SWFData_SWFData_$Impl_$.readUI16(data);
		var record;
		while(true) {
			record = format_swf__$SWFData_SWFData_$Impl_$.readBUTTONRECORD(data);
			if(!(record != null)) {
				break;
			}
			this.characters.push(record);
		}
		var action;
		while(true) {
			action = format_swf__$SWFData_SWFData_$Impl_$.readACTIONRECORD(data);
			if(!(action != null)) {
				break;
			}
			this.actions.push(action);
		}
		this.processRecords();
	}
	,publish: function(data,version) {
		var body = format_swf__$SWFData_SWFData_$Impl_$._new();
		format_swf__$SWFData_SWFData_$Impl_$.writeUI16(body,this.characterId);
		var _g1 = 0;
		var _g = this.characters.length;
		while(_g1 < _g) format_swf__$SWFData_SWFData_$Impl_$.writeBUTTONRECORD(data,this.characters[_g1++]);
		format_swf__$SWFData_SWFData_$Impl_$.writeUI8(data,0);
		var _g11 = 0;
		var _g2 = this.actions.length;
		while(_g11 < _g2) format_swf__$SWFData_SWFData_$Impl_$.writeACTIONRECORD(data,this.actions[_g11++]);
		format_swf__$SWFData_SWFData_$Impl_$.writeUI8(data,0);
		format_swf__$SWFData_SWFData_$Impl_$.writeTagHeader(data,this.type,format_swf__$SWFData_SWFData_$Impl_$.get_length(body));
		data.writeBytes(openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytes(body));
	}
	,clone: function() {
		var tag = new format_swf_tags_TagDefineButton();
		tag.characterId = this.characterId;
		var _g1 = 0;
		var _g = this.characters.length;
		while(_g1 < _g) tag.characters.push(this.characters[_g1++].clone());
		var _g11 = 0;
		var _g2 = this.actions.length;
		while(_g11 < _g2) tag.actions.push(this.actions[_g11++].clone());
		return tag;
	}
	,getRecordsByState: function(state) {
		var _this = this.frames;
		if(__map_reserved[state] != null) {
			return _this.getReserved(state);
		} else {
			return _this.h[state];
		}
	}
	,processRecords: function() {
		var upState = [];
		var overState = [];
		var downState = [];
		var hitState = [];
		var _g1 = 0;
		var _g = this.characters.length;
		while(_g1 < _g) {
			var record = this.characters[_g1++];
			if(record.stateUp) {
				upState.push(record);
			}
			if(record.stateOver) {
				overState.push(record);
			}
			if(record.stateDown) {
				downState.push(record);
			}
			if(record.stateHitTest) {
				hitState.push(record);
			}
		}
		upState.sort($bind(this,this.sortByDepthCompareFunction));
		overState.sort($bind(this,this.sortByDepthCompareFunction));
		downState.sort($bind(this,this.sortByDepthCompareFunction));
		hitState.sort($bind(this,this.sortByDepthCompareFunction));
		var _this = this.frames;
		if(__map_reserved["up"] != null) {
			_this.setReserved("up",upState);
		} else {
			_this.h["up"] = upState;
		}
		var _this1 = this.frames;
		if(__map_reserved["over"] != null) {
			_this1.setReserved("over",overState);
		} else {
			_this1.h["over"] = overState;
		}
		var _this2 = this.frames;
		if(__map_reserved["down"] != null) {
			_this2.setReserved("down",downState);
		} else {
			_this2.h["down"] = downState;
		}
		var _this3 = this.frames;
		if(__map_reserved["hit"] != null) {
			_this3.setReserved("hit",hitState);
		} else {
			_this3.h["hit"] = hitState;
		}
	}
	,sortByDepthCompareFunction: function(a,b) {
		if(a.placeDepth < b.placeDepth) {
			return -1;
		} else if(a.placeDepth > b.placeDepth) {
			return 1;
		} else {
			return 0;
		}
	}
	,toString: function(indent) {
		if(indent == null) {
			indent = 0;
		}
		var str = format_swf_tags_Tag.toStringCommon(this.type,this.name,indent) + "ID: " + this.characterId;
		if(this.characters.length > 0) {
			str += "\n" + format_swf_utils_StringUtils.repeat(indent + 2) + "Characters:";
			var _g1 = 0;
			var _g = this.characters.length;
			while(_g1 < _g) {
				var i = _g1++;
				str += "\n" + format_swf_utils_StringUtils.repeat(indent + 4) + "[" + i + "] " + this.characters[i].toString(indent + 4);
			}
		}
		if(this.actions.length > 0) {
			str += "\n" + format_swf_utils_StringUtils.repeat(indent + 2) + "Actions:";
			var _g11 = 0;
			var _g2 = this.actions.length;
			while(_g11 < _g2) {
				var i1 = _g11++;
				str += "\n" + format_swf_utils_StringUtils.repeat(indent + 4) + "[" + i1 + "] " + this.actions[i1].toString(indent + 4);
			}
		}
		return str;
	}
	,__class__: format_swf_tags_TagDefineButton
};
var format_swf_tags_TagDefineButton2 = function() {
	this.type = 34;
	this.name = "DefineButton2";
	this.version = 3;
	this.level = 2;
	this.characters = [];
	this.condActions = [];
	this.frames = new haxe_ds_StringMap();
};
$hxClasses["format.swf.tags.TagDefineButton2"] = format_swf_tags_TagDefineButton2;
format_swf_tags_TagDefineButton2.__name__ = ["format","swf","tags","TagDefineButton2"];
format_swf_tags_TagDefineButton2.__interfaces__ = [format_swf_tags_IDefinitionTag];
format_swf_tags_TagDefineButton2.prototype = {
	type: null
	,name: null
	,version: null
	,level: null
	,trackAsMenu: null
	,characterId: null
	,characters: null
	,condActions: null
	,frames: null
	,parse: function(data,length,version,async) {
		if(async == null) {
			async = false;
		}
		this.characterId = format_swf__$SWFData_SWFData_$Impl_$.readUI16(data);
		this.trackAsMenu = (format_swf__$SWFData_SWFData_$Impl_$.readUI8(data) & 1) != 0;
		var actionOffset = format_swf__$SWFData_SWFData_$Impl_$.readUI16(data);
		var record;
		while(true) {
			record = format_swf__$SWFData_SWFData_$Impl_$.readBUTTONRECORD(data,2);
			if(!(record != null)) {
				break;
			}
			this.characters.push(record);
		}
		if(actionOffset != 0) {
			var condActionSize;
			while(true) {
				condActionSize = format_swf__$SWFData_SWFData_$Impl_$.readUI16(data);
				this.condActions.push(format_swf__$SWFData_SWFData_$Impl_$.readBUTTONCONDACTION(data));
				if(!(condActionSize != 0)) {
					break;
				}
			}
		}
		this.processRecords();
	}
	,publish: function(data,version) {
		var body = format_swf__$SWFData_SWFData_$Impl_$._new();
		format_swf__$SWFData_SWFData_$Impl_$.writeUI16(body,this.characterId);
		format_swf__$SWFData_SWFData_$Impl_$.writeUI8(body,this.trackAsMenu ? 1 : 0);
		var hasCondActions = this.condActions.length > 0;
		var buttonRecordsBytes = format_swf__$SWFData_SWFData_$Impl_$._new();
		var _g1 = 0;
		var _g = this.characters.length;
		while(_g1 < _g) format_swf__$SWFData_SWFData_$Impl_$.writeBUTTONRECORD(buttonRecordsBytes,this.characters[_g1++],2);
		format_swf__$SWFData_SWFData_$Impl_$.writeUI8(buttonRecordsBytes,0);
		format_swf__$SWFData_SWFData_$Impl_$.writeUI16(body,hasCondActions ? format_swf__$SWFData_SWFData_$Impl_$.get_length(buttonRecordsBytes) + 2 : 0);
		body.writeBytes(openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytes(buttonRecordsBytes));
		if(hasCondActions) {
			var _g11 = 0;
			var _g2 = this.condActions.length;
			while(_g11 < _g2) {
				var i = _g11++;
				var condActionBytes = format_swf__$SWFData_SWFData_$Impl_$._new();
				format_swf__$SWFData_SWFData_$Impl_$.writeBUTTONCONDACTION(condActionBytes,this.condActions[i]);
				format_swf__$SWFData_SWFData_$Impl_$.writeUI16(body,i < this.condActions.length - 1 ? format_swf__$SWFData_SWFData_$Impl_$.get_length(condActionBytes) + 2 : 0);
				body.writeBytes(openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytes(condActionBytes));
			}
		}
		format_swf__$SWFData_SWFData_$Impl_$.writeTagHeader(data,this.type,format_swf__$SWFData_SWFData_$Impl_$.get_length(body));
		data.writeBytes(openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytes(body));
	}
	,clone: function() {
		var tag = new format_swf_tags_TagDefineButton2();
		tag.characterId = this.characterId;
		tag.trackAsMenu = this.trackAsMenu;
		var _g1 = 0;
		var _g = this.characters.length;
		while(_g1 < _g) tag.characters.push(this.characters[_g1++].clone());
		var _g11 = 0;
		var _g2 = this.condActions.length;
		while(_g11 < _g2) tag.condActions.push(this.condActions[_g11++].clone());
		return tag;
	}
	,getRecordsByState: function(state) {
		var _this = this.frames;
		if(__map_reserved[state] != null) {
			return _this.getReserved(state);
		} else {
			return _this.h[state];
		}
	}
	,processRecords: function() {
		var upState = [];
		var overState = [];
		var downState = [];
		var hitState = [];
		var _g1 = 0;
		var _g = this.characters.length;
		while(_g1 < _g) {
			var record = this.characters[_g1++];
			if(record.stateUp) {
				upState.push(record);
			}
			if(record.stateOver) {
				overState.push(record);
			}
			if(record.stateDown) {
				downState.push(record);
			}
			if(record.stateHitTest) {
				hitState.push(record);
			}
		}
		upState.sort($bind(this,this.sortByDepthCompareFunction));
		overState.sort($bind(this,this.sortByDepthCompareFunction));
		downState.sort($bind(this,this.sortByDepthCompareFunction));
		hitState.sort($bind(this,this.sortByDepthCompareFunction));
		var _this = this.frames;
		if(__map_reserved["up"] != null) {
			_this.setReserved("up",upState);
		} else {
			_this.h["up"] = upState;
		}
		var _this1 = this.frames;
		if(__map_reserved["over"] != null) {
			_this1.setReserved("over",overState);
		} else {
			_this1.h["over"] = overState;
		}
		var _this2 = this.frames;
		if(__map_reserved["down"] != null) {
			_this2.setReserved("down",downState);
		} else {
			_this2.h["down"] = downState;
		}
		var _this3 = this.frames;
		if(__map_reserved["hit"] != null) {
			_this3.setReserved("hit",hitState);
		} else {
			_this3.h["hit"] = hitState;
		}
	}
	,sortByDepthCompareFunction: function(a,b) {
		if(a.placeDepth < b.placeDepth) {
			return -1;
		} else if(a.placeDepth > b.placeDepth) {
			return 1;
		} else {
			return 0;
		}
	}
	,toString: function(indent) {
		if(indent == null) {
			indent = 0;
		}
		var str = format_swf_tags_Tag.toStringCommon(this.type,this.name,indent) + "ID: " + this.characterId + ", TrackAsMenu: " + Std.string(this.trackAsMenu);
		if(this.characters.length > 0) {
			str += "\n" + format_swf_utils_StringUtils.repeat(indent + 2) + "Characters:";
			var _g1 = 0;
			var _g = this.characters.length;
			while(_g1 < _g) {
				var i = _g1++;
				str += "\n" + format_swf_utils_StringUtils.repeat(indent + 4) + "[" + i + "] " + this.characters[i].toString(indent + 4);
			}
		}
		if(this.condActions.length > 0) {
			str += "\n" + format_swf_utils_StringUtils.repeat(indent + 2) + "CondActions:";
			var _g11 = 0;
			var _g2 = this.condActions.length;
			while(_g11 < _g2) {
				var i1 = _g11++;
				str += "\n" + format_swf_utils_StringUtils.repeat(indent + 4) + "[" + i1 + "] " + this.condActions[i1].toString(indent + 4);
			}
		}
		return str;
	}
	,__class__: format_swf_tags_TagDefineButton2
};
var format_swf_tags_TagDefineButtonCxform = function() {
	this.type = 23;
	this.name = "DefineButtonCxform";
	this.version = 2;
	this.level = 1;
};
$hxClasses["format.swf.tags.TagDefineButtonCxform"] = format_swf_tags_TagDefineButtonCxform;
format_swf_tags_TagDefineButtonCxform.__name__ = ["format","swf","tags","TagDefineButtonCxform"];
format_swf_tags_TagDefineButtonCxform.__interfaces__ = [format_swf_tags_IDefinitionTag];
format_swf_tags_TagDefineButtonCxform.prototype = {
	type: null
	,name: null
	,version: null
	,level: null
	,buttonColorTransform: null
	,characterId: null
	,parse: function(data,length,version,async) {
		if(async == null) {
			async = false;
		}
		this.characterId = format_swf__$SWFData_SWFData_$Impl_$.readUI16(data);
		this.buttonColorTransform = format_swf__$SWFData_SWFData_$Impl_$.readCXFORM(data);
	}
	,publish: function(data,version) {
		var body = format_swf__$SWFData_SWFData_$Impl_$._new();
		format_swf__$SWFData_SWFData_$Impl_$.writeUI16(body,this.characterId);
		format_swf__$SWFData_SWFData_$Impl_$.writeCXFORM(body,this.buttonColorTransform);
		format_swf__$SWFData_SWFData_$Impl_$.writeTagHeader(data,this.type,format_swf__$SWFData_SWFData_$Impl_$.get_length(body));
		data.writeBytes(openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytes(body));
	}
	,clone: function() {
		var tag = new format_swf_tags_TagDefineButtonCxform();
		tag.characterId = this.characterId;
		tag.buttonColorTransform = this.buttonColorTransform.clone();
		return tag;
	}
	,toString: function(indent) {
		if(indent == null) {
			indent = 0;
		}
		return format_swf_tags_Tag.toStringCommon(this.type,this.name,indent) + "ID: " + this.characterId + ", " + "ColorTransform: " + Std.string(this.buttonColorTransform);
	}
	,__class__: format_swf_tags_TagDefineButtonCxform
};
var format_swf_tags_TagDefineButtonSound = function() {
	this.type = 17;
	this.name = "DefineButtonSound";
	this.version = 2;
	this.level = 1;
};
$hxClasses["format.swf.tags.TagDefineButtonSound"] = format_swf_tags_TagDefineButtonSound;
format_swf_tags_TagDefineButtonSound.__name__ = ["format","swf","tags","TagDefineButtonSound"];
format_swf_tags_TagDefineButtonSound.__interfaces__ = [format_swf_tags_IDefinitionTag];
format_swf_tags_TagDefineButtonSound.prototype = {
	type: null
	,name: null
	,version: null
	,level: null
	,buttonSoundChar0: null
	,buttonSoundChar1: null
	,buttonSoundChar2: null
	,buttonSoundChar3: null
	,buttonSoundInfo0: null
	,buttonSoundInfo1: null
	,buttonSoundInfo2: null
	,buttonSoundInfo3: null
	,characterId: null
	,parse: function(data,length,version,async) {
		if(async == null) {
			async = false;
		}
		this.characterId = format_swf__$SWFData_SWFData_$Impl_$.readUI16(data);
		this.buttonSoundChar0 = format_swf__$SWFData_SWFData_$Impl_$.readUI16(data);
		if(this.buttonSoundChar0 != 0) {
			this.buttonSoundInfo0 = format_swf__$SWFData_SWFData_$Impl_$.readSOUNDINFO(data);
		}
		this.buttonSoundChar1 = format_swf__$SWFData_SWFData_$Impl_$.readUI16(data);
		if(this.buttonSoundChar1 != 0) {
			this.buttonSoundInfo1 = format_swf__$SWFData_SWFData_$Impl_$.readSOUNDINFO(data);
		}
		this.buttonSoundChar2 = format_swf__$SWFData_SWFData_$Impl_$.readUI16(data);
		if(this.buttonSoundChar2 != 0) {
			this.buttonSoundInfo2 = format_swf__$SWFData_SWFData_$Impl_$.readSOUNDINFO(data);
		}
		this.buttonSoundChar3 = format_swf__$SWFData_SWFData_$Impl_$.readUI16(data);
		if(this.buttonSoundChar3 != 0) {
			this.buttonSoundInfo3 = format_swf__$SWFData_SWFData_$Impl_$.readSOUNDINFO(data);
		}
	}
	,publish: function(data,version) {
		var body = format_swf__$SWFData_SWFData_$Impl_$._new();
		format_swf__$SWFData_SWFData_$Impl_$.writeUI16(body,this.characterId);
		format_swf__$SWFData_SWFData_$Impl_$.writeUI16(body,this.buttonSoundChar0);
		if(this.buttonSoundChar0 != 0) {
			format_swf__$SWFData_SWFData_$Impl_$.writeSOUNDINFO(body,this.buttonSoundInfo0);
		}
		format_swf__$SWFData_SWFData_$Impl_$.writeUI16(body,this.buttonSoundChar1);
		if(this.buttonSoundChar1 != 0) {
			format_swf__$SWFData_SWFData_$Impl_$.writeSOUNDINFO(body,this.buttonSoundInfo1);
		}
		format_swf__$SWFData_SWFData_$Impl_$.writeUI16(body,this.buttonSoundChar2);
		if(this.buttonSoundChar2 != 0) {
			format_swf__$SWFData_SWFData_$Impl_$.writeSOUNDINFO(body,this.buttonSoundInfo2);
		}
		format_swf__$SWFData_SWFData_$Impl_$.writeUI16(body,this.buttonSoundChar3);
		if(this.buttonSoundChar3 != 0) {
			format_swf__$SWFData_SWFData_$Impl_$.writeSOUNDINFO(body,this.buttonSoundInfo3);
		}
		format_swf__$SWFData_SWFData_$Impl_$.writeTagHeader(data,this.type,format_swf__$SWFData_SWFData_$Impl_$.get_length(body));
		data.writeBytes(openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytes(body));
	}
	,clone: function() {
		var tag = new format_swf_tags_TagDefineButtonSound();
		tag.characterId = this.characterId;
		tag.buttonSoundChar0 = this.buttonSoundChar0;
		tag.buttonSoundChar1 = this.buttonSoundChar1;
		tag.buttonSoundChar2 = this.buttonSoundChar2;
		tag.buttonSoundChar3 = this.buttonSoundChar3;
		tag.buttonSoundInfo0 = this.buttonSoundInfo0.clone();
		tag.buttonSoundInfo1 = this.buttonSoundInfo1.clone();
		tag.buttonSoundInfo2 = this.buttonSoundInfo2.clone();
		tag.buttonSoundInfo3 = this.buttonSoundInfo3.clone();
		return tag;
	}
	,toString: function(indent) {
		if(indent == null) {
			indent = 0;
		}
		return format_swf_tags_Tag.toStringCommon(this.type,this.name,indent) + "ButtonID: " + this.characterId + ", " + "ButtonSoundChars: " + this.buttonSoundChar0 + "," + this.buttonSoundChar1 + "," + this.buttonSoundChar2 + "," + this.buttonSoundChar3;
	}
	,__class__: format_swf_tags_TagDefineButtonSound
};
var format_swf_tags_TagDefineEditText = function() {
	this.type = 37;
	this.name = "DefineEditText";
	this.version = 4;
	this.level = 1;
};
$hxClasses["format.swf.tags.TagDefineEditText"] = format_swf_tags_TagDefineEditText;
format_swf_tags_TagDefineEditText.__name__ = ["format","swf","tags","TagDefineEditText"];
format_swf_tags_TagDefineEditText.__interfaces__ = [format_swf_tags_IDefinitionTag];
format_swf_tags_TagDefineEditText.prototype = {
	type: null
	,name: null
	,version: null
	,level: null
	,bounds: null
	,variableName: null
	,hasText: null
	,wordWrap: null
	,multiline: null
	,password: null
	,readOnly: null
	,hasTextColor: null
	,hasMaxLength: null
	,hasFont: null
	,hasFontClass: null
	,autoSize: null
	,hasLayout: null
	,noSelect: null
	,border: null
	,wasStatic: null
	,html: null
	,useOutlines: null
	,fontId: null
	,fontClass: null
	,fontHeight: null
	,textColor: null
	,maxLength: null
	,align: null
	,leftMargin: null
	,rightMargin: null
	,indent: null
	,leading: null
	,initialText: null
	,characterId: null
	,parse: function(data,length,version,async) {
		if(async == null) {
			async = false;
		}
		this.characterId = format_swf__$SWFData_SWFData_$Impl_$.readUI16(data);
		this.bounds = format_swf__$SWFData_SWFData_$Impl_$.readRECT(data);
		var flags1 = format_swf__$SWFData_SWFData_$Impl_$.readUI8(data);
		this.hasText = (flags1 & 128) != 0;
		this.wordWrap = (flags1 & 64) != 0;
		this.multiline = (flags1 & 32) != 0;
		this.password = (flags1 & 16) != 0;
		this.readOnly = (flags1 & 8) != 0;
		this.hasTextColor = (flags1 & 4) != 0;
		this.hasMaxLength = (flags1 & 2) != 0;
		this.hasFont = (flags1 & 1) != 0;
		var flags2 = format_swf__$SWFData_SWFData_$Impl_$.readUI8(data);
		this.hasFontClass = (flags2 & 128) != 0;
		this.autoSize = (flags2 & 64) != 0;
		this.hasLayout = (flags2 & 32) != 0;
		this.noSelect = (flags2 & 16) != 0;
		this.border = (flags2 & 8) != 0;
		this.wasStatic = (flags2 & 4) != 0;
		this.html = (flags2 & 2) != 0;
		this.useOutlines = (flags2 & 1) != 0;
		if(this.hasFont) {
			this.fontId = format_swf__$SWFData_SWFData_$Impl_$.readUI16(data);
		}
		if(this.hasFontClass) {
			this.fontClass = format_swf__$SWFData_SWFData_$Impl_$.readSTRING(data);
		}
		if(this.hasFont || this.hasFontClass) {
			this.fontHeight = format_swf__$SWFData_SWFData_$Impl_$.readUI16(data);
		}
		if(this.hasTextColor) {
			this.textColor = format_swf__$SWFData_SWFData_$Impl_$.readRGBA(data);
		}
		if(this.hasMaxLength) {
			this.maxLength = format_swf__$SWFData_SWFData_$Impl_$.readUI16(data);
		}
		if(this.hasLayout) {
			this.align = format_swf__$SWFData_SWFData_$Impl_$.readUI8(data);
			this.leftMargin = format_swf__$SWFData_SWFData_$Impl_$.readUI16(data);
			this.rightMargin = format_swf__$SWFData_SWFData_$Impl_$.readUI16(data);
			this.indent = format_swf__$SWFData_SWFData_$Impl_$.readUI16(data);
			this.leading = format_swf__$SWFData_SWFData_$Impl_$.readSI16(data);
		}
		this.variableName = format_swf__$SWFData_SWFData_$Impl_$.readSTRING(data);
		if(this.hasText) {
			this.initialText = format_swf__$SWFData_SWFData_$Impl_$.readSTRING(data);
		}
	}
	,publish: function(data,version) {
		var body = format_swf__$SWFData_SWFData_$Impl_$._new();
		format_swf__$SWFData_SWFData_$Impl_$.writeUI16(body,this.characterId);
		format_swf__$SWFData_SWFData_$Impl_$.writeRECT(body,this.bounds);
		var flags1 = 0;
		if(this.hasText) {
			flags1 = 128;
		}
		if(this.wordWrap) {
			flags1 |= 64;
		}
		if(this.multiline) {
			flags1 |= 32;
		}
		if(this.password) {
			flags1 |= 16;
		}
		if(this.readOnly) {
			flags1 |= 8;
		}
		if(this.hasTextColor) {
			flags1 |= 4;
		}
		if(this.hasMaxLength) {
			flags1 |= 2;
		}
		if(this.hasFont) {
			flags1 |= 1;
		}
		format_swf__$SWFData_SWFData_$Impl_$.writeUI8(body,flags1);
		var flags2 = 0;
		if(this.hasFontClass) {
			flags2 = 128;
		}
		if(this.autoSize) {
			flags2 |= 64;
		}
		if(this.hasLayout) {
			flags2 |= 32;
		}
		if(this.noSelect) {
			flags2 |= 16;
		}
		if(this.border) {
			flags2 |= 8;
		}
		if(this.wasStatic) {
			flags2 |= 4;
		}
		if(this.html) {
			flags2 |= 2;
		}
		if(this.useOutlines) {
			flags2 |= 1;
		}
		format_swf__$SWFData_SWFData_$Impl_$.writeUI8(body,flags2);
		if(this.hasFont) {
			format_swf__$SWFData_SWFData_$Impl_$.writeUI16(body,this.fontId);
		}
		if(this.hasFontClass) {
			format_swf__$SWFData_SWFData_$Impl_$.writeSTRING(body,this.fontClass);
		}
		if(this.hasFont || this.hasFontClass) {
			format_swf__$SWFData_SWFData_$Impl_$.writeUI16(body,this.fontHeight);
		}
		if(this.hasTextColor) {
			format_swf__$SWFData_SWFData_$Impl_$.writeRGBA(body,this.textColor);
		}
		if(this.hasMaxLength) {
			format_swf__$SWFData_SWFData_$Impl_$.writeUI16(body,this.maxLength);
		}
		if(this.hasLayout) {
			format_swf__$SWFData_SWFData_$Impl_$.writeUI8(body,this.align);
			format_swf__$SWFData_SWFData_$Impl_$.writeUI16(body,this.leftMargin);
			format_swf__$SWFData_SWFData_$Impl_$.writeUI16(body,this.rightMargin);
			format_swf__$SWFData_SWFData_$Impl_$.writeUI16(body,this.indent);
			format_swf__$SWFData_SWFData_$Impl_$.writeSI16(body,this.leading);
		}
		format_swf__$SWFData_SWFData_$Impl_$.writeSTRING(body,this.variableName);
		if(this.hasText) {
			format_swf__$SWFData_SWFData_$Impl_$.writeSTRING(body,this.initialText);
		}
		format_swf__$SWFData_SWFData_$Impl_$.writeTagHeader(data,this.type,format_swf__$SWFData_SWFData_$Impl_$.get_length(body));
		data.writeBytes(openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytes(body));
	}
	,clone: function() {
		var tag = new format_swf_tags_TagDefineEditText();
		tag.characterId = this.characterId;
		tag.bounds = this.bounds.clone();
		tag.variableName = this.variableName;
		tag.hasText = this.hasText;
		tag.wordWrap = this.wordWrap;
		tag.multiline = this.multiline;
		tag.password = this.password;
		tag.readOnly = this.readOnly;
		tag.hasTextColor = this.hasTextColor;
		tag.hasMaxLength = this.hasMaxLength;
		tag.hasFont = this.hasFont;
		tag.hasFontClass = this.hasFontClass;
		tag.autoSize = this.autoSize;
		tag.hasLayout = this.hasLayout;
		tag.noSelect = this.noSelect;
		tag.border = this.border;
		tag.wasStatic = this.wasStatic;
		tag.html = this.html;
		tag.useOutlines = this.useOutlines;
		tag.fontId = this.fontId;
		tag.fontClass = this.fontClass;
		tag.fontHeight = this.fontHeight;
		tag.textColor = this.textColor;
		tag.maxLength = this.maxLength;
		tag.align = this.align;
		tag.leftMargin = this.leftMargin;
		tag.rightMargin = this.rightMargin;
		tag.indent = this.indent;
		tag.leading = this.leading;
		tag.initialText = this.initialText;
		return tag;
	}
	,toString: function(indent) {
		if(indent == null) {
			indent = 0;
		}
		return format_swf_tags_Tag.toStringCommon(this.type,this.name,indent) + "ID: " + this.characterId + ", " + (this.hasText && this.initialText.length > 0 ? "Text: " + this.initialText + ", " : "") + (this.variableName.length > 0 ? "VariableName: " + this.variableName + ", " : "") + "Bounds: " + Std.string(this.bounds);
	}
	,__class__: format_swf_tags_TagDefineEditText
};
var format_swf_tags_TagDefineFont = function() {
	this.type = 10;
	this.name = "DefineFont";
	this.version = 1;
	this.level = 1;
	this.glyphShapeTable = [];
};
$hxClasses["format.swf.tags.TagDefineFont"] = format_swf_tags_TagDefineFont;
format_swf_tags_TagDefineFont.__name__ = ["format","swf","tags","TagDefineFont"];
format_swf_tags_TagDefineFont.__interfaces__ = [format_swf_tags_IDefinitionTag];
format_swf_tags_TagDefineFont.prototype = {
	type: null
	,name: null
	,version: null
	,level: null
	,characterId: null
	,glyphShapeTable: null
	,parse: function(data,length,version,async) {
		if(async == null) {
			async = false;
		}
		this.characterId = format_swf__$SWFData_SWFData_$Impl_$.readUI16(data);
		var numGlyphs = format_swf__$SWFData_SWFData_$Impl_$.readUI16(data) >> 1;
		format_swf__$SWFData_SWFData_$Impl_$.skipBytes(data,numGlyphs - 1 << 1);
		var _g1 = 0;
		while(_g1 < numGlyphs) {
			++_g1;
			this.glyphShapeTable.push(format_swf__$SWFData_SWFData_$Impl_$.readSHAPE(data,format_swf_tags_TagDefineFont.unitDivisor));
		}
	}
	,publish: function(data,version) {
		var body = format_swf__$SWFData_SWFData_$Impl_$._new();
		var len = this.glyphShapeTable.length;
		var shapeTable = format_swf__$SWFData_SWFData_$Impl_$._new();
		format_swf__$SWFData_SWFData_$Impl_$.writeUI16(body,this.characterId);
		var offsetTableLength = len << 1;
		var _g1 = 0;
		while(_g1 < len) {
			format_swf__$SWFData_SWFData_$Impl_$.writeUI16(body,shapeTable.position + offsetTableLength);
			format_swf__$SWFData_SWFData_$Impl_$.writeSHAPE(shapeTable,this.glyphShapeTable[_g1++]);
		}
		body.writeBytes(openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytes(shapeTable));
		format_swf__$SWFData_SWFData_$Impl_$.writeTagHeader(data,this.type,format_swf__$SWFData_SWFData_$Impl_$.get_length(body));
		data.writeBytes(openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytes(body));
	}
	,clone: function() {
		new format_swf_tags_TagDefineFont();
		throw new js__$Boot_HaxeError(new openfl_errors_Error("Not implemented yet."));
	}
	,'export': function(handler,glyphIndex) {
		this.glyphShapeTable[glyphIndex]["export"](handler);
	}
	,toString: function(indent) {
		if(indent == null) {
			indent = 0;
		}
		return format_swf_tags_Tag.toStringCommon(this.type,this.name,indent) + "ID: " + this.characterId + ", " + "Glyphs: " + this.glyphShapeTable.length + this.toStringCommon(indent);
	}
	,toStringCommon: function(indent) {
		var str = "";
		var _g1 = 0;
		var _g = this.glyphShapeTable.length;
		while(_g1 < _g) {
			var i = _g1++;
			str += "\n" + format_swf_utils_StringUtils.repeat(indent + 2) + "[" + i + "] GlyphShapes:";
			str += this.glyphShapeTable[i].toString(indent + 4);
		}
		return str;
	}
	,__class__: format_swf_tags_TagDefineFont
};
var format_swf_tags_TagDefineFont2 = function() {
	format_swf_tags_TagDefineFont.call(this);
	this.type = 48;
	this.name = "DefineFont2";
	this.version = 3;
	this.level = 2;
	this.codeTable = [];
	this.fontAdvanceTable = [];
	this.fontBoundsTable = [];
	this.fontKerningTable = [];
};
$hxClasses["format.swf.tags.TagDefineFont2"] = format_swf_tags_TagDefineFont2;
format_swf_tags_TagDefineFont2.__name__ = ["format","swf","tags","TagDefineFont2"];
format_swf_tags_TagDefineFont2.__interfaces__ = [format_swf_tags_IDefinitionTag];
format_swf_tags_TagDefineFont2.__super__ = format_swf_tags_TagDefineFont;
format_swf_tags_TagDefineFont2.prototype = $extend(format_swf_tags_TagDefineFont.prototype,{
	hasLayout: null
	,shiftJIS: null
	,smallText: null
	,ansi: null
	,wideOffsets: null
	,wideCodes: null
	,italic: null
	,bold: null
	,languageCode: null
	,fontName: null
	,ascent: null
	,descent: null
	,leading: null
	,codeTable: null
	,fontAdvanceTable: null
	,fontBoundsTable: null
	,fontKerningTable: null
	,parse: function(data,length,version,async) {
		if(async == null) {
			async = false;
		}
		this.characterId = format_swf__$SWFData_SWFData_$Impl_$.readUI16(data);
		var flags = format_swf__$SWFData_SWFData_$Impl_$.readUI8(data);
		this.hasLayout = (flags & 128) != 0;
		this.shiftJIS = (flags & 64) != 0;
		this.smallText = (flags & 32) != 0;
		this.ansi = (flags & 16) != 0;
		this.wideOffsets = (flags & 8) != 0;
		this.wideCodes = (flags & 4) != 0;
		this.italic = (flags & 2) != 0;
		this.bold = (flags & 1) != 0;
		this.languageCode = format_swf__$SWFData_SWFData_$Impl_$.readLANGCODE(data);
		var fontNameLen = format_swf__$SWFData_SWFData_$Impl_$.readUI8(data);
		var fontNameRaw = new openfl_utils_ByteArrayData(0);
		data.readBytes(fontNameRaw,0,fontNameLen);
		this.fontName = fontNameRaw.readUTFBytes(fontNameLen);
		var numGlyphs = format_swf__$SWFData_SWFData_$Impl_$.readUI16(data);
		if(numGlyphs > 0) {
			format_swf__$SWFData_SWFData_$Impl_$.skipBytes(data,numGlyphs << (this.wideOffsets ? 2 : 1));
			if(this.wideOffsets) {
				format_swf__$SWFData_SWFData_$Impl_$.readUI32(data);
			} else {
				format_swf__$SWFData_SWFData_$Impl_$.readUI16(data);
			}
			var _g1 = 0;
			while(_g1 < numGlyphs) {
				++_g1;
				this.glyphShapeTable.push(format_swf__$SWFData_SWFData_$Impl_$.readSHAPE(data));
			}
			var _g11 = 0;
			while(_g11 < numGlyphs) {
				++_g11;
				this.codeTable.push(this.wideCodes ? format_swf__$SWFData_SWFData_$Impl_$.readUI16(data) : format_swf__$SWFData_SWFData_$Impl_$.readUI8(data));
			}
		}
		if(this.hasLayout) {
			this.ascent = format_swf__$SWFData_SWFData_$Impl_$.readUI16(data);
			this.descent = format_swf__$SWFData_SWFData_$Impl_$.readUI16(data);
			this.leading = format_swf__$SWFData_SWFData_$Impl_$.readSI16(data);
			var _g12 = 0;
			while(_g12 < numGlyphs) {
				++_g12;
				this.fontAdvanceTable.push(format_swf__$SWFData_SWFData_$Impl_$.readSI16(data));
			}
			var _g13 = 0;
			while(_g13 < numGlyphs) {
				++_g13;
				this.fontBoundsTable.push(format_swf__$SWFData_SWFData_$Impl_$.readRECT(data));
			}
			var kerningCount = format_swf__$SWFData_SWFData_$Impl_$.readUI16(data);
			var _g14 = 0;
			while(_g14 < kerningCount) {
				++_g14;
				this.fontKerningTable.push(format_swf__$SWFData_SWFData_$Impl_$.readKERNINGRECORD(data,this.wideCodes));
			}
		}
	}
	,publish: function(data,version) {
		var body = format_swf__$SWFData_SWFData_$Impl_$._new();
		var numGlyphs = this.glyphShapeTable.length;
		format_swf__$SWFData_SWFData_$Impl_$.writeUI16(body,this.characterId);
		var flags = 0;
		if(this.hasLayout) {
			flags = 128;
		}
		if(this.shiftJIS) {
			flags |= 64;
		}
		if(this.smallText) {
			flags |= 32;
		}
		if(this.ansi) {
			flags |= 16;
		}
		if(this.wideOffsets) {
			flags |= 8;
		}
		if(this.wideCodes) {
			flags |= 4;
		}
		if(this.italic) {
			flags |= 2;
		}
		if(this.bold) {
			flags |= 1;
		}
		format_swf__$SWFData_SWFData_$Impl_$.writeUI8(body,flags);
		format_swf__$SWFData_SWFData_$Impl_$.writeLANGCODE(body,this.languageCode);
		var fontNameRaw = new openfl_utils_ByteArrayData(0);
		fontNameRaw.writeUTFBytes(this.fontName);
		format_swf__$SWFData_SWFData_$Impl_$.writeUI8(body,openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(fontNameRaw));
		body.writeBytes(fontNameRaw);
		format_swf__$SWFData_SWFData_$Impl_$.writeUI16(body,numGlyphs);
		if(numGlyphs > 0) {
			var offset = (numGlyphs << (this.wideOffsets ? 2 : 1)) + (this.wideOffsets ? 4 : 2);
			var shapeTable = format_swf__$SWFData_SWFData_$Impl_$._new();
			var _g1 = 0;
			while(_g1 < numGlyphs) {
				var i = _g1++;
				if(this.wideOffsets) {
					format_swf__$SWFData_SWFData_$Impl_$.writeUI32(body,offset + shapeTable.position);
				} else {
					format_swf__$SWFData_SWFData_$Impl_$.writeUI16(body,offset + shapeTable.position);
				}
				format_swf__$SWFData_SWFData_$Impl_$.writeSHAPE(shapeTable,this.glyphShapeTable[i]);
			}
			if(this.wideOffsets) {
				format_swf__$SWFData_SWFData_$Impl_$.writeUI32(body,offset + format_swf__$SWFData_SWFData_$Impl_$.get_length(shapeTable));
			} else {
				format_swf__$SWFData_SWFData_$Impl_$.writeUI16(body,offset + format_swf__$SWFData_SWFData_$Impl_$.get_length(shapeTable));
			}
			body.writeBytes(openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytes(shapeTable));
			var _g11 = 0;
			while(_g11 < numGlyphs) {
				var i1 = _g11++;
				if(this.wideCodes) {
					format_swf__$SWFData_SWFData_$Impl_$.writeUI16(body,this.codeTable[i1]);
				} else {
					format_swf__$SWFData_SWFData_$Impl_$.writeUI8(body,this.codeTable[i1]);
				}
			}
		}
		if(this.hasLayout) {
			format_swf__$SWFData_SWFData_$Impl_$.writeUI16(body,this.ascent);
			format_swf__$SWFData_SWFData_$Impl_$.writeUI16(body,this.descent);
			format_swf__$SWFData_SWFData_$Impl_$.writeSI16(body,this.leading);
			var _g12 = 0;
			while(_g12 < numGlyphs) format_swf__$SWFData_SWFData_$Impl_$.writeSI16(body,this.fontAdvanceTable[_g12++]);
			var _g13 = 0;
			while(_g13 < numGlyphs) format_swf__$SWFData_SWFData_$Impl_$.writeRECT(body,this.fontBoundsTable[_g13++]);
			var kerningCount = this.fontKerningTable.length;
			format_swf__$SWFData_SWFData_$Impl_$.writeUI16(body,kerningCount);
			var _g14 = 0;
			while(_g14 < kerningCount) format_swf__$SWFData_SWFData_$Impl_$.writeKERNINGRECORD(body,this.fontKerningTable[_g14++],this.wideCodes);
		}
		format_swf__$SWFData_SWFData_$Impl_$.writeTagHeader(data,this.type,format_swf__$SWFData_SWFData_$Impl_$.get_length(body));
		data.writeBytes(openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytes(body));
	}
	,toString: function(indent) {
		if(indent == null) {
			indent = 0;
		}
		return format_swf_tags_Tag.toStringCommon(this.type,this.name,indent) + "ID: " + this.characterId + ", " + "FontName: " + this.fontName + ", " + "Italic: " + Std.string(this.italic) + ", " + "Bold: " + Std.string(this.bold) + ", " + "Glyphs: " + this.glyphShapeTable.length + this.toStringCommon(indent);
	}
	,toStringCommon: function(indent) {
		var str = format_swf_tags_TagDefineFont.prototype.toStringCommon.call(this,indent);
		if(this.hasLayout) {
			str += "\n" + format_swf_utils_StringUtils.repeat(indent + 2) + "Ascent: " + this.ascent;
			str += "\n" + format_swf_utils_StringUtils.repeat(indent + 2) + "Descent: " + this.descent;
			str += "\n" + format_swf_utils_StringUtils.repeat(indent + 2) + "Leading: " + this.leading;
		}
		if(this.codeTable.length > 0) {
			str += "\n" + format_swf_utils_StringUtils.repeat(indent + 2) + "CodeTable:";
			var _g1 = 0;
			var _g = this.codeTable.length;
			while(_g1 < _g) {
				var i = _g1++;
				if((i & 15) == 0) {
					str += "\n" + format_swf_utils_StringUtils.repeat(indent + 4) + Std.string(this.codeTable[i]);
				} else {
					str += ", " + Std.string(this.codeTable[i]);
				}
			}
		}
		if(this.fontAdvanceTable.length > 0) {
			str += "\n" + format_swf_utils_StringUtils.repeat(indent + 2) + "FontAdvanceTable:";
			var _g11 = 0;
			var _g2 = this.fontAdvanceTable.length;
			while(_g11 < _g2) {
				var i1 = _g11++;
				if((i1 & 7) == 0) {
					str += "\n" + format_swf_utils_StringUtils.repeat(indent + 4) + Std.string(this.fontAdvanceTable[i1]);
				} else {
					str += ", " + Std.string(this.fontAdvanceTable[i1]);
				}
			}
		}
		if(this.fontBoundsTable.length > 0) {
			var hasNonNullBounds = false;
			var _g12 = 0;
			var _g3 = this.fontBoundsTable.length;
			while(_g12 < _g3) {
				var rect = this.fontBoundsTable[_g12++];
				if(rect.xmin != 0 || rect.xmax != 0 || rect.ymin != 0 || rect.ymax != 0) {
					hasNonNullBounds = true;
					break;
				}
			}
			if(hasNonNullBounds) {
				str += "\n" + format_swf_utils_StringUtils.repeat(indent + 2) + "FontBoundsTable:";
				var _g13 = 0;
				var _g4 = this.fontBoundsTable.length;
				while(_g13 < _g4) {
					var i2 = _g13++;
					str += "\n" + format_swf_utils_StringUtils.repeat(indent + 4) + "[" + i2 + "] " + this.fontBoundsTable[i2].toString();
				}
			}
		}
		if(this.fontKerningTable.length > 0) {
			str += "\n" + format_swf_utils_StringUtils.repeat(indent + 2) + "KerningTable:";
			var _g14 = 0;
			var _g5 = this.fontKerningTable.length;
			while(_g14 < _g5) {
				var i3 = _g14++;
				str += "\n" + format_swf_utils_StringUtils.repeat(indent + 4) + "[" + i3 + "] " + this.fontKerningTable[i3].toString();
			}
		}
		return str;
	}
	,__class__: format_swf_tags_TagDefineFont2
});
var format_swf_tags_TagDefineFont3 = function() {
	format_swf_tags_TagDefineFont2.call(this);
	this.type = 75;
	this.name = "DefineFont3";
	this.version = 8;
	this.level = 2;
};
$hxClasses["format.swf.tags.TagDefineFont3"] = format_swf_tags_TagDefineFont3;
format_swf_tags_TagDefineFont3.__name__ = ["format","swf","tags","TagDefineFont3"];
format_swf_tags_TagDefineFont3.__interfaces__ = [format_swf_tags_IDefinitionTag];
format_swf_tags_TagDefineFont3.__super__ = format_swf_tags_TagDefineFont2;
format_swf_tags_TagDefineFont3.prototype = $extend(format_swf_tags_TagDefineFont2.prototype,{
	toString: function(indent) {
		if(indent == null) {
			indent = 0;
		}
		return format_swf_tags_Tag.toStringCommon(this.type,this.name,indent) + "ID: " + this.characterId + ", " + "FontName: " + this.fontName + ", " + "Italic: " + Std.string(this.italic) + ", " + "Bold: " + Std.string(this.bold) + ", " + "Glyphs: " + this.glyphShapeTable.length + this.toStringCommon(indent);
	}
	,__class__: format_swf_tags_TagDefineFont3
});
var format_swf_tags_TagDefineFont4 = function() {
	this.type = 91;
	this.name = "DefineFont4";
	this.version = 10;
	this.level = 1;
	this.fontData = new openfl_utils_ByteArrayData(0);
};
$hxClasses["format.swf.tags.TagDefineFont4"] = format_swf_tags_TagDefineFont4;
format_swf_tags_TagDefineFont4.__name__ = ["format","swf","tags","TagDefineFont4"];
format_swf_tags_TagDefineFont4.__interfaces__ = [format_swf_tags_IDefinitionTag];
format_swf_tags_TagDefineFont4.prototype = {
	type: null
	,name: null
	,version: null
	,level: null
	,hasFontData: null
	,italic: null
	,bold: null
	,fontName: null
	,characterId: null
	,fontData: null
	,parse: function(data,length,version,async) {
		if(async == null) {
			async = false;
		}
		var pos = data.position;
		this.characterId = format_swf__$SWFData_SWFData_$Impl_$.readUI16(data);
		var flags = format_swf__$SWFData_SWFData_$Impl_$.readUI8(data);
		this.hasFontData = (flags & 4) != 0;
		this.italic = (flags & 2) != 0;
		this.bold = (flags & 1) != 0;
		this.fontName = format_swf__$SWFData_SWFData_$Impl_$.readSTRING(data);
		if(this.hasFontData && length > (data.position | 0) - pos) {
			data.readBytes(this.fontData,0,length - (data.position - pos));
		}
	}
	,publish: function(data,version) {
		var body = format_swf__$SWFData_SWFData_$Impl_$._new();
		format_swf__$SWFData_SWFData_$Impl_$.writeUI16(body,this.characterId);
		var flags = 0;
		if(this.hasFontData) {
			flags = 4;
		}
		if(this.italic) {
			flags |= 2;
		}
		if(this.bold) {
			flags |= 1;
		}
		format_swf__$SWFData_SWFData_$Impl_$.writeUI8(body,flags);
		format_swf__$SWFData_SWFData_$Impl_$.writeSTRING(body,this.fontName);
		if(this.hasFontData && openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(this.fontData) > 0) {
			body.writeBytes(this.fontData);
		}
		format_swf__$SWFData_SWFData_$Impl_$.writeTagHeader(data,this.type,format_swf__$SWFData_SWFData_$Impl_$.get_length(body));
		data.writeBytes(openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytes(body));
	}
	,clone: function() {
		var tag = new format_swf_tags_TagDefineFont4();
		tag.characterId = this.characterId;
		tag.hasFontData = this.hasFontData;
		tag.italic = this.italic;
		tag.bold = this.bold;
		tag.fontName = this.fontName;
		if(openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(this.fontData) > 0) {
			tag.fontData.writeBytes(this.fontData);
		}
		return tag;
	}
	,toString: function(indent) {
		if(indent == null) {
			indent = 0;
		}
		return format_swf_tags_Tag.toStringCommon(this.type,this.name,indent) + "ID: " + this.characterId + ", " + "FontName: " + this.fontName + ", " + "HasFontData: " + Std.string(this.hasFontData) + ", " + "Italic: " + Std.string(this.italic) + ", " + "Bold: " + Std.string(this.bold);
	}
	,__class__: format_swf_tags_TagDefineFont4
};
var format_swf_tags_TagDefineFontAlignZones = function() {
	this.type = 73;
	this.name = "DefineFontAlignZones";
	this.version = 8;
	this.level = 1;
	this.zoneTable = [];
};
$hxClasses["format.swf.tags.TagDefineFontAlignZones"] = format_swf_tags_TagDefineFontAlignZones;
format_swf_tags_TagDefineFontAlignZones.__name__ = ["format","swf","tags","TagDefineFontAlignZones"];
format_swf_tags_TagDefineFontAlignZones.__interfaces__ = [format_swf_tags_ITag];
format_swf_tags_TagDefineFontAlignZones.prototype = {
	type: null
	,name: null
	,version: null
	,level: null
	,fontId: null
	,csmTableHint: null
	,zoneTable: null
	,parse: function(data,length,version,async) {
		if(async == null) {
			async = false;
		}
		this.fontId = format_swf__$SWFData_SWFData_$Impl_$.readUI16(data);
		this.csmTableHint = format_swf__$SWFData_SWFData_$Impl_$.readUI8(data) >> 6;
		var recordsEndPos = data.position + length - 3;
		while((data.position | 0) < recordsEndPos) this.zoneTable.push(format_swf__$SWFData_SWFData_$Impl_$.readZONERECORD(data));
	}
	,publish: function(data,version) {
		var body = format_swf__$SWFData_SWFData_$Impl_$._new();
		format_swf__$SWFData_SWFData_$Impl_$.writeUI16(body,this.fontId);
		format_swf__$SWFData_SWFData_$Impl_$.writeUI8(body,this.csmTableHint << 6);
		var _g1 = 0;
		var _g = this.zoneTable.length;
		while(_g1 < _g) format_swf__$SWFData_SWFData_$Impl_$.writeZONERECORD(body,this.zoneTable[_g1++]);
		format_swf__$SWFData_SWFData_$Impl_$.writeTagHeader(data,this.type,format_swf__$SWFData_SWFData_$Impl_$.get_length(body));
		data.writeBytes(openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytes(body));
	}
	,toString: function(indent) {
		if(indent == null) {
			indent = 0;
		}
		var str = format_swf_tags_Tag.toStringCommon(this.type,this.name,indent) + "FontID: " + this.fontId + ", " + "CSMTableHint: " + format_swf_data_consts_CSMTableHint.toString(this.csmTableHint) + ", " + "Records: " + this.zoneTable.length;
		var _g1 = 0;
		var _g = this.zoneTable.length;
		while(_g1 < _g) {
			var i = _g1++;
			str += "\n" + format_swf_utils_StringUtils.repeat(indent + 2) + "[" + i + "] " + this.zoneTable[i].toString(indent + 2);
		}
		return str;
	}
	,__class__: format_swf_tags_TagDefineFontAlignZones
};
var format_swf_tags_TagDefineFontInfo = function() {
	this.langCodeLength = 0;
	this.langCode = 0;
	this.type = 13;
	this.name = "DefineFontInfo";
	this.version = 1;
	this.level = 1;
	this.codeTable = [];
};
$hxClasses["format.swf.tags.TagDefineFontInfo"] = format_swf_tags_TagDefineFontInfo;
format_swf_tags_TagDefineFontInfo.__name__ = ["format","swf","tags","TagDefineFontInfo"];
format_swf_tags_TagDefineFontInfo.__interfaces__ = [format_swf_tags_ITag];
format_swf_tags_TagDefineFontInfo.prototype = {
	type: null
	,name: null
	,version: null
	,level: null
	,fontId: null
	,fontName: null
	,smallText: null
	,shiftJIS: null
	,ansi: null
	,italic: null
	,bold: null
	,wideCodes: null
	,langCode: null
	,codeTable: null
	,langCodeLength: null
	,parse: function(data,length,version,async) {
		if(async == null) {
			async = false;
		}
		this.fontId = format_swf__$SWFData_SWFData_$Impl_$.readUI16(data);
		var fontNameLen = format_swf__$SWFData_SWFData_$Impl_$.readUI8(data);
		var fontNameRaw = new openfl_utils_ByteArrayData(0);
		data.readBytes(fontNameRaw,0,fontNameLen);
		this.fontName = fontNameRaw.readUTFBytes(fontNameLen);
		var flags = format_swf__$SWFData_SWFData_$Impl_$.readUI8(data);
		this.smallText = (flags & 32) != 0;
		this.shiftJIS = (flags & 16) != 0;
		this.ansi = (flags & 8) != 0;
		this.italic = (flags & 4) != 0;
		this.bold = (flags & 2) != 0;
		this.wideCodes = (flags & 1) != 0;
		this.parseLangCode(data);
		var numGlyphs = length - fontNameLen - this.langCodeLength - 4;
		var _g1 = 0;
		while(_g1 < numGlyphs) {
			++_g1;
			this.codeTable.push(this.wideCodes ? format_swf__$SWFData_SWFData_$Impl_$.readUI16(data) : format_swf__$SWFData_SWFData_$Impl_$.readUI8(data));
		}
	}
	,publish: function(data,version) {
		var body = format_swf__$SWFData_SWFData_$Impl_$._new();
		format_swf__$SWFData_SWFData_$Impl_$.writeUI16(body,this.fontId);
		var fontNameRaw = new openfl_utils_ByteArrayData(0);
		fontNameRaw.writeUTFBytes(this.fontName);
		format_swf__$SWFData_SWFData_$Impl_$.writeUI8(body,openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(fontNameRaw));
		body.writeBytes(fontNameRaw);
		var flags = 0;
		if(this.smallText) {
			flags = 32;
		}
		if(this.shiftJIS) {
			flags |= 16;
		}
		if(this.ansi) {
			flags |= 8;
		}
		if(this.italic) {
			flags |= 4;
		}
		if(this.bold) {
			flags |= 2;
		}
		if(this.wideCodes) {
			flags |= 1;
		}
		format_swf__$SWFData_SWFData_$Impl_$.writeUI8(body,flags);
		this.publishLangCode(body);
		var numGlyphs = this.codeTable.length;
		var _g1 = 0;
		while(_g1 < numGlyphs) {
			var i = _g1++;
			if(this.wideCodes) {
				format_swf__$SWFData_SWFData_$Impl_$.writeUI16(body,this.codeTable[i]);
			} else {
				format_swf__$SWFData_SWFData_$Impl_$.writeUI8(body,this.codeTable[i]);
			}
		}
		format_swf__$SWFData_SWFData_$Impl_$.writeTagHeader(data,this.type,format_swf__$SWFData_SWFData_$Impl_$.get_length(body));
		data.writeBytes(openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytes(body));
	}
	,parseLangCode: function(data) {
	}
	,publishLangCode: function(data) {
	}
	,toString: function(indent) {
		if(indent == null) {
			indent = 0;
		}
		return format_swf_tags_Tag.toStringCommon(this.type,this.name,indent) + "FontID: " + this.fontId + ", " + "FontName: " + this.fontName + ", " + "Italic: " + Std.string(this.italic) + ", " + "Bold: " + Std.string(this.bold) + ", " + "Codes: " + this.codeTable.length;
	}
	,__class__: format_swf_tags_TagDefineFontInfo
};
var format_swf_tags_TagDefineFontInfo2 = function() {
	format_swf_tags_TagDefineFontInfo.call(this);
	this.type = 62;
	this.name = "DefineFontInfo2";
	this.version = 6;
	this.level = 2;
};
$hxClasses["format.swf.tags.TagDefineFontInfo2"] = format_swf_tags_TagDefineFontInfo2;
format_swf_tags_TagDefineFontInfo2.__name__ = ["format","swf","tags","TagDefineFontInfo2"];
format_swf_tags_TagDefineFontInfo2.__interfaces__ = [format_swf_tags_ITag];
format_swf_tags_TagDefineFontInfo2.__super__ = format_swf_tags_TagDefineFontInfo;
format_swf_tags_TagDefineFontInfo2.prototype = $extend(format_swf_tags_TagDefineFontInfo.prototype,{
	parseLangCode: function(data) {
		this.langCode = format_swf__$SWFData_SWFData_$Impl_$.readUI8(data);
		this.langCodeLength = 1;
	}
	,publishLangCode: function(data) {
		format_swf__$SWFData_SWFData_$Impl_$.writeUI8(data,this.langCode);
	}
	,toString: function(indent) {
		if(indent == null) {
			indent = 0;
		}
		return format_swf_tags_Tag.toStringCommon(this.type,this.name,indent) + "FontID: " + this.fontId + ", " + "FontName: " + this.fontName + ", " + "Italic: " + Std.string(this.italic) + ", " + "Bold: " + Std.string(this.bold) + ", " + "LanguageCode: " + this.langCode + ", " + "Codes: " + this.codeTable.length;
	}
	,__class__: format_swf_tags_TagDefineFontInfo2
});
var format_swf_tags_TagDefineFontName = function() {
	this.type = 88;
	this.name = "DefineFontName";
	this.version = 9;
	this.level = 1;
};
$hxClasses["format.swf.tags.TagDefineFontName"] = format_swf_tags_TagDefineFontName;
format_swf_tags_TagDefineFontName.__name__ = ["format","swf","tags","TagDefineFontName"];
format_swf_tags_TagDefineFontName.__interfaces__ = [format_swf_tags_ITag];
format_swf_tags_TagDefineFontName.prototype = {
	type: null
	,name: null
	,version: null
	,level: null
	,fontId: null
	,fontName: null
	,fontCopyright: null
	,parse: function(data,length,version,async) {
		if(async == null) {
			async = false;
		}
		this.fontId = format_swf__$SWFData_SWFData_$Impl_$.readUI16(data);
		this.fontName = format_swf__$SWFData_SWFData_$Impl_$.readSTRING(data);
		this.fontCopyright = format_swf__$SWFData_SWFData_$Impl_$.readSTRING(data);
	}
	,publish: function(data,version) {
		var body = format_swf__$SWFData_SWFData_$Impl_$._new();
		format_swf__$SWFData_SWFData_$Impl_$.writeUI16(body,this.fontId);
		format_swf__$SWFData_SWFData_$Impl_$.writeSTRING(body,this.fontName);
		format_swf__$SWFData_SWFData_$Impl_$.writeSTRING(body,this.fontCopyright);
		format_swf__$SWFData_SWFData_$Impl_$.writeTagHeader(data,this.type,format_swf__$SWFData_SWFData_$Impl_$.get_length(body));
		data.writeBytes(openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytes(body));
	}
	,toString: function(indent) {
		if(indent == null) {
			indent = 0;
		}
		return format_swf_tags_Tag.toStringCommon(this.type,this.name,indent) + "FontID: " + this.fontId + ", " + "Name: " + this.fontName + ", " + "Copyright: " + this.fontCopyright;
	}
	,__class__: format_swf_tags_TagDefineFontName
};
var format_swf_tags_TagDefineMorphShape = function() {
	this.type = 46;
	this.name = "DefineMorphShape";
	this.version = 3;
	this.level = 1;
	this.morphFillStyles = [];
	this.morphLineStyles = [];
	this.exportShape = new format_swf_data_SWFShape();
};
$hxClasses["format.swf.tags.TagDefineMorphShape"] = format_swf_tags_TagDefineMorphShape;
format_swf_tags_TagDefineMorphShape.__name__ = ["format","swf","tags","TagDefineMorphShape"];
format_swf_tags_TagDefineMorphShape.__interfaces__ = [format_swf_tags_IDefinitionTag];
format_swf_tags_TagDefineMorphShape.prototype = {
	startBounds: null
	,endBounds: null
	,startEdges: null
	,endEdges: null
	,type: null
	,name: null
	,version: null
	,level: null
	,characterId: null
	,morphFillStyles: null
	,morphLineStyles: null
	,exportHandler: null
	,exportShape: null
	,parse: function(data,length,version,async) {
		if(async == null) {
			async = false;
		}
		this.characterId = format_swf__$SWFData_SWFData_$Impl_$.readUI16(data);
		this.startBounds = format_swf__$SWFData_SWFData_$Impl_$.readRECT(data);
		this.endBounds = format_swf__$SWFData_SWFData_$Impl_$.readRECT(data);
		format_swf__$SWFData_SWFData_$Impl_$.readUI32(data);
		var fillStyleCount = format_swf__$SWFData_SWFData_$Impl_$.readUI8(data);
		if(fillStyleCount == 255) {
			fillStyleCount = format_swf__$SWFData_SWFData_$Impl_$.readUI16(data);
		}
		var _g1 = 0;
		var _g = fillStyleCount;
		while(_g1 < _g) {
			++_g1;
			this.morphFillStyles.push(format_swf__$SWFData_SWFData_$Impl_$.readMORPHFILLSTYLE(data));
		}
		var lineStyleCount = format_swf__$SWFData_SWFData_$Impl_$.readUI8(data);
		if(lineStyleCount == 255) {
			lineStyleCount = format_swf__$SWFData_SWFData_$Impl_$.readUI16(data);
		}
		var _g11 = 0;
		var _g2 = lineStyleCount;
		while(_g11 < _g2) {
			++_g11;
			this.morphLineStyles.push(format_swf__$SWFData_SWFData_$Impl_$.readMORPHLINESTYLE(data));
		}
		this.startEdges = format_swf__$SWFData_SWFData_$Impl_$.readSHAPE(data);
		this.endEdges = format_swf__$SWFData_SWFData_$Impl_$.readSHAPE(data);
	}
	,publish: function(data,version) {
		var body = format_swf__$SWFData_SWFData_$Impl_$._new();
		format_swf__$SWFData_SWFData_$Impl_$.writeUI16(body,this.characterId);
		format_swf__$SWFData_SWFData_$Impl_$.writeRECT(body,this.startBounds);
		format_swf__$SWFData_SWFData_$Impl_$.writeRECT(body,this.endBounds);
		var startBytes = format_swf__$SWFData_SWFData_$Impl_$._new();
		var fillStyleCount = this.morphFillStyles.length;
		if(fillStyleCount > 254) {
			format_swf__$SWFData_SWFData_$Impl_$.writeUI8(startBytes,255);
			format_swf__$SWFData_SWFData_$Impl_$.writeUI16(startBytes,fillStyleCount);
		} else {
			format_swf__$SWFData_SWFData_$Impl_$.writeUI8(startBytes,fillStyleCount);
		}
		var _g1 = 0;
		while(_g1 < fillStyleCount) format_swf__$SWFData_SWFData_$Impl_$.writeMORPHFILLSTYLE(startBytes,this.morphFillStyles[_g1++]);
		var lineStyleCount = this.morphLineStyles.length;
		if(lineStyleCount > 254) {
			format_swf__$SWFData_SWFData_$Impl_$.writeUI8(startBytes,255);
			format_swf__$SWFData_SWFData_$Impl_$.writeUI16(startBytes,lineStyleCount);
		} else {
			format_swf__$SWFData_SWFData_$Impl_$.writeUI8(startBytes,lineStyleCount);
		}
		var _g11 = 0;
		while(_g11 < lineStyleCount) format_swf__$SWFData_SWFData_$Impl_$.writeMORPHLINESTYLE(startBytes,this.morphLineStyles[_g11++]);
		format_swf__$SWFData_SWFData_$Impl_$.writeSHAPE(startBytes,this.startEdges);
		format_swf__$SWFData_SWFData_$Impl_$.writeUI32(body,format_swf__$SWFData_SWFData_$Impl_$.get_length(startBytes));
		body.writeBytes(openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytes(startBytes));
		format_swf__$SWFData_SWFData_$Impl_$.writeSHAPE(body,this.endEdges);
		format_swf__$SWFData_SWFData_$Impl_$.writeTagHeader(data,this.type,format_swf__$SWFData_SWFData_$Impl_$.get_length(body));
		data.writeBytes(openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytes(body));
	}
	,clone: function() {
		new format_swf_tags_TagDefineMorphShape();
		throw new js__$Boot_HaxeError(new openfl_errors_Error("Not implemented yet."));
	}
	,'export': function(ratio) {
		if(ratio == null) {
			ratio = 0;
		}
		var j = 0;
		this.exportShape.records.splice(0,this.exportShape.records.length);
		this.exportShape.fillStyles.splice(0,this.exportShape.fillStyles.length);
		this.exportShape.lineStyles.splice(0,this.exportShape.lineStyles.length);
		var numEdges = this.startEdges.records.length;
		var _g1 = 0;
		while(_g1 < numEdges) {
			var startRecord = this.startEdges.records[_g1++];
			var endRecord = this.endEdges.records[j++];
			var exportRecord = null;
			if(startRecord.get_type() == 4 && endRecord.get_type() == 3) {
				endRecord = this.convertToCurvedEdge(js_Boot.__cast(endRecord , format_swf_data_SWFShapeRecordStraightEdge));
			} else if(startRecord.get_type() == 3 && endRecord.get_type() == 4) {
				startRecord = this.convertToCurvedEdge(js_Boot.__cast(startRecord , format_swf_data_SWFShapeRecordStraightEdge));
			}
			switch(startRecord.get_type()) {
			case 1:
				exportRecord = startRecord.clone();
				break;
			case 2:
				var startStyleChange = startRecord.clone();
				startStyleChange.stateMoveTo = true;
				if(endRecord.get_type() == 2) {
					var endStyleChange = endRecord;
					startStyleChange.moveDeltaX += (endStyleChange.moveDeltaX - startStyleChange.moveDeltaX) * ratio | 0;
					startStyleChange.moveDeltaY += (endStyleChange.moveDeltaY - startStyleChange.moveDeltaY) * ratio | 0;
				} else {
					startStyleChange.moveDeltaX += -startStyleChange.moveDeltaX * ratio | 0;
					startStyleChange.moveDeltaY += -startStyleChange.moveDeltaY * ratio | 0;
					--j;
				}
				exportRecord = startStyleChange;
				break;
			case 3:
				var startStraightEdge = startRecord.clone();
				var endStraightEdge = endRecord;
				startStraightEdge.deltaX += (endStraightEdge.deltaX - startStraightEdge.deltaX) * ratio | 0;
				startStraightEdge.deltaY += (endStraightEdge.deltaY - startStraightEdge.deltaY) * ratio | 0;
				if(startStraightEdge.deltaX != 0 && startStraightEdge.deltaY != 0) {
					startStraightEdge.generalLineFlag = true;
					startStraightEdge.vertLineFlag = false;
				} else {
					startStraightEdge.generalLineFlag = false;
					startStraightEdge.vertLineFlag = startStraightEdge.deltaX == 0;
				}
				exportRecord = startStraightEdge;
				break;
			case 4:
				var startCurvedEdge = startRecord.clone();
				var endCurvedEdge = endRecord;
				startCurvedEdge.controlDeltaX += (endCurvedEdge.controlDeltaX - startCurvedEdge.controlDeltaX) * ratio | 0;
				startCurvedEdge.controlDeltaY += (endCurvedEdge.controlDeltaY - startCurvedEdge.controlDeltaY) * ratio | 0;
				startCurvedEdge.anchorDeltaX += (endCurvedEdge.anchorDeltaX - startCurvedEdge.anchorDeltaX) * ratio | 0;
				startCurvedEdge.anchorDeltaY += (endCurvedEdge.anchorDeltaY - startCurvedEdge.anchorDeltaY) * ratio | 0;
				exportRecord = startCurvedEdge;
				break;
			}
			this.exportShape.records.push(exportRecord);
		}
		var _g11 = 0;
		var _g = this.morphFillStyles.length;
		while(_g11 < _g) this.exportShape.fillStyles.push(this.morphFillStyles[_g11++].getMorphedFillStyle(ratio));
		var _g12 = 0;
		var _g2 = this.morphLineStyles.length;
		while(_g12 < _g2) this.exportShape.lineStyles.push(this.morphLineStyles[_g12++].getMorphedLineStyle(ratio));
		this.exportShape["export"](this.exportHandler);
	}
	,convertToCurvedEdge: function(straightEdge) {
		var curvedEdge = new format_swf_data_SWFShapeRecordCurvedEdge();
		curvedEdge.controlDeltaX = straightEdge.deltaX / 2 | 0;
		curvedEdge.controlDeltaY = straightEdge.deltaY / 2 | 0;
		curvedEdge.anchorDeltaX = straightEdge.deltaX / 2 | 0;
		curvedEdge.anchorDeltaY = straightEdge.deltaY / 2 | 0;
		return curvedEdge;
	}
	,toString: function(indent) {
		if(indent == null) {
			indent = 0;
		}
		var indent2 = format_swf_utils_StringUtils.repeat(indent + 2);
		var indent4 = format_swf_utils_StringUtils.repeat(indent + 4);
		var str = format_swf_tags_Tag.toStringCommon(this.type,this.name,indent) + "ID: " + this.characterId;
		str += "\n" + indent2 + "Bounds:";
		str += "\n" + indent4 + "StartBounds: " + this.startBounds.toString();
		str += "\n" + indent4 + "EndBounds: " + this.endBounds.toString();
		if(this.morphFillStyles.length > 0) {
			str += "\n" + indent2 + "FillStyles:";
			var _g1 = 0;
			var _g = this.morphFillStyles.length;
			while(_g1 < _g) {
				var i = _g1++;
				str += "\n" + indent4 + "[" + (i + 1) + "] " + this.morphFillStyles[i].toString();
			}
		}
		if(this.morphLineStyles.length > 0) {
			str += "\n" + indent2 + "LineStyles:";
			var _g11 = 0;
			var _g2 = this.morphLineStyles.length;
			while(_g11 < _g2) {
				var i1 = _g11++;
				str += "\n" + indent4 + "[" + (i1 + 1) + "] " + this.morphLineStyles[i1].toString();
			}
		}
		str += this.startEdges.toString(indent + 2);
		str += this.endEdges.toString(indent + 2);
		return str;
	}
	,__class__: format_swf_tags_TagDefineMorphShape
};
var format_swf_tags_TagDefineMorphShape2 = function() {
	format_swf_tags_TagDefineMorphShape.call(this);
	this.type = 84;
	this.name = "DefineMorphShape2";
	this.version = 8;
	this.level = 2;
};
$hxClasses["format.swf.tags.TagDefineMorphShape2"] = format_swf_tags_TagDefineMorphShape2;
format_swf_tags_TagDefineMorphShape2.__name__ = ["format","swf","tags","TagDefineMorphShape2"];
format_swf_tags_TagDefineMorphShape2.__interfaces__ = [format_swf_tags_ITag];
format_swf_tags_TagDefineMorphShape2.__super__ = format_swf_tags_TagDefineMorphShape;
format_swf_tags_TagDefineMorphShape2.prototype = $extend(format_swf_tags_TagDefineMorphShape.prototype,{
	startEdgeBounds: null
	,endEdgeBounds: null
	,usesNonScalingStrokes: null
	,usesScalingStrokes: null
	,parse: function(data,length,version,async) {
		if(async == null) {
			async = false;
		}
		this.characterId = format_swf__$SWFData_SWFData_$Impl_$.readUI16(data);
		this.startBounds = format_swf__$SWFData_SWFData_$Impl_$.readRECT(data);
		this.endBounds = format_swf__$SWFData_SWFData_$Impl_$.readRECT(data);
		this.startEdgeBounds = format_swf__$SWFData_SWFData_$Impl_$.readRECT(data);
		this.endEdgeBounds = format_swf__$SWFData_SWFData_$Impl_$.readRECT(data);
		var flags = format_swf__$SWFData_SWFData_$Impl_$.readUI8(data);
		this.usesNonScalingStrokes = (flags & 2) != 0;
		this.usesScalingStrokes = (flags & 1) != 0;
		format_swf__$SWFData_SWFData_$Impl_$.readUI32(data);
		var fillStyleCount = format_swf__$SWFData_SWFData_$Impl_$.readUI8(data);
		if(fillStyleCount == 255) {
			fillStyleCount = format_swf__$SWFData_SWFData_$Impl_$.readUI16(data);
		}
		var _g1 = 0;
		var _g = fillStyleCount;
		while(_g1 < _g) {
			++_g1;
			this.morphFillStyles.push(format_swf__$SWFData_SWFData_$Impl_$.readMORPHFILLSTYLE(data));
		}
		var lineStyleCount = format_swf__$SWFData_SWFData_$Impl_$.readUI8(data);
		if(lineStyleCount == 255) {
			lineStyleCount = format_swf__$SWFData_SWFData_$Impl_$.readUI16(data);
		}
		var _g11 = 0;
		var _g2 = lineStyleCount;
		while(_g11 < _g2) {
			++_g11;
			this.morphLineStyles.push(format_swf__$SWFData_SWFData_$Impl_$.readMORPHLINESTYLE2(data));
		}
		this.startEdges = format_swf__$SWFData_SWFData_$Impl_$.readSHAPE(data);
		this.endEdges = format_swf__$SWFData_SWFData_$Impl_$.readSHAPE(data);
	}
	,publish: function(data,version) {
		var body = format_swf__$SWFData_SWFData_$Impl_$._new();
		format_swf__$SWFData_SWFData_$Impl_$.writeUI16(body,this.characterId);
		format_swf__$SWFData_SWFData_$Impl_$.writeRECT(body,this.startBounds);
		format_swf__$SWFData_SWFData_$Impl_$.writeRECT(body,this.endBounds);
		format_swf__$SWFData_SWFData_$Impl_$.writeRECT(body,this.startEdgeBounds);
		format_swf__$SWFData_SWFData_$Impl_$.writeRECT(body,this.endEdgeBounds);
		var flags = 0;
		if(this.usesNonScalingStrokes) {
			flags = 2;
		}
		if(this.usesScalingStrokes) {
			flags |= 1;
		}
		format_swf__$SWFData_SWFData_$Impl_$.writeUI8(body,flags);
		var startBytes = format_swf__$SWFData_SWFData_$Impl_$._new();
		var fillStyleCount = this.morphFillStyles.length;
		if(fillStyleCount > 254) {
			format_swf__$SWFData_SWFData_$Impl_$.writeUI8(startBytes,255);
			format_swf__$SWFData_SWFData_$Impl_$.writeUI16(startBytes,fillStyleCount);
		} else {
			format_swf__$SWFData_SWFData_$Impl_$.writeUI8(startBytes,fillStyleCount);
		}
		var _g1 = 0;
		while(_g1 < fillStyleCount) format_swf__$SWFData_SWFData_$Impl_$.writeMORPHFILLSTYLE(startBytes,this.morphFillStyles[_g1++]);
		var lineStyleCount = this.morphLineStyles.length;
		if(lineStyleCount > 254) {
			format_swf__$SWFData_SWFData_$Impl_$.writeUI8(startBytes,255);
			format_swf__$SWFData_SWFData_$Impl_$.writeUI16(startBytes,lineStyleCount);
		} else {
			format_swf__$SWFData_SWFData_$Impl_$.writeUI8(startBytes,lineStyleCount);
		}
		var _g11 = 0;
		while(_g11 < lineStyleCount) format_swf__$SWFData_SWFData_$Impl_$.writeMORPHLINESTYLE2(startBytes,js_Boot.__cast(this.morphLineStyles[_g11++] , format_swf_data_SWFMorphLineStyle2));
		format_swf__$SWFData_SWFData_$Impl_$.writeSHAPE(startBytes,this.startEdges);
		format_swf__$SWFData_SWFData_$Impl_$.writeUI32(body,format_swf__$SWFData_SWFData_$Impl_$.get_length(startBytes));
		body.writeBytes(openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytes(startBytes));
		format_swf__$SWFData_SWFData_$Impl_$.writeSHAPE(body,this.endEdges);
		format_swf__$SWFData_SWFData_$Impl_$.writeTagHeader(data,this.type,format_swf__$SWFData_SWFData_$Impl_$.get_length(body));
		data.writeBytes(openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytes(body));
	}
	,toString: function(indent) {
		if(indent == null) {
			indent = 0;
		}
		var indent2 = format_swf_utils_StringUtils.repeat(indent + 2);
		var indent4 = format_swf_utils_StringUtils.repeat(indent + 4);
		var str = format_swf_tags_Tag.toStringCommon(this.type,this.name,indent) + "ID: " + this.characterId;
		str += "\n" + indent2 + "Bounds:";
		str += "\n" + indent4 + "StartBounds: " + this.startBounds.toString();
		str += "\n" + indent4 + "EndBounds: " + this.endBounds.toString();
		str += "\n" + indent4 + "StartEdgeBounds: " + this.startEdgeBounds.toString();
		str += "\n" + indent4 + "EndEdgeBounds: " + this.endEdgeBounds.toString();
		if(this.morphFillStyles.length > 0) {
			str += "\n" + indent2 + "FillStyles:";
			var _g1 = 0;
			var _g = this.morphFillStyles.length;
			while(_g1 < _g) {
				var i = _g1++;
				str += "\n" + indent4 + "[" + (i + 1) + "] " + this.morphFillStyles[i].toString();
			}
		}
		if(this.morphLineStyles.length > 0) {
			str += "\n" + indent2 + "LineStyles:";
			var _g11 = 0;
			var _g2 = this.morphLineStyles.length;
			while(_g11 < _g2) {
				var i1 = _g11++;
				str += "\n" + indent4 + "[" + (i1 + 1) + "] " + this.morphLineStyles[i1].toString();
			}
		}
		str += this.startEdges.toString(indent + 2);
		str += this.endEdges.toString(indent + 2);
		return str;
	}
	,__class__: format_swf_tags_TagDefineMorphShape2
});
var format_swf_tags_TagDefineScalingGrid = function() {
	this.type = 78;
	this.name = "DefineScalingGrid";
	this.version = 8;
	this.level = 1;
};
$hxClasses["format.swf.tags.TagDefineScalingGrid"] = format_swf_tags_TagDefineScalingGrid;
format_swf_tags_TagDefineScalingGrid.__name__ = ["format","swf","tags","TagDefineScalingGrid"];
format_swf_tags_TagDefineScalingGrid.__interfaces__ = [format_swf_tags_ITag];
format_swf_tags_TagDefineScalingGrid.prototype = {
	type: null
	,name: null
	,version: null
	,level: null
	,splitter: null
	,characterId: null
	,parse: function(data,length,version,async) {
		if(async == null) {
			async = false;
		}
		this.characterId = format_swf__$SWFData_SWFData_$Impl_$.readUI16(data);
		this.splitter = format_swf__$SWFData_SWFData_$Impl_$.readRECT(data);
	}
	,publish: function(data,version) {
		var body = format_swf__$SWFData_SWFData_$Impl_$._new();
		format_swf__$SWFData_SWFData_$Impl_$.writeUI16(body,this.characterId);
		format_swf__$SWFData_SWFData_$Impl_$.writeRECT(body,this.splitter);
		format_swf__$SWFData_SWFData_$Impl_$.writeTagHeader(data,this.type,format_swf__$SWFData_SWFData_$Impl_$.get_length(body));
		data.writeBytes(openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytes(body));
	}
	,clone: function() {
		var tag = new format_swf_tags_TagDefineScalingGrid();
		tag.characterId = this.characterId;
		tag.splitter = this.splitter.clone();
		return tag;
	}
	,toString: function(indent) {
		if(indent == null) {
			indent = 0;
		}
		return format_swf_tags_Tag.toStringCommon(this.type,this.name,indent) + "CharacterID: " + this.characterId + ", " + "Splitter: " + Std.string(this.splitter);
	}
	,__class__: format_swf_tags_TagDefineScalingGrid
};
var format_swf_tags_TagDefineSceneAndFrameLabelData = function() {
	this.type = 86;
	this.name = "DefineSceneAndFrameLabelData";
	this.version = 9;
	this.level = 1;
	this.scenes = [];
	this.frameLabels = [];
};
$hxClasses["format.swf.tags.TagDefineSceneAndFrameLabelData"] = format_swf_tags_TagDefineSceneAndFrameLabelData;
format_swf_tags_TagDefineSceneAndFrameLabelData.__name__ = ["format","swf","tags","TagDefineSceneAndFrameLabelData"];
format_swf_tags_TagDefineSceneAndFrameLabelData.__interfaces__ = [format_swf_tags_ITag];
format_swf_tags_TagDefineSceneAndFrameLabelData.prototype = {
	type: null
	,name: null
	,version: null
	,level: null
	,scenes: null
	,frameLabels: null
	,parse: function(data,length,version,async) {
		if(async == null) {
			async = false;
		}
		var sceneCount = format_swf__$SWFData_SWFData_$Impl_$.readEncodedU32(data);
		var _g1 = 0;
		while(_g1 < sceneCount) {
			++_g1;
			var sceneOffset = format_swf__$SWFData_SWFData_$Impl_$.readEncodedU32(data);
			var sceneName = format_swf__$SWFData_SWFData_$Impl_$.readSTRING(data);
			this.scenes.push(new format_swf_data_SWFScene(sceneOffset,sceneName));
		}
		var frameLabelCount = format_swf__$SWFData_SWFData_$Impl_$.readEncodedU32(data);
		var _g11 = 0;
		while(_g11 < frameLabelCount) {
			++_g11;
			var frameNumber = format_swf__$SWFData_SWFData_$Impl_$.readEncodedU32(data);
			var frameLabel = format_swf__$SWFData_SWFData_$Impl_$.readSTRING(data);
			this.frameLabels.push(new format_swf_data_SWFFrameLabel(frameNumber,frameLabel));
		}
	}
	,publish: function(data,version) {
		var body = format_swf__$SWFData_SWFData_$Impl_$._new();
		format_swf__$SWFData_SWFData_$Impl_$.writeEncodedU32(body,this.scenes.length);
		var _g1 = 0;
		var _g = this.scenes.length;
		while(_g1 < _g) {
			var scene = this.scenes[_g1++];
			format_swf__$SWFData_SWFData_$Impl_$.writeEncodedU32(body,scene.offset);
			format_swf__$SWFData_SWFData_$Impl_$.writeSTRING(body,scene.name);
		}
		format_swf__$SWFData_SWFData_$Impl_$.writeEncodedU32(body,this.frameLabels.length);
		var _g11 = 0;
		var _g2 = this.frameLabels.length;
		while(_g11 < _g2) {
			var label = this.frameLabels[_g11++];
			format_swf__$SWFData_SWFData_$Impl_$.writeEncodedU32(body,label.frameNumber);
			format_swf__$SWFData_SWFData_$Impl_$.writeSTRING(body,label.name);
		}
		format_swf__$SWFData_SWFData_$Impl_$.writeTagHeader(data,this.type,format_swf__$SWFData_SWFData_$Impl_$.get_length(body));
		data.writeBytes(openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytes(body));
	}
	,toString: function(indent) {
		if(indent == null) {
			indent = 0;
		}
		var str = format_swf_tags_Tag.toStringCommon(this.type,this.name,indent);
		if(this.scenes.length > 0) {
			str += "\n" + format_swf_utils_StringUtils.repeat(indent + 2) + "Scenes:";
			var _g1 = 0;
			var _g = this.scenes.length;
			while(_g1 < _g) {
				var i = _g1++;
				str += "\n" + format_swf_utils_StringUtils.repeat(indent + 4) + "[" + i + "] " + this.scenes[i].toString();
			}
		}
		if(this.frameLabels.length > 0) {
			str += "\n" + format_swf_utils_StringUtils.repeat(indent + 2) + "FrameLabels:";
			var _g11 = 0;
			var _g2 = this.frameLabels.length;
			while(_g11 < _g2) {
				var i1 = _g11++;
				str += "\n" + format_swf_utils_StringUtils.repeat(indent + 4) + "[" + i1 + "] " + this.frameLabels[i1].toString();
			}
		}
		return str;
	}
	,__class__: format_swf_tags_TagDefineSceneAndFrameLabelData
};
var format_swf_tags_TagDefineShape = function() {
	this.type = 2;
	this.name = "DefineShape";
	this.version = 1;
	this.level = 1;
};
$hxClasses["format.swf.tags.TagDefineShape"] = format_swf_tags_TagDefineShape;
format_swf_tags_TagDefineShape.__name__ = ["format","swf","tags","TagDefineShape"];
format_swf_tags_TagDefineShape.__interfaces__ = [format_swf_tags_IDefinitionTag];
format_swf_tags_TagDefineShape.prototype = {
	type: null
	,name: null
	,version: null
	,level: null
	,shapeBounds: null
	,shapes: null
	,characterId: null
	,parse: function(data,length,version,async) {
		if(async == null) {
			async = false;
		}
		this.characterId = format_swf__$SWFData_SWFData_$Impl_$.readUI16(data);
		this.shapeBounds = format_swf__$SWFData_SWFData_$Impl_$.readRECT(data);
		this.shapes = format_swf__$SWFData_SWFData_$Impl_$.readSHAPEWITHSTYLE(data,this.level);
	}
	,publish: function(data,version) {
		var body = format_swf__$SWFData_SWFData_$Impl_$._new();
		format_swf__$SWFData_SWFData_$Impl_$.writeUI16(body,this.characterId);
		format_swf__$SWFData_SWFData_$Impl_$.writeRECT(body,this.shapeBounds);
		format_swf__$SWFData_SWFData_$Impl_$.writeSHAPEWITHSTYLE(body,this.shapes,this.level);
		format_swf__$SWFData_SWFData_$Impl_$.writeTagHeader(data,this.type,format_swf__$SWFData_SWFData_$Impl_$.get_length(body));
		data.writeBytes(openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytes(body));
	}
	,clone: function() {
		throw new js__$Boot_HaxeError(new openfl_errors_Error("Not implemented yet."));
	}
	,'export': function(handler) {
		this.shapes["export"](handler);
	}
	,toString: function(indent) {
		if(indent == null) {
			indent = 0;
		}
		var str = format_swf_tags_Tag.toStringCommon(this.type,this.name,indent) + "ID: " + this.characterId + ", " + "Bounds: " + Std.string(this.shapeBounds);
		str += this.shapes.toString(indent + 2);
		return str;
	}
	,__class__: format_swf_tags_TagDefineShape
};
var format_swf_tags_TagDefineShape2 = function() {
	format_swf_tags_TagDefineShape.call(this);
	this.type = 22;
	this.name = "DefineShape2";
	this.version = 2;
	this.level = 2;
};
$hxClasses["format.swf.tags.TagDefineShape2"] = format_swf_tags_TagDefineShape2;
format_swf_tags_TagDefineShape2.__name__ = ["format","swf","tags","TagDefineShape2"];
format_swf_tags_TagDefineShape2.__interfaces__ = [format_swf_tags_IDefinitionTag];
format_swf_tags_TagDefineShape2.__super__ = format_swf_tags_TagDefineShape;
format_swf_tags_TagDefineShape2.prototype = $extend(format_swf_tags_TagDefineShape.prototype,{
	toString: function(indent) {
		if(indent == null) {
			indent = 0;
		}
		var str = format_swf_tags_Tag.toStringCommon(this.type,this.name,indent) + "ID: " + this.characterId + ", " + "Bounds: " + Std.string(this.shapeBounds);
		str += this.shapes.toString(indent + 2);
		return str;
	}
	,__class__: format_swf_tags_TagDefineShape2
});
var format_swf_tags_TagDefineShape3 = function() {
	format_swf_tags_TagDefineShape2.call(this);
	this.type = 32;
	this.name = "DefineShape3";
	this.version = 3;
	this.level = 3;
};
$hxClasses["format.swf.tags.TagDefineShape3"] = format_swf_tags_TagDefineShape3;
format_swf_tags_TagDefineShape3.__name__ = ["format","swf","tags","TagDefineShape3"];
format_swf_tags_TagDefineShape3.__interfaces__ = [format_swf_tags_IDefinitionTag];
format_swf_tags_TagDefineShape3.__super__ = format_swf_tags_TagDefineShape2;
format_swf_tags_TagDefineShape3.prototype = $extend(format_swf_tags_TagDefineShape2.prototype,{
	toString: function(indent) {
		if(indent == null) {
			indent = 0;
		}
		var str = format_swf_tags_Tag.toStringCommon(this.type,this.name,indent) + "ID: " + this.characterId + ", " + "Bounds: " + Std.string(this.shapeBounds);
		str += this.shapes.toString(indent + 2);
		return str;
	}
	,__class__: format_swf_tags_TagDefineShape3
});
var format_swf_tags_TagDefineShape4 = function() {
	format_swf_tags_TagDefineShape3.call(this);
	this.type = 83;
	this.name = "DefineShape4";
	this.version = 8;
	this.level = 4;
};
$hxClasses["format.swf.tags.TagDefineShape4"] = format_swf_tags_TagDefineShape4;
format_swf_tags_TagDefineShape4.__name__ = ["format","swf","tags","TagDefineShape4"];
format_swf_tags_TagDefineShape4.__interfaces__ = [format_swf_tags_IDefinitionTag];
format_swf_tags_TagDefineShape4.__super__ = format_swf_tags_TagDefineShape3;
format_swf_tags_TagDefineShape4.prototype = $extend(format_swf_tags_TagDefineShape3.prototype,{
	edgeBounds: null
	,usesFillWindingRule: null
	,usesNonScalingStrokes: null
	,usesScalingStrokes: null
	,parse: function(data,length,version,async) {
		if(async == null) {
			async = false;
		}
		this.characterId = format_swf__$SWFData_SWFData_$Impl_$.readUI16(data);
		this.shapeBounds = format_swf__$SWFData_SWFData_$Impl_$.readRECT(data);
		this.edgeBounds = format_swf__$SWFData_SWFData_$Impl_$.readRECT(data);
		var flags = format_swf__$SWFData_SWFData_$Impl_$.readUI8(data);
		this.usesFillWindingRule = (flags & 4) != 0;
		this.usesNonScalingStrokes = (flags & 2) != 0;
		this.usesScalingStrokes = (flags & 1) != 0;
		this.shapes = format_swf__$SWFData_SWFData_$Impl_$.readSHAPEWITHSTYLE(data,this.level);
	}
	,publish: function(data,version) {
		var body = format_swf__$SWFData_SWFData_$Impl_$._new();
		format_swf__$SWFData_SWFData_$Impl_$.writeUI16(body,this.characterId);
		format_swf__$SWFData_SWFData_$Impl_$.writeRECT(body,this.shapeBounds);
		format_swf__$SWFData_SWFData_$Impl_$.writeRECT(body,this.edgeBounds);
		var flags = 0;
		if(this.usesFillWindingRule) {
			flags = 4;
		}
		if(this.usesNonScalingStrokes) {
			flags |= 2;
		}
		if(this.usesScalingStrokes) {
			flags |= 1;
		}
		format_swf__$SWFData_SWFData_$Impl_$.writeUI8(body,flags);
		format_swf__$SWFData_SWFData_$Impl_$.writeSHAPEWITHSTYLE(body,this.shapes,this.level);
		format_swf__$SWFData_SWFData_$Impl_$.writeTagHeader(data,this.type,format_swf__$SWFData_SWFData_$Impl_$.get_length(body));
		data.writeBytes(openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytes(body));
	}
	,toString: function(indent) {
		if(indent == null) {
			indent = 0;
		}
		var str = format_swf_tags_Tag.toStringCommon(this.type,this.name,indent) + "ID: " + this.characterId + ", ";
		if(this.usesFillWindingRule) {
			str += "UsesFillWindingRule, ";
		}
		if(this.usesNonScalingStrokes) {
			str += "UsesNonScalingStrokes, ";
		}
		if(this.usesScalingStrokes) {
			str += "UsesScalingStrokes, ";
		}
		str += "ShapeBounds: " + Std.string(this.shapeBounds) + ", EdgeBounds: " + Std.string(this.edgeBounds);
		str += this.shapes.toString(indent + 2);
		return str;
	}
	,__class__: format_swf_tags_TagDefineShape4
});
var format_swf_tags_TagDefineSound = function() {
	this.type = 14;
	this.name = "DefineSound";
	this.version = 1;
	this.level = 1;
	this.soundData = new openfl_utils_ByteArrayData(0);
};
$hxClasses["format.swf.tags.TagDefineSound"] = format_swf_tags_TagDefineSound;
format_swf_tags_TagDefineSound.__name__ = ["format","swf","tags","TagDefineSound"];
format_swf_tags_TagDefineSound.__interfaces__ = [format_swf_tags_IDefinitionTag];
format_swf_tags_TagDefineSound.create = function(id,soundFormat,rate,size,type,sampleCount,aSoundData) {
	if(sampleCount == null) {
		sampleCount = 0;
	}
	if(type == null) {
		type = 1;
	}
	if(size == null) {
		size = 1;
	}
	if(rate == null) {
		rate = 3;
	}
	if(soundFormat == null) {
		soundFormat = 2;
	}
	var defineSound = new format_swf_tags_TagDefineSound();
	defineSound.characterId = id;
	defineSound.soundFormat = soundFormat;
	defineSound.soundRate = rate;
	defineSound.soundSize = size;
	defineSound.soundType = type;
	defineSound.soundSampleCount = sampleCount;
	if(aSoundData != null && openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(aSoundData) > 0) {
		defineSound.soundData.writeBytes(aSoundData);
	}
	return defineSound;
};
format_swf_tags_TagDefineSound.createWithMP3 = function(id,mp3) {
	if(mp3 != null && openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(mp3) > 0) {
		var defineSound = new format_swf_tags_TagDefineSound();
		defineSound.characterId = id;
		defineSound.processMP3(mp3);
		return defineSound;
	} else {
		throw new js__$Boot_HaxeError(new openfl_errors_Error("No MP3 data."));
	}
};
format_swf_tags_TagDefineSound.prototype = {
	type: null
	,name: null
	,version: null
	,level: null
	,soundFormat: null
	,soundRate: null
	,soundSize: null
	,soundType: null
	,soundSampleCount: null
	,characterId: null
	,soundData: null
	,parse: function(data,length,version,async) {
		if(async == null) {
			async = false;
		}
		this.characterId = format_swf__$SWFData_SWFData_$Impl_$.readUI16(data);
		this.soundFormat = format_swf__$SWFData_SWFData_$Impl_$.readUB(data,4);
		this.soundRate = format_swf__$SWFData_SWFData_$Impl_$.readUB(data,2);
		this.soundSize = format_swf__$SWFData_SWFData_$Impl_$.readUB(data,1);
		this.soundType = format_swf__$SWFData_SWFData_$Impl_$.readUB(data,1);
		this.soundSampleCount = format_swf__$SWFData_SWFData_$Impl_$.readUI32(data);
		data.readBytes(this.soundData,0,length - 7);
	}
	,publish: function(data,version) {
		var body = format_swf__$SWFData_SWFData_$Impl_$._new();
		format_swf__$SWFData_SWFData_$Impl_$.writeUI16(body,this.characterId);
		format_swf__$SWFData_SWFData_$Impl_$.writeUB(body,4,this.soundFormat);
		format_swf__$SWFData_SWFData_$Impl_$.writeUB(body,2,this.soundRate);
		format_swf__$SWFData_SWFData_$Impl_$.writeUB(body,1,this.soundSize);
		format_swf__$SWFData_SWFData_$Impl_$.writeUB(body,1,this.soundType);
		format_swf__$SWFData_SWFData_$Impl_$.writeUI32(body,this.soundSampleCount);
		if(openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(this.soundData) > 0) {
			body.writeBytes(this.soundData);
		}
		format_swf__$SWFData_SWFData_$Impl_$.writeTagHeader(data,this.type,format_swf__$SWFData_SWFData_$Impl_$.get_length(body));
		data.writeBytes(openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytes(body));
	}
	,clone: function() {
		var tag = new format_swf_tags_TagDefineSound();
		tag.characterId = this.characterId;
		tag.soundFormat = this.soundFormat;
		tag.soundRate = this.soundRate;
		tag.soundSize = this.soundSize;
		tag.soundType = this.soundType;
		tag.soundSampleCount = this.soundSampleCount;
		if(openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(this.soundData) > 0) {
			tag.soundData.writeBytes(this.soundData);
		}
		return tag;
	}
	,toString: function(indent) {
		if(indent == null) {
			indent = 0;
		}
		return format_swf_tags_Tag.toStringCommon(this.type,this.name,indent) + "SoundID: " + this.characterId + ", " + "Format: " + format_swf_data_consts_SoundCompression.toString(this.soundFormat) + ", " + "Rate: " + format_swf_data_consts_SoundRate.toString(this.soundRate) + ", " + "Size: " + format_swf_data_consts_SoundSize.toString(this.soundSize) + ", " + "Type: " + format_swf_data_consts_SoundType.toString(this.soundType) + ", " + "Samples: " + this.soundSampleCount;
	}
	,processMP3: function(mp3) {
		var i = 0;
		var beginIdx = 0;
		var endIdx = openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(mp3);
		var samples = 0;
		var firstFrame = true;
		var samplingrate = 0;
		var channelmode = 0;
		var frame = new format_swf_data_etc_MPEGFrame();
		var state = "id3v2";
		while(i < (openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(mp3) | 0)) switch(state) {
		case "frame":
			frame.setHeaderByteAt(0,mp3.b[i++]);
			frame.setHeaderByteAt(1,mp3.b[i++]);
			frame.setHeaderByteAt(2,mp3.b[i++]);
			frame.setHeaderByteAt(3,mp3.b[i++]);
			if(frame.hasCRC) {
				frame.setCRCByteAt(0,mp3.b[i++]);
				frame.setCRCByteAt(1,mp3.b[i++]);
			}
			if(firstFrame) {
				firstFrame = false;
				samplingrate = frame.samplingrate;
				channelmode = frame.channelMode;
			}
			samples += frame.samples;
			i += frame.get_size();
			state = "sync";
			break;
		case "id3v2":
			if(mp3.b[i] == 73 && mp3.b[i + 1] == 68 && mp3.b[i + 2] == 51) {
				i += 10 + (mp3.b[i + 6] << 21 | mp3.b[i + 7] << 14 | mp3.b[i + 8] << 7 | mp3.b[i + 9]);
			}
			beginIdx = i;
			state = "sync";
			break;
		case "sync":
			if(mp3.b[i] == 255 && (mp3.b[i + 1] & 224) == 224) {
				state = "frame";
			} else if(mp3.b[i] == 84 && mp3.b[i + 1] == 65 && mp3.b[i + 2] == 71) {
				endIdx = i;
				i = openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(mp3);
			} else {
				++i;
			}
			break;
		}
		this.soundSampleCount = samples;
		this.soundFormat = 2;
		this.soundSize = 1;
		this.soundType = channelmode == 3 ? 0 : 1;
		switch(samplingrate) {
		case 11025:
			this.soundRate = 1;
			break;
		case 22050:
			this.soundRate = 2;
			break;
		case 44100:
			this.soundRate = 3;
			break;
		default:
			throw new js__$Boot_HaxeError(new openfl_errors_Error("Unsupported sampling rate: " + samplingrate + " Hz"));
		}
		this.soundData = new openfl_utils_ByteArrayData(0);
		this.soundData.writeShort(0);
		this.soundData.writeBytes(mp3,beginIdx,endIdx - beginIdx);
	}
	,__class__: format_swf_tags_TagDefineSound
};
var format_swf_tags_TagDefineSprite = function() {
	format_swf_SWFTimelineContainer.call(this);
	this.type = 39;
	this.name = "DefineSprite";
	this.version = 3;
	this.level = 1;
};
$hxClasses["format.swf.tags.TagDefineSprite"] = format_swf_tags_TagDefineSprite;
format_swf_tags_TagDefineSprite.__name__ = ["format","swf","tags","TagDefineSprite"];
format_swf_tags_TagDefineSprite.__interfaces__ = [format_swf_tags_IDefinitionTag];
format_swf_tags_TagDefineSprite.__super__ = format_swf_SWFTimelineContainer;
format_swf_tags_TagDefineSprite.prototype = $extend(format_swf_SWFTimelineContainer.prototype,{
	type: null
	,name: null
	,version: null
	,level: null
	,frameCount: null
	,characterId: null
	,parse: function(data,length,version,async) {
		if(async == null) {
			async = false;
		}
		this.characterId = format_swf__$SWFData_SWFData_$Impl_$.readUI16(data);
		this.frameCount = format_swf__$SWFData_SWFData_$Impl_$.readUI16(data);
		this.parseTags(data,version);
	}
	,publish: function(data,version) {
		var body = format_swf__$SWFData_SWFData_$Impl_$._new();
		format_swf__$SWFData_SWFData_$Impl_$.writeUI16(body,this.characterId);
		format_swf__$SWFData_SWFData_$Impl_$.writeUI16(body,this.frameCount);
		this.publishTags(body,version);
		format_swf__$SWFData_SWFData_$Impl_$.writeTagHeader(data,this.type,format_swf__$SWFData_SWFData_$Impl_$.get_length(body));
		data.writeBytes(openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytes(body));
	}
	,clone: function() {
		new format_swf_tags_TagDefineSprite();
		throw new js__$Boot_HaxeError(new openfl_errors_Error("Not implemented yet."));
	}
	,toString: function(indent) {
		if(indent == null) {
			indent = 0;
		}
		return format_swf_tags_Tag.toStringCommon(this.type,this.name,indent) + "ID: " + this.characterId + ", " + "FrameCount: " + this.frameCount + format_swf_SWFTimelineContainer.prototype.toString.call(this,indent);
	}
	,__class__: format_swf_tags_TagDefineSprite
});
var format_swf_tags_TagDefineText = function() {
	this.type = 11;
	this.name = "DefineText";
	this.version = 1;
	this.level = 1;
	this.records = [];
};
$hxClasses["format.swf.tags.TagDefineText"] = format_swf_tags_TagDefineText;
format_swf_tags_TagDefineText.__name__ = ["format","swf","tags","TagDefineText"];
format_swf_tags_TagDefineText.__interfaces__ = [format_swf_tags_IDefinitionTag];
format_swf_tags_TagDefineText.prototype = {
	type: null
	,name: null
	,version: null
	,level: null
	,textBounds: null
	,textMatrix: null
	,characterId: null
	,records: null
	,parse: function(data,length,version,async) {
		if(async == null) {
			async = false;
		}
		this.characterId = format_swf__$SWFData_SWFData_$Impl_$.readUI16(data);
		this.textBounds = format_swf__$SWFData_SWFData_$Impl_$.readRECT(data);
		this.textMatrix = format_swf__$SWFData_SWFData_$Impl_$.readMATRIX(data);
		var glyphBits = format_swf__$SWFData_SWFData_$Impl_$.readUI8(data);
		var advanceBits = format_swf__$SWFData_SWFData_$Impl_$.readUI8(data);
		var record = null;
		while(true) {
			record = format_swf__$SWFData_SWFData_$Impl_$.readTEXTRECORD(data,glyphBits,advanceBits,record,this.level);
			if(!(record != null)) {
				break;
			}
			this.records.push(record);
		}
	}
	,publish: function(data,version) {
		var body = format_swf__$SWFData_SWFData_$Impl_$._new();
		var record;
		format_swf__$SWFData_SWFData_$Impl_$.writeUI16(body,this.characterId);
		format_swf__$SWFData_SWFData_$Impl_$.writeRECT(body,this.textBounds);
		format_swf__$SWFData_SWFData_$Impl_$.writeMATRIX(body,this.textMatrix);
		var glyphBitsValues = [];
		var advanceBitsValues = [];
		var recordsLen = this.records.length;
		var _g1 = 0;
		while(_g1 < recordsLen) {
			record = this.records[_g1++];
			var glyphCount = record.glyphEntries.length;
			var _g3 = 0;
			while(_g3 < glyphCount) {
				var glyphEntry = record.glyphEntries[_g3++];
				glyphBitsValues.push(glyphEntry.index);
				advanceBitsValues.push(glyphEntry.advance);
			}
		}
		var glyphBits = body.calculateMaxBits(false,glyphBitsValues);
		var advanceBits = body.calculateMaxBits(true,advanceBitsValues);
		format_swf__$SWFData_SWFData_$Impl_$.writeUI8(body,glyphBits);
		format_swf__$SWFData_SWFData_$Impl_$.writeUI8(body,advanceBits);
		record = null;
		var _g11 = 0;
		while(_g11 < recordsLen) {
			var i = _g11++;
			format_swf__$SWFData_SWFData_$Impl_$.writeTEXTRECORD(body,this.records[i],glyphBits,advanceBits,record,this.level);
			record = this.records[i];
		}
		format_swf__$SWFData_SWFData_$Impl_$.writeUI8(body,0);
		format_swf__$SWFData_SWFData_$Impl_$.writeTagHeader(data,this.type,format_swf__$SWFData_SWFData_$Impl_$.get_length(body));
		data.writeBytes(openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytes(body));
	}
	,clone: function() {
		var tag = new format_swf_tags_TagDefineText();
		tag.characterId = this.characterId;
		tag.textBounds = this.textBounds.clone();
		tag.textMatrix = this.textMatrix.clone();
		var _g1 = 0;
		var _g = this.records.length;
		while(_g1 < _g) tag.records.push(this.records[_g1++].clone());
		return tag;
	}
	,toString: function(indent) {
		if(indent == null) {
			indent = 0;
		}
		var str = format_swf_tags_Tag.toStringCommon(this.type,this.name,indent) + "ID: " + this.characterId + ", " + "Bounds: " + Std.string(this.textBounds) + ", " + "Matrix: " + Std.string(this.textMatrix);
		if(this.records.length > 0) {
			str += "\n" + format_swf_utils_StringUtils.repeat(indent + 2) + "TextRecords:";
			var _g1 = 0;
			var _g = this.records.length;
			while(_g1 < _g) {
				var i = _g1++;
				str += "\n" + format_swf_utils_StringUtils.repeat(indent + 4) + "[" + i + "] " + this.records[i].toString(indent + 4);
			}
		}
		return str;
	}
	,__class__: format_swf_tags_TagDefineText
};
var format_swf_tags_TagDefineText2 = function() {
	format_swf_tags_TagDefineText.call(this);
	this.type = 33;
	this.name = "DefineText2";
	this.version = 3;
	this.level = 2;
};
$hxClasses["format.swf.tags.TagDefineText2"] = format_swf_tags_TagDefineText2;
format_swf_tags_TagDefineText2.__name__ = ["format","swf","tags","TagDefineText2"];
format_swf_tags_TagDefineText2.__interfaces__ = [format_swf_tags_IDefinitionTag];
format_swf_tags_TagDefineText2.__super__ = format_swf_tags_TagDefineText;
format_swf_tags_TagDefineText2.prototype = $extend(format_swf_tags_TagDefineText.prototype,{
	toString: function(indent) {
		if(indent == null) {
			indent = 0;
		}
		var str = format_swf_tags_Tag.toStringCommon(this.type,this.name,indent) + "ID: " + this.characterId + ", " + "Bounds: " + Std.string(this.textBounds) + ", " + "Matrix: " + Std.string(this.textMatrix);
		if(this.records.length > 0) {
			str += "\n" + format_swf_utils_StringUtils.repeat(indent + 2) + "TextRecords:";
			var _g1 = 0;
			var _g = this.records.length;
			while(_g1 < _g) {
				var i = _g1++;
				str += "\n" + format_swf_utils_StringUtils.repeat(indent + 4) + "[" + i + "] " + this.records[i].toString();
			}
		}
		return str;
	}
	,__class__: format_swf_tags_TagDefineText2
});
var format_swf_tags_TagDefineVideoStream = function() {
	this.type = 60;
	this.name = "DefineVideoStream";
	this.version = 6;
	this.level = 1;
};
$hxClasses["format.swf.tags.TagDefineVideoStream"] = format_swf_tags_TagDefineVideoStream;
format_swf_tags_TagDefineVideoStream.__name__ = ["format","swf","tags","TagDefineVideoStream"];
format_swf_tags_TagDefineVideoStream.__interfaces__ = [format_swf_tags_IDefinitionTag];
format_swf_tags_TagDefineVideoStream.prototype = {
	type: null
	,name: null
	,version: null
	,level: null
	,numFrames: null
	,width: null
	,height: null
	,deblocking: null
	,smoothing: null
	,codecId: null
	,characterId: null
	,parse: function(data,length,version,async) {
		if(async == null) {
			async = false;
		}
		this.characterId = format_swf__$SWFData_SWFData_$Impl_$.readUI16(data);
		this.numFrames = format_swf__$SWFData_SWFData_$Impl_$.readUI16(data);
		this.width = format_swf__$SWFData_SWFData_$Impl_$.readUI16(data);
		this.height = format_swf__$SWFData_SWFData_$Impl_$.readUI16(data);
		format_swf__$SWFData_SWFData_$Impl_$.readUB(data,4);
		this.deblocking = format_swf__$SWFData_SWFData_$Impl_$.readUB(data,3);
		this.smoothing = format_swf__$SWFData_SWFData_$Impl_$.readUB(data,1) == 1;
		this.codecId = format_swf__$SWFData_SWFData_$Impl_$.readUI8(data);
	}
	,publish: function(data,version) {
		format_swf__$SWFData_SWFData_$Impl_$.writeTagHeader(data,this.type,10);
		format_swf__$SWFData_SWFData_$Impl_$.writeUI16(data,this.characterId);
		format_swf__$SWFData_SWFData_$Impl_$.writeUI16(data,this.numFrames);
		format_swf__$SWFData_SWFData_$Impl_$.writeUI16(data,this.width);
		format_swf__$SWFData_SWFData_$Impl_$.writeUI16(data,this.height);
		format_swf__$SWFData_SWFData_$Impl_$.writeUB(data,4,0);
		format_swf__$SWFData_SWFData_$Impl_$.writeUB(data,3,this.deblocking);
		format_swf__$SWFData_SWFData_$Impl_$.writeUB(data,1,this.smoothing ? 1 : 0);
		format_swf__$SWFData_SWFData_$Impl_$.writeUI8(data,this.codecId);
	}
	,clone: function() {
		var tag = new format_swf_tags_TagDefineVideoStream();
		tag.characterId = this.characterId;
		tag.numFrames = this.numFrames;
		tag.width = this.width;
		tag.height = this.height;
		tag.deblocking = this.deblocking;
		tag.smoothing = this.smoothing;
		tag.codecId = this.codecId;
		return tag;
	}
	,toString: function(indent) {
		if(indent == null) {
			indent = 0;
		}
		return format_swf_tags_Tag.toStringCommon(this.type,this.name,indent) + "ID: " + this.characterId + ", " + "Frames: " + this.numFrames + ", " + "Width: " + this.width + ", " + "Height: " + this.height + ", " + "Deblocking: " + format_swf_data_consts_VideoDeblockingType.toString(this.deblocking) + ", " + "Smoothing: " + Std.string(this.smoothing) + ", " + "Codec: " + format_swf_data_consts_VideoCodecID.toString(this.codecId);
	}
	,__class__: format_swf_tags_TagDefineVideoStream
};
var format_swf_tags_TagDoABC = function() {
	this.abcName = "";
	this.type = 82;
	this.name = "DoABC";
	this.version = 9;
	this.level = 1;
	this.bytes = new openfl_utils_ByteArrayData(0);
};
$hxClasses["format.swf.tags.TagDoABC"] = format_swf_tags_TagDoABC;
format_swf_tags_TagDoABC.__name__ = ["format","swf","tags","TagDoABC"];
format_swf_tags_TagDoABC.__interfaces__ = [format_swf_tags_ITag];
format_swf_tags_TagDoABC.create = function(abcData,aName,aLazyInitializeFlag) {
	if(aLazyInitializeFlag == null) {
		aLazyInitializeFlag = true;
	}
	if(aName == null) {
		aName = "";
	}
	var doABC = new format_swf_tags_TagDoABC();
	if(abcData != null && openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(abcData) > 0) {
		doABC.bytes.writeBytes(abcData);
	}
	doABC.abcName = aName;
	doABC.lazyInitializeFlag = aLazyInitializeFlag;
	return doABC;
};
format_swf_tags_TagDoABC.prototype = {
	type: null
	,name: null
	,version: null
	,level: null
	,lazyInitializeFlag: null
	,abcName: null
	,bytes: null
	,parse: function(data,length,version,async) {
		if(async == null) {
			async = false;
		}
		var pos = data.position;
		this.lazyInitializeFlag = (format_swf__$SWFData_SWFData_$Impl_$.readUI32(data) & 1) != 0;
		this.abcName = format_swf__$SWFData_SWFData_$Impl_$.readSTRING(data);
		data.readBytes(this.bytes,0,length - (data.position - pos));
	}
	,publish: function(data,version) {
		var body = format_swf__$SWFData_SWFData_$Impl_$._new();
		format_swf__$SWFData_SWFData_$Impl_$.writeUI32(body,this.lazyInitializeFlag ? 1 : 0);
		format_swf__$SWFData_SWFData_$Impl_$.writeSTRING(body,this.abcName);
		if(openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(this.bytes) > 0) {
			body.writeBytes(this.bytes);
		}
		format_swf__$SWFData_SWFData_$Impl_$.writeTagHeader(data,this.type,format_swf__$SWFData_SWFData_$Impl_$.get_length(body));
		data.writeBytes(openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytes(body));
	}
	,toString: function(indent) {
		if(indent == null) {
			indent = 0;
		}
		return format_swf_tags_Tag.toStringCommon(this.type,this.name,indent) + "Lazy: " + Std.string(this.lazyInitializeFlag) + ", " + (this.abcName.length > 0 ? "Name: " + this.abcName + ", " : "") + "Length: " + openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(this.bytes);
	}
	,__class__: format_swf_tags_TagDoABC
};
var format_swf_tags_TagDoABCDeprecated = function() {
	this.type = 72;
	this.name = "DoABCDeprecated";
	this.version = 9;
	this.level = 1;
	this.bytes = new openfl_utils_ByteArrayData(0);
};
$hxClasses["format.swf.tags.TagDoABCDeprecated"] = format_swf_tags_TagDoABCDeprecated;
format_swf_tags_TagDoABCDeprecated.__name__ = ["format","swf","tags","TagDoABCDeprecated"];
format_swf_tags_TagDoABCDeprecated.__interfaces__ = [format_swf_tags_ITag];
format_swf_tags_TagDoABCDeprecated.create = function(abcData) {
	var doABC = new format_swf_tags_TagDoABCDeprecated();
	if(abcData != null && openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(abcData) > 0) {
		doABC.bytes.writeBytes(abcData);
	}
	return doABC;
};
format_swf_tags_TagDoABCDeprecated.prototype = {
	type: null
	,name: null
	,version: null
	,level: null
	,bytes: null
	,parse: function(data,length,version,async) {
		if(async == null) {
			async = false;
		}
		data.readBytes(this.bytes,0,length - (data.position - data.position));
	}
	,publish: function(data,version) {
		var body = format_swf__$SWFData_SWFData_$Impl_$._new();
		if(openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(this.bytes) > 0) {
			body.writeBytes(this.bytes);
		}
		format_swf__$SWFData_SWFData_$Impl_$.writeTagHeader(data,this.type,format_swf__$SWFData_SWFData_$Impl_$.get_length(body));
		data.writeBytes(openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytes(body));
	}
	,toString: function(indent) {
		if(indent == null) {
			indent = 0;
		}
		return format_swf_tags_Tag.toStringCommon(this.type,this.name,indent) + "Length: " + openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(this.bytes);
	}
	,__class__: format_swf_tags_TagDoABCDeprecated
};
var format_swf_tags_TagDoAction = function() {
	this.type = 12;
	this.name = "DoAction";
	this.version = 3;
	this.level = 1;
	this.actions = [];
};
$hxClasses["format.swf.tags.TagDoAction"] = format_swf_tags_TagDoAction;
format_swf_tags_TagDoAction.__name__ = ["format","swf","tags","TagDoAction"];
format_swf_tags_TagDoAction.__interfaces__ = [format_swf_tags_ITag];
format_swf_tags_TagDoAction.prototype = {
	type: null
	,name: null
	,version: null
	,level: null
	,actions: null
	,parse: function(data,length,version,async) {
		if(async == null) {
			async = false;
		}
		var action;
		while(true) {
			action = format_swf__$SWFData_SWFData_$Impl_$.readACTIONRECORD(data);
			if(!(action != null)) {
				break;
			}
			this.actions.push(action);
		}
	}
	,publish: function(data,version) {
		var body = format_swf__$SWFData_SWFData_$Impl_$._new();
		var _g1 = 0;
		var _g = this.actions.length;
		while(_g1 < _g) format_swf__$SWFData_SWFData_$Impl_$.writeACTIONRECORD(body,this.actions[_g1++]);
		format_swf__$SWFData_SWFData_$Impl_$.writeUI8(body,0);
		format_swf__$SWFData_SWFData_$Impl_$.writeTagHeader(data,this.type,format_swf__$SWFData_SWFData_$Impl_$.get_length(body));
		data.writeBytes(openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytes(body));
	}
	,toString: function(indent) {
		if(indent == null) {
			indent = 0;
		}
		var str = format_swf_tags_Tag.toStringCommon(this.type,this.name,indent);
		var _g1 = 0;
		var _g = this.actions.length;
		while(_g1 < _g) {
			var i = _g1++;
			str += "\n" + format_swf_utils_StringUtils.repeat(indent + 2) + "[" + i + "] " + this.actions[i].toString(indent + 2);
		}
		return str;
	}
	,__class__: format_swf_tags_TagDoAction
};
var format_swf_tags_TagDoInitAction = function() {
	format_swf_tags_TagDoAction.call(this);
	this.type = 59;
	this.name = "DoInitAction";
	this.version = 6;
	this.level = 1;
};
$hxClasses["format.swf.tags.TagDoInitAction"] = format_swf_tags_TagDoInitAction;
format_swf_tags_TagDoInitAction.__name__ = ["format","swf","tags","TagDoInitAction"];
format_swf_tags_TagDoInitAction.__interfaces__ = [format_swf_tags_ITag];
format_swf_tags_TagDoInitAction.__super__ = format_swf_tags_TagDoAction;
format_swf_tags_TagDoInitAction.prototype = $extend(format_swf_tags_TagDoAction.prototype,{
	spriteId: null
	,parse: function(data,length,version,async) {
		if(async == null) {
			async = false;
		}
		this.spriteId = format_swf__$SWFData_SWFData_$Impl_$.readUI16(data);
		var action;
		while(true) {
			action = format_swf__$SWFData_SWFData_$Impl_$.readACTIONRECORD(data);
			if(!(action != null)) {
				break;
			}
			this.actions.push(action);
		}
	}
	,publish: function(data,version) {
		var body = format_swf__$SWFData_SWFData_$Impl_$._new();
		format_swf__$SWFData_SWFData_$Impl_$.writeUI16(body,this.spriteId);
		var _g1 = 0;
		var _g = this.actions.length;
		while(_g1 < _g) format_swf__$SWFData_SWFData_$Impl_$.writeACTIONRECORD(body,this.actions[_g1++]);
		format_swf__$SWFData_SWFData_$Impl_$.writeUI8(body,0);
		format_swf__$SWFData_SWFData_$Impl_$.writeTagHeader(data,this.type,format_swf__$SWFData_SWFData_$Impl_$.get_length(body));
		data.writeBytes(openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytes(body));
	}
	,toString: function(indent) {
		if(indent == null) {
			indent = 0;
		}
		var str = format_swf_tags_Tag.toStringCommon(this.type,this.name,indent) + "SpriteID: " + this.spriteId + ", ";
		var _g1 = 0;
		var _g = this.actions.length;
		while(_g1 < _g) {
			var i = _g1++;
			str += "\n" + format_swf_utils_StringUtils.repeat(indent + 2) + "[" + i + "] " + this.actions[i].toString(indent + 2);
		}
		return str;
	}
	,__class__: format_swf_tags_TagDoInitAction
});
var format_swf_tags_TagEnableDebugger = function() {
	this.type = 58;
	this.name = "EnableDebugger";
	this.version = 5;
	this.level = 1;
	this.password = new openfl_utils_ByteArrayData(0);
};
$hxClasses["format.swf.tags.TagEnableDebugger"] = format_swf_tags_TagEnableDebugger;
format_swf_tags_TagEnableDebugger.__name__ = ["format","swf","tags","TagEnableDebugger"];
format_swf_tags_TagEnableDebugger.__interfaces__ = [format_swf_tags_ITag];
format_swf_tags_TagEnableDebugger.prototype = {
	type: null
	,name: null
	,version: null
	,level: null
	,password: null
	,parse: function(data,length,version,async) {
		if(async == null) {
			async = false;
		}
		if(length > 0) {
			data.readBytes(this.password,0,length);
		}
	}
	,publish: function(data,version) {
		format_swf__$SWFData_SWFData_$Impl_$.writeTagHeader(data,this.type,openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(this.password));
		if(openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(this.password) > 0) {
			data.writeBytes(this.password);
		}
	}
	,toString: function(indent) {
		if(indent == null) {
			indent = 0;
		}
		return format_swf_tags_Tag.toStringCommon(this.type,this.name,indent);
	}
	,__class__: format_swf_tags_TagEnableDebugger
};
var format_swf_tags_TagEnableDebugger2 = function() {
	format_swf_tags_TagEnableDebugger.call(this);
	this.reserved = 0;
	this.type = 64;
	this.name = "EnableDebugger2";
	this.version = 6;
	this.level = 2;
};
$hxClasses["format.swf.tags.TagEnableDebugger2"] = format_swf_tags_TagEnableDebugger2;
format_swf_tags_TagEnableDebugger2.__name__ = ["format","swf","tags","TagEnableDebugger2"];
format_swf_tags_TagEnableDebugger2.__interfaces__ = [format_swf_tags_ITag];
format_swf_tags_TagEnableDebugger2.__super__ = format_swf_tags_TagEnableDebugger;
format_swf_tags_TagEnableDebugger2.prototype = $extend(format_swf_tags_TagEnableDebugger.prototype,{
	reserved: null
	,parse: function(data,length,version,async) {
		if(async == null) {
			async = false;
		}
		this.reserved = format_swf__$SWFData_SWFData_$Impl_$.readUI16(data);
		if(length > 2) {
			data.readBytes(this.password,0,length - 2);
		}
	}
	,publish: function(data,version) {
		format_swf__$SWFData_SWFData_$Impl_$.writeTagHeader(data,this.type,openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(this.password) + 2);
		format_swf__$SWFData_SWFData_$Impl_$.writeUI16(data,this.reserved);
		if(openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(this.password) > 0) {
			data.writeBytes(this.password);
		}
	}
	,toString: function(indent) {
		if(indent == null) {
			indent = 0;
		}
		return format_swf_tags_Tag.toStringCommon(this.type,this.name,indent) + "Password: " + (openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(this.password) > 0 ? "null" : this.password.readUTF()) + ", " + "Reserved: 0x" + StringTools.hex(this.reserved);
	}
	,__class__: format_swf_tags_TagEnableDebugger2
});
var format_swf_tags_TagEnableTelemetry = function() {
	this.level = 1;
	this.version = 19;
	this.name = "EnableTelemetry";
	this.type = 93;
	this.password = new openfl_utils_ByteArrayData(0);
};
$hxClasses["format.swf.tags.TagEnableTelemetry"] = format_swf_tags_TagEnableTelemetry;
format_swf_tags_TagEnableTelemetry.__name__ = ["format","swf","tags","TagEnableTelemetry"];
format_swf_tags_TagEnableTelemetry.__interfaces__ = [format_swf_tags_ITag];
format_swf_tags_TagEnableTelemetry.prototype = {
	password: null
	,type: null
	,name: null
	,version: null
	,level: null
	,parse: function(data,length,version,async) {
		if(async == null) {
			async = false;
		}
		if(length > 2) {
			data.readByte();
			data.readByte();
			data.readBytes(this.password,0,length - 2);
		}
	}
	,publish: function(data,version) {
		format_swf__$SWFData_SWFData_$Impl_$.writeTagHeader(data,this.type,openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(this.password) + 2);
		data.writeByte(0);
		data.writeByte(0);
		if(openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(this.password) > 0) {
			data.writeBytes(this.password);
		}
	}
	,toString: function(indent) {
		if(indent == null) {
			indent = 0;
		}
		return format_swf_tags_Tag.toStringCommon(this.type,this.name,indent);
	}
	,__class__: format_swf_tags_TagEnableTelemetry
};
var format_swf_tags_TagEnd = function() {
	this.type = 0;
	this.name = "End";
	this.version = 1;
	this.level = 1;
};
$hxClasses["format.swf.tags.TagEnd"] = format_swf_tags_TagEnd;
format_swf_tags_TagEnd.__name__ = ["format","swf","tags","TagEnd"];
format_swf_tags_TagEnd.__interfaces__ = [format_swf_tags_ITag];
format_swf_tags_TagEnd.prototype = {
	type: null
	,name: null
	,version: null
	,level: null
	,parse: function(data,length,version,async) {
		if(async == null) {
			async = false;
		}
	}
	,publish: function(data,version) {
		format_swf__$SWFData_SWFData_$Impl_$.writeTagHeader(data,this.type,0);
	}
	,toString: function(indent) {
		if(indent == null) {
			indent = 0;
		}
		return format_swf_tags_Tag.toStringCommon(this.type,this.name,indent);
	}
	,__class__: format_swf_tags_TagEnd
};
var format_swf_tags_TagExportAssets = function() {
	this.type = 56;
	this.name = "ExportAssets";
	this.version = 5;
	this.level = 1;
	this.symbols = [];
};
$hxClasses["format.swf.tags.TagExportAssets"] = format_swf_tags_TagExportAssets;
format_swf_tags_TagExportAssets.__name__ = ["format","swf","tags","TagExportAssets"];
format_swf_tags_TagExportAssets.__interfaces__ = [format_swf_tags_ITag];
format_swf_tags_TagExportAssets.prototype = {
	type: null
	,name: null
	,version: null
	,level: null
	,symbols: null
	,parse: function(data,length,version,async) {
		if(async == null) {
			async = false;
		}
		var numSymbols = format_swf__$SWFData_SWFData_$Impl_$.readUI16(data);
		var _g1 = 0;
		while(_g1 < numSymbols) {
			++_g1;
			this.symbols.push(format_swf__$SWFData_SWFData_$Impl_$.readSYMBOL(data));
		}
	}
	,publish: function(data,version) {
		var body = format_swf__$SWFData_SWFData_$Impl_$._new();
		var numSymbols = this.symbols.length;
		format_swf__$SWFData_SWFData_$Impl_$.writeUI16(body,numSymbols);
		var _g1 = 0;
		while(_g1 < numSymbols) format_swf__$SWFData_SWFData_$Impl_$.writeSYMBOL(body,this.symbols[_g1++]);
		format_swf__$SWFData_SWFData_$Impl_$.writeTagHeader(data,this.type,format_swf__$SWFData_SWFData_$Impl_$.get_length(body));
		data.writeBytes(openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytes(body));
	}
	,toString: function(indent) {
		if(indent == null) {
			indent = 0;
		}
		var str = format_swf_tags_Tag.toStringCommon(this.type,this.name,indent);
		if(this.symbols.length > 0) {
			str += "\n" + format_swf_utils_StringUtils.repeat(indent + 2) + "Assets:";
			var _g1 = 0;
			var _g = this.symbols.length;
			while(_g1 < _g) {
				var i = _g1++;
				str += "\n" + format_swf_utils_StringUtils.repeat(indent + 4) + "[" + i + "] " + this.symbols[i].toString();
			}
		}
		return str;
	}
	,__class__: format_swf_tags_TagExportAssets
};
var format_swf_tags_TagFileAttributes = function() {
	this.useNetwork = false;
	this.actionscript3 = true;
	this.hasMetadata = false;
	this.useGPU = false;
	this.useDirectBlit = false;
	this.type = 69;
	this.name = "FileAttributes";
	this.version = 8;
	this.level = 1;
};
$hxClasses["format.swf.tags.TagFileAttributes"] = format_swf_tags_TagFileAttributes;
format_swf_tags_TagFileAttributes.__name__ = ["format","swf","tags","TagFileAttributes"];
format_swf_tags_TagFileAttributes.__interfaces__ = [format_swf_tags_ITag];
format_swf_tags_TagFileAttributes.prototype = {
	type: null
	,name: null
	,version: null
	,level: null
	,useDirectBlit: null
	,useGPU: null
	,hasMetadata: null
	,actionscript3: null
	,useNetwork: null
	,parse: function(data,length,version,async) {
		if(async == null) {
			async = false;
		}
		var flags = format_swf__$SWFData_SWFData_$Impl_$.readUI8(data);
		this.useDirectBlit = (flags & 64) != 0;
		this.useGPU = (flags & 32) != 0;
		this.hasMetadata = (flags & 16) != 0;
		this.actionscript3 = (flags & 8) != 0;
		this.useNetwork = (flags & 1) != 0;
		format_swf__$SWFData_SWFData_$Impl_$.skipBytes(data,3);
	}
	,publish: function(data,version) {
		format_swf__$SWFData_SWFData_$Impl_$.writeTagHeader(data,this.type,4);
		var flags = 0;
		if(this.useNetwork) {
			flags = 1;
		}
		if(this.actionscript3) {
			flags |= 8;
		}
		if(this.hasMetadata) {
			flags |= 16;
		}
		if(this.useGPU) {
			flags |= 32;
		}
		if(this.useDirectBlit) {
			flags |= 64;
		}
		format_swf__$SWFData_SWFData_$Impl_$.writeUI8(data,flags);
		format_swf__$SWFData_SWFData_$Impl_$.writeUI8(data,0);
		format_swf__$SWFData_SWFData_$Impl_$.writeUI8(data,0);
		format_swf__$SWFData_SWFData_$Impl_$.writeUI8(data,0);
	}
	,toString: function(indent) {
		if(indent == null) {
			indent = 0;
		}
		return format_swf_tags_Tag.toStringCommon(this.type,this.name,indent) + "AS3: " + Std.string(this.actionscript3) + ", " + "HasMetadata: " + Std.string(this.hasMetadata) + ", " + "UseDirectBlit: " + Std.string(this.useDirectBlit) + ", " + "UseGPU: " + Std.string(this.useGPU) + ", " + "UseNetwork: " + Std.string(this.useNetwork);
	}
	,__class__: format_swf_tags_TagFileAttributes
};
var format_swf_tags_TagFrameLabel = function() {
	this.type = 43;
	this.name = "FrameLabel";
	this.version = 3;
	this.level = 1;
};
$hxClasses["format.swf.tags.TagFrameLabel"] = format_swf_tags_TagFrameLabel;
format_swf_tags_TagFrameLabel.__name__ = ["format","swf","tags","TagFrameLabel"];
format_swf_tags_TagFrameLabel.__interfaces__ = [format_swf_tags_ITag];
format_swf_tags_TagFrameLabel.prototype = {
	type: null
	,name: null
	,version: null
	,level: null
	,frameName: null
	,namedAnchorFlag: null
	,parse: function(data,length,version,async) {
		if(async == null) {
			async = false;
		}
		var start = data.position;
		this.frameName = format_swf__$SWFData_SWFData_$Impl_$.readSTRING(data);
		if((data.position | 0) - start < length) {
			format_swf__$SWFData_SWFData_$Impl_$.readUI8(data);
			this.namedAnchorFlag = true;
		}
	}
	,publish: function(data,version) {
		var body = format_swf__$SWFData_SWFData_$Impl_$._new();
		format_swf__$SWFData_SWFData_$Impl_$.writeSTRING(body,this.frameName);
		if(this.namedAnchorFlag) {
			format_swf__$SWFData_SWFData_$Impl_$.writeUI8(data,1);
		}
		format_swf__$SWFData_SWFData_$Impl_$.writeTagHeader(data,this.type,format_swf__$SWFData_SWFData_$Impl_$.get_length(body));
		data.writeBytes(openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytes(body));
	}
	,toString: function(indent) {
		if(indent == null) {
			indent = 0;
		}
		var str = "Name: " + this.frameName;
		if(this.namedAnchorFlag) {
			str += ", NamedAnchor = true";
		}
		return format_swf_tags_Tag.toStringCommon(this.type,this.name,indent) + str;
	}
	,__class__: format_swf_tags_TagFrameLabel
};
var format_swf_tags_TagImportAssets = function() {
	this.type = 57;
	this.name = "ImportAssets";
	this.version = 5;
	this.level = 1;
	this.symbols = [];
};
$hxClasses["format.swf.tags.TagImportAssets"] = format_swf_tags_TagImportAssets;
format_swf_tags_TagImportAssets.__name__ = ["format","swf","tags","TagImportAssets"];
format_swf_tags_TagImportAssets.__interfaces__ = [format_swf_tags_ITag];
format_swf_tags_TagImportAssets.prototype = {
	type: null
	,name: null
	,version: null
	,level: null
	,url: null
	,symbols: null
	,parse: function(data,length,version,async) {
		if(async == null) {
			async = false;
		}
		this.url = format_swf__$SWFData_SWFData_$Impl_$.readSTRING(data);
		var numSymbols = format_swf__$SWFData_SWFData_$Impl_$.readUI16(data);
		var _g1 = 0;
		while(_g1 < numSymbols) {
			++_g1;
			this.symbols.push(format_swf__$SWFData_SWFData_$Impl_$.readSYMBOL(data));
		}
	}
	,publish: function(data,version) {
		var body = format_swf__$SWFData_SWFData_$Impl_$._new();
		format_swf__$SWFData_SWFData_$Impl_$.writeSTRING(body,this.url);
		var numSymbols = this.symbols.length;
		format_swf__$SWFData_SWFData_$Impl_$.writeUI16(body,numSymbols);
		var _g1 = 0;
		while(_g1 < numSymbols) format_swf__$SWFData_SWFData_$Impl_$.writeSYMBOL(body,this.symbols[_g1++]);
		format_swf__$SWFData_SWFData_$Impl_$.writeTagHeader(data,this.type,format_swf__$SWFData_SWFData_$Impl_$.get_length(body));
		data.writeBytes(openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytes(body));
	}
	,toString: function(indent) {
		if(indent == null) {
			indent = 0;
		}
		var str = format_swf_tags_Tag.toStringCommon(this.type,this.name,indent);
		if(this.symbols.length > 0) {
			str += "\n" + format_swf_utils_StringUtils.repeat(indent + 2) + "Assets:";
			var _g1 = 0;
			var _g = this.symbols.length;
			while(_g1 < _g) {
				var i = _g1++;
				str += "\n" + format_swf_utils_StringUtils.repeat(indent + 4) + "[" + i + "] " + this.symbols[i].toString();
			}
		}
		return str;
	}
	,__class__: format_swf_tags_TagImportAssets
};
var format_swf_tags_TagImportAssets2 = function() {
	format_swf_tags_TagImportAssets.call(this);
	this.type = 71;
	this.name = "ImportAssets2";
	this.version = 8;
	this.level = 2;
};
$hxClasses["format.swf.tags.TagImportAssets2"] = format_swf_tags_TagImportAssets2;
format_swf_tags_TagImportAssets2.__name__ = ["format","swf","tags","TagImportAssets2"];
format_swf_tags_TagImportAssets2.__interfaces__ = [format_swf_tags_ITag];
format_swf_tags_TagImportAssets2.__super__ = format_swf_tags_TagImportAssets;
format_swf_tags_TagImportAssets2.prototype = $extend(format_swf_tags_TagImportAssets.prototype,{
	parse: function(data,length,version,async) {
		if(async == null) {
			async = false;
		}
		this.url = format_swf__$SWFData_SWFData_$Impl_$.readSTRING(data);
		format_swf__$SWFData_SWFData_$Impl_$.readUI8(data);
		format_swf__$SWFData_SWFData_$Impl_$.readUI8(data);
		var numSymbols = format_swf__$SWFData_SWFData_$Impl_$.readUI16(data);
		var _g1 = 0;
		while(_g1 < numSymbols) {
			++_g1;
			this.symbols.push(format_swf__$SWFData_SWFData_$Impl_$.readSYMBOL(data));
		}
	}
	,publish: function(data,version) {
		var body = format_swf__$SWFData_SWFData_$Impl_$._new();
		format_swf__$SWFData_SWFData_$Impl_$.writeSTRING(body,this.url);
		format_swf__$SWFData_SWFData_$Impl_$.writeUI8(body,1);
		format_swf__$SWFData_SWFData_$Impl_$.writeUI8(body,0);
		var numSymbols = this.symbols.length;
		format_swf__$SWFData_SWFData_$Impl_$.writeUI16(body,numSymbols);
		var _g1 = 0;
		while(_g1 < numSymbols) format_swf__$SWFData_SWFData_$Impl_$.writeSYMBOL(body,this.symbols[_g1++]);
		format_swf__$SWFData_SWFData_$Impl_$.writeTagHeader(data,this.type,format_swf__$SWFData_SWFData_$Impl_$.get_length(body));
		data.writeBytes(openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytes(body));
	}
	,__class__: format_swf_tags_TagImportAssets2
});
var format_swf_tags_TagJPEGTables = function() {
	this.type = 8;
	this.name = "JPEGTables";
	this.version = 1;
	this.level = 1;
	this.jpegTables = new openfl_utils_ByteArrayData(0);
};
$hxClasses["format.swf.tags.TagJPEGTables"] = format_swf_tags_TagJPEGTables;
format_swf_tags_TagJPEGTables.__name__ = ["format","swf","tags","TagJPEGTables"];
format_swf_tags_TagJPEGTables.__interfaces__ = [format_swf_tags_ITag];
format_swf_tags_TagJPEGTables.prototype = {
	type: null
	,name: null
	,version: null
	,level: null
	,jpegTables: null
	,parse: function(data,length,version,async) {
		if(async == null) {
			async = false;
		}
		if(length > 0) {
			data.readBytes(this.jpegTables,0,length);
		}
	}
	,publish: function(data,version) {
		format_swf__$SWFData_SWFData_$Impl_$.writeTagHeader(data,this.type,openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(this.jpegTables));
		if(openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(this.jpegTables) > 0) {
			data.writeBytes(this.jpegTables);
		}
	}
	,toString: function(indent) {
		if(indent == null) {
			indent = 0;
		}
		return format_swf_tags_Tag.toStringCommon(this.type,this.name,indent) + "Length: " + openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(this.jpegTables);
	}
	,__class__: format_swf_tags_TagJPEGTables
};
var format_swf_tags_TagMetadata = function() {
	this.type = 77;
	this.name = "Metadata";
	this.version = 1;
	this.level = 1;
};
$hxClasses["format.swf.tags.TagMetadata"] = format_swf_tags_TagMetadata;
format_swf_tags_TagMetadata.__name__ = ["format","swf","tags","TagMetadata"];
format_swf_tags_TagMetadata.__interfaces__ = [format_swf_tags_ITag];
format_swf_tags_TagMetadata.prototype = {
	type: null
	,name: null
	,version: null
	,level: null
	,xmlString: null
	,parse: function(data,length,version,async) {
		if(async == null) {
			async = false;
		}
		this.xmlString = format_swf__$SWFData_SWFData_$Impl_$.readSTRING(data);
	}
	,publish: function(data,version) {
		var body = format_swf__$SWFData_SWFData_$Impl_$._new();
		format_swf__$SWFData_SWFData_$Impl_$.writeSTRING(body,this.xmlString);
		format_swf__$SWFData_SWFData_$Impl_$.writeTagHeader(data,this.type,format_swf__$SWFData_SWFData_$Impl_$.get_length(body));
		data.writeBytes(openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytes(body));
	}
	,toString: function(indent) {
		if(indent == null) {
			indent = 0;
		}
		var str = format_swf_tags_Tag.toStringCommon(this.type,this.name,indent);
		var xml;
		try {
			xml = Xml.parse(this.xmlString);
			str += " " + haxe_xml_Printer.print(xml);
		} catch( error ) {
			haxe_CallStack.lastException = error;
			if (error instanceof js__$Boot_HaxeError) error = error.val;
			if( js_Boot.__instanceof(error,openfl_errors_Error) ) {
				str += " " + this.xmlString;
			} else throw(error);
		}
		return str;
	}
	,__class__: format_swf_tags_TagMetadata
};
var format_swf_tags_TagNameCharacter = function() {
	this.level = 1;
	this.version = 3;
	this.name = "NameCharacter";
	this.type = 40;
	this.binaryData = new openfl_utils_ByteArrayData(0);
};
$hxClasses["format.swf.tags.TagNameCharacter"] = format_swf_tags_TagNameCharacter;
format_swf_tags_TagNameCharacter.__name__ = ["format","swf","tags","TagNameCharacter"];
format_swf_tags_TagNameCharacter.__interfaces__ = [format_swf_tags_ITag];
format_swf_tags_TagNameCharacter.prototype = {
	type: null
	,name: null
	,version: null
	,level: null
	,binaryData: null
	,characterId: null
	,parse: function(data,length,version,async) {
		if(async == null) {
			async = false;
		}
		this.characterId = format_swf__$SWFData_SWFData_$Impl_$.readUI16(data);
		if(length > 2) {
			data.readBytes(this.binaryData,0,length - 2);
		}
	}
	,publish: function(data,version) {
		var body = format_swf__$SWFData_SWFData_$Impl_$._new();
		format_swf__$SWFData_SWFData_$Impl_$.writeUI16(body,this.characterId);
		if(openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(this.binaryData) > 0) {
			body.writeBytes(this.binaryData);
		}
		format_swf__$SWFData_SWFData_$Impl_$.writeTagHeader(data,this.type,format_swf__$SWFData_SWFData_$Impl_$.get_length(body));
		data.writeBytes(openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytes(body));
	}
	,clone: function() {
		var tag = new format_swf_tags_TagNameCharacter();
		tag.characterId = this.characterId;
		if(openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(this.binaryData) > 0) {
			tag.binaryData.writeBytes(this.binaryData);
		}
		return tag;
	}
	,toString: function(indent) {
		if(indent == null) {
			indent = 0;
		}
		var str = format_swf_tags_Tag.toStringCommon(this.type,this.name,indent) + "ID: " + this.characterId;
		if(openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(this.binaryData) > 0) {
			this.binaryData.position = 0;
			str += ", Name: " + this.binaryData.readUTFBytes(openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(this.binaryData) - 1);
			this.binaryData.position = 0;
		}
		return str;
	}
	,__class__: format_swf_tags_TagNameCharacter
};
var format_swf_tags_TagPlaceObject = function() {
	this.type = 4;
	this.name = "PlaceObject";
	this.version = 1;
	this.level = 1;
	this.surfaceFilterList = [];
};
$hxClasses["format.swf.tags.TagPlaceObject"] = format_swf_tags_TagPlaceObject;
format_swf_tags_TagPlaceObject.__name__ = ["format","swf","tags","TagPlaceObject"];
format_swf_tags_TagPlaceObject.__interfaces__ = [format_swf_tags_IDisplayListTag];
format_swf_tags_TagPlaceObject.prototype = {
	type: null
	,name: null
	,version: null
	,level: null
	,hasClipActions: null
	,hasClipDepth: null
	,hasName: null
	,hasRatio: null
	,hasColorTransform: null
	,hasMatrix: null
	,hasCharacter: null
	,hasMove: null
	,hasOpaqueBackground: null
	,hasVisible: null
	,hasImage: null
	,hasClassName: null
	,hasCacheAsBitmap: null
	,hasBlendMode: null
	,hasFilterList: null
	,characterId: null
	,depth: null
	,matrix: null
	,colorTransform: null
	,ratio: null
	,instanceName: null
	,clipDepth: null
	,clipActions: null
	,className: null
	,blendMode: null
	,bitmapCache: null
	,bitmapBackgroundColor: null
	,visible: null
	,metaData: null
	,surfaceFilterList: null
	,parse: function(data,length,version,async) {
		if(async == null) {
			async = false;
		}
		var pos = data.position;
		this.characterId = format_swf__$SWFData_SWFData_$Impl_$.readUI16(data);
		this.depth = format_swf__$SWFData_SWFData_$Impl_$.readUI16(data);
		this.matrix = format_swf__$SWFData_SWFData_$Impl_$.readMATRIX(data);
		this.hasCharacter = true;
		this.hasMatrix = true;
		if((data.position | 0) - pos < length) {
			this.colorTransform = format_swf__$SWFData_SWFData_$Impl_$.readCXFORM(data);
			this.hasColorTransform = true;
		}
	}
	,publish: function(data,version) {
		var body = format_swf__$SWFData_SWFData_$Impl_$._new();
		format_swf__$SWFData_SWFData_$Impl_$.writeUI16(body,this.characterId);
		format_swf__$SWFData_SWFData_$Impl_$.writeUI16(body,this.depth);
		format_swf__$SWFData_SWFData_$Impl_$.writeMATRIX(body,this.matrix);
		if(this.hasColorTransform) {
			format_swf__$SWFData_SWFData_$Impl_$.writeCXFORM(body,this.colorTransform);
		}
		format_swf__$SWFData_SWFData_$Impl_$.writeTagHeader(data,this.type,format_swf__$SWFData_SWFData_$Impl_$.get_length(body));
		data.writeBytes(openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytes(body));
	}
	,toString: function(indent) {
		if(indent == null) {
			indent = 0;
		}
		var str = format_swf_tags_Tag.toStringCommon(this.type,this.name,indent) + "Depth: " + this.depth;
		if(this.hasCharacter) {
			str += ", CharacterID: " + this.characterId;
		}
		if(this.hasMatrix) {
			str += ", Matrix: " + Std.string(this.matrix);
		}
		if(this.hasColorTransform) {
			str += ", ColorTransform: " + Std.string(this.colorTransform);
		}
		return str;
	}
	,__class__: format_swf_tags_TagPlaceObject
};
var format_swf_tags_TagPlaceObject2 = function() {
	format_swf_tags_TagPlaceObject.call(this);
	this.type = 26;
	this.name = "PlaceObject2";
	this.version = 3;
	this.level = 2;
};
$hxClasses["format.swf.tags.TagPlaceObject2"] = format_swf_tags_TagPlaceObject2;
format_swf_tags_TagPlaceObject2.__name__ = ["format","swf","tags","TagPlaceObject2"];
format_swf_tags_TagPlaceObject2.__interfaces__ = [format_swf_tags_IDisplayListTag];
format_swf_tags_TagPlaceObject2.__super__ = format_swf_tags_TagPlaceObject;
format_swf_tags_TagPlaceObject2.prototype = $extend(format_swf_tags_TagPlaceObject.prototype,{
	parse: function(data,length,version,async) {
		if(async == null) {
			async = false;
		}
		var flags = format_swf__$SWFData_SWFData_$Impl_$.readUI8(data);
		this.hasClipActions = (flags & 128) != 0;
		this.hasClipDepth = (flags & 64) != 0;
		this.hasName = (flags & 32) != 0;
		this.hasRatio = (flags & 16) != 0;
		this.hasColorTransform = (flags & 8) != 0;
		this.hasMatrix = (flags & 4) != 0;
		this.hasCharacter = (flags & 2) != 0;
		this.hasMove = (flags & 1) != 0;
		this.depth = format_swf__$SWFData_SWFData_$Impl_$.readUI16(data);
		if(this.hasCharacter) {
			this.characterId = format_swf__$SWFData_SWFData_$Impl_$.readUI16(data);
		}
		if(this.hasMatrix) {
			this.matrix = format_swf__$SWFData_SWFData_$Impl_$.readMATRIX(data);
		}
		if(this.hasColorTransform) {
			this.colorTransform = format_swf__$SWFData_SWFData_$Impl_$.readCXFORMWITHALPHA(data);
		}
		if(this.hasRatio) {
			this.ratio = format_swf__$SWFData_SWFData_$Impl_$.readUI16(data);
		}
		if(this.hasName) {
			this.instanceName = format_swf__$SWFData_SWFData_$Impl_$.readSTRING(data);
		}
		if(this.hasClipDepth) {
			this.clipDepth = format_swf__$SWFData_SWFData_$Impl_$.readUI16(data);
		}
		if(this.hasClipActions) {
			this.clipActions = format_swf__$SWFData_SWFData_$Impl_$.readCLIPACTIONS(data,version);
		}
	}
	,publish: function(data,version) {
		var flags = 0;
		var body = format_swf__$SWFData_SWFData_$Impl_$._new();
		if(this.hasMove) {
			flags = 1;
		}
		if(this.hasCharacter) {
			flags |= 2;
		}
		if(this.hasMatrix) {
			flags |= 4;
		}
		if(this.hasColorTransform) {
			flags |= 8;
		}
		if(this.hasRatio) {
			flags |= 16;
		}
		if(this.hasName) {
			flags |= 32;
		}
		if(this.hasClipDepth) {
			flags |= 64;
		}
		if(this.hasClipActions) {
			flags |= 128;
		}
		format_swf__$SWFData_SWFData_$Impl_$.writeUI8(body,flags);
		format_swf__$SWFData_SWFData_$Impl_$.writeUI16(body,this.depth);
		if(this.hasCharacter) {
			format_swf__$SWFData_SWFData_$Impl_$.writeUI16(body,this.characterId);
		}
		if(this.hasMatrix) {
			format_swf__$SWFData_SWFData_$Impl_$.writeMATRIX(body,this.matrix);
		}
		if(this.hasColorTransform) {
			format_swf__$SWFData_SWFData_$Impl_$.writeCXFORM(body,this.colorTransform);
		}
		if(this.hasRatio) {
			format_swf__$SWFData_SWFData_$Impl_$.writeUI16(body,this.ratio);
		}
		if(this.hasName) {
			format_swf__$SWFData_SWFData_$Impl_$.writeSTRING(body,this.instanceName);
		}
		if(this.hasClipDepth) {
			format_swf__$SWFData_SWFData_$Impl_$.writeUI16(body,this.clipDepth);
		}
		if(this.hasClipActions) {
			format_swf__$SWFData_SWFData_$Impl_$.writeCLIPACTIONS(body,this.clipActions,version);
		}
		format_swf__$SWFData_SWFData_$Impl_$.writeTagHeader(data,this.type,format_swf__$SWFData_SWFData_$Impl_$.get_length(body));
		data.writeBytes(openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytes(body));
	}
	,toString: function(indent) {
		if(indent == null) {
			indent = 0;
		}
		var str = format_swf_tags_Tag.toStringCommon(this.type,this.name,indent) + "Depth: " + this.depth;
		if(this.hasCharacter) {
			str += ", CharacterID: " + this.characterId;
		}
		if(this.hasMatrix) {
			str += ", Matrix: " + this.matrix.toString();
		}
		if(this.hasColorTransform) {
			str += ", ColorTransform: " + Std.string(this.colorTransform);
		}
		if(this.hasRatio) {
			str += ", Ratio: " + this.ratio;
		}
		if(this.hasName) {
			str += ", Name: " + this.instanceName;
		}
		if(this.hasClipDepth) {
			str += ", ClipDepth: " + this.clipDepth;
		}
		if(this.hasClipActions && this.clipActions != null) {
			str += "\n" + format_swf_utils_StringUtils.repeat(indent + 2) + this.clipActions.toString(indent + 2);
		}
		return str;
	}
	,__class__: format_swf_tags_TagPlaceObject2
});
var format_swf_tags_TagPlaceObject3 = function() {
	format_swf_tags_TagPlaceObject2.call(this);
	this.type = 70;
	this.name = "PlaceObject3";
	this.version = 8;
	this.level = 3;
};
$hxClasses["format.swf.tags.TagPlaceObject3"] = format_swf_tags_TagPlaceObject3;
format_swf_tags_TagPlaceObject3.__name__ = ["format","swf","tags","TagPlaceObject3"];
format_swf_tags_TagPlaceObject3.__interfaces__ = [format_swf_tags_IDisplayListTag];
format_swf_tags_TagPlaceObject3.__super__ = format_swf_tags_TagPlaceObject2;
format_swf_tags_TagPlaceObject3.prototype = $extend(format_swf_tags_TagPlaceObject2.prototype,{
	parse: function(data,length,version,async) {
		if(async == null) {
			async = false;
		}
		var flags1 = format_swf__$SWFData_SWFData_$Impl_$.readUI8(data);
		this.hasClipActions = (flags1 & 128) != 0;
		this.hasClipDepth = (flags1 & 64) != 0;
		this.hasName = (flags1 & 32) != 0;
		this.hasRatio = (flags1 & 16) != 0;
		this.hasColorTransform = (flags1 & 8) != 0;
		this.hasMatrix = (flags1 & 4) != 0;
		this.hasCharacter = (flags1 & 2) != 0;
		this.hasMove = (flags1 & 1) != 0;
		var flags2 = format_swf__$SWFData_SWFData_$Impl_$.readUI8(data);
		this.hasOpaqueBackground = (flags2 & 64) != 0;
		this.hasVisible = (flags2 & 32) != 0;
		this.hasImage = (flags2 & 16) != 0;
		this.hasClassName = (flags2 & 8) != 0;
		this.hasCacheAsBitmap = (flags2 & 4) != 0;
		this.hasBlendMode = (flags2 & 2) != 0;
		this.hasFilterList = (flags2 & 1) != 0;
		this.depth = format_swf__$SWFData_SWFData_$Impl_$.readUI16(data);
		if(this.hasClassName) {
			this.className = format_swf__$SWFData_SWFData_$Impl_$.readSTRING(data);
		}
		if(this.hasCharacter) {
			this.characterId = format_swf__$SWFData_SWFData_$Impl_$.readUI16(data);
		}
		if(this.hasMatrix) {
			this.matrix = format_swf__$SWFData_SWFData_$Impl_$.readMATRIX(data);
		}
		if(this.hasColorTransform) {
			this.colorTransform = format_swf__$SWFData_SWFData_$Impl_$.readCXFORMWITHALPHA(data);
		}
		if(this.hasRatio) {
			this.ratio = format_swf__$SWFData_SWFData_$Impl_$.readUI16(data);
		}
		if(this.hasName) {
			this.instanceName = format_swf__$SWFData_SWFData_$Impl_$.readSTRING(data);
		}
		if(this.hasClipDepth) {
			this.clipDepth = format_swf__$SWFData_SWFData_$Impl_$.readUI16(data);
		}
		if(this.hasFilterList) {
			var numberOfFilters = format_swf__$SWFData_SWFData_$Impl_$.readUI8(data);
			var _g1 = 0;
			while(_g1 < numberOfFilters) {
				++_g1;
				this.surfaceFilterList.push(format_swf__$SWFData_SWFData_$Impl_$.readFILTER(data));
			}
		}
		if(this.hasBlendMode) {
			this.blendMode = format_swf__$SWFData_SWFData_$Impl_$.readUI8(data);
		}
		if(this.hasCacheAsBitmap) {
			this.bitmapCache = format_swf__$SWFData_SWFData_$Impl_$.readUI8(data);
		}
		if(this.hasVisible) {
			this.visible = format_swf__$SWFData_SWFData_$Impl_$.readUI8(data);
		}
		if(this.hasOpaqueBackground) {
			this.bitmapBackgroundColor = format_swf__$SWFData_SWFData_$Impl_$.readRGBA(data);
		}
		if(this.hasClipActions) {
			this.clipActions = format_swf__$SWFData_SWFData_$Impl_$.readCLIPACTIONS(data,version);
		}
	}
	,prepareBody: function() {
		var body = format_swf__$SWFData_SWFData_$Impl_$._new();
		var flags1 = 0;
		if(this.hasClipActions) {
			flags1 = 128;
		}
		if(this.hasClipDepth) {
			flags1 |= 64;
		}
		if(this.hasName) {
			flags1 |= 32;
		}
		if(this.hasRatio) {
			flags1 |= 16;
		}
		if(this.hasColorTransform) {
			flags1 |= 8;
		}
		if(this.hasMatrix) {
			flags1 |= 4;
		}
		if(this.hasCharacter) {
			flags1 |= 2;
		}
		if(this.hasMove) {
			flags1 |= 1;
		}
		format_swf__$SWFData_SWFData_$Impl_$.writeUI8(body,flags1);
		var flags2 = 0;
		if(this.hasOpaqueBackground) {
			flags2 = 64;
		}
		if(this.hasVisible) {
			flags2 |= 32;
		}
		if(this.hasImage) {
			flags2 |= 16;
		}
		if(this.hasClassName) {
			flags2 |= 8;
		}
		if(this.hasCacheAsBitmap) {
			flags2 |= 4;
		}
		if(this.hasBlendMode) {
			flags2 |= 2;
		}
		if(this.hasFilterList) {
			flags2 |= 1;
		}
		format_swf__$SWFData_SWFData_$Impl_$.writeUI8(body,flags2);
		format_swf__$SWFData_SWFData_$Impl_$.writeUI16(body,this.depth);
		if(this.hasClassName) {
			format_swf__$SWFData_SWFData_$Impl_$.writeSTRING(body,this.className);
		}
		if(this.hasCharacter) {
			format_swf__$SWFData_SWFData_$Impl_$.writeUI16(body,this.characterId);
		}
		if(this.hasMatrix) {
			format_swf__$SWFData_SWFData_$Impl_$.writeMATRIX(body,this.matrix);
		}
		if(this.hasColorTransform) {
			format_swf__$SWFData_SWFData_$Impl_$.writeCXFORM(body,this.colorTransform);
		}
		if(this.hasRatio) {
			format_swf__$SWFData_SWFData_$Impl_$.writeUI16(body,this.ratio);
		}
		if(this.hasName) {
			format_swf__$SWFData_SWFData_$Impl_$.writeSTRING(body,this.instanceName);
		}
		if(this.hasClipDepth) {
			format_swf__$SWFData_SWFData_$Impl_$.writeUI16(body,this.clipDepth);
		}
		if(this.hasFilterList) {
			var numberOfFilters = this.surfaceFilterList.length;
			format_swf__$SWFData_SWFData_$Impl_$.writeUI8(body,numberOfFilters);
			var _g1 = 0;
			while(_g1 < numberOfFilters) format_swf__$SWFData_SWFData_$Impl_$.writeFILTER(body,this.surfaceFilterList[_g1++]);
		}
		if(this.hasBlendMode) {
			format_swf__$SWFData_SWFData_$Impl_$.writeUI8(body,this.blendMode);
		}
		if(this.hasCacheAsBitmap) {
			format_swf__$SWFData_SWFData_$Impl_$.writeUI8(body,this.bitmapCache);
		}
		if(this.hasVisible) {
			format_swf__$SWFData_SWFData_$Impl_$.writeUI8(body,this.visible);
		}
		if(this.hasOpaqueBackground) {
			format_swf__$SWFData_SWFData_$Impl_$.writeRGBA(body,this.bitmapBackgroundColor);
		}
		if(this.hasClipActions) {
			format_swf__$SWFData_SWFData_$Impl_$.writeCLIPACTIONS(body,this.clipActions,this.version);
		}
		return body;
	}
	,publish: function(data,version) {
		var body = this.prepareBody();
		format_swf__$SWFData_SWFData_$Impl_$.writeTagHeader(data,this.type,format_swf__$SWFData_SWFData_$Impl_$.get_length(body));
		data.writeBytes(openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytes(body));
	}
	,toString: function(indent) {
		if(indent == null) {
			indent = 0;
		}
		var str = format_swf_tags_Tag.toStringCommon(this.type,this.name,indent) + "Depth: " + this.depth;
		if(this.hasClassName) {
			str += ", ClassName: " + this.className;
		}
		if(this.hasCharacter) {
			str += ", CharacterID: " + this.characterId;
		}
		if(this.hasMatrix) {
			str += ", Matrix: " + this.matrix.toString();
		}
		if(this.hasColorTransform) {
			str += ", ColorTransform: " + Std.string(this.colorTransform);
		}
		if(this.hasRatio) {
			str += ", Ratio: " + this.ratio;
		}
		if(this.hasName) {
			str += ", Name: " + this.instanceName;
		}
		if(this.hasClipDepth) {
			str += ", ClipDepth: " + this.clipDepth;
		}
		if(this.hasBlendMode) {
			str += ", BlendMode: " + format_swf_data_consts_BlendMode.toString(this.blendMode);
		}
		if(this.hasCacheAsBitmap) {
			str += ", CacheAsBitmap: " + this.bitmapCache;
		}
		if(this.hasVisible) {
			str += ", Visible: " + this.visible;
		}
		if(this.hasOpaqueBackground) {
			str += ", BackgroundColor: " + format_swf_utils_ColorUtils.rgbaToString(this.bitmapBackgroundColor);
		}
		if(this.hasFilterList) {
			str += "\n" + format_swf_utils_StringUtils.repeat(indent + 2) + "Filters:";
			var _g1 = 0;
			var _g = this.surfaceFilterList.length;
			while(_g1 < _g) {
				var i = _g1++;
				str += "\n" + format_swf_utils_StringUtils.repeat(indent + 4) + "[" + i + "] " + this.surfaceFilterList[i].toString(indent + 4);
			}
		}
		if(this.hasClipActions) {
			str += "\n" + format_swf_utils_StringUtils.repeat(indent + 2) + this.clipActions.toString(indent + 2);
		}
		return str;
	}
	,__class__: format_swf_tags_TagPlaceObject3
});
var format_swf_tags_TagPlaceObject4 = function() {
	format_swf_tags_TagPlaceObject3.call(this);
	this.type = 94;
	this.name = "PlaceObject4";
	this.version = 19;
	this.level = 4;
};
$hxClasses["format.swf.tags.TagPlaceObject4"] = format_swf_tags_TagPlaceObject4;
format_swf_tags_TagPlaceObject4.__name__ = ["format","swf","tags","TagPlaceObject4"];
format_swf_tags_TagPlaceObject4.__interfaces__ = [format_swf_tags_IDisplayListTag];
format_swf_tags_TagPlaceObject4.__super__ = format_swf_tags_TagPlaceObject3;
format_swf_tags_TagPlaceObject4.prototype = $extend(format_swf_tags_TagPlaceObject3.prototype,{
	parse: function(data,length,version,async) {
		if(async == null) {
			async = false;
		}
		format_swf_tags_TagPlaceObject3.prototype.parse.call(this,data,length,version,async);
	}
	,publish: function(data,version) {
		var body = this.prepareBody();
		format_swf__$SWFData_SWFData_$Impl_$.writeTagHeader(data,this.type,format_swf__$SWFData_SWFData_$Impl_$.get_length(body));
		data.writeBytes(openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytes(body));
	}
	,toString: function(indent) {
		if(indent == null) {
			indent = 0;
		}
		var str = format_swf_tags_TagPlaceObject3.prototype.toString.call(this,indent);
		if(this.metaData != null) {
			str += "\n" + format_swf_utils_StringUtils.repeat(indent + 2) + "MetaData: yes";
		}
		return str;
	}
	,__class__: format_swf_tags_TagPlaceObject4
});
var format_swf_tags_TagProductInfo = function() {
	this.type = 41;
	this.name = "ProductInfo";
	this.version = 3;
	this.level = 1;
};
$hxClasses["format.swf.tags.TagProductInfo"] = format_swf_tags_TagProductInfo;
format_swf_tags_TagProductInfo.__name__ = ["format","swf","tags","TagProductInfo"];
format_swf_tags_TagProductInfo.__interfaces__ = [format_swf_tags_ITag];
format_swf_tags_TagProductInfo.UINT_MAX_CARRY = function() {
	return format_swf__$SWFData_SWFData_$Impl_$.MAX_FLOAT_VALUE + 1;
};
format_swf_tags_TagProductInfo.prototype = {
	type: null
	,name: null
	,version: null
	,level: null
	,productId: null
	,edition: null
	,majorVersion: null
	,minorVersion: null
	,build: null
	,compileDate: null
	,parse: function(data,length,version,async) {
		if(async == null) {
			async = false;
		}
		this.productId = format_swf__$SWFData_SWFData_$Impl_$.readUI32(data);
		this.edition = format_swf__$SWFData_SWFData_$Impl_$.readUI32(data);
		this.majorVersion = format_swf__$SWFData_SWFData_$Impl_$.readUI8(data);
		this.minorVersion = format_swf__$SWFData_SWFData_$Impl_$.readUI8(data);
		this.build = format_swf__$SWFData_SWFData_$Impl_$.readUI32(data) + format_swf__$SWFData_SWFData_$Impl_$.readUI32(data) * (format_swf__$SWFData_SWFData_$Impl_$.MAX_FLOAT_VALUE + 1);
		var sec = format_swf__$SWFData_SWFData_$Impl_$.readUI32(data) + format_swf__$SWFData_SWFData_$Impl_$.readUI32(data) * (format_swf__$SWFData_SWFData_$Impl_$.MAX_FLOAT_VALUE + 1);
		this.compileDate = new Date(sec);
	}
	,publish: function(data,version) {
		var body = format_swf__$SWFData_SWFData_$Impl_$._new();
		format_swf__$SWFData_SWFData_$Impl_$.writeUI32(body,this.productId);
		format_swf__$SWFData_SWFData_$Impl_$.writeUI32(body,this.edition);
		format_swf__$SWFData_SWFData_$Impl_$.writeUI8(body,this.majorVersion);
		format_swf__$SWFData_SWFData_$Impl_$.writeUI8(body,this.minorVersion);
		format_swf__$SWFData_SWFData_$Impl_$.writeUI32(body,this.build | 0);
		format_swf__$SWFData_SWFData_$Impl_$.writeUI32(body,this.build / (format_swf__$SWFData_SWFData_$Impl_$.MAX_FLOAT_VALUE + 1) | 0);
		format_swf__$SWFData_SWFData_$Impl_$.writeUI32(body,this.compileDate.getTime() | 0);
		format_swf__$SWFData_SWFData_$Impl_$.writeUI32(body,this.compileDate.getTime() / (format_swf__$SWFData_SWFData_$Impl_$.MAX_FLOAT_VALUE + 1) | 0);
		format_swf__$SWFData_SWFData_$Impl_$.writeTagHeader(data,this.type,format_swf__$SWFData_SWFData_$Impl_$.get_length(body));
		data.writeBytes(openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytes(body));
	}
	,toString: function(indent) {
		if(indent == null) {
			indent = 0;
		}
		return format_swf_tags_Tag.toStringCommon(this.type,this.name,indent) + "ProductID: " + this.productId + ", " + "Edition: " + this.edition + ", " + "Version: " + this.majorVersion + "." + this.minorVersion + " r" + this.build + ", " + "CompileDate: " + HxOverrides.dateStr(this.compileDate);
	}
	,__class__: format_swf_tags_TagProductInfo
};
var format_swf_tags_TagProtect = function() {
	this.type = 24;
	this.name = "Protect";
	this.version = 2;
	this.level = 1;
	this.password = new openfl_utils_ByteArrayData(0);
};
$hxClasses["format.swf.tags.TagProtect"] = format_swf_tags_TagProtect;
format_swf_tags_TagProtect.__name__ = ["format","swf","tags","TagProtect"];
format_swf_tags_TagProtect.__interfaces__ = [format_swf_tags_ITag];
format_swf_tags_TagProtect.prototype = {
	type: null
	,name: null
	,version: null
	,level: null
	,password: null
	,parse: function(data,length,version,async) {
		if(async == null) {
			async = false;
		}
		if(length > 0) {
			data.readBytes(this.password,0,length);
		}
	}
	,publish: function(data,version) {
		format_swf__$SWFData_SWFData_$Impl_$.writeTagHeader(data,this.type,openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(this.password));
		if(openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(this.password) > 0) {
			data.writeBytes(this.password);
		}
	}
	,toString: function(indent) {
		if(indent == null) {
			indent = 0;
		}
		return format_swf_tags_Tag.toStringCommon(this.type,this.name,indent);
	}
	,__class__: format_swf_tags_TagProtect
};
var format_swf_tags_TagRemoveObject = function() {
	this.characterId = 0;
	this.type = 5;
	this.name = "RemoveObject";
	this.version = 1;
	this.level = 1;
};
$hxClasses["format.swf.tags.TagRemoveObject"] = format_swf_tags_TagRemoveObject;
format_swf_tags_TagRemoveObject.__name__ = ["format","swf","tags","TagRemoveObject"];
format_swf_tags_TagRemoveObject.__interfaces__ = [format_swf_tags_IDisplayListTag];
format_swf_tags_TagRemoveObject.prototype = {
	type: null
	,name: null
	,version: null
	,level: null
	,characterId: null
	,depth: null
	,parse: function(data,length,version,async) {
		if(async == null) {
			async = false;
		}
		this.characterId = format_swf__$SWFData_SWFData_$Impl_$.readUI16(data);
		this.depth = format_swf__$SWFData_SWFData_$Impl_$.readUI16(data);
	}
	,publish: function(data,version) {
		format_swf__$SWFData_SWFData_$Impl_$.writeTagHeader(data,this.type,4);
		format_swf__$SWFData_SWFData_$Impl_$.writeUI16(data,this.characterId);
		format_swf__$SWFData_SWFData_$Impl_$.writeUI16(data,this.depth);
	}
	,toString: function(indent) {
		if(indent == null) {
			indent = 0;
		}
		return format_swf_tags_Tag.toStringCommon(this.type,this.name,indent) + "CharacterID: " + this.characterId + ", " + "Depth: " + this.depth;
	}
	,__class__: format_swf_tags_TagRemoveObject
};
var format_swf_tags_TagRemoveObject2 = function() {
	format_swf_tags_TagRemoveObject.call(this);
	this.type = 28;
	this.name = "RemoveObject2";
	this.version = 3;
	this.level = 2;
};
$hxClasses["format.swf.tags.TagRemoveObject2"] = format_swf_tags_TagRemoveObject2;
format_swf_tags_TagRemoveObject2.__name__ = ["format","swf","tags","TagRemoveObject2"];
format_swf_tags_TagRemoveObject2.__interfaces__ = [format_swf_tags_IDisplayListTag];
format_swf_tags_TagRemoveObject2.__super__ = format_swf_tags_TagRemoveObject;
format_swf_tags_TagRemoveObject2.prototype = $extend(format_swf_tags_TagRemoveObject.prototype,{
	parse: function(data,length,version,async) {
		if(async == null) {
			async = false;
		}
		this.depth = format_swf__$SWFData_SWFData_$Impl_$.readUI16(data);
	}
	,publish: function(data,version) {
		format_swf__$SWFData_SWFData_$Impl_$.writeTagHeader(data,this.type,2);
		format_swf__$SWFData_SWFData_$Impl_$.writeUI16(data,this.depth);
	}
	,toString: function(indent) {
		if(indent == null) {
			indent = 0;
		}
		return format_swf_tags_Tag.toStringCommon(this.type,this.name,indent) + "Depth: " + this.depth;
	}
	,__class__: format_swf_tags_TagRemoveObject2
});
var format_swf_tags_TagScriptLimits = function() {
	this.type = 65;
	this.name = "ScriptLimits";
	this.version = 7;
	this.level = 1;
};
$hxClasses["format.swf.tags.TagScriptLimits"] = format_swf_tags_TagScriptLimits;
format_swf_tags_TagScriptLimits.__name__ = ["format","swf","tags","TagScriptLimits"];
format_swf_tags_TagScriptLimits.__interfaces__ = [format_swf_tags_ITag];
format_swf_tags_TagScriptLimits.prototype = {
	type: null
	,name: null
	,version: null
	,level: null
	,maxRecursionDepth: null
	,scriptTimeoutSeconds: null
	,parse: function(data,length,version,async) {
		if(async == null) {
			async = false;
		}
		this.maxRecursionDepth = format_swf__$SWFData_SWFData_$Impl_$.readUI16(data);
		this.scriptTimeoutSeconds = format_swf__$SWFData_SWFData_$Impl_$.readUI16(data);
	}
	,publish: function(data,version) {
		format_swf__$SWFData_SWFData_$Impl_$.writeTagHeader(data,this.type,4);
		format_swf__$SWFData_SWFData_$Impl_$.writeUI16(data,this.maxRecursionDepth);
		format_swf__$SWFData_SWFData_$Impl_$.writeUI16(data,this.scriptTimeoutSeconds);
	}
	,toString: function(indent) {
		if(indent == null) {
			indent = 0;
		}
		return format_swf_tags_Tag.toStringCommon(this.type,this.name,indent) + "MaxRecursionDepth: " + this.maxRecursionDepth + ", " + "ScriptTimeoutSeconds: " + this.scriptTimeoutSeconds;
	}
	,__class__: format_swf_tags_TagScriptLimits
};
var format_swf_tags_TagSetBackgroundColor = function() {
	this.color = 16777215;
	this.type = 9;
	this.name = "SetBackgroundColor";
	this.version = 1;
	this.level = 1;
};
$hxClasses["format.swf.tags.TagSetBackgroundColor"] = format_swf_tags_TagSetBackgroundColor;
format_swf_tags_TagSetBackgroundColor.__name__ = ["format","swf","tags","TagSetBackgroundColor"];
format_swf_tags_TagSetBackgroundColor.__interfaces__ = [format_swf_tags_ITag];
format_swf_tags_TagSetBackgroundColor.create = function(aColor) {
	if(aColor == null) {
		aColor = 16777215;
	}
	var setBackgroundColor = new format_swf_tags_TagSetBackgroundColor();
	setBackgroundColor.color = aColor;
	return setBackgroundColor;
};
format_swf_tags_TagSetBackgroundColor.prototype = {
	type: null
	,name: null
	,version: null
	,level: null
	,color: null
	,parse: function(data,length,version,async) {
		if(async == null) {
			async = false;
		}
		this.color = format_swf__$SWFData_SWFData_$Impl_$.readRGB(data);
	}
	,publish: function(data,version) {
		format_swf__$SWFData_SWFData_$Impl_$.writeTagHeader(data,this.type,3);
		format_swf__$SWFData_SWFData_$Impl_$.writeRGB(data,this.color);
	}
	,toString: function(indent) {
		if(indent == null) {
			indent = 0;
		}
		return format_swf_tags_Tag.toStringCommon(this.type,this.name,indent) + "Color: " + format_swf_utils_ColorUtils.rgbToString(this.color);
	}
	,__class__: format_swf_tags_TagSetBackgroundColor
};
var format_swf_tags_TagSetTabIndex = function() {
	this.type = 66;
	this.name = "SetTabIndex";
	this.version = 7;
	this.level = 1;
};
$hxClasses["format.swf.tags.TagSetTabIndex"] = format_swf_tags_TagSetTabIndex;
format_swf_tags_TagSetTabIndex.__name__ = ["format","swf","tags","TagSetTabIndex"];
format_swf_tags_TagSetTabIndex.__interfaces__ = [format_swf_tags_ITag];
format_swf_tags_TagSetTabIndex.prototype = {
	type: null
	,name: null
	,version: null
	,level: null
	,depth: null
	,tabIndex: null
	,parse: function(data,length,version,async) {
		if(async == null) {
			async = false;
		}
		this.depth = format_swf__$SWFData_SWFData_$Impl_$.readUI16(data);
		this.tabIndex = format_swf__$SWFData_SWFData_$Impl_$.readUI16(data);
	}
	,publish: function(data,version) {
		format_swf__$SWFData_SWFData_$Impl_$.writeTagHeader(data,this.type,4);
		format_swf__$SWFData_SWFData_$Impl_$.writeUI16(data,this.depth);
		format_swf__$SWFData_SWFData_$Impl_$.writeUI16(data,this.tabIndex);
	}
	,toString: function(indent) {
		if(indent == null) {
			indent = 0;
		}
		return format_swf_tags_Tag.toStringCommon(this.type,this.name,indent) + "Depth: " + this.depth + ", " + "TabIndex: " + this.tabIndex;
	}
	,__class__: format_swf_tags_TagSetTabIndex
};
var format_swf_tags_TagShowFrame = function() {
	this.type = 1;
	this.name = "ShowFrame";
	this.version = 1;
	this.level = 1;
};
$hxClasses["format.swf.tags.TagShowFrame"] = format_swf_tags_TagShowFrame;
format_swf_tags_TagShowFrame.__name__ = ["format","swf","tags","TagShowFrame"];
format_swf_tags_TagShowFrame.__interfaces__ = [format_swf_tags_IDisplayListTag];
format_swf_tags_TagShowFrame.prototype = {
	type: null
	,name: null
	,version: null
	,level: null
	,parse: function(data,length,version,async) {
		if(async == null) {
			async = false;
		}
	}
	,publish: function(data,version) {
		format_swf__$SWFData_SWFData_$Impl_$.writeTagHeader(data,this.type,0);
	}
	,toString: function(indent) {
		if(indent == null) {
			indent = 0;
		}
		return format_swf_tags_Tag.toStringCommon(this.type,this.name,indent);
	}
	,__class__: format_swf_tags_TagShowFrame
};
var format_swf_tags_TagSoundStreamBlock = function() {
	this.type = 19;
	this.name = "SoundStreamBlock";
	this.version = 1;
	this.level = 1;
	this.soundData = new openfl_utils_ByteArrayData(0);
};
$hxClasses["format.swf.tags.TagSoundStreamBlock"] = format_swf_tags_TagSoundStreamBlock;
format_swf_tags_TagSoundStreamBlock.__name__ = ["format","swf","tags","TagSoundStreamBlock"];
format_swf_tags_TagSoundStreamBlock.__interfaces__ = [format_swf_tags_ITag];
format_swf_tags_TagSoundStreamBlock.prototype = {
	type: null
	,name: null
	,version: null
	,level: null
	,soundData: null
	,parse: function(data,length,version,async) {
		if(async == null) {
			async = false;
		}
		data.readBytes(this.soundData,0,length);
	}
	,publish: function(data,version) {
		format_swf__$SWFData_SWFData_$Impl_$.writeTagHeader(data,this.type,openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(this.soundData),true);
		if(openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(this.soundData) > 0) {
			data.writeBytes(this.soundData);
		}
	}
	,toString: function(indent) {
		if(indent == null) {
			indent = 0;
		}
		return format_swf_tags_Tag.toStringCommon(this.type,this.name,indent) + "Length: " + openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(this.soundData);
	}
	,__class__: format_swf_tags_TagSoundStreamBlock
};
var format_swf_tags_TagSoundStreamHead = function() {
	this.type = 18;
	this.name = "SoundStreamHead";
	this.version = 1;
	this.level = 1;
};
$hxClasses["format.swf.tags.TagSoundStreamHead"] = format_swf_tags_TagSoundStreamHead;
format_swf_tags_TagSoundStreamHead.__name__ = ["format","swf","tags","TagSoundStreamHead"];
format_swf_tags_TagSoundStreamHead.__interfaces__ = [format_swf_tags_ITag];
format_swf_tags_TagSoundStreamHead.prototype = {
	type: null
	,name: null
	,version: null
	,level: null
	,playbackSoundRate: null
	,playbackSoundSize: null
	,playbackSoundType: null
	,streamSoundCompression: null
	,streamSoundRate: null
	,streamSoundSize: null
	,streamSoundType: null
	,streamSoundSampleCount: null
	,latencySeek: null
	,parse: function(data,length,version,async) {
		if(async == null) {
			async = false;
		}
		format_swf__$SWFData_SWFData_$Impl_$.readUB(data,4);
		this.playbackSoundRate = format_swf__$SWFData_SWFData_$Impl_$.readUB(data,2);
		this.playbackSoundSize = format_swf__$SWFData_SWFData_$Impl_$.readUB(data,1);
		this.playbackSoundType = format_swf__$SWFData_SWFData_$Impl_$.readUB(data,1);
		this.streamSoundCompression = format_swf__$SWFData_SWFData_$Impl_$.readUB(data,4);
		this.streamSoundRate = format_swf__$SWFData_SWFData_$Impl_$.readUB(data,2);
		this.streamSoundSize = format_swf__$SWFData_SWFData_$Impl_$.readUB(data,1);
		this.streamSoundType = format_swf__$SWFData_SWFData_$Impl_$.readUB(data,1);
		this.streamSoundSampleCount = format_swf__$SWFData_SWFData_$Impl_$.readUI16(data);
		if(this.streamSoundCompression == 2) {
			this.latencySeek = format_swf__$SWFData_SWFData_$Impl_$.readSI16(data);
		}
	}
	,publish: function(data,version) {
		var body = format_swf__$SWFData_SWFData_$Impl_$._new();
		format_swf__$SWFData_SWFData_$Impl_$.writeUB(body,4,0);
		format_swf__$SWFData_SWFData_$Impl_$.writeUB(body,2,this.playbackSoundRate);
		format_swf__$SWFData_SWFData_$Impl_$.writeUB(body,1,this.playbackSoundSize);
		format_swf__$SWFData_SWFData_$Impl_$.writeUB(body,1,this.playbackSoundType);
		format_swf__$SWFData_SWFData_$Impl_$.writeUB(body,4,this.streamSoundCompression);
		format_swf__$SWFData_SWFData_$Impl_$.writeUB(body,2,this.streamSoundRate);
		format_swf__$SWFData_SWFData_$Impl_$.writeUB(body,1,this.streamSoundSize);
		format_swf__$SWFData_SWFData_$Impl_$.writeUB(body,1,this.streamSoundType);
		format_swf__$SWFData_SWFData_$Impl_$.writeUI16(body,this.streamSoundSampleCount);
		if(this.streamSoundCompression == 2) {
			format_swf__$SWFData_SWFData_$Impl_$.writeSI16(body,this.latencySeek);
		}
		format_swf__$SWFData_SWFData_$Impl_$.writeTagHeader(data,this.type,format_swf__$SWFData_SWFData_$Impl_$.get_length(body));
		data.writeBytes(openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytes(body));
	}
	,toString: function(indent) {
		if(indent == null) {
			indent = 0;
		}
		var str = format_swf_tags_Tag.toStringCommon(this.type,this.name,indent);
		if(this.streamSoundSampleCount > 0) {
			str += "Format: " + format_swf_data_consts_SoundCompression.toString(this.streamSoundCompression) + ", " + "Rate: " + format_swf_data_consts_SoundRate.toString(this.streamSoundRate) + ", " + "Size: " + format_swf_data_consts_SoundSize.toString(this.streamSoundSize) + ", " + "Type: " + format_swf_data_consts_SoundType.toString(this.streamSoundType) + ", ";
		}
		str += "Samples: " + this.streamSoundSampleCount + ", ";
		str += "LatencySeek: " + this.latencySeek;
		return str;
	}
	,__class__: format_swf_tags_TagSoundStreamHead
};
var format_swf_tags_TagSoundStreamHead2 = function() {
	format_swf_tags_TagSoundStreamHead.call(this);
	this.type = 45;
	this.name = "SoundStreamHead2";
	this.version = 3;
	this.level = 2;
};
$hxClasses["format.swf.tags.TagSoundStreamHead2"] = format_swf_tags_TagSoundStreamHead2;
format_swf_tags_TagSoundStreamHead2.__name__ = ["format","swf","tags","TagSoundStreamHead2"];
format_swf_tags_TagSoundStreamHead2.__interfaces__ = [format_swf_tags_ITag];
format_swf_tags_TagSoundStreamHead2.__super__ = format_swf_tags_TagSoundStreamHead;
format_swf_tags_TagSoundStreamHead2.prototype = $extend(format_swf_tags_TagSoundStreamHead.prototype,{
	toString: function(indent) {
		if(indent == null) {
			indent = 0;
		}
		var str = format_swf_tags_Tag.toStringCommon(this.type,this.name,indent);
		if(this.streamSoundSampleCount > 0) {
			str += "Format: " + format_swf_data_consts_SoundCompression.toString(this.streamSoundCompression) + ", " + "Rate: " + format_swf_data_consts_SoundRate.toString(this.streamSoundRate) + ", " + "Size: " + format_swf_data_consts_SoundSize.toString(this.streamSoundSize) + ", " + "Type: " + format_swf_data_consts_SoundType.toString(this.streamSoundType) + ", ";
		}
		str += "Samples: " + this.streamSoundSampleCount;
		return str;
	}
	,__class__: format_swf_tags_TagSoundStreamHead2
});
var format_swf_tags_TagStartSound = function() {
	this.type = 15;
	this.name = "StartSound";
	this.version = 1;
	this.level = 1;
};
$hxClasses["format.swf.tags.TagStartSound"] = format_swf_tags_TagStartSound;
format_swf_tags_TagStartSound.__name__ = ["format","swf","tags","TagStartSound"];
format_swf_tags_TagStartSound.__interfaces__ = [format_swf_tags_ITag];
format_swf_tags_TagStartSound.prototype = {
	type: null
	,name: null
	,version: null
	,level: null
	,soundId: null
	,soundInfo: null
	,parse: function(data,length,version,async) {
		if(async == null) {
			async = false;
		}
		this.soundId = format_swf__$SWFData_SWFData_$Impl_$.readUI16(data);
		this.soundInfo = format_swf__$SWFData_SWFData_$Impl_$.readSOUNDINFO(data);
	}
	,publish: function(data,version) {
		var body = format_swf__$SWFData_SWFData_$Impl_$._new();
		format_swf__$SWFData_SWFData_$Impl_$.writeUI16(body,this.soundId);
		format_swf__$SWFData_SWFData_$Impl_$.writeSOUNDINFO(body,this.soundInfo);
		format_swf__$SWFData_SWFData_$Impl_$.writeTagHeader(data,this.type,format_swf__$SWFData_SWFData_$Impl_$.get_length(body));
		data.writeBytes(openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytes(body));
	}
	,toString: function(indent) {
		if(indent == null) {
			indent = 0;
		}
		return format_swf_tags_Tag.toStringCommon(this.type,this.name,indent) + "SoundID: " + this.soundId + ", " + "SoundInfo: " + Std.string(this.soundInfo);
	}
	,__class__: format_swf_tags_TagStartSound
};
var format_swf_tags_TagStartSound2 = function() {
	this.type = 89;
	this.name = "StartSound2";
	this.version = 9;
	this.level = 2;
};
$hxClasses["format.swf.tags.TagStartSound2"] = format_swf_tags_TagStartSound2;
format_swf_tags_TagStartSound2.__name__ = ["format","swf","tags","TagStartSound2"];
format_swf_tags_TagStartSound2.__interfaces__ = [format_swf_tags_ITag];
format_swf_tags_TagStartSound2.prototype = {
	type: null
	,name: null
	,version: null
	,level: null
	,soundClassName: null
	,soundInfo: null
	,parse: function(data,length,version,async) {
		if(async == null) {
			async = false;
		}
		this.soundClassName = format_swf__$SWFData_SWFData_$Impl_$.readSTRING(data);
		this.soundInfo = format_swf__$SWFData_SWFData_$Impl_$.readSOUNDINFO(data);
	}
	,publish: function(data,version) {
		var body = format_swf__$SWFData_SWFData_$Impl_$._new();
		format_swf__$SWFData_SWFData_$Impl_$.writeSTRING(body,this.soundClassName);
		format_swf__$SWFData_SWFData_$Impl_$.writeSOUNDINFO(body,this.soundInfo);
		format_swf__$SWFData_SWFData_$Impl_$.writeTagHeader(data,this.type,format_swf__$SWFData_SWFData_$Impl_$.get_length(body));
		data.writeBytes(openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytes(body));
	}
	,toString: function(indent) {
		if(indent == null) {
			indent = 0;
		}
		return format_swf_tags_Tag.toStringCommon(this.type,this.name,indent) + "SoundClassName: " + this.soundClassName + ", " + "SoundInfo: " + Std.string(this.soundInfo);
	}
	,__class__: format_swf_tags_TagStartSound2
};
var format_swf_tags_TagSymbolClass = function() {
	this.type = 76;
	this.name = "SymbolClass";
	this.version = 9;
	this.level = 1;
	this.symbols = [];
};
$hxClasses["format.swf.tags.TagSymbolClass"] = format_swf_tags_TagSymbolClass;
format_swf_tags_TagSymbolClass.__name__ = ["format","swf","tags","TagSymbolClass"];
format_swf_tags_TagSymbolClass.__interfaces__ = [format_swf_tags_ITag];
format_swf_tags_TagSymbolClass.prototype = {
	type: null
	,name: null
	,version: null
	,level: null
	,symbols: null
	,parse: function(data,length,version,async) {
		if(async == null) {
			async = false;
		}
		var numSymbols = format_swf__$SWFData_SWFData_$Impl_$.readUI16(data);
		var _g1 = 0;
		while(_g1 < numSymbols) {
			++_g1;
			this.symbols.push(format_swf__$SWFData_SWFData_$Impl_$.readSYMBOL(data));
		}
	}
	,publish: function(data,version) {
		var body = format_swf__$SWFData_SWFData_$Impl_$._new();
		var numSymbols = this.symbols.length;
		format_swf__$SWFData_SWFData_$Impl_$.writeUI16(body,numSymbols);
		var _g1 = 0;
		while(_g1 < numSymbols) format_swf__$SWFData_SWFData_$Impl_$.writeSYMBOL(body,this.symbols[_g1++]);
		format_swf__$SWFData_SWFData_$Impl_$.writeTagHeader(data,this.type,format_swf__$SWFData_SWFData_$Impl_$.get_length(body));
		data.writeBytes(openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytes(body));
	}
	,toString: function(indent) {
		if(indent == null) {
			indent = 0;
		}
		var str = format_swf_tags_Tag.toStringCommon(this.type,this.name,indent);
		if(this.symbols.length > 0) {
			str += "\n" + format_swf_utils_StringUtils.repeat(indent + 2) + "Symbols:";
			var _g1 = 0;
			var _g = this.symbols.length;
			while(_g1 < _g) {
				var i = _g1++;
				str += "\n" + format_swf_utils_StringUtils.repeat(indent + 4) + "[" + i + "] " + this.symbols[i].toString();
			}
		}
		return str;
	}
	,__class__: format_swf_tags_TagSymbolClass
};
var format_swf_tags_TagUnknown = function(type) {
	if(type == null) {
		type = 0;
	}
	this.type = type;
	this.name = "????";
	this.version = 0;
	this.level = 1;
};
$hxClasses["format.swf.tags.TagUnknown"] = format_swf_tags_TagUnknown;
format_swf_tags_TagUnknown.__name__ = ["format","swf","tags","TagUnknown"];
format_swf_tags_TagUnknown.__interfaces__ = [format_swf_tags_ITag];
format_swf_tags_TagUnknown.prototype = {
	type: null
	,name: null
	,version: null
	,level: null
	,parse: function(data,length,version,async) {
		if(async == null) {
			async = false;
		}
		format_swf__$SWFData_SWFData_$Impl_$.skipBytes(data,length);
	}
	,publish: function(data,version) {
		throw new js__$Boot_HaxeError(new openfl_errors_Error("No raw tag data available."));
	}
	,toString: function(indent) {
		if(indent == null) {
			indent = 0;
		}
		return format_swf_tags_Tag.toStringCommon(this.type,this.name,indent);
	}
	,__class__: format_swf_tags_TagUnknown
};
var format_swf_tags_TagVideoFrame = function() {
	this.type = 61;
	this.name = "VideoFrame";
	this.version = 6;
	this.level = 1;
	this.videoData = new openfl_utils_ByteArrayData(0);
};
$hxClasses["format.swf.tags.TagVideoFrame"] = format_swf_tags_TagVideoFrame;
format_swf_tags_TagVideoFrame.__name__ = ["format","swf","tags","TagVideoFrame"];
format_swf_tags_TagVideoFrame.__interfaces__ = [format_swf_tags_ITag];
format_swf_tags_TagVideoFrame.prototype = {
	type: null
	,name: null
	,version: null
	,level: null
	,streamId: null
	,frameNum: null
	,videoData: null
	,parse: function(data,length,version,async) {
		if(async == null) {
			async = false;
		}
		this.streamId = format_swf__$SWFData_SWFData_$Impl_$.readUI16(data);
		this.frameNum = format_swf__$SWFData_SWFData_$Impl_$.readUI16(data);
		data.readBytes(this.videoData,0,length - 4);
	}
	,publish: function(data,version) {
		format_swf__$SWFData_SWFData_$Impl_$.writeTagHeader(data,this.type,openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(this.videoData) + 4);
		format_swf__$SWFData_SWFData_$Impl_$.writeUI16(data,this.streamId);
		format_swf__$SWFData_SWFData_$Impl_$.writeUI16(data,this.frameNum);
		if(openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(this.videoData) > 0) {
			data.writeBytes(this.videoData);
		}
	}
	,toString: function(indent) {
		if(indent == null) {
			indent = 0;
		}
		return format_swf_tags_Tag.toStringCommon(this.type,this.name,indent) + "StreamID: " + this.streamId + ", " + "Frame: " + this.frameNum;
	}
	,__class__: format_swf_tags_TagVideoFrame
};
var format_swf_tags_etc_TagSWFEncryptActions = function(type) {
	if(type == null) {
		type = 0;
	}
	format_swf_tags_TagUnknown.call(this);
	this.type = 253;
	this.name = "SWFEncryptActions";
};
$hxClasses["format.swf.tags.etc.TagSWFEncryptActions"] = format_swf_tags_etc_TagSWFEncryptActions;
format_swf_tags_etc_TagSWFEncryptActions.__name__ = ["format","swf","tags","etc","TagSWFEncryptActions"];
format_swf_tags_etc_TagSWFEncryptActions.__interfaces__ = [format_swf_tags_ITag];
format_swf_tags_etc_TagSWFEncryptActions.__super__ = format_swf_tags_TagUnknown;
format_swf_tags_etc_TagSWFEncryptActions.prototype = $extend(format_swf_tags_TagUnknown.prototype,{
	__class__: format_swf_tags_etc_TagSWFEncryptActions
});
var format_swf_tags_etc_TagSWFEncryptSignature = function(type) {
	format_swf_tags_TagUnknown.call(this,type);
};
$hxClasses["format.swf.tags.etc.TagSWFEncryptSignature"] = format_swf_tags_etc_TagSWFEncryptSignature;
format_swf_tags_etc_TagSWFEncryptSignature.__name__ = ["format","swf","tags","etc","TagSWFEncryptSignature"];
format_swf_tags_etc_TagSWFEncryptSignature.__interfaces__ = [format_swf_tags_ITag];
format_swf_tags_etc_TagSWFEncryptSignature.__super__ = format_swf_tags_TagUnknown;
format_swf_tags_etc_TagSWFEncryptSignature.prototype = $extend(format_swf_tags_TagUnknown.prototype,{
	TagSWFEncryptSignature: function(type) {
		if(type == null) {
			type = 0;
		}
		this.type = 255;
		this.name = "SWFEncryptSignature";
	}
	,__class__: format_swf_tags_etc_TagSWFEncryptSignature
});
var format_swf_timeline_Frame = function(frameNumber,tagIndexStart) {
	if(tagIndexStart == null) {
		tagIndexStart = 0;
	}
	if(frameNumber == null) {
		frameNumber = 0;
	}
	this.tagIndexEnd = 0;
	this.tagIndexStart = 0;
	this.frameNumber = 0;
	this.frameNumber = frameNumber;
	this.tagIndexStart = tagIndexStart;
	this.objects = new haxe_ds_IntMap();
	this.characters = [];
};
$hxClasses["format.swf.timeline.Frame"] = format_swf_timeline_Frame;
format_swf_timeline_Frame.__name__ = ["format","swf","timeline","Frame"];
format_swf_timeline_Frame.prototype = {
	frameNumber: null
	,tagIndexStart: null
	,tagIndexEnd: null
	,label: null
	,objects: null
	,_objectsSortedByDepth: null
	,characters: null
	,tagCount: null
	,getObjectsSortedByDepth: function() {
		var depths = [];
		if(this._objectsSortedByDepth == null) {
			var depth = this.objects.keys();
			while(depth.hasNext()) depths.push(depth.next());
			depths.sort($bind(this,this.sortNumeric));
			this._objectsSortedByDepth = [];
			var _g1 = 0;
			var _g = depths.length;
			while(_g1 < _g) this._objectsSortedByDepth.push(this.objects.h[depths[_g1++]]);
		}
		return this._objectsSortedByDepth;
	}
	,sortNumeric: function(a,b) {
		return a - b;
	}
	,get_tagCount: function() {
		return this.tagIndexEnd - this.tagIndexStart + 1;
	}
	,placeObject: function(tagIndex,tag) {
		var frameObject = this.objects.h[tag.depth];
		if(frameObject != null) {
			if(tag.characterId == 0) {
				frameObject.lastModifiedAtIndex = tagIndex;
				frameObject.isKeyframe = false;
			} else {
				if(tag.hasName || tag.hasMatrix || tag.hasColorTransform || tag.hasFilterList) {
					frameObject.lastModifiedAtIndex = tagIndex;
				}
				frameObject.isKeyframe = true;
				if(tag.characterId != frameObject.characterId) {
					frameObject.lastModifiedAtIndex = 0;
					frameObject.placedAtIndex = tagIndex;
					frameObject.characterId = tag.characterId;
				}
			}
		} else {
			this.objects.h[tag.depth] = new format_swf_timeline_FrameObject(tag.depth,tag.clipDepth,tag.characterId,tag.className,tagIndex,0,true);
		}
		this._objectsSortedByDepth = null;
	}
	,removeObject: function(tag) {
		this.objects.remove(tag.depth);
		this._objectsSortedByDepth = null;
	}
	,clone: function() {
		var frame = new format_swf_timeline_Frame();
		var depth = this.objects.keys();
		while(depth.hasNext()) {
			var depth1 = depth.next();
			frame.objects.h[depth1] = this.objects.h[depth1].clone();
		}
		return frame;
	}
	,toString: function(indent) {
		if(indent == null) {
			indent = 0;
		}
		var str = format_swf_utils_StringUtils.repeat(indent) + "[" + this.frameNumber + "] " + "Start: " + this.tagIndexStart + ", " + "Length: " + this.get_tagCount();
		if(this.label != null && this.label != "") {
			str += ", Label: " + this.label;
		}
		if(this.characters.length > 0) {
			str += "\n" + format_swf_utils_StringUtils.repeat(indent + 2) + "Defined CharacterIDs: " + this.characters.join(", ");
		}
		var depth = this.objects.keys();
		while(depth.hasNext()) {
			var depth1 = depth.next();
			str += this.objects.h[depth1].toString();
		}
		return str;
	}
	,__class__: format_swf_timeline_Frame
	,__properties__: {get_tagCount:"get_tagCount"}
};
var format_swf_timeline_FrameObject = function(depth,clipDepth,characterId,className,placedAtIndex,lastModifiedAtIndex,isKeyframe) {
	if(isKeyframe == null) {
		isKeyframe = false;
	}
	if(lastModifiedAtIndex == null) {
		lastModifiedAtIndex = 0;
	}
	this.layer = -1;
	this.depth = depth;
	this.clipDepth = clipDepth;
	this.characterId = characterId;
	this.className = className;
	this.placedAtIndex = placedAtIndex;
	this.lastModifiedAtIndex = lastModifiedAtIndex;
	this.isKeyframe = isKeyframe;
	this.layer = -1;
};
$hxClasses["format.swf.timeline.FrameObject"] = format_swf_timeline_FrameObject;
format_swf_timeline_FrameObject.__name__ = ["format","swf","timeline","FrameObject"];
format_swf_timeline_FrameObject.prototype = {
	clipDepth: null
	,depth: null
	,characterId: null
	,className: null
	,placedAtIndex: null
	,lastModifiedAtIndex: null
	,isKeyframe: null
	,layer: null
	,clone: function() {
		return new format_swf_timeline_FrameObject(this.depth,this.clipDepth,this.characterId,this.className,this.placedAtIndex,this.lastModifiedAtIndex,false);
	}
	,toString: function() {
		var str = format_swf_utils_StringUtils.repeat(2) + "Depth: " + this.depth + (this.layer > -1 ? " (Layer " + this.layer + ")" : "") + ", " + "CharacterId: " + this.characterId + ", ";
		if(this.className != null) {
			str += "ClassName: " + this.className + ", ";
		}
		str += "PlacedAt: " + this.placedAtIndex;
		if(this.lastModifiedAtIndex > 0) {
			str += ", LastModifiedAt: " + this.lastModifiedAtIndex;
		}
		if(this.isKeyframe) {
			str += ", IsKeyframe";
		}
		return str;
	}
	,__class__: format_swf_timeline_FrameObject
};
var format_swf_timeline_Layer = function(depth,frameCount) {
	this.frameCount = 0;
	this.depth = 0;
	this.depth = depth;
	this.frameCount = frameCount;
	this.frameStripMap = [];
	this.strips = [];
};
$hxClasses["format.swf.timeline.Layer"] = format_swf_timeline_Layer;
format_swf_timeline_Layer.__name__ = ["format","swf","timeline","Layer"];
format_swf_timeline_Layer.prototype = {
	depth: null
	,frameCount: null
	,frameStripMap: null
	,strips: null
	,appendStrip: function(type,start,end) {
		if(type != 0) {
			var stripIndex = this.strips.length;
			if(stripIndex == 0 && start > 0) {
				var _g1 = 0;
				while(_g1 < start) this.frameStripMap[_g1++] = stripIndex;
				this.strips[stripIndex++] = new format_swf_timeline_LayerStrip(1,0,start - 1);
			} else if(stripIndex > 0) {
				var prevStrip = this.strips[stripIndex - 1];
				if(prevStrip.endFrameIndex + 1 < start) {
					var _g11 = prevStrip.endFrameIndex + 1;
					while(_g11 < start) this.frameStripMap[_g11++] = stripIndex;
					this.strips[stripIndex++] = new format_swf_timeline_LayerStrip(1,prevStrip.endFrameIndex + 1,start - 1);
				}
			}
			var _g12 = start;
			var _g = end + 1;
			while(_g12 < _g) this.frameStripMap[_g12++] = stripIndex;
			this.strips[stripIndex] = new format_swf_timeline_LayerStrip(type,start,end);
		}
	}
	,getStripsForFrameRegion: function(start,end) {
		if(start >= this.frameStripMap.length || end < start) {
			return [];
		}
		return this.strips.slice(this.frameStripMap[start],(end >= this.frameStripMap.length ? this.strips.length - 1 : this.frameStripMap[end]) + 1);
	}
	,toString: function(indent) {
		if(indent == null) {
			indent = 0;
		}
		var str = "Depth: " + this.depth + ", Frames: " + this.frameCount;
		if(this.strips.length > 0) {
			str += "\n" + format_swf_utils_StringUtils.repeat(indent + 2) + "Strips:";
			var _g1 = 0;
			var _g = this.strips.length;
			while(_g1 < _g) {
				var i = _g1++;
				str += "\n" + format_swf_utils_StringUtils.repeat(indent + 4) + "[" + i + "] " + this.strips[i].toString();
			}
		}
		return str;
	}
	,__class__: format_swf_timeline_Layer
};
var format_swf_timeline_LayerStrip = function(type,startFrameIndex,endFrameIndex) {
	this.endFrameIndex = 0;
	this.startFrameIndex = 0;
	this.type = 0;
	this.type = type;
	this.startFrameIndex = startFrameIndex;
	this.endFrameIndex = endFrameIndex;
};
$hxClasses["format.swf.timeline.LayerStrip"] = format_swf_timeline_LayerStrip;
format_swf_timeline_LayerStrip.__name__ = ["format","swf","timeline","LayerStrip"];
format_swf_timeline_LayerStrip.prototype = {
	type: null
	,startFrameIndex: null
	,endFrameIndex: null
	,toString: function() {
		var str;
		if(this.startFrameIndex == this.endFrameIndex) {
			str = "Frame: " + this.startFrameIndex;
		} else {
			str = "Frames: " + this.startFrameIndex + "-" + this.endFrameIndex;
		}
		str += ", Type: ";
		switch(this.type) {
		case 0:
			str += "EMPTY";
			break;
		case 1:
			str += "SPACER";
			break;
		case 2:
			str += "STATIC";
			break;
		case 3:
			str += "MOTIONTWEEN";
			break;
		case 4:
			str += "SHAPETWEEN";
			break;
		default:
			str += "unknown";
		}
		return str;
	}
	,__class__: format_swf_timeline_LayerStrip
};
var format_swf_timeline_Scene = function(frameNumber,name) {
	this.frameNumber = 0;
	this.frameNumber = frameNumber;
	this.name = name;
};
$hxClasses["format.swf.timeline.Scene"] = format_swf_timeline_Scene;
format_swf_timeline_Scene.__name__ = ["format","swf","timeline","Scene"];
format_swf_timeline_Scene.prototype = {
	frameNumber: null
	,name: null
	,toString: function(indent) {
		if(indent == null) {
			indent = 0;
		}
		return format_swf_utils_StringUtils.repeat(indent) + "Name: " + this.name + ", " + "Frame: " + this.frameNumber;
	}
	,__class__: format_swf_timeline_Scene
};
var format_swf_timeline_SoundStream = function() {
	this.data = new openfl_utils_ByteArrayData(0);
};
$hxClasses["format.swf.timeline.SoundStream"] = format_swf_timeline_SoundStream;
format_swf_timeline_SoundStream.__name__ = ["format","swf","timeline","SoundStream"];
format_swf_timeline_SoundStream.prototype = {
	startFrame: null
	,numFrames: null
	,numSamples: null
	,compression: null
	,rate: null
	,size: null
	,type: null
	,data: null
	,toString: function() {
		return "[SoundStream] " + "StartFrame: " + this.startFrame + ", " + "Frames: " + this.numFrames + ", " + "Samples: " + this.numSamples + ", " + "Bytes: " + openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(this.data);
	}
	,__class__: format_swf_timeline_SoundStream
};
var haxe_io_Bytes = function(data) {
	this.length = data.byteLength;
	this.b = new Uint8Array(data);
	this.b.bufferValue = data;
	data.hxBytes = this;
	data.bytes = this.b;
};
$hxClasses["haxe.io.Bytes"] = haxe_io_Bytes;
haxe_io_Bytes.__name__ = ["haxe","io","Bytes"];
haxe_io_Bytes.alloc = function(length) {
	return new haxe_io_Bytes(new ArrayBuffer(length));
};
haxe_io_Bytes.ofString = function(s) {
	var a = [];
	var i = 0;
	while(i < s.length) {
		var c = s.charCodeAt(i++);
		if(55296 <= c && c <= 56319) {
			c = c - 55232 << 10 | s.charCodeAt(i++) & 1023;
		}
		if(c <= 127) {
			a.push(c);
		} else if(c <= 2047) {
			a.push(192 | c >> 6);
			a.push(128 | c & 63);
		} else if(c <= 65535) {
			a.push(224 | c >> 12);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		} else {
			a.push(240 | c >> 18);
			a.push(128 | c >> 12 & 63);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		}
	}
	return new haxe_io_Bytes(new Uint8Array(a).buffer);
};
haxe_io_Bytes.ofData = function(b) {
	var hb = b.hxBytes;
	if(hb != null) {
		return hb;
	}
	return new haxe_io_Bytes(b);
};
haxe_io_Bytes.fastGet = function(b,pos) {
	return b.bytes[pos];
};
haxe_io_Bytes.prototype = {
	length: null
	,b: null
	,data: null
	,blit: function(pos,src,srcpos,len) {
		if(pos < 0 || srcpos < 0 || len < 0 || pos + len > this.length || srcpos + len > src.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		if(srcpos == 0 && len == src.b.byteLength) {
			this.b.set(src.b,pos);
		} else {
			this.b.set(src.b.subarray(srcpos,srcpos + len),pos);
		}
	}
	,setUInt16: function(pos,v) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		this.data.setUint16(pos,v,true);
	}
	,setInt32: function(pos,v) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		this.data.setInt32(pos,v,true);
	}
	,getString: function(pos,len) {
		if(pos < 0 || len < 0 || pos + len > this.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		var s = "";
		var b = this.b;
		var fcc = String.fromCharCode;
		var i = pos;
		var max = pos + len;
		while(i < max) {
			var c = b[i++];
			if(c < 128) {
				if(c == 0) {
					break;
				}
				s += fcc(c);
			} else if(c < 224) {
				s += fcc((c & 63) << 6 | b[i++] & 127);
			} else if(c < 240) {
				s += fcc((c & 31) << 12 | (b[i++] & 127) << 6 | b[i++] & 127);
			} else {
				var u = (c & 15) << 18 | (b[i++] & 127) << 12 | (b[i++] & 127) << 6 | b[i++] & 127;
				s += fcc((u >> 10) + 55232);
				s += fcc(u & 1023 | 56320);
			}
		}
		return s;
	}
	,toString: function() {
		return this.getString(0,this.length);
	}
	,__class__: haxe_io_Bytes
};
var openfl_utils_IDataOutput = function() { };
$hxClasses["openfl.utils.IDataOutput"] = openfl_utils_IDataOutput;
openfl_utils_IDataOutput.__name__ = ["openfl","utils","IDataOutput"];
openfl_utils_IDataOutput.prototype = {
	get_endian: null
	,set_endian: null
	,objectEncoding: null
	,writeBoolean: null
	,writeByte: null
	,writeBytes: null
	,writeDouble: null
	,writeFloat: null
	,writeInt: null
	,writeMultiByte: null
	,writeShort: null
	,writeUTF: null
	,writeUTFBytes: null
	,writeUnsignedInt: null
	,__class__: openfl_utils_IDataOutput
	,__properties__: {set_endian:"set_endian",get_endian:"get_endian"}
};
var openfl_utils_IDataInput = function() { };
$hxClasses["openfl.utils.IDataInput"] = openfl_utils_IDataInput;
openfl_utils_IDataInput.__name__ = ["openfl","utils","IDataInput"];
openfl_utils_IDataInput.prototype = {
	get_bytesAvailable: null
	,get_endian: null
	,set_endian: null
	,objectEncoding: null
	,readBoolean: null
	,readByte: null
	,readBytes: null
	,readDouble: null
	,readFloat: null
	,readInt: null
	,readMultiByte: null
	,readShort: null
	,readUnsignedByte: null
	,readUnsignedInt: null
	,readUnsignedShort: null
	,readUTF: null
	,readUTFBytes: null
	,__class__: openfl_utils_IDataInput
	,__properties__: {set_endian:"set_endian",get_endian:"get_endian",get_bytesAvailable:"get_bytesAvailable"}
};
var openfl_utils_ByteArrayData = function(length) {
	if(length == null) {
		length = 0;
	}
	haxe_io_Bytes.call(this,new haxe_io_Bytes(new ArrayBuffer(length)).b.buffer);
	this.__length = length;
	this.__endian = 0;
	this.position = 0;
};
$hxClasses["openfl.utils.ByteArrayData"] = openfl_utils_ByteArrayData;
openfl_utils_ByteArrayData.__name__ = ["openfl","utils","ByteArrayData"];
openfl_utils_ByteArrayData.__interfaces__ = [openfl_utils_IDataOutput,openfl_utils_IDataInput];
openfl_utils_ByteArrayData.fromBytes = function(bytes) {
	var result = new openfl_utils_ByteArrayData();
	result.__fromBytes(bytes);
	return result;
};
openfl_utils_ByteArrayData.__super__ = haxe_io_Bytes;
openfl_utils_ByteArrayData.prototype = $extend(haxe_io_Bytes.prototype,{
	objectEncoding: null
	,position: null
	,__endian: null
	,__length: null
	,clear: function() {
		this.length = 0;
		this.position = 0;
	}
	,compress: function(algorithm) {
		if(algorithm == null) {
			algorithm = 2;
		}
		if(this.__length > this.length) {
			var cacheLength = this.length;
			this.length = this.__length;
			var data = new haxe_io_Bytes(new ArrayBuffer(cacheLength));
			data.blit(0,this,0,cacheLength);
			this.b = data.b;
			this.__length = data.length;
			this.data = data.data;
			this.length = cacheLength;
		}
		var bytes;
		switch(algorithm) {
		case 0:
			bytes = lime_utils_compress_Deflate.compress(this);
			break;
		case 1:
			bytes = lime_utils_compress_LZMA.compress(this);
			break;
		default:
			bytes = lime_utils_compress_Zlib.compress(this);
		}
		if(bytes != null) {
			this.b = bytes.b;
			this.__length = bytes.length;
			this.data = bytes.data;
			this.length = this.__length;
			this.position = this.length;
		}
	}
	,deflate: function() {
		this.compress(0);
	}
	,inflate: function() {
		this.uncompress(0);
	}
	,readBoolean: function() {
		if(this.position < this.length) {
			return this.b[this.position++] != 0;
		} else {
			throw new js__$Boot_HaxeError(new openfl_errors_EOFError());
		}
	}
	,readByte: function() {
		var value = this.readUnsignedByte();
		if((value & 128) != 0) {
			return value - 256;
		} else {
			return value;
		}
	}
	,readBytes: function(bytes,offset,length) {
		if(length == null) {
			length = 0;
		}
		if(offset == null) {
			offset = 0;
		}
		if(length == 0) {
			length = this.length - this.position;
		}
		if(this.position + length > this.length) {
			throw new js__$Boot_HaxeError(new openfl_errors_EOFError());
		}
		if(bytes.length < offset + length) {
			bytes.__resize(offset + length);
		}
		bytes.blit(offset,this,this.position,length);
		this.position += length;
	}
	,readDouble: function() {
		var ch1 = this.readInt();
		var ch2 = this.readInt();
		if(this.__endian == 1) {
			return haxe_io_FPHelper.i64ToDouble(ch1,ch2);
		} else {
			return haxe_io_FPHelper.i64ToDouble(ch2,ch1);
		}
	}
	,readFloat: function() {
		return haxe_io_FPHelper.i32ToFloat(this.readInt());
	}
	,readInt: function() {
		var ch1 = this.readUnsignedByte();
		var ch2 = this.readUnsignedByte();
		var ch3 = this.readUnsignedByte();
		var ch4 = this.readUnsignedByte();
		if(this.__endian == 1) {
			return ch4 << 24 | ch3 << 16 | ch2 << 8 | ch1;
		} else {
			return ch1 << 24 | ch2 << 16 | ch3 << 8 | ch4;
		}
	}
	,readMultiByte: function(length,charSet) {
		return this.readUTFBytes(length);
	}
	,readShort: function() {
		var ch1 = this.readUnsignedByte();
		var ch2 = this.readUnsignedByte();
		var value;
		if(this.__endian == 1) {
			value = ch2 << 8 | ch1;
		} else {
			value = ch1 << 8 | ch2;
		}
		if((value & 32768) != 0) {
			return value - 65536;
		} else {
			return value;
		}
	}
	,readUnsignedByte: function() {
		if(this.position < this.length) {
			return this.b[this.position++];
		} else {
			throw new js__$Boot_HaxeError(new openfl_errors_EOFError());
		}
	}
	,readUnsignedInt: function() {
		var ch1 = this.readUnsignedByte();
		var ch2 = this.readUnsignedByte();
		var ch3 = this.readUnsignedByte();
		var ch4 = this.readUnsignedByte();
		if(this.__endian == 1) {
			return ch4 << 24 | ch3 << 16 | ch2 << 8 | ch1;
		} else {
			return ch1 << 24 | ch2 << 16 | ch3 << 8 | ch4;
		}
	}
	,readUnsignedShort: function() {
		var ch1 = this.readUnsignedByte();
		var ch2 = this.readUnsignedByte();
		if(this.__endian == 1) {
			return (ch2 << 8) + ch1;
		} else {
			return ch1 << 8 | ch2;
		}
	}
	,readUTF: function() {
		return this.readUTFBytes(this.readUnsignedShort());
	}
	,readUTFBytes: function(length) {
		if(this.position + length > this.length) {
			throw new js__$Boot_HaxeError(new openfl_errors_EOFError());
		}
		this.position += length;
		return this.getString(this.position - length,length);
	}
	,uncompress: function(algorithm) {
		if(algorithm == null) {
			algorithm = 2;
		}
		if(this.__length > this.length) {
			var cacheLength = this.length;
			this.length = this.__length;
			var data = new haxe_io_Bytes(new ArrayBuffer(cacheLength));
			data.blit(0,this,0,cacheLength);
			this.b = data.b;
			this.__length = data.length;
			this.data = data.data;
			this.length = cacheLength;
		}
		var bytes;
		switch(algorithm) {
		case 0:
			bytes = lime_utils_compress_Deflate.decompress(this);
			break;
		case 1:
			bytes = lime_utils_compress_LZMA.decompress(this);
			break;
		default:
			bytes = lime_utils_compress_Zlib.decompress(this);
		}
		if(bytes != null) {
			this.b = bytes.b;
			this.__length = bytes.length;
			this.data = bytes.data;
			this.length = this.__length;
			this.position = this.__length;
		}
	}
	,writeBoolean: function(value) {
		this.writeByte(value ? 1 : 0);
	}
	,writeByte: function(value) {
		this.__resize(this.position + 1);
		this.b[this.position++] = value & 255 & 255;
	}
	,writeBytes: function(bytes,offset,length) {
		if(length == null) {
			length = 0;
		}
		if(offset == null) {
			offset = 0;
		}
		if(openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(bytes) == 0) {
			return;
		}
		if(length == 0) {
			length = openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(bytes) - offset;
		}
		this.__resize(this.position + length);
		this.blit(this.position,bytes,offset,length);
		this.position = this.position + length;
	}
	,writeDouble: function(value) {
		var int64 = haxe_io_FPHelper.doubleToI64(value);
		if(this.__endian == 1) {
			this.writeInt(int64.low);
			this.writeInt(int64.high);
		} else {
			this.writeInt(int64.high);
			this.writeInt(int64.low);
		}
	}
	,writeFloat: function(value) {
		this.writeInt(haxe_io_FPHelper.floatToI32(value));
	}
	,writeInt: function(value) {
		this.__resize(this.position + 4);
		if(this.__endian == 1) {
			this.b[this.position++] = value & 255;
			this.b[this.position++] = value >> 8 & 255;
			this.b[this.position++] = value >> 16 & 255;
			this.b[this.position++] = value >> 24 & 255;
		} else {
			this.b[this.position++] = value >> 24 & 255;
			this.b[this.position++] = value >> 16 & 255;
			this.b[this.position++] = value >> 8 & 255;
			this.b[this.position++] = value & 255;
		}
	}
	,writeMultiByte: function(value,charSet) {
		this.writeUTFBytes(value);
	}
	,writeShort: function(value) {
		this.__resize(this.position + 2);
		if(this.__endian == 1) {
			this.b[this.position++] = value & 255;
			this.b[this.position++] = value >> 8 & 255;
		} else {
			this.b[this.position++] = value >> 8 & 255;
			this.b[this.position++] = value & 255;
		}
	}
	,writeUnsignedInt: function(value) {
		this.writeInt(value);
	}
	,writeUTF: function(value) {
		var bytes = haxe_io_Bytes.ofString(value);
		this.writeShort(bytes.length);
		this.writeBytes(openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytes(bytes));
	}
	,writeUTFBytes: function(value) {
		haxe_io_Bytes.ofString(value);
		this.writeBytes(openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytes(haxe_io_Bytes.ofString(value)));
	}
	,__fromBytes: function(bytes) {
		this.b = bytes.b;
		this.__length = bytes.length;
		this.data = bytes.data;
		this.length = bytes.length;
	}
	,__resize: function(size) {
		if(size > this.__length) {
			var bytes = new haxe_io_Bytes(new ArrayBuffer((size + 1) * 3 >> 1));
			var cacheLength = this.length;
			this.length = this.__length;
			bytes.blit(0,this,0,this.__length);
			this.length = cacheLength;
			this.b = bytes.b;
			this.__length = bytes.length;
			this.data = bytes.data;
		}
		if(this.length < size) {
			this.length = size;
		}
	}
	,__setData: function(bytes) {
		this.b = bytes.b;
		this.__length = bytes.length;
		this.data = bytes.data;
	}
	,get_bytesAvailable: function() {
		return this.length - this.position;
	}
	,get_endian: function() {
		return this.__endian;
	}
	,set_endian: function(value) {
		return this.__endian = value;
	}
	,__class__: openfl_utils_ByteArrayData
	,__properties__: {set_endian:"set_endian",get_endian:"get_endian",get_bytesAvailable:"get_bytesAvailable"}
});
var format_swf_utils_BitArray = function(length) {
	this.bitsPending = 0;
	openfl_utils_ByteArrayData.call(this,length);
};
$hxClasses["format.swf.utils.BitArray"] = format_swf_utils_BitArray;
format_swf_utils_BitArray.__name__ = ["format","swf","utils","BitArray"];
format_swf_utils_BitArray.__super__ = openfl_utils_ByteArrayData;
format_swf_utils_BitArray.prototype = $extend(openfl_utils_ByteArrayData.prototype,{
	bitsPending: null
	,readBits: function(bits,bitBuffer) {
		if(bitBuffer == null) {
			bitBuffer = 0;
		}
		if(bits == 0) {
			return bitBuffer;
		}
		var partial;
		var bitsConsumed;
		if(this.bitsPending > 0) {
			var $byte = this.b[this.position - 1] & 255 >> 8 - this.bitsPending;
			bitsConsumed = Math.min(this.bitsPending,bits) | 0;
			this.bitsPending -= bitsConsumed;
			partial = $byte >> this.bitsPending;
		} else {
			bitsConsumed = Math.min(8,bits) | 0;
			this.bitsPending = 8 - bitsConsumed;
			partial = this.readUnsignedByte() >> this.bitsPending;
		}
		bits -= bitsConsumed;
		bitBuffer = bitBuffer << bitsConsumed | partial;
		if(bits > 0) {
			return this.readBits(bits,bitBuffer);
		} else {
			return bitBuffer;
		}
	}
	,writeBits: function(bits,value) {
		if(bits == 0) {
			return;
		}
		value &= -1 >>> 32 - bits;
		var bitsConsumed;
		if(this.bitsPending > 0) {
			if(this.bitsPending > bits) {
				this.b[this.position - 1] = (this.b[this.position - 1] | value << this.bitsPending - bits) & 255;
				bitsConsumed = bits;
				this.bitsPending -= bits;
			} else if(this.bitsPending == bits) {
				this.b[this.position - 1] = (this.b[this.position - 1] | value) & 255;
				bitsConsumed = bits;
				this.bitsPending = 0;
			} else {
				this.b[this.position - 1] = (this.b[this.position - 1] | value >> bits - this.bitsPending) & 255;
				bitsConsumed = this.bitsPending;
				this.bitsPending = 0;
			}
		} else {
			bitsConsumed = Math.min(8,bits) | 0;
			this.bitsPending = 8 - bitsConsumed;
			this.writeByte(value >> bits - bitsConsumed << this.bitsPending);
		}
		bits -= bitsConsumed;
		if(bits > 0) {
			this.writeBits(bits,value);
		}
	}
	,resetBitsPending: function() {
		this.bitsPending = 0;
	}
	,calculateMaxBits: function(signed,values) {
		var b = 0;
		var vmax = format_swf__$SWFData_SWFData_$Impl_$.MIN_FLOAT_VALUE | 0;
		if(!signed) {
			var _g = 0;
			while(_g < values.length) {
				var usvalue = values[_g];
				++_g;
				b |= usvalue;
			}
		} else {
			var _g1 = 0;
			while(_g1 < values.length) {
				var svalue = values[_g1];
				++_g1;
				if(svalue >= 0) {
					b |= svalue;
				} else {
					b |= ~svalue << 1;
				}
				if(vmax < svalue) {
					vmax = svalue;
				}
			}
		}
		var bits = 0;
		if(b > 0) {
			bits = haxe_crypto_BaseCode.encode(b == null ? "null" : "" + b,"01").length;
			if(signed && vmax > 0 && haxe_crypto_BaseCode.encode(vmax == null ? "null" : "" + vmax,"01").length >= bits) {
				++bits;
			}
		}
		return bits;
	}
	,__class__: format_swf_utils_BitArray
});
var format_swf_utils_ColorUtils = function() { };
$hxClasses["format.swf.utils.ColorUtils"] = format_swf_utils_ColorUtils;
format_swf_utils_ColorUtils.__name__ = ["format","swf","utils","ColorUtils"];
format_swf_utils_ColorUtils.alpha = function(color) {
	return (color >>> 24) / 255;
};
format_swf_utils_ColorUtils.rgb = function(color) {
	return color & 16777215;
};
format_swf_utils_ColorUtils.r = function(color) {
	return (format_swf_utils_ColorUtils.rgb(color) >> 16 & 255) / 255;
};
format_swf_utils_ColorUtils.g = function(color) {
	return (format_swf_utils_ColorUtils.rgb(color) >> 8 & 255) / 255;
};
format_swf_utils_ColorUtils.b = function(color) {
	return (format_swf_utils_ColorUtils.rgb(color) & 255) / 255;
};
format_swf_utils_ColorUtils.interpolate = function(color1,color2,ratio) {
	var r1 = format_swf_utils_ColorUtils.r(color1);
	var g1 = format_swf_utils_ColorUtils.g(color1);
	var b1 = format_swf_utils_ColorUtils.b(color1);
	var alpha1 = format_swf_utils_ColorUtils.alpha(color1);
	return (b1 + (format_swf_utils_ColorUtils.b(color2) - b1) * ratio) * 255 | 0 | ((g1 + (format_swf_utils_ColorUtils.g(color2) - g1) * ratio) * 255 | 0) << 8 | ((r1 + (format_swf_utils_ColorUtils.r(color2) - r1) * ratio) * 255 | 0) << 16 | ((alpha1 + (format_swf_utils_ColorUtils.alpha(color2) - alpha1) * ratio) * 255 | 0) << 24;
};
format_swf_utils_ColorUtils.rgbToString = function(color) {
	return format_swf_utils_StringUtils.printf("#%06x",[color & 16777215]);
};
format_swf_utils_ColorUtils.rgbaToString = function(color) {
	return format_swf_utils_StringUtils.printf("#%06x(%02x)",[color & 16777215,color >>> 24]);
};
format_swf_utils_ColorUtils.argbToString = function(color) {
	return format_swf_utils_StringUtils.printf("#(%02x)%06x",[color >>> 24,color & 16777215]);
};
var format_swf_utils_HalfPrecisionWriter = function() { };
$hxClasses["format.swf.utils.HalfPrecisionWriter"] = format_swf_utils_HalfPrecisionWriter;
format_swf_utils_HalfPrecisionWriter.__name__ = ["format","swf","utils","HalfPrecisionWriter"];
format_swf_utils_HalfPrecisionWriter.write = function(value,data) {
	data.resetBitsPending();
	var dword;
	var sign;
	var exponent;
	var significand;
	var halfSignificand;
	var signedExponent;
	var result = 0;
	var p = data.position;
	data.writeDouble(value);
	data.position -= 4;
	dword = data.readUnsignedInt();
	data.position = p;
	if((dword & 2147483647) == 0) {
		result = dword >> 16;
	} else {
		sign = dword & -2147483648;
		exponent = dword & 2146435072;
		significand = dword & 1048575;
		if(exponent == 0) {
			result = sign >> 16;
		} else if(exponent == 2146435072) {
			if(significand == 0) {
				result = sign >> 16 | 31744;
			} else {
				result = 65024;
			}
		} else {
			sign >>= 16;
			signedExponent = (exponent >> 20) - 1023 + 15;
			if(signedExponent >= 31) {
				result = significand >> 16 | 31744;
			} else if(signedExponent <= 0) {
				if(10 - signedExponent > 21) {
					halfSignificand = 0;
				} else {
					significand |= 1048576;
					halfSignificand = significand >> 11 - signedExponent;
					if((significand >> 10 - signedExponent & 1) > 0) {
						++halfSignificand;
					}
				}
				result = sign | halfSignificand;
			} else {
				exponent = signedExponent << 10;
				halfSignificand = significand >> 10;
				if((significand & 512) > 0) {
					result = (sign | exponent | halfSignificand) + 1;
				} else {
					result = sign | exponent | halfSignificand;
				}
			}
		}
	}
	data.writeShort(result);
};
var format_swf_utils_MatrixUtils = function() { };
$hxClasses["format.swf.utils.MatrixUtils"] = format_swf_utils_MatrixUtils;
format_swf_utils_MatrixUtils.__name__ = ["format","swf","utils","MatrixUtils"];
format_swf_utils_MatrixUtils.interpolate = function(matrix1,matrix2,ratio) {
	var matrix = new format_swf_data_SWFMatrix();
	matrix.scaleX = matrix1.scaleX + (matrix2.scaleX - matrix1.scaleX) * ratio;
	matrix.scaleY = matrix1.scaleY + (matrix2.scaleY - matrix1.scaleY) * ratio;
	matrix.rotateSkew0 = matrix1.rotateSkew0 + (matrix2.rotateSkew0 - matrix1.rotateSkew0) * ratio;
	matrix.rotateSkew1 = matrix1.rotateSkew1 + (matrix2.rotateSkew1 - matrix1.rotateSkew1) * ratio;
	matrix.translateX = matrix1.translateX + (matrix2.translateX - matrix1.translateX) * ratio | 0;
	matrix.translateY = matrix1.translateY + (matrix2.translateY - matrix1.translateY) * ratio | 0;
	return matrix;
};
var format_swf_utils_NumberUtils = function() { };
$hxClasses["format.swf.utils.NumberUtils"] = format_swf_utils_NumberUtils;
format_swf_utils_NumberUtils.__name__ = ["format","swf","utils","NumberUtils"];
format_swf_utils_NumberUtils.roundPixels20 = function(pixels) {
	return Math.round(pixels * 100) / 100;
};
format_swf_utils_NumberUtils.roundPixels400 = function(pixels) {
	return Math.round(pixels * 10000) / 10000;
};
var format_swf_utils_StringUtils = function() { };
$hxClasses["format.swf.utils.StringUtils"] = format_swf_utils_StringUtils;
format_swf_utils_StringUtils.__name__ = ["format","swf","utils","StringUtils"];
format_swf_utils_StringUtils.trim = function(input) {
	return format_swf_utils_StringUtils.ltrim(format_swf_utils_StringUtils.rtrim(input));
};
format_swf_utils_StringUtils.ltrim = function(input) {
	if(input != null) {
		var size = input.length;
		var _g1 = 0;
		while(_g1 < size) {
			var i = _g1++;
			if(HxOverrides.cca(input,i) > 32) {
				return input.substring(i);
			}
		}
	}
	return "";
};
format_swf_utils_StringUtils.rtrim = function(input) {
	if(input != null) {
		var i = input.length;
		while(i > 0) {
			if(HxOverrides.cca(input,i - 1) > 32) {
				return input.substring(0,i);
			}
			--i;
		}
	}
	return "";
};
format_swf_utils_StringUtils.simpleEscape = function(input) {
	input = input.split("\n").join("\\n");
	input = input.split("\r").join("\\r");
	input = input.split("\t").join("\\t");
	return input;
};
format_swf_utils_StringUtils.strictEscape = function(input,trim) {
	if(trim == null) {
		trim = true;
	}
	if(input != null && input.length > 0) {
		if(trim) {
			input = format_swf_utils_StringUtils.trim(input);
		}
		input = encodeURIComponent(input);
		var a = input.split("");
		var _g1 = 0;
		var _g = a.length;
		while(_g1 < _g) {
			var i = _g1++;
			switch(a[i]) {
			case "!":
				a[i] = "%21";
				break;
			case "'":
				a[i] = "%27";
				break;
			case "(":
				a[i] = "%28";
				break;
			case ")":
				a[i] = "%29";
				break;
			case "*":
				a[i] = "%2A";
				break;
			case "-":
				a[i] = "%2D";
				break;
			case ".":
				a[i] = "%2E";
				break;
			case "_":
				a[i] = "%5F";
				break;
			case "~":
				a[i] = "%7E";
				break;
			}
		}
		return a.join("");
	}
	return "";
};
format_swf_utils_StringUtils.repeat = function(n,str) {
	if(str == null) {
		str = " ";
	}
	var ret = "";
	var _g1 = 0;
	while(_g1 < n) {
		++_g1;
		ret += str;
	}
	return ret;
};
format_swf_utils_StringUtils.printf = function(format1,args) {
	var result = "";
	var indexValue = 0;
	var isIndexed = -1;
	var typeLookup = "diufFeEgGxXoscpn";
	var i = 0;
	try {
		while(i < format1.length) {
			var c = format1.charAt(i);
			if(c == "%") {
				if(++i < format1.length) {
					c = format1.charAt(i);
					if(c == "%") {
						result += c;
					} else {
						var flagSign = false;
						var flagLeftAlign = false;
						var flagAlternate = false;
						var flagLeftPad = false;
						var flagZeroPad = false;
						var width = -1;
						var precision = -1;
						var type = "";
						var value;
						var j;
						var idx = format_swf_utils_StringUtils.getIndex(format1);
						if(idx < -1 || idx == 0) {
							haxe_Log.trace("ERR parsing index",{ fileName : "StringUtils.hx", lineNumber : 118, className : "format.swf.utils.StringUtils", methodName : "printf"});
							throw "__break__";
						} else if(idx == -1) {
							if(isIndexed == 1) {
								haxe_Log.trace("ERR: indexed placeholder expected",{ fileName : "StringUtils.hx", lineNumber : 121, className : "format.swf.utils.StringUtils", methodName : "printf"});
								throw "__break__";
							}
							if(isIndexed == -1) {
								isIndexed = 0;
							}
							++indexValue;
						} else {
							if(isIndexed == 0) {
								haxe_Log.trace("ERR: non-indexed placeholder expected",{ fileName : "StringUtils.hx", lineNumber : 125, className : "format.swf.utils.StringUtils", methodName : "printf"});
								throw "__break__";
							}
							if(isIndexed == -1) {
								isIndexed = 1;
							}
							indexValue = idx;
						}
						c = format1.charAt(i);
						while(c == "+" || c == "-" || c == "#" || c == " " || c == "0") {
							switch(c) {
							case " ":
								flagLeftPad = true;
								break;
							case "#":
								flagAlternate = true;
								break;
							case "+":
								flagSign = true;
								break;
							case "-":
								flagLeftAlign = true;
								break;
							case "0":
								flagZeroPad = true;
								break;
							}
							if(++i == format1.length) {
								break;
							}
							c = format1.charAt(i);
						}
						if(i == format1.length) {
							throw "__break__";
						}
						if(c == "*") {
							var widthIndex = 0;
							if(++i == format1.length) {
								throw "__break__";
							}
							idx = format_swf_utils_StringUtils.getIndex(format1);
							if(idx < -1 || idx == 0) {
								haxe_Log.trace("ERR parsing index for width",{ fileName : "StringUtils.hx", lineNumber : 155, className : "format.swf.utils.StringUtils", methodName : "printf"});
								throw "__break__";
							} else if(idx == -1) {
								if(isIndexed == 1) {
									haxe_Log.trace("ERR: indexed placeholder expected for width",{ fileName : "StringUtils.hx", lineNumber : 158, className : "format.swf.utils.StringUtils", methodName : "printf"});
									throw "__break__";
								}
								if(isIndexed == -1) {
									isIndexed = 0;
								}
								widthIndex = indexValue++;
							} else {
								if(isIndexed == 0) {
									haxe_Log.trace("ERR: non-indexed placeholder expected for width",{ fileName : "StringUtils.hx", lineNumber : 162, className : "format.swf.utils.StringUtils", methodName : "printf"});
									throw "__break__";
								}
								if(isIndexed == -1) {
									isIndexed = 1;
								}
								widthIndex = idx;
							}
							--widthIndex;
							if(args.length > widthIndex && widthIndex >= 0) {
								width = args[widthIndex] | 0;
								if(isNaN(width)) {
									width = -1;
									haxe_Log.trace("ERR NaN while parsing width",{ fileName : "StringUtils.hx", lineNumber : 171, className : "format.swf.utils.StringUtils", methodName : "printf"});
									throw "__break__";
								}
							} else {
								haxe_Log.trace("ERR index out of bounds while parsing width",{ fileName : "StringUtils.hx", lineNumber : 175, className : "format.swf.utils.StringUtils", methodName : "printf"});
								throw "__break__";
							}
							c = format1.charAt(i);
						} else {
							while(c >= "0" && c <= "9") {
								if(width == -1) {
									width = 0;
								}
								width = width * 10 + Std.parseInt(c);
								if(++i == format1.length) {
									break;
								}
								c = format1.charAt(i);
							}
							if(width != -1 && i == format1.length) {
								haxe_Log.trace("ERR eof while parsing width",{ fileName : "StringUtils.hx", lineNumber : 188, className : "format.swf.utils.StringUtils", methodName : "printf"});
								throw "__break__";
							}
						}
						if(c == ".") {
							if(++i == format1.length) {
								throw "__break__";
							}
							c = format1.charAt(i);
							if(c == "*") {
								var precisionIndex = 0;
								if(++i == format1.length) {
									throw "__break__";
								}
								idx = format_swf_utils_StringUtils.getIndex(format1);
								if(idx < -1 || idx == 0) {
									haxe_Log.trace("ERR parsing index for precision",{ fileName : "StringUtils.hx", lineNumber : 204, className : "format.swf.utils.StringUtils", methodName : "printf"});
									throw "__break__";
								} else if(idx == -1) {
									if(isIndexed == 1) {
										haxe_Log.trace("ERR: indexed placeholder expected for precision",{ fileName : "StringUtils.hx", lineNumber : 207, className : "format.swf.utils.StringUtils", methodName : "printf"});
										throw "__break__";
									}
									if(isIndexed == -1) {
										isIndexed = 0;
									}
									precisionIndex = indexValue++;
								} else {
									if(isIndexed == 0) {
										haxe_Log.trace("ERR: non-indexed placeholder expected for precision",{ fileName : "StringUtils.hx", lineNumber : 211, className : "format.swf.utils.StringUtils", methodName : "printf"});
										throw "__break__";
									}
									if(isIndexed == -1) {
										isIndexed = 1;
									}
									precisionIndex = idx;
								}
								--precisionIndex;
								if(args.length > precisionIndex && precisionIndex >= 0) {
									precision = args[precisionIndex] | 0;
									if(isNaN(precision)) {
										precision = -1;
										haxe_Log.trace("ERR NaN while parsing precision",{ fileName : "StringUtils.hx", lineNumber : 220, className : "format.swf.utils.StringUtils", methodName : "printf"});
										throw "__break__";
									}
								} else {
									haxe_Log.trace("ERR index out of bounds while parsing precision",{ fileName : "StringUtils.hx", lineNumber : 224, className : "format.swf.utils.StringUtils", methodName : "printf"});
									throw "__break__";
								}
								c = format1.charAt(i);
							} else {
								while(c >= "0" && c <= "9") {
									if(precision == -1) {
										precision = 0;
									}
									precision = precision * 10 + Std.parseInt(c);
									if(++i == format1.length) {
										break;
									}
									c = format1.charAt(i);
								}
								if(precision != -1 && i == format1.length) {
									haxe_Log.trace("ERR eof while parsing precision",{ fileName : "StringUtils.hx", lineNumber : 236, className : "format.swf.utils.StringUtils", methodName : "printf"});
									throw "__break__";
								}
							}
						}
						switch(c) {
						case "L":
							break;
						case "h":
							break;
						case "j":
							break;
						case "l":
							if(++i == format1.length) {
								haxe_Log.trace("ERR eof after length",{ fileName : "StringUtils.hx", lineNumber : 248, className : "format.swf.utils.StringUtils", methodName : "printf"});
								throw "__break__";
							}
							var c1 = format1.charAt(i);
							if(c == "h" && c1 == "h" || c == "l" && c1 == "l") {
								if(++i == format1.length) {
									haxe_Log.trace("ERR eof after length",{ fileName : "StringUtils.hx", lineNumber : 251, className : "format.swf.utils.StringUtils", methodName : "printf"});
									throw "__break__";
								}
								c = format1.charAt(i);
							} else {
								c = c1;
							}
							throw "__break__";
							break;
						case "t":
							if(++i == format1.length) {
								haxe_Log.trace("ERR eof after length",{ fileName : "StringUtils.hx", lineNumber : 261, className : "format.swf.utils.StringUtils", methodName : "printf"});
								throw "__break__";
							}
							c = format1.charAt(i);
							throw "__break__";
							break;
						case "z":
							break;
						}
						if(typeLookup.indexOf(c) >= 0) {
							type = c;
						} else {
							haxe_Log.trace("ERR unknown type: " + c,{ fileName : "StringUtils.hx", lineNumber : 272, className : "format.swf.utils.StringUtils", methodName : "printf"});
							throw "__break__";
						}
						if(args.length >= indexValue && indexValue > 0) {
							value = args[indexValue - 1];
						} else {
							haxe_Log.trace("ERR value index out of bounds (" + indexValue + ")",{ fileName : "StringUtils.hx", lineNumber : 279, className : "format.swf.utils.StringUtils", methodName : "printf"});
							throw "__break__";
						}
						var valueStr = "";
						var valueFloat;
						var valueInt;
						var sign = 0;
						switch(type) {
						case "E":
							break;
						case "F":
							break;
						case "G":
							if(precision == -1) {
								precision = 6;
							}
							var exp10 = Math.pow(10,precision);
							if(typeof(value) == "number") {
								valueFloat = value;
							} else {
								valueFloat = parseFloat(Std.string(value));
							}
							valueStr = Std.string(Math.round(Math.abs(valueFloat) * exp10) / exp10);
							if(precision > 0) {
								var numZerosToAppend;
								var dotPos = valueStr.indexOf(".");
								if(dotPos == -1) {
									valueStr += ".";
									numZerosToAppend = precision;
								} else {
									numZerosToAppend = precision - (valueStr.length - dotPos - 1);
								}
								var _g1 = 0;
								var _g = numZerosToAppend;
								while(_g1 < _g) {
									_g1++;
									valueStr += "0";
								}
							}
							if(valueFloat < 0) {
								sign = 1;
							} else {
								sign = -1;
							}
							throw "__break__";
							break;
						case "X":
							break;
						case "c":
							valueStr = Std.string(value).charAt(0);
							throw "__break__";
							break;
						case "d":
							break;
						case "e":
							break;
						case "f":
							break;
						case "g":
							break;
						case "i":
							if(typeof(value) == "number") {
								valueInt = value;
							} else {
								valueInt = Std.parseInt(Std.string(value));
							}
							valueStr = Std.string(Math.abs(valueInt));
							if(valueInt < 0) {
								sign = 1;
							} else {
								sign = -1;
							}
							throw "__break__";
							break;
						case "o":
							valueStr = haxe_crypto_BaseCode.encode(Std.string(typeof(value) == "number" ? value | 0 : value | 0),"01234567");
							throw "__break__";
							break;
						case "p":
							if(typeof(value) == "number") {
								valueStr = Std.string(value | 0);
							} else {
								valueStr = StringTools.hex(Std.parseInt(value));
							}
							if(type == "X") {
								valueStr = valueStr.toUpperCase();
							}
							throw "__break__";
							break;
						case "s":
							valueStr = Std.string(value);
							if(precision != -1) {
								valueStr = HxOverrides.substr(valueStr,0,precision);
							}
							throw "__break__";
							break;
						case "u":
							valueStr = Std.string(typeof(value) == "number" ? value : Std.parseInt(Std.string(value)));
							throw "__break__";
							break;
						case "x":
							break;
						}
						var hasSign = sign == 1 || flagSign || flagLeftPad;
						if(width > -1) {
							var numFill = width - valueStr.length;
							if(hasSign) {
								--numFill;
							}
							if(numFill > 0) {
								var fillChar = flagZeroPad && !flagLeftAlign ? "0" : " ";
								if(flagLeftAlign) {
									var _g11 = 0;
									var _g2 = numFill;
									while(_g11 < _g2) {
										_g11++;
										valueStr += fillChar;
									}
								} else {
									var _g12 = 0;
									var _g3 = numFill;
									while(_g12 < _g3) {
										_g12++;
										valueStr = fillChar + valueStr;
									}
								}
							}
						}
						if(hasSign) {
							if(sign == -1) {
								valueStr = (flagLeftPad ? " " : "0") + valueStr;
							} else {
								valueStr = "-" + valueStr;
							}
						}
						result += valueStr;
					}
				} else {
					result += c;
				}
			} else {
				result += c;
			}
			++i;
		}
	} catch( e ) { if( e != "__break__" ) throw e; }
	return result;
};
format_swf_utils_StringUtils.getIndex = function(format1) {
	var result = 0;
	var isIndexed = false;
	var c = "";
	var iTmp = format_swf_utils_StringUtils.i;
	while(true) {
		var tmp;
		c = format1.charAt(format_swf_utils_StringUtils.i);
		if(c >= "0") {
			tmp = c <= "9";
		} else {
			tmp = false;
		}
		if(!tmp) {
			break;
		}
		isIndexed = true;
		result = result * 10 + Std.parseInt(c);
		if(++format_swf_utils_StringUtils.i == format1.length) {
			return -2;
		}
	}
	if(isIndexed) {
		if(c != "$") {
			format_swf_utils_StringUtils.i = iTmp;
			return -1;
		}
		if(++format_swf_utils_StringUtils.i == format1.length) {
			return -2;
		}
		return result;
	} else {
		return -1;
	}
};
var haxe_StackItem = $hxClasses["haxe.StackItem"] = { __ename__ : ["haxe","StackItem"], __constructs__ : ["CFunction","Module","FilePos","Method","LocalFunction"] };
haxe_StackItem.CFunction = ["CFunction",0];
haxe_StackItem.CFunction.toString = $estr;
haxe_StackItem.CFunction.__enum__ = haxe_StackItem;
haxe_StackItem.Module = function(m) { var $x = ["Module",1,m]; $x.__enum__ = haxe_StackItem; $x.toString = $estr; return $x; };
haxe_StackItem.FilePos = function(s,file,line) { var $x = ["FilePos",2,s,file,line]; $x.__enum__ = haxe_StackItem; $x.toString = $estr; return $x; };
haxe_StackItem.Method = function(classname,method) { var $x = ["Method",3,classname,method]; $x.__enum__ = haxe_StackItem; $x.toString = $estr; return $x; };
haxe_StackItem.LocalFunction = function(v) { var $x = ["LocalFunction",4,v]; $x.__enum__ = haxe_StackItem; $x.toString = $estr; return $x; };
haxe_StackItem.__empty_constructs__ = [haxe_StackItem.CFunction];
var haxe_CallStack = function() { };
$hxClasses["haxe.CallStack"] = haxe_CallStack;
haxe_CallStack.__name__ = ["haxe","CallStack"];
haxe_CallStack.getStack = function(e) {
	if(e == null) {
		return [];
	}
	var oldValue = Error.prepareStackTrace;
	Error.prepareStackTrace = function(error,callsites) {
		var stack = [];
		var _g = 0;
		while(_g < callsites.length) {
			var site = callsites[_g];
			++_g;
			if(haxe_CallStack.wrapCallSite != null) {
				site = haxe_CallStack.wrapCallSite(site);
			}
			var method = null;
			var fullName = site.getFunctionName();
			if(fullName != null) {
				var idx = fullName.lastIndexOf(".");
				if(idx >= 0) {
					var className = HxOverrides.substr(fullName,0,idx);
					var methodName = HxOverrides.substr(fullName,idx + 1,null);
					method = haxe_StackItem.Method(className,methodName);
				}
			}
			stack.push(haxe_StackItem.FilePos(method,site.getFileName(),site.getLineNumber()));
		}
		return stack;
	};
	var a = haxe_CallStack.makeStack(e.stack);
	Error.prepareStackTrace = oldValue;
	return a;
};
haxe_CallStack.callStack = function() {
	try {
		throw new Error();
	} catch( e ) {
		haxe_CallStack.lastException = e;
		if (e instanceof js__$Boot_HaxeError) e = e.val;
		var a = haxe_CallStack.getStack(e);
		a.shift();
		return a;
	}
};
haxe_CallStack.exceptionStack = function() {
	return haxe_CallStack.getStack(haxe_CallStack.lastException);
};
haxe_CallStack.toString = function(stack) {
	var b = new StringBuf();
	var _g = 0;
	while(_g < stack.length) {
		var s = stack[_g];
		++_g;
		b.b += "\nCalled from ";
		haxe_CallStack.itemToString(b,s);
	}
	return b.b;
};
haxe_CallStack.itemToString = function(b,s) {
	switch(s[1]) {
	case 0:
		b.b += "a C function";
		break;
	case 1:
		var m = s[2];
		b.b = (b.b += "module ") + (m == null ? "null" : "" + m);
		break;
	case 2:
		var line = s[4];
		var file = s[3];
		var s1 = s[2];
		if(s1 != null) {
			haxe_CallStack.itemToString(b,s1);
			b.b += " (";
		}
		b.b = (b.b += file == null ? "null" : "" + file) + " line ";
		b.b += line == null ? "null" : "" + line;
		if(s1 != null) {
			b.b += ")";
		}
		break;
	case 3:
		var meth = s[3];
		var cname = s[2];
		b.b = (b.b += cname == null ? "null" : "" + cname) + ".";
		b.b += meth == null ? "null" : "" + meth;
		break;
	case 4:
		var n = s[2];
		b.b = (b.b += "local function #") + (n == null ? "null" : "" + n);
		break;
	}
};
haxe_CallStack.makeStack = function(s) {
	if(s == null) {
		return [];
	} else if(typeof(s) == "string") {
		var stack = s.split("\n");
		if(stack[0] == "Error") {
			stack.shift();
		}
		var m = [];
		var rie10 = new EReg("^   at ([A-Za-z0-9_. ]+) \\(([^)]+):([0-9]+):([0-9]+)\\)$","");
		var _g = 0;
		while(_g < stack.length) {
			var line = stack[_g];
			++_g;
			if(rie10.match(line)) {
				var path = rie10.matched(1).split(".");
				var meth = path.pop();
				var file = rie10.matched(2);
				var line1 = Std.parseInt(rie10.matched(3));
				m.push(haxe_StackItem.FilePos(meth == "Anonymous function" ? haxe_StackItem.LocalFunction() : meth == "Global code" ? null : haxe_StackItem.Method(path.join("."),meth),file,line1));
			} else {
				m.push(haxe_StackItem.Module(StringTools.trim(line)));
			}
		}
		return m;
	} else {
		return s;
	}
};
var haxe_IMap = function() { };
$hxClasses["haxe.IMap"] = haxe_IMap;
haxe_IMap.__name__ = ["haxe","IMap"];
haxe_IMap.prototype = {
	get: null
	,set: null
	,exists: null
	,remove: null
	,__class__: haxe_IMap
};
var haxe__$Int64__$_$_$Int64 = function(high,low) {
	this.high = high;
	this.low = low;
};
$hxClasses["haxe._Int64.___Int64"] = haxe__$Int64__$_$_$Int64;
haxe__$Int64__$_$_$Int64.__name__ = ["haxe","_Int64","___Int64"];
haxe__$Int64__$_$_$Int64.prototype = {
	high: null
	,low: null
	,__class__: haxe__$Int64__$_$_$Int64
};
var haxe_Log = function() { };
$hxClasses["haxe.Log"] = haxe_Log;
haxe_Log.__name__ = ["haxe","Log"];
haxe_Log.trace = function(v,infos) {
	js_Boot.__trace(v,infos);
};
var haxe_Serializer = function() {
	this.buf = new StringBuf();
	this.cache = [];
	this.useCache = haxe_Serializer.USE_CACHE;
	this.useEnumIndex = haxe_Serializer.USE_ENUM_INDEX;
	this.shash = new haxe_ds_StringMap();
	this.scount = 0;
};
$hxClasses["haxe.Serializer"] = haxe_Serializer;
haxe_Serializer.__name__ = ["haxe","Serializer"];
haxe_Serializer.prototype = {
	buf: null
	,cache: null
	,shash: null
	,scount: null
	,useCache: null
	,useEnumIndex: null
	,toString: function() {
		return this.buf.b;
	}
	,serializeString: function(s) {
		var _this = this.shash;
		var x = __map_reserved[s] != null ? _this.getReserved(s) : _this.h[s];
		if(x != null) {
			this.buf.b += "R";
			this.buf.b += x == null ? "null" : "" + x;
			return;
		}
		var _this1 = this.shash;
		var value = this.scount++;
		if(__map_reserved[s] != null) {
			_this1.setReserved(s,value);
		} else {
			_this1.h[s] = value;
		}
		this.buf.b += "y";
		s = encodeURIComponent(s);
		this.buf.b += Std.string(s.length);
		this.buf.b += ":";
		this.buf.b += s == null ? "null" : "" + s;
	}
	,serializeRef: function(v) {
		var vt = typeof(v);
		var _g1 = 0;
		var _g = this.cache.length;
		while(_g1 < _g) {
			var i = _g1++;
			var ci = this.cache[i];
			if(typeof(ci) == vt && ci == v) {
				this.buf.b += "r";
				this.buf.b += i == null ? "null" : "" + i;
				return true;
			}
		}
		this.cache.push(v);
		return false;
	}
	,serializeFields: function(v) {
		var _g = 0;
		var _g1 = Reflect.fields(v);
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			this.serializeString(f);
			this.serialize(Reflect.field(v,f));
		}
		this.buf.b += "g";
	}
	,serialize: function(v) {
		var _g = Type["typeof"](v);
		switch(_g[1]) {
		case 0:
			this.buf.b += "n";
			break;
		case 1:
			var v1 = v;
			if(v1 == 0) {
				this.buf.b += "z";
				return;
			}
			this.buf.b += "i";
			this.buf.b += v1 == null ? "null" : "" + v1;
			break;
		case 2:
			var v2 = v;
			if(isNaN(v2)) {
				this.buf.b += "k";
			} else if(!isFinite(v2)) {
				this.buf.b += v2 < 0 ? "m" : "p";
			} else {
				this.buf.b += "d";
				this.buf.b += v2 == null ? "null" : "" + v2;
			}
			break;
		case 3:
			this.buf.b += v ? "t" : "f";
			break;
		case 4:
			if(js_Boot.__instanceof(v,Class)) {
				var className = Type.getClassName(v);
				this.buf.b += "A";
				this.serializeString(className);
			} else if(js_Boot.__instanceof(v,Enum)) {
				this.buf.b += "B";
				this.serializeString(Type.getEnumName(v));
			} else {
				if(this.useCache && this.serializeRef(v)) {
					return;
				}
				this.buf.b += "o";
				this.serializeFields(v);
			}
			break;
		case 5:
			throw new js__$Boot_HaxeError("Cannot serialize function");
			break;
		case 6:
			var c = _g[2];
			if(c == String) {
				this.serializeString(v);
				return;
			}
			if(this.useCache && this.serializeRef(v)) {
				return;
			}
			switch(c) {
			case Array:
				var ucount = 0;
				this.buf.b += "a";
				var _g1 = 0;
				var _g2 = v["length"];
				while(_g1 < _g2) {
					var i = _g1++;
					if(v[i] == null) {
						++ucount;
					} else {
						if(ucount > 0) {
							if(ucount == 1) {
								this.buf.b += "n";
							} else {
								this.buf.b += "u";
								this.buf.b += ucount == null ? "null" : "" + ucount;
							}
							ucount = 0;
						}
						this.serialize(v[i]);
					}
				}
				if(ucount > 0) {
					if(ucount == 1) {
						this.buf.b += "n";
					} else {
						this.buf.b += "u";
						this.buf.b += ucount == null ? "null" : "" + ucount;
					}
				}
				this.buf.b += "h";
				break;
			case Date:
				this.buf.b += "v";
				this.buf.b += Std.string(v.getTime());
				break;
			case List:
				this.buf.b += "l";
				var _g_head = v.h;
				while(_g_head != null) {
					var val = _g_head.item;
					_g_head = _g_head.next;
					this.serialize(val);
				}
				this.buf.b += "h";
				break;
			case haxe_ds_IntMap:
				this.buf.b += "q";
				var v3 = v;
				var k = v3.keys();
				while(k.hasNext()) {
					var k1 = k.next();
					this.buf.b += ":";
					this.buf.b += k1 == null ? "null" : "" + k1;
					this.serialize(v3.h[k1]);
				}
				this.buf.b += "h";
				break;
			case haxe_ds_ObjectMap:
				this.buf.b += "M";
				var v4 = v;
				var k2 = v4.keys();
				while(k2.hasNext()) {
					var k3 = k2.next();
					var id = Reflect.field(k3,"__id__");
					Reflect.deleteField(k3,"__id__");
					this.serialize(k3);
					k3["__id__"] = id;
					this.serialize(v4.h[k3.__id__]);
				}
				this.buf.b += "h";
				break;
			case haxe_ds_StringMap:
				this.buf.b += "b";
				var v5 = v;
				var k4 = v5.keys();
				while(k4.hasNext()) {
					var k5 = k4.next();
					this.serializeString(k5);
					this.serialize(__map_reserved[k5] != null ? v5.getReserved(k5) : v5.h[k5]);
				}
				this.buf.b += "h";
				break;
			case haxe_io_Bytes:
				var v6 = v;
				this.buf.b += "s";
				this.buf.b += Std.string(Math.ceil(v6.length * 8 / 6));
				this.buf.b += ":";
				var i1 = 0;
				var max = v6.length - 2;
				var b64 = haxe_Serializer.BASE64_CODES;
				if(b64 == null) {
					var length = haxe_Serializer.BASE64.length;
					b64 = new Array(length);
					var _g11 = 0;
					var _g3 = haxe_Serializer.BASE64.length;
					while(_g11 < _g3) {
						var i2 = _g11++;
						b64[i2] = HxOverrides.cca(haxe_Serializer.BASE64,i2);
					}
					haxe_Serializer.BASE64_CODES = b64;
				}
				while(i1 < max) {
					var b1 = v6.b[i1++];
					var b2 = v6.b[i1++];
					var b3 = v6.b[i1++];
					this.buf.b += String.fromCharCode(b64[b1 >> 2]);
					this.buf.b += String.fromCharCode(b64[(b1 << 4 | b2 >> 4) & 63]);
					this.buf.b += String.fromCharCode(b64[(b2 << 2 | b3 >> 6) & 63]);
					this.buf.b += String.fromCharCode(b64[b3 & 63]);
				}
				if(i1 == max) {
					var b11 = v6.b[i1++];
					var b21 = v6.b[i1++];
					this.buf.b += String.fromCharCode(b64[b11 >> 2]);
					this.buf.b += String.fromCharCode(b64[(b11 << 4 | b21 >> 4) & 63]);
					this.buf.b += String.fromCharCode(b64[b21 << 2 & 63]);
				} else if(i1 == max + 1) {
					var b12 = v6.b[i1++];
					this.buf.b += String.fromCharCode(b64[b12 >> 2]);
					this.buf.b += String.fromCharCode(b64[b12 << 4 & 63]);
				}
				break;
			default:
				if(this.useCache) {
					this.cache.pop();
				}
				if(v.hxSerialize != null) {
					this.buf.b += "C";
					this.serializeString(Type.getClassName(c));
					if(this.useCache) {
						this.cache.push(v);
					}
					v.hxSerialize(this);
					this.buf.b += "g";
				} else {
					this.buf.b += "c";
					this.serializeString(Type.getClassName(c));
					if(this.useCache) {
						this.cache.push(v);
					}
					this.serializeFields(v);
				}
			}
			break;
		case 7:
			if(this.useCache) {
				if(this.serializeRef(v)) {
					return;
				}
				this.cache.pop();
			}
			this.buf.b += Std.string(this.useEnumIndex ? "j" : "w");
			this.serializeString(Type.getEnumName(_g[2]));
			if(this.useEnumIndex) {
				this.buf.b += ":";
				this.buf.b += Std.string(v[1]);
			} else {
				this.serializeString(v[0]);
			}
			this.buf.b += ":";
			var l = v["length"];
			this.buf.b += Std.string(l - 2);
			var _g12 = 2;
			var _g4 = l;
			while(_g12 < _g4) this.serialize(v[_g12++]);
			if(this.useCache) {
				this.cache.push(v);
			}
			break;
		default:
			throw new js__$Boot_HaxeError("Cannot serialize " + Std.string(v));
		}
	}
	,__class__: haxe_Serializer
};
var haxe_Timer = function(time_ms) {
	var me = this;
	this.id = setInterval(function() {
		me.run();
	},time_ms);
};
$hxClasses["haxe.Timer"] = haxe_Timer;
haxe_Timer.__name__ = ["haxe","Timer"];
haxe_Timer.delay = function(f,time_ms) {
	var t = new haxe_Timer(time_ms);
	t.run = function() {
		t.stop();
		f();
	};
	return t;
};
haxe_Timer.measure = function(f,pos) {
	var t0 = haxe_Timer.stamp();
	var r = f();
	haxe_Log.trace(haxe_Timer.stamp() - t0 + "s",pos);
	return r;
};
haxe_Timer.stamp = function() {
	return new Date().getTime() / 1000;
};
haxe_Timer.prototype = {
	id: null
	,stop: function() {
		if(this.id == null) {
			return;
		}
		clearInterval(this.id);
		this.id = null;
	}
	,run: function() {
	}
	,__class__: haxe_Timer
};
var haxe__$Unserializer_DefaultResolver = function() {
};
$hxClasses["haxe._Unserializer.DefaultResolver"] = haxe__$Unserializer_DefaultResolver;
haxe__$Unserializer_DefaultResolver.__name__ = ["haxe","_Unserializer","DefaultResolver"];
haxe__$Unserializer_DefaultResolver.prototype = {
	resolveClass: function(name) {
		return Type.resolveClass(name);
	}
	,resolveEnum: function(name) {
		return Type.resolveEnum(name);
	}
	,__class__: haxe__$Unserializer_DefaultResolver
};
var haxe_Unserializer = function(buf) {
	this.buf = buf;
	this.length = buf.length;
	this.pos = 0;
	this.scache = [];
	this.cache = [];
	var r = haxe_Unserializer.DEFAULT_RESOLVER;
	if(r == null) {
		r = new haxe__$Unserializer_DefaultResolver();
		haxe_Unserializer.DEFAULT_RESOLVER = r;
	}
	this.resolver = r;
};
$hxClasses["haxe.Unserializer"] = haxe_Unserializer;
haxe_Unserializer.__name__ = ["haxe","Unserializer"];
haxe_Unserializer.initCodes = function() {
	var codes = [];
	var _g1 = 0;
	var _g = haxe_Unserializer.BASE64.length;
	while(_g1 < _g) {
		var i = _g1++;
		codes[haxe_Unserializer.BASE64.charCodeAt(i)] = i;
	}
	return codes;
};
haxe_Unserializer.prototype = {
	buf: null
	,pos: null
	,length: null
	,cache: null
	,scache: null
	,resolver: null
	,setResolver: function(r) {
		if(r == null) {
			if(haxe__$Unserializer_NullResolver.instance == null) {
				haxe__$Unserializer_NullResolver.instance = new haxe__$Unserializer_NullResolver();
			}
			this.resolver = haxe__$Unserializer_NullResolver.instance;
		} else {
			this.resolver = r;
		}
	}
	,readDigits: function() {
		var k = 0;
		var s = false;
		var fpos = this.pos;
		while(true) {
			var c = this.buf.charCodeAt(this.pos);
			if(c != c) {
				break;
			}
			if(c == 45) {
				if(this.pos != fpos) {
					break;
				}
				s = true;
				this.pos++;
				continue;
			}
			if(c < 48 || c > 57) {
				break;
			}
			k = k * 10 + (c - 48);
			this.pos++;
		}
		if(s) {
			k *= -1;
		}
		return k;
	}
	,readFloat: function() {
		var p1 = this.pos;
		while(true) {
			var c = this.buf.charCodeAt(this.pos);
			if(c != c) {
				break;
			}
			if(c >= 43 && c < 58 || c == 101 || c == 69) {
				this.pos++;
			} else {
				break;
			}
		}
		return parseFloat(HxOverrides.substr(this.buf,p1,this.pos - p1));
	}
	,unserializeObject: function(o) {
		while(true) {
			if(this.pos >= this.length) {
				throw new js__$Boot_HaxeError("Invalid object");
			}
			if(this.buf.charCodeAt(this.pos) == 103) {
				break;
			}
			var k = this.unserialize();
			if(typeof(k) != "string") {
				throw new js__$Boot_HaxeError("Invalid object key");
			}
			o[k] = this.unserialize();
		}
		this.pos++;
	}
	,unserializeEnum: function(edecl,tag) {
		if(this.buf.charCodeAt(this.pos++) != 58) {
			throw new js__$Boot_HaxeError("Invalid enum format");
		}
		var nargs = this.readDigits();
		if(nargs == 0) {
			return Type.createEnum(edecl,tag);
		}
		var args = [];
		while(nargs-- > 0) args.push(this.unserialize());
		return Type.createEnum(edecl,tag,args);
	}
	,unserialize: function() {
		switch(this.buf.charCodeAt(this.pos++)) {
		case 65:
			var name = this.unserialize();
			var cl = this.resolver.resolveClass(name);
			if(cl == null) {
				throw new js__$Boot_HaxeError("Class not found " + name);
			}
			return cl;
		case 66:
			var name1 = this.unserialize();
			var e = this.resolver.resolveEnum(name1);
			if(e == null) {
				throw new js__$Boot_HaxeError("Enum not found " + name1);
			}
			return e;
		case 67:
			var name2 = this.unserialize();
			var cl1 = this.resolver.resolveClass(name2);
			if(cl1 == null) {
				throw new js__$Boot_HaxeError("Class not found " + name2);
			}
			var o = Type.createEmptyInstance(cl1);
			this.cache.push(o);
			o.hxUnserialize(this);
			if(this.buf.charCodeAt(this.pos++) != 103) {
				throw new js__$Boot_HaxeError("Invalid custom data");
			}
			return o;
		case 77:
			var h = new haxe_ds_ObjectMap();
			this.cache.push(h);
			while(this.buf.charCodeAt(this.pos) != 104) h.set(this.unserialize(),this.unserialize());
			this.pos++;
			return h;
		case 82:
			var n = this.readDigits();
			if(n < 0 || n >= this.scache.length) {
				throw new js__$Boot_HaxeError("Invalid string reference");
			}
			return this.scache[n];
		case 97:
			var a = [];
			this.cache.push(a);
			while(true) {
				var c = this.buf.charCodeAt(this.pos);
				if(c == 104) {
					this.pos++;
					break;
				}
				if(c == 117) {
					this.pos++;
					var n1 = this.readDigits();
					a[a.length + n1 - 1] = null;
				} else {
					a.push(this.unserialize());
				}
			}
			return a;
		case 98:
			var h1 = new haxe_ds_StringMap();
			this.cache.push(h1);
			while(this.buf.charCodeAt(this.pos) != 104) {
				var s = this.unserialize();
				var value = this.unserialize();
				if(__map_reserved[s] != null) {
					h1.setReserved(s,value);
				} else {
					h1.h[s] = value;
				}
			}
			this.pos++;
			return h1;
		case 99:
			var name3 = this.unserialize();
			var cl2 = this.resolver.resolveClass(name3);
			if(cl2 == null) {
				throw new js__$Boot_HaxeError("Class not found " + name3);
			}
			var o1 = Type.createEmptyInstance(cl2);
			this.cache.push(o1);
			this.unserializeObject(o1);
			return o1;
		case 100:
			return this.readFloat();
		case 102:
			return false;
		case 105:
			return this.readDigits();
		case 106:
			var name4 = this.unserialize();
			var edecl = this.resolver.resolveEnum(name4);
			if(edecl == null) {
				throw new js__$Boot_HaxeError("Enum not found " + name4);
			}
			this.pos++;
			var index = this.readDigits();
			var tag = edecl.__constructs__.slice()[index];
			if(tag == null) {
				throw new js__$Boot_HaxeError("Unknown enum index " + name4 + "@" + index);
			}
			var e1 = this.unserializeEnum(edecl,tag);
			this.cache.push(e1);
			return e1;
		case 107:
			return NaN;
		case 108:
			var l = new List();
			this.cache.push(l);
			while(this.buf.charCodeAt(this.pos) != 104) l.add(this.unserialize());
			this.pos++;
			return l;
		case 109:
			return -Infinity;
		case 110:
			return null;
		case 111:
			var o2 = { };
			this.cache.push(o2);
			this.unserializeObject(o2);
			return o2;
		case 112:
			return Infinity;
		case 113:
			var h2 = new haxe_ds_IntMap();
			this.cache.push(h2);
			var c1 = this.buf.charCodeAt(this.pos++);
			while(c1 == 58) {
				var i = this.readDigits();
				var value1 = this.unserialize();
				h2.h[i] = value1;
				c1 = this.buf.charCodeAt(this.pos++);
			}
			if(c1 != 104) {
				throw new js__$Boot_HaxeError("Invalid IntMap format");
			}
			return h2;
		case 114:
			var n2 = this.readDigits();
			if(n2 < 0 || n2 >= this.cache.length) {
				throw new js__$Boot_HaxeError("Invalid reference");
			}
			return this.cache[n2];
		case 115:
			var len = this.readDigits();
			var buf = this.buf;
			if(this.buf.charCodeAt(this.pos++) != 58 || this.length - this.pos < len) {
				throw new js__$Boot_HaxeError("Invalid bytes length");
			}
			var codes = haxe_Unserializer.CODES;
			if(codes == null) {
				codes = haxe_Unserializer.initCodes();
				haxe_Unserializer.CODES = codes;
			}
			var i1 = this.pos;
			var rest = len & 3;
			var max = i1 + (len - rest);
			var bytes = new haxe_io_Bytes(new ArrayBuffer((len >> 2) * 3 + (rest >= 2 ? rest - 1 : 0)));
			var bpos = 0;
			while(i1 < max) {
				var c11 = codes[buf.charCodeAt(i1++)];
				var c2 = codes[buf.charCodeAt(i1++)];
				bytes.b[bpos++] = (c11 << 2 | c2 >> 4) & 255;
				var c3 = codes[buf.charCodeAt(i1++)];
				bytes.b[bpos++] = (c2 << 4 | c3 >> 2) & 255;
				var c4 = codes[buf.charCodeAt(i1++)];
				bytes.b[bpos++] = (c3 << 6 | c4) & 255;
			}
			if(rest >= 2) {
				var c12 = codes[buf.charCodeAt(i1++)];
				var c21 = codes[buf.charCodeAt(i1++)];
				bytes.b[bpos++] = (c12 << 2 | c21 >> 4) & 255;
				if(rest == 3) {
					var c31 = codes[buf.charCodeAt(i1++)];
					bytes.b[bpos++] = (c21 << 4 | c31 >> 2) & 255;
				}
			}
			this.pos += len;
			this.cache.push(bytes);
			return bytes;
		case 116:
			return true;
		case 118:
			var d;
			if(this.buf.charCodeAt(this.pos) >= 48 && this.buf.charCodeAt(this.pos) <= 57 && this.buf.charCodeAt(this.pos + 1) >= 48 && this.buf.charCodeAt(this.pos + 1) <= 57 && this.buf.charCodeAt(this.pos + 2) >= 48 && this.buf.charCodeAt(this.pos + 2) <= 57 && this.buf.charCodeAt(this.pos + 3) >= 48 && this.buf.charCodeAt(this.pos + 3) <= 57 && this.buf.charCodeAt(this.pos + 4) == 45) {
				d = HxOverrides.strDate(HxOverrides.substr(this.buf,this.pos,19));
				this.pos += 19;
			} else {
				var t = this.readFloat();
				d = new Date(t);
			}
			this.cache.push(d);
			return d;
		case 119:
			var name5 = this.unserialize();
			var edecl1 = this.resolver.resolveEnum(name5);
			if(edecl1 == null) {
				throw new js__$Boot_HaxeError("Enum not found " + name5);
			}
			var e2 = this.unserializeEnum(edecl1,this.unserialize());
			this.cache.push(e2);
			return e2;
		case 120:
			throw js__$Boot_HaxeError.wrap(this.unserialize());
			break;
		case 121:
			var len1 = this.readDigits();
			if(this.buf.charCodeAt(this.pos++) != 58 || this.length - this.pos < len1) {
				throw new js__$Boot_HaxeError("Invalid string length");
			}
			var s1 = HxOverrides.substr(this.buf,this.pos,len1);
			this.pos += len1;
			s1 = decodeURIComponent(s1.split("+").join(" "));
			this.scache.push(s1);
			return s1;
		case 122:
			return 0;
		default:
		}
		this.pos--;
		throw new js__$Boot_HaxeError("Invalid char " + this.buf.charAt(this.pos) + " at position " + this.pos);
	}
	,__class__: haxe_Unserializer
};
var haxe__$Unserializer_NullResolver = function() {
};
$hxClasses["haxe._Unserializer.NullResolver"] = haxe__$Unserializer_NullResolver;
haxe__$Unserializer_NullResolver.__name__ = ["haxe","_Unserializer","NullResolver"];
haxe__$Unserializer_NullResolver.prototype = {
	resolveClass: function(name) {
		return null;
	}
	,resolveEnum: function(name) {
		return null;
	}
	,__class__: haxe__$Unserializer_NullResolver
};
var haxe_crypto_BaseCode = function(base) {
	var len = base.length;
	var nbits = 1;
	while(len > 1 << nbits) ++nbits;
	if(nbits > 8 || len != 1 << nbits) {
		throw new js__$Boot_HaxeError("BaseCode : base length must be a power of two.");
	}
	this.base = base;
	this.nbits = nbits;
};
$hxClasses["haxe.crypto.BaseCode"] = haxe_crypto_BaseCode;
haxe_crypto_BaseCode.__name__ = ["haxe","crypto","BaseCode"];
haxe_crypto_BaseCode.encode = function(s,base) {
	return new haxe_crypto_BaseCode(haxe_io_Bytes.ofString(base)).encodeString(s);
};
haxe_crypto_BaseCode.prototype = {
	base: null
	,nbits: null
	,encodeBytes: function(b) {
		var nbits = this.nbits;
		var base = this.base;
		var size = b.length * 8 / nbits | 0;
		var out = new haxe_io_Bytes(new ArrayBuffer(size + (b.length * 8 % nbits == 0 ? 0 : 1)));
		var buf = 0;
		var curbits = 0;
		var mask = (1 << nbits) - 1;
		var pin = 0;
		var pout = 0;
		while(pout < size) {
			while(curbits < nbits) {
				curbits += 8;
				buf <<= 8;
				buf |= b.b[pin++];
			}
			curbits -= nbits;
			out.b[pout++] = base.b[buf >> curbits & mask] & 255;
		}
		if(curbits > 0) {
			out.b[pout++] = base.b[buf << nbits - curbits & mask] & 255;
		}
		return out;
	}
	,encodeString: function(s) {
		return this.encodeBytes(haxe_io_Bytes.ofString(s)).toString();
	}
	,__class__: haxe_crypto_BaseCode
};
var haxe_ds_IntMap = function() {
	this.h = { };
};
$hxClasses["haxe.ds.IntMap"] = haxe_ds_IntMap;
haxe_ds_IntMap.__name__ = ["haxe","ds","IntMap"];
haxe_ds_IntMap.__interfaces__ = [haxe_IMap];
haxe_ds_IntMap.prototype = {
	h: null
	,set: function(key,value) {
		this.h[key] = value;
	}
	,get: function(key) {
		return this.h[key];
	}
	,exists: function(key) {
		return this.h.hasOwnProperty(key);
	}
	,remove: function(key) {
		if(!this.h.hasOwnProperty(key)) {
			return false;
		}
		delete(this.h[key]);
		return true;
	}
	,keys: function() {
		var a = [];
		for( var key in this.h ) if(this.h.hasOwnProperty(key)) {
			a.push(key | 0);
		}
		return HxOverrides.iter(a);
	}
	,iterator: function() {
		return { ref : this.h, it : this.keys(), hasNext : function() {
			return this.it.hasNext();
		}, next : function() {
			var i = this.it.next();
			return this.ref[i];
		}};
	}
	,__class__: haxe_ds_IntMap
};
var haxe_ds_ObjectMap = function() {
	this.h = { __keys__ : { }};
};
$hxClasses["haxe.ds.ObjectMap"] = haxe_ds_ObjectMap;
haxe_ds_ObjectMap.__name__ = ["haxe","ds","ObjectMap"];
haxe_ds_ObjectMap.__interfaces__ = [haxe_IMap];
haxe_ds_ObjectMap.assignId = function(obj) {
	return obj.__id__ = ++haxe_ds_ObjectMap.count;
};
haxe_ds_ObjectMap.getId = function(obj) {
	return obj.__id__;
};
haxe_ds_ObjectMap.prototype = {
	h: null
	,set: function(key,value) {
		var id = key.__id__ || (key.__id__ = ++haxe_ds_ObjectMap.count);
		this.h[id] = value;
		this.h.__keys__[id] = key;
	}
	,get: function(key) {
		return this.h[key.__id__];
	}
	,exists: function(key) {
		return this.h.__keys__[key.__id__] != null;
	}
	,remove: function(key) {
		var id = key.__id__;
		if(this.h.__keys__[id] == null) {
			return false;
		}
		delete(this.h[id]);
		delete(this.h.__keys__[id]);
		return true;
	}
	,keys: function() {
		var a = [];
		for( var key in this.h.__keys__ ) {
		if(this.h.hasOwnProperty(key)) {
			a.push(this.h.__keys__[key]);
		}
		}
		return HxOverrides.iter(a);
	}
	,iterator: function() {
		return { ref : this.h, it : this.keys(), hasNext : function() {
			return this.it.hasNext();
		}, next : function() {
			var i = this.it.next();
			return this.ref[i.__id__];
		}};
	}
	,__class__: haxe_ds_ObjectMap
};
var haxe_ds__$StringMap_StringMapIterator = function(map,keys) {
	this.map = map;
	this.keys = keys;
	this.index = 0;
	this.count = keys.length;
};
$hxClasses["haxe.ds._StringMap.StringMapIterator"] = haxe_ds__$StringMap_StringMapIterator;
haxe_ds__$StringMap_StringMapIterator.__name__ = ["haxe","ds","_StringMap","StringMapIterator"];
haxe_ds__$StringMap_StringMapIterator.prototype = {
	map: null
	,keys: null
	,index: null
	,count: null
	,hasNext: function() {
		return this.index < this.count;
	}
	,next: function() {
		var _this = this.map;
		var key = this.keys[this.index++];
		if(__map_reserved[key] != null) {
			return _this.getReserved(key);
		} else {
			return _this.h[key];
		}
	}
	,__class__: haxe_ds__$StringMap_StringMapIterator
};
var haxe_ds_StringMap = function() {
	this.h = { };
};
$hxClasses["haxe.ds.StringMap"] = haxe_ds_StringMap;
haxe_ds_StringMap.__name__ = ["haxe","ds","StringMap"];
haxe_ds_StringMap.__interfaces__ = [haxe_IMap];
haxe_ds_StringMap.prototype = {
	h: null
	,rh: null
	,set: function(key,value) {
		if(__map_reserved[key] != null) {
			this.setReserved(key,value);
		} else {
			this.h[key] = value;
		}
	}
	,get: function(key) {
		if(__map_reserved[key] != null) {
			return this.getReserved(key);
		}
		return this.h[key];
	}
	,exists: function(key) {
		if(__map_reserved[key] != null) {
			return this.existsReserved(key);
		}
		return this.h.hasOwnProperty(key);
	}
	,setReserved: function(key,value) {
		if(this.rh == null) {
			this.rh = { };
		}
		this.rh["$" + key] = value;
	}
	,getReserved: function(key) {
		if(this.rh == null) {
			return null;
		} else {
			return this.rh["$" + key];
		}
	}
	,existsReserved: function(key) {
		if(this.rh == null) {
			return false;
		}
		return this.rh.hasOwnProperty("$" + key);
	}
	,remove: function(key) {
		if(__map_reserved[key] != null) {
			key = "$" + key;
			if(this.rh == null || !this.rh.hasOwnProperty(key)) {
				return false;
			}
			delete(this.rh[key]);
			return true;
		} else {
			if(!this.h.hasOwnProperty(key)) {
				return false;
			}
			delete(this.h[key]);
			return true;
		}
	}
	,keys: function() {
		return HxOverrides.iter(this.arrayKeys());
	}
	,arrayKeys: function() {
		var out = [];
		for( var key in this.h ) {
		if(this.h.hasOwnProperty(key)) {
			out.push(key);
		}
		}
		if(this.rh != null) {
			for( var key in this.rh ) {
			if(key.charCodeAt(0) == 36) {
				out.push(key.substr(1));
			}
			}
		}
		return out;
	}
	,__class__: haxe_ds_StringMap
};
var haxe_io_Eof = function() { };
$hxClasses["haxe.io.Eof"] = haxe_io_Eof;
haxe_io_Eof.__name__ = ["haxe","io","Eof"];
haxe_io_Eof.prototype = {
	toString: function() {
		return "Eof";
	}
	,__class__: haxe_io_Eof
};
var haxe_io_Error = $hxClasses["haxe.io.Error"] = { __ename__ : ["haxe","io","Error"], __constructs__ : ["Blocked","Overflow","OutsideBounds","Custom"] };
haxe_io_Error.Blocked = ["Blocked",0];
haxe_io_Error.Blocked.toString = $estr;
haxe_io_Error.Blocked.__enum__ = haxe_io_Error;
haxe_io_Error.Overflow = ["Overflow",1];
haxe_io_Error.Overflow.toString = $estr;
haxe_io_Error.Overflow.__enum__ = haxe_io_Error;
haxe_io_Error.OutsideBounds = ["OutsideBounds",2];
haxe_io_Error.OutsideBounds.toString = $estr;
haxe_io_Error.OutsideBounds.__enum__ = haxe_io_Error;
haxe_io_Error.Custom = function(e) { var $x = ["Custom",3,e]; $x.__enum__ = haxe_io_Error; $x.toString = $estr; return $x; };
haxe_io_Error.__empty_constructs__ = [haxe_io_Error.Blocked,haxe_io_Error.Overflow,haxe_io_Error.OutsideBounds];
var haxe_io_FPHelper = function() { };
$hxClasses["haxe.io.FPHelper"] = haxe_io_FPHelper;
haxe_io_FPHelper.__name__ = ["haxe","io","FPHelper"];
haxe_io_FPHelper.i32ToFloat = function(i) {
	var exp = i >>> 23 & 255;
	var sig = i & 8388607;
	if(sig == 0 && exp == 0) {
		return 0.0;
	}
	return (1 - (i >>> 31 << 1)) * (1 + Math.pow(2,-23) * sig) * Math.pow(2,exp - 127);
};
haxe_io_FPHelper.floatToI32 = function(f) {
	if(f == 0) {
		return 0;
	}
	var af = f < 0 ? -f : f;
	var exp = Math.floor(Math.log(af) / 0.6931471805599453);
	if(exp < -127) {
		exp = -127;
	} else if(exp > 128) {
		exp = 128;
	}
	var sig = Math.round((af / Math.pow(2,exp) - 1) * 8388608);
	if(sig == 8388608 && exp < 128) {
		sig = 0;
		++exp;
	}
	return (f < 0 ? -2147483648 : 0) | exp + 127 << 23 | sig;
};
haxe_io_FPHelper.i64ToDouble = function(low,high) {
	var exp = (high >> 20 & 2047) - 1023;
	var sig = (high & 1048575) * 4294967296. + (low >>> 31) * 2147483648. + (low & 2147483647);
	if(sig == 0 && exp == -1023) {
		return 0.0;
	}
	return (1 - (high >>> 31 << 1)) * (1.0 + Math.pow(2,-52) * sig) * Math.pow(2,exp);
};
haxe_io_FPHelper.doubleToI64 = function(v) {
	var i64 = haxe_io_FPHelper.i64tmp;
	if(v == 0) {
		i64.low = 0;
		i64.high = 0;
	} else if(!isFinite(v)) {
		if(v > 0) {
			i64.low = 0;
			i64.high = 2146435072;
		} else {
			i64.low = 0;
			i64.high = -1048576;
		}
	} else {
		var av = v < 0 ? -v : v;
		var exp = Math.floor(Math.log(av) / 0.6931471805599453);
		var sig = Math.round((av / Math.pow(2,exp) - 1) * 4503599627370496.);
		i64.low = sig | 0;
		i64.high = (v < 0 ? -2147483648 : 0) | exp + 1023 << 20 | (sig / 4294967296.0 | 0);
	}
	return i64;
};
var haxe_io_Path = function(path) {
	switch(path) {
	case ".":case "..":
		this.dir = path;
		this.file = "";
		return;
	}
	var c1 = path.lastIndexOf("/");
	var c2 = path.lastIndexOf("\\");
	if(c1 < c2) {
		this.dir = HxOverrides.substr(path,0,c2);
		path = HxOverrides.substr(path,c2 + 1,null);
		this.backslash = true;
	} else if(c2 < c1) {
		this.dir = HxOverrides.substr(path,0,c1);
		path = HxOverrides.substr(path,c1 + 1,null);
	} else {
		this.dir = null;
	}
	var cp = path.lastIndexOf(".");
	if(cp != -1) {
		this.ext = HxOverrides.substr(path,cp + 1,null);
		this.file = HxOverrides.substr(path,0,cp);
	} else {
		this.ext = null;
		this.file = path;
	}
};
$hxClasses["haxe.io.Path"] = haxe_io_Path;
haxe_io_Path.__name__ = ["haxe","io","Path"];
haxe_io_Path.withoutExtension = function(path) {
	var s = new haxe_io_Path(path);
	s.ext = null;
	return s.toString();
};
haxe_io_Path.extension = function(path) {
	var s = new haxe_io_Path(path);
	if(s.ext == null) {
		return "";
	}
	return s.ext;
};
haxe_io_Path.prototype = {
	dir: null
	,file: null
	,ext: null
	,backslash: null
	,toString: function() {
		return (this.dir == null ? "" : this.dir + (this.backslash ? "\\" : "/")) + this.file + (this.ext == null ? "" : "." + this.ext);
	}
	,__class__: haxe_io_Path
};
var haxe_xml_XmlParserException = function(message,xml,position) {
	this.xml = xml;
	this.message = message;
	this.position = position;
	this.lineNumber = 1;
	this.positionAtLine = 0;
	var _g1 = 0;
	while(_g1 < position) {
		var c = xml.charCodeAt(_g1++);
		if(c == 10) {
			this.lineNumber++;
			this.positionAtLine = 0;
		} else if(c != 13) {
			this.positionAtLine++;
		}
	}
};
$hxClasses["haxe.xml.XmlParserException"] = haxe_xml_XmlParserException;
haxe_xml_XmlParserException.__name__ = ["haxe","xml","XmlParserException"];
haxe_xml_XmlParserException.prototype = {
	message: null
	,lineNumber: null
	,positionAtLine: null
	,position: null
	,xml: null
	,toString: function() {
		return Type.getClassName(js_Boot.getClass(this)) + ": " + this.message + " at line " + this.lineNumber + " char " + this.positionAtLine;
	}
	,__class__: haxe_xml_XmlParserException
};
var haxe_xml_Parser = function() { };
$hxClasses["haxe.xml.Parser"] = haxe_xml_Parser;
haxe_xml_Parser.__name__ = ["haxe","xml","Parser"];
haxe_xml_Parser.parse = function(str,strict) {
	if(strict == null) {
		strict = false;
	}
	var doc = Xml.createDocument();
	haxe_xml_Parser.doParse(str,strict,0,doc);
	return doc;
};
haxe_xml_Parser.doParse = function(str,strict,p,parent) {
	if(p == null) {
		p = 0;
	}
	var xml = null;
	var state = 1;
	var next = 1;
	var aname = null;
	var start = 0;
	var nsubs = 0;
	var nbrackets = 0;
	var c = str.charCodeAt(p);
	var buf = new StringBuf();
	var escapeNext = 1;
	var attrValQuote = -1;
	while(c == c) {
		switch(state) {
		case 0:
			switch(c) {
			case 9:case 10:case 13:case 32:
				break;
			default:
				state = next;
				continue;
			}
			break;
		case 1:
			if(c == 60) {
				state = 0;
				next = 2;
			} else {
				start = p;
				state = 13;
				continue;
			}
			break;
		case 2:
			switch(c) {
			case 33:
				if(str.charCodeAt(p + 1) == 91) {
					p += 2;
					if(HxOverrides.substr(str,p,6).toUpperCase() != "CDATA[") {
						throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected <![CDATA[",str,p));
					}
					p += 5;
					state = 17;
					start = p + 1;
				} else if(str.charCodeAt(p + 1) == 68 || str.charCodeAt(p + 1) == 100) {
					if(HxOverrides.substr(str,p + 2,6).toUpperCase() != "OCTYPE") {
						throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected <!DOCTYPE",str,p));
					}
					p += 8;
					state = 16;
					start = p + 1;
				} else if(str.charCodeAt(p + 1) != 45 || str.charCodeAt(p + 2) != 45) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected <!--",str,p));
				} else {
					p += 2;
					state = 15;
					start = p + 1;
				}
				break;
			case 47:
				if(parent == null) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected node name",str,p));
				}
				start = p + 1;
				state = 0;
				next = 10;
				break;
			case 63:
				state = 14;
				start = p;
				break;
			default:
				state = 3;
				start = p;
				continue;
			}
			break;
		case 3:
			if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45)) {
				if(p == start) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected node name",str,p));
				}
				xml = Xml.createElement(HxOverrides.substr(str,start,p - start));
				parent.addChild(xml);
				++nsubs;
				state = 0;
				next = 4;
				continue;
			}
			break;
		case 4:
			switch(c) {
			case 47:
				state = 11;
				break;
			case 62:
				state = 9;
				break;
			default:
				state = 5;
				start = p;
				continue;
			}
			break;
		case 5:
			if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45)) {
				var tmp;
				if(start == p) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected attribute name",str,p));
				}
				tmp = HxOverrides.substr(str,start,p - start);
				aname = tmp;
				if(xml.exists(tmp)) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Duplicate attribute [" + tmp + "]",str,p));
				}
				state = 0;
				next = 6;
				continue;
			}
			break;
		case 6:
			if(c == 61) {
				state = 0;
				next = 7;
			} else {
				throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected =",str,p));
			}
			break;
		case 7:
			switch(c) {
			case 34:case 39:
				buf = new StringBuf();
				state = 8;
				start = p + 1;
				attrValQuote = c;
				break;
			default:
				throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected \"",str,p));
			}
			break;
		case 8:
			switch(c) {
			case 38:
				var len = p - start;
				buf.b += len == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len);
				state = 18;
				escapeNext = 8;
				start = p + 1;
				break;
			case 60:case 62:
				if(strict) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Invalid unescaped " + String.fromCharCode(c) + " in attribute value",str,p));
				} else if(c == attrValQuote) {
					var len1 = p - start;
					buf.b += len1 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len1);
					var val = buf.b;
					buf = new StringBuf();
					xml.set(aname,val);
					state = 0;
					next = 4;
				}
				break;
			default:
				if(c == attrValQuote) {
					var len2 = p - start;
					buf.b += len2 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len2);
					var val1 = buf.b;
					buf = new StringBuf();
					xml.set(aname,val1);
					state = 0;
					next = 4;
				}
			}
			break;
		case 9:
			p = haxe_xml_Parser.doParse(str,strict,p,xml);
			start = p;
			state = 1;
			break;
		case 10:
			if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45)) {
				if(start == p) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected node name",str,p));
				}
				var v = HxOverrides.substr(str,start,p - start);
				if(parent.nodeType != Xml.Element) {
					throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + parent.nodeType);
				}
				if(v != parent.nodeName) {
					if(parent.nodeType != Xml.Element) {
						throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + parent.nodeType);
					}
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected </" + parent.nodeName + ">",str,p));
				}
				state = 0;
				next = 12;
				continue;
			}
			break;
		case 11:
			if(c == 62) {
				state = 1;
			} else {
				throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected >",str,p));
			}
			break;
		case 12:
			if(c == 62) {
				if(nsubs == 0) {
					parent.addChild(Xml.createPCData(""));
				}
				return p;
			} else {
				throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected >",str,p));
			}
			break;
		case 13:
			if(c == 60) {
				var len3 = p - start;
				buf.b += len3 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len3);
				var child = Xml.createPCData(buf.b);
				buf = new StringBuf();
				parent.addChild(child);
				++nsubs;
				state = 0;
				next = 2;
			} else if(c == 38) {
				var len4 = p - start;
				buf.b += len4 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len4);
				state = 18;
				escapeNext = 13;
				start = p + 1;
			}
			break;
		case 14:
			if(c == 63 && str.charCodeAt(p + 1) == 62) {
				++p;
				parent.addChild(Xml.createProcessingInstruction(HxOverrides.substr(str,start + 1,p - start - 2)));
				++nsubs;
				state = 1;
			}
			break;
		case 15:
			if(c == 45 && str.charCodeAt(p + 1) == 45 && str.charCodeAt(p + 2) == 62) {
				parent.addChild(Xml.createComment(HxOverrides.substr(str,start,p - start)));
				++nsubs;
				p += 2;
				state = 1;
			}
			break;
		case 16:
			if(c == 91) {
				++nbrackets;
			} else if(c == 93) {
				--nbrackets;
			} else if(c == 62 && nbrackets == 0) {
				parent.addChild(Xml.createDocType(HxOverrides.substr(str,start,p - start)));
				++nsubs;
				state = 1;
			}
			break;
		case 17:
			if(c == 93 && str.charCodeAt(p + 1) == 93 && str.charCodeAt(p + 2) == 62) {
				parent.addChild(Xml.createCData(HxOverrides.substr(str,start,p - start)));
				++nsubs;
				p += 2;
				state = 1;
			}
			break;
		case 18:
			if(c == 59) {
				var s = HxOverrides.substr(str,start,p - start);
				if(s.charCodeAt(0) == 35) {
					var c1 = s.charCodeAt(1) == 120 ? Std.parseInt("0" + HxOverrides.substr(s,1,s.length - 1)) : Std.parseInt(HxOverrides.substr(s,1,s.length - 1));
					buf.b += String.fromCharCode(c1);
				} else {
					var _this = haxe_xml_Parser.escapes;
					if(!(__map_reserved[s] != null ? _this.existsReserved(s) : _this.h.hasOwnProperty(s))) {
						if(strict) {
							throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Undefined entity: " + s,str,p));
						}
						buf.b += Std.string("&" + s + ";");
					} else {
						var _this1 = haxe_xml_Parser.escapes;
						buf.b += Std.string(__map_reserved[s] != null ? _this1.getReserved(s) : _this1.h[s]);
					}
				}
				start = p + 1;
				state = escapeNext;
			} else if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45) && c != 35) {
				if(strict) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Invalid character in entity: " + String.fromCharCode(c),str,p));
				}
				buf.b += "&";
				var len5 = p - start;
				buf.b += len5 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len5);
				start = p--;
				state = escapeNext;
			}
			break;
		}
		c = str.charCodeAt(++p);
	}
	if(state == 1) {
		start = p;
		state = 13;
	}
	if(state == 13) {
		if(p != start || nsubs == 0) {
			var len6 = p - start;
			buf.b += len6 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len6);
			parent.addChild(Xml.createPCData(buf.b));
		}
		return p;
	}
	if(!strict && state == 18 && escapeNext == 13) {
		buf.b += "&";
		var len7 = p - start;
		buf.b += len7 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len7);
		parent.addChild(Xml.createPCData(buf.b));
		return p;
	}
	throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Unexpected end",str,p));
};
var haxe_xml_Printer = function(pretty) {
	this.output = new StringBuf();
	this.pretty = pretty;
};
$hxClasses["haxe.xml.Printer"] = haxe_xml_Printer;
haxe_xml_Printer.__name__ = ["haxe","xml","Printer"];
haxe_xml_Printer.print = function(xml,pretty) {
	if(pretty == null) {
		pretty = false;
	}
	var printer = new haxe_xml_Printer(pretty);
	printer.writeNode(xml,"");
	return printer.output.b;
};
haxe_xml_Printer.prototype = {
	output: null
	,pretty: null
	,writeNode: function(value,tabs) {
		switch(value.nodeType) {
		case 0:
			this.output.b += Std.string(tabs + "<");
			if(value.nodeType != Xml.Element) {
				throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + value.nodeType);
			}
			this.output.b += Std.string(value.nodeName);
			var attribute = value.attributes();
			while(attribute.hasNext()) {
				var attribute1 = attribute.next();
				this.output.b += Std.string(" " + attribute1 + "=\"");
				var input = StringTools.htmlEscape(value.get(attribute1),true);
				this.output.b += Std.string(input);
				this.output.b += "\"";
			}
			if(this.hasChildren(value)) {
				this.output.b += ">";
				if(this.pretty) {
					this.output.b += "\n";
				}
				if(value.nodeType != Xml.Document && value.nodeType != Xml.Element) {
					throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + value.nodeType);
				}
				var child = HxOverrides.iter(value.children);
				while(child.hasNext()) this.writeNode(child.next(),this.pretty ? tabs + "\t" : tabs);
				this.output.b += Std.string(tabs + "</");
				if(value.nodeType != Xml.Element) {
					throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + value.nodeType);
				}
				this.output.b += Std.string(value.nodeName);
				this.output.b += ">";
				if(this.pretty) {
					this.output.b += "\n";
				}
			} else {
				this.output.b += "/>";
				if(this.pretty) {
					this.output.b += "\n";
				}
			}
			break;
		case 1:
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) {
				throw new js__$Boot_HaxeError("Bad node type, unexpected " + value.nodeType);
			}
			var nodeValue = value.nodeValue;
			if(nodeValue.length != 0) {
				var input1 = tabs + StringTools.htmlEscape(nodeValue);
				this.output.b += Std.string(input1);
				if(this.pretty) {
					this.output.b += "\n";
				}
			}
			break;
		case 2:
			this.output.b += Std.string(tabs + "<![CDATA[");
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) {
				throw new js__$Boot_HaxeError("Bad node type, unexpected " + value.nodeType);
			}
			var input2 = StringTools.trim(value.nodeValue);
			this.output.b += Std.string(input2);
			this.output.b += "]]>";
			if(this.pretty) {
				this.output.b += "\n";
			}
			break;
		case 3:
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) {
				throw new js__$Boot_HaxeError("Bad node type, unexpected " + value.nodeType);
			}
			var commentContent = value.nodeValue;
			var _this_r = new RegExp("[\n\r\t]+","g".split("u").join(""));
			commentContent = commentContent.replace(_this_r,"");
			commentContent = "<!--" + commentContent + "-->";
			this.output.b += tabs == null ? "null" : "" + tabs;
			var input3 = StringTools.trim(commentContent);
			this.output.b += Std.string(input3);
			if(this.pretty) {
				this.output.b += "\n";
			}
			break;
		case 4:
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) {
				throw new js__$Boot_HaxeError("Bad node type, unexpected " + value.nodeType);
			}
			this.output.b += Std.string("<!DOCTYPE " + value.nodeValue + ">");
			if(this.pretty) {
				this.output.b += "\n";
			}
			break;
		case 5:
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) {
				throw new js__$Boot_HaxeError("Bad node type, unexpected " + value.nodeType);
			}
			this.output.b += Std.string("<?" + value.nodeValue + "?>");
			if(this.pretty) {
				this.output.b += "\n";
			}
			break;
		case 6:
			if(value.nodeType != Xml.Document && value.nodeType != Xml.Element) {
				throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + value.nodeType);
			}
			var child1 = HxOverrides.iter(value.children);
			while(child1.hasNext()) this.writeNode(child1.next(),tabs);
			break;
		}
	}
	,hasChildren: function(value) {
		if(value.nodeType != Xml.Document && value.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + value.nodeType);
		}
		var child = HxOverrides.iter(value.children);
		while(child.hasNext()) {
			var child1 = child.next();
			switch(child1.nodeType) {
			case 0:case 1:
				return true;
			case 2:case 3:
				if(child1.nodeType == Xml.Document || child1.nodeType == Xml.Element) {
					throw new js__$Boot_HaxeError("Bad node type, unexpected " + child1.nodeType);
				}
				if(StringTools.ltrim(child1.nodeValue).length != 0) {
					return true;
				}
				break;
			default:
			}
		}
		return false;
	}
	,__class__: haxe_xml_Printer
};
var hxassert_Assert = function() { };
$hxClasses["hxassert.Assert"] = hxassert_Assert;
hxassert_Assert.__name__ = ["hxassert","Assert"];
hxassert_Assert.on = function(handler) {
	hxassert_Assert._handlers.push(handler);
	return function() {
		HxOverrides.remove(hxassert_Assert._handlers,handler);
	};
};
hxassert_Assert.fail = function(reason,position) {
	if(reason == null) {
		reason = "Assert.fail";
	}
	hxassert_Assert.throwError(new hxassert_AssertionFailureError([reason],position));
};
hxassert_Assert.throwError = function(error) {
	var _g = 0;
	var _g1 = hxassert_Assert._handlers;
	while(_g < _g1.length) {
		var handler = _g1[_g];
		++_g;
		handler(error);
	}
	if(!error.recovered) {
		throw new js__$Boot_HaxeError(error);
	}
};
hxassert_Assert.throwAssertionFailureError = function(messages,position) {
	hxassert_Assert.throwError(new hxassert_AssertionFailureError(messages,position));
};
var hxassert_AssertionFailureError = function(messages,infos) {
	this.recovered = false;
	this._messages = messages;
	this.position = infos;
	this.callstack = haxe_CallStack.callStack();
};
$hxClasses["hxassert.AssertionFailureError"] = hxassert_AssertionFailureError;
hxassert_AssertionFailureError.__name__ = ["hxassert","AssertionFailureError"];
hxassert_AssertionFailureError.prototype = {
	callstack: null
	,position: null
	,recovered: null
	,_messages: null
	,_evaluations: null
	,toString: function() {
		return this._messages.join("\n");
	}
	,getCallStackText: function() {
		if(this.callstack != null) {
			return haxe_CallStack.toString(this.callstack);
		} else {
			return "";
		}
	}
	,recovery: function() {
		this.recovered = true;
	}
	,__class__: hxassert_AssertionFailureError
};
var js__$Boot_HaxeError = function(val) {
	Error.call(this);
	this.val = val;
	this.message = String(val);
	if(Error.captureStackTrace) {
		Error.captureStackTrace(this,js__$Boot_HaxeError);
	}
};
$hxClasses["js._Boot.HaxeError"] = js__$Boot_HaxeError;
js__$Boot_HaxeError.__name__ = ["js","_Boot","HaxeError"];
js__$Boot_HaxeError.wrap = function(val) {
	if((val instanceof Error)) {
		return val;
	} else {
		return new js__$Boot_HaxeError(val);
	}
};
js__$Boot_HaxeError.__super__ = Error;
js__$Boot_HaxeError.prototype = $extend(Error.prototype,{
	val: null
	,__class__: js__$Boot_HaxeError
});
var js_Boot = function() { };
$hxClasses["js.Boot"] = js_Boot;
js_Boot.__name__ = ["js","Boot"];
js_Boot.__unhtml = function(s) {
	return s.split("&").join("&amp;").split("<").join("&lt;").split(">").join("&gt;");
};
js_Boot.__trace = function(v,i) {
	var msg = i != null ? i.fileName + ":" + i.lineNumber + ": " : "";
	msg += js_Boot.__string_rec(v,"");
	if(i != null && i.customParams != null) {
		var _g = 0;
		var _g1 = i.customParams;
		while(_g < _g1.length) {
			var v1 = _g1[_g];
			++_g;
			msg += "," + js_Boot.__string_rec(v1,"");
		}
	}
	var d;
	var tmp;
	if(typeof(document) != "undefined") {
		d = document.getElementById("haxe:trace");
		tmp = d != null;
	} else {
		tmp = false;
	}
	if(tmp) {
		d.innerHTML += js_Boot.__unhtml(msg) + "<br/>";
	} else if(typeof console != "undefined" && console.log != null) {
		console.log(msg);
	}
};
js_Boot.getClass = function(o) {
	if((o instanceof Array) && o.__enum__ == null) {
		return Array;
	} else {
		var cl = o.__class__;
		if(cl != null) {
			return cl;
		}
		var name = js_Boot.__nativeClassName(o);
		if(name != null) {
			return js_Boot.__resolveNativeClass(name);
		}
		return null;
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o instanceof Array) {
			if(o.__enum__) {
				if(o.length == 2) {
					return o[0];
				}
				var str = o[0] + "(";
				s += "\t";
				var _g1 = 2;
				var _g = o.length;
				while(_g1 < _g) {
					var i = _g1++;
					if(i != 2) {
						str += "," + js_Boot.__string_rec(o[i],s);
					} else {
						str += js_Boot.__string_rec(o[i],s);
					}
				}
				return str + ")";
			}
			var l = o.length;
			var i1;
			var str1 = "[";
			s += "\t";
			var _g11 = 0;
			var _g2 = l;
			while(_g11 < _g2) {
				var i2 = _g11++;
				str1 += (i2 > 0 ? "," : "") + js_Boot.__string_rec(o[i2],s);
			}
			str1 += "]";
			return str1;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e ) {
			haxe_CallStack.lastException = e;
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var k = null;
		var str2 = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		for( var k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str2.length != 2) {
			str2 += ", \n";
		}
		str2 += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str2 += "\n" + s + "}";
		return str2;
	case "string":
		return o;
	default:
		return String(o);
	}
};
js_Boot.__interfLoop = function(cc,cl) {
	if(cc == null) {
		return false;
	}
	if(cc == cl) {
		return true;
	}
	var intf = cc.__interfaces__;
	if(intf != null) {
		var _g1 = 0;
		var _g = intf.length;
		while(_g1 < _g) {
			var i = intf[_g1++];
			if(i == cl || js_Boot.__interfLoop(i,cl)) {
				return true;
			}
		}
	}
	return js_Boot.__interfLoop(cc.__super__,cl);
};
js_Boot.__instanceof = function(o,cl) {
	if(cl == null) {
		return false;
	}
	switch(cl) {
	case Array:
		if((o instanceof Array)) {
			return o.__enum__ == null;
		} else {
			return false;
		}
		break;
	case Bool:
		return typeof(o) == "boolean";
	case Dynamic:
		return true;
	case Float:
		return typeof(o) == "number";
	case Int:
		if(typeof(o) == "number") {
			return (o|0) === o;
		} else {
			return false;
		}
		break;
	case String:
		return typeof(o) == "string";
	default:
		if(o != null) {
			if(typeof(cl) == "function") {
				if(o instanceof cl) {
					return true;
				}
				if(js_Boot.__interfLoop(js_Boot.getClass(o),cl)) {
					return true;
				}
			} else if(typeof(cl) == "object" && js_Boot.__isNativeObj(cl)) {
				if(o instanceof cl) {
					return true;
				}
			}
		} else {
			return false;
		}
		if(cl == Class ? o.__name__ != null : false) {
			return true;
		}
		if(cl == Enum ? o.__ename__ != null : false) {
			return true;
		}
		return o.__enum__ == cl;
	}
};
js_Boot.__cast = function(o,t) {
	if(js_Boot.__instanceof(o,t)) {
		return o;
	} else {
		throw new js__$Boot_HaxeError("Cannot cast " + Std.string(o) + " to " + Std.string(t));
	}
};
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
		return null;
	}
	return name;
};
js_Boot.__isNativeObj = function(o) {
	return js_Boot.__nativeClassName(o) != null;
};
js_Boot.__resolveNativeClass = function(name) {
	return $global[name];
};
var js_Browser = function() { };
$hxClasses["js.Browser"] = js_Browser;
js_Browser.__name__ = ["js","Browser"];
js_Browser.alert = function(v) {
	window.alert(js_Boot.__string_rec(v,""));
};
var js_html__$CanvasElement_CanvasUtil = function() { };
$hxClasses["js.html._CanvasElement.CanvasUtil"] = js_html__$CanvasElement_CanvasUtil;
js_html__$CanvasElement_CanvasUtil.__name__ = ["js","html","_CanvasElement","CanvasUtil"];
js_html__$CanvasElement_CanvasUtil.getContextWebGL = function(canvas,attribs) {
	var _g = 0;
	var _g1 = ["webgl","experimental-webgl"];
	while(_g < _g1.length) {
		var name = _g1[_g];
		++_g;
		var ctx = canvas.getContext(name,attribs);
		if(ctx != null) {
			return ctx;
		}
	}
	return null;
};
var js_html_compat_ArrayBuffer = function(a) {
	if((a instanceof Array) && a.__enum__ == null) {
		this.a = a;
		this.byteLength = a.length;
	} else {
		var len = a;
		this.a = [];
		var _g1 = 0;
		var _g = len;
		while(_g1 < _g) this.a[_g1++] = 0;
		this.byteLength = len;
	}
};
$hxClasses["js.html.compat.ArrayBuffer"] = js_html_compat_ArrayBuffer;
js_html_compat_ArrayBuffer.__name__ = ["js","html","compat","ArrayBuffer"];
js_html_compat_ArrayBuffer.sliceImpl = function(begin,end) {
	var u = new Uint8Array(this,begin,end == null ? null : end - begin);
	var result = new ArrayBuffer(u.byteLength);
	new Uint8Array(result).set(u);
	return result;
};
js_html_compat_ArrayBuffer.prototype = {
	byteLength: null
	,a: null
	,slice: function(begin,end) {
		return new js_html_compat_ArrayBuffer(this.a.slice(begin,end));
	}
	,__class__: js_html_compat_ArrayBuffer
};
var js_html_compat_DataView = function(buffer,byteOffset,byteLength) {
	this.buf = buffer;
	this.offset = byteOffset == null ? 0 : byteOffset;
	this.length = byteLength == null ? buffer.byteLength - this.offset : byteLength;
	if(this.offset < 0 || this.length < 0 || this.offset + this.length > buffer.byteLength) {
		throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
	}
	this.byteLength = this.length;
	this.byteOffset = this.offset;
	this.buffer = this.buf;
};
$hxClasses["js.html.compat.DataView"] = js_html_compat_DataView;
js_html_compat_DataView.__name__ = ["js","html","compat","DataView"];
js_html_compat_DataView.prototype = {
	buf: null
	,offset: null
	,length: null
	,byteLength: null
	,byteOffset: null
	,buffer: null
	,getInt8: function(byteOffset) {
		var v = this.buf.a[this.offset + byteOffset];
		if(v >= 128) {
			return v - 256;
		} else {
			return v;
		}
	}
	,getUint8: function(byteOffset) {
		return this.buf.a[this.offset + byteOffset];
	}
	,getInt16: function(byteOffset,littleEndian) {
		var v = this.getUint16(byteOffset,littleEndian);
		if(v >= 32768) {
			return v - 65536;
		} else {
			return v;
		}
	}
	,getUint16: function(byteOffset,littleEndian) {
		if(littleEndian) {
			return this.buf.a[this.offset + byteOffset] | this.buf.a[this.offset + byteOffset + 1] << 8;
		} else {
			return this.buf.a[this.offset + byteOffset] << 8 | this.buf.a[this.offset + byteOffset + 1];
		}
	}
	,getInt32: function(byteOffset,littleEndian) {
		var p = this.offset + byteOffset;
		var a = this.buf.a[p++];
		var b = this.buf.a[p++];
		var c = this.buf.a[p++];
		var d = this.buf.a[p++];
		if(littleEndian) {
			return a | b << 8 | c << 16 | d << 24;
		} else {
			return d | c << 8 | b << 16 | a << 24;
		}
	}
	,getUint32: function(byteOffset,littleEndian) {
		var v = this.getInt32(byteOffset,littleEndian);
		if(v < 0) {
			return v + 4294967296.;
		} else {
			return v;
		}
	}
	,getFloat32: function(byteOffset,littleEndian) {
		return haxe_io_FPHelper.i32ToFloat(this.getInt32(byteOffset,littleEndian));
	}
	,getFloat64: function(byteOffset,littleEndian) {
		var a = this.getInt32(byteOffset,littleEndian);
		var b = this.getInt32(byteOffset + 4,littleEndian);
		return haxe_io_FPHelper.i64ToDouble(littleEndian ? a : b,littleEndian ? b : a);
	}
	,setInt8: function(byteOffset,value) {
		this.buf.a[byteOffset + this.offset] = value < 0 ? value + 128 & 255 : value & 255;
	}
	,setUint8: function(byteOffset,value) {
		this.buf.a[byteOffset + this.offset] = value & 255;
	}
	,setInt16: function(byteOffset,value,littleEndian) {
		this.setUint16(byteOffset,value < 0 ? value + 65536 : value,littleEndian);
	}
	,setUint16: function(byteOffset,value,littleEndian) {
		var p = byteOffset + this.offset;
		if(littleEndian) {
			this.buf.a[p] = value & 255;
			this.buf.a[p++] = value >> 8 & 255;
		} else {
			this.buf.a[p++] = value >> 8 & 255;
			this.buf.a[p] = value & 255;
		}
	}
	,setInt32: function(byteOffset,value,littleEndian) {
		this.setUint32(byteOffset,value,littleEndian);
	}
	,setUint32: function(byteOffset,value,littleEndian) {
		var p = byteOffset + this.offset;
		if(littleEndian) {
			this.buf.a[p++] = value & 255;
			this.buf.a[p++] = value >> 8 & 255;
			this.buf.a[p++] = value >> 16 & 255;
			this.buf.a[p++] = value >>> 24;
		} else {
			this.buf.a[p++] = value >>> 24;
			this.buf.a[p++] = value >> 16 & 255;
			this.buf.a[p++] = value >> 8 & 255;
			this.buf.a[p++] = value & 255;
		}
	}
	,setFloat32: function(byteOffset,value,littleEndian) {
		this.setUint32(byteOffset,haxe_io_FPHelper.floatToI32(value),littleEndian);
	}
	,setFloat64: function(byteOffset,value,littleEndian) {
		var i64 = haxe_io_FPHelper.doubleToI64(value);
		if(littleEndian) {
			this.setUint32(byteOffset,i64.low);
			this.setUint32(byteOffset,i64.high);
		} else {
			this.setUint32(byteOffset,i64.high);
			this.setUint32(byteOffset,i64.low);
		}
	}
	,__class__: js_html_compat_DataView
};
var js_html_compat_Float32Array = function() { };
$hxClasses["js.html.compat.Float32Array"] = js_html_compat_Float32Array;
js_html_compat_Float32Array.__name__ = ["js","html","compat","Float32Array"];
js_html_compat_Float32Array._new = function(arg1,offset,length) {
	var arr;
	if(typeof(arg1) == "number") {
		arr = [];
		var _g1 = 0;
		var _g = arg1;
		while(_g1 < _g) {
			var i = _g1++;
			arr[i] = 0;
		}
		arr.byteLength = arr.length << 2;
		arr.byteOffset = 0;
		var _g2 = [];
		var _g21 = 0;
		var _g11 = arr.length << 2;
		while(_g21 < _g11) {
			var i1 = _g21++;
			_g2.push(0);
		}
		arr.buffer = new js_html_compat_ArrayBuffer(_g2);
	} else if(js_Boot.__instanceof(arg1,js_html_compat_ArrayBuffer)) {
		var buffer = arg1;
		if(offset == null) {
			offset = 0;
		}
		if(length == null) {
			length = buffer.byteLength - offset >> 2;
		}
		arr = [];
		var _g12 = 0;
		var _g3 = length;
		while(_g12 < _g3) {
			var i2 = _g12++;
			var val = buffer.a[offset++] | buffer.a[offset++] << 8 | buffer.a[offset++] << 16 | buffer.a[offset++] << 24;
			arr.push(haxe_io_FPHelper.i32ToFloat(val));
		}
		arr.byteLength = arr.length << 2;
		arr.byteOffset = offset;
		arr.buffer = buffer;
	} else if((arg1 instanceof Array) && arg1.__enum__ == null) {
		arr = arg1.slice();
		var buffer1 = [];
		var _g4 = 0;
		while(_g4 < arr.length) {
			var f = arr[_g4];
			++_g4;
			var i3 = haxe_io_FPHelper.floatToI32(f);
			buffer1.push(i3 & 255);
			buffer1.push(i3 >> 8 & 255);
			buffer1.push(i3 >> 16 & 255);
			buffer1.push(i3 >>> 24);
		}
		arr.byteLength = arr.length << 2;
		arr.byteOffset = 0;
		arr.buffer = new js_html_compat_ArrayBuffer(buffer1);
	} else {
		throw new js__$Boot_HaxeError("TODO " + Std.string(arg1));
	}
	arr.subarray = js_html_compat_Float32Array._subarray;
	arr.set = js_html_compat_Float32Array._set;
	return arr;
};
js_html_compat_Float32Array._set = function(arg,offset) {
	if(js_Boot.__instanceof(arg.buffer,js_html_compat_ArrayBuffer)) {
		var a = arg;
		if(arg.byteLength + offset > this.byteLength) {
			throw new js__$Boot_HaxeError("set() outside of range");
		}
		var _g1 = 0;
		var _g = arg.byteLength;
		while(_g1 < _g) {
			var i = _g1++;
			this[i + offset] = a[i];
		}
	} else if((arg instanceof Array) && arg.__enum__ == null) {
		var a1 = arg;
		if(a1.length + offset > this.byteLength) {
			throw new js__$Boot_HaxeError("set() outside of range");
		}
		var _g11 = 0;
		var _g2 = a1.length;
		while(_g11 < _g2) {
			var i1 = _g11++;
			this[i1 + offset] = a1[i1];
		}
	} else {
		throw new js__$Boot_HaxeError("TODO");
	}
};
js_html_compat_Float32Array._subarray = function(start,end) {
	var a = js_html_compat_Float32Array._new(this.slice(start,end));
	a.byteOffset = start * 4;
	return a;
};
var js_html_compat_Uint8Array = function() { };
$hxClasses["js.html.compat.Uint8Array"] = js_html_compat_Uint8Array;
js_html_compat_Uint8Array.__name__ = ["js","html","compat","Uint8Array"];
js_html_compat_Uint8Array._new = function(arg1,offset,length) {
	var arr;
	if(typeof(arg1) == "number") {
		arr = [];
		var _g1 = 0;
		var _g = arg1;
		while(_g1 < _g) {
			var i = _g1++;
			arr[i] = 0;
		}
		arr.byteLength = arr.length;
		arr.byteOffset = 0;
		arr.buffer = new js_html_compat_ArrayBuffer(arr);
	} else if(js_Boot.__instanceof(arg1,js_html_compat_ArrayBuffer)) {
		var buffer = arg1;
		if(offset == null) {
			offset = 0;
		}
		if(length == null) {
			length = buffer.byteLength - offset;
		}
		if(offset == 0) {
			arr = buffer.a;
		} else {
			arr = buffer.a.slice(offset,offset + length);
		}
		arr.byteLength = arr.length;
		arr.byteOffset = offset;
		arr.buffer = buffer;
	} else if((arg1 instanceof Array) && arg1.__enum__ == null) {
		arr = arg1.slice();
		arr.byteLength = arr.length;
		arr.byteOffset = 0;
		arr.buffer = new js_html_compat_ArrayBuffer(arr);
	} else {
		throw new js__$Boot_HaxeError("TODO " + Std.string(arg1));
	}
	arr.subarray = js_html_compat_Uint8Array._subarray;
	arr.set = js_html_compat_Uint8Array._set;
	return arr;
};
js_html_compat_Uint8Array._set = function(arg,offset) {
	if(js_Boot.__instanceof(arg.buffer,js_html_compat_ArrayBuffer)) {
		var a = arg;
		if(arg.byteLength + offset > this.byteLength) {
			throw new js__$Boot_HaxeError("set() outside of range");
		}
		var _g1 = 0;
		var _g = arg.byteLength;
		while(_g1 < _g) {
			var i = _g1++;
			this[i + offset] = a[i];
		}
	} else if((arg instanceof Array) && arg.__enum__ == null) {
		var a1 = arg;
		if(a1.length + offset > this.byteLength) {
			throw new js__$Boot_HaxeError("set() outside of range");
		}
		var _g11 = 0;
		var _g2 = a1.length;
		while(_g11 < _g2) {
			var i1 = _g11++;
			this[i1 + offset] = a1[i1];
		}
	} else {
		throw new js__$Boot_HaxeError("TODO");
	}
};
js_html_compat_Uint8Array._subarray = function(start,end) {
	var a = js_html_compat_Uint8Array._new(this.slice(start,end));
	a.byteOffset = start;
	return a;
};
var lime_AssetCache = function() {
	this.enabled = true;
	this.audio = new haxe_ds_StringMap();
	this.font = new haxe_ds_StringMap();
	this.image = new haxe_ds_StringMap();
	this.version = 132919;
};
$hxClasses["lime.AssetCache"] = lime_AssetCache;
lime_AssetCache.__name__ = ["lime","AssetCache"];
lime_AssetCache.prototype = {
	audio: null
	,enabled: null
	,image: null
	,font: null
	,version: null
	,clear: function(prefix) {
		if(prefix == null) {
			this.audio = new haxe_ds_StringMap();
			this.font = new haxe_ds_StringMap();
			this.image = new haxe_ds_StringMap();
		} else {
			var keys = this.audio.keys();
			while(keys.hasNext()) {
				var key = keys.next();
				if(StringTools.startsWith(key,prefix)) {
					this.audio.remove(key);
				}
			}
			var keys1 = this.font.keys();
			while(keys1.hasNext()) {
				var key1 = keys1.next();
				if(StringTools.startsWith(key1,prefix)) {
					this.font.remove(key1);
				}
			}
			var keys2 = this.image.keys();
			while(keys2.hasNext()) {
				var key2 = keys2.next();
				if(StringTools.startsWith(key2,prefix)) {
					this.image.remove(key2);
				}
			}
		}
	}
	,__class__: lime_AssetCache
};
var lime_app__$Event_$Void_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_Void_Void"] = lime_app__$Event_$Void_$Void;
lime_app__$Event_$Void_$Void.__name__ = ["lime","app","_Event_Void_Void"];
lime_app__$Event_$Void_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function() {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i]();
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$Void_$Void
};
var lime_Assets = function() { };
$hxClasses["lime.Assets"] = lime_Assets;
lime_Assets.__name__ = ["lime","Assets"];
lime_Assets.exists = function(id,type) {
	if(type == null) {
		type = "BINARY";
	}
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName = HxOverrides.substr(id,id.indexOf(":") + 1,null);
	var library = lime_Assets.getLibrary(libraryName);
	if(library != null) {
		return library.exists(symbolName,type);
	}
	return false;
};
lime_Assets.getAudioBuffer = function(id,useCache) {
	if(useCache == null) {
		useCache = true;
	}
	var tmp;
	if(useCache && lime_Assets.cache.enabled) {
		var _this = lime_Assets.cache.audio;
		if(__map_reserved[id] != null) {
			tmp = _this.existsReserved(id);
		} else {
			tmp = _this.h.hasOwnProperty(id);
		}
	} else {
		tmp = false;
	}
	if(tmp) {
		var _this1 = lime_Assets.cache.audio;
		var audio = __map_reserved[id] != null ? _this1.getReserved(id) : _this1.h[id];
		if(lime_Assets.isValidAudio(audio)) {
			return audio;
		}
	}
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName = HxOverrides.substr(id,id.indexOf(":") + 1,null);
	var library = lime_Assets.getLibrary(libraryName);
	if(library != null) {
		if(library.exists(symbolName,"SOUND")) {
			if(library.isLocal(symbolName,"SOUND")) {
				var audio1 = library.getAudioBuffer(symbolName);
				if(useCache && lime_Assets.cache.enabled) {
					var _this2 = lime_Assets.cache.audio;
					if(__map_reserved[id] != null) {
						_this2.setReserved(id,audio1);
					} else {
						_this2.h[id] = audio1;
					}
				}
				return audio1;
			} else {
				lime_utils_Log.info("Audio asset \"" + id + "\" exists, but only asynchronously",{ fileName : "Assets.hx", lineNumber : 119, className : "lime.Assets", methodName : "getAudioBuffer"});
			}
		} else {
			lime_utils_Log.info("There is no audio asset with an ID of \"" + id + "\"",{ fileName : "Assets.hx", lineNumber : 125, className : "lime.Assets", methodName : "getAudioBuffer"});
		}
	} else {
		lime_utils_Log.info("There is no asset library named \"" + libraryName + "\"",{ fileName : "Assets.hx", lineNumber : 131, className : "lime.Assets", methodName : "getAudioBuffer"});
	}
	return null;
};
lime_Assets.getBytes = function(id) {
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName = HxOverrides.substr(id,id.indexOf(":") + 1,null);
	var library = lime_Assets.getLibrary(libraryName);
	if(library != null) {
		if(library.exists(symbolName,"BINARY")) {
			if(library.isLocal(symbolName,"BINARY")) {
				return library.getBytes(symbolName);
			} else {
				lime_utils_Log.info("String or Bytes asset \"" + id + "\" exists, but only asynchronously",{ fileName : "Assets.hx", lineNumber : 166, className : "lime.Assets", methodName : "getBytes"});
			}
		} else {
			lime_utils_Log.info("There is no String or Bytes asset with an ID of \"" + id + "\"",{ fileName : "Assets.hx", lineNumber : 172, className : "lime.Assets", methodName : "getBytes"});
		}
	} else {
		lime_utils_Log.info("There is no asset library named \"" + libraryName + "\"",{ fileName : "Assets.hx", lineNumber : 178, className : "lime.Assets", methodName : "getBytes"});
	}
	return null;
};
lime_Assets.getFont = function(id,useCache) {
	if(useCache == null) {
		useCache = true;
	}
	var tmp;
	if(useCache && lime_Assets.cache.enabled) {
		var _this = lime_Assets.cache.font;
		if(__map_reserved[id] != null) {
			tmp = _this.existsReserved(id);
		} else {
			tmp = _this.h.hasOwnProperty(id);
		}
	} else {
		tmp = false;
	}
	if(tmp) {
		var _this1 = lime_Assets.cache.font;
		if(__map_reserved[id] != null) {
			return _this1.getReserved(id);
		} else {
			return _this1.h[id];
		}
	}
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName = HxOverrides.substr(id,id.indexOf(":") + 1,null);
	var library = lime_Assets.getLibrary(libraryName);
	if(library != null) {
		if(library.exists(symbolName,"FONT")) {
			if(library.isLocal(symbolName,"FONT")) {
				var font = library.getFont(symbolName);
				if(useCache && lime_Assets.cache.enabled) {
					var _this2 = lime_Assets.cache.font;
					if(__map_reserved[id] != null) {
						_this2.setReserved(id,font);
					} else {
						_this2.h[id] = font;
					}
				}
				return font;
			} else {
				lime_utils_Log.info("Font asset \"" + id + "\" exists, but only asynchronously",{ fileName : "Assets.hx", lineNumber : 227, className : "lime.Assets", methodName : "getFont"});
			}
		} else {
			lime_utils_Log.info("There is no Font asset with an ID of \"" + id + "\"",{ fileName : "Assets.hx", lineNumber : 233, className : "lime.Assets", methodName : "getFont"});
		}
	} else {
		lime_utils_Log.info("There is no asset library named \"" + libraryName + "\"",{ fileName : "Assets.hx", lineNumber : 239, className : "lime.Assets", methodName : "getFont"});
	}
	return null;
};
lime_Assets.getImage = function(id,useCache) {
	if(useCache == null) {
		useCache = true;
	}
	var tmp;
	if(useCache && lime_Assets.cache.enabled) {
		var _this = lime_Assets.cache.image;
		if(__map_reserved[id] != null) {
			tmp = _this.existsReserved(id);
		} else {
			tmp = _this.h.hasOwnProperty(id);
		}
	} else {
		tmp = false;
	}
	if(tmp) {
		var _this1 = lime_Assets.cache.image;
		var image = __map_reserved[id] != null ? _this1.getReserved(id) : _this1.h[id];
		if(lime_Assets.isValidImage(image)) {
			return image;
		}
	}
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName = HxOverrides.substr(id,id.indexOf(":") + 1,null);
	var library = lime_Assets.getLibrary(libraryName);
	if(library != null) {
		if(library.exists(symbolName,"IMAGE")) {
			if(library.isLocal(symbolName,"IMAGE")) {
				var image1 = library.getImage(symbolName);
				if(useCache && lime_Assets.cache.enabled) {
					var _this2 = lime_Assets.cache.image;
					if(__map_reserved[id] != null) {
						_this2.setReserved(id,image1);
					} else {
						_this2.h[id] = image1;
					}
				}
				return image1;
			} else {
				lime_utils_Log.info("Image asset \"" + id + "\" exists, but only asynchronously",{ fileName : "Assets.hx", lineNumber : 295, className : "lime.Assets", methodName : "getImage"});
			}
		} else {
			lime_utils_Log.info("There is no Image asset with an ID of \"" + id + "\"",{ fileName : "Assets.hx", lineNumber : 301, className : "lime.Assets", methodName : "getImage"});
		}
	} else {
		lime_utils_Log.info("There is no asset library named \"" + libraryName + "\"",{ fileName : "Assets.hx", lineNumber : 307, className : "lime.Assets", methodName : "getImage"});
	}
	return null;
};
lime_Assets.getLibrary = function(name) {
	if(name == null || name == "") {
		name = "default";
	}
	var _this = lime_Assets.libraries;
	if(__map_reserved[name] != null) {
		return _this.getReserved(name);
	} else {
		return _this.h[name];
	}
};
lime_Assets.getPath = function(id) {
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName = HxOverrides.substr(id,id.indexOf(":") + 1,null);
	var library = lime_Assets.getLibrary(libraryName);
	if(library != null) {
		if(library.exists(symbolName,null)) {
			return library.getPath(symbolName);
		} else {
			lime_utils_Log.info("There is no asset with an ID of \"" + id + "\"",{ fileName : "Assets.hx", lineNumber : 353, className : "lime.Assets", methodName : "getPath"});
		}
	} else {
		lime_utils_Log.info("There is no asset library named \"" + libraryName + "\"",{ fileName : "Assets.hx", lineNumber : 359, className : "lime.Assets", methodName : "getPath"});
	}
	return null;
};
lime_Assets.getText = function(id) {
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName = HxOverrides.substr(id,id.indexOf(":") + 1,null);
	var library = lime_Assets.getLibrary(libraryName);
	if(library != null) {
		if(library.exists(symbolName,"TEXT")) {
			if(library.isLocal(symbolName,"TEXT")) {
				return library.getText(symbolName);
			} else {
				lime_utils_Log.info("String asset \"" + id + "\" exists, but only asynchronously",{ fileName : "Assets.hx", lineNumber : 394, className : "lime.Assets", methodName : "getText"});
			}
		} else {
			lime_utils_Log.info("There is no String asset with an ID of \"" + id + "\"",{ fileName : "Assets.hx", lineNumber : 400, className : "lime.Assets", methodName : "getText"});
		}
	} else {
		lime_utils_Log.info("There is no asset library named \"" + libraryName + "\"",{ fileName : "Assets.hx", lineNumber : 406, className : "lime.Assets", methodName : "getText"});
	}
	return null;
};
lime_Assets.isLocal = function(id,type,useCache) {
	if(useCache == null) {
		useCache = true;
	}
	if(useCache && lime_Assets.cache.enabled) {
		if(type == "IMAGE" || type == null) {
			var _this = lime_Assets.cache.image;
			if(__map_reserved[id] != null ? _this.existsReserved(id) : _this.h.hasOwnProperty(id)) {
				return true;
			}
		}
		if(type == "FONT" || type == null) {
			var _this1 = lime_Assets.cache.font;
			if(__map_reserved[id] != null ? _this1.existsReserved(id) : _this1.h.hasOwnProperty(id)) {
				return true;
			}
		}
		if(type == "SOUND" || type == "MUSIC" || type == null) {
			var _this2 = lime_Assets.cache.audio;
			if(__map_reserved[id] != null ? _this2.existsReserved(id) : _this2.h.hasOwnProperty(id)) {
				return true;
			}
		}
	}
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName = HxOverrides.substr(id,id.indexOf(":") + 1,null);
	var library = lime_Assets.getLibrary(libraryName);
	if(library != null) {
		return library.isLocal(symbolName,type);
	}
	return false;
};
lime_Assets.isValidAudio = function(buffer) {
	return buffer != null;
};
lime_Assets.isValidImage = function(buffer) {
	return true;
};
lime_Assets.list = function(type) {
	var items = [];
	var _this = lime_Assets.libraries;
	var library = new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys());
	while(library.hasNext()) {
		var libraryItems = library.next().list(type);
		if(libraryItems != null) {
			items = items.concat(libraryItems);
		}
	}
	return items;
};
lime_Assets.loadAudioBuffer = function(id,useCache) {
	if(useCache == null) {
		useCache = true;
	}
	var promise = new lime_app_Promise();
	var tmp;
	if(useCache && lime_Assets.cache.enabled) {
		var _this = lime_Assets.cache.audio;
		if(__map_reserved[id] != null) {
			tmp = _this.existsReserved(id);
		} else {
			tmp = _this.h.hasOwnProperty(id);
		}
	} else {
		tmp = false;
	}
	if(tmp) {
		var _this1 = lime_Assets.cache.audio;
		var audio = __map_reserved[id] != null ? _this1.getReserved(id) : _this1.h[id];
		if(lime_Assets.isValidAudio(audio)) {
			promise.complete(audio);
			return promise.future;
		}
	}
	var libraryName = id.indexOf(":");
	var libraryName1 = id.substring(0,libraryName);
	var pos = id.indexOf(":") + 1;
	var symbolName = HxOverrides.substr(id,pos,null);
	var library = lime_Assets.getLibrary(libraryName1);
	if(library != null) {
		if(library.exists(symbolName,"SOUND")) {
			var future = library.loadAudioBuffer(symbolName);
			if(useCache && lime_Assets.cache.enabled) {
				future.onComplete(function(audio1) {
					var _this2 = lime_Assets.cache.audio;
					if(__map_reserved[id] != null) {
						_this2.setReserved(id,audio1);
					} else {
						_this2.h[id] = audio1;
					}
				});
			}
			promise.completeWith(future);
		} else {
			promise.error("[Assets] There is no audio asset with an ID of \"" + id + "\"");
		}
	} else {
		promise.error("[Assets] There is no asset library named \"" + libraryName1 + "\"");
	}
	return promise.future;
};
lime_Assets.loadBytes = function(id) {
	var promise = new lime_app_Promise();
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName = HxOverrides.substr(id,id.indexOf(":") + 1,null);
	var library = lime_Assets.getLibrary(libraryName);
	if(library != null) {
		if(library.exists(symbolName,"BINARY")) {
			promise.completeWith(library.loadBytes(symbolName));
		} else {
			promise.error("[Assets] There is no String or Bytes asset with an ID of \"" + id + "\"");
		}
	} else {
		promise.error("[Assets] There is no asset library named \"" + libraryName + "\"");
	}
	return promise.future;
};
lime_Assets.loadFont = function(id) {
	var promise = new lime_app_Promise();
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName = HxOverrides.substr(id,id.indexOf(":") + 1,null);
	var library = lime_Assets.getLibrary(libraryName);
	if(library != null) {
		if(library.exists(symbolName,"FONT")) {
			promise.completeWith(library.loadFont(symbolName));
		} else {
			promise.error("[Assets] There is no Font asset with an ID of \"" + id + "\"");
		}
	} else {
		promise.error("[Assets] There is no asset library named \"" + libraryName + "\"");
	}
	return promise.future;
};
lime_Assets.loadImage = function(id,useCache) {
	if(useCache == null) {
		useCache = true;
	}
	var promise = new lime_app_Promise();
	var tmp;
	if(useCache && lime_Assets.cache.enabled) {
		var _this = lime_Assets.cache.image;
		if(__map_reserved[id] != null) {
			tmp = _this.existsReserved(id);
		} else {
			tmp = _this.h.hasOwnProperty(id);
		}
	} else {
		tmp = false;
	}
	if(tmp) {
		var _this1 = lime_Assets.cache.image;
		var image = __map_reserved[id] != null ? _this1.getReserved(id) : _this1.h[id];
		if(lime_Assets.isValidImage(image)) {
			promise.complete(image);
			return promise.future;
		}
	}
	var libraryName = id.indexOf(":");
	var libraryName1 = id.substring(0,libraryName);
	var pos = id.indexOf(":") + 1;
	var symbolName = HxOverrides.substr(id,pos,null);
	var library = lime_Assets.getLibrary(libraryName1);
	if(library != null) {
		if(library.exists(symbolName,"IMAGE")) {
			var future = library.loadImage(symbolName);
			if(useCache && lime_Assets.cache.enabled) {
				future.onComplete(function(image1) {
					var _this2 = lime_Assets.cache.image;
					if(__map_reserved[id] != null) {
						_this2.setReserved(id,image1);
					} else {
						_this2.h[id] = image1;
					}
				});
			}
			promise.completeWith(future);
		} else {
			promise.error("[Assets] There is no Image asset with an ID of \"" + id + "\"");
		}
	} else {
		promise.error("[Assets] There is no asset library named \"" + libraryName1 + "\"");
	}
	return promise.future;
};
lime_Assets.loadLibrary = function(name) {
	var promise = new lime_app_Promise();
	var data = lime_Assets.getText("libraries/" + name + ".json");
	if(data != null && data != "") {
		var info = JSON.parse(data);
		var library = Type.createInstance(Type.resolveClass(info.type),info.args);
		var _this = lime_Assets.libraries;
		if(__map_reserved[name] != null) {
			_this.setReserved(name,library);
		} else {
			_this.h[name] = library;
		}
		library.onChange.add(($_=lime_Assets.onChange,$bind($_,$_.dispatch)));
		promise.completeWith(library.load());
	} else {
		promise.error("[Assets] There is no asset library named \"" + name + "\"");
	}
	return promise.future;
};
lime_Assets.loadText = function(id) {
	var promise = new lime_app_Promise();
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName = HxOverrides.substr(id,id.indexOf(":") + 1,null);
	var library = lime_Assets.getLibrary(libraryName);
	if(library != null) {
		if(library.exists(symbolName,"TEXT")) {
			promise.completeWith(library.loadText(symbolName));
		} else {
			promise.error("[Assets] There is no String asset with an ID of \"" + id + "\"");
		}
	} else {
		promise.error("[Assets] There is no asset library named \"" + libraryName + "\"");
	}
	return promise.future;
};
lime_Assets.registerLibrary = function(name,library) {
	var _this = lime_Assets.libraries;
	if(__map_reserved[name] != null ? _this.existsReserved(name) : _this.h.hasOwnProperty(name)) {
		var _this1 = lime_Assets.libraries;
		if((__map_reserved[name] != null ? _this1.getReserved(name) : _this1.h[name]) == library) {
			return;
		} else {
			lime_Assets.unloadLibrary(name);
		}
	}
	if(library != null) {
		library.onChange.add(lime_Assets.library_onChange);
	}
	var _this2 = lime_Assets.libraries;
	if(__map_reserved[name] != null) {
		_this2.setReserved(name,library);
	} else {
		_this2.h[name] = library;
	}
};
lime_Assets.unloadLibrary = function(name) {
	var _this = lime_Assets.libraries;
	var library = __map_reserved[name] != null ? _this.getReserved(name) : _this.h[name];
	if(library != null) {
		lime_Assets.cache.clear(name + ":");
		library.onChange.remove(lime_Assets.library_onChange);
		library.unload();
	}
	lime_Assets.libraries.remove(name);
};
lime_Assets.library_onChange = function() {
	lime_Assets.cache.clear();
	lime_Assets.onChange.dispatch();
};
var lime__$backend_html5_HTML5Application = function(parent) {
	this.gameDeviceCache = new haxe_ds_IntMap();
	this.parent = parent;
	this.currentUpdate = 0;
	this.lastUpdate = 0;
	this.nextUpdate = 0;
	this.framePeriod = -1;
	lime_audio_AudioManager.init();
};
$hxClasses["lime._backend.html5.HTML5Application"] = lime__$backend_html5_HTML5Application;
lime__$backend_html5_HTML5Application.__name__ = ["lime","_backend","html5","HTML5Application"];
lime__$backend_html5_HTML5Application.prototype = {
	gameDeviceCache: null
	,currentUpdate: null
	,deltaTime: null
	,framePeriod: null
	,lastUpdate: null
	,nextUpdate: null
	,parent: null
	,convertKeyCode: function(keyCode) {
		if(keyCode >= 65 && keyCode <= 90) {
			return keyCode + 32;
		}
		switch(keyCode) {
		case 16:
			return 1073742049;
		case 17:
			return 1073742048;
		case 18:
			return 1073742050;
		case 20:
			return 1073741881;
		case 33:
			return 1073741899;
		case 34:
			return 1073741902;
		case 35:
			return 1073741901;
		case 36:
			return 1073741898;
		case 37:
			return 1073741904;
		case 38:
			return 1073741906;
		case 39:
			return 1073741903;
		case 40:
			return 1073741905;
		case 45:
			return 1073741897;
		case 46:
			return 127;
		case 96:
			return 1073741922;
		case 97:
			return 1073741913;
		case 98:
			return 1073741914;
		case 99:
			return 1073741915;
		case 100:
			return 1073741916;
		case 101:
			return 1073741917;
		case 102:
			return 1073741918;
		case 103:
			return 1073741919;
		case 104:
			return 1073741920;
		case 105:
			return 1073741921;
		case 106:
			return 1073741909;
		case 107:
			return 1073741911;
		case 109:
			return 1073741910;
		case 110:
			return 1073741923;
		case 111:
			return 1073741908;
		case 112:
			return 1073741882;
		case 113:
			return 1073741883;
		case 114:
			return 1073741884;
		case 115:
			return 1073741885;
		case 116:
			return 1073741886;
		case 117:
			return 1073741887;
		case 118:
			return 1073741888;
		case 119:
			return 1073741889;
		case 120:
			return 1073741890;
		case 121:
			return 1073741891;
		case 122:
			return 1073741892;
		case 123:
			return 1073741893;
		case 124:
			return 1073741928;
		case 125:
			return 1073741929;
		case 126:
			return 1073741930;
		case 144:
			return 1073741907;
		case 186:
			return 59;
		case 187:
			return 61;
		case 188:
			return 44;
		case 189:
			return 45;
		case 190:
			return 46;
		case 191:
			return 47;
		case 192:
			return 96;
		case 219:
			return 91;
		case 220:
			return 92;
		case 221:
			return 93;
		case 222:
			return 39;
		}
		return keyCode;
	}
	,create: function(config) {
	}
	,exec: function() {
		window.addEventListener("keydown",$bind(this,this.handleKeyEvent),false);
		window.addEventListener("keyup",$bind(this,this.handleKeyEvent),false);
		window.addEventListener("focus",$bind(this,this.handleWindowEvent),false);
		window.addEventListener("blur",$bind(this,this.handleWindowEvent),false);
		window.addEventListener("resize",$bind(this,this.handleWindowEvent),false);
		window.addEventListener("beforeunload",$bind(this,this.handleWindowEvent),false);
		
			if (!CanvasRenderingContext2D.prototype.isPointInStroke) {
				CanvasRenderingContext2D.prototype.isPointInStroke = function (path, x, y) {
					return false;
				};
			}
			
			var lastTime = 0;
			var vendors = ['ms', 'moz', 'webkit', 'o'];
			for (var x = 0; x < vendors.length && !window.requestAnimationFrame; ++x) {
				window.requestAnimationFrame = window[vendors[x]+'RequestAnimationFrame'];
				window.cancelAnimationFrame = window[vendors[x]+'CancelAnimationFrame'] || window[vendors[x]+'CancelRequestAnimationFrame'];
			}
			
			if (!window.requestAnimationFrame)
				window.requestAnimationFrame = function(callback, element) {
					var currTime = new Date().getTime();
					var timeToCall = Math.max(0, 16 - (currTime - lastTime));
					var id = window.setTimeout(function() { callback(currTime + timeToCall); }, 
					  timeToCall);
					lastTime = currTime + timeToCall;
					return id;
				};
			
			if (!window.cancelAnimationFrame)
				window.cancelAnimationFrame = function(id) {
					clearTimeout(id);
				};
			
			window.requestAnimFrame = window.requestAnimationFrame;
		;
		this.lastUpdate = new Date().getTime();
		this.handleApplicationEvent();
		return 0;
	}
	,exit: function() {
	}
	,getFrameRate: function() {
		if(this.framePeriod < 0) {
			return 60;
		} else if(this.framePeriod == 1000) {
			return 0;
		} else {
			return 1000 / this.framePeriod;
		}
	}
	,handleApplicationEvent: function(__) {
		this.updateGameDevices();
		this.currentUpdate = new Date().getTime();
		if(this.currentUpdate >= this.nextUpdate) {
			this.deltaTime = this.currentUpdate - this.lastUpdate;
			this.parent.onUpdate.dispatch(this.deltaTime | 0);
			if(this.parent.__renderers[0] != null) {
				this.parent.__renderers[0].onRender.dispatch();
				this.parent.__renderers[0].flip();
			}
			if(this.framePeriod < 0) {
				this.nextUpdate = this.currentUpdate;
				this.nextUpdate = this.currentUpdate;
			} else {
				this.nextUpdate = this.currentUpdate + this.framePeriod;
			}
			this.lastUpdate = this.currentUpdate;
		}
		window.requestAnimationFrame($bind(this,this.handleApplicationEvent));
	}
	,handleKeyEvent: function(event) {
		if(this.parent.__windows[0] != null) {
			var keyCode = this.convertKeyCode(event.keyCode != null ? event.keyCode : event.which);
			var modifier = (event.shiftKey ? 3 : 0) | (event.ctrlKey ? 192 : 0) | (event.altKey ? 768 : 0) | (event.metaKey ? 3072 : 0);
			if(event.type == "keydown") {
				this.parent.__windows[0].onKeyDown.dispatch(keyCode,modifier);
				if(this.parent.__windows[0].onKeyDown.canceled) {
					event.preventDefault();
				}
			} else {
				this.parent.__windows[0].onKeyUp.dispatch(keyCode,modifier);
				if(this.parent.__windows[0].onKeyUp.canceled) {
					event.preventDefault();
				}
			}
		}
	}
	,handleWindowEvent: function(event) {
		if(this.parent.__windows[0] != null) {
			switch(event.type) {
			case "beforeunload":
				this.parent.__windows[0].onClose.dispatch();
				break;
			case "blur":
				this.parent.__windows[0].onFocusOut.dispatch();
				this.parent.__windows[0].onDeactivate.dispatch();
				break;
			case "focus":
				this.parent.__windows[0].onFocusIn.dispatch();
				this.parent.__windows[0].onActivate.dispatch();
				break;
			case "resize":
				var cacheWidth = this.parent.__windows[0].__width;
				var cacheHeight = this.parent.__windows[0].__height;
				this.parent.__windows[0].backend.handleResize();
				if(this.parent.__windows[0].__width != cacheWidth || this.parent.__windows[0].__height != cacheHeight) {
					this.parent.__windows[0].onResize.dispatch(this.parent.__windows[0].__width,this.parent.__windows[0].__height);
				}
				break;
			}
		}
	}
	,setFrameRate: function(value) {
		if(value >= 60) {
			this.framePeriod = -1;
		} else if(value > 0) {
			this.framePeriod = 1000 / value;
		} else {
			this.framePeriod = 1000;
		}
		return value;
	}
	,updateGameDevices: function() {
		var devices = lime_ui_Joystick.__getDeviceData();
		if(devices == null) {
			return;
		}
		var gamepad;
		var joystick;
		var data;
		var cache;
		var _g1 = 0;
		var _g = devices.length;
		while(_g1 < _g) {
			var i = _g1++;
			data = devices[i];
			if(data == null) {
				continue;
			}
			if(!this.gameDeviceCache.h.hasOwnProperty(i)) {
				cache = new lime__$backend_html5_GameDeviceData();
				cache.id = i;
				cache.connected = data.connected;
				var _g3 = 0;
				var _g2 = data.buttons.length;
				while(_g3 < _g2) cache.buttons.push(data.buttons[_g3++].value);
				var _g31 = 0;
				var _g21 = data.axes.length;
				while(_g31 < _g21) cache.axes.push(data.axes[_g31++]);
				if(data.mapping == "standard") {
					cache.isGamepad = true;
				}
				this.gameDeviceCache.h[i] = cache;
				if(data.connected) {
					lime_ui_Joystick.__connect(i);
					if(cache.isGamepad) {
						lime_ui_Gamepad.__connect(i);
					}
				}
			}
			cache = this.gameDeviceCache.h[i];
			joystick = lime_ui_Joystick.devices.h[i];
			gamepad = lime_ui_Gamepad.devices.h[i];
			if(data.connected) {
				var button;
				var value;
				var _g32 = 0;
				var _g22 = data.buttons.length;
				while(_g32 < _g22) {
					var i1 = _g32++;
					value = data.buttons[i1].value;
					if(value != cache.buttons[i1]) {
						if(i1 == 6) {
							joystick.onAxisMove.dispatch(data.axes.length,value);
							if(gamepad != null) {
								gamepad.onAxisMove.dispatch(4,value);
							}
						} else if(i1 == 7) {
							joystick.onAxisMove.dispatch(data.axes.length + 1,value);
							if(gamepad != null) {
								gamepad.onAxisMove.dispatch(5,value);
							}
						} else {
							if(value > 0) {
								joystick.onButtonDown.dispatch(i1);
							} else {
								joystick.onButtonUp.dispatch(i1);
							}
							if(gamepad != null) {
								switch(i1) {
								case 0:
									button = 0;
									break;
								case 1:
									button = 1;
									break;
								case 2:
									button = 2;
									break;
								case 3:
									button = 3;
									break;
								case 4:
									button = 9;
									break;
								case 5:
									button = 10;
									break;
								case 8:
									button = 4;
									break;
								case 9:
									button = 6;
									break;
								case 10:
									button = 7;
									break;
								case 11:
									button = 8;
									break;
								case 12:
									button = 11;
									break;
								case 13:
									button = 12;
									break;
								case 14:
									button = 13;
									break;
								case 15:
									button = 14;
									break;
								case 16:
									button = 5;
									break;
								default:
									continue;
								}
								if(value > 0) {
									gamepad.onButtonDown.dispatch(button);
								} else {
									gamepad.onButtonUp.dispatch(button);
								}
							}
						}
						cache.buttons[i1] = value;
					}
				}
				var _g33 = 0;
				var _g23 = data.axes.length;
				while(_g33 < _g23) {
					var i2 = _g33++;
					if(data.axes[i2] != cache.axes[i2]) {
						joystick.onAxisMove.dispatch(i2,data.axes[i2]);
						if(gamepad != null) {
							gamepad.onAxisMove.dispatch(i2,data.axes[i2]);
						}
						cache.axes[i2] = data.axes[i2];
					}
				}
			} else if(cache.connected) {
				cache.connected = false;
				lime_ui_Joystick.__disconnect(i);
				lime_ui_Gamepad.__disconnect(i);
			}
		}
	}
	,__class__: lime__$backend_html5_HTML5Application
};
var lime__$backend_html5_GameDeviceData = function() {
	this.connected = true;
	this.buttons = [];
	this.axes = [];
};
$hxClasses["lime._backend.html5.GameDeviceData"] = lime__$backend_html5_GameDeviceData;
lime__$backend_html5_GameDeviceData.__name__ = ["lime","_backend","html5","GameDeviceData"];
lime__$backend_html5_GameDeviceData.prototype = {
	connected: null
	,id: null
	,isGamepad: null
	,buttons: null
	,axes: null
	,__class__: lime__$backend_html5_GameDeviceData
};
var lime__$backend_html5_HTML5AudioSource = function(parent) {
	this.parent = parent;
	this.gain = 1;
	this.position = new lime_math_Vector4();
};
$hxClasses["lime._backend.html5.HTML5AudioSource"] = lime__$backend_html5_HTML5AudioSource;
lime__$backend_html5_HTML5AudioSource.__name__ = ["lime","_backend","html5","HTML5AudioSource"];
lime__$backend_html5_HTML5AudioSource.prototype = {
	completed: null
	,gain: null
	,id: null
	,length: null
	,loops: null
	,parent: null
	,playing: null
	,position: null
	,dispose: function() {
	}
	,init: function() {
	}
	,play: function() {
		if(this.playing || this.parent.buffer == null) {
			return;
		}
		this.playing = true;
		var time = this.getCurrentTime();
		this.completed = false;
		this.id = this.parent.buffer.__srcHowl.play();
		this.setGain(this.parent.get_gain());
		this.setPosition(this.parent.get_position());
		this.parent.buffer.__srcHowl.on("end",$bind(this,this.howl_onEnd),this.id);
		this.setCurrentTime(time);
	}
	,pause: function() {
		this.playing = false;
		this.parent.buffer.__srcHowl.pause(this.id);
	}
	,stop: function() {
		this.playing = false;
		this.parent.buffer.__srcHowl.stop(this.id);
	}
	,howl_onEnd: function() {
		this.playing = false;
		if(this.loops > 0) {
			this.loops--;
			this.stop();
			this.play();
			return;
		} else {
			this.parent.buffer.__srcHowl.stop(this.id);
		}
		this.completed = true;
		this.parent.onComplete.dispatch();
	}
	,getCurrentTime: function() {
		if(this.completed) {
			return this.getLength();
		} else {
			var time = (this.parent.buffer.__srcHowl.seek(this.id) * 1000 | 0) - this.parent.offset;
			if(time < 0) {
				return 0;
			}
			return time;
		}
	}
	,setCurrentTime: function(value) {
		if(this.parent.buffer != null) {
			var pos = (value + this.parent.offset) / 1000;
			if(pos < 0) {
				pos = 0;
			}
			this.parent.buffer.__srcHowl.seek(pos,this.id);
		}
		return value;
	}
	,getGain: function() {
		return this.gain;
	}
	,setGain: function(value) {
		if(this.parent.buffer != null) {
			this.parent.buffer.__srcHowl.volume(value,this.id);
		}
		return this.gain = value;
	}
	,getLength: function() {
		if(this.length != 0) {
			return this.length;
		}
		return this.parent.buffer.__srcHowl.duration() * 1000 | 0;
	}
	,setLength: function(value) {
		return this.length = value;
	}
	,getLoops: function() {
		return this.loops;
	}
	,setLoops: function(value) {
		return this.loops = value;
	}
	,getPosition: function() {
		return this.position;
	}
	,setPosition: function(value) {
		this.position.x = value.x;
		this.position.y = value.y;
		this.position.z = value.z;
		this.position.w = value.w;
		return this.position;
	}
	,__class__: lime__$backend_html5_HTML5AudioSource
};
var lime__$backend_html5_HTML5Mouse = function() { };
$hxClasses["lime._backend.html5.HTML5Mouse"] = lime__$backend_html5_HTML5Mouse;
lime__$backend_html5_HTML5Mouse.__name__ = ["lime","_backend","html5","HTML5Mouse"];
lime__$backend_html5_HTML5Mouse.hide = function() {
	if(!lime__$backend_html5_HTML5Mouse.__hidden) {
		lime__$backend_html5_HTML5Mouse.__hidden = true;
		var _g = 0;
		var _g1 = lime_app_Application.current.__windows;
		while(_g < _g1.length) {
			var $window = _g1[_g];
			++_g;
			$window.backend.element.style.cursor = "none";
		}
	}
};
lime__$backend_html5_HTML5Mouse.show = function() {
	if(lime__$backend_html5_HTML5Mouse.__hidden) {
		lime__$backend_html5_HTML5Mouse.__hidden = false;
		var cacheValue = lime__$backend_html5_HTML5Mouse.__cursor;
		lime__$backend_html5_HTML5Mouse.__cursor = null;
		lime__$backend_html5_HTML5Mouse.set_cursor(cacheValue);
	}
};
lime__$backend_html5_HTML5Mouse.warp = function(x,y,window) {
};
lime__$backend_html5_HTML5Mouse.get_cursor = function() {
	if(lime__$backend_html5_HTML5Mouse.__cursor == null) {
		return lime_ui_MouseCursor.DEFAULT;
	}
	return lime__$backend_html5_HTML5Mouse.__cursor;
};
lime__$backend_html5_HTML5Mouse.set_cursor = function(value) {
	if(lime__$backend_html5_HTML5Mouse.__cursor != value) {
		if(!lime__$backend_html5_HTML5Mouse.__hidden) {
			var _g = 0;
			var _g1 = lime_app_Application.current.__windows;
			while(_g < _g1.length) {
				var $window = _g1[_g];
				++_g;
				var tmp;
				switch(value[1]) {
				case 0:
					tmp = "default";
					break;
				case 1:
					tmp = "crosshair";
					break;
				case 3:
					tmp = "move";
					break;
				case 4:
					tmp = "pointer";
					break;
				case 5:
					tmp = "nesw-resize";
					break;
				case 6:
					tmp = "ns-resize";
					break;
				case 7:
					tmp = "nwse-resize";
					break;
				case 8:
					tmp = "ew-resize";
					break;
				case 9:
					tmp = "text";
					break;
				case 10:
					tmp = "wait";
					break;
				case 11:
					tmp = "wait";
					break;
				default:
					tmp = "auto";
				}
				$window.backend.element.style.cursor = tmp;
			}
		}
		lime__$backend_html5_HTML5Mouse.__cursor = value;
	}
	return lime__$backend_html5_HTML5Mouse.__cursor;
};
lime__$backend_html5_HTML5Mouse.get_lock = function() {
	return false;
};
lime__$backend_html5_HTML5Mouse.set_lock = function(value) {
	return value;
};
var lime__$backend_html5_HTML5Renderer = function(parent) {
	this.parent = parent;
};
$hxClasses["lime._backend.html5.HTML5Renderer"] = lime__$backend_html5_HTML5Renderer;
lime__$backend_html5_HTML5Renderer.__name__ = ["lime","_backend","html5","HTML5Renderer"];
lime__$backend_html5_HTML5Renderer.prototype = {
	parent: null
	,create: function() {
		this.createContext();
		if(this.parent.context[1] == 0) {
			this.parent.window.backend.canvas.addEventListener("webglcontextlost",$bind(this,this.handleEvent),false);
			this.parent.window.backend.canvas.addEventListener("webglcontextrestored",$bind(this,this.handleEvent),false);
		}
	}
	,createContext: function() {
		if(this.parent.window.backend.div != null) {
			this.parent.context = lime_graphics_RenderContext.DOM(this.parent.window.backend.div);
			this.parent.type = lime_graphics_RendererType.DOM;
		} else if(this.parent.window.backend.canvas != null) {
			var webgl = null;
			if(!Object.prototype.hasOwnProperty.call(this.parent.window.config,"hardware") || this.parent.window.config.hardware) {
				var options = Object.prototype.hasOwnProperty.call(this.parent.window.config,"background") && this.parent.window.config.background == null;
				var options1 = Object.prototype.hasOwnProperty.call(this.parent.window.config,"antialiasing") && this.parent.window.config.antialiasing > 0;
				var options2 = Object.prototype.hasOwnProperty.call(this.parent.window.config,"depthBuffer") ? this.parent.window.config.depthBuffer : true;
				var options3 = Object.prototype.hasOwnProperty.call(this.parent.window.config,"stencilBuffer") && this.parent.window.config.stencilBuffer;
				webgl = js_html__$CanvasElement_CanvasUtil.getContextWebGL(this.parent.window.backend.canvas,{ alpha : options, antialias : options1, depth : options2, premultipliedAlpha : true, stencil : options3, preserveDrawingBuffer : false});
			}
			if(webgl == null) {
				this.parent.context = lime_graphics_RenderContext.CANVAS(this.parent.window.backend.canvas.getContext("2d"));
				this.parent.type = lime_graphics_RendererType.CANVAS;
			} else {
				lime_graphics_opengl_GL.context = webgl;
				this.parent.context = lime_graphics_RenderContext.OPENGL(lime_graphics_opengl_GL.context);
				this.parent.type = lime_graphics_RendererType.OPENGL;
			}
		}
	}
	,flip: function() {
	}
	,handleEvent: function(event) {
		switch(event.type) {
		case "webglcontextlost":
			event.preventDefault();
			this.parent.context = null;
			this.parent.onContextLost.dispatch();
			break;
		case "webglcontextrestored":
			this.createContext();
			this.parent.onContextRestored.dispatch(this.parent.context);
			break;
		default:
		}
	}
	,readPixels: function(rect) {
		if(this.parent.window.backend.canvas != null) {
			if(rect == null) {
				rect = new lime_math_Rectangle(0,0,this.parent.window.backend.canvas.width,this.parent.window.backend.canvas.height);
			} else {
				rect.__contract(0,0,this.parent.window.backend.canvas.width,this.parent.window.backend.canvas.height);
			}
			if(rect.width > 0 && rect.height > 0) {
				var canvas = window.document.createElement("canvas");
				canvas.width = rect.width | 0;
				canvas.height = rect.height | 0;
				canvas.getContext("2d").drawImage(this.parent.window.backend.canvas,-rect.x,-rect.y);
				return lime_graphics_Image.fromCanvas(canvas);
			}
		}
		return null;
	}
	,render: function() {
	}
	,__class__: lime__$backend_html5_HTML5Renderer
};
var lime__$backend_html5_HTML5Window = function(parent) {
	this.unusedTouchesPool = new List();
	this.scale = 1.0;
	this.currentTouches = new haxe_ds_IntMap();
	this.parent = parent;
	if(parent.config != null && Object.prototype.hasOwnProperty.call(parent.config,"element")) {
		this.element = parent.config.element;
	}
	if(parent.config != null && Object.prototype.hasOwnProperty.call(parent.config,"allowHighDPI") && parent.config.allowHighDPI) {
		this.scale = window.devicePixelRatio;
	}
	parent.__scale = this.scale;
	this.cacheMouseX = 0;
	this.cacheMouseY = 0;
};
$hxClasses["lime._backend.html5.HTML5Window"] = lime__$backend_html5_HTML5Window;
lime__$backend_html5_HTML5Window.__name__ = ["lime","_backend","html5","HTML5Window"];
lime__$backend_html5_HTML5Window.prototype = {
	canvas: null
	,div: null
	,element: null
	,cacheMouseX: null
	,cacheMouseY: null
	,currentTouches: null
	,enableTextEvents: null
	,parent: null
	,primaryTouch: null
	,scale: null
	,setHeight: null
	,setWidth: null
	,unusedTouchesPool: null
	,alert: function(message,title) {
		if(message != null) {
			js_Browser.alert(message);
		}
	}
	,close: function() {
		this.parent.application.removeWindow(this.parent);
	}
	,create: function(application) {
		this.setWidth = this.parent.__width;
		this.setHeight = this.parent.__height;
		this.parent.id = lime__$backend_html5_HTML5Window.windowID++;
		if(js_Boot.__instanceof(this.element,HTMLCanvasElement)) {
			this.canvas = this.element;
		} else {
			this.canvas = window.document.createElement("canvas");
		}
		if(this.canvas != null) {
			var style = this.canvas.style;
			style.setProperty("-webkit-transform","translateZ(0)",null);
			style.setProperty("transform","translateZ(0)",null);
		} else if(this.div != null) {
			var style1 = this.div.style;
			style1.setProperty("-webkit-transform","translate3D(0,0,0)",null);
			style1.setProperty("transform","translate3D(0,0,0)",null);
			style1.position = "relative";
			style1.overflow = "hidden";
			style1.setProperty("-webkit-user-select","none",null);
			style1.setProperty("-moz-user-select","none",null);
			style1.setProperty("-ms-user-select","none",null);
			style1.setProperty("-o-user-select","none",null);
		}
		if(this.parent.__width == 0 && this.parent.__height == 0) {
			if(this.element != null) {
				this.parent.set_width(this.element.clientWidth);
				this.parent.set_height(this.element.clientHeight);
			} else {
				this.parent.set_width(window.innerWidth);
				this.parent.set_height(window.innerHeight);
			}
			this.parent.set_fullscreen(true);
		}
		if(this.canvas != null) {
			this.canvas.width = Math.round(this.parent.__width * this.scale);
			this.canvas.height = Math.round(this.parent.__height * this.scale);
			this.canvas.style.width = this.parent.__width + "px";
			this.canvas.style.height = this.parent.__height + "px";
		} else {
			this.div.style.width = this.parent.__width + "px";
			this.div.style.height = this.parent.__height + "px";
		}
		this.handleResize();
		if(this.element != null) {
			if(this.canvas != null) {
				if(this.element != this.canvas) {
					this.element.appendChild(this.canvas);
				}
			} else {
				this.element.appendChild(this.div);
			}
			var events = ["mousedown","mouseenter","mouseleave","mousemove","mouseup","wheel"];
			var _g = 0;
			while(_g < events.length) {
				var event = events[_g];
				++_g;
				this.element.addEventListener(event,$bind(this,this.handleMouseEvent),true);
			}
			window.document.addEventListener("dragstart",function(e) {
				if(e.target.nodeName.toLowerCase() == "img") {
					e.preventDefault();
					return false;
				}
				return true;
			},false);
			this.element.addEventListener("touchstart",$bind(this,this.handleTouchEvent),true);
			this.element.addEventListener("touchmove",$bind(this,this.handleTouchEvent),true);
			this.element.addEventListener("touchend",$bind(this,this.handleTouchEvent),true);
			this.element.addEventListener("gamepadconnected",$bind(this,this.handleGamepadEvent),true);
			this.element.addEventListener("gamepaddisconnected",$bind(this,this.handleGamepadEvent),true);
		}
	}
	,focus: function() {
	}
	,getDisplay: function() {
		return lime_system_System.getDisplay(0);
	}
	,getEnableTextEvents: function() {
		return this.enableTextEvents;
	}
	,handleFocusEvent: function(event) {
		if(this.enableTextEvents) {
			haxe_Timer.delay(function() {
				lime__$backend_html5_HTML5Window.textInput.focus();
			},20);
		}
	}
	,handleGamepadEvent: function(event) {
		switch(event.type) {
		case "gamepadconnected":
			lime_ui_Joystick.__connect(event.gamepad.index);
			if(event.gamepad.mapping == "standard") {
				lime_ui_Gamepad.__connect(event.gamepad.index);
			}
			break;
		case "gamepaddisconnected":
			lime_ui_Joystick.__disconnect(event.gamepad.index);
			lime_ui_Gamepad.__disconnect(event.gamepad.index);
			break;
		default:
		}
	}
	,handleInputEvent: function(event) {
		if(lime__$backend_html5_HTML5Window.textInput.value != "") {
			this.parent.onTextInput.dispatch(lime__$backend_html5_HTML5Window.textInput.value);
			lime__$backend_html5_HTML5Window.textInput.value = "";
		}
	}
	,handleMouseEvent: function(event) {
		var x = 0.0;
		var y = 0.0;
		if(event.type != "wheel") {
			if(this.element != null) {
				if(this.canvas != null) {
					var rect = this.canvas.getBoundingClientRect();
					x = (event.clientX - rect.left) * (this.parent.__width / rect.width);
					y = (event.clientY - rect.top) * (this.parent.__height / rect.height);
				} else if(this.div != null) {
					var rect1 = this.div.getBoundingClientRect();
					x = event.clientX - rect1.left;
					y = event.clientY - rect1.top;
				} else {
					var rect2 = this.element.getBoundingClientRect();
					x = (event.clientX - rect2.left) * (this.parent.__width / rect2.width);
					y = (event.clientY - rect2.top) * (this.parent.__height / rect2.height);
				}
			} else {
				x = event.clientX;
				y = event.clientY;
			}
			var _g = event.type;
			switch(_g) {
			case "mousedown":
				this.parent.onMouseDown.dispatch(x,y,event.button);
				break;
			case "mouseenter":
				this.parent.onEnter.dispatch();
				break;
			case "mouseleave":
				this.parent.onLeave.dispatch();
				break;
			case "mousemove":
				if(x != this.cacheMouseX || y != this.cacheMouseY) {
					this.parent.onMouseMove.dispatch(x,y);
					this.parent.onMouseMoveRelative.dispatch(x - this.cacheMouseX,y - this.cacheMouseY);
				}
				break;
			case "mouseup":
				this.parent.onMouseUp.dispatch(x,y,event.button);
				break;
			default:
			}
			this.cacheMouseX = x;
			this.cacheMouseY = y;
		} else {
			this.parent.onMouseWheel.dispatch(event.deltaX,-event.deltaY);
		}
	}
	,handleResize: function() {
		this.primaryTouch = null;
		var stretch = this.parent.__fullscreen || this.setWidth == 0 && this.setHeight == 0;
		if(this.element != null && (this.div == null || this.div != null && stretch)) {
			if(stretch) {
				if(this.parent.__width != this.element.clientWidth || this.parent.__height != this.element.clientHeight) {
					this.parent.set_width(this.element.clientWidth);
					this.parent.set_height(this.element.clientHeight);
					if(this.canvas != null) {
						if(this.element != this.canvas) {
							this.canvas.width = Math.round(this.element.clientWidth * this.scale);
							this.canvas.height = Math.round(this.element.clientHeight * this.scale);
							this.canvas.style.width = this.element.clientWidth + "px";
							this.canvas.style.height = this.element.clientHeight + "px";
						}
					} else {
						this.div.style.width = this.element.clientWidth + "px";
						this.div.style.height = this.element.clientHeight + "px";
					}
				}
			} else {
				var scaleX = this.setWidth != 0 ? this.element.clientWidth / this.setWidth : 1;
				var scaleY = this.setHeight != 0 ? this.element.clientHeight / this.setHeight : 1;
				var targetWidth = this.element.clientWidth;
				var targetHeight = this.element.clientHeight;
				var marginLeft = 0;
				var marginTop = 0;
				if(scaleX < scaleY) {
					targetHeight = Math.floor(this.setHeight * scaleX);
					marginTop = Math.floor((this.element.clientHeight - targetHeight) / 2);
				} else {
					targetWidth = Math.floor(this.setWidth * scaleY);
					marginLeft = Math.floor((this.element.clientWidth - targetWidth) / 2);
				}
				if(this.canvas != null) {
					if(this.element != this.canvas) {
						this.canvas.style.width = targetWidth + "px";
						this.canvas.style.height = targetHeight + "px";
						this.canvas.style.marginLeft = marginLeft + "px";
						this.canvas.style.marginTop = marginTop + "px";
					}
				} else {
					this.div.style.width = targetWidth + "px";
					this.div.style.height = targetHeight + "px";
					this.div.style.marginLeft = marginLeft + "px";
					this.div.style.marginTop = marginTop + "px";
				}
			}
		}
	}
	,handleTouchEvent: function(event) {
		event.preventDefault();
		var rect = null;
		if(this.element != null) {
			if(this.canvas != null) {
				rect = this.canvas.getBoundingClientRect();
			} else if(this.div != null) {
				rect = this.div.getBoundingClientRect();
			} else {
				rect = this.element.getBoundingClientRect();
			}
		}
		var windowWidth = this.setWidth;
		var windowHeight = this.setHeight;
		if(windowWidth == 0 || windowHeight == 0) {
			if(rect != null) {
				windowWidth = rect.width;
				windowHeight = rect.height;
			} else {
				windowWidth = 1;
				windowHeight = 1;
			}
		}
		var _g = 0;
		var _g1 = event.changedTouches;
		while(_g < _g1.length) {
			var data = _g1[_g];
			++_g;
			var x = 0.0;
			var y = 0.0;
			if(rect != null) {
				x = (data.clientX - rect.left) * (windowWidth / rect.width);
				y = (data.clientY - rect.top) * (windowHeight / rect.height);
			} else {
				x = data.clientX;
				y = data.clientY;
			}
			switch(event.type) {
			case "touchend":
				var touch = this.currentTouches.get(data.identifier);
				if(touch != null) {
					var cacheX = touch.x;
					var cacheY = touch.y;
					touch.x = x / windowWidth;
					touch.y = y / windowHeight;
					touch.dx = touch.x - cacheX;
					touch.dy = touch.y - cacheY;
					touch.pressure = data.force;
					lime_ui_Touch.onEnd.dispatch(touch);
					this.currentTouches.remove(data.identifier);
					this.unusedTouchesPool.add(touch);
					if(touch == this.primaryTouch) {
						this.parent.onMouseUp.dispatch(x,y,0);
						this.primaryTouch = null;
					}
				}
				break;
			case "touchmove":
				var touch1 = this.currentTouches.get(data.identifier);
				if(touch1 != null) {
					var cacheX1 = touch1.x;
					var cacheY1 = touch1.y;
					touch1.x = x / windowWidth;
					touch1.y = y / windowHeight;
					touch1.dx = touch1.x - cacheX1;
					touch1.dy = touch1.y - cacheY1;
					touch1.pressure = data.force;
					lime_ui_Touch.onMove.dispatch(touch1);
					if(touch1 == this.primaryTouch) {
						this.parent.onMouseMove.dispatch(x,y);
					}
				}
				break;
			case "touchstart":
				var touch2 = this.unusedTouchesPool.pop();
				if(touch2 == null) {
					touch2 = new lime_ui_Touch(x / windowWidth,y / windowHeight,data.identifier,0,0,data.force,this.parent.id);
				} else {
					touch2.x = x / windowWidth;
					touch2.y = y / windowHeight;
					touch2.id = data.identifier;
					touch2.dx = 0;
					touch2.dy = 0;
					touch2.pressure = data.force;
					touch2.device = this.parent.id;
				}
				this.currentTouches.set(data.identifier,touch2);
				lime_ui_Touch.onStart.dispatch(touch2);
				if(this.primaryTouch == null) {
					this.primaryTouch = touch2;
				}
				if(touch2 == this.primaryTouch) {
					this.parent.onMouseDown.dispatch(x,y,0);
				}
				break;
			default:
			}
		}
	}
	,move: function(x,y) {
	}
	,resize: function(width,height) {
	}
	,setBorderless: function(value) {
		return value;
	}
	,setEnableTextEvents: function(value) {
		if(value) {
			if(lime__$backend_html5_HTML5Window.textInput == null) {
				lime__$backend_html5_HTML5Window.textInput = window.document.createElement("input");
				lime__$backend_html5_HTML5Window.textInput.type = "text";
				lime__$backend_html5_HTML5Window.textInput.style.position = "absolute";
				lime__$backend_html5_HTML5Window.textInput.style.opacity = "0";
				lime__$backend_html5_HTML5Window.textInput.style.color = "transparent";
				lime__$backend_html5_HTML5Window.textInput.value = "";
				lime__$backend_html5_HTML5Window.textInput.autocapitalize = "off";
				lime__$backend_html5_HTML5Window.textInput.autocorrect = "off";
				lime__$backend_html5_HTML5Window.textInput.autocomplete = "off";
				lime__$backend_html5_HTML5Window.textInput.style.left = "0px";
				lime__$backend_html5_HTML5Window.textInput.style.top = "50%";
				if(new EReg("(iPad|iPhone|iPod).*OS 8_","gi").match(window.navigator.userAgent)) {
					lime__$backend_html5_HTML5Window.textInput.style.fontSize = "0px";
					lime__$backend_html5_HTML5Window.textInput.style.width = "0px";
					lime__$backend_html5_HTML5Window.textInput.style.height = "0px";
				} else {
					lime__$backend_html5_HTML5Window.textInput.style.width = "1px";
					lime__$backend_html5_HTML5Window.textInput.style.height = "1px";
				}
				lime__$backend_html5_HTML5Window.textInput.style.pointerEvents = "none";
				lime__$backend_html5_HTML5Window.textInput.style.zIndex = "-10000000";
				window.document.body.appendChild(lime__$backend_html5_HTML5Window.textInput);
			}
			if(!this.enableTextEvents) {
				lime__$backend_html5_HTML5Window.textInput.addEventListener("input",$bind(this,this.handleInputEvent),true);
				lime__$backend_html5_HTML5Window.textInput.addEventListener("blur",$bind(this,this.handleFocusEvent),true);
			}
			lime__$backend_html5_HTML5Window.textInput.focus();
		} else if(lime__$backend_html5_HTML5Window.textInput != null) {
			lime__$backend_html5_HTML5Window.textInput.removeEventListener("input",$bind(this,this.handleInputEvent),true);
			lime__$backend_html5_HTML5Window.textInput.removeEventListener("blur",$bind(this,this.handleFocusEvent),true);
			lime__$backend_html5_HTML5Window.textInput.blur();
		}
		return this.enableTextEvents = value;
	}
	,setFullscreen: function(value) {
		return false;
	}
	,setIcon: function(image) {
	}
	,setMaximized: function(value) {
		return false;
	}
	,setMinimized: function(value) {
		return false;
	}
	,setResizable: function(value) {
		return value;
	}
	,setTitle: function(value) {
		return value;
	}
	,__class__: lime__$backend_html5_HTML5Window
};
var lime_app_IModule = function() { };
$hxClasses["lime.app.IModule"] = lime_app_IModule;
lime_app_IModule.__name__ = ["lime","app","IModule"];
lime_app_IModule.prototype = {
	addRenderer: null
	,addWindow: null
	,registerModule: null
	,removeRenderer: null
	,removeWindow: null
	,setPreloader: null
	,unregisterModule: null
	,__class__: lime_app_IModule
};
var lime_app_Module = function() {
	this.onExit = new lime_app__$Event_$Int_$Void();
	this.__renderers = [];
	this.__windows = [];
};
$hxClasses["lime.app.Module"] = lime_app_Module;
lime_app_Module.__name__ = ["lime","app","Module"];
lime_app_Module.__interfaces__ = [lime_app_IModule];
lime_app_Module.prototype = {
	onExit: null
	,__application: null
	,__preloader: null
	,__renderers: null
	,__windows: null
	,addRenderer: function(renderer) {
		var f = $bind(this,this.render);
		var a1 = renderer;
		var tmp = function() {
			f(a1);
		};
		renderer.onRender.add(tmp);
		var f1 = $bind(this,this.onRenderContextLost);
		var a11 = renderer;
		var tmp1 = function() {
			f1(a11);
		};
		renderer.onContextLost.add(tmp1);
		var f2 = $bind(this,this.onRenderContextRestored);
		var a12 = renderer;
		var tmp2 = function(a2) {
			f2(a12,a2);
		};
		renderer.onContextRestored.add(tmp2);
		this.__renderers.push(renderer);
	}
	,addWindow: function(window) {
		var f = $bind(this,this.onWindowActivate);
		var a1 = window;
		var tmp = function() {
			f(a1);
		};
		window.onActivate.add(tmp);
		var f1 = $bind(this,this.__onWindowClose);
		var a11 = window;
		var tmp1 = function() {
			f1(a11);
		};
		window.onClose.add(tmp1);
		var f2 = $bind(this,this.onWindowCreate);
		var a12 = window;
		var tmp2 = function() {
			f2(a12);
		};
		window.onCreate.add(tmp2);
		var f3 = $bind(this,this.onWindowDeactivate);
		var a13 = window;
		var tmp3 = function() {
			f3(a13);
		};
		window.onDeactivate.add(tmp3);
		var f4 = $bind(this,this.onWindowDropFile);
		var a14 = window;
		var tmp4 = function(a2) {
			f4(a14,a2);
		};
		window.onDropFile.add(tmp4);
		var f5 = $bind(this,this.onWindowEnter);
		var a15 = window;
		var tmp5 = function() {
			f5(a15);
		};
		window.onEnter.add(tmp5);
		var f6 = $bind(this,this.onWindowFocusIn);
		var a16 = window;
		var tmp6 = function() {
			f6(a16);
		};
		window.onFocusIn.add(tmp6);
		var f7 = $bind(this,this.onWindowFocusOut);
		var a17 = window;
		var tmp7 = function() {
			f7(a17);
		};
		window.onFocusOut.add(tmp7);
		var f8 = $bind(this,this.onWindowFullscreen);
		var a18 = window;
		var tmp8 = function() {
			f8(a18);
		};
		window.onFullscreen.add(tmp8);
		var f9 = $bind(this,this.onKeyDown);
		var a19 = window;
		var tmp9 = function(a21,a3) {
			f9(a19,a21,a3);
		};
		window.onKeyDown.add(tmp9);
		var f10 = $bind(this,this.onKeyUp);
		var a110 = window;
		var tmp10 = function(a22,a31) {
			f10(a110,a22,a31);
		};
		window.onKeyUp.add(tmp10);
		var f11 = $bind(this,this.onWindowLeave);
		var a111 = window;
		var tmp11 = function() {
			f11(a111);
		};
		window.onLeave.add(tmp11);
		var f12 = $bind(this,this.onWindowMinimize);
		var a112 = window;
		var tmp12 = function() {
			f12(a112);
		};
		window.onMinimize.add(tmp12);
		var f13 = $bind(this,this.onMouseDown);
		var a113 = window;
		var tmp13 = function(x,y,a23) {
			f13(a113,x,y,a23);
		};
		window.onMouseDown.add(tmp13);
		var f14 = $bind(this,this.onMouseMove);
		var a114 = window;
		var tmp14 = function(x1,y1) {
			f14(a114,x1,y1);
		};
		window.onMouseMove.add(tmp14);
		var f15 = $bind(this,this.onMouseMoveRelative);
		var a115 = window;
		var tmp15 = function(x2,y2) {
			f15(a115,x2,y2);
		};
		window.onMouseMoveRelative.add(tmp15);
		var f16 = $bind(this,this.onMouseUp);
		var a116 = window;
		var tmp16 = function(x3,y3,a24) {
			f16(a116,x3,y3,a24);
		};
		window.onMouseUp.add(tmp16);
		var f17 = $bind(this,this.onMouseWheel);
		var a117 = window;
		var tmp17 = function(a25,a32) {
			f17(a117,a25,a32);
		};
		window.onMouseWheel.add(tmp17);
		var f18 = $bind(this,this.onWindowMove);
		var a118 = window;
		var tmp18 = function(x4,y4) {
			f18(a118,x4,y4);
		};
		window.onMove.add(tmp18);
		var f19 = $bind(this,this.onWindowResize);
		var a119 = window;
		var tmp19 = function(a26,a33) {
			f19(a119,a26,a33);
		};
		window.onResize.add(tmp19);
		var f20 = $bind(this,this.onWindowRestore);
		var a120 = window;
		var tmp20 = function() {
			f20(a120);
		};
		window.onRestore.add(tmp20);
		var f21 = $bind(this,this.onTextEdit);
		var a121 = window;
		var tmp21 = function(a27,a34,a4) {
			f21(a121,a27,a34,a4);
		};
		window.onTextEdit.add(tmp21);
		var f22 = $bind(this,this.onTextInput);
		var a122 = window;
		var tmp22 = function(a28) {
			f22(a122,a28);
		};
		window.onTextInput.add(tmp22);
		this.__windows.push(window);
	}
	,registerModule: function(application) {
		this.__application = application;
		application.onExit.add($bind(this,this.onModuleExit),false,0);
		application.onUpdate.add($bind(this,this.update));
		var gamepad = lime_ui_Gamepad.devices.iterator();
		while(gamepad.hasNext()) this.__onGamepadConnect(gamepad.next());
		lime_ui_Gamepad.onConnect.add($bind(this,this.__onGamepadConnect));
		var joystick = lime_ui_Joystick.devices.iterator();
		while(joystick.hasNext()) this.__onJoystickConnect(joystick.next());
		lime_ui_Joystick.onConnect.add($bind(this,this.__onJoystickConnect));
		lime_ui_Touch.onStart.add($bind(this,this.onTouchStart));
		lime_ui_Touch.onMove.add($bind(this,this.onTouchMove));
		lime_ui_Touch.onEnd.add($bind(this,this.onTouchEnd));
	}
	,removeRenderer: function(renderer) {
		if(renderer != null && this.__renderers.indexOf(renderer) > -1) {
			HxOverrides.remove(this.__renderers,renderer);
		}
	}
	,removeWindow: function(window) {
		if(window != null && this.__windows.indexOf(window) > -1) {
			HxOverrides.remove(this.__windows,window);
		}
	}
	,setPreloader: function(preloader) {
		if(this.__preloader != null) {
			this.__preloader.onProgress.remove($bind(this,this.onPreloadProgress));
			this.__preloader.onComplete.remove($bind(this,this.onPreloadComplete));
		}
		this.__preloader = preloader;
		if(!(preloader == null || preloader.complete)) {
			preloader.onProgress.add($bind(this,this.onPreloadProgress));
			preloader.onComplete.add($bind(this,this.onPreloadComplete));
		}
	}
	,unregisterModule: function(application) {
		this.__application.onExit.remove($bind(this,this.onModuleExit));
		this.__application.onUpdate.remove($bind(this,this.update));
		lime_ui_Gamepad.onConnect.remove($bind(this,this.__onGamepadConnect));
		lime_ui_Joystick.onConnect.remove($bind(this,this.__onJoystickConnect));
		lime_ui_Touch.onStart.remove($bind(this,this.onTouchStart));
		lime_ui_Touch.onMove.remove($bind(this,this.onTouchMove));
		lime_ui_Touch.onEnd.remove($bind(this,this.onTouchEnd));
		this.onModuleExit(0);
	}
	,onGamepadAxisMove: function(gamepad,axis,value) {
	}
	,onGamepadButtonDown: function(gamepad,button) {
	}
	,onGamepadButtonUp: function(gamepad,button) {
	}
	,onGamepadConnect: function(gamepad) {
	}
	,onGamepadDisconnect: function(gamepad) {
	}
	,onJoystickAxisMove: function(joystick,axis,value) {
	}
	,onJoystickButtonDown: function(joystick,button) {
	}
	,onJoystickButtonUp: function(joystick,button) {
	}
	,onJoystickConnect: function(joystick) {
	}
	,onJoystickDisconnect: function(joystick) {
	}
	,onJoystickHatMove: function(joystick,hat,position) {
	}
	,onJoystickTrackballMove: function(joystick,trackball,value) {
	}
	,onKeyDown: function(window,keyCode,modifier) {
	}
	,onKeyUp: function(window,keyCode,modifier) {
	}
	,onModuleExit: function(code) {
	}
	,onMouseDown: function(window,x,y,button) {
	}
	,onMouseMove: function(window,x,y) {
	}
	,onMouseMoveRelative: function(window,x,y) {
	}
	,onMouseUp: function(window,x,y,button) {
	}
	,onMouseWheel: function(window,deltaX,deltaY) {
	}
	,onPreloadComplete: function() {
	}
	,onPreloadProgress: function(loaded,total) {
	}
	,onRenderContextLost: function(renderer) {
	}
	,onRenderContextRestored: function(renderer,context) {
	}
	,onTextEdit: function(window,text,start,length) {
	}
	,onTextInput: function(window,text) {
	}
	,onTouchEnd: function(touch) {
	}
	,onTouchMove: function(touch) {
	}
	,onTouchStart: function(touch) {
	}
	,onWindowActivate: function(window) {
	}
	,onWindowClose: function(window) {
	}
	,onWindowCreate: function(window) {
	}
	,onWindowDeactivate: function(window) {
	}
	,onWindowDropFile: function(window,file) {
	}
	,onWindowEnter: function(window) {
	}
	,onWindowFocusIn: function(window) {
	}
	,onWindowFocusOut: function(window) {
	}
	,onWindowFullscreen: function(window) {
	}
	,onWindowLeave: function(window) {
	}
	,onWindowMove: function(window,x,y) {
	}
	,onWindowMinimize: function(window) {
	}
	,onWindowResize: function(window,width,height) {
	}
	,onWindowRestore: function(window) {
	}
	,render: function(renderer) {
	}
	,update: function(deltaTime) {
	}
	,__onGamepadConnect: function(gamepad) {
		var f = $bind(this,this.onGamepadAxisMove);
		var a1 = gamepad;
		var tmp = function(a2,a3) {
			f(a1,a2,a3);
		};
		gamepad.onAxisMove.add(tmp);
		var f1 = $bind(this,this.onGamepadButtonDown);
		var a11 = gamepad;
		var tmp1 = function(a21) {
			f1(a11,a21);
		};
		gamepad.onButtonDown.add(tmp1);
		var f2 = $bind(this,this.onGamepadButtonUp);
		var a12 = gamepad;
		var tmp2 = function(a22) {
			f2(a12,a22);
		};
		gamepad.onButtonUp.add(tmp2);
		var f3 = $bind(this,this.onGamepadDisconnect);
		var a13 = gamepad;
		var tmp3 = function() {
			f3(a13);
		};
		gamepad.onDisconnect.add(tmp3);
	}
	,__onJoystickConnect: function(joystick) {
		var f = $bind(this,this.onJoystickAxisMove);
		var a1 = joystick;
		var tmp = function(a2,a3) {
			f(a1,a2,a3);
		};
		joystick.onAxisMove.add(tmp);
		var f1 = $bind(this,this.onJoystickButtonDown);
		var a11 = joystick;
		var tmp1 = function(a21) {
			f1(a11,a21);
		};
		joystick.onButtonDown.add(tmp1);
		var f2 = $bind(this,this.onJoystickButtonUp);
		var a12 = joystick;
		var tmp2 = function(a22) {
			f2(a12,a22);
		};
		joystick.onButtonUp.add(tmp2);
		var f3 = $bind(this,this.onJoystickDisconnect);
		var a13 = joystick;
		var tmp3 = function() {
			f3(a13);
		};
		joystick.onDisconnect.add(tmp3);
		var f4 = $bind(this,this.onJoystickHatMove);
		var a14 = joystick;
		var tmp4 = function(a23,a31) {
			f4(a14,a23,a31);
		};
		joystick.onHatMove.add(tmp4);
		var f5 = $bind(this,this.onJoystickTrackballMove);
		var a15 = joystick;
		var tmp5 = function(a24,a32) {
			f5(a15,a24,a32);
		};
		joystick.onTrackballMove.add(tmp5);
	}
	,__onWindowClose: function(window) {
		this.onWindowClose(window);
		HxOverrides.remove(this.__windows,window);
	}
	,__class__: lime_app_Module
};
var lime_app_Application = function() {
	this.onUpdate = new lime_app__$Event_$Int_$Void();
	lime_app_Module.call(this);
	if(lime_app_Application.current == null) {
		lime_app_Application.current = this;
	}
	this.modules = [];
	this.windowByID = new haxe_ds_IntMap();
	this.backend = new lime__$backend_html5_HTML5Application(this);
	this.registerModule(this);
};
$hxClasses["lime.app.Application"] = lime_app_Application;
lime_app_Application.__name__ = ["lime","app","Application"];
lime_app_Application.__super__ = lime_app_Module;
lime_app_Application.prototype = $extend(lime_app_Module.prototype,{
	config: null
	,modules: null
	,preloader: null
	,onUpdate: null
	,renderer: null
	,renderers: null
	,window: null
	,windows: null
	,backend: null
	,windowByID: null
	,addModule: function(module) {
		module.registerModule(this);
		this.modules.push(module);
		if(this.__renderers.length > 0) {
			var _g = 0;
			var _g1 = this.__renderers;
			while(_g < _g1.length) {
				var renderer = _g1[_g];
				++_g;
				module.addRenderer(renderer);
			}
		}
		if(this.__windows.length > 0) {
			var _g2 = 0;
			var _g11 = this.__windows;
			while(_g2 < _g11.length) {
				var $window = _g11[_g2];
				++_g2;
				module.addWindow($window);
			}
		}
		module.setPreloader(this.__preloader);
	}
	,addRenderer: function(renderer) {
		lime_app_Module.prototype.addRenderer.call(this,renderer);
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.addRenderer(renderer);
		}
	}
	,create: function(config) {
		this.config = config;
		if(config != null) {
			if(Object.prototype.hasOwnProperty.call(config,"fps")) {
				this.backend.setFrameRate(config.fps);
			}
			if(Object.prototype.hasOwnProperty.call(config,"windows")) {
				var _g1 = config.windows;
				while(0 < _g1.length) {
					this.createWindow(new lime_ui_Window(_g1[0]));
					break;
				}
			}
			if(this.__preloader == null || this.__preloader.complete) {
				this.setPreloader(this.__preloader);
				var _g = 0;
				var _g11 = this.modules;
				while(_g < _g11.length) {
					++_g;
					this.setPreloader(this.__preloader);
				}
			}
		}
	}
	,createWindow: function(window) {
		lime_app_Module.prototype.addWindow.call(this,window);
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.addWindow(window);
		}
		if(window.renderer == null) {
			this.addRenderer(new lime_graphics_Renderer(window));
		}
		window.create(this);
		this.windowByID.h[window.id] = window;
		window.onCreate.dispatch();
	}
	,exec: function() {
		lime_app_Application.current = this;
		return this.backend.exec();
	}
	,onModuleExit: function(code) {
	}
	,onWindowClose: function(window) {
		this.removeWindow(window);
	}
	,removeModule: function(module) {
		if(module != null) {
			module.unregisterModule(this);
			HxOverrides.remove(this.modules,module);
		}
	}
	,removeWindow: function(window) {
		if(window != null && this.windowByID.h.hasOwnProperty(window.id)) {
			HxOverrides.remove(this.__windows,window);
			this.windowByID.remove(window.id);
			window.close();
			if(window.renderer != null) {
				this.removeRenderer(window.renderer);
			}
			if(this.__windows[0] == window) {
				this.window = null;
			}
		}
	}
	,setPreloader: function(preloader) {
		lime_app_Module.prototype.setPreloader.call(this,preloader);
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.setPreloader(preloader);
		}
	}
	,get_frameRate: function() {
		return this.backend.getFrameRate();
	}
	,set_frameRate: function(value) {
		return this.backend.setFrameRate(value);
	}
	,get_preloader: function() {
		return this.__preloader;
	}
	,get_renderer: function() {
		return this.__renderers[0];
	}
	,get_renderers: function() {
		return this.__renderers;
	}
	,get_window: function() {
		return this.__windows[0];
	}
	,get_windows: function() {
		return this.__windows;
	}
	,__class__: lime_app_Application
	,__properties__: {get_windows:"get_windows",get_window:"get_window",get_renderers:"get_renderers",get_renderer:"get_renderer",get_preloader:"get_preloader",set_frameRate:"set_frameRate",get_frameRate:"get_frameRate"}
});
var lime_app_Event = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app.Event"] = lime_app_Event;
lime_app_Event.__name__ = ["lime","app","Event"];
lime_app_Event.prototype = {
	canceled: null
	,__listeners: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,dispatch: null
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__class__: lime_app_Event
};
var lime_app_Future = function(work) {
	if(work != null) {
		var promise = new lime_app_Promise();
		promise.future = this;
		lime_app__$Future_FutureWork.queue({ promise : promise, work : work});
	}
};
$hxClasses["lime.app.Future"] = lime_app_Future;
lime_app_Future.__name__ = ["lime","app","Future"];
lime_app_Future.prototype = {
	error: null
	,isComplete: null
	,isError: null
	,value: null
	,__completeListeners: null
	,__errorListeners: null
	,__progressListeners: null
	,onComplete: function(listener) {
		if(listener != null) {
			if(this.isComplete) {
				listener(this.value);
			} else if(!this.isError) {
				if(this.__completeListeners == null) {
					this.__completeListeners = [];
				}
				this.__completeListeners.push(listener);
			}
		}
		return this;
	}
	,onError: function(listener) {
		if(listener != null) {
			if(this.isError) {
				listener(this.error);
			} else if(!this.isComplete) {
				if(this.__errorListeners == null) {
					this.__errorListeners = [];
				}
				this.__errorListeners.push(listener);
			}
		}
		return this;
	}
	,onProgress: function(listener) {
		if(listener != null) {
			if(this.__progressListeners == null) {
				this.__progressListeners = [];
			}
			this.__progressListeners.push(listener);
		}
		return this;
	}
	,ready: function(waitTime) {
		if(waitTime == null) {
			waitTime = -1;
		}
		if(this.isComplete || this.isError) {
			return this;
		} else {
			lime_utils_Log.warn("Cannot block thread in JavaScript",{ fileName : "Future.hx", lineNumber : 121, className : "lime.app.Future", methodName : "ready"});
			return this;
		}
	}
	,result: function(waitTime) {
		if(waitTime == null) {
			waitTime = -1;
		}
		this.ready(waitTime);
		if(this.isComplete) {
			return this.value;
		} else {
			return null;
		}
	}
	,then: function(next) {
		if(this.isComplete) {
			return next(this.value);
		} else if(this.isError) {
			var future = new lime_app_Future();
			future.onError(this.error);
			return future;
		} else {
			var promise = new lime_app_Promise();
			this.onError($bind(promise,promise.error));
			this.onProgress($bind(promise,promise.progress));
			this.onComplete(function(val) {
				var future1 = next(val);
				future1.onError($bind(promise,promise.error));
				future1.onComplete($bind(promise,promise.complete));
			});
			return promise.future;
		}
	}
	,__class__: lime_app_Future
};
var lime_app__$Future_FutureWork = function() { };
$hxClasses["lime.app._Future.FutureWork"] = lime_app__$Future_FutureWork;
lime_app__$Future_FutureWork.__name__ = ["lime","app","_Future","FutureWork"];
lime_app__$Future_FutureWork.queue = function(state) {
	if(lime_app__$Future_FutureWork.threadPool == null) {
		lime_app__$Future_FutureWork.threadPool = new lime_system_ThreadPool();
		lime_app__$Future_FutureWork.threadPool.doWork.add(lime_app__$Future_FutureWork.threadPool_doWork);
		lime_app__$Future_FutureWork.threadPool.onComplete.add(lime_app__$Future_FutureWork.threadPool_onComplete);
		lime_app__$Future_FutureWork.threadPool.onError.add(lime_app__$Future_FutureWork.threadPool_onError);
	}
	lime_app__$Future_FutureWork.threadPool.queue(state);
};
lime_app__$Future_FutureWork.threadPool_doWork = function(state) {
	try {
		var result = state.work();
		lime_app__$Future_FutureWork.threadPool.sendComplete({ promise : state.promise, result : result});
	} catch( e ) {
		haxe_CallStack.lastException = e;
		if (e instanceof js__$Boot_HaxeError) e = e.val;
		lime_app__$Future_FutureWork.threadPool.sendError({ promise : state.promise, error : e});
	}
};
lime_app__$Future_FutureWork.threadPool_onComplete = function(state) {
	state.promise.complete(state.result);
};
lime_app__$Future_FutureWork.threadPool_onError = function(state) {
	state.promise.error(state.error);
};
var lime_app_Preloader = function() {
	this.total = 0;
	this.loaded = 0;
	this.onProgress = new lime_app__$Event_$Int_$Int_$Void();
	this.onComplete = new lime_app__$Event_$Void_$Void();
	this.onProgress.add($bind(this,this.update));
};
$hxClasses["lime.app.Preloader"] = lime_app_Preloader;
lime_app_Preloader.__name__ = ["lime","app","Preloader"];
lime_app_Preloader.prototype = {
	complete: null
	,onComplete: null
	,onProgress: null
	,loaded: null
	,total: null
	,create: function(config) {
	}
	,load: function(urls,types) {
		var _gthis = this;
		var url = null;
		var cacheVersion = lime_Assets.cache.version;
		var soundPaths = new haxe_ds_StringMap();
		var _g1 = 0;
		var _g = urls.length;
		while(_g1 < _g) {
			var i = _g1++;
			url = urls[i];
			switch(types[i]) {
			case "BINARY":
				if(!lime_app_Preloader.loaders.exists(url)) {
					var loader = new lime_net_HTTPRequest();
					lime_app_Preloader.loaders.set(url,loader);
					this.total++;
				}
				break;
			case "FONT":
				this.total++;
				this.loadFont(url);
				break;
			case "IMAGE":
				if(!lime_app_Preloader.images.exists(url)) {
					var image = new Image();
					lime_app_Preloader.images.set(url,image);
					image.onload = $bind(this,this.image_onLoad);
					image.src = url + "?" + cacheVersion;
					this.total++;
				}
				break;
			case "MUSIC":case "SOUND":
				var soundName = haxe_io_Path.withoutExtension(url);
				var extension = haxe_io_Path.extension(url);
				if(!(__map_reserved[soundName] != null ? soundPaths.existsReserved(soundName) : soundPaths.h.hasOwnProperty(soundName))) {
					var value = [];
					if(__map_reserved[soundName] != null) {
						soundPaths.setReserved(soundName,value);
					} else {
						soundPaths.h[soundName] = value;
					}
					this.total++;
				}
				if(extension == "wav") {
					(__map_reserved[soundName] != null ? soundPaths.getReserved(soundName) : soundPaths.h[soundName]).push(url);
				} else {
					(__map_reserved[soundName] != null ? soundPaths.getReserved(soundName) : soundPaths.h[soundName]).unshift(url);
				}
				break;
			case "TEXT":
				if(!lime_app_Preloader.loaders.exists(url)) {
					var loader1 = new lime_net_HTTPRequest();
					lime_app_Preloader.loaders.set(url,loader1);
					this.total++;
				}
				break;
			default:
			}
		}
		var url1 = lime_app_Preloader.loaders.keys();
		while(url1.hasNext()) {
			var url2 = url1.next();
			var _this = lime_app_Preloader.loaders;
			(__map_reserved[url2] != null ? _this.getReserved(url2) : _this.h[url2]).load(url2 + "?" + cacheVersion).onComplete($bind(this,this.loader_onComplete));
		}
		var paths = new haxe_ds__$StringMap_StringMapIterator(soundPaths,soundPaths.arrayKeys());
		while(paths.hasNext()) {
			var paths1 = [paths.next()];
			lime_audio_AudioBuffer.loadFromFiles(paths1[0]).onComplete((function(paths2) {
				return function(audioBuffer) {
					var _g2 = 0;
					while(_g2 < paths2[0].length) {
						var path = paths2[0][_g2];
						++_g2;
						var _this1 = lime_app_Preloader.audioBuffers;
						if(__map_reserved[path] != null) {
							_this1.setReserved(path,audioBuffer);
						} else {
							_this1.h[path] = audioBuffer;
						}
					}
					_gthis.audioBuffer_onLoad();
				};
			})(paths1)).onError($bind(this,this.audioBuffer_onLoad));
		}
		if(this.total == 0) {
			this.start();
		}
	}
	,loadFont: function(font) {
		var _gthis = this;
		if(window.document.fonts && ($_=window.document.fonts,$bind($_,$_.load))) {
			window.document.fonts.load("1em '" + font + "'").then(function(_) {
				_gthis.loaded++;
				_gthis.onProgress.dispatch(_gthis.loaded,_gthis.total);
				if(_gthis.loaded == _gthis.total) {
					_gthis.start();
				}
			});
		} else {
			var node = window.document.createElement("span");
			node.innerHTML = "giItT1WQy@!-/#";
			var style = node.style;
			style.position = "absolute";
			style.left = "-10000px";
			style.top = "-10000px";
			style.fontSize = "300px";
			style.fontFamily = "sans-serif";
			style.fontVariant = "normal";
			style.fontStyle = "normal";
			style.fontWeight = "normal";
			style.letterSpacing = "0";
			window.document.body.appendChild(node);
			var width = node.offsetWidth;
			style.fontFamily = "'" + font + "', sans-serif";
			var interval = null;
			var found = false;
			var checkFont = function() {
				if(node.offsetWidth != width) {
					if(!found) {
						found = true;
						return false;
					}
					_gthis.loaded++;
					if(interval != null) {
						window.clearInterval(interval);
					}
					node.parentNode.removeChild(node);
					node = null;
					_gthis.onProgress.dispatch(_gthis.loaded,_gthis.total);
					if(_gthis.loaded == _gthis.total) {
						_gthis.start();
					}
					return true;
				}
				return false;
			};
			if(!checkFont()) {
				interval = window.setInterval(checkFont,50);
			}
		}
	}
	,start: function() {
		this.complete = true;
		this.onComplete.dispatch();
	}
	,update: function(loaded,total) {
	}
	,audioBuffer_onLoad: function(_) {
		this.loaded++;
		this.onProgress.dispatch(this.loaded,this.total);
		if(this.loaded == this.total) {
			this.start();
		}
	}
	,image_onLoad: function(_) {
		this.loaded++;
		this.onProgress.dispatch(this.loaded,this.total);
		if(this.loaded == this.total) {
			this.start();
		}
	}
	,loader_onComplete: function(_) {
		this.loaded++;
		this.onProgress.dispatch(this.loaded,this.total);
		if(this.loaded == this.total) {
			this.start();
		}
	}
	,__class__: lime_app_Preloader
};
var lime_app_Promise = function() {
	this.future = new lime_app_Future();
};
$hxClasses["lime.app.Promise"] = lime_app_Promise;
lime_app_Promise.__name__ = ["lime","app","Promise"];
lime_app_Promise.prototype = {
	future: null
	,isComplete: null
	,isError: null
	,complete: function(data) {
		if(!this.future.isError) {
			this.future.isComplete = true;
			this.future.value = data;
			if(this.future.__completeListeners != null) {
				var _g = 0;
				var _g1 = this.future.__completeListeners;
				while(_g < _g1.length) {
					var listener = _g1[_g];
					++_g;
					listener(data);
				}
				this.future.__completeListeners = null;
			}
		}
		return this;
	}
	,completeWith: function(future) {
		future.onComplete($bind(this,this.complete));
		future.onError($bind(this,this.error));
		future.onProgress($bind(this,this.progress));
		return this;
	}
	,error: function(msg) {
		if(!this.future.isComplete) {
			this.future.isError = true;
			this.future.error = msg;
			if(this.future.__errorListeners != null) {
				var _g = 0;
				var _g1 = this.future.__errorListeners;
				while(_g < _g1.length) {
					var listener = _g1[_g];
					++_g;
					listener(msg);
				}
				this.future.__errorListeners = null;
			}
		}
		return this;
	}
	,progress: function(progress) {
		if(!this.future.isError && !this.future.isComplete) {
			if(this.future.__progressListeners != null) {
				var _g = 0;
				var _g1 = this.future.__progressListeners;
				while(_g < _g1.length) {
					var listener = _g1[_g];
					++_g;
					listener(progress);
				}
			}
		}
		return this;
	}
	,get_isComplete: function() {
		return this.future.isComplete;
	}
	,get_isError: function() {
		return this.future.isError;
	}
	,__class__: lime_app_Promise
	,__properties__: {get_isError:"get_isError",get_isComplete:"get_isComplete"}
};
var lime_app__$Event_$Dynamic_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_Dynamic_Void"] = lime_app__$Event_$Dynamic_$Void;
lime_app__$Event_$Dynamic_$Void.__name__ = ["lime","app","_Event_Dynamic_Void"];
lime_app__$Event_$Dynamic_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$Dynamic_$Void
};
var lime_app__$Event_$Float_$Float_$Int_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_Float_Float_Int_Void"] = lime_app__$Event_$Float_$Float_$Int_$Void;
lime_app__$Event_$Float_$Float_$Int_$Void.__name__ = ["lime","app","_Event_Float_Float_Int_Void"];
lime_app__$Event_$Float_$Float_$Int_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a,a1,a2) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1,a2);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$Float_$Float_$Int_$Void
};
var lime_app__$Event_$Float_$Float_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_Float_Float_Void"] = lime_app__$Event_$Float_$Float_$Void;
lime_app__$Event_$Float_$Float_$Void.__name__ = ["lime","app","_Event_Float_Float_Void"];
lime_app__$Event_$Float_$Float_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a,a1) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$Float_$Float_$Void
};
var lime_app__$Event_$Int_$Float_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_Int_Float_Void"] = lime_app__$Event_$Int_$Float_$Void;
lime_app__$Event_$Int_$Float_$Void.__name__ = ["lime","app","_Event_Int_Float_Void"];
lime_app__$Event_$Int_$Float_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a,a1) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$Int_$Float_$Void
};
var lime_app__$Event_$Int_$Int_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_Int_Int_Void"] = lime_app__$Event_$Int_$Int_$Void;
lime_app__$Event_$Int_$Int_$Void.__name__ = ["lime","app","_Event_Int_Int_Void"];
lime_app__$Event_$Int_$Int_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a,a1) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$Int_$Int_$Void
};
var lime_app__$Event_$Int_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_Int_Void"] = lime_app__$Event_$Int_$Void;
lime_app__$Event_$Int_$Void.__name__ = ["lime","app","_Event_Int_Void"];
lime_app__$Event_$Int_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$Int_$Void
};
var lime_app__$Event_$Int_$lime_$ui_$JoystickHatPosition_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_Int_lime_ui_JoystickHatPosition_Void"] = lime_app__$Event_$Int_$lime_$ui_$JoystickHatPosition_$Void;
lime_app__$Event_$Int_$lime_$ui_$JoystickHatPosition_$Void.__name__ = ["lime","app","_Event_Int_lime_ui_JoystickHatPosition_Void"];
lime_app__$Event_$Int_$lime_$ui_$JoystickHatPosition_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a,a1) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$Int_$lime_$ui_$JoystickHatPosition_$Void
};
var lime_app__$Event_$String_$Int_$Int_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_String_Int_Int_Void"] = lime_app__$Event_$String_$Int_$Int_$Void;
lime_app__$Event_$String_$Int_$Int_$Void.__name__ = ["lime","app","_Event_String_Int_Int_Void"];
lime_app__$Event_$String_$Int_$Int_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a,a1,a2) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1,a2);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$String_$Int_$Int_$Void
};
var lime_app__$Event_$String_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_String_Void"] = lime_app__$Event_$String_$Void;
lime_app__$Event_$String_$Void.__name__ = ["lime","app","_Event_String_Void"];
lime_app__$Event_$String_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$String_$Void
};
var lime_app__$Event_$lime_$graphics_$RenderContext_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_lime_graphics_RenderContext_Void"] = lime_app__$Event_$lime_$graphics_$RenderContext_$Void;
lime_app__$Event_$lime_$graphics_$RenderContext_$Void.__name__ = ["lime","app","_Event_lime_graphics_RenderContext_Void"];
lime_app__$Event_$lime_$graphics_$RenderContext_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$lime_$graphics_$RenderContext_$Void
};
var lime_app__$Event_$lime_$ui_$GamepadAxis_$Float_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_lime_ui_GamepadAxis_Float_Void"] = lime_app__$Event_$lime_$ui_$GamepadAxis_$Float_$Void;
lime_app__$Event_$lime_$ui_$GamepadAxis_$Float_$Void.__name__ = ["lime","app","_Event_lime_ui_GamepadAxis_Float_Void"];
lime_app__$Event_$lime_$ui_$GamepadAxis_$Float_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a,a1) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$lime_$ui_$GamepadAxis_$Float_$Void
};
var lime_app__$Event_$lime_$ui_$GamepadButton_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_lime_ui_GamepadButton_Void"] = lime_app__$Event_$lime_$ui_$GamepadButton_$Void;
lime_app__$Event_$lime_$ui_$GamepadButton_$Void.__name__ = ["lime","app","_Event_lime_ui_GamepadButton_Void"];
lime_app__$Event_$lime_$ui_$GamepadButton_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$lime_$ui_$GamepadButton_$Void
};
var lime_app__$Event_$lime_$ui_$Gamepad_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_lime_ui_Gamepad_Void"] = lime_app__$Event_$lime_$ui_$Gamepad_$Void;
lime_app__$Event_$lime_$ui_$Gamepad_$Void.__name__ = ["lime","app","_Event_lime_ui_Gamepad_Void"];
lime_app__$Event_$lime_$ui_$Gamepad_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$lime_$ui_$Gamepad_$Void
};
var lime_app__$Event_$lime_$ui_$Joystick_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_lime_ui_Joystick_Void"] = lime_app__$Event_$lime_$ui_$Joystick_$Void;
lime_app__$Event_$lime_$ui_$Joystick_$Void.__name__ = ["lime","app","_Event_lime_ui_Joystick_Void"];
lime_app__$Event_$lime_$ui_$Joystick_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$lime_$ui_$Joystick_$Void
};
var lime_app__$Event_$lime_$ui_$KeyCode_$lime_$ui_$KeyModifier_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_lime_ui_KeyCode_lime_ui_KeyModifier_Void"] = lime_app__$Event_$lime_$ui_$KeyCode_$lime_$ui_$KeyModifier_$Void;
lime_app__$Event_$lime_$ui_$KeyCode_$lime_$ui_$KeyModifier_$Void.__name__ = ["lime","app","_Event_lime_ui_KeyCode_lime_ui_KeyModifier_Void"];
lime_app__$Event_$lime_$ui_$KeyCode_$lime_$ui_$KeyModifier_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a,a1) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$lime_$ui_$KeyCode_$lime_$ui_$KeyModifier_$Void
};
var lime_app__$Event_$lime_$ui_$Touch_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_lime_ui_Touch_Void"] = lime_app__$Event_$lime_$ui_$Touch_$Void;
lime_app__$Event_$lime_$ui_$Touch_$Void.__name__ = ["lime","app","_Event_lime_ui_Touch_Void"];
lime_app__$Event_$lime_$ui_$Touch_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$lime_$ui_$Touch_$Void
};
var lime_audio_ALAudioContext = function() {
	this.EXPONENT_DISTANCE_CLAMPED = 53254;
	this.EXPONENT_DISTANCE = 53253;
	this.LINEAR_DISTANCE_CLAMPED = 53252;
	this.LINEAR_DISTANCE = 53251;
	this.INVERSE_DISTANCE_CLAMPED = 53250;
	this.INVERSE_DISTANCE = 53249;
	this.DISTANCE_MODEL = 53248;
	this.DOPPLER_VELOCITY = 49153;
	this.SPEED_OF_SOUND = 49155;
	this.DOPPLER_FACTOR = 49152;
	this.EXTENSIONS = 45060;
	this.RENDERER = 45059;
	this.VERSION = 45058;
	this.VENDOR = 45057;
	this.OUT_OF_MEMORY = 40965;
	this.INVALID_OPERATION = 40964;
	this.INVALID_VALUE = 40963;
	this.INVALID_ENUM = 40962;
	this.INVALID_NAME = 40961;
	this.NO_ERROR = 0;
	this.SIZE = 8196;
	this.CHANNELS = 8195;
	this.BITS = 8194;
	this.FREQUENCY = 8193;
	this.FORMAT_STEREO16 = 4355;
	this.FORMAT_STEREO8 = 4354;
	this.FORMAT_MONO16 = 4353;
	this.FORMAT_MONO8 = 4352;
	this.UNDETERMINED = 4144;
	this.STREAMING = 4137;
	this.STATIC = 4136;
	this.SOURCE_TYPE = 4135;
	this.BYTE_OFFSET = 4134;
	this.SAMPLE_OFFSET = 4133;
	this.SEC_OFFSET = 4132;
	this.MAX_DISTANCE = 4131;
	this.CONE_OUTER_GAIN = 4130;
	this.ROLLOFF_FACTOR = 4129;
	this.REFERENCE_DISTANCE = 4128;
	this.BUFFERS_PROCESSED = 4118;
	this.BUFFERS_QUEUED = 4117;
	this.STOPPED = 4116;
	this.PAUSED = 4115;
	this.PLAYING = 4114;
	this.INITIAL = 4113;
	this.SOURCE_STATE = 4112;
	this.ORIENTATION = 4111;
	this.MAX_GAIN = 4110;
	this.MIN_GAIN = 4109;
	this.GAIN = 4106;
	this.BUFFER = 4105;
	this.LOOPING = 4103;
	this.VELOCITY = 4102;
	this.DIRECTION = 4101;
	this.POSITION = 4100;
	this.PITCH = 4099;
	this.CONE_OUTER_ANGLE = 4098;
	this.CONE_INNER_ANGLE = 4097;
	this.SOURCE_RELATIVE = 514;
	this.TRUE = 1;
	this.FALSE = 0;
	this.NONE = 0;
};
$hxClasses["lime.audio.ALAudioContext"] = lime_audio_ALAudioContext;
lime_audio_ALAudioContext.__name__ = ["lime","audio","ALAudioContext"];
lime_audio_ALAudioContext.prototype = {
	NONE: null
	,FALSE: null
	,TRUE: null
	,SOURCE_RELATIVE: null
	,CONE_INNER_ANGLE: null
	,CONE_OUTER_ANGLE: null
	,PITCH: null
	,POSITION: null
	,DIRECTION: null
	,VELOCITY: null
	,LOOPING: null
	,BUFFER: null
	,GAIN: null
	,MIN_GAIN: null
	,MAX_GAIN: null
	,ORIENTATION: null
	,SOURCE_STATE: null
	,INITIAL: null
	,PLAYING: null
	,PAUSED: null
	,STOPPED: null
	,BUFFERS_QUEUED: null
	,BUFFERS_PROCESSED: null
	,REFERENCE_DISTANCE: null
	,ROLLOFF_FACTOR: null
	,CONE_OUTER_GAIN: null
	,MAX_DISTANCE: null
	,SEC_OFFSET: null
	,SAMPLE_OFFSET: null
	,BYTE_OFFSET: null
	,SOURCE_TYPE: null
	,STATIC: null
	,STREAMING: null
	,UNDETERMINED: null
	,FORMAT_MONO8: null
	,FORMAT_MONO16: null
	,FORMAT_STEREO8: null
	,FORMAT_STEREO16: null
	,FREQUENCY: null
	,BITS: null
	,CHANNELS: null
	,SIZE: null
	,NO_ERROR: null
	,INVALID_NAME: null
	,INVALID_ENUM: null
	,INVALID_VALUE: null
	,INVALID_OPERATION: null
	,OUT_OF_MEMORY: null
	,VENDOR: null
	,VERSION: null
	,RENDERER: null
	,EXTENSIONS: null
	,DOPPLER_FACTOR: null
	,SPEED_OF_SOUND: null
	,DOPPLER_VELOCITY: null
	,DISTANCE_MODEL: null
	,INVERSE_DISTANCE: null
	,INVERSE_DISTANCE_CLAMPED: null
	,LINEAR_DISTANCE: null
	,LINEAR_DISTANCE_CLAMPED: null
	,EXPONENT_DISTANCE: null
	,EXPONENT_DISTANCE_CLAMPED: null
	,bufferData: function(buffer,format,data,size,freq) {
	}
	,buffer3f: function(buffer,param,value1,value2,value3) {
	}
	,buffer3i: function(buffer,param,value1,value2,value3) {
	}
	,bufferf: function(buffer,param,value) {
	}
	,bufferfv: function(buffer,param,values) {
	}
	,bufferi: function(buffer,param,value) {
	}
	,bufferiv: function(buffer,param,values) {
	}
	,deleteBuffer: function(buffer) {
	}
	,deleteBuffers: function(buffers) {
	}
	,deleteSource: function(source) {
	}
	,deleteSources: function(sources) {
	}
	,disable: function(capability) {
	}
	,distanceModel: function(distanceModel) {
	}
	,dopplerFactor: function(value) {
	}
	,dopplerVelocity: function(value) {
	}
	,enable: function(capability) {
	}
	,genSource: function() {
		return lime_audio_openal_AL.genSource();
	}
	,genSources: function(n) {
		return lime_audio_openal_AL.genSources(n);
	}
	,genBuffer: function() {
		return lime_audio_openal_AL.genBuffer();
	}
	,genBuffers: function(n) {
		return lime_audio_openal_AL.genBuffers(n);
	}
	,getBoolean: function(param) {
		return lime_audio_openal_AL.getBoolean(param);
	}
	,getBooleanv: function(param,count) {
		if(count == null) {
			count = 1;
		}
		return lime_audio_openal_AL.getBooleanv(param,count);
	}
	,getBuffer3f: function(buffer,param) {
		return lime_audio_openal_AL.getBuffer3f(buffer,param);
	}
	,getBuffer3i: function(buffer,param) {
		return lime_audio_openal_AL.getBuffer3i(buffer,param);
	}
	,getBufferf: function(buffer,param) {
		return lime_audio_openal_AL.getBufferf(buffer,param);
	}
	,getBufferfv: function(buffer,param,count) {
		if(count == null) {
			count = 1;
		}
		return lime_audio_openal_AL.getBufferfv(buffer,param,count);
	}
	,getBufferi: function(buffer,param) {
		return lime_audio_openal_AL.getBufferi(buffer,param);
	}
	,getBufferiv: function(buffer,param,count) {
		if(count == null) {
			count = 1;
		}
		return lime_audio_openal_AL.getBufferiv(buffer,param,count);
	}
	,getDouble: function(param) {
		return lime_audio_openal_AL.getDouble(param);
	}
	,getDoublev: function(param,count) {
		if(count == null) {
			count = 1;
		}
		return lime_audio_openal_AL.getDoublev(param,count);
	}
	,getEnumValue: function(ename) {
		return lime_audio_openal_AL.getEnumValue(ename);
	}
	,getError: function() {
		return lime_audio_openal_AL.getError();
	}
	,getErrorString: function() {
		return lime_audio_openal_AL.getErrorString();
	}
	,getFloat: function(param) {
		return lime_audio_openal_AL.getFloat(param);
	}
	,getFloatv: function(param,count) {
		if(count == null) {
			count = 1;
		}
		return lime_audio_openal_AL.getFloatv(param,count);
	}
	,getInteger: function(param) {
		return lime_audio_openal_AL.getInteger(param);
	}
	,getIntegerv: function(param,count) {
		if(count == null) {
			count = 1;
		}
		return lime_audio_openal_AL.getIntegerv(param,count);
	}
	,getListener3f: function(param) {
		return lime_audio_openal_AL.getListener3f(param);
	}
	,getListener3i: function(param) {
		return lime_audio_openal_AL.getListener3i(param);
	}
	,getListenerf: function(param) {
		return lime_audio_openal_AL.getListenerf(param);
	}
	,getListenerfv: function(param,count) {
		if(count == null) {
			count = 1;
		}
		return lime_audio_openal_AL.getListenerfv(param,count);
	}
	,getListeneri: function(param) {
		return lime_audio_openal_AL.getListeneri(param);
	}
	,getListeneriv: function(param,count) {
		if(count == null) {
			count = 1;
		}
		return lime_audio_openal_AL.getListeneriv(param,count);
	}
	,getProcAddress: function(fname) {
		return lime_audio_openal_AL.getProcAddress(fname);
	}
	,getSource3f: function(source,param) {
		return lime_audio_openal_AL.getSource3f(source,param);
	}
	,getSourcef: function(source,param) {
		return lime_audio_openal_AL.getSourcef(source,param);
	}
	,getSource3i: function(source,param) {
		return lime_audio_openal_AL.getSource3i(source,param);
	}
	,getSourcefv: function(source,param,count) {
		if(count == null) {
			count = 1;
		}
		return lime_audio_openal_AL.getSourcefv(source,param);
	}
	,getSourcei: function(source,param) {
		return lime_audio_openal_AL.getSourcei(source,param);
	}
	,getSourceiv: function(source,param,count) {
		if(count == null) {
			count = 1;
		}
		return lime_audio_openal_AL.getSourceiv(source,param,count);
	}
	,getString: function(param) {
		return lime_audio_openal_AL.getString(param);
	}
	,isBuffer: function(buffer) {
		return lime_audio_openal_AL.isBuffer(buffer);
	}
	,isEnabled: function(capability) {
		return lime_audio_openal_AL.isEnabled(capability);
	}
	,isExtensionPresent: function(extname) {
		return lime_audio_openal_AL.isExtensionPresent(extname);
	}
	,isSource: function(source) {
		return lime_audio_openal_AL.isSource(source);
	}
	,listener3f: function(param,value1,value2,value3) {
	}
	,listener3i: function(param,value1,value2,value3) {
	}
	,listenerf: function(param,value) {
	}
	,listenerfv: function(param,values) {
	}
	,listeneri: function(param,value) {
	}
	,listeneriv: function(param,values) {
	}
	,source3f: function(source,param,value1,value2,value3) {
	}
	,source3i: function(source,param,value1,value2,value3) {
	}
	,sourcef: function(source,param,value) {
	}
	,sourcefv: function(source,param,values) {
	}
	,sourcei: function(source,param,value) {
	}
	,sourceiv: function(source,param,values) {
	}
	,sourcePlay: function(source) {
	}
	,sourcePlayv: function(sources) {
	}
	,sourceStop: function(source) {
	}
	,sourceStopv: function(sources) {
	}
	,sourceRewind: function(source) {
	}
	,sourceRewindv: function(sources) {
	}
	,sourcePause: function(source) {
	}
	,sourcePausev: function(sources) {
	}
	,sourceQueueBuffer: function(source,buffer) {
	}
	,sourceQueueBuffers: function(source,nb,buffers) {
	}
	,sourceUnqueueBuffer: function(source) {
		return lime_audio_openal_AL.sourceUnqueueBuffer(source);
	}
	,sourceUnqueueBuffers: function(source,nb) {
		return lime_audio_openal_AL.sourceUnqueueBuffers(source,nb);
	}
	,speedOfSound: function(value) {
	}
	,__class__: lime_audio_ALAudioContext
};
var lime_audio_ALCAudioContext = function() {
	this.ALL_DEVICES_SPECIFIER = 4115;
	this.DEFAULT_ALL_DEVICES_SPECIFIER = 4114;
	this.ENUMERATE_ALL_EXT = 1;
	this.EXTENSIONS = 4102;
	this.DEVICE_SPECIFIER = 4101;
	this.DEFAULT_DEVICE_SPECIFIER = 4100;
	this.ALL_ATTRIBUTES = 4099;
	this.ATTRIBUTES_SIZE = 4098;
	this.OUT_OF_MEMORY = 40965;
	this.INVALID_VALUE = 40964;
	this.INVALID_ENUM = 40963;
	this.INVALID_CONTEXT = 40962;
	this.INVALID_DEVICE = 40961;
	this.NO_ERROR = 0;
	this.STEREO_SOURCES = 4113;
	this.MONO_SOURCES = 4112;
	this.SYNC = 4105;
	this.REFRESH = 4104;
	this.FREQUENCY = 4103;
	this.TRUE = 1;
	this.FALSE = 0;
};
$hxClasses["lime.audio.ALCAudioContext"] = lime_audio_ALCAudioContext;
lime_audio_ALCAudioContext.__name__ = ["lime","audio","ALCAudioContext"];
lime_audio_ALCAudioContext.prototype = {
	FALSE: null
	,TRUE: null
	,FREQUENCY: null
	,REFRESH: null
	,SYNC: null
	,MONO_SOURCES: null
	,STEREO_SOURCES: null
	,NO_ERROR: null
	,INVALID_DEVICE: null
	,INVALID_CONTEXT: null
	,INVALID_ENUM: null
	,INVALID_VALUE: null
	,OUT_OF_MEMORY: null
	,ATTRIBUTES_SIZE: null
	,ALL_ATTRIBUTES: null
	,DEFAULT_DEVICE_SPECIFIER: null
	,DEVICE_SPECIFIER: null
	,EXTENSIONS: null
	,ENUMERATE_ALL_EXT: null
	,DEFAULT_ALL_DEVICES_SPECIFIER: null
	,ALL_DEVICES_SPECIFIER: null
	,closeDevice: function(device) {
		return lime_audio_openal_ALC.closeDevice(device);
	}
	,createContext: function(device,attrlist) {
		return lime_audio_openal_ALC.createContext(device,attrlist);
	}
	,destroyContext: function(context) {
	}
	,getContextsDevice: function(context) {
		return lime_audio_openal_ALC.getContextsDevice(context);
	}
	,getCurrentContext: function() {
		return lime_audio_openal_ALC.getCurrentContext();
	}
	,getError: function(device) {
		return lime_audio_openal_ALC.getError(device);
	}
	,getErrorString: function(device) {
		return lime_audio_openal_ALC.getErrorString(device);
	}
	,getIntegerv: function(device,param,count) {
		if(count == null) {
			count = 1;
		}
		return lime_audio_openal_ALC.getIntegerv(device,param,count);
	}
	,getString: function(device,param) {
		return lime_audio_openal_ALC.getString(device,param);
	}
	,makeContextCurrent: function(context) {
		return lime_audio_openal_ALC.makeContextCurrent(context);
	}
	,openDevice: function(deviceName) {
		return lime_audio_openal_ALC.openDevice(deviceName);
	}
	,pauseDevice: function(device) {
	}
	,processContext: function(context) {
	}
	,resumeDevice: function(device) {
	}
	,suspendContext: function(context) {
	}
	,__class__: lime_audio_ALCAudioContext
};
var lime_audio_AudioBuffer = function() {
};
$hxClasses["lime.audio.AudioBuffer"] = lime_audio_AudioBuffer;
lime_audio_AudioBuffer.__name__ = ["lime","audio","AudioBuffer"];
lime_audio_AudioBuffer.fromBytes = function(bytes) {
	if(bytes == null) {
		return null;
	}
	return null;
};
lime_audio_AudioBuffer.fromFile = function(path) {
	if(path == null) {
		return null;
	}
	var audioBuffer = new lime_audio_AudioBuffer();
	audioBuffer.__srcHowl = new Howl({ src : [path]});
	return audioBuffer;
};
lime_audio_AudioBuffer.fromFiles = function(paths) {
	var audioBuffer = new lime_audio_AudioBuffer();
	audioBuffer.__srcHowl = new Howl({ src : paths});
	return audioBuffer;
};
lime_audio_AudioBuffer.fromURL = function(url,handler) {
	var audioBuffer = new lime_audio_AudioBuffer();
	audioBuffer.__srcHowl = new Howl({ src : [url]});
	audioBuffer.__srcHowl.on("load",function() {
		handler(audioBuffer);
	});
	audioBuffer.__srcHowl.on("loaderror",function() {
		handler(null);
	});
	audioBuffer.__srcHowl.load();
};
lime_audio_AudioBuffer.loadFromFile = function(path) {
	var promise = new lime_app_Promise();
	var audioBuffer = lime_audio_AudioBuffer.fromFile(path);
	if(audioBuffer != null) {
		if(audioBuffer != null) {
			audioBuffer.__srcHowl.on("load",function() {
				promise.complete(audioBuffer);
			});
			audioBuffer.__srcHowl.on("loaderror",function() {
				promise.error(null);
			});
			audioBuffer.__srcHowl.load();
		}
	} else {
		promise.error(null);
	}
	return promise.future;
};
lime_audio_AudioBuffer.loadFromFiles = function(paths) {
	var promise = new lime_app_Promise();
	var audioBuffer = lime_audio_AudioBuffer.fromFiles(paths);
	if(audioBuffer != null) {
		audioBuffer.__srcHowl.on("load",function() {
			promise.complete(audioBuffer);
		});
		audioBuffer.__srcHowl.on("loaderror",function() {
			promise.error(null);
		});
		audioBuffer.__srcHowl.load();
	} else {
		promise.error(null);
	}
	return promise.future;
};
lime_audio_AudioBuffer.prototype = {
	bitsPerSample: null
	,channels: null
	,data: null
	,sampleRate: null
	,__srcAudio: null
	,__srcBuffer: null
	,__srcCustom: null
	,__srcFMODSound: null
	,__srcHowl: null
	,__srcSound: null
	,dispose: function() {
	}
	,get_src: function() {
		return this.__srcHowl;
	}
	,set_src: function(value) {
		return this.__srcHowl = value;
	}
	,__class__: lime_audio_AudioBuffer
	,__properties__: {set_src:"set_src",get_src:"get_src"}
};
var lime_audio_AudioContext = $hxClasses["lime.audio.AudioContext"] = { __ename__ : ["lime","audio","AudioContext"], __constructs__ : ["OPENAL","HTML5","WEB","FLASH","CUSTOM"] };
lime_audio_AudioContext.OPENAL = function(alc,al) { var $x = ["OPENAL",0,alc,al]; $x.__enum__ = lime_audio_AudioContext; $x.toString = $estr; return $x; };
lime_audio_AudioContext.HTML5 = function(context) { var $x = ["HTML5",1,context]; $x.__enum__ = lime_audio_AudioContext; $x.toString = $estr; return $x; };
lime_audio_AudioContext.WEB = function(context) { var $x = ["WEB",2,context]; $x.__enum__ = lime_audio_AudioContext; $x.toString = $estr; return $x; };
lime_audio_AudioContext.FLASH = function(context) { var $x = ["FLASH",3,context]; $x.__enum__ = lime_audio_AudioContext; $x.toString = $estr; return $x; };
lime_audio_AudioContext.CUSTOM = function(data) { var $x = ["CUSTOM",4,data]; $x.__enum__ = lime_audio_AudioContext; $x.toString = $estr; return $x; };
lime_audio_AudioContext.__empty_constructs__ = [];
var lime_audio_AudioManager = function() { };
$hxClasses["lime.audio.AudioManager"] = lime_audio_AudioManager;
lime_audio_AudioManager.__name__ = ["lime","audio","AudioManager"];
lime_audio_AudioManager.init = function(context) {
	if(lime_audio_AudioManager.context == null) {
		if(context == null) {
			try {
				window.AudioContext = window.AudioContext || window.webkitAudioContext;
				lime_audio_AudioManager.context = lime_audio_AudioContext.WEB(new AudioContext ());
			} catch( e ) {
				haxe_CallStack.lastException = e;
				lime_audio_AudioManager.context = lime_audio_AudioContext.HTML5(new lime_audio_HTML5AudioContext());
			}
		} else {
			lime_audio_AudioManager.context = context;
		}
	}
};
lime_audio_AudioManager.resume = function() {
	if(lime_audio_AudioManager.context != null) {
		var _g = lime_audio_AudioManager.context;
	}
};
lime_audio_AudioManager.shutdown = function() {
	if(lime_audio_AudioManager.context != null) {
		var _g = lime_audio_AudioManager.context;
	}
};
lime_audio_AudioManager.suspend = function() {
	if(lime_audio_AudioManager.context != null) {
		var _g = lime_audio_AudioManager.context;
	}
};
var lime_audio_AudioSource = function(buffer,offset,length,loops) {
	if(loops == null) {
		loops = 0;
	}
	if(offset == null) {
		offset = 0;
	}
	this.onComplete = new lime_app__$Event_$Void_$Void();
	this.buffer = buffer;
	this.offset = offset;
	this.backend = new lime__$backend_html5_HTML5AudioSource(this);
	if(length != null && length != 0) {
		this.set_length(length);
	}
	this.set_loops(loops);
	if(buffer != null) {
		this.init();
	}
};
$hxClasses["lime.audio.AudioSource"] = lime_audio_AudioSource;
lime_audio_AudioSource.__name__ = ["lime","audio","AudioSource"];
lime_audio_AudioSource.prototype = {
	onComplete: null
	,buffer: null
	,offset: null
	,backend: null
	,dispose: function() {
	}
	,init: function() {
	}
	,play: function() {
		this.backend.play();
	}
	,pause: function() {
		this.backend.pause();
	}
	,stop: function() {
		this.backend.stop();
	}
	,get_currentTime: function() {
		return this.backend.getCurrentTime();
	}
	,set_currentTime: function(value) {
		return this.backend.setCurrentTime(value);
	}
	,get_gain: function() {
		return this.backend.getGain();
	}
	,set_gain: function(value) {
		return this.backend.setGain(value);
	}
	,get_length: function() {
		return this.backend.getLength();
	}
	,set_length: function(value) {
		return this.backend.setLength(value);
	}
	,get_loops: function() {
		return this.backend.getLoops();
	}
	,set_loops: function(value) {
		return this.backend.setLoops(value);
	}
	,get_position: function() {
		return this.backend.getPosition();
	}
	,set_position: function(value) {
		return this.backend.setPosition(value);
	}
	,__class__: lime_audio_AudioSource
	,__properties__: {set_position:"set_position",get_position:"get_position",set_loops:"set_loops",get_loops:"get_loops",set_length:"set_length",get_length:"get_length",set_gain:"set_gain",get_gain:"get_gain",set_currentTime:"set_currentTime",get_currentTime:"get_currentTime"}
};
var lime_audio_FlashAudioContext = function() {
};
$hxClasses["lime.audio.FlashAudioContext"] = lime_audio_FlashAudioContext;
lime_audio_FlashAudioContext.__name__ = ["lime","audio","FlashAudioContext"];
lime_audio_FlashAudioContext.prototype = {
	createBuffer: function(stream,context) {
		return null;
	}
	,getBytesLoaded: function(buffer) {
		return 0;
	}
	,getBytesTotal: function(buffer) {
		return 0;
	}
	,getID3: function(buffer) {
		return null;
	}
	,getIsBuffering: function(buffer) {
		return false;
	}
	,getIsURLInaccessible: function(buffer) {
		return false;
	}
	,getLength: function(buffer) {
		return 0;
	}
	,getURL: function(buffer) {
		return null;
	}
	,close: function(buffer) {
	}
	,extract: function(buffer,target,length,startPosition) {
		if(startPosition == null) {
			startPosition = -1;
		}
		return 0;
	}
	,load: function(buffer,stream,context) {
	}
	,loadCompressedDataFromByteArray: function(buffer,bytes,bytesLength) {
	}
	,loadPCMFromByteArray: function(buffer,bytes,samples,format,stereo,sampleRate) {
		if(sampleRate == null) {
			sampleRate = 44100;
		}
		if(stereo == null) {
			stereo = true;
		}
	}
	,play: function(buffer,startTime,loops,sndTransform) {
		if(loops == null) {
			loops = 0;
		}
		if(startTime == null) {
			startTime = 0;
		}
		return null;
	}
	,__class__: lime_audio_FlashAudioContext
};
var lime_audio_HTML5AudioContext = function() {
	this.NETWORK_NO_SOURCE = 3;
	this.NETWORK_LOADING = 2;
	this.NETWORK_IDLE = 1;
	this.NETWORK_EMPTY = 0;
	this.HAVE_NOTHING = 0;
	this.HAVE_METADATA = 1;
	this.HAVE_FUTURE_DATA = 3;
	this.HAVE_ENOUGH_DATA = 4;
	this.HAVE_CURRENT_DATA = 2;
};
$hxClasses["lime.audio.HTML5AudioContext"] = lime_audio_HTML5AudioContext;
lime_audio_HTML5AudioContext.__name__ = ["lime","audio","HTML5AudioContext"];
lime_audio_HTML5AudioContext.prototype = {
	HAVE_CURRENT_DATA: null
	,HAVE_ENOUGH_DATA: null
	,HAVE_FUTURE_DATA: null
	,HAVE_METADATA: null
	,HAVE_NOTHING: null
	,NETWORK_EMPTY: null
	,NETWORK_IDLE: null
	,NETWORK_LOADING: null
	,NETWORK_NO_SOURCE: null
	,canPlayType: function(buffer,type) {
		if(buffer.__srcAudio != null) {
			return buffer.__srcAudio.canPlayType(type);
		}
		return null;
	}
	,createBuffer: function(urlString) {
		var buffer = new lime_audio_AudioBuffer();
		buffer.__srcAudio = new Audio();
		buffer.__srcAudio.src = urlString;
		return buffer;
	}
	,getAutoplay: function(buffer) {
		if(buffer.__srcAudio != null) {
			return buffer.__srcAudio.autoplay;
		}
		return false;
	}
	,getBuffered: function(buffer) {
		if(buffer.__srcAudio != null) {
			return buffer.__srcAudio.buffered;
		}
		return null;
	}
	,getCurrentSrc: function(buffer) {
		if(buffer.__srcAudio != null) {
			return buffer.__srcAudio.currentSrc;
		}
		return null;
	}
	,getCurrentTime: function(buffer) {
		if(buffer.__srcAudio != null) {
			return buffer.__srcAudio.currentTime;
		}
		return 0;
	}
	,getDefaultPlaybackRate: function(buffer) {
		if(buffer.__srcAudio != null) {
			return buffer.__srcAudio.defaultPlaybackRate;
		}
		return 1;
	}
	,getDuration: function(buffer) {
		if(buffer.__srcAudio != null) {
			return buffer.__srcAudio.duration;
		}
		return 0;
	}
	,getEnded: function(buffer) {
		if(buffer.__srcAudio != null) {
			return buffer.__srcAudio.ended;
		}
		return false;
	}
	,getError: function(buffer) {
		if(buffer.__srcAudio != null) {
			return buffer.__srcAudio.error;
		}
		return null;
	}
	,getLoop: function(buffer) {
		if(buffer.__srcAudio != null) {
			return buffer.__srcAudio.loop;
		}
		return false;
	}
	,getMuted: function(buffer) {
		if(buffer.__srcAudio != null) {
			return buffer.__srcAudio.muted;
		}
		return false;
	}
	,getNetworkState: function(buffer) {
		if(buffer.__srcAudio != null) {
			return buffer.__srcAudio.networkState;
		}
		return 0;
	}
	,getPaused: function(buffer) {
		if(buffer.__srcAudio != null) {
			return buffer.__srcAudio.paused;
		}
		return false;
	}
	,getPlaybackRate: function(buffer) {
		if(buffer.__srcAudio != null) {
			return buffer.__srcAudio.playbackRate;
		}
		return 1;
	}
	,getPlayed: function(buffer) {
		if(buffer.__srcAudio != null) {
			return buffer.__srcAudio.played;
		}
		return null;
	}
	,getPreload: function(buffer) {
		if(buffer.__srcAudio != null) {
			return buffer.__srcAudio.preload;
		}
		return null;
	}
	,getReadyState: function(buffer) {
		if(buffer.__srcAudio != null) {
			return buffer.__srcAudio.readyState;
		}
		return 0;
	}
	,getSeekable: function(buffer) {
		if(buffer.__srcAudio != null) {
			return buffer.__srcAudio.seekable;
		}
		return null;
	}
	,getSeeking: function(buffer) {
		if(buffer.__srcAudio != null) {
			return buffer.__srcAudio.seeking;
		}
		return false;
	}
	,getSrc: function(buffer) {
		if(buffer.__srcAudio != null) {
			return buffer.__srcAudio.src;
		}
		return null;
	}
	,getStartTime: function(buffer) {
		if(buffer.__srcAudio != null) {
			return buffer.__srcAudio.playbackRate;
		}
		return 0;
	}
	,getVolume: function(buffer) {
		if(buffer.__srcAudio != null) {
			return buffer.__srcAudio.volume;
		}
		return 1;
	}
	,load: function(buffer) {
		if(buffer.__srcAudio != null) {
			buffer.__srcAudio.load();
			return;
		}
	}
	,pause: function(buffer) {
		if(buffer.__srcAudio != null) {
			buffer.__srcAudio.pause();
			return;
		}
	}
	,play: function(buffer) {
		if(buffer.__srcAudio != null) {
			buffer.__srcAudio.play();
			return;
		}
	}
	,setAutoplay: function(buffer,value) {
		if(buffer.__srcAudio != null) {
			buffer.__srcAudio.autoplay = value;
		}
	}
	,setCurrentTime: function(buffer,value) {
		if(buffer.__srcAudio != null) {
			buffer.__srcAudio.currentTime = value;
		}
	}
	,setDefaultPlaybackRate: function(buffer,value) {
		if(buffer.__srcAudio != null) {
			buffer.__srcAudio.defaultPlaybackRate = value;
		}
	}
	,setLoop: function(buffer,value) {
		if(buffer.__srcAudio != null) {
			buffer.__srcAudio.loop = value;
		}
	}
	,setMuted: function(buffer,value) {
		if(buffer.__srcAudio != null) {
			buffer.__srcAudio.muted = value;
		}
	}
	,setPlaybackRate: function(buffer,value) {
		if(buffer.__srcAudio != null) {
			buffer.__srcAudio.playbackRate = value;
		}
	}
	,setPreload: function(buffer,value) {
		if(buffer.__srcAudio != null) {
			buffer.__srcAudio.preload = value;
		}
	}
	,setSrc: function(buffer,value) {
		if(buffer.__srcAudio != null) {
			buffer.__srcAudio.src = value;
		}
	}
	,setVolume: function(buffer,value) {
		if(buffer.__srcAudio != null) {
			buffer.__srcAudio.volume = value;
		}
	}
	,__class__: lime_audio_HTML5AudioContext
};
var lime_audio_openal_AL = function() { };
$hxClasses["lime.audio.openal.AL"] = lime_audio_openal_AL;
lime_audio_openal_AL.__name__ = ["lime","audio","openal","AL"];
lime_audio_openal_AL.bufferData = function(buffer,format,data,size,freq) {
};
lime_audio_openal_AL.buffer3f = function(buffer,param,value1,value2,value3) {
};
lime_audio_openal_AL.buffer3i = function(buffer,param,value1,value2,value3) {
};
lime_audio_openal_AL.bufferf = function(buffer,param,value) {
};
lime_audio_openal_AL.bufferfv = function(buffer,param,values) {
};
lime_audio_openal_AL.bufferi = function(buffer,param,value) {
};
lime_audio_openal_AL.bufferiv = function(buffer,param,values) {
};
lime_audio_openal_AL.deleteBuffer = function(buffer) {
};
lime_audio_openal_AL.deleteBuffers = function(buffers) {
};
lime_audio_openal_AL.deleteSource = function(source) {
};
lime_audio_openal_AL.deleteSources = function(sources) {
};
lime_audio_openal_AL.disable = function(capability) {
};
lime_audio_openal_AL.distanceModel = function(distanceModel) {
};
lime_audio_openal_AL.dopplerFactor = function(value) {
};
lime_audio_openal_AL.dopplerVelocity = function(value) {
};
lime_audio_openal_AL.enable = function(capability) {
};
lime_audio_openal_AL.genSource = function() {
	return null;
};
lime_audio_openal_AL.genSources = function(n) {
	return null;
};
lime_audio_openal_AL.genBuffer = function() {
	return null;
};
lime_audio_openal_AL.genBuffers = function(n) {
	return null;
};
lime_audio_openal_AL.getBoolean = function(param) {
	return false;
};
lime_audio_openal_AL.getBooleanv = function(param,count) {
	if(count == null) {
		count = 1;
	}
	return null;
};
lime_audio_openal_AL.getBuffer3f = function(buffer,param) {
	return null;
};
lime_audio_openal_AL.getBuffer3i = function(buffer,param) {
	return null;
};
lime_audio_openal_AL.getBufferf = function(buffer,param) {
	return 0;
};
lime_audio_openal_AL.getBufferfv = function(buffer,param,count) {
	if(count == null) {
		count = 1;
	}
	return null;
};
lime_audio_openal_AL.getBufferi = function(buffer,param) {
	return 0;
};
lime_audio_openal_AL.getBufferiv = function(buffer,param,count) {
	if(count == null) {
		count = 1;
	}
	return null;
};
lime_audio_openal_AL.getDouble = function(param) {
	return 0;
};
lime_audio_openal_AL.getDoublev = function(param,count) {
	if(count == null) {
		count = 1;
	}
	return null;
};
lime_audio_openal_AL.getEnumValue = function(ename) {
	return 0;
};
lime_audio_openal_AL.getError = function() {
	return 0;
};
lime_audio_openal_AL.getErrorString = function() {
	switch(lime_audio_openal_AL.getError()) {
	case 40961:
		return "INVALID_NAME: Invalid parameter name";
	case 40962:
		return "INVALID_ENUM: Invalid enum value";
	case 40963:
		return "INVALID_VALUE: Invalid parameter value";
	case 40964:
		return "INVALID_OPERATION: Illegal operation or call";
	case 40965:
		return "OUT_OF_MEMORY: OpenAL has run out of memory";
	default:
		return "";
	}
};
lime_audio_openal_AL.getFloat = function(param) {
	return 0;
};
lime_audio_openal_AL.getFloatv = function(param,count) {
	if(count == null) {
		count = 1;
	}
	return null;
};
lime_audio_openal_AL.getInteger = function(param) {
	return 0;
};
lime_audio_openal_AL.getIntegerv = function(param,count) {
	if(count == null) {
		count = 1;
	}
	return null;
};
lime_audio_openal_AL.getListener3f = function(param) {
	return null;
};
lime_audio_openal_AL.getListener3i = function(param) {
	return null;
};
lime_audio_openal_AL.getListenerf = function(param) {
	return 0;
};
lime_audio_openal_AL.getListenerfv = function(param,count) {
	if(count == null) {
		count = 1;
	}
	return null;
};
lime_audio_openal_AL.getListeneri = function(param) {
	return 0;
};
lime_audio_openal_AL.getListeneriv = function(param,count) {
	if(count == null) {
		count = 1;
	}
	return null;
};
lime_audio_openal_AL.getProcAddress = function(fname) {
	return null;
};
lime_audio_openal_AL.getSource3f = function(source,param) {
	return null;
};
lime_audio_openal_AL.getSourcef = function(source,param) {
	return 0;
};
lime_audio_openal_AL.getSource3i = function(source,param) {
	return null;
};
lime_audio_openal_AL.getSourcefv = function(source,param,count) {
	if(count == null) {
		count = 1;
	}
	return null;
};
lime_audio_openal_AL.getSourcei = function(source,param) {
	return 0;
};
lime_audio_openal_AL.getSourceiv = function(source,param,count) {
	if(count == null) {
		count = 1;
	}
	return null;
};
lime_audio_openal_AL.getString = function(param) {
	return null;
};
lime_audio_openal_AL.isBuffer = function(buffer) {
	return false;
};
lime_audio_openal_AL.isEnabled = function(capability) {
	return false;
};
lime_audio_openal_AL.isExtensionPresent = function(extname) {
	return false;
};
lime_audio_openal_AL.isSource = function(source) {
	return false;
};
lime_audio_openal_AL.listener3f = function(param,value1,value2,value3) {
};
lime_audio_openal_AL.listener3i = function(param,value1,value2,value3) {
};
lime_audio_openal_AL.listenerf = function(param,value) {
};
lime_audio_openal_AL.listenerfv = function(param,values) {
};
lime_audio_openal_AL.listeneri = function(param,value) {
};
lime_audio_openal_AL.listeneriv = function(param,values) {
};
lime_audio_openal_AL.source3f = function(source,param,value1,value2,value3) {
};
lime_audio_openal_AL.source3i = function(source,param,value1,value2,value3) {
};
lime_audio_openal_AL.sourcef = function(source,param,value) {
};
lime_audio_openal_AL.sourcefv = function(source,param,values) {
};
lime_audio_openal_AL.sourcei = function(source,param,value) {
};
lime_audio_openal_AL.sourceiv = function(source,param,values) {
};
lime_audio_openal_AL.sourcePlay = function(source) {
};
lime_audio_openal_AL.sourcePlayv = function(sources) {
};
lime_audio_openal_AL.sourceStop = function(source) {
};
lime_audio_openal_AL.sourceStopv = function(sources) {
};
lime_audio_openal_AL.sourceRewind = function(source) {
};
lime_audio_openal_AL.sourceRewindv = function(sources) {
};
lime_audio_openal_AL.sourcePause = function(source) {
};
lime_audio_openal_AL.sourcePausev = function(sources) {
};
lime_audio_openal_AL.sourceQueueBuffer = function(source,buffer) {
};
lime_audio_openal_AL.sourceQueueBuffers = function(source,nb,buffers) {
};
lime_audio_openal_AL.sourceUnqueueBuffer = function(source) {
	return 0;
};
lime_audio_openal_AL.sourceUnqueueBuffers = function(source,nb) {
	return null;
};
lime_audio_openal_AL.speedOfSound = function(value) {
};
var lime_audio_openal__$ALBuffer_ALBuffer_$Impl_$ = {};
$hxClasses["lime.audio.openal._ALBuffer.ALBuffer_Impl_"] = lime_audio_openal__$ALBuffer_ALBuffer_$Impl_$;
lime_audio_openal__$ALBuffer_ALBuffer_$Impl_$.__name__ = ["lime","audio","openal","_ALBuffer","ALBuffer_Impl_"];
lime_audio_openal__$ALBuffer_ALBuffer_$Impl_$._new = function(handle) {
	return handle;
};
var lime_audio_openal_ALC = function() { };
$hxClasses["lime.audio.openal.ALC"] = lime_audio_openal_ALC;
lime_audio_openal_ALC.__name__ = ["lime","audio","openal","ALC"];
lime_audio_openal_ALC.closeDevice = function(device) {
	return false;
};
lime_audio_openal_ALC.createContext = function(device,attrlist) {
	return null;
};
lime_audio_openal_ALC.destroyContext = function(context) {
};
lime_audio_openal_ALC.getContextsDevice = function(context) {
	return null;
};
lime_audio_openal_ALC.getCurrentContext = function() {
	return null;
};
lime_audio_openal_ALC.getError = function(device) {
	return 0;
};
lime_audio_openal_ALC.getErrorString = function(device) {
	switch(lime_audio_openal_ALC.getError(device)) {
	case 40961:
		return "INVALID_DEVICE: Invalid device (or no device?)";
	case 40962:
		return "INVALID_CONTEXT: Invalid context (or no context?)";
	case 40963:
		return "INVALID_ENUM: Invalid enum value";
	case 40964:
		return "INVALID_VALUE: Invalid param value";
	case 40965:
		return "OUT_OF_MEMORY: OpenAL has run out of memory";
	default:
		return "";
	}
};
lime_audio_openal_ALC.getIntegerv = function(device,param,size) {
	return null;
};
lime_audio_openal_ALC.getString = function(device,param) {
	return null;
};
lime_audio_openal_ALC.makeContextCurrent = function(context) {
	return false;
};
lime_audio_openal_ALC.openDevice = function(deviceName) {
	return null;
};
lime_audio_openal_ALC.pauseDevice = function(device) {
};
lime_audio_openal_ALC.processContext = function(context) {
};
lime_audio_openal_ALC.resumeDevice = function(device) {
};
lime_audio_openal_ALC.suspendContext = function(context) {
};
var lime_audio_openal__$ALContext_ALContext_$Impl_$ = {};
$hxClasses["lime.audio.openal._ALContext.ALContext_Impl_"] = lime_audio_openal__$ALContext_ALContext_$Impl_$;
lime_audio_openal__$ALContext_ALContext_$Impl_$.__name__ = ["lime","audio","openal","_ALContext","ALContext_Impl_"];
lime_audio_openal__$ALContext_ALContext_$Impl_$._new = function(handle) {
	return handle;
};
var lime_audio_openal__$ALDevice_ALDevice_$Impl_$ = {};
$hxClasses["lime.audio.openal._ALDevice.ALDevice_Impl_"] = lime_audio_openal__$ALDevice_ALDevice_$Impl_$;
lime_audio_openal__$ALDevice_ALDevice_$Impl_$.__name__ = ["lime","audio","openal","_ALDevice","ALDevice_Impl_"];
lime_audio_openal__$ALDevice_ALDevice_$Impl_$._new = function(handle) {
	return handle;
};
var lime_audio_openal__$ALSource_ALSource_$Impl_$ = {};
$hxClasses["lime.audio.openal._ALSource.ALSource_Impl_"] = lime_audio_openal__$ALSource_ALSource_$Impl_$;
lime_audio_openal__$ALSource_ALSource_$Impl_$.__name__ = ["lime","audio","openal","_ALSource","ALSource_Impl_"];
lime_audio_openal__$ALSource_ALSource_$Impl_$._new = function(handle) {
	return handle;
};
var lime_graphics_ConsoleRenderContext = function() {
};
$hxClasses["lime.graphics.ConsoleRenderContext"] = lime_graphics_ConsoleRenderContext;
lime_graphics_ConsoleRenderContext.__name__ = ["lime","graphics","ConsoleRenderContext"];
lime_graphics_ConsoleRenderContext.prototype = {
	createIndexBuffer: function(indices,count) {
		return new lime_graphics_console_IndexBuffer();
	}
	,createVertexBuffer: function(decl,count) {
		return new lime_graphics_console_VertexBuffer();
	}
	,lookupShader: function(name) {
		return new lime_graphics_console_Shader();
	}
	,clear: function(r,g,b,a,depth,stencil) {
		if(stencil == null) {
			stencil = 0;
		}
		if(depth == null) {
			depth = 1.0;
		}
	}
	,bindShader: function(shader) {
	}
	,setViewport: function(x,y,width,height,nearPlane,farPlane) {
		if(farPlane == null) {
			farPlane = 1.0;
		}
		if(nearPlane == null) {
			nearPlane = 0.0;
		}
	}
	,setVertexShaderConstantF: function(startRegister,vec4,vec4count) {
	}
	,setVertexSource: function(vb) {
	}
	,setIndexSource: function(ib) {
	}
	,draw: function(primitive,startVertex,primitiveCount) {
	}
	,drawIndexed: function(primitive,vertexCount,startIndex,primitiveCount) {
	}
	,get_width: function() {
		return 0;
	}
	,get_height: function() {
		return 0;
	}
	,__class__: lime_graphics_ConsoleRenderContext
	,__properties__: {get_height:"get_height",get_width:"get_width"}
};
var lime_graphics_FlashRenderContext = function() {
};
$hxClasses["lime.graphics.FlashRenderContext"] = lime_graphics_FlashRenderContext;
lime_graphics_FlashRenderContext.__name__ = ["lime","graphics","FlashRenderContext"];
lime_graphics_FlashRenderContext.prototype = {
	accessibilityImplementation: null
	,accessibilityProperties: null
	,alpha: null
	,blendMode: null
	,blendShader: null
	,buttonMode: null
	,cacheAsBitmap: null
	,contextMenu: null
	,doubleClickEnabled: null
	,dropTarget: null
	,filters: null
	,focusRect: null
	,graphics: null
	,height: null
	,hitArea: null
	,loaderInfo: null
	,mask: null
	,mouseChildren: null
	,mouseEnabled: null
	,mouseX: null
	,mouseY: null
	,name: null
	,needsSoftKeyboard: null
	,numChildren: null
	,opaqueBackground: null
	,parent: null
	,root: null
	,rotation: null
	,rotationX: null
	,rotationY: null
	,rotationZ: null
	,scale9Grid: null
	,scaleX: null
	,scaleY: null
	,scaleZ: null
	,scrollRect: null
	,softKeyboardInputAreaOfInterest: null
	,soundTransform: null
	,stage: null
	,tabChildren: null
	,tabEnabled: null
	,tabIndex: null
	,textSnapshot: null
	,transform: null
	,useHandCursor: null
	,visible: null
	,width: null
	,x: null
	,y: null
	,z: null
	,addChild: function(child) {
		return null;
	}
	,addChildAt: function(child,index) {
		return null;
	}
	,addEventListener: function(type,listener,useCapture,priority,useWeakReference) {
		if(useWeakReference == null) {
			useWeakReference = false;
		}
		if(priority == null) {
			priority = 0;
		}
		if(useCapture == null) {
			useCapture = false;
		}
	}
	,areInaccessibleObjectsUnderPoint: function(point) {
		return false;
	}
	,contains: function(child) {
		return false;
	}
	,dispatchEvent: function(event) {
		return false;
	}
	,getBounds: function(targetCoordinateSpace) {
		return null;
	}
	,getChildAt: function(index) {
		return null;
	}
	,getChildByName: function(name) {
		return null;
	}
	,getChildIndex: function(child) {
		return 0;
	}
	,getObjectsUnderPoint: function(point) {
		return null;
	}
	,getRect: function(targetCoordinateSpace) {
		return null;
	}
	,globalToLocal: function(point) {
		return null;
	}
	,globalToLocal3D: function(point) {
		return null;
	}
	,hasEventListener: function(type) {
		return false;
	}
	,hitTestObject: function(obj) {
		return false;
	}
	,hitTestPoint: function(x,y,shapeFlag) {
		if(shapeFlag == null) {
			shapeFlag = false;
		}
		return false;
	}
	,local3DToGlobal: function(point3d) {
		return null;
	}
	,localToGlobal: function(point) {
		return null;
	}
	,removeChild: function(child) {
		return null;
	}
	,removeChildAt: function(index) {
		return null;
	}
	,removeChildren: function(beginIndex,endIndex) {
		if(endIndex == null) {
			endIndex = 2147483647;
		}
		if(beginIndex == null) {
			beginIndex = 0;
		}
	}
	,removeEventListener: function(type,listener,useCapture) {
		if(useCapture == null) {
			useCapture = false;
		}
	}
	,requestSoftKeyboard: function() {
		return false;
	}
	,setChildIndex: function(child,index) {
	}
	,startDrag: function(lockCenter,bounds) {
		if(lockCenter == null) {
			lockCenter = false;
		}
	}
	,startTouchDrag: function(touchPointID,lockCenter,bounds) {
		if(lockCenter == null) {
			lockCenter = false;
		}
	}
	,stopAllMovieClips: function() {
	}
	,stopDrag: function() {
	}
	,stopTouchDrag: function(touchPointID) {
	}
	,swapChildren: function(child1,child2) {
	}
	,swapChildrenAt: function(index1,index2) {
	}
	,toString: function() {
		return null;
	}
	,willTrigger: function(type) {
		return false;
	}
	,__class__: lime_graphics_FlashRenderContext
};
var lime_graphics_Image = function(buffer,offsetX,offsetY,width,height,color,type) {
	if(height == null) {
		height = -1;
	}
	if(width == null) {
		width = -1;
	}
	if(offsetY == null) {
		offsetY = 0;
	}
	if(offsetX == null) {
		offsetX = 0;
	}
	this.offsetX = offsetX;
	this.offsetY = offsetY;
	this.width = width;
	this.height = height;
	this.version = 0;
	if(type == null) {
		if(lime_app_Application.current != null && lime_app_Application.current.__renderers[0] != null) {
			var tmp;
			switch(lime_app_Application.current.__renderers[0].context[1]) {
			case 1:case 2:
				tmp = lime_graphics_ImageType.CANVAS;
				break;
			case 3:
				tmp = lime_graphics_ImageType.FLASH;
				break;
			default:
				tmp = lime_graphics_ImageType.DATA;
			}
			this.type = tmp;
		} else {
			this.type = lime_graphics_ImageType.DATA;
		}
	} else {
		this.type = type;
	}
	if(buffer == null) {
		if(width > 0 && height > 0) {
			switch(this.type[1]) {
			case 0:
				this.buffer = new lime_graphics_ImageBuffer(null,width,height);
				lime_graphics_utils_ImageCanvasUtil.createCanvas(this,width,height);
				if(color != null) {
					this.fillRect(new lime_math_Rectangle(0,0,width,height),color);
				}
				break;
			case 1:
				var elements = width * height * 4;
				var this1;
				if(elements != null) {
					this1 = new Uint8Array(elements);
				} else {
					this1 = null;
				}
				this.buffer = new lime_graphics_ImageBuffer(this1,width,height);
				if(color != null) {
					this.fillRect(new lime_math_Rectangle(0,0,width,height),color);
				}
				break;
			case 2:
				break;
			default:
			}
		}
	} else {
		this.__fromImageBuffer(buffer);
	}
};
$hxClasses["lime.graphics.Image"] = lime_graphics_Image;
lime_graphics_Image.__name__ = ["lime","graphics","Image"];
lime_graphics_Image.fromBase64 = function(base64,type,onload) {
	if(base64 == null) {
		return null;
	}
	var image = new lime_graphics_Image();
	image.__fromBase64(base64,type,onload);
	return image;
};
lime_graphics_Image.fromBitmapData = function(bitmapData) {
	if(bitmapData == null) {
		return null;
	}
	return bitmapData.image;
};
lime_graphics_Image.fromBytes = function(bytes,onload) {
	if(bytes == null) {
		return null;
	}
	var image = new lime_graphics_Image();
	image.__fromBytes(bytes,onload);
	return image;
};
lime_graphics_Image.fromCanvas = function(canvas) {
	if(canvas == null) {
		return null;
	}
	var buffer = new lime_graphics_ImageBuffer(null,canvas.width,canvas.height);
	buffer.set_src(canvas);
	var image = new lime_graphics_Image(buffer);
	image.type = lime_graphics_ImageType.CANVAS;
	return image;
};
lime_graphics_Image.fromFile = function(path,onload,onerror) {
	if(path == null) {
		return null;
	}
	var image = new lime_graphics_Image();
	image.__fromFile(path,onload,onerror);
	return image;
};
lime_graphics_Image.fromImageElement = function(image) {
	if(image == null) {
		return null;
	}
	var buffer = new lime_graphics_ImageBuffer(null,image.width,image.height);
	buffer.set_src(image);
	var _image = new lime_graphics_Image(buffer);
	_image.type = lime_graphics_ImageType.CANVAS;
	return _image;
};
lime_graphics_Image.__base64Encode = function(bytes) {
	var extension;
	switch(bytes.length % 3) {
	case 1:
		extension = "==";
		break;
	case 2:
		extension = "=";
		break;
	default:
		extension = "";
	}
	if(lime_graphics_Image.__base64Encoder == null) {
		lime_graphics_Image.__base64Encoder = new haxe_crypto_BaseCode(haxe_io_Bytes.ofString(lime_graphics_Image.__base64Chars));
	}
	return lime_graphics_Image.__base64Encoder.encodeBytes(bytes).toString() + extension;
};
lime_graphics_Image.__isJPG = function(bytes) {
	if(bytes.b[0] == 255) {
		return bytes.b[1] == 216;
	} else {
		return false;
	}
};
lime_graphics_Image.__isPNG = function(bytes) {
	if(bytes.b[0] == 137 && bytes.b[1] == 80 && bytes.b[2] == 78 && bytes.b[3] == 71 && bytes.b[4] == 13 && bytes.b[5] == 10 && bytes.b[6] == 26) {
		return bytes.b[7] == 10;
	} else {
		return false;
	}
};
lime_graphics_Image.__isGIF = function(bytes) {
	if(bytes.b[0] == 71 && bytes.b[1] == 73 && bytes.b[2] == 70 && bytes.b[3] == 56) {
		var b = bytes.b[4];
		if(b == 55 || b == 57) {
			return bytes.b[5] == 97;
		} else {
			return false;
		}
	}
	return false;
};
lime_graphics_Image.prototype = {
	buffer: null
	,dirty: null
	,height: null
	,offsetX: null
	,offsetY: null
	,rect: null
	,type: null
	,version: null
	,width: null
	,x: null
	,y: null
	,clone: function() {
		if(this.buffer != null) {
			if(this.type == lime_graphics_ImageType.CANVAS) {
				lime_graphics_utils_ImageCanvasUtil.convertToCanvas(this);
			} else {
				lime_graphics_utils_ImageCanvasUtil.convertToData(this);
			}
			var image = new lime_graphics_Image(this.buffer.clone(),this.offsetX,this.offsetY,this.width,this.height,null,this.type);
			image.version = this.version;
			return image;
		} else {
			return new lime_graphics_Image(null,this.offsetX,this.offsetY,this.width,this.height,null,this.type);
		}
	}
	,colorTransform: function(rect,colorMatrix) {
		rect = this.__clipRect(rect);
		if(this.buffer == null || rect == null) {
			return;
		}
		switch(this.type[1]) {
		case 0:
			lime_graphics_utils_ImageCanvasUtil.colorTransform(this,rect,colorMatrix);
			break;
		case 1:
			lime_graphics_utils_ImageCanvasUtil.convertToData(this);
			lime_graphics_utils_ImageDataUtil.colorTransform(this,rect,colorMatrix);
			break;
		case 2:
			rect.offset(this.offsetX,this.offsetY);
			this.buffer.__srcBitmapData.colorTransform(rect.__toFlashRectangle(),lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__toFlashColorTransform(colorMatrix));
			break;
		default:
		}
	}
	,copyChannel: function(sourceImage,sourceRect,destPoint,sourceChannel,destChannel) {
		sourceRect = this.__clipRect(sourceRect);
		if(this.buffer == null || sourceRect == null) {
			return;
		}
		if(destChannel == lime_graphics_ImageChannel.ALPHA && !this.get_transparent()) {
			return;
		}
		if(sourceRect.width <= 0 || sourceRect.height <= 0) {
			return;
		}
		if(sourceRect.x + sourceRect.width > sourceImage.width) {
			sourceRect.width = sourceImage.width - sourceRect.x;
		}
		if(sourceRect.y + sourceRect.height > sourceImage.height) {
			sourceRect.height = sourceImage.height - sourceRect.y;
		}
		switch(this.type[1]) {
		case 0:
			lime_graphics_utils_ImageCanvasUtil.copyChannel(this,sourceImage,sourceRect,destPoint,sourceChannel,destChannel);
			break;
		case 1:
			lime_graphics_utils_ImageCanvasUtil.convertToData(this);
			lime_graphics_utils_ImageDataUtil.copyChannel(this,sourceImage,sourceRect,destPoint,sourceChannel,destChannel);
			break;
		case 2:
			var srcChannel;
			switch(sourceChannel[1]) {
			case 0:
				srcChannel = 1;
				break;
			case 1:
				srcChannel = 2;
				break;
			case 2:
				srcChannel = 4;
				break;
			case 3:
				srcChannel = 8;
				break;
			}
			var dstChannel;
			switch(destChannel[1]) {
			case 0:
				dstChannel = 1;
				break;
			case 1:
				dstChannel = 2;
				break;
			case 2:
				dstChannel = 4;
				break;
			case 3:
				dstChannel = 8;
				break;
			}
			sourceRect.offset(sourceImage.offsetX,sourceImage.offsetY);
			destPoint.offset(this.offsetX,this.offsetY);
			this.buffer.__srcBitmapData.copyChannel(sourceImage.buffer.get_src(),sourceRect.__toFlashRectangle(),destPoint.__toFlashPoint(),srcChannel,dstChannel);
			break;
		default:
		}
	}
	,copyPixels: function(sourceImage,sourceRect,destPoint,alphaImage,alphaPoint,mergeAlpha) {
		if(mergeAlpha == null) {
			mergeAlpha = false;
		}
		if(this.buffer == null || sourceImage == null) {
			return;
		}
		if(sourceRect.width <= 0 || sourceRect.height <= 0) {
			return;
		}
		if(this.width <= 0 || this.height <= 0) {
			return;
		}
		if(sourceRect.x + sourceRect.width > sourceImage.width) {
			sourceRect.width = sourceImage.width - sourceRect.x;
		}
		if(sourceRect.y + sourceRect.height > sourceImage.height) {
			sourceRect.height = sourceImage.height - sourceRect.y;
		}
		if(sourceRect.x < 0) {
			sourceRect.width += sourceRect.x;
			sourceRect.x = 0;
		}
		if(sourceRect.y < 0) {
			sourceRect.height += sourceRect.y;
			sourceRect.y = 0;
		}
		if(destPoint.x + sourceRect.width > this.width) {
			sourceRect.width = this.width - destPoint.x;
		}
		if(destPoint.y + sourceRect.height > this.height) {
			sourceRect.height = this.height - destPoint.y;
		}
		if(destPoint.x < 0) {
			sourceRect.width += destPoint.x;
			sourceRect.x -= destPoint.x;
			destPoint.x = 0;
		}
		if(destPoint.y < 0) {
			sourceRect.height += destPoint.y;
			sourceRect.y -= destPoint.y;
			destPoint.y = 0;
		}
		switch(this.type[1]) {
		case 0:
			lime_graphics_utils_ImageCanvasUtil.convertToCanvas(this);
			lime_graphics_utils_ImageCanvasUtil.copyPixels(this,sourceImage,sourceRect,destPoint,alphaImage,alphaPoint,mergeAlpha);
			break;
		case 1:
			lime_graphics_utils_ImageCanvasUtil.convertToData(this);
			lime_graphics_utils_ImageCanvasUtil.convertToData(sourceImage);
			lime_graphics_utils_ImageDataUtil.copyPixels(this,sourceImage,sourceRect,destPoint,alphaImage,alphaPoint,mergeAlpha);
			break;
		case 2:
			sourceRect.offset(sourceImage.offsetX,sourceImage.offsetY);
			destPoint.offset(this.offsetX,this.offsetY);
			if(alphaImage != null && alphaPoint != null) {
				alphaPoint.offset(alphaImage.offsetX,alphaImage.offsetY);
			}
			this.buffer.__srcBitmapData.copyPixels(sourceImage.buffer.__srcBitmapData,sourceRect.__toFlashRectangle(),destPoint.__toFlashPoint(),alphaImage != null ? alphaImage.buffer.get_src() : null,alphaPoint != null ? alphaPoint.__toFlashPoint() : null,mergeAlpha);
			break;
		default:
		}
	}
	,encode: function(format,quality) {
		if(quality == null) {
			quality = 90;
		}
		if(format == null) {
			format = "png";
		}
		switch(format) {
		case "bmp":
			return lime_graphics_format_BMP.encode(this);
		case "jpeg":case "jpg":
			return lime_graphics_format_JPEG.encode(this,quality);
		case "png":
			return lime_graphics_format_PNG.encode(this);
		default:
		}
		return null;
	}
	,fillRect: function(rect,color,format) {
		rect = this.__clipRect(rect);
		if(this.buffer == null || rect == null) {
			return;
		}
		switch(this.type[1]) {
		case 0:
			lime_graphics_utils_ImageCanvasUtil.fillRect(this,rect,color,format);
			break;
		case 1:
			lime_graphics_utils_ImageCanvasUtil.convertToData(this);
			if(this.buffer.data.length == 0) {
				return;
			}
			lime_graphics_utils_ImageDataUtil.fillRect(this,rect,color,format);
			break;
		case 2:
			rect.offset(this.offsetX,this.offsetY);
			var argb;
			if(format == null) {
				var rgba = color;
				var argb1 = 0;
				argb1 = (rgba & 255 & 255) << 24 | (rgba >>> 24 & 255 & 255) << 16 | (rgba >>> 16 & 255 & 255) << 8 | rgba >>> 8 & 255 & 255;
				argb = argb1;
			} else {
				switch(format) {
				case 1:
					argb = color;
					break;
				case 2:
					var bgra = color;
					var argb2 = 0;
					argb2 = (bgra & 255 & 255) << 24 | (bgra >>> 8 & 255 & 255) << 16 | (bgra >>> 16 & 255 & 255) << 8 | bgra >>> 24 & 255 & 255;
					argb = argb2;
					break;
				default:
					var rgba1 = color;
					var argb3 = 0;
					argb3 = (rgba1 & 255 & 255) << 24 | (rgba1 >>> 24 & 255 & 255) << 16 | (rgba1 >>> 16 & 255 & 255) << 8 | rgba1 >>> 8 & 255 & 255;
					argb = argb3;
				}
			}
			this.buffer.__srcBitmapData.fillRect(rect.__toFlashRectangle(),argb);
			break;
		default:
		}
	}
	,floodFill: function(x,y,color,format) {
		if(this.buffer == null) {
			return;
		}
		switch(this.type[1]) {
		case 0:
			lime_graphics_utils_ImageCanvasUtil.floodFill(this,x,y,color,format);
			break;
		case 1:
			lime_graphics_utils_ImageCanvasUtil.convertToData(this);
			lime_graphics_utils_ImageDataUtil.floodFill(this,x,y,color,format);
			break;
		case 2:
			var argb;
			if(format == null) {
				var rgba = color;
				var argb1 = 0;
				argb1 = (rgba & 255 & 255) << 24 | (rgba >>> 24 & 255 & 255) << 16 | (rgba >>> 16 & 255 & 255) << 8 | rgba >>> 8 & 255 & 255;
				argb = argb1;
			} else {
				switch(format) {
				case 1:
					argb = color;
					break;
				case 2:
					var bgra = color;
					var argb2 = 0;
					argb2 = (bgra & 255 & 255) << 24 | (bgra >>> 8 & 255 & 255) << 16 | (bgra >>> 16 & 255 & 255) << 8 | bgra >>> 24 & 255 & 255;
					argb = argb2;
					break;
				default:
					var rgba1 = color;
					var argb3 = 0;
					argb3 = (rgba1 & 255 & 255) << 24 | (rgba1 >>> 24 & 255 & 255) << 16 | (rgba1 >>> 16 & 255 & 255) << 8 | rgba1 >>> 8 & 255 & 255;
					argb = argb3;
				}
			}
			this.buffer.__srcBitmapData.floodFill(x + this.offsetX,y + this.offsetY,argb);
			break;
		default:
		}
	}
	,getColorBoundsRect: function(mask,color,findColor,format) {
		if(findColor == null) {
			findColor = true;
		}
		if(this.buffer == null) {
			return null;
		}
		switch(this.type[1]) {
		case 0:
			lime_graphics_utils_ImageCanvasUtil.convertToData(this);
			return lime_graphics_utils_ImageDataUtil.getColorBoundsRect(this,mask,color,findColor,format);
		case 1:
			return lime_graphics_utils_ImageDataUtil.getColorBoundsRect(this,mask,color,findColor,format);
		case 2:
			var rect = this.buffer.__srcBitmapData.getColorBoundsRect(mask,color,findColor);
			return new lime_math_Rectangle(rect.x,rect.y,rect.width,rect.height);
		default:
			return null;
		}
	}
	,getPixel: function(x,y,format) {
		if(this.buffer == null || x < 0 || y < 0 || x >= this.width || y >= this.height) {
			return 0;
		}
		switch(this.type[1]) {
		case 0:
			return lime_graphics_utils_ImageCanvasUtil.getPixel(this,x,y,format);
		case 1:
			lime_graphics_utils_ImageCanvasUtil.convertToData(this);
			return lime_graphics_utils_ImageDataUtil.getPixel(this,x,y,format);
		case 2:
			var color = this.buffer.__srcBitmapData.getPixel(x + this.offsetX,y + this.offsetY);
			if(format == null) {
				var rgba = 0;
				rgba = (color >>> 16 & 255 & 255) << 24 | (color >>> 8 & 255 & 255) << 16 | (color & 255 & 255) << 8 | color >>> 24 & 255 & 255;
				return rgba;
			} else {
				switch(format) {
				case 1:
					return color;
				case 2:
					var bgra = 0;
					bgra = (color & 255 & 255) << 24 | (color >>> 8 & 255 & 255) << 16 | (color >>> 16 & 255 & 255) << 8 | color >>> 24 & 255 & 255;
					return bgra;
				default:
					var rgba1 = 0;
					rgba1 = (color >>> 16 & 255 & 255) << 24 | (color >>> 8 & 255 & 255) << 16 | (color & 255 & 255) << 8 | color >>> 24 & 255 & 255;
					return rgba1;
				}
			}
			break;
		default:
			return 0;
		}
	}
	,getPixel32: function(x,y,format) {
		if(this.buffer == null || x < 0 || y < 0 || x >= this.width || y >= this.height) {
			return 0;
		}
		switch(this.type[1]) {
		case 0:
			return lime_graphics_utils_ImageCanvasUtil.getPixel32(this,x,y,format);
		case 1:
			lime_graphics_utils_ImageCanvasUtil.convertToData(this);
			return lime_graphics_utils_ImageDataUtil.getPixel32(this,x,y,format);
		case 2:
			var color = this.buffer.__srcBitmapData.getPixel32(x + this.offsetX,y + this.offsetY);
			if(format == null) {
				var rgba = 0;
				rgba = (color >>> 16 & 255 & 255) << 24 | (color >>> 8 & 255 & 255) << 16 | (color & 255 & 255) << 8 | color >>> 24 & 255 & 255;
				return rgba;
			} else {
				switch(format) {
				case 1:
					return color;
				case 2:
					var bgra = 0;
					bgra = (color & 255 & 255) << 24 | (color >>> 8 & 255 & 255) << 16 | (color >>> 16 & 255 & 255) << 8 | color >>> 24 & 255 & 255;
					return bgra;
				default:
					var rgba1 = 0;
					rgba1 = (color >>> 16 & 255 & 255) << 24 | (color >>> 8 & 255 & 255) << 16 | (color & 255 & 255) << 8 | color >>> 24 & 255 & 255;
					return rgba1;
				}
			}
			break;
		default:
			return 0;
		}
	}
	,getPixels: function(rect,format) {
		if(this.buffer == null) {
			return null;
		}
		switch(this.type[1]) {
		case 0:
			return lime_graphics_utils_ImageCanvasUtil.getPixels(this,rect,format);
		case 1:
			lime_graphics_utils_ImageCanvasUtil.convertToData(this);
			return lime_graphics_utils_ImageDataUtil.getPixels(this,rect,format);
		case 2:
			return null;
		default:
			return null;
		}
	}
	,merge: function(sourceImage,sourceRect,destPoint,redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier) {
		if(this.buffer == null || sourceImage == null) {
			return;
		}
		switch(this.type[1]) {
		case 0:
			lime_graphics_utils_ImageCanvasUtil.convertToCanvas(this);
			lime_graphics_utils_ImageCanvasUtil.merge(this,sourceImage,sourceRect,destPoint,redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier);
			break;
		case 1:
			lime_graphics_utils_ImageCanvasUtil.convertToData(this);
			lime_graphics_utils_ImageCanvasUtil.convertToData(sourceImage);
			lime_graphics_utils_ImageDataUtil.merge(this,sourceImage,sourceRect,destPoint,redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier);
			break;
		case 2:
			sourceRect.offset(this.offsetX,this.offsetY);
			this.buffer.__srcBitmapData.merge(sourceImage.buffer.__srcBitmapData,sourceRect.__toFlashRectangle(),destPoint.__toFlashPoint(),redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier);
			break;
		default:
			return;
		}
	}
	,resize: function(newWidth,newHeight) {
		switch(this.type[1]) {
		case 0:
			lime_graphics_utils_ImageCanvasUtil.resize(this,newWidth,newHeight);
			break;
		case 1:
			lime_graphics_utils_ImageDataUtil.resize(this,newWidth,newHeight);
			break;
		case 2:
			break;
		default:
		}
		this.buffer.width = newWidth;
		this.buffer.height = newHeight;
		this.offsetX = 0;
		this.offsetY = 0;
		this.width = newWidth;
		this.height = newHeight;
	}
	,scroll: function(x,y) {
		if(this.buffer == null) {
			return;
		}
		switch(this.type[1]) {
		case 0:
			lime_graphics_utils_ImageCanvasUtil.scroll(this,x,y);
			break;
		case 1:
			this.copyPixels(this,this.get_rect(),new lime_math_Vector2(x,y));
			break;
		case 2:
			this.buffer.__srcBitmapData.scroll(x + this.offsetX,y + this.offsetX);
			break;
		default:
		}
	}
	,setPixel: function(x,y,color,format) {
		if(this.buffer == null || x < 0 || y < 0 || x >= this.width || y >= this.height) {
			return;
		}
		switch(this.type[1]) {
		case 0:
			lime_graphics_utils_ImageCanvasUtil.setPixel(this,x,y,color,format);
			break;
		case 1:
			lime_graphics_utils_ImageCanvasUtil.convertToData(this);
			lime_graphics_utils_ImageDataUtil.setPixel(this,x,y,color,format);
			break;
		case 2:
			var argb;
			if(format == null) {
				var rgba = color;
				var argb1 = 0;
				argb1 = (rgba & 255 & 255) << 24 | (rgba >>> 24 & 255 & 255) << 16 | (rgba >>> 16 & 255 & 255) << 8 | rgba >>> 8 & 255 & 255;
				argb = argb1;
			} else {
				switch(format) {
				case 1:
					argb = color;
					break;
				case 2:
					var bgra = color;
					var argb2 = 0;
					argb2 = (bgra & 255 & 255) << 24 | (bgra >>> 8 & 255 & 255) << 16 | (bgra >>> 16 & 255 & 255) << 8 | bgra >>> 24 & 255 & 255;
					argb = argb2;
					break;
				default:
					var rgba1 = color;
					var argb3 = 0;
					argb3 = (rgba1 & 255 & 255) << 24 | (rgba1 >>> 24 & 255 & 255) << 16 | (rgba1 >>> 16 & 255 & 255) << 8 | rgba1 >>> 8 & 255 & 255;
					argb = argb3;
				}
			}
			this.buffer.__srcBitmapData.setPixel(x + this.offsetX,y + this.offsetX,argb);
			break;
		default:
		}
	}
	,setPixel32: function(x,y,color,format) {
		if(this.buffer == null || x < 0 || y < 0 || x >= this.width || y >= this.height) {
			return;
		}
		switch(this.type[1]) {
		case 0:
			lime_graphics_utils_ImageCanvasUtil.setPixel32(this,x,y,color,format);
			break;
		case 1:
			lime_graphics_utils_ImageCanvasUtil.convertToData(this);
			lime_graphics_utils_ImageDataUtil.setPixel32(this,x,y,color,format);
			break;
		case 2:
			var argb;
			if(format == null) {
				var rgba = color;
				var argb1 = 0;
				argb1 = (rgba & 255 & 255) << 24 | (rgba >>> 24 & 255 & 255) << 16 | (rgba >>> 16 & 255 & 255) << 8 | rgba >>> 8 & 255 & 255;
				argb = argb1;
			} else {
				switch(format) {
				case 1:
					argb = color;
					break;
				case 2:
					var bgra = color;
					var argb2 = 0;
					argb2 = (bgra & 255 & 255) << 24 | (bgra >>> 8 & 255 & 255) << 16 | (bgra >>> 16 & 255 & 255) << 8 | bgra >>> 24 & 255 & 255;
					argb = argb2;
					break;
				default:
					var rgba1 = color;
					var argb3 = 0;
					argb3 = (rgba1 & 255 & 255) << 24 | (rgba1 >>> 24 & 255 & 255) << 16 | (rgba1 >>> 16 & 255 & 255) << 8 | rgba1 >>> 8 & 255 & 255;
					argb = argb3;
				}
			}
			this.buffer.__srcBitmapData.setPixel32(x + this.offsetX,y + this.offsetY,argb);
			break;
		default:
		}
	}
	,setPixels: function(rect,bytes,format) {
		rect = this.__clipRect(rect);
		if(this.buffer == null || rect == null) {
			return;
		}
		switch(this.type[1]) {
		case 0:
			lime_graphics_utils_ImageCanvasUtil.setPixels(this,rect,bytes,format);
			break;
		case 1:
			lime_graphics_utils_ImageCanvasUtil.convertToData(this);
			lime_graphics_utils_ImageDataUtil.setPixels(this,rect,bytes,format);
			break;
		case 2:
			break;
		default:
		}
	}
	,threshold: function(sourceImage,sourceRect,destPoint,operation,threshold,color,mask,copySource,format) {
		if(copySource == null) {
			copySource = false;
		}
		if(mask == null) {
			mask = -1;
		}
		if(color == null) {
			color = 0;
		}
		if(this.buffer == null || sourceImage == null || sourceRect == null) {
			return 0;
		}
		switch(this.type[1]) {
		case 0:case 1:
			lime_graphics_utils_ImageCanvasUtil.convertToData(this);
			return lime_graphics_utils_ImageDataUtil.threshold(this,sourceImage,sourceRect,destPoint,operation,threshold,color,mask,copySource,format);
		case 2:
			var _color;
			if(format == null) {
				var rgba = color;
				var argb = 0;
				argb = (rgba & 255 & 255) << 24 | (rgba >>> 24 & 255 & 255) << 16 | (rgba >>> 16 & 255 & 255) << 8 | rgba >>> 8 & 255 & 255;
				_color = argb;
			} else {
				switch(format) {
				case 1:
					_color = color;
					break;
				case 2:
					var bgra = color;
					var argb1 = 0;
					argb1 = (bgra & 255 & 255) << 24 | (bgra >>> 8 & 255 & 255) << 16 | (bgra >>> 16 & 255 & 255) << 8 | bgra >>> 24 & 255 & 255;
					_color = argb1;
					break;
				default:
					var rgba1 = color;
					var argb2 = 0;
					argb2 = (rgba1 & 255 & 255) << 24 | (rgba1 >>> 24 & 255 & 255) << 16 | (rgba1 >>> 16 & 255 & 255) << 8 | rgba1 >>> 8 & 255 & 255;
					_color = argb2;
				}
			}
			var _mask;
			if(format == null) {
				var rgba2 = mask;
				var argb3 = 0;
				argb3 = (rgba2 & 255 & 255) << 24 | (rgba2 >>> 24 & 255 & 255) << 16 | (rgba2 >>> 16 & 255 & 255) << 8 | rgba2 >>> 8 & 255 & 255;
				_mask = argb3;
			} else {
				switch(format) {
				case 1:
					_mask = mask;
					break;
				case 2:
					var bgra1 = mask;
					var argb4 = 0;
					argb4 = (bgra1 & 255 & 255) << 24 | (bgra1 >>> 8 & 255 & 255) << 16 | (bgra1 >>> 16 & 255 & 255) << 8 | bgra1 >>> 24 & 255 & 255;
					_mask = argb4;
					break;
				default:
					var rgba3 = mask;
					var argb5 = 0;
					argb5 = (rgba3 & 255 & 255) << 24 | (rgba3 >>> 24 & 255 & 255) << 16 | (rgba3 >>> 16 & 255 & 255) << 8 | rgba3 >>> 8 & 255 & 255;
					_mask = argb5;
				}
			}
			sourceRect.offset(sourceImage.offsetX,sourceImage.offsetY);
			destPoint.offset(this.offsetX,this.offsetY);
			return this.buffer.__srcBitmapData.threshold(sourceImage.buffer.get_src(),sourceRect.__toFlashRectangle(),destPoint.__toFlashPoint(),operation,threshold,_color,_mask,copySource);
		default:
		}
		return 0;
	}
	,__clipRect: function(r) {
		if(r == null) {
			return null;
		}
		if(r.x < 0) {
			r.width -= -r.x;
			r.x = 0;
			if(r.x + r.width <= 0) {
				return null;
			}
		}
		if(r.y < 0) {
			r.height -= -r.y;
			r.y = 0;
			if(r.y + r.height <= 0) {
				return null;
			}
		}
		if(r.x + r.width >= this.width) {
			r.width -= r.x + r.width - this.width;
			if(r.width <= 0) {
				return null;
			}
		}
		if(r.y + r.height >= this.height) {
			r.height -= r.y + r.height - this.height;
			if(r.height <= 0) {
				return null;
			}
		}
		return r;
	}
	,__fromBase64: function(base64,type,onload) {
		var _gthis = this;
		var image = new Image();
		var image_onLoaded = function(event) {
			_gthis.buffer = new lime_graphics_ImageBuffer(null,image.width,image.height);
			_gthis.buffer.__srcImage = image;
			_gthis.offsetX = 0;
			_gthis.offsetY = 0;
			_gthis.width = _gthis.buffer.width;
			_gthis.height = _gthis.buffer.height;
			if(onload != null) {
				onload(_gthis);
			}
		};
		image.addEventListener("load",image_onLoaded,false);
		image.src = "data:" + type + ";base64," + base64;
	}
	,__fromBytes: function(bytes,onload) {
		var type = "";
		if(lime_graphics_Image.__isPNG(bytes)) {
			type = "image/png";
		} else if(lime_graphics_Image.__isJPG(bytes)) {
			type = "image/jpeg";
		} else if(lime_graphics_Image.__isGIF(bytes)) {
			type = "image/gif";
		} else {
			throw new js__$Boot_HaxeError("Image tried to read PNG/JPG Bytes, but found an invalid header.");
		}
		this.__fromBase64(lime_graphics_Image.__base64Encode(bytes),type,onload);
	}
	,__fromFile: function(path,onload,onerror) {
		var _gthis = this;
		var image = new Image();
		image.crossOrigin = "Anonymous";
		image.onload = function(_) {
			_gthis.buffer = new lime_graphics_ImageBuffer(null,image.width,image.height);
			_gthis.buffer.__srcImage = image;
			_gthis.width = image.width;
			_gthis.height = image.height;
			if(onload != null) {
				onload(_gthis);
			}
		};
		image.onerror = function(_1) {
			if(onerror != null) {
				onerror();
			}
		};
		image.src = path;
	}
	,__fromImageBuffer: function(buffer) {
		this.buffer = buffer;
		if(buffer != null) {
			if(this.width == -1) {
				this.width = buffer.width;
			}
			if(this.height == -1) {
				this.height = buffer.height;
			}
		}
	}
	,get_data: function() {
		if(this.buffer.data == null && this.buffer.width > 0 && this.buffer.height > 0) {
			lime_graphics_utils_ImageCanvasUtil.convertToData(this);
		}
		return this.buffer.data;
	}
	,set_data: function(value) {
		return this.buffer.data = value;
	}
	,get_format: function() {
		return this.buffer.format;
	}
	,set_format: function(value) {
		if(this.buffer.format != value) {
			if(this.type[1] == 1) {
				lime_graphics_utils_ImageDataUtil.setFormat(this,value);
			}
		}
		return this.buffer.format = value;
	}
	,get_powerOfTwo: function() {
		if(this.buffer.width != 0 && (this.buffer.width & ~this.buffer.width + 1) == this.buffer.width) {
			if(this.buffer.height != 0) {
				return (this.buffer.height & ~this.buffer.height + 1) == this.buffer.height;
			} else {
				return false;
			}
		} else {
			return false;
		}
	}
	,set_powerOfTwo: function(value) {
		if(value != this.get_powerOfTwo()) {
			var newWidth = 1;
			var newHeight = 1;
			while(newWidth < this.buffer.width) newWidth <<= 1;
			while(newHeight < this.buffer.height) newHeight <<= 1;
			switch(this.type[1]) {
			case 0:
				break;
			case 1:
				lime_graphics_utils_ImageDataUtil.resizeBuffer(this,newWidth,newHeight);
				break;
			case 2:
				break;
			default:
			}
		}
		return value;
	}
	,get_premultiplied: function() {
		return this.buffer.premultiplied;
	}
	,set_premultiplied: function(value) {
		if(value && !this.buffer.premultiplied) {
			switch(this.type[1]) {
			case 0:case 1:
				lime_graphics_utils_ImageCanvasUtil.convertToData(this);
				lime_graphics_utils_ImageDataUtil.multiplyAlpha(this);
				break;
			default:
			}
		} else if(!value && this.buffer.premultiplied) {
			if(this.type[1] == 1) {
				lime_graphics_utils_ImageCanvasUtil.convertToData(this);
				lime_graphics_utils_ImageDataUtil.unmultiplyAlpha(this);
			}
		}
		return value;
	}
	,get_rect: function() {
		return new lime_math_Rectangle(0,0,this.width,this.height);
	}
	,get_src: function() {
		if(this.buffer.__srcCanvas == null) {
			lime_graphics_utils_ImageCanvasUtil.convertToCanvas(this);
		}
		return this.buffer.get_src();
	}
	,set_src: function(value) {
		return this.buffer.set_src(value);
	}
	,get_transparent: function() {
		if(this.buffer == null) {
			return false;
		}
		return this.buffer.transparent;
	}
	,set_transparent: function(value) {
		if(this.buffer == null) {
			return false;
		}
		return this.buffer.transparent = value;
	}
	,__class__: lime_graphics_Image
	,__properties__: {set_transparent:"set_transparent",get_transparent:"get_transparent",set_src:"set_src",get_src:"get_src",get_rect:"get_rect",set_premultiplied:"set_premultiplied",get_premultiplied:"get_premultiplied",set_powerOfTwo:"set_powerOfTwo",get_powerOfTwo:"get_powerOfTwo",set_format:"set_format",get_format:"get_format",set_data:"set_data",get_data:"get_data"}
};
var lime_graphics_ImageBuffer = function(data,width,height,bitsPerPixel,format) {
	if(bitsPerPixel == null) {
		bitsPerPixel = 32;
	}
	if(height == null) {
		height = 0;
	}
	if(width == null) {
		width = 0;
	}
	this.data = data;
	this.width = width;
	this.height = height;
	this.bitsPerPixel = bitsPerPixel;
	this.format = format == null ? 0 : format;
	this.premultiplied = false;
	this.transparent = true;
};
$hxClasses["lime.graphics.ImageBuffer"] = lime_graphics_ImageBuffer;
lime_graphics_ImageBuffer.__name__ = ["lime","graphics","ImageBuffer"];
lime_graphics_ImageBuffer.prototype = {
	bitsPerPixel: null
	,data: null
	,format: null
	,height: null
	,premultiplied: null
	,transparent: null
	,width: null
	,__srcBitmapData: null
	,__srcCanvas: null
	,__srcContext: null
	,__srcCustom: null
	,__srcImage: null
	,__srcImageData: null
	,clone: function() {
		var buffer = new lime_graphics_ImageBuffer(this.data,this.width,this.height,this.bitsPerPixel);
		if(this.data != null) {
			var elements = this.data.byteLength;
			var this1;
			if(elements != null) {
				this1 = new Uint8Array(elements);
			} else {
				this1 = null;
			}
			buffer.data = this1;
			var view = this.data;
			var this2;
			if(view != null) {
				this2 = new Uint8Array(view);
			} else {
				this2 = null;
			}
			buffer.data.set(this2);
		} else if(this.__srcImageData != null) {
			buffer.__srcCanvas = window.document.createElement("canvas");
			buffer.__srcContext = buffer.__srcCanvas.getContext("2d");
			buffer.__srcCanvas.width = this.__srcImageData.width;
			buffer.__srcCanvas.height = this.__srcImageData.height;
			buffer.__srcImageData = buffer.__srcContext.createImageData(this.__srcImageData.width,this.__srcImageData.height);
			var copy = new Uint8ClampedArray(this.__srcImageData.data);
			buffer.__srcImageData.data.set(copy);
		} else if(this.__srcCanvas != null) {
			buffer.__srcCanvas = window.document.createElement("canvas");
			buffer.__srcContext = buffer.__srcCanvas.getContext("2d");
			buffer.__srcCanvas.width = this.__srcCanvas.width;
			buffer.__srcCanvas.height = this.__srcCanvas.height;
			buffer.__srcContext.drawImage(this.__srcCanvas,0,0);
		} else {
			buffer.__srcImage = this.__srcImage;
		}
		buffer.bitsPerPixel = this.bitsPerPixel;
		buffer.format = this.format;
		buffer.premultiplied = this.premultiplied;
		buffer.transparent = this.transparent;
		return buffer;
	}
	,get_src: function() {
		if(this.__srcImage != null) {
			return this.__srcImage;
		}
		return this.__srcCanvas;
	}
	,set_src: function(value) {
		if(js_Boot.__instanceof(value,Image)) {
			this.__srcImage = value;
		} else if(js_Boot.__instanceof(value,HTMLCanvasElement)) {
			this.__srcCanvas = value;
			this.__srcContext = this.__srcCanvas.getContext("2d");
		}
		return value;
	}
	,get_stride: function() {
		return this.width * 4;
	}
	,__class__: lime_graphics_ImageBuffer
	,__properties__: {get_stride:"get_stride",set_src:"set_src",get_src:"get_src"}
};
var lime_graphics_ImageChannel = $hxClasses["lime.graphics.ImageChannel"] = { __ename__ : ["lime","graphics","ImageChannel"], __constructs__ : ["RED","GREEN","BLUE","ALPHA"] };
lime_graphics_ImageChannel.RED = ["RED",0];
lime_graphics_ImageChannel.RED.toString = $estr;
lime_graphics_ImageChannel.RED.__enum__ = lime_graphics_ImageChannel;
lime_graphics_ImageChannel.GREEN = ["GREEN",1];
lime_graphics_ImageChannel.GREEN.toString = $estr;
lime_graphics_ImageChannel.GREEN.__enum__ = lime_graphics_ImageChannel;
lime_graphics_ImageChannel.BLUE = ["BLUE",2];
lime_graphics_ImageChannel.BLUE.toString = $estr;
lime_graphics_ImageChannel.BLUE.__enum__ = lime_graphics_ImageChannel;
lime_graphics_ImageChannel.ALPHA = ["ALPHA",3];
lime_graphics_ImageChannel.ALPHA.toString = $estr;
lime_graphics_ImageChannel.ALPHA.__enum__ = lime_graphics_ImageChannel;
lime_graphics_ImageChannel.__empty_constructs__ = [lime_graphics_ImageChannel.RED,lime_graphics_ImageChannel.GREEN,lime_graphics_ImageChannel.BLUE,lime_graphics_ImageChannel.ALPHA];
var lime_graphics_ImageType = $hxClasses["lime.graphics.ImageType"] = { __ename__ : ["lime","graphics","ImageType"], __constructs__ : ["CANVAS","DATA","FLASH","CUSTOM"] };
lime_graphics_ImageType.CANVAS = ["CANVAS",0];
lime_graphics_ImageType.CANVAS.toString = $estr;
lime_graphics_ImageType.CANVAS.__enum__ = lime_graphics_ImageType;
lime_graphics_ImageType.DATA = ["DATA",1];
lime_graphics_ImageType.DATA.toString = $estr;
lime_graphics_ImageType.DATA.__enum__ = lime_graphics_ImageType;
lime_graphics_ImageType.FLASH = ["FLASH",2];
lime_graphics_ImageType.FLASH.toString = $estr;
lime_graphics_ImageType.FLASH.__enum__ = lime_graphics_ImageType;
lime_graphics_ImageType.CUSTOM = ["CUSTOM",3];
lime_graphics_ImageType.CUSTOM.toString = $estr;
lime_graphics_ImageType.CUSTOM.__enum__ = lime_graphics_ImageType;
lime_graphics_ImageType.__empty_constructs__ = [lime_graphics_ImageType.CANVAS,lime_graphics_ImageType.DATA,lime_graphics_ImageType.FLASH,lime_graphics_ImageType.CUSTOM];
var lime_graphics_RenderContext = $hxClasses["lime.graphics.RenderContext"] = { __ename__ : ["lime","graphics","RenderContext"], __constructs__ : ["OPENGL","CANVAS","DOM","FLASH","CAIRO","CONSOLE","CUSTOM","NONE"] };
lime_graphics_RenderContext.OPENGL = function(gl) { var $x = ["OPENGL",0,gl]; $x.__enum__ = lime_graphics_RenderContext; $x.toString = $estr; return $x; };
lime_graphics_RenderContext.CANVAS = function(context) { var $x = ["CANVAS",1,context]; $x.__enum__ = lime_graphics_RenderContext; $x.toString = $estr; return $x; };
lime_graphics_RenderContext.DOM = function(element) { var $x = ["DOM",2,element]; $x.__enum__ = lime_graphics_RenderContext; $x.toString = $estr; return $x; };
lime_graphics_RenderContext.FLASH = function(stage) { var $x = ["FLASH",3,stage]; $x.__enum__ = lime_graphics_RenderContext; $x.toString = $estr; return $x; };
lime_graphics_RenderContext.CAIRO = function(cairo) { var $x = ["CAIRO",4,cairo]; $x.__enum__ = lime_graphics_RenderContext; $x.toString = $estr; return $x; };
lime_graphics_RenderContext.CONSOLE = function(context) { var $x = ["CONSOLE",5,context]; $x.__enum__ = lime_graphics_RenderContext; $x.toString = $estr; return $x; };
lime_graphics_RenderContext.CUSTOM = function(data) { var $x = ["CUSTOM",6,data]; $x.__enum__ = lime_graphics_RenderContext; $x.toString = $estr; return $x; };
lime_graphics_RenderContext.NONE = ["NONE",7];
lime_graphics_RenderContext.NONE.toString = $estr;
lime_graphics_RenderContext.NONE.__enum__ = lime_graphics_RenderContext;
lime_graphics_RenderContext.__empty_constructs__ = [lime_graphics_RenderContext.NONE];
var lime_graphics_Renderer = function(window) {
	this.onRender = new lime_app__$Event_$Void_$Void();
	this.onContextRestored = new lime_app__$Event_$lime_$graphics_$RenderContext_$Void();
	this.onContextLost = new lime_app__$Event_$Void_$Void();
	this.window = window;
	this.backend = new lime__$backend_html5_HTML5Renderer(this);
	this.window.renderer = this;
};
$hxClasses["lime.graphics.Renderer"] = lime_graphics_Renderer;
lime_graphics_Renderer.__name__ = ["lime","graphics","Renderer"];
lime_graphics_Renderer.prototype = {
	context: null
	,onContextLost: null
	,onContextRestored: null
	,onRender: null
	,type: null
	,window: null
	,backend: null
	,create: function() {
		this.backend.create();
	}
	,flip: function() {
	}
	,readPixels: function(rect) {
		return this.backend.readPixels(rect);
	}
	,render: function() {
	}
	,__class__: lime_graphics_Renderer
};
var lime_graphics_RendererType = $hxClasses["lime.graphics.RendererType"] = { __ename__ : ["lime","graphics","RendererType"], __constructs__ : ["OPENGL","CANVAS","DOM","FLASH","CAIRO","CONSOLE","CUSTOM"] };
lime_graphics_RendererType.OPENGL = ["OPENGL",0];
lime_graphics_RendererType.OPENGL.toString = $estr;
lime_graphics_RendererType.OPENGL.__enum__ = lime_graphics_RendererType;
lime_graphics_RendererType.CANVAS = ["CANVAS",1];
lime_graphics_RendererType.CANVAS.toString = $estr;
lime_graphics_RendererType.CANVAS.__enum__ = lime_graphics_RendererType;
lime_graphics_RendererType.DOM = ["DOM",2];
lime_graphics_RendererType.DOM.toString = $estr;
lime_graphics_RendererType.DOM.__enum__ = lime_graphics_RendererType;
lime_graphics_RendererType.FLASH = ["FLASH",3];
lime_graphics_RendererType.FLASH.toString = $estr;
lime_graphics_RendererType.FLASH.__enum__ = lime_graphics_RendererType;
lime_graphics_RendererType.CAIRO = ["CAIRO",4];
lime_graphics_RendererType.CAIRO.toString = $estr;
lime_graphics_RendererType.CAIRO.__enum__ = lime_graphics_RendererType;
lime_graphics_RendererType.CONSOLE = ["CONSOLE",5];
lime_graphics_RendererType.CONSOLE.toString = $estr;
lime_graphics_RendererType.CONSOLE.__enum__ = lime_graphics_RendererType;
lime_graphics_RendererType.CUSTOM = ["CUSTOM",6];
lime_graphics_RendererType.CUSTOM.toString = $estr;
lime_graphics_RendererType.CUSTOM.__enum__ = lime_graphics_RendererType;
lime_graphics_RendererType.__empty_constructs__ = [lime_graphics_RendererType.OPENGL,lime_graphics_RendererType.CANVAS,lime_graphics_RendererType.DOM,lime_graphics_RendererType.FLASH,lime_graphics_RendererType.CAIRO,lime_graphics_RendererType.CONSOLE,lime_graphics_RendererType.CUSTOM];
var lime_graphics_cairo_Cairo = function(surface) {
};
$hxClasses["lime.graphics.cairo.Cairo"] = lime_graphics_cairo_Cairo;
lime_graphics_cairo_Cairo.__name__ = ["lime","graphics","cairo","Cairo"];
lime_graphics_cairo_Cairo.__properties__ = {get_versionString:"get_versionString",get_version:"get_version"}
lime_graphics_cairo_Cairo.get_version = function() {
	return 0;
};
lime_graphics_cairo_Cairo.get_versionString = function() {
	return "";
};
lime_graphics_cairo_Cairo.prototype = {
	target: null
	,userData: null
	,handle: null
	,arc: function(xc,yc,radius,angle1,angle2) {
	}
	,arcNegative: function(xc,yc,radius,angle1,angle2) {
	}
	,clip: function() {
	}
	,clipExtents: function(x1,y1,x2,y2) {
	}
	,clipPreserve: function() {
	}
	,closePath: function() {
	}
	,copyPage: function() {
	}
	,curveTo: function(x1,y1,x2,y2,x3,y3) {
	}
	,fill: function() {
	}
	,fillExtents: function(x1,y1,x2,y2) {
	}
	,fillPreserve: function() {
	}
	,identityMatrix: function() {
	}
	,inClip: function(x,y) {
		return false;
	}
	,inFill: function(x,y) {
		return false;
	}
	,inStroke: function(x,y) {
		return false;
	}
	,lineTo: function(x,y) {
	}
	,moveTo: function(x,y) {
	}
	,mask: function(pattern) {
	}
	,maskSurface: function(surface,x,y) {
	}
	,newPath: function() {
	}
	,paint: function() {
	}
	,paintWithAlpha: function(alpha) {
	}
	,popGroup: function() {
		return null;
	}
	,popGroupToSource: function() {
	}
	,pushGroup: function() {
	}
	,pushGroupWithContent: function(content) {
	}
	,recreate: function(surface) {
	}
	,rectangle: function(x,y,width,height) {
	}
	,relCurveTo: function(dx1,dy1,dx2,dy2,dx3,dy3) {
	}
	,relLineTo: function(dx,dy) {
	}
	,relMoveTo: function(dx,dy) {
	}
	,resetClip: function() {
	}
	,restore: function() {
	}
	,save: function() {
	}
	,setFontSize: function(size) {
	}
	,setSourceRGB: function(r,g,b) {
	}
	,setSourceRGBA: function(r,g,b,a) {
	}
	,setSourceSurface: function(surface,x,y) {
	}
	,showGlyphs: function(glyphs) {
	}
	,showPage: function() {
	}
	,showText: function(utf8) {
	}
	,status: function() {
		return 0;
	}
	,stroke: function() {
	}
	,strokeExtents: function(x1,y1,x2,y2) {
	}
	,strokePreserve: function() {
	}
	,transform: function(matrix) {
	}
	,rotate: function(amount) {
	}
	,scale: function(x,y) {
	}
	,translate: function(x,y) {
	}
	,get_antialias: function() {
		return 0;
	}
	,set_antialias: function(value) {
		return value;
	}
	,get_currentPoint: function() {
		return null;
	}
	,get_dash: function() {
		return [];
	}
	,set_dash: function(value) {
		return value;
	}
	,get_dashCount: function() {
		return 0;
	}
	,get_fillRule: function() {
		return 0;
	}
	,set_fillRule: function(value) {
		return value;
	}
	,get_fontFace: function() {
		return 0;
	}
	,set_fontFace: function(value) {
		return value;
	}
	,get_fontOptions: function() {
		return null;
	}
	,set_fontOptions: function(value) {
		return value;
	}
	,get_groupTarget: function() {
		return 0;
	}
	,get_hasCurrentPoint: function() {
		return false;
	}
	,get_lineCap: function() {
		return 0;
	}
	,set_lineCap: function(value) {
		return value;
	}
	,get_lineJoin: function() {
		return 0;
	}
	,set_lineJoin: function(value) {
		return value;
	}
	,get_lineWidth: function() {
		return 0;
	}
	,set_lineWidth: function(value) {
		return value;
	}
	,get_matrix: function() {
		return null;
	}
	,set_matrix: function(value) {
		return value;
	}
	,get_miterLimit: function() {
		return 0;
	}
	,set_miterLimit: function(value) {
		return value;
	}
	,get_operator: function() {
		return 0;
	}
	,set_operator: function(value) {
		return value;
	}
	,get_source: function() {
		return 0;
	}
	,set_source: function(value) {
		return value;
	}
	,get_target: function() {
		return 0;
	}
	,get_tolerance: function() {
		return 0;
	}
	,set_tolerance: function(value) {
		return value;
	}
	,__class__: lime_graphics_cairo_Cairo
	,__properties__: {set_tolerance:"set_tolerance",get_tolerance:"get_tolerance",get_target:"get_target",set_source:"set_source",get_source:"get_source",set_operator:"set_operator",get_operator:"get_operator",set_miterLimit:"set_miterLimit",get_miterLimit:"get_miterLimit",set_matrix:"set_matrix",get_matrix:"get_matrix",set_lineWidth:"set_lineWidth",get_lineWidth:"get_lineWidth",set_lineJoin:"set_lineJoin",get_lineJoin:"get_lineJoin",set_lineCap:"set_lineCap",get_lineCap:"get_lineCap",get_hasCurrentPoint:"get_hasCurrentPoint",get_groupTarget:"get_groupTarget",set_fontOptions:"set_fontOptions",get_fontOptions:"get_fontOptions",set_fontFace:"set_fontFace",get_fontFace:"get_fontFace",set_fillRule:"set_fillRule",get_fillRule:"get_fillRule",get_dashCount:"get_dashCount",set_dash:"set_dash",get_dash:"get_dash",get_currentPoint:"get_currentPoint",set_antialias:"set_antialias",get_antialias:"get_antialias"}
};
var lime_graphics_cairo__$CairoFTFontFace_CairoFTFontFace_$Impl_$ = {};
$hxClasses["lime.graphics.cairo._CairoFTFontFace.CairoFTFontFace_Impl_"] = lime_graphics_cairo__$CairoFTFontFace_CairoFTFontFace_$Impl_$;
lime_graphics_cairo__$CairoFTFontFace_CairoFTFontFace_$Impl_$.__name__ = ["lime","graphics","cairo","_CairoFTFontFace","CairoFTFontFace_Impl_"];
lime_graphics_cairo__$CairoFTFontFace_CairoFTFontFace_$Impl_$._new = function() {
	return 0;
};
lime_graphics_cairo__$CairoFTFontFace_CairoFTFontFace_$Impl_$.create = function(face,loadFlags) {
	return 0;
};
var lime_graphics_cairo__$CairoFontFace_CairoFontFace_$Impl_$ = {};
$hxClasses["lime.graphics.cairo._CairoFontFace.CairoFontFace_Impl_"] = lime_graphics_cairo__$CairoFontFace_CairoFontFace_$Impl_$;
lime_graphics_cairo__$CairoFontFace_CairoFontFace_$Impl_$.__name__ = ["lime","graphics","cairo","_CairoFontFace","CairoFontFace_Impl_"];
lime_graphics_cairo__$CairoFontFace_CairoFontFace_$Impl_$._new = function() {
	return null;
};
lime_graphics_cairo__$CairoFontFace_CairoFontFace_$Impl_$.status = function(this1) {
	return 0;
};
var lime_graphics_cairo__$CairoFontOptions_CairoFontOptions_$Impl_$ = {};
$hxClasses["lime.graphics.cairo._CairoFontOptions.CairoFontOptions_Impl_"] = lime_graphics_cairo__$CairoFontOptions_CairoFontOptions_$Impl_$;
lime_graphics_cairo__$CairoFontOptions_CairoFontOptions_$Impl_$.__name__ = ["lime","graphics","cairo","_CairoFontOptions","CairoFontOptions_Impl_"];
lime_graphics_cairo__$CairoFontOptions_CairoFontOptions_$Impl_$.__properties__ = {set_subpixelOrder:"set_subpixelOrder",get_subpixelOrder:"get_subpixelOrder",set_hintStyle:"set_hintStyle",get_hintStyle:"get_hintStyle",set_hintMetrics:"set_hintMetrics",get_hintMetrics:"get_hintMetrics",set_antialias:"set_antialias",get_antialias:"get_antialias"}
lime_graphics_cairo__$CairoFontOptions_CairoFontOptions_$Impl_$._new = function() {
	return null;
};
lime_graphics_cairo__$CairoFontOptions_CairoFontOptions_$Impl_$.get_antialias = function(this1) {
	return 0;
};
lime_graphics_cairo__$CairoFontOptions_CairoFontOptions_$Impl_$.set_antialias = function(this1,value) {
	return value;
};
lime_graphics_cairo__$CairoFontOptions_CairoFontOptions_$Impl_$.get_hintMetrics = function(this1) {
	return 0;
};
lime_graphics_cairo__$CairoFontOptions_CairoFontOptions_$Impl_$.set_hintMetrics = function(this1,value) {
	return value;
};
lime_graphics_cairo__$CairoFontOptions_CairoFontOptions_$Impl_$.get_hintStyle = function(this1) {
	return 0;
};
lime_graphics_cairo__$CairoFontOptions_CairoFontOptions_$Impl_$.set_hintStyle = function(this1,value) {
	return value;
};
lime_graphics_cairo__$CairoFontOptions_CairoFontOptions_$Impl_$.get_subpixelOrder = function(this1) {
	return 0;
};
lime_graphics_cairo__$CairoFontOptions_CairoFontOptions_$Impl_$.set_subpixelOrder = function(this1,value) {
	return value;
};
var lime_graphics_cairo_CairoGlyph = function(index,x,y) {
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.index = index;
	this.x = x;
	this.y = y;
};
$hxClasses["lime.graphics.cairo.CairoGlyph"] = lime_graphics_cairo_CairoGlyph;
lime_graphics_cairo_CairoGlyph.__name__ = ["lime","graphics","cairo","CairoGlyph"];
lime_graphics_cairo_CairoGlyph.prototype = {
	index: null
	,x: null
	,y: null
	,__class__: lime_graphics_cairo_CairoGlyph
};
var lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$ = {};
$hxClasses["lime.graphics.cairo._CairoImageSurface.CairoImageSurface_Impl_"] = lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$;
lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$.__name__ = ["lime","graphics","cairo","_CairoImageSurface","CairoImageSurface_Impl_"];
lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$.__properties__ = {get_width:"get_width",get_stride:"get_stride",get_height:"get_height",get_format:"get_format",get_data:"get_data"}
lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$._new = function(format,width,height) {
	return 0;
};
lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$.create = function(data,format,width,height,stride) {
	return 0;
};
lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$.fromImage = function(image) {
	return null;
};
lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$.get_data = function(this1) {
	return null;
};
lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$.get_format = function(this1) {
	return 0;
};
lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$.get_height = function(this1) {
	return 0;
};
lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$.get_stride = function(this1) {
	return 0;
};
lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$.get_width = function(this1) {
	return 0;
};
var lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$ = {};
$hxClasses["lime.graphics.cairo._CairoPattern.CairoPattern_Impl_"] = lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$;
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.__name__ = ["lime","graphics","cairo","_CairoPattern","CairoPattern_Impl_"];
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.__properties__ = {set_matrix:"set_matrix",get_matrix:"get_matrix",set_filter:"set_filter",get_filter:"get_filter",set_extend:"set_extend",get_extend:"get_extend",get_colorStopCount:"get_colorStopCount"}
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$._new = function(handle) {
	return handle;
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.addColorStopRGB = function(this1,offset,r,g,b) {
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.addColorStopRGBA = function(this1,offset,r,g,b,a) {
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.createForSurface = function(surface) {
	return 0;
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.createLinear = function(x0,y0,x1,y1) {
	return 0;
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.createRadial = function(cx0,cy0,radius0,cx1,cy1,radius1) {
	return 0;
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.createRGB = function(r,g,b) {
	return 0;
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.createRGBA = function(r,g,b,a) {
	return 0;
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.get_colorStopCount = function(this1) {
	return 0;
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.get_extend = function(this1) {
	return 0;
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.set_extend = function(this1,value) {
	return value;
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.get_filter = function(this1) {
	return 0;
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.set_filter = function(this1,value) {
	return value;
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.get_matrix = function(this1) {
	return null;
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.set_matrix = function(this1,value) {
	return value;
};
var lime_graphics_cairo__$CairoSurface_CairoSurface_$Impl_$ = {};
$hxClasses["lime.graphics.cairo._CairoSurface.CairoSurface_Impl_"] = lime_graphics_cairo__$CairoSurface_CairoSurface_$Impl_$;
lime_graphics_cairo__$CairoSurface_CairoSurface_$Impl_$.__name__ = ["lime","graphics","cairo","_CairoSurface","CairoSurface_Impl_"];
lime_graphics_cairo__$CairoSurface_CairoSurface_$Impl_$.flush = function(this1) {
};
var lime_graphics_console_IndexBuffer = function() {
};
$hxClasses["lime.graphics.console.IndexBuffer"] = lime_graphics_console_IndexBuffer;
lime_graphics_console_IndexBuffer.__name__ = ["lime","graphics","console","IndexBuffer"];
lime_graphics_console_IndexBuffer.prototype = {
	__class__: lime_graphics_console_IndexBuffer
};
var lime_graphics_console_Primitive = $hxClasses["lime.graphics.console.Primitive"] = { __ename__ : ["lime","graphics","console","Primitive"], __constructs__ : ["Point","Line","LineStrip","Triangle","TriangleStrip"] };
lime_graphics_console_Primitive.Point = ["Point",0];
lime_graphics_console_Primitive.Point.toString = $estr;
lime_graphics_console_Primitive.Point.__enum__ = lime_graphics_console_Primitive;
lime_graphics_console_Primitive.Line = ["Line",1];
lime_graphics_console_Primitive.Line.toString = $estr;
lime_graphics_console_Primitive.Line.__enum__ = lime_graphics_console_Primitive;
lime_graphics_console_Primitive.LineStrip = ["LineStrip",2];
lime_graphics_console_Primitive.LineStrip.toString = $estr;
lime_graphics_console_Primitive.LineStrip.__enum__ = lime_graphics_console_Primitive;
lime_graphics_console_Primitive.Triangle = ["Triangle",3];
lime_graphics_console_Primitive.Triangle.toString = $estr;
lime_graphics_console_Primitive.Triangle.__enum__ = lime_graphics_console_Primitive;
lime_graphics_console_Primitive.TriangleStrip = ["TriangleStrip",4];
lime_graphics_console_Primitive.TriangleStrip.toString = $estr;
lime_graphics_console_Primitive.TriangleStrip.__enum__ = lime_graphics_console_Primitive;
lime_graphics_console_Primitive.__empty_constructs__ = [lime_graphics_console_Primitive.Point,lime_graphics_console_Primitive.Line,lime_graphics_console_Primitive.LineStrip,lime_graphics_console_Primitive.Triangle,lime_graphics_console_Primitive.TriangleStrip];
var lime_graphics_console_Shader = function() {
};
$hxClasses["lime.graphics.console.Shader"] = lime_graphics_console_Shader;
lime_graphics_console_Shader.__name__ = ["lime","graphics","console","Shader"];
lime_graphics_console_Shader.prototype = {
	__class__: lime_graphics_console_Shader
};
var lime_graphics_console_VertexBuffer = function() {
};
$hxClasses["lime.graphics.console.VertexBuffer"] = lime_graphics_console_VertexBuffer;
lime_graphics_console_VertexBuffer.__name__ = ["lime","graphics","console","VertexBuffer"];
lime_graphics_console_VertexBuffer.prototype = {
	lock: function() {
		return new lime_graphics_console_VertexOutput();
	}
	,unlock: function() {
	}
	,__class__: lime_graphics_console_VertexBuffer
};
var lime_graphics_console_VertexOutput = function() {
};
$hxClasses["lime.graphics.console.VertexOutput"] = lime_graphics_console_VertexOutput;
lime_graphics_console_VertexOutput.__name__ = ["lime","graphics","console","VertexOutput"];
lime_graphics_console_VertexOutput.prototype = {
	vec2: function(x,y) {
	}
	,vec3: function(x,y,z) {
	}
	,color: function(r,g,b,a) {
	}
	,__class__: lime_graphics_console_VertexOutput
};
var lime_graphics_format_BMP = function() { };
$hxClasses["lime.graphics.format.BMP"] = lime_graphics_format_BMP;
lime_graphics_format_BMP.__name__ = ["lime","graphics","format","BMP"];
lime_graphics_format_BMP.encode = function(image,type) {
	if(image.get_premultiplied() || image.get_format() != 0) {
		image = image.clone();
		image.set_premultiplied(false);
		image.set_format(0);
	}
	if(type == null) {
		type = lime_graphics_format_BMPType.RGB;
	}
	var fileHeaderLength = 14;
	var infoHeaderLength = 40;
	var pixelValuesLength = image.width * image.height * 4;
	if(type != null) {
		switch(type[1]) {
		case 0:
			pixelValuesLength = image.width * 3 + image.width * 3 % 4 + image.height * 3 + image.height * 3;
			break;
		case 1:
			infoHeaderLength = 108;
			break;
		case 2:
			fileHeaderLength = 0;
			pixelValuesLength += image.width * image.height;
			break;
		}
	}
	var data = new haxe_io_Bytes(new ArrayBuffer(fileHeaderLength + infoHeaderLength + pixelValuesLength));
	var position = 0;
	if(fileHeaderLength > 0) {
		position = 1;
		data.b[0] = 66;
		position = 2;
		data.b[1] = 77;
		data.setInt32(2,data.length);
		position = 6;
		data.setUInt16(6,0);
		position = 8;
		data.setUInt16(8,0);
		position = 10;
		data.setInt32(10,fileHeaderLength + infoHeaderLength);
		position = 14;
	}
	data.setInt32(position,infoHeaderLength);
	position += 4;
	data.setInt32(position,image.width);
	position += 4;
	data.setInt32(position,type == lime_graphics_format_BMPType.ICO ? image.height * 2 : image.height);
	position += 4;
	data.setUInt16(position,1);
	position += 2;
	data.setUInt16(position,type == lime_graphics_format_BMPType.RGB ? 24 : 32);
	position += 2;
	data.setInt32(position,type == lime_graphics_format_BMPType.BITFIELD ? 3 : 0);
	position += 4;
	data.setInt32(position,pixelValuesLength);
	position += 4;
	data.setInt32(position,11824);
	position += 4;
	data.setInt32(position,11824);
	position += 4;
	data.setInt32(position,0);
	position += 4;
	data.setInt32(position,0);
	position += 4;
	if(type == lime_graphics_format_BMPType.BITFIELD) {
		data.setInt32(position,16711680);
		position += 4;
		data.setInt32(position,65280);
		position += 4;
		data.setInt32(position,255);
		position += 4;
		data.setInt32(position,-16777216);
		position += 4;
		data.b[position++] = 32;
		data.b[position++] = 110;
		data.b[position++] = 105;
		data.b[position++] = 87;
		var _g = 0;
		while(_g < 48) {
			++_g;
			data.b[position++] = 0;
		}
	}
	var pixels = image.getPixels(new lime_math_Rectangle(0,0,image.width,image.height),1);
	var readPosition = 0;
	var a;
	var r;
	var g;
	var b;
	if(type != null) {
		switch(type[1]) {
		case 0:
			var _g1 = 0;
			var _g2 = image.height;
			while(_g1 < _g2) {
				readPosition = (image.height - 1 - _g1++) * 4 * image.width;
				var _g3 = 0;
				var _g21 = image.width;
				while(_g3 < _g21) {
					++_g3;
					++readPosition;
					r = pixels.b[readPosition++];
					g = pixels.b[readPosition++];
					b = pixels.b[readPosition++];
					data.b[position++] = b & 255;
					data.b[position++] = g & 255;
					data.b[position++] = r & 255;
				}
				var _g31 = 0;
				var _g22 = image.width * 3 % 4;
				while(_g31 < _g22) {
					++_g31;
					data.b[position++] = 0;
				}
			}
			break;
		case 1:
			var _g11 = 0;
			var _g4 = image.height;
			while(_g11 < _g4) {
				readPosition = (image.height - 1 - _g11++) * 4 * image.width;
				var _g32 = 0;
				var _g23 = image.width;
				while(_g32 < _g23) {
					++_g32;
					a = pixels.b[readPosition++];
					r = pixels.b[readPosition++];
					g = pixels.b[readPosition++];
					b = pixels.b[readPosition++];
					data.b[position++] = b & 255;
					data.b[position++] = g & 255;
					data.b[position++] = r & 255;
					data.b[position++] = a & 255;
				}
			}
			break;
		case 2:
			var andMask = new haxe_io_Bytes(new ArrayBuffer(image.width * image.height));
			var maskPosition = 0;
			var _g12 = 0;
			var _g5 = image.height;
			while(_g12 < _g5) {
				readPosition = (image.height - 1 - _g12++) * 4 * image.width;
				var _g33 = 0;
				var _g24 = image.width;
				while(_g33 < _g24) {
					++_g33;
					a = pixels.b[readPosition++];
					r = pixels.b[readPosition++];
					g = pixels.b[readPosition++];
					b = pixels.b[readPosition++];
					data.b[position++] = b & 255;
					data.b[position++] = g & 255;
					data.b[position++] = r & 255;
					data.b[position++] = a & 255;
					andMask.b[maskPosition++] = 0;
				}
			}
			data.blit(position,andMask,0,image.width * image.height);
			break;
		}
	}
	return data;
};
var lime_graphics_format_BMPType = $hxClasses["lime.graphics.format.BMPType"] = { __ename__ : ["lime","graphics","format","BMPType"], __constructs__ : ["RGB","BITFIELD","ICO"] };
lime_graphics_format_BMPType.RGB = ["RGB",0];
lime_graphics_format_BMPType.RGB.toString = $estr;
lime_graphics_format_BMPType.RGB.__enum__ = lime_graphics_format_BMPType;
lime_graphics_format_BMPType.BITFIELD = ["BITFIELD",1];
lime_graphics_format_BMPType.BITFIELD.toString = $estr;
lime_graphics_format_BMPType.BITFIELD.__enum__ = lime_graphics_format_BMPType;
lime_graphics_format_BMPType.ICO = ["ICO",2];
lime_graphics_format_BMPType.ICO.toString = $estr;
lime_graphics_format_BMPType.ICO.__enum__ = lime_graphics_format_BMPType;
lime_graphics_format_BMPType.__empty_constructs__ = [lime_graphics_format_BMPType.RGB,lime_graphics_format_BMPType.BITFIELD,lime_graphics_format_BMPType.ICO];
var lime_graphics_format_JPEG = function() { };
$hxClasses["lime.graphics.format.JPEG"] = lime_graphics_format_JPEG;
lime_graphics_format_JPEG.__name__ = ["lime","graphics","format","JPEG"];
lime_graphics_format_JPEG.decodeBytes = function(bytes,decodeData) {
	if(decodeData == null) {
		decodeData = true;
	}
	return null;
};
lime_graphics_format_JPEG.decodeFile = function(path,decodeData) {
	if(decodeData == null) {
		decodeData = true;
	}
	return null;
};
lime_graphics_format_JPEG.encode = function(image,quality) {
	if(image.get_premultiplied() || image.get_format() != 0) {
		image = image.clone();
		image.set_premultiplied(false);
		image.set_format(0);
	}
	lime_graphics_utils_ImageCanvasUtil.sync(image,false);
	if(image.buffer.__srcCanvas != null) {
		var buffer = window.atob(image.buffer.__srcCanvas.toDataURL("image/jpeg",quality / 100).split(";base64,")[1]);
		var bytes = new haxe_io_Bytes(new ArrayBuffer(buffer.length));
		var _g1 = 0;
		var _g = buffer.length;
		while(_g1 < _g) {
			var i = _g1++;
			var v = HxOverrides.cca(buffer,i);
			bytes.b[i] = v & 255;
		}
		return bytes;
	}
	return null;
};
var lime_graphics_format_PNG = function() { };
$hxClasses["lime.graphics.format.PNG"] = lime_graphics_format_PNG;
lime_graphics_format_PNG.__name__ = ["lime","graphics","format","PNG"];
lime_graphics_format_PNG.decodeBytes = function(bytes,decodeData) {
	if(decodeData == null) {
		decodeData = true;
	}
	return null;
};
lime_graphics_format_PNG.decodeFile = function(path,decodeData) {
	if(decodeData == null) {
		decodeData = true;
	}
	return null;
};
lime_graphics_format_PNG.encode = function(image) {
	if(image.get_premultiplied() || image.get_format() != 0) {
		image = image.clone();
		image.set_premultiplied(false);
		image.set_format(0);
	}
	lime_graphics_utils_ImageCanvasUtil.sync(image,false);
	if(image.buffer.__srcCanvas != null) {
		var buffer = window.atob(image.buffer.__srcCanvas.toDataURL("image/png").split(";base64,")[1]);
		var bytes = new haxe_io_Bytes(new ArrayBuffer(buffer.length));
		var _g1 = 0;
		var _g = buffer.length;
		while(_g1 < _g) {
			var i = _g1++;
			var v = HxOverrides.cca(buffer,i);
			bytes.b[i] = v & 255;
		}
		return bytes;
	}
	return null;
};
var lime_graphics_opengl_ExtensionPackedDepthStencil = function() { };
$hxClasses["lime.graphics.opengl.ExtensionPackedDepthStencil"] = lime_graphics_opengl_ExtensionPackedDepthStencil;
lime_graphics_opengl_ExtensionPackedDepthStencil.__name__ = ["lime","graphics","opengl","ExtensionPackedDepthStencil"];
var lime_graphics_opengl_GL = function() { };
$hxClasses["lime.graphics.opengl.GL"] = lime_graphics_opengl_GL;
lime_graphics_opengl_GL.__name__ = ["lime","graphics","opengl","GL"];
lime_graphics_opengl_GL.__properties__ = {get_version:"get_version"}
lime_graphics_opengl_GL.activeTexture = function(texture) {
	lime_graphics_opengl_GL.context.activeTexture(texture);
};
lime_graphics_opengl_GL.attachShader = function(program,shader) {
	lime_graphics_opengl_GL.context.attachShader(program,shader);
};
lime_graphics_opengl_GL.bindAttribLocation = function(program,index,name) {
	lime_graphics_opengl_GL.context.bindAttribLocation(program,index,name);
};
lime_graphics_opengl_GL.bindBuffer = function(target,buffer) {
	lime_graphics_opengl_GL.context.bindBuffer(target,buffer);
};
lime_graphics_opengl_GL.bindFramebuffer = function(target,framebuffer) {
	lime_graphics_opengl_GL.context.bindFramebuffer(target,framebuffer);
};
lime_graphics_opengl_GL.bindRenderbuffer = function(target,renderbuffer) {
	lime_graphics_opengl_GL.context.bindRenderbuffer(target,renderbuffer);
};
lime_graphics_opengl_GL.bindTexture = function(target,texture) {
	lime_graphics_opengl_GL.context.bindTexture(target,texture);
};
lime_graphics_opengl_GL.blendColor = function(red,green,blue,alpha) {
	lime_graphics_opengl_GL.context.blendColor(red,green,blue,alpha);
};
lime_graphics_opengl_GL.blendEquation = function(mode) {
	lime_graphics_opengl_GL.context.blendEquation(mode);
};
lime_graphics_opengl_GL.blendEquationSeparate = function(modeRGB,modeAlpha) {
	lime_graphics_opengl_GL.context.blendEquationSeparate(modeRGB,modeAlpha);
};
lime_graphics_opengl_GL.blendFunc = function(sfactor,dfactor) {
	lime_graphics_opengl_GL.context.blendFunc(sfactor,dfactor);
};
lime_graphics_opengl_GL.blendFuncSeparate = function(srcRGB,dstRGB,srcAlpha,dstAlpha) {
	lime_graphics_opengl_GL.context.blendFuncSeparate(srcRGB,dstRGB,srcAlpha,dstAlpha);
};
lime_graphics_opengl_GL.bufferData = function(target,data,usage) {
	lime_graphics_opengl_GL.context.bufferData(target,data,usage);
};
lime_graphics_opengl_GL.bufferSubData = function(target,offset,data) {
	lime_graphics_opengl_GL.context.bufferSubData(target,offset,data);
};
lime_graphics_opengl_GL.checkFramebufferStatus = function(target) {
	return lime_graphics_opengl_GL.context.checkFramebufferStatus(target);
};
lime_graphics_opengl_GL.clear = function(mask) {
	lime_graphics_opengl_GL.context.clear(mask);
};
lime_graphics_opengl_GL.clearColor = function(red,green,blue,alpha) {
	lime_graphics_opengl_GL.context.clearColor(red,green,blue,alpha);
};
lime_graphics_opengl_GL.clearDepth = function(depth) {
	lime_graphics_opengl_GL.context.clearDepth(depth);
};
lime_graphics_opengl_GL.clearStencil = function(s) {
	lime_graphics_opengl_GL.context.clearStencil(s);
};
lime_graphics_opengl_GL.colorMask = function(red,green,blue,alpha) {
	lime_graphics_opengl_GL.context.colorMask(red,green,blue,alpha);
};
lime_graphics_opengl_GL.compileShader = function(shader) {
	lime_graphics_opengl_GL.context.compileShader(shader);
};
lime_graphics_opengl_GL.compressedTexImage2D = function(target,level,internalformat,width,height,border,data) {
	lime_graphics_opengl_GL.context.compressedTexImage2D(target,level,internalformat,width,height,border,data);
};
lime_graphics_opengl_GL.compressedTexSubImage2D = function(target,level,xoffset,yoffset,width,height,format,data) {
	lime_graphics_opengl_GL.context.compressedTexSubImage2D(target,level,xoffset,yoffset,width,height,format,data);
};
lime_graphics_opengl_GL.copyTexImage2D = function(target,level,internalformat,x,y,width,height,border) {
	lime_graphics_opengl_GL.context.copyTexImage2D(target,level,internalformat,x,y,width,height,border);
};
lime_graphics_opengl_GL.copyTexSubImage2D = function(target,level,xoffset,yoffset,x,y,width,height) {
	lime_graphics_opengl_GL.context.copyTexSubImage2D(target,level,xoffset,yoffset,x,y,width,height);
};
lime_graphics_opengl_GL.createBuffer = function() {
	return lime_graphics_opengl_GL.context.createBuffer();
};
lime_graphics_opengl_GL.createFramebuffer = function() {
	return lime_graphics_opengl_GL.context.createFramebuffer();
};
lime_graphics_opengl_GL.createProgram = function() {
	return lime_graphics_opengl_GL.context.createProgram();
};
lime_graphics_opengl_GL.createRenderbuffer = function() {
	return lime_graphics_opengl_GL.context.createRenderbuffer();
};
lime_graphics_opengl_GL.createShader = function(type) {
	return lime_graphics_opengl_GL.context.createShader(type);
};
lime_graphics_opengl_GL.createTexture = function() {
	return lime_graphics_opengl_GL.context.createTexture();
};
lime_graphics_opengl_GL.cullFace = function(mode) {
	lime_graphics_opengl_GL.context.cullFace(mode);
};
lime_graphics_opengl_GL.deleteBuffer = function(buffer) {
	lime_graphics_opengl_GL.context.deleteBuffer(buffer);
};
lime_graphics_opengl_GL.deleteFramebuffer = function(framebuffer) {
	lime_graphics_opengl_GL.context.deleteFramebuffer(framebuffer);
};
lime_graphics_opengl_GL.deleteProgram = function(program) {
	lime_graphics_opengl_GL.context.deleteProgram(program);
};
lime_graphics_opengl_GL.deleteRenderbuffer = function(renderbuffer) {
	lime_graphics_opengl_GL.context.deleteRenderbuffer(renderbuffer);
};
lime_graphics_opengl_GL.deleteShader = function(shader) {
	lime_graphics_opengl_GL.context.deleteShader(shader);
};
lime_graphics_opengl_GL.deleteTexture = function(texture) {
	lime_graphics_opengl_GL.context.deleteTexture(texture);
};
lime_graphics_opengl_GL.depthFunc = function(func) {
	lime_graphics_opengl_GL.context.depthFunc(func);
};
lime_graphics_opengl_GL.depthMask = function(flag) {
	lime_graphics_opengl_GL.context.depthMask(flag);
};
lime_graphics_opengl_GL.depthRange = function(zNear,zFar) {
	lime_graphics_opengl_GL.context.depthRange(zNear,zFar);
};
lime_graphics_opengl_GL.detachShader = function(program,shader) {
	lime_graphics_opengl_GL.context.detachShader(program,shader);
};
lime_graphics_opengl_GL.disable = function(cap) {
	lime_graphics_opengl_GL.context.disable(cap);
};
lime_graphics_opengl_GL.disableVertexAttribArray = function(index) {
	lime_graphics_opengl_GL.context.disableVertexAttribArray(index);
};
lime_graphics_opengl_GL.drawArrays = function(mode,first,count) {
	lime_graphics_opengl_GL.context.drawArrays(mode,first,count);
};
lime_graphics_opengl_GL.drawElements = function(mode,count,type,offset) {
	lime_graphics_opengl_GL.context.drawElements(mode,count,type,offset);
};
lime_graphics_opengl_GL.enable = function(cap) {
	lime_graphics_opengl_GL.context.enable(cap);
};
lime_graphics_opengl_GL.enableVertexAttribArray = function(index) {
	lime_graphics_opengl_GL.context.enableVertexAttribArray(index);
};
lime_graphics_opengl_GL.finish = function() {
	lime_graphics_opengl_GL.context.finish();
};
lime_graphics_opengl_GL.flush = function() {
	lime_graphics_opengl_GL.context.flush();
};
lime_graphics_opengl_GL.framebufferRenderbuffer = function(target,attachment,renderbuffertarget,renderbuffer) {
	lime_graphics_opengl_GL.context.framebufferRenderbuffer(target,attachment,renderbuffertarget,renderbuffer);
};
lime_graphics_opengl_GL.framebufferTexture2D = function(target,attachment,textarget,texture,level) {
	lime_graphics_opengl_GL.context.framebufferTexture2D(target,attachment,textarget,texture,level);
};
lime_graphics_opengl_GL.frontFace = function(mode) {
	lime_graphics_opengl_GL.context.frontFace(mode);
};
lime_graphics_opengl_GL.generateMipmap = function(target) {
	lime_graphics_opengl_GL.context.generateMipmap(target);
};
lime_graphics_opengl_GL.getActiveAttrib = function(program,index) {
	return lime_graphics_opengl_GL.context.getActiveAttrib(program,index);
};
lime_graphics_opengl_GL.getActiveUniform = function(program,index) {
	return lime_graphics_opengl_GL.context.getActiveUniform(program,index);
};
lime_graphics_opengl_GL.getAttachedShaders = function(program) {
	return lime_graphics_opengl_GL.context.getAttachedShaders(program);
};
lime_graphics_opengl_GL.getAttribLocation = function(program,name) {
	return lime_graphics_opengl_GL.context.getAttribLocation(program,name);
};
lime_graphics_opengl_GL.getBufferParameter = function(target,pname) {
	return lime_graphics_opengl_GL.context.getBufferParameter(target,pname);
};
lime_graphics_opengl_GL.getContextAttributes = function() {
	return lime_graphics_opengl_GL.context.getContextAttributes();
};
lime_graphics_opengl_GL.getError = function() {
	return lime_graphics_opengl_GL.context.getError();
};
lime_graphics_opengl_GL.getExtension = function(name) {
	return lime_graphics_opengl_GL.context.getExtension(name);
};
lime_graphics_opengl_GL.getFramebufferAttachmentParameter = function(target,attachment,pname) {
	return lime_graphics_opengl_GL.context.getFramebufferAttachmentParameter(target,attachment,pname);
};
lime_graphics_opengl_GL.getParameter = function(pname) {
	return lime_graphics_opengl_GL.context.getParameter(pname);
};
lime_graphics_opengl_GL.getProgramInfoLog = function(program) {
	return lime_graphics_opengl_GL.context.getProgramInfoLog(program);
};
lime_graphics_opengl_GL.getProgramParameter = function(program,pname) {
	return lime_graphics_opengl_GL.context.getProgramParameter(program,pname);
};
lime_graphics_opengl_GL.getRenderbufferParameter = function(target,pname) {
	return lime_graphics_opengl_GL.context.getRenderbufferParameter(target,pname);
};
lime_graphics_opengl_GL.getShaderInfoLog = function(shader) {
	return lime_graphics_opengl_GL.context.getShaderInfoLog(shader);
};
lime_graphics_opengl_GL.getShaderParameter = function(shader,pname) {
	return lime_graphics_opengl_GL.context.getShaderParameter(shader,pname);
};
lime_graphics_opengl_GL.getShaderPrecisionFormat = function(shadertype,precisiontype) {
	return lime_graphics_opengl_GL.context.getShaderPrecisionFormat(shadertype,precisiontype);
};
lime_graphics_opengl_GL.getShaderSource = function(shader) {
	return lime_graphics_opengl_GL.context.getShaderSource(shader);
};
lime_graphics_opengl_GL.getSupportedExtensions = function() {
	return lime_graphics_opengl_GL.context.getSupportedExtensions();
};
lime_graphics_opengl_GL.getTexParameter = function(target,pname) {
	return lime_graphics_opengl_GL.context.getTexParameter(target,pname);
};
lime_graphics_opengl_GL.getUniform = function(program,location) {
	return lime_graphics_opengl_GL.context.getUniform(program,location);
};
lime_graphics_opengl_GL.getUniformLocation = function(program,name) {
	return lime_graphics_opengl_GL.context.getUniformLocation(program,name);
};
lime_graphics_opengl_GL.getVertexAttrib = function(index,pname) {
	return lime_graphics_opengl_GL.context.getVertexAttrib(index,pname);
};
lime_graphics_opengl_GL.getVertexAttribOffset = function(index,pname) {
	return lime_graphics_opengl_GL.context.getVertexAttribOffset(index,pname);
};
lime_graphics_opengl_GL.hint = function(target,mode) {
	lime_graphics_opengl_GL.context.hint(target,mode);
};
lime_graphics_opengl_GL.isBuffer = function(buffer) {
	return lime_graphics_opengl_GL.context.isBuffer(buffer);
};
lime_graphics_opengl_GL.isContextLost = function() {
	return lime_graphics_opengl_GL.context.isContextLost();
};
lime_graphics_opengl_GL.isEnabled = function(cap) {
	return lime_graphics_opengl_GL.context.isEnabled(cap);
};
lime_graphics_opengl_GL.isFramebuffer = function(framebuffer) {
	return lime_graphics_opengl_GL.context.isFramebuffer(framebuffer);
};
lime_graphics_opengl_GL.isProgram = function(program) {
	return lime_graphics_opengl_GL.context.isProgram(program);
};
lime_graphics_opengl_GL.isRenderbuffer = function(renderbuffer) {
	return lime_graphics_opengl_GL.context.isRenderbuffer(renderbuffer);
};
lime_graphics_opengl_GL.isShader = function(shader) {
	return lime_graphics_opengl_GL.context.isShader(shader);
};
lime_graphics_opengl_GL.isTexture = function(texture) {
	return lime_graphics_opengl_GL.context.isTexture(texture);
};
lime_graphics_opengl_GL.lineWidth = function(width) {
	lime_graphics_opengl_GL.context.lineWidth(width);
};
lime_graphics_opengl_GL.linkProgram = function(program) {
	lime_graphics_opengl_GL.context.linkProgram(program);
};
lime_graphics_opengl_GL.pixelStorei = function(pname,param) {
	lime_graphics_opengl_GL.context.pixelStorei(pname,param);
};
lime_graphics_opengl_GL.polygonOffset = function(factor,units) {
	lime_graphics_opengl_GL.context.polygonOffset(factor,units);
};
lime_graphics_opengl_GL.readPixels = function(x,y,width,height,format,type,pixels) {
	lime_graphics_opengl_GL.context.readPixels(x,y,width,height,format,type,pixels);
};
lime_graphics_opengl_GL.renderbufferStorage = function(target,internalformat,width,height) {
	lime_graphics_opengl_GL.context.renderbufferStorage(target,internalformat,width,height);
};
lime_graphics_opengl_GL.sampleCoverage = function(value,invert) {
	lime_graphics_opengl_GL.context.sampleCoverage(value,invert);
};
lime_graphics_opengl_GL.scissor = function(x,y,width,height) {
	lime_graphics_opengl_GL.context.scissor(x,y,width,height);
};
lime_graphics_opengl_GL.shaderSource = function(shader,source) {
	lime_graphics_opengl_GL.context.shaderSource(shader,source);
};
lime_graphics_opengl_GL.stencilFunc = function(func,ref,mask) {
	lime_graphics_opengl_GL.context.stencilFunc(func,ref,mask);
};
lime_graphics_opengl_GL.stencilFuncSeparate = function(face,func,ref,mask) {
	lime_graphics_opengl_GL.context.stencilFuncSeparate(face,func,ref,mask);
};
lime_graphics_opengl_GL.stencilMask = function(mask) {
	lime_graphics_opengl_GL.context.stencilMask(mask);
};
lime_graphics_opengl_GL.stencilMaskSeparate = function(face,mask) {
	lime_graphics_opengl_GL.context.stencilMaskSeparate(face,mask);
};
lime_graphics_opengl_GL.stencilOp = function(fail,zfail,zpass) {
	lime_graphics_opengl_GL.context.stencilOp(fail,zfail,zpass);
};
lime_graphics_opengl_GL.stencilOpSeparate = function(face,fail,zfail,zpass) {
	lime_graphics_opengl_GL.context.stencilOpSeparate(face,fail,zfail,zpass);
};
lime_graphics_opengl_GL.texImage2D = function(target,level,internalformat,width,height,border,format,type,pixels) {
	lime_graphics_opengl_GL.context.texImage2D(target,level,internalformat,width,height,border,format,type,pixels);
};
lime_graphics_opengl_GL.texParameterf = function(target,pname,param) {
	lime_graphics_opengl_GL.context.texParameterf(target,pname,param);
};
lime_graphics_opengl_GL.texParameteri = function(target,pname,param) {
	lime_graphics_opengl_GL.context.texParameteri(target,pname,param);
};
lime_graphics_opengl_GL.texSubImage2D = function(target,level,xoffset,yoffset,width,height,format,type,pixels) {
	lime_graphics_opengl_GL.context.texSubImage2D(target,level,xoffset,yoffset,width,height,format,type,pixels);
};
lime_graphics_opengl_GL.uniform1f = function(location,x) {
	lime_graphics_opengl_GL.context.uniform1f(location,x);
};
lime_graphics_opengl_GL.uniform1fv = function(location,x) {
	lime_graphics_opengl_GL.context.uniform1fv(location,x);
};
lime_graphics_opengl_GL.uniform1i = function(location,x) {
	lime_graphics_opengl_GL.context.uniform1i(location,x);
};
lime_graphics_opengl_GL.uniform1iv = function(location,v) {
	lime_graphics_opengl_GL.context.uniform1iv(location,v);
};
lime_graphics_opengl_GL.uniform2f = function(location,x,y) {
	lime_graphics_opengl_GL.context.uniform2f(location,x,y);
};
lime_graphics_opengl_GL.uniform2fv = function(location,v) {
	lime_graphics_opengl_GL.context.uniform2fv(location,v);
};
lime_graphics_opengl_GL.uniform2i = function(location,x,y) {
	lime_graphics_opengl_GL.context.uniform2i(location,x,y);
};
lime_graphics_opengl_GL.uniform2iv = function(location,v) {
	lime_graphics_opengl_GL.context.uniform2iv(location,v);
};
lime_graphics_opengl_GL.uniform3f = function(location,x,y,z) {
	lime_graphics_opengl_GL.context.uniform3f(location,x,y,z);
};
lime_graphics_opengl_GL.uniform3fv = function(location,v) {
	lime_graphics_opengl_GL.context.uniform3fv(location,v);
};
lime_graphics_opengl_GL.uniform3i = function(location,x,y,z) {
	lime_graphics_opengl_GL.context.uniform3i(location,x,y,z);
};
lime_graphics_opengl_GL.uniform3iv = function(location,v) {
	lime_graphics_opengl_GL.context.uniform3iv(location,v);
};
lime_graphics_opengl_GL.uniform4f = function(location,x,y,z,w) {
	lime_graphics_opengl_GL.context.uniform4f(location,x,y,z,w);
};
lime_graphics_opengl_GL.uniform4fv = function(location,v) {
	lime_graphics_opengl_GL.context.uniform4fv(location,v);
};
lime_graphics_opengl_GL.uniform4i = function(location,x,y,z,w) {
	lime_graphics_opengl_GL.context.uniform4i(location,x,y,z,w);
};
lime_graphics_opengl_GL.uniform4iv = function(location,v) {
	lime_graphics_opengl_GL.context.uniform4iv(location,v);
};
lime_graphics_opengl_GL.uniformMatrix2fv = function(location,transpose,v) {
	lime_graphics_opengl_GL.context.uniformMatrix2fv(location,transpose,v);
};
lime_graphics_opengl_GL.uniformMatrix3fv = function(location,transpose,v) {
	lime_graphics_opengl_GL.context.uniformMatrix3fv(location,transpose,v);
};
lime_graphics_opengl_GL.uniformMatrix4fv = function(location,transpose,v) {
	lime_graphics_opengl_GL.context.uniformMatrix4fv(location,transpose,v);
};
lime_graphics_opengl_GL.useProgram = function(program) {
	lime_graphics_opengl_GL.__currentProgram = program;
	lime_graphics_opengl_GL.context.useProgram(program);
};
lime_graphics_opengl_GL.validateProgram = function(program) {
	lime_graphics_opengl_GL.context.validateProgram(program);
};
lime_graphics_opengl_GL.vertexAttrib1f = function(indx,x) {
	lime_graphics_opengl_GL.context.vertexAttrib1f(indx,x);
};
lime_graphics_opengl_GL.vertexAttrib1fv = function(indx,values) {
	lime_graphics_opengl_GL.context.vertexAttrib1fv(indx,values);
};
lime_graphics_opengl_GL.vertexAttrib2f = function(indx,x,y) {
	lime_graphics_opengl_GL.context.vertexAttrib2f(indx,x,y);
};
lime_graphics_opengl_GL.vertexAttrib2fv = function(indx,values) {
	lime_graphics_opengl_GL.context.vertexAttrib2fv(indx,values);
};
lime_graphics_opengl_GL.vertexAttrib3f = function(indx,x,y,z) {
	lime_graphics_opengl_GL.context.vertexAttrib3f(indx,x,y,z);
};
lime_graphics_opengl_GL.vertexAttrib3fv = function(indx,values) {
	lime_graphics_opengl_GL.context.vertexAttrib3fv(indx,values);
};
lime_graphics_opengl_GL.vertexAttrib4f = function(indx,x,y,z,w) {
	lime_graphics_opengl_GL.context.vertexAttrib4f(indx,x,y,z,w);
};
lime_graphics_opengl_GL.vertexAttrib4fv = function(indx,values) {
	lime_graphics_opengl_GL.context.vertexAttrib4fv(indx,values);
};
lime_graphics_opengl_GL.vertexAttribPointer = function(indx,size,type,normalized,stride,offset) {
	lime_graphics_opengl_GL.context.vertexAttribPointer(indx,size,type,normalized,stride,offset);
};
lime_graphics_opengl_GL.viewport = function(x,y,width,height) {
	lime_graphics_opengl_GL.context.viewport(x,y,width,height);
};
lime_graphics_opengl_GL.get_version = function() {
	return 2;
};
var lime_graphics_utils_ImageCanvasUtil = function() { };
$hxClasses["lime.graphics.utils.ImageCanvasUtil"] = lime_graphics_utils_ImageCanvasUtil;
lime_graphics_utils_ImageCanvasUtil.__name__ = ["lime","graphics","utils","ImageCanvasUtil"];
lime_graphics_utils_ImageCanvasUtil.colorTransform = function(image,rect,colorMatrix) {
	lime_graphics_utils_ImageCanvasUtil.convertToData(image);
	lime_graphics_utils_ImageDataUtil.colorTransform(image,rect,colorMatrix);
};
lime_graphics_utils_ImageCanvasUtil.convertToCanvas = function(image,clear) {
	if(clear == null) {
		clear = false;
	}
	var buffer = image.buffer;
	if(buffer.__srcImage != null) {
		if(buffer.__srcCanvas == null) {
			lime_graphics_utils_ImageCanvasUtil.createCanvas(image,buffer.__srcImage.width,buffer.__srcImage.height);
			buffer.__srcContext.drawImage(buffer.__srcImage,0,0);
		}
		buffer.__srcImage = null;
	} else if(buffer.__srcCanvas == null && buffer.data != null) {
		image.set_transparent(true);
		lime_graphics_utils_ImageCanvasUtil.createCanvas(image,buffer.width,buffer.height);
		lime_graphics_utils_ImageCanvasUtil.createImageData(image);
		buffer.__srcContext.putImageData(buffer.__srcImageData,0,0);
	} else if(image.type == lime_graphics_ImageType.DATA && buffer.__srcImageData != null && image.dirty) {
		buffer.__srcContext.putImageData(buffer.__srcImageData,0,0);
		image.dirty = false;
	}
	if(clear) {
		buffer.data = null;
		buffer.__srcImageData = null;
	} else if(buffer.data == null && buffer.__srcImageData != null) {
		buffer.data = buffer.__srcImageData.data;
	}
	image.type = lime_graphics_ImageType.CANVAS;
};
lime_graphics_utils_ImageCanvasUtil.convertToData = function(image,clear) {
	if(clear == null) {
		clear = false;
	}
	var buffer = image.buffer;
	if(buffer.__srcImage != null) {
		lime_graphics_utils_ImageCanvasUtil.convertToCanvas(image);
	}
	if(buffer.__srcCanvas != null && buffer.data == null) {
		lime_graphics_utils_ImageCanvasUtil.createImageData(image);
		if(image.type == lime_graphics_ImageType.CANVAS) {
			image.dirty = false;
		}
	} else if(image.type == lime_graphics_ImageType.CANVAS && buffer.__srcCanvas != null && image.dirty) {
		if(buffer.__srcImageData == null) {
			lime_graphics_utils_ImageCanvasUtil.createImageData(image);
		} else {
			buffer.__srcImageData = buffer.__srcContext.getImageData(0,0,buffer.width,buffer.height);
			var elements = buffer.__srcImageData.data.buffer;
			var this1;
			if(elements != null) {
				this1 = new Uint8Array(elements);
			} else {
				this1 = null;
			}
			buffer.data = this1;
		}
		image.dirty = false;
	}
	if(clear) {
		image.buffer.__srcCanvas = null;
		image.buffer.__srcContext = null;
	}
	image.type = lime_graphics_ImageType.DATA;
};
lime_graphics_utils_ImageCanvasUtil.copyChannel = function(image,sourceImage,sourceRect,destPoint,sourceChannel,destChannel) {
	lime_graphics_utils_ImageCanvasUtil.convertToData(sourceImage);
	lime_graphics_utils_ImageCanvasUtil.convertToData(image);
	lime_graphics_utils_ImageDataUtil.copyChannel(image,sourceImage,sourceRect,destPoint,sourceChannel,destChannel);
};
lime_graphics_utils_ImageCanvasUtil.copyPixels = function(image,sourceImage,sourceRect,destPoint,alphaImage,alphaPoint,mergeAlpha) {
	if(mergeAlpha == null) {
		mergeAlpha = false;
	}
	if(destPoint == null || destPoint.x >= image.width || destPoint.y >= image.height || sourceRect == null || sourceRect.width < 1 || sourceRect.height < 1) {
		return;
	}
	if(alphaImage != null && alphaImage.get_transparent()) {
		if(alphaPoint == null) {
			alphaPoint = new lime_math_Vector2();
		}
		var tempData = image.clone();
		tempData.copyChannel(alphaImage,new lime_math_Rectangle(alphaPoint.x,alphaPoint.y,sourceRect.width,sourceRect.height),new lime_math_Vector2(sourceRect.x,sourceRect.y),lime_graphics_ImageChannel.ALPHA,lime_graphics_ImageChannel.ALPHA);
		sourceImage = tempData;
	}
	lime_graphics_utils_ImageCanvasUtil.convertToCanvas(image,true);
	if(!mergeAlpha) {
		if(image.get_transparent() && sourceImage.get_transparent()) {
			image.buffer.__srcContext.clearRect(destPoint.x + image.offsetX,destPoint.y + image.offsetY,sourceRect.width + image.offsetX,sourceRect.height + image.offsetY);
		}
	}
	lime_graphics_utils_ImageCanvasUtil.convertToCanvas(sourceImage);
	if(sourceImage.buffer.get_src() != null) {
		image.buffer.__srcContext.drawImage(sourceImage.buffer.get_src(),sourceRect.x + sourceImage.offsetX | 0,sourceRect.y + sourceImage.offsetY | 0,sourceRect.width | 0,sourceRect.height | 0,destPoint.x + image.offsetX | 0,destPoint.y + image.offsetY | 0,sourceRect.width | 0,sourceRect.height | 0);
	}
	image.dirty = true;
	image.version++;
};
lime_graphics_utils_ImageCanvasUtil.createCanvas = function(image,width,height) {
	var buffer = image.buffer;
	if(buffer.__srcCanvas == null) {
		buffer.__srcCanvas = window.document.createElement("canvas");
		buffer.__srcCanvas.width = width;
		buffer.__srcCanvas.height = height;
		if(!image.get_transparent()) {
			if(!image.get_transparent()) {
				buffer.__srcCanvas.setAttribute("moz-opaque","true");
			}
			buffer.__srcContext = buffer.__srcCanvas.getContext ("2d", { alpha: false });
		} else {
			buffer.__srcContext = buffer.__srcCanvas.getContext("2d");
		}
		buffer.__srcContext.mozImageSmoothingEnabled = false;
		buffer.__srcContext.msImageSmoothingEnabled = false;
		buffer.__srcContext.imageSmoothingEnabled = false;
	}
};
lime_graphics_utils_ImageCanvasUtil.createImageData = function(image) {
	var buffer = image.buffer;
	if(buffer.__srcImageData == null) {
		if(buffer.data == null) {
			buffer.__srcImageData = buffer.__srcContext.getImageData(0,0,buffer.width,buffer.height);
		} else {
			buffer.__srcImageData = buffer.__srcContext.createImageData(buffer.width,buffer.height);
			buffer.__srcImageData.data.set(buffer.data);
		}
		var elements = buffer.__srcImageData.data.buffer;
		var this1;
		if(elements != null) {
			this1 = new Uint8Array(elements);
		} else {
			this1 = null;
		}
		buffer.data = this1;
	}
};
lime_graphics_utils_ImageCanvasUtil.fillRect = function(image,rect,color,format) {
	lime_graphics_utils_ImageCanvasUtil.convertToCanvas(image);
	var r;
	var g;
	var b;
	var a;
	if(format == 1) {
		r = color >> 16 & 255;
		g = color >> 8 & 255;
		b = color & 255;
		if(image.get_transparent()) {
			a = color >> 24 & 255;
		} else {
			a = 255;
		}
	} else {
		r = color >> 24 & 255;
		g = color >> 16 & 255;
		b = color >> 8 & 255;
		if(image.get_transparent()) {
			a = color & 255;
		} else {
			a = 255;
		}
	}
	if(rect.x == 0 && rect.y == 0 && rect.width == image.width && rect.height == image.height) {
		if(image.get_transparent() && a == 0) {
			image.buffer.__srcCanvas.width = image.buffer.width;
			return;
		}
	}
	image.buffer.__srcContext.fillStyle = "rgba(" + r + ", " + g + ", " + b + ", " + a / 255 + ")";
	image.buffer.__srcContext.fillRect(rect.x + image.offsetX,rect.y + image.offsetY,rect.width + image.offsetX,rect.height + image.offsetY);
	image.dirty = true;
	image.version++;
};
lime_graphics_utils_ImageCanvasUtil.floodFill = function(image,x,y,color,format) {
	lime_graphics_utils_ImageCanvasUtil.convertToData(image);
	lime_graphics_utils_ImageDataUtil.floodFill(image,x,y,color,format);
};
lime_graphics_utils_ImageCanvasUtil.getPixel = function(image,x,y,format) {
	lime_graphics_utils_ImageCanvasUtil.convertToData(image);
	return lime_graphics_utils_ImageDataUtil.getPixel(image,x,y,format);
};
lime_graphics_utils_ImageCanvasUtil.getPixel32 = function(image,x,y,format) {
	lime_graphics_utils_ImageCanvasUtil.convertToData(image);
	return lime_graphics_utils_ImageDataUtil.getPixel32(image,x,y,format);
};
lime_graphics_utils_ImageCanvasUtil.getPixels = function(image,rect,format) {
	lime_graphics_utils_ImageCanvasUtil.convertToData(image);
	return lime_graphics_utils_ImageDataUtil.getPixels(image,rect,format);
};
lime_graphics_utils_ImageCanvasUtil.merge = function(image,sourceImage,sourceRect,destPoint,redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier) {
	lime_graphics_utils_ImageCanvasUtil.convertToData(sourceImage);
	lime_graphics_utils_ImageCanvasUtil.convertToData(image);
	lime_graphics_utils_ImageDataUtil.merge(image,sourceImage,sourceRect,destPoint,redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier);
};
lime_graphics_utils_ImageCanvasUtil.resize = function(image,newWidth,newHeight) {
	var buffer = image.buffer;
	if(buffer.__srcCanvas == null) {
		lime_graphics_utils_ImageCanvasUtil.createCanvas(image,newWidth,newHeight);
		buffer.__srcContext.drawImage(buffer.get_src(),0,0,newWidth,newHeight);
	} else {
		lime_graphics_utils_ImageCanvasUtil.convertToCanvas(image,true);
		var sourceCanvas = buffer.__srcCanvas;
		buffer.__srcCanvas = null;
		lime_graphics_utils_ImageCanvasUtil.createCanvas(image,newWidth,newHeight);
		buffer.__srcContext.drawImage(sourceCanvas,0,0,newWidth,newHeight);
	}
	buffer.__srcImageData = null;
	buffer.data = null;
	image.dirty = true;
	image.version++;
};
lime_graphics_utils_ImageCanvasUtil.scroll = function(image,x,y) {
	if(x % image.width == 0 && y % image.height == 0) {
		return;
	}
	lime_graphics_utils_ImageCanvasUtil.convertToCanvas(image,true);
	image.buffer.__srcContext.clearRect(x,y,image.width,image.height);
	image.buffer.__srcContext.drawImage(image.buffer.__srcCanvas,x,y);
	image.dirty = true;
	image.version++;
};
lime_graphics_utils_ImageCanvasUtil.setPixel = function(image,x,y,color,format) {
	lime_graphics_utils_ImageCanvasUtil.convertToData(image);
	lime_graphics_utils_ImageDataUtil.setPixel(image,x,y,color,format);
};
lime_graphics_utils_ImageCanvasUtil.setPixel32 = function(image,x,y,color,format) {
	lime_graphics_utils_ImageCanvasUtil.convertToData(image);
	lime_graphics_utils_ImageDataUtil.setPixel32(image,x,y,color,format);
};
lime_graphics_utils_ImageCanvasUtil.setPixels = function(image,rect,bytes,format) {
	lime_graphics_utils_ImageCanvasUtil.convertToData(image);
	lime_graphics_utils_ImageDataUtil.setPixels(image,rect,bytes,format);
};
lime_graphics_utils_ImageCanvasUtil.sync = function(image,clear) {
	if(image.type == lime_graphics_ImageType.CANVAS) {
		lime_graphics_utils_ImageCanvasUtil.convertToCanvas(image,clear);
	} else {
		lime_graphics_utils_ImageCanvasUtil.convertToData(image,clear);
	}
};
var lime_graphics_utils_ImageDataUtil = function() { };
$hxClasses["lime.graphics.utils.ImageDataUtil"] = lime_graphics_utils_ImageDataUtil;
lime_graphics_utils_ImageDataUtil.__name__ = ["lime","graphics","utils","ImageDataUtil"];
lime_graphics_utils_ImageDataUtil.colorTransform = function(image,rect,colorMatrix) {
	var data = image.buffer.data;
	if(data == null) {
		return;
	}
	var format = image.buffer.format;
	var premultiplied = image.buffer.premultiplied;
	var dataView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(image,rect);
	var alphaTable = lime_math__$ColorMatrix_ColorMatrix_$Impl_$.getAlphaTable(colorMatrix);
	var redTable = lime_math__$ColorMatrix_ColorMatrix_$Impl_$.getRedTable(colorMatrix);
	var greenTable = lime_math__$ColorMatrix_ColorMatrix_$Impl_$.getGreenTable(colorMatrix);
	var blueTable = lime_math__$ColorMatrix_ColorMatrix_$Impl_$.getBlueTable(colorMatrix);
	var row;
	var offset;
	var pixel;
	var _g1 = 0;
	var _g = dataView.height;
	while(_g1 < _g) {
		row = dataView.offset + dataView.stride * _g1++;
		var _g3 = 0;
		var _g2 = dataView.width;
		while(_g3 < _g2) {
			offset = row + _g3++ * 4;
			switch(format) {
			case 0:
				pixel = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
				break;
			case 1:
				pixel = (data[offset + 1] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset] & 255;
				break;
			case 2:
				pixel = (data[offset + 2] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 3] & 255;
				break;
			}
			if(premultiplied) {
				if((pixel & 255) != 0 && (pixel & 255) != 255) {
					lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (pixel & 255);
					pixel = (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((pixel >>> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((pixel >>> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((pixel >>> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | pixel & 255 & 255;
				}
			}
			pixel = (redTable[pixel >>> 24 & 255] & 255) << 24 | (greenTable[pixel >>> 16 & 255] & 255) << 16 | (blueTable[pixel >>> 8 & 255] & 255) << 8 | alphaTable[pixel & 255] & 255;
			if(premultiplied) {
				if((pixel & 255) == 0) {
					if(pixel != 0) {
						pixel = 0;
					}
				} else if((pixel & 255) != 255) {
					lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[pixel & 255];
					pixel = ((pixel >>> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((pixel >>> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((pixel >>> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | pixel & 255 & 255;
				}
			}
			switch(format) {
			case 0:
				data[offset] = pixel >>> 24 & 255;
				data[offset + 1] = pixel >>> 16 & 255;
				data[offset + 2] = pixel >>> 8 & 255;
				data[offset + 3] = pixel & 255;
				break;
			case 1:
				data[offset] = pixel & 255;
				data[offset + 1] = pixel >>> 24 & 255;
				data[offset + 2] = pixel >>> 16 & 255;
				data[offset + 3] = pixel >>> 8 & 255;
				break;
			case 2:
				data[offset] = pixel >>> 8 & 255;
				data[offset + 1] = pixel >>> 16 & 255;
				data[offset + 2] = pixel >>> 24 & 255;
				data[offset + 3] = pixel & 255;
				break;
			}
		}
	}
	image.dirty = true;
	image.version++;
};
lime_graphics_utils_ImageDataUtil.copyChannel = function(image,sourceImage,sourceRect,destPoint,sourceChannel,destChannel) {
	var destIdx;
	switch(destChannel[1]) {
	case 0:
		destIdx = 0;
		break;
	case 1:
		destIdx = 1;
		break;
	case 2:
		destIdx = 2;
		break;
	case 3:
		destIdx = 3;
		break;
	}
	var srcIdx;
	switch(sourceChannel[1]) {
	case 0:
		srcIdx = 0;
		break;
	case 1:
		srcIdx = 1;
		break;
	case 2:
		srcIdx = 2;
		break;
	case 3:
		srcIdx = 3;
		break;
	}
	var srcData = sourceImage.buffer.data;
	var destData = image.buffer.data;
	if(srcData == null || destData == null) {
		return;
	}
	var srcView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(sourceImage,sourceRect);
	var destView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(image,new lime_math_Rectangle(destPoint.x,destPoint.y,srcView.width,srcView.height));
	var srcFormat = sourceImage.buffer.format;
	var destFormat = image.buffer.format;
	var srcPremultiplied = sourceImage.buffer.premultiplied;
	var destPremultiplied = image.buffer.premultiplied;
	var srcPosition;
	var destPosition;
	var srcPixel;
	var destPixel;
	var value = 0;
	var _g1 = 0;
	var _g = destView.height;
	while(_g1 < _g) {
		var y = _g1++;
		srcPosition = srcView.offset + srcView.stride * y;
		destPosition = destView.offset + destView.stride * y;
		var _g3 = 0;
		var _g2 = destView.width;
		while(_g3 < _g2) {
			++_g3;
			switch(srcFormat) {
			case 0:
				srcPixel = (srcData[srcPosition] & 255) << 24 | (srcData[srcPosition + 1] & 255) << 16 | (srcData[srcPosition + 2] & 255) << 8 | srcData[srcPosition + 3] & 255;
				break;
			case 1:
				srcPixel = (srcData[srcPosition + 1] & 255) << 24 | (srcData[srcPosition + 2] & 255) << 16 | (srcData[srcPosition + 3] & 255) << 8 | srcData[srcPosition] & 255;
				break;
			case 2:
				srcPixel = (srcData[srcPosition + 2] & 255) << 24 | (srcData[srcPosition + 1] & 255) << 16 | (srcData[srcPosition] & 255) << 8 | srcData[srcPosition + 3] & 255;
				break;
			}
			if(srcPremultiplied) {
				if((srcPixel & 255) != 0 && (srcPixel & 255) != 255) {
					lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (srcPixel & 255);
					srcPixel = (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((srcPixel >>> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((srcPixel >>> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((srcPixel >>> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | srcPixel & 255 & 255;
				}
			}
			switch(destFormat) {
			case 0:
				destPixel = (destData[destPosition] & 255) << 24 | (destData[destPosition + 1] & 255) << 16 | (destData[destPosition + 2] & 255) << 8 | destData[destPosition + 3] & 255;
				break;
			case 1:
				destPixel = (destData[destPosition + 1] & 255) << 24 | (destData[destPosition + 2] & 255) << 16 | (destData[destPosition + 3] & 255) << 8 | destData[destPosition] & 255;
				break;
			case 2:
				destPixel = (destData[destPosition + 2] & 255) << 24 | (destData[destPosition + 1] & 255) << 16 | (destData[destPosition] & 255) << 8 | destData[destPosition + 3] & 255;
				break;
			}
			if(destPremultiplied) {
				if((destPixel & 255) != 0 && (destPixel & 255) != 255) {
					lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (destPixel & 255);
					destPixel = (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((destPixel >>> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((destPixel >>> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((destPixel >>> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | destPixel & 255 & 255;
				}
			}
			switch(srcIdx) {
			case 0:
				value = srcPixel >>> 24 & 255;
				break;
			case 1:
				value = srcPixel >>> 16 & 255;
				break;
			case 2:
				value = srcPixel >>> 8 & 255;
				break;
			case 3:
				value = srcPixel & 255;
				break;
			}
			switch(destIdx) {
			case 0:
				destPixel = (value & 255) << 24 | (destPixel >>> 16 & 255 & 255) << 16 | (destPixel >>> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
				break;
			case 1:
				destPixel = (destPixel >>> 24 & 255 & 255) << 24 | (value & 255) << 16 | (destPixel >>> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
				break;
			case 2:
				destPixel = (destPixel >>> 24 & 255 & 255) << 24 | (destPixel >>> 16 & 255 & 255) << 16 | (value & 255) << 8 | destPixel & 255 & 255;
				break;
			case 3:
				destPixel = (destPixel >>> 24 & 255 & 255) << 24 | (destPixel >>> 16 & 255 & 255) << 16 | (destPixel >>> 8 & 255 & 255) << 8 | value & 255;
				break;
			}
			if(destPremultiplied) {
				if((destPixel & 255) == 0) {
					if(destPixel != 0) {
						destPixel = 0;
					}
				} else if((destPixel & 255) != 255) {
					lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[destPixel & 255];
					destPixel = ((destPixel >>> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((destPixel >>> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((destPixel >>> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | destPixel & 255 & 255;
				}
			}
			switch(destFormat) {
			case 0:
				destData[destPosition] = destPixel >>> 24 & 255;
				destData[destPosition + 1] = destPixel >>> 16 & 255;
				destData[destPosition + 2] = destPixel >>> 8 & 255;
				destData[destPosition + 3] = destPixel & 255;
				break;
			case 1:
				destData[destPosition] = destPixel & 255;
				destData[destPosition + 1] = destPixel >>> 24 & 255;
				destData[destPosition + 2] = destPixel >>> 16 & 255;
				destData[destPosition + 3] = destPixel >>> 8 & 255;
				break;
			case 2:
				destData[destPosition] = destPixel >>> 8 & 255;
				destData[destPosition + 1] = destPixel >>> 16 & 255;
				destData[destPosition + 2] = destPixel >>> 24 & 255;
				destData[destPosition + 3] = destPixel & 255;
				break;
			}
			srcPosition += 4;
			destPosition += 4;
		}
	}
	image.dirty = true;
	image.version++;
};
lime_graphics_utils_ImageDataUtil.copyPixels = function(image,sourceImage,sourceRect,destPoint,alphaImage,alphaPoint,mergeAlpha) {
	if(mergeAlpha == null) {
		mergeAlpha = false;
	}
	var sourceData = sourceImage.buffer.data;
	var destData = image.buffer.data;
	if(sourceData == null || destData == null) {
		return;
	}
	var sourceView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(sourceImage,sourceRect);
	var destView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(image,new lime_math_Rectangle(destPoint.x,destPoint.y,sourceView.width,sourceView.height));
	var sourceFormat = sourceImage.buffer.format;
	var destFormat = image.buffer.format;
	var sourcePremultiplied = sourceImage.buffer.premultiplied;
	var destPremultiplied = image.buffer.premultiplied;
	var sourcePosition;
	var destPosition;
	var sourcePixel;
	if(!mergeAlpha || !sourceImage.get_transparent()) {
		var _g1 = 0;
		var _g = destView.height;
		while(_g1 < _g) {
			var y = _g1++;
			sourcePosition = sourceView.offset + sourceView.stride * y;
			destPosition = destView.offset + destView.stride * y;
			var _g3 = 0;
			var _g2 = destView.width;
			while(_g3 < _g2) {
				++_g3;
				switch(sourceFormat) {
				case 0:
					sourcePixel = (sourceData[sourcePosition] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition + 2] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
					break;
				case 1:
					sourcePixel = (sourceData[sourcePosition + 1] & 255) << 24 | (sourceData[sourcePosition + 2] & 255) << 16 | (sourceData[sourcePosition + 3] & 255) << 8 | sourceData[sourcePosition] & 255;
					break;
				case 2:
					sourcePixel = (sourceData[sourcePosition + 2] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
					break;
				}
				if(sourcePremultiplied) {
					if((sourcePixel & 255) != 0 && (sourcePixel & 255) != 255) {
						lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (sourcePixel & 255);
						sourcePixel = (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((sourcePixel >>> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((sourcePixel >>> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((sourcePixel >>> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | sourcePixel & 255 & 255;
					}
				}
				if(destPremultiplied) {
					if((sourcePixel & 255) == 0) {
						if(sourcePixel != 0) {
							sourcePixel = 0;
						}
					} else if((sourcePixel & 255) != 255) {
						lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[sourcePixel & 255];
						sourcePixel = ((sourcePixel >>> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((sourcePixel >>> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((sourcePixel >>> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | sourcePixel & 255 & 255;
					}
				}
				switch(destFormat) {
				case 0:
					destData[destPosition] = sourcePixel >>> 24 & 255;
					destData[destPosition + 1] = sourcePixel >>> 16 & 255;
					destData[destPosition + 2] = sourcePixel >>> 8 & 255;
					destData[destPosition + 3] = sourcePixel & 255;
					break;
				case 1:
					destData[destPosition] = sourcePixel & 255;
					destData[destPosition + 1] = sourcePixel >>> 24 & 255;
					destData[destPosition + 2] = sourcePixel >>> 16 & 255;
					destData[destPosition + 3] = sourcePixel >>> 8 & 255;
					break;
				case 2:
					destData[destPosition] = sourcePixel >>> 8 & 255;
					destData[destPosition + 1] = sourcePixel >>> 16 & 255;
					destData[destPosition + 2] = sourcePixel >>> 24 & 255;
					destData[destPosition + 3] = sourcePixel & 255;
					break;
				}
				sourcePosition += 4;
				destPosition += 4;
			}
		}
	} else {
		var sourceAlpha;
		var destAlpha;
		var oneMinusSourceAlpha;
		var blendAlpha;
		var destPixel;
		if(alphaImage == null) {
			var _g11 = 0;
			var _g4 = destView.height;
			while(_g11 < _g4) {
				var y1 = _g11++;
				sourcePosition = sourceView.offset + sourceView.stride * y1;
				destPosition = destView.offset + destView.stride * y1;
				var _g31 = 0;
				var _g21 = destView.width;
				while(_g31 < _g21) {
					++_g31;
					switch(sourceFormat) {
					case 0:
						sourcePixel = (sourceData[sourcePosition] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition + 2] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
						break;
					case 1:
						sourcePixel = (sourceData[sourcePosition + 1] & 255) << 24 | (sourceData[sourcePosition + 2] & 255) << 16 | (sourceData[sourcePosition + 3] & 255) << 8 | sourceData[sourcePosition] & 255;
						break;
					case 2:
						sourcePixel = (sourceData[sourcePosition + 2] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
						break;
					}
					if(sourcePremultiplied) {
						if((sourcePixel & 255) != 0 && (sourcePixel & 255) != 255) {
							lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (sourcePixel & 255);
							sourcePixel = (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((sourcePixel >>> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((sourcePixel >>> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((sourcePixel >>> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | sourcePixel & 255 & 255;
						}
					}
					switch(destFormat) {
					case 0:
						destPixel = (destData[destPosition] & 255) << 24 | (destData[destPosition + 1] & 255) << 16 | (destData[destPosition + 2] & 255) << 8 | destData[destPosition + 3] & 255;
						break;
					case 1:
						destPixel = (destData[destPosition + 1] & 255) << 24 | (destData[destPosition + 2] & 255) << 16 | (destData[destPosition + 3] & 255) << 8 | destData[destPosition] & 255;
						break;
					case 2:
						destPixel = (destData[destPosition + 2] & 255) << 24 | (destData[destPosition + 1] & 255) << 16 | (destData[destPosition] & 255) << 8 | destData[destPosition + 3] & 255;
						break;
					}
					if(destPremultiplied) {
						if((destPixel & 255) != 0 && (destPixel & 255) != 255) {
							lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (destPixel & 255);
							destPixel = (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((destPixel >>> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((destPixel >>> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((destPixel >>> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | destPixel & 255 & 255;
						}
					}
					sourceAlpha = (sourcePixel & 255) / 255.0;
					destAlpha = (destPixel & 255) / 255.0;
					oneMinusSourceAlpha = 1 - sourceAlpha;
					blendAlpha = sourceAlpha + destAlpha * oneMinusSourceAlpha;
					if(blendAlpha == 0) {
						destPixel = 0;
					} else {
						destPixel = (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round(((sourcePixel >>> 24 & 255) * sourceAlpha + (destPixel >>> 24 & 255) * destAlpha * oneMinusSourceAlpha) / blendAlpha)] & 255) << 24 | (destPixel >>> 16 & 255 & 255) << 16 | (destPixel >>> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
						destPixel = (destPixel >>> 24 & 255 & 255) << 24 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round(((sourcePixel >>> 16 & 255) * sourceAlpha + (destPixel >>> 16 & 255) * destAlpha * oneMinusSourceAlpha) / blendAlpha)] & 255) << 16 | (destPixel >>> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
						destPixel = (destPixel >>> 24 & 255 & 255) << 24 | (destPixel >>> 16 & 255 & 255) << 16 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round(((sourcePixel >>> 8 & 255) * sourceAlpha + (destPixel >>> 8 & 255) * destAlpha * oneMinusSourceAlpha) / blendAlpha)] & 255) << 8 | destPixel & 255 & 255;
						destPixel = (destPixel >>> 24 & 255 & 255) << 24 | (destPixel >>> 16 & 255 & 255) << 16 | (destPixel >>> 8 & 255 & 255) << 8 | lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round(blendAlpha * 255.0)] & 255;
					}
					if(destPremultiplied) {
						if((destPixel & 255) == 0) {
							if(destPixel != 0) {
								destPixel = 0;
							}
						} else if((destPixel & 255) != 255) {
							lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[destPixel & 255];
							destPixel = ((destPixel >>> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((destPixel >>> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((destPixel >>> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | destPixel & 255 & 255;
						}
					}
					switch(destFormat) {
					case 0:
						destData[destPosition] = destPixel >>> 24 & 255;
						destData[destPosition + 1] = destPixel >>> 16 & 255;
						destData[destPosition + 2] = destPixel >>> 8 & 255;
						destData[destPosition + 3] = destPixel & 255;
						break;
					case 1:
						destData[destPosition] = destPixel & 255;
						destData[destPosition + 1] = destPixel >>> 24 & 255;
						destData[destPosition + 2] = destPixel >>> 16 & 255;
						destData[destPosition + 3] = destPixel >>> 8 & 255;
						break;
					case 2:
						destData[destPosition] = destPixel >>> 8 & 255;
						destData[destPosition + 1] = destPixel >>> 16 & 255;
						destData[destPosition + 2] = destPixel >>> 24 & 255;
						destData[destPosition + 3] = destPixel & 255;
						break;
					}
					sourcePosition += 4;
					destPosition += 4;
				}
			}
		} else {
			if(alphaPoint == null) {
				alphaPoint = new lime_math_Vector2();
			}
			var alphaData = alphaImage.buffer.data;
			var alphaFormat = alphaImage.buffer.format;
			var alphaPremultiplied = alphaImage.buffer.premultiplied;
			var alphaView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(alphaImage,new lime_math_Rectangle(alphaPoint.x,alphaPoint.y,destView.width,destView.height));
			var alphaPosition;
			var alphaPixel;
			var _g12 = 0;
			var _g5 = alphaView.height;
			while(_g12 < _g5) {
				var y2 = _g12++;
				sourcePosition = sourceView.offset + sourceView.stride * y2;
				destPosition = destView.offset + destView.stride * y2;
				alphaPosition = alphaView.offset + alphaView.stride * y2;
				var _g32 = 0;
				var _g22 = alphaView.width;
				while(_g32 < _g22) {
					++_g32;
					switch(sourceFormat) {
					case 0:
						sourcePixel = (sourceData[sourcePosition] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition + 2] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
						break;
					case 1:
						sourcePixel = (sourceData[sourcePosition + 1] & 255) << 24 | (sourceData[sourcePosition + 2] & 255) << 16 | (sourceData[sourcePosition + 3] & 255) << 8 | sourceData[sourcePosition] & 255;
						break;
					case 2:
						sourcePixel = (sourceData[sourcePosition + 2] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
						break;
					}
					if(sourcePremultiplied) {
						if((sourcePixel & 255) != 0 && (sourcePixel & 255) != 255) {
							lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (sourcePixel & 255);
							sourcePixel = (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((sourcePixel >>> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((sourcePixel >>> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((sourcePixel >>> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | sourcePixel & 255 & 255;
						}
					}
					switch(destFormat) {
					case 0:
						destPixel = (destData[destPosition] & 255) << 24 | (destData[destPosition + 1] & 255) << 16 | (destData[destPosition + 2] & 255) << 8 | destData[destPosition + 3] & 255;
						break;
					case 1:
						destPixel = (destData[destPosition + 1] & 255) << 24 | (destData[destPosition + 2] & 255) << 16 | (destData[destPosition + 3] & 255) << 8 | destData[destPosition] & 255;
						break;
					case 2:
						destPixel = (destData[destPosition + 2] & 255) << 24 | (destData[destPosition + 1] & 255) << 16 | (destData[destPosition] & 255) << 8 | destData[destPosition + 3] & 255;
						break;
					}
					if(destPremultiplied) {
						if((destPixel & 255) != 0 && (destPixel & 255) != 255) {
							lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (destPixel & 255);
							destPixel = (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((destPixel >>> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((destPixel >>> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((destPixel >>> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | destPixel & 255 & 255;
						}
					}
					switch(alphaFormat) {
					case 0:
						alphaPixel = (alphaData[alphaPosition] & 255) << 24 | (alphaData[alphaPosition + 1] & 255) << 16 | (alphaData[alphaPosition + 2] & 255) << 8 | alphaData[alphaPosition + 3] & 255;
						break;
					case 1:
						alphaPixel = (alphaData[alphaPosition + 1] & 255) << 24 | (alphaData[alphaPosition + 2] & 255) << 16 | (alphaData[alphaPosition + 3] & 255) << 8 | alphaData[alphaPosition] & 255;
						break;
					case 2:
						alphaPixel = (alphaData[alphaPosition + 2] & 255) << 24 | (alphaData[alphaPosition + 1] & 255) << 16 | (alphaData[alphaPosition] & 255) << 8 | alphaData[alphaPosition + 3] & 255;
						break;
					}
					if(alphaPremultiplied) {
						if((alphaPixel & 255) != 0 && (alphaPixel & 255) != 255) {
							lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (alphaPixel & 255);
							alphaPixel = (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((alphaPixel >>> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((alphaPixel >>> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((alphaPixel >>> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | alphaPixel & 255 & 255;
						}
					}
					sourceAlpha = (alphaPixel & 255) / 255;
					destAlpha = (destPixel & 255) / 255;
					oneMinusSourceAlpha = 1 - sourceAlpha;
					blendAlpha = sourceAlpha + destAlpha * oneMinusSourceAlpha;
					if(blendAlpha == 0) {
						destPixel = 0;
					} else {
						destPixel = (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round(((sourcePixel >>> 24 & 255) * sourceAlpha + (destPixel >>> 24 & 255) * destAlpha * oneMinusSourceAlpha) / blendAlpha)] & 255) << 24 | (destPixel >>> 16 & 255 & 255) << 16 | (destPixel >>> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
						destPixel = (destPixel >>> 24 & 255 & 255) << 24 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round(((sourcePixel >>> 16 & 255) * sourceAlpha + (destPixel >>> 16 & 255) * destAlpha * oneMinusSourceAlpha) / blendAlpha)] & 255) << 16 | (destPixel >>> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
						destPixel = (destPixel >>> 24 & 255 & 255) << 24 | (destPixel >>> 16 & 255 & 255) << 16 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round(((sourcePixel >>> 8 & 255) * sourceAlpha + (destPixel >>> 8 & 255) * destAlpha * oneMinusSourceAlpha) / blendAlpha)] & 255) << 8 | destPixel & 255 & 255;
						destPixel = (destPixel >>> 24 & 255 & 255) << 24 | (destPixel >>> 16 & 255 & 255) << 16 | (destPixel >>> 8 & 255 & 255) << 8 | lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round(blendAlpha * 255.0)] & 255;
					}
					if(destPremultiplied) {
						if((destPixel & 255) == 0) {
							if(destPixel != 0) {
								destPixel = 0;
							}
						} else if((destPixel & 255) != 255) {
							lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[destPixel & 255];
							destPixel = ((destPixel >>> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((destPixel >>> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((destPixel >>> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | destPixel & 255 & 255;
						}
					}
					switch(destFormat) {
					case 0:
						destData[destPosition] = destPixel >>> 24 & 255;
						destData[destPosition + 1] = destPixel >>> 16 & 255;
						destData[destPosition + 2] = destPixel >>> 8 & 255;
						destData[destPosition + 3] = destPixel & 255;
						break;
					case 1:
						destData[destPosition] = destPixel & 255;
						destData[destPosition + 1] = destPixel >>> 24 & 255;
						destData[destPosition + 2] = destPixel >>> 16 & 255;
						destData[destPosition + 3] = destPixel >>> 8 & 255;
						break;
					case 2:
						destData[destPosition] = destPixel >>> 8 & 255;
						destData[destPosition + 1] = destPixel >>> 16 & 255;
						destData[destPosition + 2] = destPixel >>> 24 & 255;
						destData[destPosition + 3] = destPixel & 255;
						break;
					}
					sourcePosition += 4;
					destPosition += 4;
				}
			}
		}
	}
	image.dirty = true;
	image.version++;
};
lime_graphics_utils_ImageDataUtil.fillRect = function(image,rect,color,format) {
	var fillColor;
	switch(format) {
	case 1:
		var argb = color;
		var rgba = 0;
		rgba = (argb >>> 16 & 255 & 255) << 24 | (argb >>> 8 & 255 & 255) << 16 | (argb & 255 & 255) << 8 | argb >>> 24 & 255 & 255;
		fillColor = rgba;
		break;
	case 2:
		var bgra = color;
		var rgba1 = 0;
		rgba1 = (bgra >>> 8 & 255 & 255) << 24 | (bgra >>> 16 & 255 & 255) << 16 | (bgra >>> 24 & 255 & 255) << 8 | bgra & 255 & 255;
		fillColor = rgba1;
		break;
	default:
		fillColor = color;
	}
	if(!image.get_transparent()) {
		fillColor = (fillColor >>> 24 & 255 & 255) << 24 | (fillColor >>> 16 & 255 & 255) << 16 | (fillColor >>> 8 & 255 & 255) << 8 | 255;
	}
	var data = image.buffer.data;
	if(data == null) {
		return;
	}
	var format1 = image.buffer.format;
	if(image.buffer.premultiplied) {
		if((fillColor & 255) == 0) {
			if(fillColor != 0) {
				fillColor = 0;
			}
		} else if((fillColor & 255) != 255) {
			lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[fillColor & 255];
			fillColor = ((fillColor >>> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((fillColor >>> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((fillColor >>> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | fillColor & 255 & 255;
		}
	}
	var dataView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(image,rect);
	var row;
	var _g1 = 0;
	var _g = dataView.height;
	while(_g1 < _g) {
		row = dataView.offset + dataView.stride * _g1++;
		var _g3 = 0;
		var _g2 = dataView.width;
		while(_g3 < _g2) {
			var offset = row + _g3++ * 4;
			switch(format1) {
			case 0:
				data[offset] = fillColor >>> 24 & 255;
				data[offset + 1] = fillColor >>> 16 & 255;
				data[offset + 2] = fillColor >>> 8 & 255;
				data[offset + 3] = fillColor & 255;
				break;
			case 1:
				data[offset] = fillColor & 255;
				data[offset + 1] = fillColor >>> 24 & 255;
				data[offset + 2] = fillColor >>> 16 & 255;
				data[offset + 3] = fillColor >>> 8 & 255;
				break;
			case 2:
				data[offset] = fillColor >>> 8 & 255;
				data[offset + 1] = fillColor >>> 16 & 255;
				data[offset + 2] = fillColor >>> 24 & 255;
				data[offset + 3] = fillColor & 255;
				break;
			}
		}
	}
	image.dirty = true;
	image.version++;
};
lime_graphics_utils_ImageDataUtil.floodFill = function(image,x,y,color,format) {
	var data = image.buffer.data;
	if(data == null) {
		return;
	}
	if(format == 1) {
		color = (color & 16777215) << 8 | color >> 24 & 255;
	}
	var format1 = image.buffer.format;
	var premultiplied = image.buffer.premultiplied;
	var fillColor = color;
	var hitColor;
	var offset = (y + image.offsetY) * (image.buffer.width * 4) + (x + image.offsetX) * 4;
	switch(format1) {
	case 0:
		hitColor = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
		break;
	case 1:
		hitColor = (data[offset + 1] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset] & 255;
		break;
	case 2:
		hitColor = (data[offset + 2] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 3] & 255;
		break;
	}
	if(premultiplied) {
		if((hitColor & 255) != 0 && (hitColor & 255) != 255) {
			lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (hitColor & 255);
			hitColor = (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((hitColor >>> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((hitColor >>> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((hitColor >>> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | hitColor & 255 & 255;
		}
	}
	if(!image.get_transparent()) {
		fillColor = (fillColor >>> 24 & 255 & 255) << 24 | (fillColor >>> 16 & 255 & 255) << 16 | (fillColor >>> 8 & 255 & 255) << 8 | 255;
		hitColor = (hitColor >>> 24 & 255 & 255) << 24 | (hitColor >>> 16 & 255 & 255) << 16 | (hitColor >>> 8 & 255 & 255) << 8 | 255;
	}
	if(fillColor == hitColor) {
		return;
	}
	if(premultiplied) {
		if((fillColor & 255) == 0) {
			if(fillColor != 0) {
				fillColor = 0;
			}
		} else if((fillColor & 255) != 255) {
			lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[fillColor & 255];
			fillColor = ((fillColor >>> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((fillColor >>> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((fillColor >>> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | fillColor & 255 & 255;
		}
	}
	var dx = [0,-1,1,0];
	var dy = [-1,0,0,1];
	var minX = -image.offsetX;
	var minY = -image.offsetY;
	var maxX = minX + image.width;
	var maxY = minY + image.height;
	var queue = [];
	queue.push(x);
	queue.push(y);
	var curPointX;
	var curPointY;
	var nextPointX;
	var nextPointY;
	var nextPointOffset;
	var readColor;
	while(queue.length > 0) {
		curPointY = queue.pop();
		curPointX = queue.pop();
		var _g = 0;
		while(_g < 4) {
			var i = _g++;
			nextPointX = curPointX + dx[i];
			nextPointY = curPointY + dy[i];
			if(nextPointX < minX || nextPointY < minY || nextPointX >= maxX || nextPointY >= maxY) {
				continue;
			}
			nextPointOffset = (nextPointY * image.width + nextPointX) * 4;
			switch(format1) {
			case 0:
				readColor = (data[nextPointOffset] & 255) << 24 | (data[nextPointOffset + 1] & 255) << 16 | (data[nextPointOffset + 2] & 255) << 8 | data[nextPointOffset + 3] & 255;
				break;
			case 1:
				readColor = (data[nextPointOffset + 1] & 255) << 24 | (data[nextPointOffset + 2] & 255) << 16 | (data[nextPointOffset + 3] & 255) << 8 | data[nextPointOffset] & 255;
				break;
			case 2:
				readColor = (data[nextPointOffset + 2] & 255) << 24 | (data[nextPointOffset + 1] & 255) << 16 | (data[nextPointOffset] & 255) << 8 | data[nextPointOffset + 3] & 255;
				break;
			}
			if(premultiplied) {
				if((readColor & 255) != 0 && (readColor & 255) != 255) {
					lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (readColor & 255);
					readColor = (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((readColor >>> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((readColor >>> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((readColor >>> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | readColor & 255 & 255;
				}
			}
			if(readColor == hitColor) {
				switch(format1) {
				case 0:
					data[nextPointOffset] = fillColor >>> 24 & 255;
					data[nextPointOffset + 1] = fillColor >>> 16 & 255;
					data[nextPointOffset + 2] = fillColor >>> 8 & 255;
					data[nextPointOffset + 3] = fillColor & 255;
					break;
				case 1:
					data[nextPointOffset] = fillColor & 255;
					data[nextPointOffset + 1] = fillColor >>> 24 & 255;
					data[nextPointOffset + 2] = fillColor >>> 16 & 255;
					data[nextPointOffset + 3] = fillColor >>> 8 & 255;
					break;
				case 2:
					data[nextPointOffset] = fillColor >>> 8 & 255;
					data[nextPointOffset + 1] = fillColor >>> 16 & 255;
					data[nextPointOffset + 2] = fillColor >>> 24 & 255;
					data[nextPointOffset + 3] = fillColor & 255;
					break;
				}
				queue.push(nextPointX);
				queue.push(nextPointY);
			}
		}
	}
	image.dirty = true;
	image.version++;
};
lime_graphics_utils_ImageDataUtil.getColorBoundsRect = function(image,mask,color,findColor,format) {
	if(findColor == null) {
		findColor = true;
	}
	var left = image.width + 1;
	var right = 0;
	var top = image.height + 1;
	var bottom = 0;
	var _color;
	var _mask;
	switch(format) {
	case 1:
		var argb = color;
		var rgba = 0;
		rgba = (argb >>> 16 & 255 & 255) << 24 | (argb >>> 8 & 255 & 255) << 16 | (argb & 255 & 255) << 8 | argb >>> 24 & 255 & 255;
		_color = rgba;
		var argb1 = mask;
		var rgba1 = 0;
		rgba1 = (argb1 >>> 16 & 255 & 255) << 24 | (argb1 >>> 8 & 255 & 255) << 16 | (argb1 & 255 & 255) << 8 | argb1 >>> 24 & 255 & 255;
		_mask = rgba1;
		break;
	case 2:
		var bgra = color;
		var rgba2 = 0;
		rgba2 = (bgra >>> 8 & 255 & 255) << 24 | (bgra >>> 16 & 255 & 255) << 16 | (bgra >>> 24 & 255 & 255) << 8 | bgra & 255 & 255;
		_color = rgba2;
		var bgra1 = mask;
		var rgba3 = 0;
		rgba3 = (bgra1 >>> 8 & 255 & 255) << 24 | (bgra1 >>> 16 & 255 & 255) << 16 | (bgra1 >>> 24 & 255 & 255) << 8 | bgra1 & 255 & 255;
		_mask = rgba3;
		break;
	default:
		_color = color;
		_mask = mask;
	}
	if(!image.get_transparent()) {
		_color = (_color >>> 24 & 255 & 255) << 24 | (_color >>> 16 & 255 & 255) << 16 | (_color >>> 8 & 255 & 255) << 8 | 255;
		_mask = (_mask >>> 24 & 255 & 255) << 24 | (_mask >>> 16 & 255 & 255) << 16 | (_mask >>> 8 & 255 & 255) << 8 | 255;
	}
	var pixel;
	var hit;
	var _g1 = 0;
	var _g = image.width;
	while(_g1 < _g) {
		var x = _g1++;
		hit = false;
		var _g3 = 0;
		var _g2 = image.height;
		while(_g3 < _g2) {
			pixel = image.getPixel32(x,_g3++,0);
			if(findColor) {
				hit = (pixel & _mask) == _color;
			} else {
				hit = (pixel & _mask) != _color;
			}
			if(hit) {
				if(x < left) {
					left = x;
				}
				break;
			}
		}
		if(hit) {
			break;
		}
	}
	var ix;
	var _g11 = 0;
	var _g4 = image.width;
	while(_g11 < _g4) {
		ix = image.width - 1 - _g11++;
		hit = false;
		var _g31 = 0;
		var _g21 = image.height;
		while(_g31 < _g21) {
			pixel = image.getPixel32(ix,_g31++,0);
			if(findColor) {
				hit = (pixel & _mask) == _color;
			} else {
				hit = (pixel & _mask) != _color;
			}
			if(hit) {
				if(ix > right) {
					right = ix;
				}
				break;
			}
		}
		if(hit) {
			break;
		}
	}
	var _g12 = 0;
	var _g5 = image.height;
	while(_g12 < _g5) {
		var y = _g12++;
		hit = false;
		var _g32 = 0;
		var _g22 = image.width;
		while(_g32 < _g22) {
			pixel = image.getPixel32(_g32++,y,0);
			if(findColor) {
				hit = (pixel & _mask) == _color;
			} else {
				hit = (pixel & _mask) != _color;
			}
			if(hit) {
				if(y < top) {
					top = y;
				}
				break;
			}
		}
		if(hit) {
			break;
		}
	}
	var iy;
	var _g13 = 0;
	var _g6 = image.height;
	while(_g13 < _g6) {
		iy = image.height - 1 - _g13++;
		hit = false;
		var _g33 = 0;
		var _g23 = image.width;
		while(_g33 < _g23) {
			pixel = image.getPixel32(_g33++,iy,0);
			if(findColor) {
				hit = (pixel & _mask) == _color;
			} else {
				hit = (pixel & _mask) != _color;
			}
			if(hit) {
				if(iy > bottom) {
					bottom = iy;
				}
				break;
			}
		}
		if(hit) {
			break;
		}
	}
	var w = right - left;
	var h = bottom - top;
	if(w > 0) {
		++w;
	}
	if(h > 0) {
		++h;
	}
	if(w < 0) {
		w = 0;
	}
	if(h < 0) {
		h = 0;
	}
	if(left == right) {
		w = 1;
	}
	if(top == bottom) {
		h = 1;
	}
	if(left > image.width) {
		left = 0;
	}
	if(top > image.height) {
		top = 0;
	}
	return new lime_math_Rectangle(left,top,w,h);
};
lime_graphics_utils_ImageDataUtil.getPixel = function(image,x,y,format) {
	var pixel;
	var data = image.buffer.data;
	var offset = 4 * (y + image.offsetY) * image.buffer.width + (x + image.offsetX) * 4;
	var premultiplied = image.buffer.premultiplied;
	switch(image.buffer.format) {
	case 0:
		pixel = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
		break;
	case 1:
		pixel = (data[offset + 1] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset] & 255;
		break;
	case 2:
		pixel = (data[offset + 2] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 3] & 255;
		break;
	}
	if(premultiplied) {
		if((pixel & 255) != 0 && (pixel & 255) != 255) {
			lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (pixel & 255);
			pixel = (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((pixel >>> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((pixel >>> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((pixel >>> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | pixel & 255 & 255;
		}
	}
	pixel = (pixel >>> 24 & 255 & 255) << 24 | (pixel >>> 16 & 255 & 255) << 16 | (pixel >>> 8 & 255 & 255) << 8 | 0;
	switch(format) {
	case 1:
		var argb = 0;
		argb = (pixel & 255 & 255) << 24 | (pixel >>> 24 & 255 & 255) << 16 | (pixel >>> 16 & 255 & 255) << 8 | pixel >>> 8 & 255 & 255;
		return argb;
	case 2:
		var bgra = 0;
		bgra = (pixel >>> 8 & 255 & 255) << 24 | (pixel >>> 16 & 255 & 255) << 16 | (pixel >>> 24 & 255 & 255) << 8 | pixel & 255 & 255;
		return bgra;
	default:
		return pixel;
	}
};
lime_graphics_utils_ImageDataUtil.getPixel32 = function(image,x,y,format) {
	var pixel;
	var data = image.buffer.data;
	var offset = 4 * (y + image.offsetY) * image.buffer.width + (x + image.offsetX) * 4;
	var premultiplied = image.buffer.premultiplied;
	switch(image.buffer.format) {
	case 0:
		pixel = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
		break;
	case 1:
		pixel = (data[offset + 1] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset] & 255;
		break;
	case 2:
		pixel = (data[offset + 2] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 3] & 255;
		break;
	}
	if(premultiplied) {
		if((pixel & 255) != 0 && (pixel & 255) != 255) {
			lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (pixel & 255);
			pixel = (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((pixel >>> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((pixel >>> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((pixel >>> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | pixel & 255 & 255;
		}
	}
	switch(format) {
	case 1:
		var argb = 0;
		argb = (pixel & 255 & 255) << 24 | (pixel >>> 24 & 255 & 255) << 16 | (pixel >>> 16 & 255 & 255) << 8 | pixel >>> 8 & 255 & 255;
		return argb;
	case 2:
		var bgra = 0;
		bgra = (pixel >>> 8 & 255 & 255) << 24 | (pixel >>> 16 & 255 & 255) << 16 | (pixel >>> 24 & 255 & 255) << 8 | pixel & 255 & 255;
		return bgra;
	default:
		return pixel;
	}
};
lime_graphics_utils_ImageDataUtil.getPixels = function(image,rect,format) {
	if(image.buffer.data == null) {
		return null;
	}
	var bytes = new haxe_io_Bytes(new ArrayBuffer((rect.width * rect.height | 0) * 4));
	var data = image.buffer.data;
	var sourceFormat = image.buffer.format;
	var premultiplied = image.buffer.premultiplied;
	var dataView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(image,rect);
	var position;
	var argb;
	var bgra;
	var pixel;
	var destPosition = 0;
	var _g1 = 0;
	var _g = dataView.height;
	while(_g1 < _g) {
		position = dataView.offset + dataView.stride * _g1++;
		var _g3 = 0;
		var _g2 = dataView.width;
		while(_g3 < _g2) {
			++_g3;
			switch(sourceFormat) {
			case 0:
				pixel = (data[position] & 255) << 24 | (data[position + 1] & 255) << 16 | (data[position + 2] & 255) << 8 | data[position + 3] & 255;
				break;
			case 1:
				pixel = (data[position + 1] & 255) << 24 | (data[position + 2] & 255) << 16 | (data[position + 3] & 255) << 8 | data[position] & 255;
				break;
			case 2:
				pixel = (data[position + 2] & 255) << 24 | (data[position + 1] & 255) << 16 | (data[position] & 255) << 8 | data[position + 3] & 255;
				break;
			}
			if(premultiplied) {
				if((pixel & 255) != 0 && (pixel & 255) != 255) {
					lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (pixel & 255);
					pixel = (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((pixel >>> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((pixel >>> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((pixel >>> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | pixel & 255 & 255;
				}
			}
			switch(format) {
			case 1:
				var argb1 = 0;
				argb1 = (pixel & 255 & 255) << 24 | (pixel >>> 24 & 255 & 255) << 16 | (pixel >>> 16 & 255 & 255) << 8 | pixel >>> 8 & 255 & 255;
				argb = argb1;
				pixel = argb;
				break;
			case 2:
				var bgra1 = 0;
				bgra1 = (pixel >>> 8 & 255 & 255) << 24 | (pixel >>> 16 & 255 & 255) << 16 | (pixel >>> 24 & 255 & 255) << 8 | pixel & 255 & 255;
				bgra = bgra1;
				pixel = bgra;
				break;
			default:
			}
			bytes.b[destPosition++] = pixel >>> 24 & 255 & 255;
			bytes.b[destPosition++] = pixel >>> 16 & 255 & 255;
			bytes.b[destPosition++] = pixel >>> 8 & 255 & 255;
			bytes.b[destPosition++] = pixel & 255 & 255;
			position += 4;
		}
	}
	return bytes;
};
lime_graphics_utils_ImageDataUtil.merge = function(image,sourceImage,sourceRect,destPoint,redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier) {
	if(image.buffer.data == null || sourceImage.buffer.data == null) {
		return;
	}
	var sourceView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(sourceImage,sourceRect);
	var destView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(image,new lime_math_Rectangle(destPoint.x,destPoint.y,sourceView.width,sourceView.height));
	var sourceData = sourceImage.buffer.data;
	var destData = image.buffer.data;
	var sourceFormat = sourceImage.buffer.format;
	var destFormat = image.buffer.format;
	var sourcePremultiplied = sourceImage.buffer.premultiplied;
	var destPremultiplied = image.buffer.premultiplied;
	var sourcePosition;
	var destPosition;
	var sourcePixel;
	var destPixel;
	var _g1 = 0;
	var _g = destView.height;
	while(_g1 < _g) {
		var y = _g1++;
		sourcePosition = sourceView.offset + sourceView.stride * y;
		destPosition = destView.offset + destView.stride * y;
		var _g3 = 0;
		var _g2 = destView.width;
		while(_g3 < _g2) {
			++_g3;
			switch(sourceFormat) {
			case 0:
				sourcePixel = (sourceData[sourcePosition] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition + 2] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
				break;
			case 1:
				sourcePixel = (sourceData[sourcePosition + 1] & 255) << 24 | (sourceData[sourcePosition + 2] & 255) << 16 | (sourceData[sourcePosition + 3] & 255) << 8 | sourceData[sourcePosition] & 255;
				break;
			case 2:
				sourcePixel = (sourceData[sourcePosition + 2] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
				break;
			}
			if(sourcePremultiplied) {
				if((sourcePixel & 255) != 0 && (sourcePixel & 255) != 255) {
					lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (sourcePixel & 255);
					sourcePixel = (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((sourcePixel >>> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((sourcePixel >>> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((sourcePixel >>> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | sourcePixel & 255 & 255;
				}
			}
			switch(destFormat) {
			case 0:
				destPixel = (destData[destPosition] & 255) << 24 | (destData[destPosition + 1] & 255) << 16 | (destData[destPosition + 2] & 255) << 8 | destData[destPosition + 3] & 255;
				break;
			case 1:
				destPixel = (destData[destPosition + 1] & 255) << 24 | (destData[destPosition + 2] & 255) << 16 | (destData[destPosition + 3] & 255) << 8 | destData[destPosition] & 255;
				break;
			case 2:
				destPixel = (destData[destPosition + 2] & 255) << 24 | (destData[destPosition + 1] & 255) << 16 | (destData[destPosition] & 255) << 8 | destData[destPosition + 3] & 255;
				break;
			}
			if(destPremultiplied) {
				if((destPixel & 255) != 0 && (destPixel & 255) != 255) {
					lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (destPixel & 255);
					destPixel = (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((destPixel >>> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((destPixel >>> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((destPixel >>> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | destPixel & 255 & 255;
				}
			}
			destPixel = ((((sourcePixel >>> 24 & 255) * redMultiplier + (destPixel >>> 24 & 255) * (256 - redMultiplier)) / 256 | 0) & 255) << 24 | (destPixel >>> 16 & 255 & 255) << 16 | (destPixel >>> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
			destPixel = (destPixel >>> 24 & 255 & 255) << 24 | ((((sourcePixel >>> 16 & 255) * greenMultiplier + (destPixel >>> 16 & 255) * (256 - greenMultiplier)) / 256 | 0) & 255) << 16 | (destPixel >>> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
			destPixel = (destPixel >>> 24 & 255 & 255) << 24 | (destPixel >>> 16 & 255 & 255) << 16 | ((((sourcePixel >>> 8 & 255) * blueMultiplier + (destPixel >>> 8 & 255) * (256 - blueMultiplier)) / 256 | 0) & 255) << 8 | destPixel & 255 & 255;
			destPixel = (destPixel >>> 24 & 255 & 255) << 24 | (destPixel >>> 16 & 255 & 255) << 16 | (destPixel >>> 8 & 255 & 255) << 8 | (((sourcePixel & 255) * alphaMultiplier + (destPixel & 255) * (256 - alphaMultiplier)) / 256 | 0) & 255;
			if(destPremultiplied) {
				if((destPixel & 255) == 0) {
					if(destPixel != 0) {
						destPixel = 0;
					}
				} else if((destPixel & 255) != 255) {
					lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[destPixel & 255];
					destPixel = ((destPixel >>> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((destPixel >>> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((destPixel >>> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | destPixel & 255 & 255;
				}
			}
			switch(destFormat) {
			case 0:
				destData[destPosition] = destPixel >>> 24 & 255;
				destData[destPosition + 1] = destPixel >>> 16 & 255;
				destData[destPosition + 2] = destPixel >>> 8 & 255;
				destData[destPosition + 3] = destPixel & 255;
				break;
			case 1:
				destData[destPosition] = destPixel & 255;
				destData[destPosition + 1] = destPixel >>> 24 & 255;
				destData[destPosition + 2] = destPixel >>> 16 & 255;
				destData[destPosition + 3] = destPixel >>> 8 & 255;
				break;
			case 2:
				destData[destPosition] = destPixel >>> 8 & 255;
				destData[destPosition + 1] = destPixel >>> 16 & 255;
				destData[destPosition + 2] = destPixel >>> 24 & 255;
				destData[destPosition + 3] = destPixel & 255;
				break;
			}
			sourcePosition += 4;
			destPosition += 4;
		}
	}
	image.dirty = true;
	image.version++;
};
lime_graphics_utils_ImageDataUtil.multiplyAlpha = function(image) {
	var data = image.buffer.data;
	if(data == null || !image.buffer.transparent) {
		return;
	}
	var format = image.buffer.format;
	var length = data.length / 4 | 0;
	var pixel;
	var _g1 = 0;
	while(_g1 < length) {
		var i = _g1++;
		var offset = i * 4;
		switch(format) {
		case 0:
			pixel = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
			break;
		case 1:
			pixel = (data[offset + 1] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset] & 255;
			break;
		case 2:
			pixel = (data[offset + 2] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 3] & 255;
			break;
		}
		var offset1 = i * 4;
		if((pixel & 255) == 0) {
			if(pixel != 0) {
				pixel = 0;
			}
		} else if((pixel & 255) != 255) {
			lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[pixel & 255];
			pixel = ((pixel >>> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((pixel >>> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((pixel >>> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | pixel & 255 & 255;
		}
		switch(format) {
		case 0:
			data[offset1] = pixel >>> 24 & 255;
			data[offset1 + 1] = pixel >>> 16 & 255;
			data[offset1 + 2] = pixel >>> 8 & 255;
			data[offset1 + 3] = pixel & 255;
			break;
		case 1:
			data[offset1] = pixel & 255;
			data[offset1 + 1] = pixel >>> 24 & 255;
			data[offset1 + 2] = pixel >>> 16 & 255;
			data[offset1 + 3] = pixel >>> 8 & 255;
			break;
		case 2:
			data[offset1] = pixel >>> 8 & 255;
			data[offset1 + 1] = pixel >>> 16 & 255;
			data[offset1 + 2] = pixel >>> 24 & 255;
			data[offset1 + 3] = pixel & 255;
			break;
		}
	}
	image.buffer.premultiplied = true;
	image.dirty = true;
	image.version++;
};
lime_graphics_utils_ImageDataUtil.resize = function(image,newWidth,newHeight) {
	var buffer = image.buffer;
	if(buffer.width == newWidth && buffer.height == newHeight) {
		return;
	}
	var elements = newWidth * newHeight * 4;
	var this1;
	if(elements != null) {
		this1 = new Uint8Array(elements);
	} else {
		this1 = null;
	}
	var newBuffer = new lime_graphics_ImageBuffer(this1,newWidth,newHeight);
	var imageWidth = image.width;
	var imageHeight = image.height;
	var data = image.get_data();
	var newData = newBuffer.data;
	var sourceIndex;
	var sourceIndexX;
	var sourceIndexY;
	var sourceIndexXY;
	var index;
	var sourceX;
	var sourceY;
	var u;
	var v;
	var uRatio;
	var vRatio;
	var uOpposite;
	var vOpposite;
	var _g1 = 0;
	while(_g1 < newHeight) {
		var y = _g1++;
		var _g3 = 0;
		while(_g3 < newWidth) {
			var x = _g3++;
			u = (x + 0.5) / newWidth * imageWidth - 0.5;
			v = (y + 0.5) / newHeight * imageHeight - 0.5;
			sourceX = u | 0;
			sourceY = v | 0;
			sourceIndex = (sourceY * imageWidth + sourceX) * 4;
			if(sourceX < imageWidth - 1) {
				sourceIndexX = sourceIndex + 4;
			} else {
				sourceIndexX = sourceIndex;
			}
			if(sourceY < imageHeight - 1) {
				sourceIndexY = sourceIndex + imageWidth * 4;
			} else {
				sourceIndexY = sourceIndex;
			}
			if(sourceIndexX != sourceIndex) {
				sourceIndexXY = sourceIndexY + 4;
			} else {
				sourceIndexXY = sourceIndexY;
			}
			index = (y * newWidth + x) * 4;
			uRatio = u - sourceX;
			vRatio = v - sourceY;
			uOpposite = 1 - uRatio;
			vOpposite = 1 - vRatio;
			newData[index] = (_$UInt_UInt_$Impl_$.toFloat(data[sourceIndex]) * uOpposite + _$UInt_UInt_$Impl_$.toFloat(data[sourceIndexX]) * uRatio) * vOpposite + (_$UInt_UInt_$Impl_$.toFloat(data[sourceIndexY]) * uOpposite + _$UInt_UInt_$Impl_$.toFloat(data[sourceIndexXY]) * uRatio) * vRatio | 0;
			newData[index + 1] = (_$UInt_UInt_$Impl_$.toFloat(data[sourceIndex + 1]) * uOpposite + _$UInt_UInt_$Impl_$.toFloat(data[sourceIndexX + 1]) * uRatio) * vOpposite + (_$UInt_UInt_$Impl_$.toFloat(data[sourceIndexY + 1]) * uOpposite + _$UInt_UInt_$Impl_$.toFloat(data[sourceIndexXY + 1]) * uRatio) * vRatio | 0;
			newData[index + 2] = (_$UInt_UInt_$Impl_$.toFloat(data[sourceIndex + 2]) * uOpposite + _$UInt_UInt_$Impl_$.toFloat(data[sourceIndexX + 2]) * uRatio) * vOpposite + (_$UInt_UInt_$Impl_$.toFloat(data[sourceIndexY + 2]) * uOpposite + _$UInt_UInt_$Impl_$.toFloat(data[sourceIndexXY + 2]) * uRatio) * vRatio | 0;
			if(data[sourceIndexX + 3] == 0 || data[sourceIndexY + 3] == 0 || data[sourceIndexXY + 3] == 0) {
				newData[index + 3] = 0;
			} else {
				newData[index + 3] = data[sourceIndex + 3];
			}
		}
	}
	buffer.data = newBuffer.data;
	buffer.width = newWidth;
	buffer.height = newHeight;
	buffer.__srcImage = null;
	buffer.__srcImageData = null;
	buffer.__srcCanvas = null;
	buffer.__srcContext = null;
	image.dirty = true;
	image.version++;
};
lime_graphics_utils_ImageDataUtil.resizeBuffer = function(image,newWidth,newHeight) {
	var buffer = image.buffer;
	var data = image.get_data();
	var elements = newWidth * newHeight * 4;
	var this1;
	if(elements != null) {
		this1 = new Uint8Array(elements);
	} else {
		this1 = null;
	}
	var newData = this1;
	var sourceIndex;
	var index;
	var _g1 = 0;
	var _g = buffer.height;
	while(_g1 < _g) {
		var y = _g1++;
		var _g3 = 0;
		var _g2 = buffer.width;
		while(_g3 < _g2) {
			var x = _g3++;
			sourceIndex = (y * buffer.width + x) * 4;
			index = (y * newWidth + x) * 4;
			newData[index] = data[sourceIndex];
			newData[index + 1] = data[sourceIndex + 1];
			newData[index + 2] = data[sourceIndex + 2];
			newData[index + 3] = data[sourceIndex + 3];
		}
	}
	buffer.data = newData;
	buffer.width = newWidth;
	buffer.height = newHeight;
};
lime_graphics_utils_ImageDataUtil.setFormat = function(image,format) {
	var data = image.buffer.data;
	if(data == null) {
		return;
	}
	var index;
	var length = data.length / 4 | 0;
	var r1;
	var g1;
	var b1;
	var a1;
	var r2;
	var g2;
	var b2;
	var a2;
	var r;
	var g;
	var b;
	var a;
	switch(image.get_format()) {
	case 0:
		r1 = 0;
		g1 = 1;
		b1 = 2;
		a1 = 3;
		break;
	case 1:
		r1 = 1;
		g1 = 2;
		b1 = 3;
		a1 = 0;
		break;
	case 2:
		r1 = 2;
		g1 = 1;
		b1 = 0;
		a1 = 3;
		break;
	}
	switch(format) {
	case 0:
		r2 = 0;
		g2 = 1;
		b2 = 2;
		a2 = 3;
		break;
	case 1:
		r2 = 1;
		g2 = 2;
		b2 = 3;
		a2 = 0;
		break;
	case 2:
		r2 = 2;
		g2 = 1;
		b2 = 0;
		a2 = 3;
		break;
	}
	var _g2 = 0;
	while(_g2 < length) {
		index = _g2++ * 4;
		r = data[index + r1];
		g = data[index + g1];
		b = data[index + b1];
		a = data[index + a1];
		data[index + r2] = r;
		data[index + g2] = g;
		data[index + b2] = b;
		data[index + a2] = a;
	}
	image.buffer.format = format;
	image.dirty = true;
	image.version++;
};
lime_graphics_utils_ImageDataUtil.setPixel = function(image,x,y,color,format) {
	var pixel;
	switch(format) {
	case 1:
		var argb = color;
		var rgba = 0;
		rgba = (argb >>> 16 & 255 & 255) << 24 | (argb >>> 8 & 255 & 255) << 16 | (argb & 255 & 255) << 8 | argb >>> 24 & 255 & 255;
		pixel = rgba;
		break;
	case 2:
		var bgra = color;
		var rgba1 = 0;
		rgba1 = (bgra >>> 8 & 255 & 255) << 24 | (bgra >>> 16 & 255 & 255) << 16 | (bgra >>> 24 & 255 & 255) << 8 | bgra & 255 & 255;
		pixel = rgba1;
		break;
	default:
		pixel = color;
	}
	var source = 0;
	var data = image.buffer.data;
	var offset = 4 * (y + image.offsetY) * image.buffer.width + (x + image.offsetX) * 4;
	var premultiplied = image.buffer.premultiplied;
	switch(image.buffer.format) {
	case 0:
		source = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
		break;
	case 1:
		source = (data[offset + 1] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset] & 255;
		break;
	case 2:
		source = (data[offset + 2] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 3] & 255;
		break;
	}
	if(premultiplied) {
		if((source & 255) != 0 && (source & 255) != 255) {
			lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (source & 255);
			source = (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((source >>> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((source >>> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((source >>> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | source & 255 & 255;
		}
	}
	pixel = (pixel >>> 24 & 255 & 255) << 24 | (pixel >>> 16 & 255 & 255) << 16 | (pixel >>> 8 & 255 & 255) << 8 | source & 255 & 255;
	var data1 = image.buffer.data;
	var offset1 = 4 * (y + image.offsetY) * image.buffer.width + (x + image.offsetX) * 4;
	if(image.buffer.premultiplied) {
		if((pixel & 255) == 0) {
			if(pixel != 0) {
				pixel = 0;
			}
		} else if((pixel & 255) != 255) {
			lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[pixel & 255];
			pixel = ((pixel >>> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((pixel >>> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((pixel >>> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | pixel & 255 & 255;
		}
	}
	switch(image.buffer.format) {
	case 0:
		data1[offset1] = pixel >>> 24 & 255;
		data1[offset1 + 1] = pixel >>> 16 & 255;
		data1[offset1 + 2] = pixel >>> 8 & 255;
		data1[offset1 + 3] = pixel & 255;
		break;
	case 1:
		data1[offset1] = pixel & 255;
		data1[offset1 + 1] = pixel >>> 24 & 255;
		data1[offset1 + 2] = pixel >>> 16 & 255;
		data1[offset1 + 3] = pixel >>> 8 & 255;
		break;
	case 2:
		data1[offset1] = pixel >>> 8 & 255;
		data1[offset1 + 1] = pixel >>> 16 & 255;
		data1[offset1 + 2] = pixel >>> 24 & 255;
		data1[offset1 + 3] = pixel & 255;
		break;
	}
	image.dirty = true;
	image.version++;
};
lime_graphics_utils_ImageDataUtil.setPixel32 = function(image,x,y,color,format) {
	var pixel;
	switch(format) {
	case 1:
		var argb = color;
		var rgba = 0;
		rgba = (argb >>> 16 & 255 & 255) << 24 | (argb >>> 8 & 255 & 255) << 16 | (argb & 255 & 255) << 8 | argb >>> 24 & 255 & 255;
		pixel = rgba;
		break;
	case 2:
		var bgra = color;
		var rgba1 = 0;
		rgba1 = (bgra >>> 8 & 255 & 255) << 24 | (bgra >>> 16 & 255 & 255) << 16 | (bgra >>> 24 & 255 & 255) << 8 | bgra & 255 & 255;
		pixel = rgba1;
		break;
	default:
		pixel = color;
	}
	if(!image.get_transparent()) {
		pixel = (pixel >>> 24 & 255 & 255) << 24 | (pixel >>> 16 & 255 & 255) << 16 | (pixel >>> 8 & 255 & 255) << 8 | 255;
	}
	var data = image.buffer.data;
	var offset = 4 * (y + image.offsetY) * image.buffer.width + (x + image.offsetX) * 4;
	if(image.buffer.premultiplied) {
		if((pixel & 255) == 0) {
			if(pixel != 0) {
				pixel = 0;
			}
		} else if((pixel & 255) != 255) {
			lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[pixel & 255];
			pixel = ((pixel >>> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((pixel >>> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((pixel >>> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | pixel & 255 & 255;
		}
	}
	switch(image.buffer.format) {
	case 0:
		data[offset] = pixel >>> 24 & 255;
		data[offset + 1] = pixel >>> 16 & 255;
		data[offset + 2] = pixel >>> 8 & 255;
		data[offset + 3] = pixel & 255;
		break;
	case 1:
		data[offset] = pixel & 255;
		data[offset + 1] = pixel >>> 24 & 255;
		data[offset + 2] = pixel >>> 16 & 255;
		data[offset + 3] = pixel >>> 8 & 255;
		break;
	case 2:
		data[offset] = pixel >>> 8 & 255;
		data[offset + 1] = pixel >>> 16 & 255;
		data[offset + 2] = pixel >>> 24 & 255;
		data[offset + 3] = pixel & 255;
		break;
	}
	image.dirty = true;
	image.version++;
};
lime_graphics_utils_ImageDataUtil.setPixels = function(image,rect,bytes,format) {
	if(image.buffer.data == null) {
		return;
	}
	var data = image.buffer.data;
	var sourceFormat = image.buffer.format;
	var premultiplied = image.buffer.premultiplied;
	var dataView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(image,rect);
	var row;
	var color;
	var pixel;
	var transparent = image.get_transparent();
	var dataPosition = 0;
	var _g1 = 0;
	var _g = dataView.height;
	while(_g1 < _g) {
		row = dataView.offset + dataView.stride * _g1++;
		var _g3 = 0;
		var _g2 = dataView.width;
		while(_g3 < _g2) {
			var x = _g3++;
			color = bytes.b[dataPosition + 3] | bytes.b[dataPosition + 2] << 8 | bytes.b[dataPosition + 1] << 16 | bytes.b[dataPosition] << 24;
			dataPosition += 4;
			switch(format) {
			case 1:
				var argb = color;
				var rgba = 0;
				rgba = (argb >>> 16 & 255 & 255) << 24 | (argb >>> 8 & 255 & 255) << 16 | (argb & 255 & 255) << 8 | argb >>> 24 & 255 & 255;
				pixel = rgba;
				break;
			case 2:
				var bgra = color;
				var rgba1 = 0;
				rgba1 = (bgra >>> 8 & 255 & 255) << 24 | (bgra >>> 16 & 255 & 255) << 16 | (bgra >>> 24 & 255 & 255) << 8 | bgra & 255 & 255;
				pixel = rgba1;
				break;
			default:
				pixel = color;
			}
			if(!transparent) {
				pixel = (pixel >>> 24 & 255 & 255) << 24 | (pixel >>> 16 & 255 & 255) << 16 | (pixel >>> 8 & 255 & 255) << 8 | 255;
			}
			var offset = row + x * 4;
			if(premultiplied) {
				if((pixel & 255) == 0) {
					if(pixel != 0) {
						pixel = 0;
					}
				} else if((pixel & 255) != 255) {
					lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[pixel & 255];
					pixel = ((pixel >>> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((pixel >>> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((pixel >>> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | pixel & 255 & 255;
				}
			}
			switch(sourceFormat) {
			case 0:
				data[offset] = pixel >>> 24 & 255;
				data[offset + 1] = pixel >>> 16 & 255;
				data[offset + 2] = pixel >>> 8 & 255;
				data[offset + 3] = pixel & 255;
				break;
			case 1:
				data[offset] = pixel & 255;
				data[offset + 1] = pixel >>> 24 & 255;
				data[offset + 2] = pixel >>> 16 & 255;
				data[offset + 3] = pixel >>> 8 & 255;
				break;
			case 2:
				data[offset] = pixel >>> 8 & 255;
				data[offset + 1] = pixel >>> 16 & 255;
				data[offset + 2] = pixel >>> 24 & 255;
				data[offset + 3] = pixel & 255;
				break;
			}
		}
	}
	image.dirty = true;
	image.version++;
};
lime_graphics_utils_ImageDataUtil.threshold = function(image,sourceImage,sourceRect,destPoint,operation,threshold,color,mask,copySource,format) {
	var _color;
	var _mask;
	var _threshold;
	switch(format) {
	case 1:
		var argb = color;
		var rgba = 0;
		rgba = (argb >>> 16 & 255 & 255) << 24 | (argb >>> 8 & 255 & 255) << 16 | (argb & 255 & 255) << 8 | argb >>> 24 & 255 & 255;
		_color = rgba;
		var argb1 = mask;
		var rgba1 = 0;
		rgba1 = (argb1 >>> 16 & 255 & 255) << 24 | (argb1 >>> 8 & 255 & 255) << 16 | (argb1 & 255 & 255) << 8 | argb1 >>> 24 & 255 & 255;
		_mask = rgba1;
		var argb2 = threshold;
		var rgba2 = 0;
		rgba2 = (argb2 >>> 16 & 255 & 255) << 24 | (argb2 >>> 8 & 255 & 255) << 16 | (argb2 & 255 & 255) << 8 | argb2 >>> 24 & 255 & 255;
		_threshold = rgba2;
		break;
	case 2:
		var bgra = color;
		var rgba3 = 0;
		rgba3 = (bgra >>> 8 & 255 & 255) << 24 | (bgra >>> 16 & 255 & 255) << 16 | (bgra >>> 24 & 255 & 255) << 8 | bgra & 255 & 255;
		_color = rgba3;
		var bgra1 = mask;
		var rgba4 = 0;
		rgba4 = (bgra1 >>> 8 & 255 & 255) << 24 | (bgra1 >>> 16 & 255 & 255) << 16 | (bgra1 >>> 24 & 255 & 255) << 8 | bgra1 & 255 & 255;
		_mask = rgba4;
		var bgra2 = threshold;
		var rgba5 = 0;
		rgba5 = (bgra2 >>> 8 & 255 & 255) << 24 | (bgra2 >>> 16 & 255 & 255) << 16 | (bgra2 >>> 24 & 255 & 255) << 8 | bgra2 & 255 & 255;
		_threshold = rgba5;
		break;
	default:
		_color = color;
		_mask = mask;
		_threshold = threshold;
	}
	var _operation;
	switch(operation) {
	case "!=":
		_operation = 0;
		break;
	case "<":
		_operation = 2;
		break;
	case "<=":
		_operation = 3;
		break;
	case "==":
		_operation = 1;
		break;
	case ">":
		_operation = 4;
		break;
	case ">=":
		_operation = 5;
		break;
	default:
		_operation = -1;
	}
	if(_operation == -1) {
		return 0;
	}
	var srcData = sourceImage.buffer.data;
	var destData = image.buffer.data;
	if(srcData == null || destData == null) {
		return 0;
	}
	var hits = 0;
	var srcView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(sourceImage,sourceRect);
	var destView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(image,new lime_math_Rectangle(destPoint.x,destPoint.y,srcView.width,srcView.height));
	var srcFormat = sourceImage.buffer.format;
	var destFormat = image.buffer.format;
	var srcPremultiplied = sourceImage.buffer.premultiplied;
	var destPremultiplied = image.buffer.premultiplied;
	var srcPosition;
	var destPosition;
	var srcPixel;
	var pixelMask;
	var test;
	var value;
	var _g1 = 0;
	var _g = destView.height;
	while(_g1 < _g) {
		var y = _g1++;
		srcPosition = srcView.offset + srcView.stride * y;
		destPosition = destView.offset + destView.stride * y;
		var _g3 = 0;
		var _g2 = destView.width;
		while(_g3 < _g2) {
			++_g3;
			switch(srcFormat) {
			case 0:
				srcPixel = (srcData[srcPosition] & 255) << 24 | (srcData[srcPosition + 1] & 255) << 16 | (srcData[srcPosition + 2] & 255) << 8 | srcData[srcPosition + 3] & 255;
				break;
			case 1:
				srcPixel = (srcData[srcPosition + 1] & 255) << 24 | (srcData[srcPosition + 2] & 255) << 16 | (srcData[srcPosition + 3] & 255) << 8 | srcData[srcPosition] & 255;
				break;
			case 2:
				srcPixel = (srcData[srcPosition + 2] & 255) << 24 | (srcData[srcPosition + 1] & 255) << 16 | (srcData[srcPosition] & 255) << 8 | srcData[srcPosition + 3] & 255;
				break;
			}
			if(srcPremultiplied) {
				if((srcPixel & 255) != 0 && (srcPixel & 255) != 255) {
					lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (srcPixel & 255);
					srcPixel = (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((srcPixel >>> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((srcPixel >>> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((srcPixel >>> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | srcPixel & 255 & 255;
				}
			}
			pixelMask = srcPixel & _mask;
			var tmp1;
			var tmp2;
			tmp1 = pixelMask >>> 24 & 255;
			tmp2 = _threshold >>> 24 & 255;
			if(tmp1 != tmp2) {
				if(_$UInt_UInt_$Impl_$.gt(tmp1,tmp2)) {
					value = 1;
				} else {
					value = -1;
				}
			} else {
				tmp1 = pixelMask >>> 16 & 255;
				tmp2 = _threshold >>> 16 & 255;
				if(tmp1 != tmp2) {
					if(_$UInt_UInt_$Impl_$.gt(tmp1,tmp2)) {
						value = 1;
					} else {
						value = -1;
					}
				} else {
					tmp1 = pixelMask >>> 8 & 255;
					tmp2 = _threshold >>> 8 & 255;
					if(tmp1 != tmp2) {
						if(_$UInt_UInt_$Impl_$.gt(tmp1,tmp2)) {
							value = 1;
						} else {
							value = -1;
						}
					} else {
						tmp1 = pixelMask & 255;
						tmp2 = _threshold & 255;
						if(tmp1 != tmp2) {
							if(_$UInt_UInt_$Impl_$.gt(tmp1,tmp2)) {
								value = 1;
							} else {
								value = -1;
							}
						} else {
							value = 0;
						}
					}
				}
			}
			switch(_operation) {
			case 0:
				test = value != 0;
				break;
			case 1:
				test = value == 0;
				break;
			case 2:
				test = value == -1;
				break;
			case 3:
				if(value != 0) {
					test = value == -1;
				} else {
					test = true;
				}
				break;
			case 4:
				test = value == 1;
				break;
			case 5:
				if(value != 0) {
					test = value == 1;
				} else {
					test = true;
				}
				break;
			default:
				test = false;
			}
			if(test) {
				if(destPremultiplied) {
					if((_color & 255) == 0) {
						if(_color != 0) {
							_color = 0;
						}
					} else if((_color & 255) != 255) {
						lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[_color & 255];
						_color = ((_color >>> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((_color >>> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((_color >>> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | _color & 255 & 255;
					}
				}
				switch(destFormat) {
				case 0:
					destData[destPosition] = _color >>> 24 & 255;
					destData[destPosition + 1] = _color >>> 16 & 255;
					destData[destPosition + 2] = _color >>> 8 & 255;
					destData[destPosition + 3] = _color & 255;
					break;
				case 1:
					destData[destPosition] = _color & 255;
					destData[destPosition + 1] = _color >>> 24 & 255;
					destData[destPosition + 2] = _color >>> 16 & 255;
					destData[destPosition + 3] = _color >>> 8 & 255;
					break;
				case 2:
					destData[destPosition] = _color >>> 8 & 255;
					destData[destPosition + 1] = _color >>> 16 & 255;
					destData[destPosition + 2] = _color >>> 24 & 255;
					destData[destPosition + 3] = _color & 255;
					break;
				}
				++hits;
			} else if(copySource) {
				if(destPremultiplied) {
					if((srcPixel & 255) == 0) {
						if(srcPixel != 0) {
							srcPixel = 0;
						}
					} else if((srcPixel & 255) != 255) {
						lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[srcPixel & 255];
						srcPixel = ((srcPixel >>> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((srcPixel >>> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((srcPixel >>> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | srcPixel & 255 & 255;
					}
				}
				switch(destFormat) {
				case 0:
					destData[destPosition] = srcPixel >>> 24 & 255;
					destData[destPosition + 1] = srcPixel >>> 16 & 255;
					destData[destPosition + 2] = srcPixel >>> 8 & 255;
					destData[destPosition + 3] = srcPixel & 255;
					break;
				case 1:
					destData[destPosition] = srcPixel & 255;
					destData[destPosition + 1] = srcPixel >>> 24 & 255;
					destData[destPosition + 2] = srcPixel >>> 16 & 255;
					destData[destPosition + 3] = srcPixel >>> 8 & 255;
					break;
				case 2:
					destData[destPosition] = srcPixel >>> 8 & 255;
					destData[destPosition + 1] = srcPixel >>> 16 & 255;
					destData[destPosition + 2] = srcPixel >>> 24 & 255;
					destData[destPosition + 3] = srcPixel & 255;
					break;
				}
			}
			srcPosition += 4;
			destPosition += 4;
		}
	}
	if(hits > 0) {
		image.dirty = true;
		image.version++;
	}
	return hits;
};
lime_graphics_utils_ImageDataUtil.unmultiplyAlpha = function(image) {
	var data = image.buffer.data;
	if(data == null) {
		return;
	}
	var format = image.buffer.format;
	var length = data.length / 4 | 0;
	var pixel;
	var _g1 = 0;
	while(_g1 < length) {
		var i = _g1++;
		var offset = i * 4;
		switch(format) {
		case 0:
			pixel = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
			break;
		case 1:
			pixel = (data[offset + 1] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset] & 255;
			break;
		case 2:
			pixel = (data[offset + 2] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 3] & 255;
			break;
		}
		if((pixel & 255) != 0 && (pixel & 255) != 255) {
			lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (pixel & 255);
			pixel = (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((pixel >>> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((pixel >>> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((pixel >>> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | pixel & 255 & 255;
		}
		var offset1 = i * 4;
		switch(format) {
		case 0:
			data[offset1] = pixel >>> 24 & 255;
			data[offset1 + 1] = pixel >>> 16 & 255;
			data[offset1 + 2] = pixel >>> 8 & 255;
			data[offset1 + 3] = pixel & 255;
			break;
		case 1:
			data[offset1] = pixel & 255;
			data[offset1 + 1] = pixel >>> 24 & 255;
			data[offset1 + 2] = pixel >>> 16 & 255;
			data[offset1 + 3] = pixel >>> 8 & 255;
			break;
		case 2:
			data[offset1] = pixel >>> 8 & 255;
			data[offset1 + 1] = pixel >>> 16 & 255;
			data[offset1 + 2] = pixel >>> 24 & 255;
			data[offset1 + 3] = pixel & 255;
			break;
		}
	}
	image.buffer.premultiplied = false;
	image.dirty = true;
	image.version++;
};
lime_graphics_utils_ImageDataUtil.__pixelCompare = function(n1,n2) {
	var tmp1;
	var tmp2;
	tmp1 = n1 >>> 24 & 255;
	tmp2 = n2 >>> 24 & 255;
	if(tmp1 != tmp2) {
		if(_$UInt_UInt_$Impl_$.gt(tmp1,tmp2)) {
			return 1;
		} else {
			return -1;
		}
	} else {
		tmp1 = n1 >>> 16 & 255;
		tmp2 = n2 >>> 16 & 255;
		if(tmp1 != tmp2) {
			if(_$UInt_UInt_$Impl_$.gt(tmp1,tmp2)) {
				return 1;
			} else {
				return -1;
			}
		} else {
			tmp1 = n1 >>> 8 & 255;
			tmp2 = n2 >>> 8 & 255;
			if(tmp1 != tmp2) {
				if(_$UInt_UInt_$Impl_$.gt(tmp1,tmp2)) {
					return 1;
				} else {
					return -1;
				}
			} else {
				tmp1 = n1 & 255;
				tmp2 = n2 & 255;
				if(tmp1 != tmp2) {
					if(_$UInt_UInt_$Impl_$.gt(tmp1,tmp2)) {
						return 1;
					} else {
						return -1;
					}
				} else {
					return 0;
				}
			}
		}
	}
};
var lime_graphics_utils__$ImageDataUtil_ImageDataView = function(image,rect) {
	this.image = image;
	if(rect == null) {
		this.rect = image.get_rect();
	} else {
		if(rect.x < 0) {
			rect.x = 0;
		}
		if(rect.y < 0) {
			rect.y = 0;
		}
		if(rect.x + rect.width > image.width) {
			rect.width = image.width - rect.x;
		}
		if(rect.y + rect.height > image.height) {
			rect.height = image.height - rect.y;
		}
		if(rect.width < 0) {
			rect.width = 0;
		}
		if(rect.height < 0) {
			rect.height = 0;
		}
		this.rect = rect;
	}
	this.stride = image.buffer.get_stride();
	this.x = Math.ceil(this.rect.x);
	this.y = Math.ceil(this.rect.y);
	this.width = Math.floor(this.rect.width);
	this.height = Math.floor(this.rect.height);
	this.offset = this.stride * (this.y + image.offsetY) + (this.x + image.offsetX) * 4;
};
$hxClasses["lime.graphics.utils._ImageDataUtil.ImageDataView"] = lime_graphics_utils__$ImageDataUtil_ImageDataView;
lime_graphics_utils__$ImageDataUtil_ImageDataView.__name__ = ["lime","graphics","utils","_ImageDataUtil","ImageDataView"];
lime_graphics_utils__$ImageDataUtil_ImageDataView.prototype = {
	x: null
	,y: null
	,height: null
	,width: null
	,image: null
	,offset: null
	,rect: null
	,stride: null
	,clip: function(x,y,width,height) {
		this.rect.__contract(x,y,width,height);
		this.x = Math.ceil(this.rect.x);
		this.y = Math.ceil(this.rect.y);
		this.width = Math.floor(this.rect.width);
		this.height = Math.floor(this.rect.height);
		this.offset = this.stride * (this.y + this.image.offsetY) + (this.x + this.image.offsetX) * 4;
	}
	,row: function(y) {
		return this.offset + this.stride * y;
	}
	,__class__: lime_graphics_utils__$ImageDataUtil_ImageDataView
};
var lime_math__$ColorMatrix_ColorMatrix_$Impl_$ = {};
$hxClasses["lime.math._ColorMatrix.ColorMatrix_Impl_"] = lime_math__$ColorMatrix_ColorMatrix_$Impl_$;
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__name__ = ["lime","math","_ColorMatrix","ColorMatrix_Impl_"];
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__properties__ = {set_redOffset:"set_redOffset",get_redOffset:"get_redOffset",set_redMultiplier:"set_redMultiplier",get_redMultiplier:"get_redMultiplier",set_greenOffset:"set_greenOffset",get_greenOffset:"get_greenOffset",set_greenMultiplier:"set_greenMultiplier",get_greenMultiplier:"get_greenMultiplier",set_color:"set_color",get_color:"get_color",set_blueOffset:"set_blueOffset",get_blueOffset:"get_blueOffset",set_blueMultiplier:"set_blueMultiplier",get_blueMultiplier:"get_blueMultiplier",set_alphaOffset:"set_alphaOffset",get_alphaOffset:"get_alphaOffset",set_alphaMultiplier:"set_alphaMultiplier",get_alphaMultiplier:"get_alphaMultiplier"}
lime_math__$ColorMatrix_ColorMatrix_$Impl_$._new = function(data) {
	var this1;
	if(data != null && data.length == 20) {
		this1 = data;
	} else {
		var array = lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__identity;
		var this2;
		if(array != null) {
			this2 = new Float32Array(array);
		} else {
			this2 = null;
		}
		this1 = this2;
	}
	return this1;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.clone = function(this1) {
	var this2;
	if(this1 != null) {
		this2 = new Float32Array(this1);
	} else {
		this2 = null;
	}
	return lime_math__$ColorMatrix_ColorMatrix_$Impl_$._new(this2);
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.concat = function(this1,second) {
	this1[0] += second[0];
	this1[6] += second[6];
	this1[12] += second[12];
	this1[18] += second[18];
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.copyFrom = function(this1,other) {
	this1.set(other);
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.identity = function(this1) {
	this1[0] = 1;
	this1[1] = 0;
	this1[2] = 0;
	this1[3] = 0;
	this1[4] = 0;
	this1[5] = 0;
	this1[6] = 1;
	this1[7] = 0;
	this1[8] = 0;
	this1[9] = 0;
	this1[10] = 0;
	this1[11] = 0;
	this1[12] = 1;
	this1[13] = 0;
	this1[14] = 0;
	this1[15] = 0;
	this1[16] = 0;
	this1[17] = 0;
	this1[18] = 1;
	this1[19] = 0;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.getAlphaTable = function(this1) {
	if(lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__alphaTable == null) {
		lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__alphaTable = new Uint8Array(256);
	}
	var value;
	lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__alphaTable[0] = 0;
	var _g = 1;
	while(_g < 256) {
		var i = _g++;
		value = Math.floor(i * this1[18] + this1[19] * 255);
		if(value > 255) {
			value = 255;
		}
		if(value < 0) {
			value = 0;
		}
		lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__alphaTable[i] = value;
	}
	return lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__alphaTable;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.getBlueTable = function(this1) {
	if(lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__blueTable == null) {
		lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__blueTable = new Uint8Array(256);
	}
	var value;
	var _g = 0;
	while(_g < 256) {
		var i = _g++;
		value = Math.floor(i * this1[12] + this1[14] * 255);
		if(value > 255) {
			value = 255;
		}
		if(value < 0) {
			value = 0;
		}
		lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__blueTable[i] = value;
	}
	return lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__blueTable;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.getGreenTable = function(this1) {
	if(lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__greenTable == null) {
		lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__greenTable = new Uint8Array(256);
	}
	var value;
	var _g = 0;
	while(_g < 256) {
		var i = _g++;
		value = Math.floor(i * this1[6] + this1[9] * 255);
		if(value > 255) {
			value = 255;
		}
		if(value < 0) {
			value = 0;
		}
		lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__greenTable[i] = value;
	}
	return lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__greenTable;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.getRedTable = function(this1) {
	if(lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__redTable == null) {
		lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__redTable = new Uint8Array(256);
	}
	var value;
	var _g = 0;
	while(_g < 256) {
		var i = _g++;
		value = Math.floor(i * this1[0] + this1[4] * 255);
		if(value > 255) {
			value = 255;
		}
		if(value < 0) {
			value = 0;
		}
		lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__redTable[i] = value;
	}
	return lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__redTable;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__toFlashColorTransform = function(this1) {
	return null;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.get_alphaMultiplier = function(this1) {
	return this1[18];
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.set_alphaMultiplier = function(this1,value) {
	return this1[18] = value;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.get_alphaOffset = function(this1) {
	return this1[19] * 255;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.set_alphaOffset = function(this1,value) {
	return this1[19] = value / 255;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.get_blueMultiplier = function(this1) {
	return this1[12];
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.set_blueMultiplier = function(this1,value) {
	return this1[12] = value;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.get_blueOffset = function(this1) {
	return this1[14] * 255;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.set_blueOffset = function(this1,value) {
	return this1[14] = value / 255;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.get_color = function(this1) {
	return (this1[4] * 255 | 0) << 16 | (this1[9] * 255 | 0) << 8 | (this1[14] * 255 | 0);
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.set_color = function(this1,value) {
	this1[4] = (value >> 16 & 255) / 255;
	this1[9] = (value >> 8 & 255) / 255;
	this1[14] = (value & 255) / 255;
	this1[0] = 0;
	this1[6] = 0;
	this1[12] = 0;
	return lime_math__$ColorMatrix_ColorMatrix_$Impl_$.get_color(this1);
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.get_greenMultiplier = function(this1) {
	return this1[6];
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.set_greenMultiplier = function(this1,value) {
	return this1[6] = value;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.get_greenOffset = function(this1) {
	return this1[9] * 255;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.set_greenOffset = function(this1,value) {
	return this1[9] = value / 255;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.get_redMultiplier = function(this1) {
	return this1[0];
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.set_redMultiplier = function(this1,value) {
	return this1[0] = value;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.get_redOffset = function(this1) {
	return this1[4] * 255;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.set_redOffset = function(this1,value) {
	return this1[4] = value / 255;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.get = function(this1,index) {
	return this1[index];
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.set = function(this1,index,value) {
	return this1[index] = value;
};
var lime_math_Matrix3 = function(a,b,c,d,tx,ty) {
	if(ty == null) {
		ty = 0;
	}
	if(tx == null) {
		tx = 0;
	}
	if(d == null) {
		d = 1;
	}
	if(c == null) {
		c = 0;
	}
	if(b == null) {
		b = 0;
	}
	if(a == null) {
		a = 1;
	}
	this.a = a;
	this.b = b;
	this.c = c;
	this.d = d;
	this.tx = tx;
	this.ty = ty;
};
$hxClasses["lime.math.Matrix3"] = lime_math_Matrix3;
lime_math_Matrix3.__name__ = ["lime","math","Matrix3"];
lime_math_Matrix3.prototype = {
	a: null
	,b: null
	,c: null
	,d: null
	,tx: null
	,ty: null
	,clone: function() {
		return new lime_math_Matrix3(this.a,this.b,this.c,this.d,this.tx,this.ty);
	}
	,concat: function(m) {
		var a1 = this.a * m.a + this.b * m.c;
		this.b = this.a * m.b + this.b * m.d;
		this.a = a1;
		var c1 = this.c * m.a + this.d * m.c;
		this.d = this.c * m.b + this.d * m.d;
		this.c = c1;
		var tx1 = this.tx * m.a + this.ty * m.c + m.tx;
		this.ty = this.tx * m.b + this.ty * m.d + m.ty;
		this.tx = tx1;
	}
	,copyColumnFrom: function(column,vector4) {
		if(column > 2) {
			throw new js__$Boot_HaxeError("Column " + column + " out of bounds (2)");
		} else if(column == 0) {
			this.a = vector4.x;
			this.c = vector4.y;
		} else if(column == 1) {
			this.b = vector4.x;
			this.d = vector4.y;
		} else {
			this.tx = vector4.x;
			this.ty = vector4.y;
		}
	}
	,copyColumnTo: function(column,vector4) {
		if(column > 2) {
			throw new js__$Boot_HaxeError("Column " + column + " out of bounds (2)");
		} else if(column == 0) {
			vector4.x = this.a;
			vector4.y = this.c;
			vector4.z = 0;
		} else if(column == 1) {
			vector4.x = this.b;
			vector4.y = this.d;
			vector4.z = 0;
		} else {
			vector4.x = this.tx;
			vector4.y = this.ty;
			vector4.z = 1;
		}
	}
	,copyFrom: function(sourceMatrix3) {
		this.a = sourceMatrix3.a;
		this.b = sourceMatrix3.b;
		this.c = sourceMatrix3.c;
		this.d = sourceMatrix3.d;
		this.tx = sourceMatrix3.tx;
		this.ty = sourceMatrix3.ty;
	}
	,copyRowFrom: function(row,vector4) {
		if(row > 2) {
			throw new js__$Boot_HaxeError("Row " + row + " out of bounds (2)");
		} else if(row == 0) {
			this.a = vector4.x;
			this.c = vector4.y;
		} else if(row == 1) {
			this.b = vector4.x;
			this.d = vector4.y;
		} else {
			this.tx = vector4.x;
			this.ty = vector4.y;
		}
	}
	,copyRowTo: function(row,vector4) {
		if(row > 2) {
			throw new js__$Boot_HaxeError("Row " + row + " out of bounds (2)");
		} else if(row == 0) {
			vector4.x = this.a;
			vector4.y = this.b;
			vector4.z = this.tx;
		} else if(row == 1) {
			vector4.x = this.c;
			vector4.y = this.d;
			vector4.z = this.ty;
		} else {
			vector4.x = 0;
			vector4.y = 0;
			vector4.z = 1;
		}
	}
	,createBox: function(scaleX,scaleY,rotation,tx,ty) {
		if(ty == null) {
			ty = 0;
		}
		if(tx == null) {
			tx = 0;
		}
		if(rotation == null) {
			rotation = 0;
		}
		this.a = scaleX;
		this.d = scaleY;
		this.b = rotation;
		this.tx = tx;
		this.ty = ty;
	}
	,createGradientBox: function(width,height,rotation,tx,ty) {
		if(ty == null) {
			ty = 0;
		}
		if(tx == null) {
			tx = 0;
		}
		if(rotation == null) {
			rotation = 0;
		}
		this.a = width / 1638.4;
		this.d = height / 1638.4;
		if(rotation != 0) {
			var cos = Math.cos(rotation);
			var sin = Math.sin(rotation);
			this.b = sin * this.d;
			this.c = -sin * this.a;
			this.a *= cos;
			this.d *= cos;
		} else {
			this.b = 0;
			this.c = 0;
		}
		this.tx = tx + width / 2;
		this.ty = ty + height / 2;
	}
	,equals: function(Matrix3) {
		if(Matrix3 != null && this.tx == Matrix3.tx && this.ty == Matrix3.ty && this.a == Matrix3.a && this.b == Matrix3.b && this.c == Matrix3.c) {
			return this.d == Matrix3.d;
		} else {
			return false;
		}
	}
	,deltaTransformVector2: function(Vector2) {
		return new lime_math_Vector2(Vector2.x * this.a + Vector2.y * this.c,Vector2.x * this.b + Vector2.y * this.d);
	}
	,identity: function() {
		this.a = 1;
		this.b = 0;
		this.c = 0;
		this.d = 1;
		this.tx = 0;
		this.ty = 0;
	}
	,invert: function() {
		var norm = this.a * this.d - this.b * this.c;
		if(norm == 0) {
			this.a = this.b = this.c = this.d = 0;
			this.tx = -this.tx;
			this.ty = -this.ty;
		} else {
			norm = 1.0 / norm;
			var a1 = this.d * norm;
			this.d = this.a * norm;
			this.a = a1;
			this.b *= -norm;
			this.c *= -norm;
			var tx1 = -this.a * this.tx - this.c * this.ty;
			this.ty = -this.b * this.tx - this.d * this.ty;
			this.tx = tx1;
		}
		return this;
	}
	,mult: function(m) {
		var result = new lime_math_Matrix3(this.a,this.b,this.c,this.d,this.tx,this.ty);
		result.concat(m);
		return result;
	}
	,rotate: function(theta) {
		var cos = Math.cos(theta);
		var sin = Math.sin(theta);
		var a1 = this.a * cos - this.b * sin;
		this.b = this.a * sin + this.b * cos;
		this.a = a1;
		var c1 = this.c * cos - this.d * sin;
		this.d = this.c * sin + this.d * cos;
		this.c = c1;
		var tx1 = this.tx * cos - this.ty * sin;
		this.ty = this.tx * sin + this.ty * cos;
		this.tx = tx1;
	}
	,scale: function(sx,sy) {
		this.a *= sx;
		this.b *= sy;
		this.c *= sx;
		this.d *= sy;
		this.tx *= sx;
		this.ty *= sy;
	}
	,setRotation: function(theta,scale) {
		if(scale == null) {
			scale = 1;
		}
		this.a = Math.cos(theta) * scale;
		this.c = Math.sin(theta) * scale;
		this.b = -this.c;
		this.d = this.a;
	}
	,setTo: function(a,b,c,d,tx,ty) {
		this.a = a;
		this.b = b;
		this.c = c;
		this.d = d;
		this.tx = tx;
		this.ty = ty;
	}
	,to3DString: function(roundPixels) {
		if(roundPixels == null) {
			roundPixels = false;
		}
		if(roundPixels) {
			return "Matrix33d(" + this.a + ", " + this.b + ", " + "0, 0, " + this.c + ", " + this.d + ", " + "0, 0, 0, 0, 1, 0, " + (this.tx | 0) + ", " + (this.ty | 0) + ", 0, 1)";
		} else {
			return "Matrix33d(" + this.a + ", " + this.b + ", " + "0, 0, " + this.c + ", " + this.d + ", " + "0, 0, 0, 0, 1, 0, " + this.tx + ", " + this.ty + ", 0, 1)";
		}
	}
	,toMozString: function() {
		return "Matrix3(" + this.a + ", " + this.b + ", " + this.c + ", " + this.d + ", " + this.tx + "px, " + this.ty + "px)";
	}
	,toString: function() {
		return "Matrix3(" + this.a + ", " + this.b + ", " + this.c + ", " + this.d + ", " + this.tx + ", " + this.ty + ")";
	}
	,transformVector2: function(pos) {
		return new lime_math_Vector2(pos.x * this.a + pos.y * this.c + this.tx,pos.x * this.b + pos.y * this.d + this.ty);
	}
	,translate: function(dx,dy) {
		this.tx += dx;
		this.ty += dy;
	}
	,__cleanValues: function() {
		this.a = Math.round(this.a * 1000) / 1000;
		this.b = Math.round(this.b * 1000) / 1000;
		this.c = Math.round(this.c * 1000) / 1000;
		this.d = Math.round(this.d * 1000) / 1000;
		this.tx = Math.round(this.tx * 10) / 10;
		this.ty = Math.round(this.ty * 10) / 10;
	}
	,__transformX: function(pos) {
		return pos.x * this.a + pos.y * this.c + this.tx;
	}
	,__transformY: function(pos) {
		return pos.x * this.b + pos.y * this.d + this.ty;
	}
	,__translateTransformed: function(pos) {
		this.tx = pos.x * this.a + pos.y * this.c + this.tx;
		this.ty = pos.x * this.b + pos.y * this.d + this.ty;
	}
	,__class__: lime_math_Matrix3
};
var lime_math__$Matrix4_Matrix4_$Impl_$ = {};
$hxClasses["lime.math._Matrix4.Matrix4_Impl_"] = lime_math__$Matrix4_Matrix4_$Impl_$;
lime_math__$Matrix4_Matrix4_$Impl_$.__name__ = ["lime","math","_Matrix4","Matrix4_Impl_"];
lime_math__$Matrix4_Matrix4_$Impl_$.__properties__ = {set_position:"set_position",get_position:"get_position",get_determinant:"get_determinant"}
lime_math__$Matrix4_Matrix4_$Impl_$._new = function(data) {
	var this1;
	if(data != null && data.length == 16) {
		this1 = data;
	} else {
		var array = lime_math__$Matrix4_Matrix4_$Impl_$.__identity;
		var this2;
		if(array != null) {
			this2 = new Float32Array(array);
		} else {
			this2 = null;
		}
		this1 = this2;
	}
	return this1;
};
lime_math__$Matrix4_Matrix4_$Impl_$.append = function(this1,lhs) {
	var m111 = this1[0];
	var m121 = this1[4];
	var m131 = this1[8];
	var m141 = this1[12];
	var m112 = this1[1];
	var m122 = this1[5];
	var m132 = this1[9];
	var m142 = this1[13];
	var m113 = this1[2];
	var m123 = this1[6];
	var m133 = this1[10];
	var m143 = this1[14];
	var m114 = this1[3];
	var m124 = this1[7];
	var m134 = this1[11];
	var m144 = this1[15];
	var m211 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,0);
	var m221 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,4);
	var m231 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,8);
	var m241 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,12);
	var m212 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,1);
	var m222 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,5);
	var m232 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,9);
	var m242 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,13);
	var m213 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,2);
	var m223 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,6);
	var m233 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,10);
	var m243 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,14);
	var m214 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,3);
	var m224 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,7);
	var m234 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,11);
	var m244 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,15);
	this1[0] = m111 * m211 + m112 * m221 + m113 * m231 + m114 * m241;
	this1[1] = m111 * m212 + m112 * m222 + m113 * m232 + m114 * m242;
	this1[2] = m111 * m213 + m112 * m223 + m113 * m233 + m114 * m243;
	this1[3] = m111 * m214 + m112 * m224 + m113 * m234 + m114 * m244;
	this1[4] = m121 * m211 + m122 * m221 + m123 * m231 + m124 * m241;
	this1[5] = m121 * m212 + m122 * m222 + m123 * m232 + m124 * m242;
	this1[6] = m121 * m213 + m122 * m223 + m123 * m233 + m124 * m243;
	this1[7] = m121 * m214 + m122 * m224 + m123 * m234 + m124 * m244;
	this1[8] = m131 * m211 + m132 * m221 + m133 * m231 + m134 * m241;
	this1[9] = m131 * m212 + m132 * m222 + m133 * m232 + m134 * m242;
	this1[10] = m131 * m213 + m132 * m223 + m133 * m233 + m134 * m243;
	this1[11] = m131 * m214 + m132 * m224 + m133 * m234 + m134 * m244;
	this1[12] = m141 * m211 + m142 * m221 + m143 * m231 + m144 * m241;
	this1[13] = m141 * m212 + m142 * m222 + m143 * m232 + m144 * m242;
	this1[14] = m141 * m213 + m142 * m223 + m143 * m233 + m144 * m243;
	this1[15] = m141 * m214 + m142 * m224 + m143 * m234 + m144 * m244;
};
lime_math__$Matrix4_Matrix4_$Impl_$.appendRotation = function(this1,degrees,axis,pivotPoint) {
	var m = lime_math__$Matrix4_Matrix4_$Impl_$.getAxisRotation(axis.x,axis.y,axis.z,degrees);
	if(pivotPoint != null) {
		lime_math__$Matrix4_Matrix4_$Impl_$.appendTranslation(m,pivotPoint.x,pivotPoint.y,pivotPoint.z);
	}
	lime_math__$Matrix4_Matrix4_$Impl_$.append(this1,m);
};
lime_math__$Matrix4_Matrix4_$Impl_$.appendScale = function(this1,xScale,yScale,zScale) {
	var array = [xScale,0.0,0.0,0.0,0.0,yScale,0.0,0.0,0.0,0.0,zScale,0.0,0.0,0.0,0.0,1.0];
	var this2;
	if(array != null) {
		this2 = new Float32Array(array);
	} else {
		this2 = null;
	}
	lime_math__$Matrix4_Matrix4_$Impl_$.append(this1,lime_math__$Matrix4_Matrix4_$Impl_$._new(this2));
};
lime_math__$Matrix4_Matrix4_$Impl_$.appendTranslation = function(this1,x,y,z) {
	this1[12] += x;
	this1[13] += y;
	this1[14] += z;
};
lime_math__$Matrix4_Matrix4_$Impl_$.clone = function(this1) {
	var this2;
	if(this1 != null) {
		this2 = new Float32Array(this1);
	} else {
		this2 = null;
	}
	return lime_math__$Matrix4_Matrix4_$Impl_$._new(this2);
};
lime_math__$Matrix4_Matrix4_$Impl_$.copyColumnFrom = function(this1,column,vector) {
	switch(column) {
	case 0:
		this1[0] = vector.x;
		this1[1] = vector.y;
		this1[2] = vector.z;
		this1[3] = vector.w;
		break;
	case 1:
		this1[4] = vector.x;
		this1[5] = vector.y;
		this1[6] = vector.z;
		this1[7] = vector.w;
		break;
	case 2:
		this1[8] = vector.x;
		this1[9] = vector.y;
		this1[10] = vector.z;
		this1[11] = vector.w;
		break;
	case 3:
		this1[12] = vector.x;
		this1[13] = vector.y;
		this1[14] = vector.z;
		this1[15] = vector.w;
		break;
	default:
		throw new js__$Boot_HaxeError("Error, Column " + column + " out of bounds [0, ..., 3]");
	}
};
lime_math__$Matrix4_Matrix4_$Impl_$.copyColumnTo = function(this1,column,vector) {
	switch(column) {
	case 0:
		vector.x = this1[0];
		vector.y = this1[1];
		vector.z = this1[2];
		vector.w = this1[3];
		break;
	case 1:
		vector.x = this1[4];
		vector.y = this1[5];
		vector.z = this1[6];
		vector.w = this1[7];
		break;
	case 2:
		vector.x = this1[8];
		vector.y = this1[9];
		vector.z = this1[10];
		vector.w = this1[11];
		break;
	case 3:
		vector.x = this1[12];
		vector.y = this1[13];
		vector.z = this1[14];
		vector.w = this1[15];
		break;
	default:
		throw new js__$Boot_HaxeError("Error, Column " + column + " out of bounds [0, ..., 3]");
	}
};
lime_math__$Matrix4_Matrix4_$Impl_$.copyFrom = function(this1,other) {
	this1.set(other);
};
lime_math__$Matrix4_Matrix4_$Impl_$.copythisFrom = function(this1,array,index,transposeValues) {
	if(transposeValues == null) {
		transposeValues = false;
	}
	if(index == null) {
		index = 0;
	}
	if(transposeValues) {
		lime_math__$Matrix4_Matrix4_$Impl_$.transpose(this1);
	}
	var _g1 = 0;
	var _g = array.length - index;
	while(_g1 < _g) {
		var c = _g1++;
		this1[c] = array[c + index];
	}
	if(transposeValues) {
		lime_math__$Matrix4_Matrix4_$Impl_$.transpose(this1);
	}
};
lime_math__$Matrix4_Matrix4_$Impl_$.copythisTo = function(this1,array,index,transposeValues) {
	if(transposeValues == null) {
		transposeValues = false;
	}
	if(index == null) {
		index = 0;
	}
	if(transposeValues) {
		lime_math__$Matrix4_Matrix4_$Impl_$.transpose(this1);
	}
	var _g1 = 0;
	var _g = this1.length;
	while(_g1 < _g) {
		var c = _g1++;
		array[c + index] = this1[c];
	}
	if(transposeValues) {
		lime_math__$Matrix4_Matrix4_$Impl_$.transpose(this1);
	}
};
lime_math__$Matrix4_Matrix4_$Impl_$.copyRowFrom = function(this1,row,vector) {
	switch(row) {
	case 0:
		this1[0] = vector.x;
		this1[4] = vector.y;
		this1[8] = vector.z;
		this1[12] = vector.w;
		break;
	case 1:
		this1[1] = vector.x;
		this1[5] = vector.y;
		this1[9] = vector.z;
		this1[13] = vector.w;
		break;
	case 2:
		this1[2] = vector.x;
		this1[6] = vector.y;
		this1[10] = vector.z;
		this1[14] = vector.w;
		break;
	case 3:
		this1[3] = vector.x;
		this1[7] = vector.y;
		this1[11] = vector.z;
		this1[15] = vector.w;
		break;
	default:
		throw new js__$Boot_HaxeError("Error, Row " + row + " out of bounds [0, ..., 3]");
	}
};
lime_math__$Matrix4_Matrix4_$Impl_$.create2D = function(x,y,scale,rotation) {
	if(rotation == null) {
		rotation = 0;
	}
	if(scale == null) {
		scale = 1;
	}
	var theta = rotation * Math.PI / 180.0;
	var c = Math.cos(theta);
	var s = Math.sin(theta);
	var array = [c * scale,-s * scale,0,0,s * scale,c * scale,0,0,0,0,1,0,x,y,0,1];
	var this1;
	if(array != null) {
		this1 = new Float32Array(array);
	} else {
		this1 = null;
	}
	return lime_math__$Matrix4_Matrix4_$Impl_$._new(this1);
};
lime_math__$Matrix4_Matrix4_$Impl_$.createABCD = function(a,b,c,d,tx,ty) {
	var array = [a,b,0,0,c,d,0,0,0,0,1,0,tx,ty,0,1];
	var this1;
	if(array != null) {
		this1 = new Float32Array(array);
	} else {
		this1 = null;
	}
	return lime_math__$Matrix4_Matrix4_$Impl_$._new(this1);
};
lime_math__$Matrix4_Matrix4_$Impl_$.createOrtho = function(x0,x1,y0,y1,zNear,zFar) {
	var sx = 1.0 / (x1 - x0);
	var sy = 1.0 / (y1 - y0);
	var sz = 1.0 / (zFar - zNear);
	var array = [2.0 * sx,0,0,0,0,2.0 * sy,0,0,0,0,-2.0 * sz,0,-(x0 + x1) * sx,-(y0 + y1) * sy,-(zNear + zFar) * sz,1];
	var this1;
	if(array != null) {
		this1 = new Float32Array(array);
	} else {
		this1 = null;
	}
	return lime_math__$Matrix4_Matrix4_$Impl_$._new(this1);
};
lime_math__$Matrix4_Matrix4_$Impl_$.copyRowTo = function(this1,row,vector) {
	switch(row) {
	case 0:
		vector.x = this1[0];
		vector.y = this1[4];
		vector.z = this1[8];
		vector.w = this1[12];
		break;
	case 1:
		vector.x = this1[1];
		vector.y = this1[5];
		vector.z = this1[9];
		vector.w = this1[13];
		break;
	case 2:
		vector.x = this1[2];
		vector.y = this1[6];
		vector.z = this1[10];
		vector.w = this1[14];
		break;
	case 3:
		vector.x = this1[3];
		vector.y = this1[7];
		vector.z = this1[11];
		vector.w = this1[15];
		break;
	default:
		throw new js__$Boot_HaxeError("Error, Row " + row + " out of bounds [0, ..., 3]");
	}
};
lime_math__$Matrix4_Matrix4_$Impl_$.copyToMatrix4 = function(this1,other) {
	(js_Boot.__cast(other , Float32Array)).set(this1);
};
lime_math__$Matrix4_Matrix4_$Impl_$.deltaTransformVector = function(this1,v) {
	var x = v.x;
	var y = v.y;
	var z = v.z;
	return new lime_math_Vector4(x * this1[0] + y * this1[4] + z * this1[8] + this1[3],x * this1[1] + y * this1[5] + z * this1[9] + this1[7],x * this1[2] + y * this1[6] + z * this1[10] + this1[11],0);
};
lime_math__$Matrix4_Matrix4_$Impl_$.identity = function(this1) {
	this1[0] = 1;
	this1[1] = 0;
	this1[2] = 0;
	this1[3] = 0;
	this1[4] = 0;
	this1[5] = 1;
	this1[6] = 0;
	this1[7] = 0;
	this1[8] = 0;
	this1[9] = 0;
	this1[10] = 1;
	this1[11] = 0;
	this1[12] = 0;
	this1[13] = 0;
	this1[14] = 0;
	this1[15] = 1;
};
lime_math__$Matrix4_Matrix4_$Impl_$.interpolate = function(thisMat,toMat,percent) {
	var m = lime_math__$Matrix4_Matrix4_$Impl_$._new();
	var _g = 0;
	while(_g < 16) {
		var i = _g++;
		lime_math__$Matrix4_Matrix4_$Impl_$.set(m,i,lime_math__$Matrix4_Matrix4_$Impl_$.get(thisMat,i) + (lime_math__$Matrix4_Matrix4_$Impl_$.get(toMat,i) - lime_math__$Matrix4_Matrix4_$Impl_$.get(thisMat,i)) * percent);
	}
	return m;
};
lime_math__$Matrix4_Matrix4_$Impl_$.interpolateTo = function(this1,toMat,percent) {
	var _g = 0;
	while(_g < 16) {
		var i = _g++;
		this1[i] += (lime_math__$Matrix4_Matrix4_$Impl_$.get(toMat,i) - this1[i]) * percent;
	}
};
lime_math__$Matrix4_Matrix4_$Impl_$.invert = function(this1) {
	var d = lime_math__$Matrix4_Matrix4_$Impl_$.get_determinant(this1);
	var invertable = Math.abs(d) > 0.00000000001;
	if(invertable) {
		d = 1 / d;
		var m11 = this1[0];
		var m21 = this1[4];
		var m31 = this1[8];
		var m41 = this1[12];
		var m12 = this1[1];
		var m22 = this1[5];
		var m32 = this1[9];
		var m42 = this1[13];
		var m13 = this1[2];
		var m23 = this1[6];
		var m33 = this1[10];
		var m43 = this1[14];
		var m14 = this1[3];
		var m24 = this1[7];
		var m34 = this1[11];
		var m44 = this1[15];
		this1[0] = d * (m22 * (m33 * m44 - m43 * m34) - m32 * (m23 * m44 - m43 * m24) + m42 * (m23 * m34 - m33 * m24));
		this1[1] = -d * (m12 * (m33 * m44 - m43 * m34) - m32 * (m13 * m44 - m43 * m14) + m42 * (m13 * m34 - m33 * m14));
		this1[2] = d * (m12 * (m23 * m44 - m43 * m24) - m22 * (m13 * m44 - m43 * m14) + m42 * (m13 * m24 - m23 * m14));
		this1[3] = -d * (m12 * (m23 * m34 - m33 * m24) - m22 * (m13 * m34 - m33 * m14) + m32 * (m13 * m24 - m23 * m14));
		this1[4] = -d * (m21 * (m33 * m44 - m43 * m34) - m31 * (m23 * m44 - m43 * m24) + m41 * (m23 * m34 - m33 * m24));
		this1[5] = d * (m11 * (m33 * m44 - m43 * m34) - m31 * (m13 * m44 - m43 * m14) + m41 * (m13 * m34 - m33 * m14));
		this1[6] = -d * (m11 * (m23 * m44 - m43 * m24) - m21 * (m13 * m44 - m43 * m14) + m41 * (m13 * m24 - m23 * m14));
		this1[7] = d * (m11 * (m23 * m34 - m33 * m24) - m21 * (m13 * m34 - m33 * m14) + m31 * (m13 * m24 - m23 * m14));
		this1[8] = d * (m21 * (m32 * m44 - m42 * m34) - m31 * (m22 * m44 - m42 * m24) + m41 * (m22 * m34 - m32 * m24));
		this1[9] = -d * (m11 * (m32 * m44 - m42 * m34) - m31 * (m12 * m44 - m42 * m14) + m41 * (m12 * m34 - m32 * m14));
		this1[10] = d * (m11 * (m22 * m44 - m42 * m24) - m21 * (m12 * m44 - m42 * m14) + m41 * (m12 * m24 - m22 * m14));
		this1[11] = -d * (m11 * (m22 * m34 - m32 * m24) - m21 * (m12 * m34 - m32 * m14) + m31 * (m12 * m24 - m22 * m14));
		this1[12] = -d * (m21 * (m32 * m43 - m42 * m33) - m31 * (m22 * m43 - m42 * m23) + m41 * (m22 * m33 - m32 * m23));
		this1[13] = d * (m11 * (m32 * m43 - m42 * m33) - m31 * (m12 * m43 - m42 * m13) + m41 * (m12 * m33 - m32 * m13));
		this1[14] = -d * (m11 * (m22 * m43 - m42 * m23) - m21 * (m12 * m43 - m42 * m13) + m41 * (m12 * m23 - m22 * m13));
		this1[15] = d * (m11 * (m22 * m33 - m32 * m23) - m21 * (m12 * m33 - m32 * m13) + m31 * (m12 * m23 - m22 * m13));
	}
	return invertable;
};
lime_math__$Matrix4_Matrix4_$Impl_$.pointAt = function(this1,pos,at,up) {
	if(at == null) {
		at = new lime_math_Vector4(0,0,-1);
	}
	if(up == null) {
		up = new lime_math_Vector4(0,-1,0);
	}
	var dir = new lime_math_Vector4(at.x - pos.x,at.y - pos.y,at.z - pos.z);
	var vup = new lime_math_Vector4(up.x,up.y,up.z,up.w);
	var right;
	var l = Math.sqrt(dir.x * dir.x + dir.y * dir.y + dir.z * dir.z);
	if(l != 0) {
		dir.x /= l;
		dir.y /= l;
		dir.z /= l;
	}
	var l1 = Math.sqrt(vup.x * vup.x + vup.y * vup.y + vup.z * vup.z);
	if(l1 != 0) {
		vup.x /= l1;
		vup.y /= l1;
		vup.z /= l1;
	}
	var dir2 = new lime_math_Vector4(dir.x,dir.y,dir.z,dir.w);
	var s = vup.x * dir.x + vup.y * dir.y + vup.z * dir.z;
	dir2.x *= s;
	dir2.y *= s;
	dir2.z *= s;
	vup = new lime_math_Vector4(vup.x - dir2.x,vup.y - dir2.y,vup.z - dir2.z);
	if(Math.sqrt(vup.x * vup.x + vup.y * vup.y + vup.z * vup.z) > 0) {
		var l2 = Math.sqrt(vup.x * vup.x + vup.y * vup.y + vup.z * vup.z);
		if(l2 != 0) {
			vup.x /= l2;
			vup.y /= l2;
			vup.z /= l2;
		}
	} else if(dir.x != 0) {
		vup = new lime_math_Vector4(-dir.y,dir.x,0);
	} else {
		vup = new lime_math_Vector4(1,0,0);
	}
	right = new lime_math_Vector4(vup.y * dir.z - vup.z * dir.y,vup.z * dir.x - vup.x * dir.z,vup.x * dir.y - vup.y * dir.x,1);
	var l3 = Math.sqrt(right.x * right.x + right.y * right.y + right.z * right.z);
	if(l3 != 0) {
		right.x /= l3;
		right.y /= l3;
		right.z /= l3;
	}
	this1[0] = right.x;
	this1[4] = right.y;
	this1[8] = right.z;
	this1[12] = 0.0;
	this1[1] = vup.x;
	this1[5] = vup.y;
	this1[9] = vup.z;
	this1[13] = 0.0;
	this1[2] = dir.x;
	this1[6] = dir.y;
	this1[10] = dir.z;
	this1[14] = 0.0;
	this1[3] = pos.x;
	this1[7] = pos.y;
	this1[11] = pos.z;
	this1[15] = 1.0;
};
lime_math__$Matrix4_Matrix4_$Impl_$.prepend = function(this1,rhs) {
	var m111 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,0);
	var m121 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,4);
	var m131 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,8);
	var m141 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,12);
	var m112 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,1);
	var m122 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,5);
	var m132 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,9);
	var m142 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,13);
	var m113 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,2);
	var m123 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,6);
	var m133 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,10);
	var m143 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,14);
	var m114 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,3);
	var m124 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,7);
	var m134 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,11);
	var m144 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,15);
	var m211 = this1[0];
	var m221 = this1[4];
	var m231 = this1[8];
	var m241 = this1[12];
	var m212 = this1[1];
	var m222 = this1[5];
	var m232 = this1[9];
	var m242 = this1[13];
	var m213 = this1[2];
	var m223 = this1[6];
	var m233 = this1[10];
	var m243 = this1[14];
	var m214 = this1[3];
	var m224 = this1[7];
	var m234 = this1[11];
	var m244 = this1[15];
	this1[0] = m111 * m211 + m112 * m221 + m113 * m231 + m114 * m241;
	this1[1] = m111 * m212 + m112 * m222 + m113 * m232 + m114 * m242;
	this1[2] = m111 * m213 + m112 * m223 + m113 * m233 + m114 * m243;
	this1[3] = m111 * m214 + m112 * m224 + m113 * m234 + m114 * m244;
	this1[4] = m121 * m211 + m122 * m221 + m123 * m231 + m124 * m241;
	this1[5] = m121 * m212 + m122 * m222 + m123 * m232 + m124 * m242;
	this1[6] = m121 * m213 + m122 * m223 + m123 * m233 + m124 * m243;
	this1[7] = m121 * m214 + m122 * m224 + m123 * m234 + m124 * m244;
	this1[8] = m131 * m211 + m132 * m221 + m133 * m231 + m134 * m241;
	this1[9] = m131 * m212 + m132 * m222 + m133 * m232 + m134 * m242;
	this1[10] = m131 * m213 + m132 * m223 + m133 * m233 + m134 * m243;
	this1[11] = m131 * m214 + m132 * m224 + m133 * m234 + m134 * m244;
	this1[12] = m141 * m211 + m142 * m221 + m143 * m231 + m144 * m241;
	this1[13] = m141 * m212 + m142 * m222 + m143 * m232 + m144 * m242;
	this1[14] = m141 * m213 + m142 * m223 + m143 * m233 + m144 * m243;
	this1[15] = m141 * m214 + m142 * m224 + m143 * m234 + m144 * m244;
};
lime_math__$Matrix4_Matrix4_$Impl_$.prependRotation = function(this1,degrees,axis,pivotPoint) {
	var m = lime_math__$Matrix4_Matrix4_$Impl_$.getAxisRotation(axis.x,axis.y,axis.z,degrees);
	if(pivotPoint != null) {
		lime_math__$Matrix4_Matrix4_$Impl_$.appendTranslation(m,pivotPoint.x,pivotPoint.y,pivotPoint.z);
	}
	lime_math__$Matrix4_Matrix4_$Impl_$.prepend(this1,m);
};
lime_math__$Matrix4_Matrix4_$Impl_$.prependScale = function(this1,xScale,yScale,zScale) {
	var array = [xScale,0.0,0.0,0.0,0.0,yScale,0.0,0.0,0.0,0.0,zScale,0.0,0.0,0.0,0.0,1.0];
	var this2;
	if(array != null) {
		this2 = new Float32Array(array);
	} else {
		this2 = null;
	}
	lime_math__$Matrix4_Matrix4_$Impl_$.prepend(this1,lime_math__$Matrix4_Matrix4_$Impl_$._new(this2));
};
lime_math__$Matrix4_Matrix4_$Impl_$.prependTranslation = function(this1,x,y,z) {
	var m = lime_math__$Matrix4_Matrix4_$Impl_$._new();
	lime_math__$Matrix4_Matrix4_$Impl_$.set_position(m,new lime_math_Vector4(x,y,z));
	lime_math__$Matrix4_Matrix4_$Impl_$.prepend(this1,m);
};
lime_math__$Matrix4_Matrix4_$Impl_$.transformVector = function(this1,v) {
	var x = v.x;
	var y = v.y;
	var z = v.z;
	return new lime_math_Vector4(x * this1[0] + y * this1[4] + z * this1[8] + this1[12],x * this1[1] + y * this1[5] + z * this1[9] + this1[13],x * this1[2] + y * this1[6] + z * this1[10] + this1[14],x * this1[3] + y * this1[7] + z * this1[11] + this1[15]);
};
lime_math__$Matrix4_Matrix4_$Impl_$.transformVectors = function(this1,ain,aout) {
	var i = 0;
	while(i + 3 <= ain.length) {
		var x = ain[i];
		var y = ain[i + 1];
		var z = ain[i + 2];
		aout[i] = x * this1[0] + y * this1[4] + z * this1[8] + this1[12];
		aout[i + 1] = x * this1[1] + y * this1[5] + z * this1[9] + this1[13];
		aout[i + 2] = x * this1[2] + y * this1[6] + z * this1[10] + this1[14];
		i += 3;
	}
};
lime_math__$Matrix4_Matrix4_$Impl_$.transpose = function(this1) {
	var this2;
	if(this1 != null) {
		this2 = new Float32Array(this1);
	} else {
		this2 = null;
	}
	var othis = this2;
	this1[1] = othis[4];
	this1[2] = othis[8];
	this1[3] = othis[12];
	this1[4] = othis[1];
	this1[6] = othis[9];
	this1[7] = othis[13];
	this1[8] = othis[2];
	this1[9] = othis[6];
	this1[11] = othis[14];
	this1[12] = othis[3];
	this1[13] = othis[7];
	this1[14] = othis[11];
};
lime_math__$Matrix4_Matrix4_$Impl_$.getAxisRotation = function(x,y,z,degrees) {
	var m = lime_math__$Matrix4_Matrix4_$Impl_$._new();
	var a1 = new lime_math_Vector4(x,y,z);
	var rad = -degrees * (Math.PI / 180);
	var c = Math.cos(rad);
	var s = Math.sin(rad);
	var t = 1.0 - c;
	lime_math__$Matrix4_Matrix4_$Impl_$.set(m,0,c + a1.x * a1.x * t);
	lime_math__$Matrix4_Matrix4_$Impl_$.set(m,5,c + a1.y * a1.y * t);
	lime_math__$Matrix4_Matrix4_$Impl_$.set(m,10,c + a1.z * a1.z * t);
	var tmp1 = a1.x * a1.y * t;
	var tmp2 = a1.z * s;
	lime_math__$Matrix4_Matrix4_$Impl_$.set(m,4,tmp1 + tmp2);
	lime_math__$Matrix4_Matrix4_$Impl_$.set(m,1,tmp1 - tmp2);
	tmp1 = a1.x * a1.z * t;
	tmp2 = a1.y * s;
	lime_math__$Matrix4_Matrix4_$Impl_$.set(m,8,tmp1 - tmp2);
	lime_math__$Matrix4_Matrix4_$Impl_$.set(m,2,tmp1 + tmp2);
	tmp1 = a1.y * a1.z * t;
	tmp2 = a1.x * s;
	lime_math__$Matrix4_Matrix4_$Impl_$.set(m,9,tmp1 + tmp2);
	lime_math__$Matrix4_Matrix4_$Impl_$.set(m,6,tmp1 - tmp2);
	return m;
};
lime_math__$Matrix4_Matrix4_$Impl_$.get_determinant = function(this1) {
	return (this1[0] * this1[5] - this1[4] * this1[1]) * (this1[10] * this1[15] - this1[14] * this1[11]) - (this1[0] * this1[9] - this1[8] * this1[1]) * (this1[6] * this1[15] - this1[14] * this1[7]) + (this1[0] * this1[13] - this1[12] * this1[1]) * (this1[6] * this1[11] - this1[10] * this1[7]) + (this1[4] * this1[9] - this1[8] * this1[5]) * (this1[2] * this1[15] - this1[14] * this1[3]) - (this1[4] * this1[13] - this1[12] * this1[5]) * (this1[2] * this1[11] - this1[10] * this1[3]) + (this1[8] * this1[13] - this1[12] * this1[9]) * (this1[2] * this1[7] - this1[6] * this1[3]);
};
lime_math__$Matrix4_Matrix4_$Impl_$.get_position = function(this1) {
	return new lime_math_Vector4(this1[12],this1[13],this1[14]);
};
lime_math__$Matrix4_Matrix4_$Impl_$.set_position = function(this1,val) {
	this1[12] = val.x;
	this1[13] = val.y;
	this1[14] = val.z;
	return val;
};
lime_math__$Matrix4_Matrix4_$Impl_$.get = function(this1,index) {
	return this1[index];
};
lime_math__$Matrix4_Matrix4_$Impl_$.set = function(this1,index,value) {
	this1[index] = value;
	return value;
};
var lime_math_Rectangle = function(x,y,width,height) {
	if(height == null) {
		height = 0;
	}
	if(width == null) {
		width = 0;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.x = x;
	this.y = y;
	this.width = width;
	this.height = height;
};
$hxClasses["lime.math.Rectangle"] = lime_math_Rectangle;
lime_math_Rectangle.__name__ = ["lime","math","Rectangle"];
lime_math_Rectangle.prototype = {
	height: null
	,width: null
	,x: null
	,y: null
	,clone: function() {
		return new lime_math_Rectangle(this.x,this.y,this.width,this.height);
	}
	,contains: function(x,y) {
		if(x >= this.x && y >= this.y && x < this.get_right()) {
			return y < this.get_bottom();
		} else {
			return false;
		}
	}
	,containsPoint: function(point) {
		return this.contains(point.x,point.y);
	}
	,containsRect: function(rect) {
		if(rect.width <= 0 || rect.height <= 0) {
			if(rect.x > this.x && rect.y > this.y && rect.get_right() < this.get_right()) {
				return rect.get_bottom() < this.get_bottom();
			} else {
				return false;
			}
		} else if(rect.x >= this.x && rect.y >= this.y && rect.get_right() <= this.get_right()) {
			return rect.get_bottom() <= this.get_bottom();
		} else {
			return false;
		}
	}
	,copyFrom: function(sourceRect) {
		this.x = sourceRect.x;
		this.y = sourceRect.y;
		this.width = sourceRect.width;
		this.height = sourceRect.height;
	}
	,equals: function(toCompare) {
		if(toCompare != null && this.x == toCompare.x && this.y == toCompare.y && this.width == toCompare.width) {
			return this.height == toCompare.height;
		} else {
			return false;
		}
	}
	,inflate: function(dx,dy) {
		this.x -= dx;
		this.width += dx * 2;
		this.y -= dy;
		this.height += dy * 2;
	}
	,inflatePoint: function(point) {
		this.inflate(point.x,point.y);
	}
	,intersection: function(toIntersect) {
		var x0 = this.x < toIntersect.x ? toIntersect.x : this.x;
		var x1 = this.get_right() > toIntersect.get_right() ? toIntersect.get_right() : this.get_right();
		if(x1 <= x0) {
			return new lime_math_Rectangle();
		}
		var y0 = this.y < toIntersect.y ? toIntersect.y : this.y;
		var y1 = this.get_bottom() > toIntersect.get_bottom() ? toIntersect.get_bottom() : this.get_bottom();
		if(y1 <= y0) {
			return new lime_math_Rectangle();
		}
		return new lime_math_Rectangle(x0,y0,x1 - x0,y1 - y0);
	}
	,intersects: function(toIntersect) {
		if((this.get_right() > toIntersect.get_right() ? toIntersect.get_right() : this.get_right()) <= (this.x < toIntersect.x ? toIntersect.x : this.x)) {
			return false;
		}
		return (this.get_bottom() > toIntersect.get_bottom() ? toIntersect.get_bottom() : this.get_bottom()) > (this.y < toIntersect.y ? toIntersect.y : this.y);
	}
	,isEmpty: function() {
		if(!(this.width <= 0)) {
			return this.height <= 0;
		} else {
			return true;
		}
	}
	,offset: function(dx,dy) {
		this.x += dx;
		this.y += dy;
	}
	,offsetPoint: function(point) {
		this.x += point.x;
		this.y += point.y;
	}
	,setEmpty: function() {
		this.x = this.y = this.width = this.height = 0;
	}
	,setTo: function(xa,ya,widtha,heighta) {
		this.x = xa;
		this.y = ya;
		this.width = widtha;
		this.height = heighta;
	}
	,transform: function(m) {
		var tx0 = m.a * this.x + m.c * this.y;
		var tx1 = tx0;
		var ty0 = m.b * this.x + m.d * this.y;
		var ty1 = ty0;
		var tx = m.a * (this.x + this.width) + m.c * this.y;
		var ty = m.b * (this.x + this.width) + m.d * this.y;
		if(tx < tx0) {
			tx0 = tx;
		}
		if(ty < ty0) {
			ty0 = ty;
		}
		if(tx > tx1) {
			tx1 = tx;
		}
		if(ty > ty1) {
			ty1 = ty;
		}
		tx = m.a * (this.x + this.width) + m.c * (this.y + this.height);
		ty = m.b * (this.x + this.width) + m.d * (this.y + this.height);
		if(tx < tx0) {
			tx0 = tx;
		}
		if(ty < ty0) {
			ty0 = ty;
		}
		if(tx > tx1) {
			tx1 = tx;
		}
		if(ty > ty1) {
			ty1 = ty;
		}
		tx = m.a * this.x + m.c * (this.y + this.height);
		ty = m.b * this.x + m.d * (this.y + this.height);
		if(tx < tx0) {
			tx0 = tx;
		}
		if(ty < ty0) {
			ty0 = ty;
		}
		if(tx > tx1) {
			tx1 = tx;
		}
		if(ty > ty1) {
			ty1 = ty;
		}
		return new lime_math_Rectangle(tx0 + m.tx,ty0 + m.ty,tx1 - tx0,ty1 - ty0);
	}
	,union: function(toUnion) {
		if(this.width == 0 || this.height == 0) {
			return toUnion.clone();
		} else if(toUnion.width == 0 || toUnion.height == 0) {
			return this.clone();
		}
		var x0 = this.x > toUnion.x ? toUnion.x : this.x;
		var y0 = this.y > toUnion.y ? toUnion.y : this.y;
		return new lime_math_Rectangle(x0,y0,(this.get_right() < toUnion.get_right() ? toUnion.get_right() : this.get_right()) - x0,(this.get_bottom() < toUnion.get_bottom() ? toUnion.get_bottom() : this.get_bottom()) - y0);
	}
	,__contract: function(x,y,width,height) {
		if(this.width == 0 && this.height == 0) {
			return;
		}
		if(this.x < x) {
			this.x = x;
		}
		if(this.y < y) {
			this.y = y;
		}
		if(this.get_right() > x + width) {
			this.width = x + width - this.x;
		}
		if(this.get_bottom() > y + height) {
			this.height = y + height - this.y;
		}
	}
	,__expand: function(x,y,width,height) {
		if(this.width == 0 && this.height == 0) {
			this.x = x;
			this.y = y;
			this.width = width;
			this.height = height;
			return;
		}
		var cacheRight = this.get_right();
		var cacheBottom = this.get_bottom();
		if(this.x > x) {
			this.x = x;
		}
		if(this.y > y) {
			this.y = y;
		}
		if(cacheRight < x + width) {
			this.width = x + width - this.x;
		}
		if(cacheBottom < y + height) {
			this.height = y + height - this.y;
		}
	}
	,__toFlashRectangle: function() {
		return null;
	}
	,get_bottom: function() {
		return this.y + this.height;
	}
	,set_bottom: function(b) {
		this.height = b - this.y;
		return b;
	}
	,get_bottomRight: function() {
		return new lime_math_Vector2(this.x + this.width,this.y + this.height);
	}
	,set_bottomRight: function(p) {
		this.width = p.x - this.x;
		this.height = p.y - this.y;
		return p.clone();
	}
	,get_left: function() {
		return this.x;
	}
	,set_left: function(l) {
		this.width -= l - this.x;
		this.x = l;
		return l;
	}
	,get_right: function() {
		return this.x + this.width;
	}
	,set_right: function(r) {
		this.width = r - this.x;
		return r;
	}
	,get_size: function() {
		return new lime_math_Vector2(this.width,this.height);
	}
	,set_size: function(p) {
		this.width = p.x;
		this.height = p.y;
		return p.clone();
	}
	,get_top: function() {
		return this.y;
	}
	,set_top: function(t) {
		this.height -= t - this.y;
		this.y = t;
		return t;
	}
	,get_topLeft: function() {
		return new lime_math_Vector2(this.x,this.y);
	}
	,set_topLeft: function(p) {
		this.x = p.x;
		this.y = p.y;
		return p.clone();
	}
	,__class__: lime_math_Rectangle
	,__properties__: {set_topLeft:"set_topLeft",get_topLeft:"get_topLeft",set_top:"set_top",get_top:"get_top",set_size:"set_size",get_size:"get_size",set_right:"set_right",get_right:"get_right",set_left:"set_left",get_left:"get_left",set_bottomRight:"set_bottomRight",get_bottomRight:"get_bottomRight",set_bottom:"set_bottom",get_bottom:"get_bottom"}
};
var lime_math_Vector2 = function(x,y) {
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.x = x;
	this.y = y;
};
$hxClasses["lime.math.Vector2"] = lime_math_Vector2;
lime_math_Vector2.__name__ = ["lime","math","Vector2"];
lime_math_Vector2.distance = function(pt1,pt2) {
	var dx = pt1.x - pt2.x;
	var dy = pt1.y - pt2.y;
	return Math.sqrt(dx * dx + dy * dy);
};
lime_math_Vector2.interpolate = function(pt1,pt2,f) {
	return new lime_math_Vector2(pt2.x + f * (pt1.x - pt2.x),pt2.y + f * (pt1.y - pt2.y));
};
lime_math_Vector2.polar = function(len,angle) {
	return new lime_math_Vector2(len * Math.cos(angle),len * Math.sin(angle));
};
lime_math_Vector2.prototype = {
	length: null
	,x: null
	,y: null
	,add: function(v) {
		return new lime_math_Vector2(v.x + this.x,v.y + this.y);
	}
	,clone: function() {
		return new lime_math_Vector2(this.x,this.y);
	}
	,equals: function(toCompare) {
		if(toCompare != null && toCompare.x == this.x) {
			return toCompare.y == this.y;
		} else {
			return false;
		}
	}
	,normalize: function(thickness) {
		if(this.x == 0 && this.y == 0) {
			return;
		} else {
			var norm = thickness / Math.sqrt(this.x * this.x + this.y * this.y);
			this.x *= norm;
			this.y *= norm;
		}
	}
	,offset: function(dx,dy) {
		this.x += dx;
		this.y += dy;
	}
	,setTo: function(xa,ya) {
		this.x = xa;
		this.y = ya;
	}
	,subtract: function(v) {
		return new lime_math_Vector2(this.x - v.x,this.y - v.y);
	}
	,__toFlashPoint: function() {
		return null;
	}
	,get_length: function() {
		return Math.sqrt(this.x * this.x + this.y * this.y);
	}
	,__class__: lime_math_Vector2
	,__properties__: {get_length:"get_length"}
};
var lime_math_Vector4 = function(x,y,z,w) {
	if(w == null) {
		w = 0.;
	}
	if(z == null) {
		z = 0.;
	}
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	this.w = w;
	this.x = x;
	this.y = y;
	this.z = z;
};
$hxClasses["lime.math.Vector4"] = lime_math_Vector4;
lime_math_Vector4.__name__ = ["lime","math","Vector4"];
lime_math_Vector4.__properties__ = {get_Z_AXIS:"get_Z_AXIS",get_Y_AXIS:"get_Y_AXIS",get_X_AXIS:"get_X_AXIS"}
lime_math_Vector4.angleBetween = function(a,b) {
	var a0 = new lime_math_Vector4(a.x,a.y,a.z,a.w);
	var l = Math.sqrt(a0.x * a0.x + a0.y * a0.y + a0.z * a0.z);
	if(l != 0) {
		a0.x /= l;
		a0.y /= l;
		a0.z /= l;
	}
	var b0 = new lime_math_Vector4(b.x,b.y,b.z,b.w);
	var l1 = Math.sqrt(b0.x * b0.x + b0.y * b0.y + b0.z * b0.z);
	if(l1 != 0) {
		b0.x /= l1;
		b0.y /= l1;
		b0.z /= l1;
	}
	return Math.acos(a0.x * b0.x + a0.y * b0.y + a0.z * b0.z);
};
lime_math_Vector4.distance = function(pt1,pt2) {
	var x = pt2.x - pt1.x;
	var y = pt2.y - pt1.y;
	var z = pt2.z - pt1.z;
	return Math.sqrt(x * x + y * y + z * z);
};
lime_math_Vector4.get_X_AXIS = function() {
	return new lime_math_Vector4(1,0,0);
};
lime_math_Vector4.get_Y_AXIS = function() {
	return new lime_math_Vector4(0,1,0);
};
lime_math_Vector4.get_Z_AXIS = function() {
	return new lime_math_Vector4(0,0,1);
};
lime_math_Vector4.prototype = {
	length: null
	,lengthSquared: null
	,w: null
	,x: null
	,y: null
	,z: null
	,add: function(a) {
		return new lime_math_Vector4(this.x + a.x,this.y + a.y,this.z + a.z);
	}
	,clone: function() {
		return new lime_math_Vector4(this.x,this.y,this.z,this.w);
	}
	,copyFrom: function(sourceVector4) {
		this.x = sourceVector4.x;
		this.y = sourceVector4.y;
		this.z = sourceVector4.z;
	}
	,crossProduct: function(a) {
		return new lime_math_Vector4(this.y * a.z - this.z * a.y,this.z * a.x - this.x * a.z,this.x * a.y - this.y * a.x,1);
	}
	,decrementBy: function(a) {
		this.x -= a.x;
		this.y -= a.y;
		this.z -= a.z;
	}
	,dotProduct: function(a) {
		return this.x * a.x + this.y * a.y + this.z * a.z;
	}
	,equals: function(toCompare,allFour) {
		if(allFour == null) {
			allFour = false;
		}
		if(this.x == toCompare.x && this.y == toCompare.y && this.z == toCompare.z) {
			if(!(!allFour)) {
				return this.w == toCompare.w;
			} else {
				return true;
			}
		} else {
			return false;
		}
	}
	,incrementBy: function(a) {
		this.x += a.x;
		this.y += a.y;
		this.z += a.z;
	}
	,nearEquals: function(toCompare,tolerance,allFour) {
		if(allFour == null) {
			allFour = false;
		}
		if(Math.abs(this.x - toCompare.x) < tolerance && Math.abs(this.y - toCompare.y) < tolerance && Math.abs(this.z - toCompare.z) < tolerance) {
			if(!(!allFour)) {
				return Math.abs(this.w - toCompare.w) < tolerance;
			} else {
				return true;
			}
		} else {
			return false;
		}
	}
	,negate: function() {
		this.x *= -1;
		this.y *= -1;
		this.z *= -1;
	}
	,normalize: function() {
		var l = Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
		if(l != 0) {
			this.x /= l;
			this.y /= l;
			this.z /= l;
		}
		return l;
	}
	,project: function() {
		this.x /= this.w;
		this.y /= this.w;
		this.z /= this.w;
	}
	,scaleBy: function(s) {
		this.x *= s;
		this.y *= s;
		this.z *= s;
	}
	,setTo: function(xa,ya,za) {
		this.x = xa;
		this.y = ya;
		this.z = za;
	}
	,subtract: function(a) {
		return new lime_math_Vector4(this.x - a.x,this.y - a.y,this.z - a.z);
	}
	,toString: function() {
		return "Vector4(" + this.x + ", " + this.y + ", " + this.z + ")";
	}
	,get_length: function() {
		return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
	}
	,get_lengthSquared: function() {
		return this.x * this.x + this.y * this.y + this.z * this.z;
	}
	,__class__: lime_math_Vector4
	,__properties__: {get_lengthSquared:"get_lengthSquared",get_length:"get_length"}
};
var lime_math_color__$ARGB_ARGB_$Impl_$ = {};
$hxClasses["lime.math.color._ARGB.ARGB_Impl_"] = lime_math_color__$ARGB_ARGB_$Impl_$;
lime_math_color__$ARGB_ARGB_$Impl_$.__name__ = ["lime","math","color","_ARGB","ARGB_Impl_"];
lime_math_color__$ARGB_ARGB_$Impl_$.__properties__ = {set_r:"set_r",get_r:"get_r",set_g:"set_g",get_g:"get_g",set_b:"set_b",get_b:"get_b",set_a:"set_a",get_a:"get_a"}
lime_math_color__$ARGB_ARGB_$Impl_$._new = function(argb) {
	if(argb == null) {
		argb = 0;
	}
	return argb;
};
lime_math_color__$ARGB_ARGB_$Impl_$.create = function(a,r,g,b) {
	var argb = 0;
	argb = (a & 255) << 24 | (r & 255) << 16 | (g & 255) << 8 | b & 255;
	return argb;
};
lime_math_color__$ARGB_ARGB_$Impl_$.multiplyAlpha = function(this1) {
	if((this1 >>> 24 & 255) == 0) {
		this1 = 0;
	} else if((this1 >>> 24 & 255) != 255) {
		lime_math_color__$ARGB_ARGB_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[this1 >>> 24 & 255];
		this1 = (this1 >>> 24 & 255 & 255) << 24 | ((this1 >>> 16 & 255) * lime_math_color__$ARGB_ARGB_$Impl_$.a16 >> 16 & 255) << 16 | ((this1 >>> 8 & 255) * lime_math_color__$ARGB_ARGB_$Impl_$.a16 >> 16 & 255) << 8 | (this1 & 255) * lime_math_color__$ARGB_ARGB_$Impl_$.a16 >> 16 & 255;
	}
};
lime_math_color__$ARGB_ARGB_$Impl_$.readUInt8 = function(this1,data,offset,format,premultiplied) {
	if(premultiplied == null) {
		premultiplied = false;
	}
	if(format == null) {
		format = 0;
	}
	switch(format) {
	case 0:
		this1 = (data[offset + 1] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset] & 255;
		break;
	case 1:
		this1 = (data[offset + 2] & 255) << 24 | (data[offset + 3] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 1] & 255;
		break;
	case 2:
		this1 = (data[offset + 1] & 255) << 24 | (data[offset] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset + 2] & 255;
		break;
	}
	if(premultiplied) {
		if((this1 >>> 24 & 255) != 0 && (this1 >>> 24 & 255) != 255) {
			lime_math_color__$ARGB_ARGB_$Impl_$.unmult = 255.0 / (this1 >>> 24 & 255);
			this1 = (this1 >>> 24 & 255 & 255) << 24 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.floor((this1 >>> 16 & 255) * lime_math_color__$ARGB_ARGB_$Impl_$.unmult)] & 255) << 16 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.floor((this1 >>> 8 & 255) * lime_math_color__$ARGB_ARGB_$Impl_$.unmult)] & 255) << 8 | lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.floor((this1 & 255) * lime_math_color__$ARGB_ARGB_$Impl_$.unmult)] & 255;
		}
	}
};
lime_math_color__$ARGB_ARGB_$Impl_$.set = function(this1,a,r,g,b) {
	this1 = (a & 255) << 24 | (r & 255) << 16 | (g & 255) << 8 | b & 255;
};
lime_math_color__$ARGB_ARGB_$Impl_$.unmultiplyAlpha = function(this1) {
	if((this1 >>> 24 & 255) != 0 && (this1 >>> 24 & 255) != 255) {
		lime_math_color__$ARGB_ARGB_$Impl_$.unmult = 255.0 / (this1 >>> 24 & 255);
		this1 = (this1 >>> 24 & 255 & 255) << 24 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.floor((this1 >>> 16 & 255) * lime_math_color__$ARGB_ARGB_$Impl_$.unmult)] & 255) << 16 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.floor((this1 >>> 8 & 255) * lime_math_color__$ARGB_ARGB_$Impl_$.unmult)] & 255) << 8 | lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.floor((this1 & 255) * lime_math_color__$ARGB_ARGB_$Impl_$.unmult)] & 255;
	}
};
lime_math_color__$ARGB_ARGB_$Impl_$.writeUInt8 = function(this1,data,offset,format,premultiplied) {
	if(premultiplied == null) {
		premultiplied = false;
	}
	if(format == null) {
		format = 0;
	}
	if(premultiplied) {
		if((this1 >>> 24 & 255) == 0) {
			this1 = 0;
		} else if((this1 >>> 24 & 255) != 255) {
			lime_math_color__$ARGB_ARGB_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[this1 >>> 24 & 255];
			this1 = (this1 >>> 24 & 255 & 255) << 24 | ((this1 >>> 16 & 255) * lime_math_color__$ARGB_ARGB_$Impl_$.a16 >> 16 & 255) << 16 | ((this1 >>> 8 & 255) * lime_math_color__$ARGB_ARGB_$Impl_$.a16 >> 16 & 255) << 8 | (this1 & 255) * lime_math_color__$ARGB_ARGB_$Impl_$.a16 >> 16 & 255;
		}
	}
	switch(format) {
	case 0:
		data[offset] = this1 >>> 16 & 255;
		data[offset + 1] = this1 >>> 8 & 255;
		data[offset + 2] = this1 & 255;
		data[offset + 3] = this1 >>> 24 & 255;
		break;
	case 1:
		data[offset] = this1 >>> 24 & 255;
		data[offset + 1] = this1 >>> 16 & 255;
		data[offset + 2] = this1 >>> 8 & 255;
		data[offset + 3] = this1 & 255;
		break;
	case 2:
		data[offset] = this1 & 255;
		data[offset + 1] = this1 >>> 8 & 255;
		data[offset + 2] = this1 >>> 16 & 255;
		data[offset + 3] = this1 >>> 24 & 255;
		break;
	}
};
lime_math_color__$ARGB_ARGB_$Impl_$.__fromBGRA = function(bgra) {
	var argb = 0;
	argb = (bgra & 255 & 255) << 24 | (bgra >>> 8 & 255 & 255) << 16 | (bgra >>> 16 & 255 & 255) << 8 | bgra >>> 24 & 255 & 255;
	return argb;
};
lime_math_color__$ARGB_ARGB_$Impl_$.__fromRGBA = function(rgba) {
	var argb = 0;
	argb = (rgba & 255 & 255) << 24 | (rgba >>> 24 & 255 & 255) << 16 | (rgba >>> 16 & 255 & 255) << 8 | rgba >>> 8 & 255 & 255;
	return argb;
};
lime_math_color__$ARGB_ARGB_$Impl_$.get_a = function(this1) {
	return this1 >>> 24 & 255;
};
lime_math_color__$ARGB_ARGB_$Impl_$.set_a = function(this1,value) {
	this1 = (value & 255) << 24 | (this1 >>> 16 & 255 & 255) << 16 | (this1 >>> 8 & 255 & 255) << 8 | this1 & 255 & 255;
	return value;
};
lime_math_color__$ARGB_ARGB_$Impl_$.get_b = function(this1) {
	return this1 & 255;
};
lime_math_color__$ARGB_ARGB_$Impl_$.set_b = function(this1,value) {
	this1 = (this1 >>> 24 & 255 & 255) << 24 | (this1 >>> 16 & 255 & 255) << 16 | (this1 >>> 8 & 255 & 255) << 8 | value & 255;
	return value;
};
lime_math_color__$ARGB_ARGB_$Impl_$.get_g = function(this1) {
	return this1 >>> 8 & 255;
};
lime_math_color__$ARGB_ARGB_$Impl_$.set_g = function(this1,value) {
	this1 = (this1 >>> 24 & 255 & 255) << 24 | (this1 >>> 16 & 255 & 255) << 16 | (value & 255) << 8 | this1 & 255 & 255;
	return value;
};
lime_math_color__$ARGB_ARGB_$Impl_$.get_r = function(this1) {
	return this1 >>> 16 & 255;
};
lime_math_color__$ARGB_ARGB_$Impl_$.set_r = function(this1,value) {
	this1 = (this1 >>> 24 & 255 & 255) << 24 | (value & 255) << 16 | (this1 >>> 8 & 255 & 255) << 8 | this1 & 255 & 255;
	return value;
};
var lime_math_color__$BGRA_BGRA_$Impl_$ = {};
$hxClasses["lime.math.color._BGRA.BGRA_Impl_"] = lime_math_color__$BGRA_BGRA_$Impl_$;
lime_math_color__$BGRA_BGRA_$Impl_$.__name__ = ["lime","math","color","_BGRA","BGRA_Impl_"];
lime_math_color__$BGRA_BGRA_$Impl_$.__properties__ = {set_r:"set_r",get_r:"get_r",set_g:"set_g",get_g:"get_g",set_b:"set_b",get_b:"get_b",set_a:"set_a",get_a:"get_a"}
lime_math_color__$BGRA_BGRA_$Impl_$._new = function(bgra) {
	if(bgra == null) {
		bgra = 0;
	}
	return bgra;
};
lime_math_color__$BGRA_BGRA_$Impl_$.create = function(b,g,r,a) {
	var bgra = 0;
	bgra = (b & 255) << 24 | (g & 255) << 16 | (r & 255) << 8 | a & 255;
	return bgra;
};
lime_math_color__$BGRA_BGRA_$Impl_$.multiplyAlpha = function(this1) {
	if((this1 & 255) == 0) {
		this1 = 0;
	} else if((this1 & 255) != 255) {
		lime_math_color__$BGRA_BGRA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[this1 & 255];
		this1 = ((this1 >>> 24 & 255) * lime_math_color__$BGRA_BGRA_$Impl_$.a16 >> 16 & 255) << 24 | ((this1 >>> 16 & 255) * lime_math_color__$BGRA_BGRA_$Impl_$.a16 >> 16 & 255) << 16 | ((this1 >>> 8 & 255) * lime_math_color__$BGRA_BGRA_$Impl_$.a16 >> 16 & 255) << 8 | this1 & 255 & 255;
	}
};
lime_math_color__$BGRA_BGRA_$Impl_$.readUInt8 = function(this1,data,offset,format,premultiplied) {
	if(premultiplied == null) {
		premultiplied = false;
	}
	if(format == null) {
		format = 0;
	}
	switch(format) {
	case 0:
		this1 = (data[offset + 2] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 3] & 255;
		break;
	case 1:
		this1 = (data[offset + 3] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 1] & 255) << 8 | data[offset] & 255;
		break;
	case 2:
		this1 = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
		break;
	}
	if(premultiplied) {
		if((this1 & 255) != 0 && (this1 & 255) != 255) {
			lime_math_color__$BGRA_BGRA_$Impl_$.unmult = 255.0 / (this1 & 255);
			this1 = (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.floor((this1 >>> 24 & 255) * lime_math_color__$BGRA_BGRA_$Impl_$.unmult)] & 255) << 24 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.floor((this1 >>> 16 & 255) * lime_math_color__$BGRA_BGRA_$Impl_$.unmult)] & 255) << 16 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.floor((this1 >>> 8 & 255) * lime_math_color__$BGRA_BGRA_$Impl_$.unmult)] & 255) << 8 | this1 & 255 & 255;
		}
	}
};
lime_math_color__$BGRA_BGRA_$Impl_$.set = function(this1,b,g,r,a) {
	this1 = (b & 255) << 24 | (g & 255) << 16 | (r & 255) << 8 | a & 255;
};
lime_math_color__$BGRA_BGRA_$Impl_$.unmultiplyAlpha = function(this1) {
	if((this1 & 255) != 0 && (this1 & 255) != 255) {
		lime_math_color__$BGRA_BGRA_$Impl_$.unmult = 255.0 / (this1 & 255);
		this1 = (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.floor((this1 >>> 24 & 255) * lime_math_color__$BGRA_BGRA_$Impl_$.unmult)] & 255) << 24 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.floor((this1 >>> 16 & 255) * lime_math_color__$BGRA_BGRA_$Impl_$.unmult)] & 255) << 16 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.floor((this1 >>> 8 & 255) * lime_math_color__$BGRA_BGRA_$Impl_$.unmult)] & 255) << 8 | this1 & 255 & 255;
	}
};
lime_math_color__$BGRA_BGRA_$Impl_$.writeUInt8 = function(this1,data,offset,format,premultiplied) {
	if(premultiplied == null) {
		premultiplied = false;
	}
	if(format == null) {
		format = 0;
	}
	if(premultiplied) {
		if((this1 & 255) == 0) {
			this1 = 0;
		} else if((this1 & 255) != 255) {
			lime_math_color__$BGRA_BGRA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[this1 & 255];
			this1 = ((this1 >>> 24 & 255) * lime_math_color__$BGRA_BGRA_$Impl_$.a16 >> 16 & 255) << 24 | ((this1 >>> 16 & 255) * lime_math_color__$BGRA_BGRA_$Impl_$.a16 >> 16 & 255) << 16 | ((this1 >>> 8 & 255) * lime_math_color__$BGRA_BGRA_$Impl_$.a16 >> 16 & 255) << 8 | this1 & 255 & 255;
		}
	}
	switch(format) {
	case 0:
		data[offset] = this1 >>> 8 & 255;
		data[offset + 1] = this1 >>> 16 & 255;
		data[offset + 2] = this1 >>> 24 & 255;
		data[offset + 3] = this1 & 255;
		break;
	case 1:
		data[offset] = this1 & 255;
		data[offset + 1] = this1 >>> 8 & 255;
		data[offset + 2] = this1 >>> 16 & 255;
		data[offset + 3] = this1 >>> 24 & 255;
		break;
	case 2:
		data[offset] = this1 >>> 24 & 255;
		data[offset + 1] = this1 >>> 16 & 255;
		data[offset + 2] = this1 >>> 8 & 255;
		data[offset + 3] = this1 & 255;
		break;
	}
};
lime_math_color__$BGRA_BGRA_$Impl_$.__fromARGB = function(argb) {
	var bgra = 0;
	bgra = (argb & 255 & 255) << 24 | (argb >>> 8 & 255 & 255) << 16 | (argb >>> 16 & 255 & 255) << 8 | argb >>> 24 & 255 & 255;
	return bgra;
};
lime_math_color__$BGRA_BGRA_$Impl_$.__fromRGBA = function(rgba) {
	var bgra = 0;
	bgra = (rgba >>> 8 & 255 & 255) << 24 | (rgba >>> 16 & 255 & 255) << 16 | (rgba >>> 24 & 255 & 255) << 8 | rgba & 255 & 255;
	return bgra;
};
lime_math_color__$BGRA_BGRA_$Impl_$.get_a = function(this1) {
	return this1 & 255;
};
lime_math_color__$BGRA_BGRA_$Impl_$.set_a = function(this1,value) {
	this1 = (this1 >>> 24 & 255 & 255) << 24 | (this1 >>> 16 & 255 & 255) << 16 | (this1 >>> 8 & 255 & 255) << 8 | value & 255;
	return value;
};
lime_math_color__$BGRA_BGRA_$Impl_$.get_b = function(this1) {
	return this1 >>> 24 & 255;
};
lime_math_color__$BGRA_BGRA_$Impl_$.set_b = function(this1,value) {
	this1 = (value & 255) << 24 | (this1 >>> 16 & 255 & 255) << 16 | (this1 >>> 8 & 255 & 255) << 8 | this1 & 255 & 255;
	return value;
};
lime_math_color__$BGRA_BGRA_$Impl_$.get_g = function(this1) {
	return this1 >>> 16 & 255;
};
lime_math_color__$BGRA_BGRA_$Impl_$.set_g = function(this1,value) {
	this1 = (this1 >>> 24 & 255 & 255) << 24 | (value & 255) << 16 | (this1 >>> 8 & 255 & 255) << 8 | this1 & 255 & 255;
	return value;
};
lime_math_color__$BGRA_BGRA_$Impl_$.get_r = function(this1) {
	return this1 >>> 8 & 255;
};
lime_math_color__$BGRA_BGRA_$Impl_$.set_r = function(this1,value) {
	this1 = (this1 >>> 24 & 255 & 255) << 24 | (this1 >>> 16 & 255 & 255) << 16 | (value & 255) << 8 | this1 & 255 & 255;
	return value;
};
var lime_math_color__$RGBA_RGBA_$Impl_$ = {};
$hxClasses["lime.math.color._RGBA.RGBA_Impl_"] = lime_math_color__$RGBA_RGBA_$Impl_$;
lime_math_color__$RGBA_RGBA_$Impl_$.__name__ = ["lime","math","color","_RGBA","RGBA_Impl_"];
lime_math_color__$RGBA_RGBA_$Impl_$.__properties__ = {set_r:"set_r",get_r:"get_r",set_g:"set_g",get_g:"get_g",set_b:"set_b",get_b:"get_b",set_a:"set_a",get_a:"get_a"}
lime_math_color__$RGBA_RGBA_$Impl_$._new = function(rgba) {
	if(rgba == null) {
		rgba = 0;
	}
	return rgba;
};
lime_math_color__$RGBA_RGBA_$Impl_$.create = function(r,g,b,a) {
	var rgba = 0;
	rgba = (r & 255) << 24 | (g & 255) << 16 | (b & 255) << 8 | a & 255;
	return rgba;
};
lime_math_color__$RGBA_RGBA_$Impl_$.multiplyAlpha = function(this1) {
	if((this1 & 255) == 0) {
		if(this1 != 0) {
			this1 = 0;
		}
	} else if((this1 & 255) != 255) {
		lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[this1 & 255];
		this1 = ((this1 >>> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((this1 >>> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((this1 >>> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | this1 & 255 & 255;
	}
};
lime_math_color__$RGBA_RGBA_$Impl_$.readUInt8 = function(this1,data,offset,format,premultiplied) {
	if(premultiplied == null) {
		premultiplied = false;
	}
	if(format == null) {
		format = 0;
	}
	switch(format) {
	case 0:
		this1 = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
		break;
	case 1:
		this1 = (data[offset + 1] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset] & 255;
		break;
	case 2:
		this1 = (data[offset + 2] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 3] & 255;
		break;
	}
	if(premultiplied) {
		if((this1 & 255) != 0 && (this1 & 255) != 255) {
			lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (this1 & 255);
			this1 = (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((this1 >>> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((this1 >>> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((this1 >>> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | this1 & 255 & 255;
		}
	}
};
lime_math_color__$RGBA_RGBA_$Impl_$.set = function(this1,r,g,b,a) {
	this1 = (r & 255) << 24 | (g & 255) << 16 | (b & 255) << 8 | a & 255;
};
lime_math_color__$RGBA_RGBA_$Impl_$.unmultiplyAlpha = function(this1) {
	if((this1 & 255) != 0 && (this1 & 255) != 255) {
		lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (this1 & 255);
		this1 = (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((this1 >>> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((this1 >>> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((this1 >>> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | this1 & 255 & 255;
	}
};
lime_math_color__$RGBA_RGBA_$Impl_$.writeUInt8 = function(this1,data,offset,format,premultiplied) {
	if(premultiplied == null) {
		premultiplied = false;
	}
	if(format == null) {
		format = 0;
	}
	if(premultiplied) {
		if((this1 & 255) == 0) {
			if(this1 != 0) {
				this1 = 0;
			}
		} else if((this1 & 255) != 255) {
			lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[this1 & 255];
			this1 = ((this1 >>> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((this1 >>> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((this1 >>> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | this1 & 255 & 255;
		}
	}
	switch(format) {
	case 0:
		data[offset] = this1 >>> 24 & 255;
		data[offset + 1] = this1 >>> 16 & 255;
		data[offset + 2] = this1 >>> 8 & 255;
		data[offset + 3] = this1 & 255;
		break;
	case 1:
		data[offset] = this1 & 255;
		data[offset + 1] = this1 >>> 24 & 255;
		data[offset + 2] = this1 >>> 16 & 255;
		data[offset + 3] = this1 >>> 8 & 255;
		break;
	case 2:
		data[offset] = this1 >>> 8 & 255;
		data[offset + 1] = this1 >>> 16 & 255;
		data[offset + 2] = this1 >>> 24 & 255;
		data[offset + 3] = this1 & 255;
		break;
	}
};
lime_math_color__$RGBA_RGBA_$Impl_$.__fromARGB = function(argb) {
	var rgba = 0;
	rgba = (argb >>> 16 & 255 & 255) << 24 | (argb >>> 8 & 255 & 255) << 16 | (argb & 255 & 255) << 8 | argb >>> 24 & 255 & 255;
	return rgba;
};
lime_math_color__$RGBA_RGBA_$Impl_$.__fromBGRA = function(bgra) {
	var rgba = 0;
	rgba = (bgra >>> 8 & 255 & 255) << 24 | (bgra >>> 16 & 255 & 255) << 16 | (bgra >>> 24 & 255 & 255) << 8 | bgra & 255 & 255;
	return rgba;
};
lime_math_color__$RGBA_RGBA_$Impl_$.get_a = function(this1) {
	return this1 & 255;
};
lime_math_color__$RGBA_RGBA_$Impl_$.set_a = function(this1,value) {
	this1 = (this1 >>> 24 & 255 & 255) << 24 | (this1 >>> 16 & 255 & 255) << 16 | (this1 >>> 8 & 255 & 255) << 8 | value & 255;
	return value;
};
lime_math_color__$RGBA_RGBA_$Impl_$.get_b = function(this1) {
	return this1 >>> 8 & 255;
};
lime_math_color__$RGBA_RGBA_$Impl_$.set_b = function(this1,value) {
	this1 = (this1 >>> 24 & 255 & 255) << 24 | (this1 >>> 16 & 255 & 255) << 16 | (value & 255) << 8 | this1 & 255 & 255;
	return value;
};
lime_math_color__$RGBA_RGBA_$Impl_$.get_g = function(this1) {
	return this1 >>> 16 & 255;
};
lime_math_color__$RGBA_RGBA_$Impl_$.set_g = function(this1,value) {
	this1 = (this1 >>> 24 & 255 & 255) << 24 | (value & 255) << 16 | (this1 >>> 8 & 255 & 255) << 8 | this1 & 255 & 255;
	return value;
};
lime_math_color__$RGBA_RGBA_$Impl_$.get_r = function(this1) {
	return this1 >>> 24 & 255;
};
lime_math_color__$RGBA_RGBA_$Impl_$.set_r = function(this1,value) {
	this1 = (value & 255) << 24 | (this1 >>> 16 & 255 & 255) << 16 | (this1 >>> 8 & 255 & 255) << 8 | this1 & 255 & 255;
	return value;
};
var lime_net_HTTPRequest = function() {
	this.promise = new lime_app_Promise();
};
$hxClasses["lime.net.HTTPRequest"] = lime_net_HTTPRequest;
lime_net_HTTPRequest.__name__ = ["lime","net","HTTPRequest"];
lime_net_HTTPRequest.prototype = {
	bytes: null
	,bytesLoaded: null
	,bytesTotal: null
	,promise: null
	,load: function(url) {
		var _gthis = this;
		this.bytesLoaded = 0;
		this.bytesTotal = 0;
		var request = new XMLHttpRequest();
		request.addEventListener("progress",$bind(this,this.request_onProgress),false);
		request.onreadystatechange = function() {
			if(request.readyState != 4) {
				return;
			}
			if(request.status != null && request.status >= 200 && request.status <= 400) {
				_gthis.bytes = lime_utils_Bytes.ofData(request.response);
				_gthis.promise.complete(_gthis.bytes);
			} else {
				_gthis.promise.error(request.status);
			}
		};
		request.open("GET",url,true);
		request.responseType = "arraybuffer";
		request.send("");
		return this.promise.future;
	}
	,curl_onProgress: function(dltotal,dlnow,uptotal,upnow) {
		if(upnow > this.bytesLoaded || dlnow > this.bytesLoaded || uptotal > this.bytesTotal || dltotal > this.bytesTotal) {
			if(upnow > this.bytesLoaded) {
				this.bytesLoaded = upnow | 0;
			}
			if(dlnow > this.bytesLoaded) {
				this.bytesLoaded = dlnow | 0;
			}
			if(uptotal > this.bytesTotal) {
				this.bytesTotal = uptotal | 0;
			}
			if(dltotal > this.bytesTotal) {
				this.bytesTotal = dltotal | 0;
			}
			this.promise.progress(this.bytesLoaded / this.bytesTotal);
		}
		return 0;
	}
	,curl_onWrite: function(output,size,nmemb) {
		var cacheBytes = this.bytes;
		this.bytes = lime_utils_Bytes.alloc(this.bytes.length + output.length);
		this.bytes.blit(0,cacheBytes,0,cacheBytes.length);
		this.bytes.blit(cacheBytes.length,output,0,output.length);
		return size * nmemb;
	}
	,request_onProgress: function(event) {
		this.promise.progress(event.loaded / event.total);
	}
	,__class__: lime_net_HTTPRequest
};
var lime_net_curl__$CURL_CURL_$Impl_$ = {};
$hxClasses["lime.net.curl._CURL.CURL_Impl_"] = lime_net_curl__$CURL_CURL_$Impl_$;
lime_net_curl__$CURL_CURL_$Impl_$.__name__ = ["lime","net","curl","_CURL","CURL_Impl_"];
lime_net_curl__$CURL_CURL_$Impl_$.getDate = function(date,now) {
	return 0;
};
lime_net_curl__$CURL_CURL_$Impl_$.globalCleanup = function() {
};
lime_net_curl__$CURL_CURL_$Impl_$.globalInit = function(flags) {
	return 0;
};
lime_net_curl__$CURL_CURL_$Impl_$.version = function() {
	return null;
};
lime_net_curl__$CURL_CURL_$Impl_$.versionInfo = function(type) {
	return null;
};
lime_net_curl__$CURL_CURL_$Impl_$.intGt = function(a,b) {
	return a > b;
};
var lime_net_curl_CURLEasy = function() { };
$hxClasses["lime.net.curl.CURLEasy"] = lime_net_curl_CURLEasy;
lime_net_curl_CURLEasy.__name__ = ["lime","net","curl","CURLEasy"];
lime_net_curl_CURLEasy.cleanup = function(handle) {
};
lime_net_curl_CURLEasy.duphandle = function(handle) {
	return 0;
};
lime_net_curl_CURLEasy.escape = function(handle,url,length) {
	return null;
};
lime_net_curl_CURLEasy.getinfo = function(handle,info) {
	return null;
};
lime_net_curl_CURLEasy.init = function() {
	return 0;
};
lime_net_curl_CURLEasy.pause = function(handle,bitMask) {
	return 0;
};
lime_net_curl_CURLEasy.perform = function(handle) {
	return 0;
};
lime_net_curl_CURLEasy.reset = function(handle) {
};
lime_net_curl_CURLEasy.setopt = function(handle,option,parameter) {
	return 0;
};
lime_net_curl_CURLEasy.strerror = function(code) {
	return null;
};
lime_net_curl_CURLEasy.unescape = function(handle,url,inLength,outLength) {
	return null;
};
lime_net_curl_CURLEasy.__writeCallback = function(callback,output,size,nmemb) {
	return 0;
};
var lime_system_BackgroundWorker = function() {
	this.onProgress = new lime_app__$Event_$Dynamic_$Void();
	this.onError = new lime_app__$Event_$Dynamic_$Void();
	this.onComplete = new lime_app__$Event_$Dynamic_$Void();
	this.doWork = new lime_app__$Event_$Dynamic_$Void();
};
$hxClasses["lime.system.BackgroundWorker"] = lime_system_BackgroundWorker;
lime_system_BackgroundWorker.__name__ = ["lime","system","BackgroundWorker"];
lime_system_BackgroundWorker.prototype = {
	canceled: null
	,doWork: null
	,onComplete: null
	,onError: null
	,onProgress: null
	,__runMessage: null
	,cancel: function() {
		this.canceled = true;
	}
	,run: function(message) {
		this.canceled = false;
		this.__runMessage = message;
		this.__doWork();
	}
	,sendComplete: function(message) {
		if(!this.canceled) {
			this.canceled = true;
			this.onComplete.dispatch(message);
		}
	}
	,sendError: function(message) {
		if(!this.canceled) {
			this.canceled = true;
			this.onError.dispatch(message);
		}
	}
	,sendProgress: function(message) {
		if(!this.canceled) {
			this.onProgress.dispatch(message);
		}
	}
	,__doWork: function() {
		this.doWork.dispatch(this.__runMessage);
	}
	,__update: function(deltaTime) {
	}
	,__class__: lime_system_BackgroundWorker
};
var lime_system_CFFI = function() { };
$hxClasses["lime.system.CFFI"] = lime_system_CFFI;
lime_system_CFFI.__name__ = ["lime","system","CFFI"];
lime_system_CFFI.load = function(library,method,args,lazy) {
	if(lazy == null) {
		lazy = false;
	}
	if(args == null) {
		args = 0;
	}
	if(!lime_system_CFFI.enabled) {
		return Reflect.makeVarArgs(function(__) {
			return { };
		});
	}
	return null;
};
lime_system_CFFI.__findHaxelib = function(library) {
	return "";
};
lime_system_CFFI.__loaderTrace = function(message) {
};
lime_system_CFFI.__sysName = function() {
	return null;
};
lime_system_CFFI.__tryLoad = function(name,library,func,args) {
	return null;
};
var lime_system__$CFFIPointer_CFFIPointer_$Impl_$ = {};
$hxClasses["lime.system._CFFIPointer.CFFIPointer_Impl_"] = lime_system__$CFFIPointer_CFFIPointer_$Impl_$;
lime_system__$CFFIPointer_CFFIPointer_$Impl_$.__name__ = ["lime","system","_CFFIPointer","CFFIPointer_Impl_"];
lime_system__$CFFIPointer_CFFIPointer_$Impl_$._new = function(handle) {
	return handle;
};
lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get = function(this1) {
	return 0;
};
lime_system__$CFFIPointer_CFFIPointer_$Impl_$.equals = function(a,b) {
	return lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) == b;
};
lime_system__$CFFIPointer_CFFIPointer_$Impl_$.equalsPointer = function(a,b) {
	return lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) == lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(b);
};
lime_system__$CFFIPointer_CFFIPointer_$Impl_$.greaterThan = function(a,b) {
	return lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) > b;
};
lime_system__$CFFIPointer_CFFIPointer_$Impl_$.greaterThanPointer = function(a,b) {
	return lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) > lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(b);
};
lime_system__$CFFIPointer_CFFIPointer_$Impl_$.greaterThanOrEqual = function(a,b) {
	return lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) >= b;
};
lime_system__$CFFIPointer_CFFIPointer_$Impl_$.greaterThanOrEqualPointer = function(a,b) {
	return lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) >= lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(b);
};
lime_system__$CFFIPointer_CFFIPointer_$Impl_$.lessThan = function(a,b) {
	return lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) < b;
};
lime_system__$CFFIPointer_CFFIPointer_$Impl_$.lessThanPointer = function(a,b) {
	return lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) < lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(b);
};
lime_system__$CFFIPointer_CFFIPointer_$Impl_$.lessThanOrEqual = function(a,b) {
	return lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) <= b;
};
lime_system__$CFFIPointer_CFFIPointer_$Impl_$.lessThanOrEqualPointer = function(a,b) {
	return lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) <= lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(b);
};
lime_system__$CFFIPointer_CFFIPointer_$Impl_$.notEquals = function(a,b) {
	return lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) != b;
};
lime_system__$CFFIPointer_CFFIPointer_$Impl_$.notEqualsPointer = function(a,b) {
	return lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) != lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(b);
};
var lime_system_Clipboard = function() { };
$hxClasses["lime.system.Clipboard"] = lime_system_Clipboard;
lime_system_Clipboard.__name__ = ["lime","system","Clipboard"];
lime_system_Clipboard.__properties__ = {set_text:"set_text",get_text:"get_text"}
lime_system_Clipboard.get_text = function() {
	return null;
};
lime_system_Clipboard.set_text = function(value) {
	return null;
};
var lime_system_Display = function() {
};
$hxClasses["lime.system.Display"] = lime_system_Display;
lime_system_Display.__name__ = ["lime","system","Display"];
lime_system_Display.prototype = {
	bounds: null
	,currentMode: null
	,id: null
	,dpi: null
	,name: null
	,supportedModes: null
	,__class__: lime_system_Display
};
var lime_system_DisplayMode = function(width,height,refreshRate,pixelFormat) {
	this.width = width;
	this.height = height;
	this.refreshRate = refreshRate;
	this.pixelFormat = pixelFormat;
};
$hxClasses["lime.system.DisplayMode"] = lime_system_DisplayMode;
lime_system_DisplayMode.__name__ = ["lime","system","DisplayMode"];
lime_system_DisplayMode.prototype = {
	height: null
	,pixelFormat: null
	,refreshRate: null
	,width: null
	,__class__: lime_system_DisplayMode
};
var lime_system_Endian = $hxClasses["lime.system.Endian"] = { __ename__ : ["lime","system","Endian"], __constructs__ : ["LITTLE_ENDIAN","BIG_ENDIAN"] };
lime_system_Endian.LITTLE_ENDIAN = ["LITTLE_ENDIAN",0];
lime_system_Endian.LITTLE_ENDIAN.toString = $estr;
lime_system_Endian.LITTLE_ENDIAN.__enum__ = lime_system_Endian;
lime_system_Endian.BIG_ENDIAN = ["BIG_ENDIAN",1];
lime_system_Endian.BIG_ENDIAN.toString = $estr;
lime_system_Endian.BIG_ENDIAN.__enum__ = lime_system_Endian;
lime_system_Endian.__empty_constructs__ = [lime_system_Endian.LITTLE_ENDIAN,lime_system_Endian.BIG_ENDIAN];
var lime_system_System = function() { };
$hxClasses["lime.system.System"] = lime_system_System;
lime_system_System.__name__ = ["lime","system","System"];
lime_system_System.__properties__ = {get_userDirectory:"get_userDirectory",get_numDisplays:"get_numDisplays",get_fontsDirectory:"get_fontsDirectory",get_endianness:"get_endianness",get_documentsDirectory:"get_documentsDirectory",get_desktopDirectory:"get_desktopDirectory",get_applicationStorageDirectory:"get_applicationStorageDirectory",get_applicationDirectory:"get_applicationDirectory",set_allowScreenTimeout:"set_allowScreenTimeout",get_allowScreenTimeout:"get_allowScreenTimeout"}
lime_system_System.exit = function(code) {
};
lime_system_System.getDisplay = function(id) {
	if(id == 0) {
		var display = new lime_system_Display();
		display.id = 0;
		display.name = "Generic Display";
		display.dpi = 96;
		display.currentMode = new lime_system_DisplayMode(window.screen.width,window.screen.height,60,1);
		display.supportedModes = [display.currentMode];
		display.bounds = new lime_math_Rectangle(0,0,display.currentMode.width,display.currentMode.height);
		return display;
	}
	return null;
};
lime_system_System.getTimer = function() {
	return new Date().getTime();
};
lime_system_System.load = function(library,method,args,lazy) {
	if(lazy == null) {
		lazy = false;
	}
	if(args == null) {
		args = 0;
	}
	return lime_system_CFFI.load(library,method,args,lazy);
};
lime_system_System.__getDirectory = function(type) {
	return null;
};
lime_system_System.get_allowScreenTimeout = function() {
	return true;
};
lime_system_System.set_allowScreenTimeout = function(value) {
	return true;
};
lime_system_System.get_applicationDirectory = function() {
	return lime_system_System.__getDirectory(0);
};
lime_system_System.get_applicationStorageDirectory = function() {
	return lime_system_System.__getDirectory(1);
};
lime_system_System.get_desktopDirectory = function() {
	return lime_system_System.__getDirectory(2);
};
lime_system_System.get_documentsDirectory = function() {
	return lime_system_System.__getDirectory(3);
};
lime_system_System.get_fontsDirectory = function() {
	return lime_system_System.__getDirectory(4);
};
lime_system_System.get_numDisplays = function() {
	return 1;
};
lime_system_System.get_userDirectory = function() {
	return lime_system_System.__getDirectory(5);
};
lime_system_System.get_endianness = function() {
	return lime_system_Endian.LITTLE_ENDIAN;
};
var lime_system_ThreadPool = function(minThreads,maxThreads) {
	if(maxThreads == null) {
		maxThreads = 1;
	}
	if(minThreads == null) {
		minThreads = 0;
	}
	this.onProgress = new lime_app__$Event_$Dynamic_$Void();
	this.onError = new lime_app__$Event_$Dynamic_$Void();
	this.onComplete = new lime_app__$Event_$Dynamic_$Void();
	this.doWork = new lime_app__$Event_$Dynamic_$Void();
	this.minThreads = minThreads;
	this.maxThreads = maxThreads;
	this.currentThreads = 0;
};
$hxClasses["lime.system.ThreadPool"] = lime_system_ThreadPool;
lime_system_ThreadPool.__name__ = ["lime","system","ThreadPool"];
lime_system_ThreadPool.prototype = {
	currentThreads: null
	,doWork: null
	,maxThreads: null
	,minThreads: null
	,onComplete: null
	,onError: null
	,onProgress: null
	,queue: function(state) {
		this.doWork.dispatch(state);
	}
	,sendComplete: function(state) {
		this.onComplete.dispatch(state);
	}
	,sendError: function(state) {
		this.onError.dispatch(state);
	}
	,sendProgress: function(state) {
		this.onProgress.dispatch(state);
	}
	,__class__: lime_system_ThreadPool
};
var lime_system__$ThreadPool_ThreadPoolMessageType = $hxClasses["lime.system._ThreadPool.ThreadPoolMessageType"] = { __ename__ : ["lime","system","_ThreadPool","ThreadPoolMessageType"], __constructs__ : ["COMPLETE","ERROR","EXIT","PROGRESS","WORK"] };
lime_system__$ThreadPool_ThreadPoolMessageType.COMPLETE = ["COMPLETE",0];
lime_system__$ThreadPool_ThreadPoolMessageType.COMPLETE.toString = $estr;
lime_system__$ThreadPool_ThreadPoolMessageType.COMPLETE.__enum__ = lime_system__$ThreadPool_ThreadPoolMessageType;
lime_system__$ThreadPool_ThreadPoolMessageType.ERROR = ["ERROR",1];
lime_system__$ThreadPool_ThreadPoolMessageType.ERROR.toString = $estr;
lime_system__$ThreadPool_ThreadPoolMessageType.ERROR.__enum__ = lime_system__$ThreadPool_ThreadPoolMessageType;
lime_system__$ThreadPool_ThreadPoolMessageType.EXIT = ["EXIT",2];
lime_system__$ThreadPool_ThreadPoolMessageType.EXIT.toString = $estr;
lime_system__$ThreadPool_ThreadPoolMessageType.EXIT.__enum__ = lime_system__$ThreadPool_ThreadPoolMessageType;
lime_system__$ThreadPool_ThreadPoolMessageType.PROGRESS = ["PROGRESS",3];
lime_system__$ThreadPool_ThreadPoolMessageType.PROGRESS.toString = $estr;
lime_system__$ThreadPool_ThreadPoolMessageType.PROGRESS.__enum__ = lime_system__$ThreadPool_ThreadPoolMessageType;
lime_system__$ThreadPool_ThreadPoolMessageType.WORK = ["WORK",4];
lime_system__$ThreadPool_ThreadPoolMessageType.WORK.toString = $estr;
lime_system__$ThreadPool_ThreadPoolMessageType.WORK.__enum__ = lime_system__$ThreadPool_ThreadPoolMessageType;
lime_system__$ThreadPool_ThreadPoolMessageType.__empty_constructs__ = [lime_system__$ThreadPool_ThreadPoolMessageType.COMPLETE,lime_system__$ThreadPool_ThreadPoolMessageType.ERROR,lime_system__$ThreadPool_ThreadPoolMessageType.EXIT,lime_system__$ThreadPool_ThreadPoolMessageType.PROGRESS,lime_system__$ThreadPool_ThreadPoolMessageType.WORK];
var lime_system__$ThreadPool_ThreadPoolMessage = function(type,state) {
	this.type = type;
	this.state = state;
};
$hxClasses["lime.system._ThreadPool.ThreadPoolMessage"] = lime_system__$ThreadPool_ThreadPoolMessage;
lime_system__$ThreadPool_ThreadPoolMessage.__name__ = ["lime","system","_ThreadPool","ThreadPoolMessage"];
lime_system__$ThreadPool_ThreadPoolMessage.prototype = {
	state: null
	,type: null
	,__class__: lime_system__$ThreadPool_ThreadPoolMessage
};
var lime_text_Font = function(name) {
	if(name != null) {
		this.name = name;
	}
	if(this.__fontPath != null) {
		this.__fromFile(this.__fontPath);
	}
};
$hxClasses["lime.text.Font"] = lime_text_Font;
lime_text_Font.__name__ = ["lime","text","Font"];
lime_text_Font.fromBytes = function(bytes) {
	if(bytes == null) {
		return null;
	}
	var font = new lime_text_Font();
	font.__fromBytes(bytes);
	return font;
};
lime_text_Font.fromFile = function(path) {
	if(path == null) {
		return null;
	}
	var font = new lime_text_Font();
	font.__fromFile(path);
	return font;
};
lime_text_Font.prototype = {
	ascender: null
	,descender: null
	,height: null
	,name: null
	,numGlyphs: null
	,src: null
	,underlinePosition: null
	,underlineThickness: null
	,unitsPerEM: null
	,__fontPath: null
	,decompose: function() {
		return null;
	}
	,getGlyph: function(character) {
		return -1;
	}
	,getGlyphs: function(characters) {
		if(characters == null) {
			characters = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^`'\"/\\&*()[]{}<>|:;_-+=?,. ";
		}
		return null;
	}
	,getGlyphMetrics: function(glyph) {
		return null;
	}
	,renderGlyph: function(glyph,fontSize) {
		return null;
	}
	,renderGlyphs: function(glyphs,fontSize) {
		return null;
	}
	,__fromBytes: function(bytes) {
		this.__fontPath = null;
	}
	,__fromFile: function(path) {
		this.__fontPath = path;
	}
	,__setSize: function(size) {
	}
	,get_ascender: function() {
		return 0;
	}
	,get_descender: function() {
		return 0;
	}
	,get_height: function() {
		return 0;
	}
	,get_numGlyphs: function() {
		return 0;
	}
	,get_underlinePosition: function() {
		return 0;
	}
	,get_underlineThickness: function() {
		return 0;
	}
	,get_unitsPerEM: function() {
		return 0;
	}
	,__class__: lime_text_Font
	,__properties__: {get_unitsPerEM:"get_unitsPerEM",get_underlineThickness:"get_underlineThickness",get_underlinePosition:"get_underlinePosition",get_numGlyphs:"get_numGlyphs",get_height:"get_height",get_descender:"get_descender",get_ascender:"get_ascender"}
};
var lime_text__$Glyph_Glyph_$Impl_$ = {};
$hxClasses["lime.text._Glyph.Glyph_Impl_"] = lime_text__$Glyph_Glyph_$Impl_$;
lime_text__$Glyph_Glyph_$Impl_$.__name__ = ["lime","text","_Glyph","Glyph_Impl_"];
lime_text__$Glyph_Glyph_$Impl_$._new = function(i) {
	return i;
};
var lime_text_GlyphMetrics = function() {
};
$hxClasses["lime.text.GlyphMetrics"] = lime_text_GlyphMetrics;
lime_text_GlyphMetrics.__name__ = ["lime","text","GlyphMetrics"];
lime_text_GlyphMetrics.prototype = {
	advance: null
	,height: null
	,horizontalBearing: null
	,verticalBearing: null
	,__class__: lime_text_GlyphMetrics
};
var lime_text_GlyphPosition = function(glyph,advance,offset) {
	this.glyph = glyph;
	this.advance = advance;
	if(offset != null) {
		this.offset = offset;
	} else {
		this.offset = new lime_math_Vector2();
	}
};
$hxClasses["lime.text.GlyphPosition"] = lime_text_GlyphPosition;
lime_text_GlyphPosition.__name__ = ["lime","text","GlyphPosition"];
lime_text_GlyphPosition.prototype = {
	advance: null
	,glyph: null
	,offset: null
	,__class__: lime_text_GlyphPosition
};
var lime_text__$TextDirection_TextDirection_$Impl_$ = {};
$hxClasses["lime.text._TextDirection.TextDirection_Impl_"] = lime_text__$TextDirection_TextDirection_$Impl_$;
lime_text__$TextDirection_TextDirection_$Impl_$.__name__ = ["lime","text","_TextDirection","TextDirection_Impl_"];
lime_text__$TextDirection_TextDirection_$Impl_$.__properties__ = {get_vertical:"get_vertical",get_horizontal:"get_horizontal",get_forward:"get_forward",get_backward:"get_backward"}
lime_text__$TextDirection_TextDirection_$Impl_$.reverse = function(this1) {
	this1 ^= 1;
};
lime_text__$TextDirection_TextDirection_$Impl_$.toString = function(this1) {
	switch(this1) {
	case 4:
		return "leftToRight";
	case 5:
		return "rightToLeft";
	case 6:
		return "topToBottom";
	case 7:
		return "bottomToTop";
	default:
		return "";
	}
};
lime_text__$TextDirection_TextDirection_$Impl_$.get_backward = function(this1) {
	return (this1 & -3) == 5;
};
lime_text__$TextDirection_TextDirection_$Impl_$.get_forward = function(this1) {
	return (this1 & -3) == 4;
};
lime_text__$TextDirection_TextDirection_$Impl_$.get_horizontal = function(this1) {
	return (this1 & -2) == 4;
};
lime_text__$TextDirection_TextDirection_$Impl_$.get_vertical = function(this1) {
	return (this1 & -2) == 6;
};
var lime_text_TextLayout = function(text,font,size,direction,script,language) {
	if(language == null) {
		language = "en";
	}
	if(script == null) {
		script = "Zyyy";
	}
	if(direction == null) {
		direction = 4;
	}
	if(size == null) {
		size = 12;
	}
	if(text == null) {
		text = "";
	}
	this.set_text(text);
	this.set_font(font);
	this.set_size(size);
	this.__direction = direction;
	this.__script = script;
	this.__language = language;
	this.positions = [];
	this.__dirty = true;
};
$hxClasses["lime.text.TextLayout"] = lime_text_TextLayout;
lime_text_TextLayout.__name__ = ["lime","text","TextLayout"];
lime_text_TextLayout.prototype = {
	font: null
	,glyphs: null
	,positions: null
	,size: null
	,text: null
	,__dirty: null
	,__buffer: null
	,__direction: null
	,__handle: null
	,__language: null
	,__script: null
	,__position: function() {
		this.positions = [];
	}
	,get_positions: function() {
		if(this.__dirty) {
			this.__dirty = false;
			this.__position();
		}
		return this.positions;
	}
	,get_direction: function() {
		return this.__direction;
	}
	,set_direction: function(value) {
		if(value == this.__direction) {
			return value;
		}
		this.__direction = value;
		this.__dirty = true;
		return value;
	}
	,set_font: function(value) {
		if(value == this.font) {
			return value;
		}
		this.font = value;
		this.__dirty = true;
		return value;
	}
	,get_glyphs: function() {
		var glyphs = [];
		var _g = 0;
		var _g1 = this.get_positions();
		while(_g < _g1.length) {
			var position = _g1[_g];
			++_g;
			glyphs.push(position.glyph);
		}
		return glyphs;
	}
	,get_language: function() {
		return this.__language;
	}
	,set_language: function(value) {
		if(value == this.__language) {
			return value;
		}
		this.__language = value;
		this.__dirty = true;
		return value;
	}
	,get_script: function() {
		return this.__script;
	}
	,set_script: function(value) {
		if(value == this.__script) {
			return value;
		}
		this.__script = value;
		this.__dirty = true;
		return value;
	}
	,set_size: function(value) {
		if(value == this.size) {
			return value;
		}
		this.size = value;
		this.__dirty = true;
		return value;
	}
	,set_text: function(value) {
		if(value == this.text) {
			return value;
		}
		this.text = value;
		this.__dirty = true;
		return value;
	}
	,__class__: lime_text_TextLayout
	,__properties__: {set_text:"set_text",set_size:"set_size",set_script:"set_script",get_script:"get_script",get_positions:"get_positions",set_language:"set_language",get_language:"get_language",get_glyphs:"get_glyphs",set_font:"set_font",set_direction:"set_direction",get_direction:"get_direction"}
};
var lime_text__$TextScript_TextScript_$Impl_$ = {};
$hxClasses["lime.text._TextScript.TextScript_Impl_"] = lime_text__$TextScript_TextScript_$Impl_$;
lime_text__$TextScript_TextScript_$Impl_$.__name__ = ["lime","text","_TextScript","TextScript_Impl_"];
lime_text__$TextScript_TextScript_$Impl_$.__properties__ = {get_rightToLeft:"get_rightToLeft"}
lime_text__$TextScript_TextScript_$Impl_$.get_rightToLeft = function(this1) {
	switch(this1) {
	case "Arab":case "Armi":case "Avst":case "Cprt":case "Hebr":case "Khar":case "Lydi":case "Mand":case "Nkoo":case "Orkh":case "Phli":case "Phlp":case "Phnx":case "Samr":case "Sarb":case "Syrc":case "Thaa":
		return true;
	default:
		return false;
	}
};
var lime_ui_Gamepad = function(id) {
	this.onDisconnect = new lime_app__$Event_$Void_$Void();
	this.onButtonUp = new lime_app__$Event_$lime_$ui_$GamepadButton_$Void();
	this.onButtonDown = new lime_app__$Event_$lime_$ui_$GamepadButton_$Void();
	this.onAxisMove = new lime_app__$Event_$lime_$ui_$GamepadAxis_$Float_$Void();
	this.id = id;
	this.connected = true;
};
$hxClasses["lime.ui.Gamepad"] = lime_ui_Gamepad;
lime_ui_Gamepad.__name__ = ["lime","ui","Gamepad"];
lime_ui_Gamepad.addMappings = function(mappings) {
};
lime_ui_Gamepad.__connect = function(id) {
	if(!lime_ui_Gamepad.devices.h.hasOwnProperty(id)) {
		var gamepad = new lime_ui_Gamepad(id);
		lime_ui_Gamepad.devices.h[id] = gamepad;
		lime_ui_Gamepad.onConnect.dispatch(gamepad);
	}
};
lime_ui_Gamepad.__disconnect = function(id) {
	var gamepad = lime_ui_Gamepad.devices.h[id];
	if(gamepad != null) {
		gamepad.connected = false;
	}
	lime_ui_Gamepad.devices.remove(id);
	if(gamepad != null) {
		gamepad.onDisconnect.dispatch();
	}
};
lime_ui_Gamepad.prototype = {
	connected: null
	,id: null
	,onAxisMove: null
	,onButtonDown: null
	,onButtonUp: null
	,onDisconnect: null
	,get_guid: function() {
		return lime_ui_Joystick.__getDeviceData()[this.id].id;
	}
	,get_name: function() {
		return lime_ui_Joystick.__getDeviceData()[this.id].id;
	}
	,__class__: lime_ui_Gamepad
	,__properties__: {get_name:"get_name",get_guid:"get_guid"}
};
var lime_ui__$GamepadAxis_GamepadAxis_$Impl_$ = {};
$hxClasses["lime.ui._GamepadAxis.GamepadAxis_Impl_"] = lime_ui__$GamepadAxis_GamepadAxis_$Impl_$;
lime_ui__$GamepadAxis_GamepadAxis_$Impl_$.__name__ = ["lime","ui","_GamepadAxis","GamepadAxis_Impl_"];
lime_ui__$GamepadAxis_GamepadAxis_$Impl_$.toString = function(this1) {
	switch(this1) {
	case 0:
		return "LEFT_X";
	case 1:
		return "LEFT_Y";
	case 2:
		return "RIGHT_X";
	case 3:
		return "RIGHT_Y";
	case 4:
		return "TRIGGER_LEFT";
	case 5:
		return "TRIGGER_RIGHT";
	default:
		return "UNKNOWN (" + this1 + ")";
	}
};
var lime_ui__$GamepadButton_GamepadButton_$Impl_$ = {};
$hxClasses["lime.ui._GamepadButton.GamepadButton_Impl_"] = lime_ui__$GamepadButton_GamepadButton_$Impl_$;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.__name__ = ["lime","ui","_GamepadButton","GamepadButton_Impl_"];
lime_ui__$GamepadButton_GamepadButton_$Impl_$.toString = function(this1) {
	switch(this1) {
	case 0:
		return "A";
	case 1:
		return "B";
	case 2:
		return "X";
	case 3:
		return "Y";
	case 4:
		return "BACK";
	case 5:
		return "GUIDE";
	case 6:
		return "START";
	case 7:
		return "LEFT_STICK";
	case 8:
		return "RIGHT_STICK";
	case 9:
		return "LEFT_SHOULDER";
	case 10:
		return "RIGHT_SHOULDER";
	case 11:
		return "DPAD_UP";
	case 12:
		return "DPAD_DOWN";
	case 13:
		return "DPAD_LEFT";
	case 14:
		return "DPAD_RIGHT";
	default:
		return "UNKNOWN (" + this1 + ")";
	}
};
var lime_ui_Joystick = function(id) {
	this.onTrackballMove = new lime_app__$Event_$Int_$Float_$Void();
	this.onHatMove = new lime_app__$Event_$Int_$lime_$ui_$JoystickHatPosition_$Void();
	this.onDisconnect = new lime_app__$Event_$Void_$Void();
	this.onButtonUp = new lime_app__$Event_$Int_$Void();
	this.onButtonDown = new lime_app__$Event_$Int_$Void();
	this.onAxisMove = new lime_app__$Event_$Int_$Float_$Void();
	this.id = id;
	this.connected = true;
};
$hxClasses["lime.ui.Joystick"] = lime_ui_Joystick;
lime_ui_Joystick.__name__ = ["lime","ui","Joystick"];
lime_ui_Joystick.__connect = function(id) {
	if(!lime_ui_Joystick.devices.h.hasOwnProperty(id)) {
		var joystick = new lime_ui_Joystick(id);
		lime_ui_Joystick.devices.h[id] = joystick;
		lime_ui_Joystick.onConnect.dispatch(joystick);
	}
};
lime_ui_Joystick.__disconnect = function(id) {
	var joystick = lime_ui_Joystick.devices.h[id];
	if(joystick != null) {
		joystick.connected = false;
	}
	lime_ui_Joystick.devices.remove(id);
	if(joystick != null) {
		joystick.onDisconnect.dispatch();
	}
};
lime_ui_Joystick.__getDeviceData = function() {
	if(navigator.getGamepads) {
		return navigator.getGamepads();
	} else if(navigator.webkitGetGamepads) {
		return navigator.webkitGetGamepads();
	} else {
		return null;
	}
};
lime_ui_Joystick.prototype = {
	connected: null
	,id: null
	,onAxisMove: null
	,onButtonDown: null
	,onButtonUp: null
	,onDisconnect: null
	,onHatMove: null
	,onTrackballMove: null
	,get_guid: function() {
		return lime_ui_Joystick.__getDeviceData()[this.id].id;
	}
	,get_name: function() {
		return lime_ui_Joystick.__getDeviceData()[this.id].id;
	}
	,get_numAxes: function() {
		return lime_ui_Joystick.__getDeviceData()[this.id].axes.length;
	}
	,get_numButtons: function() {
		return lime_ui_Joystick.__getDeviceData()[this.id].buttons.length;
	}
	,get_numHats: function() {
		return 0;
	}
	,get_numTrackballs: function() {
		return 0;
	}
	,__class__: lime_ui_Joystick
	,__properties__: {get_numTrackballs:"get_numTrackballs",get_numHats:"get_numHats",get_numButtons:"get_numButtons",get_numAxes:"get_numAxes",get_name:"get_name",get_guid:"get_guid"}
};
var lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$ = {};
$hxClasses["lime.ui._JoystickHatPosition.JoystickHatPosition_Impl_"] = lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$;
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.__name__ = ["lime","ui","_JoystickHatPosition","JoystickHatPosition_Impl_"];
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.__properties__ = {set_up:"set_up",get_up:"get_up",set_right:"set_right",get_right:"get_right",set_left:"set_left",get_left:"get_left",set_down:"set_down",get_down:"get_down",set_center:"set_center",get_center:"get_center"}
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$._new = function(value) {
	return value;
};
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.get_center = function(this1) {
	return this1 == 0;
};
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.set_center = function(this1,value) {
	if(value) {
		this1 = 0;
	}
	return value;
};
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.get_down = function(this1) {
	return (this1 & 4) > 0;
};
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.set_down = function(this1,value) {
	if(value) {
		this1 |= 4;
	} else {
		this1 &= 268435451;
	}
	return value;
};
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.get_left = function(this1) {
	return (this1 & 8) > 0;
};
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.set_left = function(this1,value) {
	if(value) {
		this1 |= 8;
	} else {
		this1 &= 268435447;
	}
	return value;
};
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.get_right = function(this1) {
	return (this1 & 2) > 0;
};
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.set_right = function(this1,value) {
	if(value) {
		this1 |= 2;
	} else {
		this1 &= 268435453;
	}
	return value;
};
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.get_up = function(this1) {
	return (this1 & 1) > 0;
};
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.set_up = function(this1,value) {
	if(value) {
		this1 |= 1;
	} else {
		this1 &= 268435454;
	}
	return value;
};
var lime_ui__$KeyCode_KeyCode_$Impl_$ = {};
$hxClasses["lime.ui._KeyCode.KeyCode_Impl_"] = lime_ui__$KeyCode_KeyCode_$Impl_$;
lime_ui__$KeyCode_KeyCode_$Impl_$.__name__ = ["lime","ui","_KeyCode","KeyCode_Impl_"];
lime_ui__$KeyCode_KeyCode_$Impl_$.gt = function(a,b) {
	return a > b;
};
lime_ui__$KeyCode_KeyCode_$Impl_$.gte = function(a,b) {
	return a >= b;
};
lime_ui__$KeyCode_KeyCode_$Impl_$.lt = function(a,b) {
	return a < b;
};
lime_ui__$KeyCode_KeyCode_$Impl_$.lte = function(a,b) {
	return a <= b;
};
lime_ui__$KeyCode_KeyCode_$Impl_$.plus = function(a,b) {
	return a + b;
};
var lime_ui__$KeyModifier_KeyModifier_$Impl_$ = {};
$hxClasses["lime.ui._KeyModifier.KeyModifier_Impl_"] = lime_ui__$KeyModifier_KeyModifier_$Impl_$;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.__name__ = ["lime","ui","_KeyModifier","KeyModifier_Impl_"];
lime_ui__$KeyModifier_KeyModifier_$Impl_$.__properties__ = {set_shiftKey:"set_shiftKey",get_shiftKey:"get_shiftKey",set_numLock:"set_numLock",get_numLock:"get_numLock",set_metaKey:"set_metaKey",get_metaKey:"get_metaKey",set_ctrlKey:"set_ctrlKey",get_ctrlKey:"get_ctrlKey",set_capsLock:"set_capsLock",get_capsLock:"get_capsLock",set_altKey:"set_altKey",get_altKey:"get_altKey"}
lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_altKey = function(this1) {
	if((this1 & 256) <= 0) {
		return (this1 & 512) > 0;
	} else {
		return true;
	}
};
lime_ui__$KeyModifier_KeyModifier_$Impl_$.set_altKey = function(this1,value) {
	if(value) {
		this1 |= 768;
	} else {
		this1 &= 268434687;
	}
	return value;
};
lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_capsLock = function(this1) {
	if((this1 & 8192) <= 0) {
		return (this1 & 8192) > 0;
	} else {
		return true;
	}
};
lime_ui__$KeyModifier_KeyModifier_$Impl_$.set_capsLock = function(this1,value) {
	if(value) {
		this1 |= 8192;
	} else {
		this1 &= 268427263;
	}
	return value;
};
lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_ctrlKey = function(this1) {
	if((this1 & 64) <= 0) {
		return (this1 & 128) > 0;
	} else {
		return true;
	}
};
lime_ui__$KeyModifier_KeyModifier_$Impl_$.set_ctrlKey = function(this1,value) {
	if(value) {
		this1 |= 192;
	} else {
		this1 &= 268435263;
	}
	return value;
};
lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_metaKey = function(this1) {
	if((this1 & 1024) <= 0) {
		return (this1 & 2048) > 0;
	} else {
		return true;
	}
};
lime_ui__$KeyModifier_KeyModifier_$Impl_$.set_metaKey = function(this1,value) {
	if(value) {
		this1 |= 3072;
	} else {
		this1 &= 268432383;
	}
	return value;
};
lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_numLock = function(this1) {
	if((this1 & 4096) <= 0) {
		return (this1 & 4096) > 0;
	} else {
		return true;
	}
};
lime_ui__$KeyModifier_KeyModifier_$Impl_$.set_numLock = function(this1,value) {
	if(value) {
		this1 |= 4096;
	} else {
		this1 &= 268431359;
	}
	return value;
};
lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_shiftKey = function(this1) {
	if((this1 & 1) <= 0) {
		return (this1 & 2) > 0;
	} else {
		return true;
	}
};
lime_ui__$KeyModifier_KeyModifier_$Impl_$.set_shiftKey = function(this1,value) {
	if(value) {
		this1 |= 3;
	} else {
		this1 &= 268435452;
	}
	return value;
};
var lime_ui_Mouse = function() { };
$hxClasses["lime.ui.Mouse"] = lime_ui_Mouse;
lime_ui_Mouse.__name__ = ["lime","ui","Mouse"];
lime_ui_Mouse.__properties__ = {set_lock:"set_lock",get_lock:"get_lock",set_cursor:"set_cursor",get_cursor:"get_cursor"}
lime_ui_Mouse.hide = function() {
	lime__$backend_html5_HTML5Mouse.hide();
};
lime_ui_Mouse.show = function() {
	lime__$backend_html5_HTML5Mouse.show();
};
lime_ui_Mouse.warp = function(x,y,window) {
};
lime_ui_Mouse.get_cursor = function() {
	return lime__$backend_html5_HTML5Mouse.get_cursor();
};
lime_ui_Mouse.set_cursor = function(value) {
	return lime__$backend_html5_HTML5Mouse.set_cursor(value);
};
lime_ui_Mouse.get_lock = function() {
	return lime__$backend_html5_HTML5Mouse.get_lock();
};
lime_ui_Mouse.set_lock = function(value) {
	return lime__$backend_html5_HTML5Mouse.set_lock(value);
};
var lime_ui_MouseCursor = $hxClasses["lime.ui.MouseCursor"] = { __ename__ : ["lime","ui","MouseCursor"], __constructs__ : ["ARROW","CROSSHAIR","DEFAULT","MOVE","POINTER","RESIZE_NESW","RESIZE_NS","RESIZE_NWSE","RESIZE_WE","TEXT","WAIT","WAIT_ARROW","CUSTOM"] };
lime_ui_MouseCursor.ARROW = ["ARROW",0];
lime_ui_MouseCursor.ARROW.toString = $estr;
lime_ui_MouseCursor.ARROW.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.CROSSHAIR = ["CROSSHAIR",1];
lime_ui_MouseCursor.CROSSHAIR.toString = $estr;
lime_ui_MouseCursor.CROSSHAIR.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.DEFAULT = ["DEFAULT",2];
lime_ui_MouseCursor.DEFAULT.toString = $estr;
lime_ui_MouseCursor.DEFAULT.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.MOVE = ["MOVE",3];
lime_ui_MouseCursor.MOVE.toString = $estr;
lime_ui_MouseCursor.MOVE.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.POINTER = ["POINTER",4];
lime_ui_MouseCursor.POINTER.toString = $estr;
lime_ui_MouseCursor.POINTER.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.RESIZE_NESW = ["RESIZE_NESW",5];
lime_ui_MouseCursor.RESIZE_NESW.toString = $estr;
lime_ui_MouseCursor.RESIZE_NESW.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.RESIZE_NS = ["RESIZE_NS",6];
lime_ui_MouseCursor.RESIZE_NS.toString = $estr;
lime_ui_MouseCursor.RESIZE_NS.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.RESIZE_NWSE = ["RESIZE_NWSE",7];
lime_ui_MouseCursor.RESIZE_NWSE.toString = $estr;
lime_ui_MouseCursor.RESIZE_NWSE.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.RESIZE_WE = ["RESIZE_WE",8];
lime_ui_MouseCursor.RESIZE_WE.toString = $estr;
lime_ui_MouseCursor.RESIZE_WE.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.TEXT = ["TEXT",9];
lime_ui_MouseCursor.TEXT.toString = $estr;
lime_ui_MouseCursor.TEXT.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.WAIT = ["WAIT",10];
lime_ui_MouseCursor.WAIT.toString = $estr;
lime_ui_MouseCursor.WAIT.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.WAIT_ARROW = ["WAIT_ARROW",11];
lime_ui_MouseCursor.WAIT_ARROW.toString = $estr;
lime_ui_MouseCursor.WAIT_ARROW.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.CUSTOM = ["CUSTOM",12];
lime_ui_MouseCursor.CUSTOM.toString = $estr;
lime_ui_MouseCursor.CUSTOM.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.__empty_constructs__ = [lime_ui_MouseCursor.ARROW,lime_ui_MouseCursor.CROSSHAIR,lime_ui_MouseCursor.DEFAULT,lime_ui_MouseCursor.MOVE,lime_ui_MouseCursor.POINTER,lime_ui_MouseCursor.RESIZE_NESW,lime_ui_MouseCursor.RESIZE_NS,lime_ui_MouseCursor.RESIZE_NWSE,lime_ui_MouseCursor.RESIZE_WE,lime_ui_MouseCursor.TEXT,lime_ui_MouseCursor.WAIT,lime_ui_MouseCursor.WAIT_ARROW,lime_ui_MouseCursor.CUSTOM];
var lime_ui_Touch = function(x,y,id,dx,dy,pressure,device) {
	this.x = x;
	this.y = y;
	this.id = id;
	this.dx = dx;
	this.dy = dy;
	this.pressure = pressure;
	this.device = device;
};
$hxClasses["lime.ui.Touch"] = lime_ui_Touch;
lime_ui_Touch.__name__ = ["lime","ui","Touch"];
lime_ui_Touch.prototype = {
	device: null
	,dx: null
	,dy: null
	,id: null
	,pressure: null
	,x: null
	,y: null
	,__class__: lime_ui_Touch
};
var lime_ui_Window = function(config) {
	this.onTextInput = new lime_app__$Event_$String_$Void();
	this.onTextEdit = new lime_app__$Event_$String_$Int_$Int_$Void();
	this.onRestore = new lime_app__$Event_$Void_$Void();
	this.onResize = new lime_app__$Event_$Int_$Int_$Void();
	this.onMove = new lime_app__$Event_$Float_$Float_$Void();
	this.onMouseWheel = new lime_app__$Event_$Float_$Float_$Void();
	this.onMouseUp = new lime_app__$Event_$Float_$Float_$Int_$Void();
	this.onMouseMoveRelative = new lime_app__$Event_$Float_$Float_$Void();
	this.onMouseMove = new lime_app__$Event_$Float_$Float_$Void();
	this.onMouseDown = new lime_app__$Event_$Float_$Float_$Int_$Void();
	this.onMinimize = new lime_app__$Event_$Void_$Void();
	this.onLeave = new lime_app__$Event_$Void_$Void();
	this.onKeyUp = new lime_app__$Event_$lime_$ui_$KeyCode_$lime_$ui_$KeyModifier_$Void();
	this.onKeyDown = new lime_app__$Event_$lime_$ui_$KeyCode_$lime_$ui_$KeyModifier_$Void();
	this.onFullscreen = new lime_app__$Event_$Void_$Void();
	this.onFocusOut = new lime_app__$Event_$Void_$Void();
	this.onFocusIn = new lime_app__$Event_$Void_$Void();
	this.onEnter = new lime_app__$Event_$Void_$Void();
	this.onDropFile = new lime_app__$Event_$String_$Void();
	this.onDeactivate = new lime_app__$Event_$Void_$Void();
	this.onCreate = new lime_app__$Event_$Void_$Void();
	this.onClose = new lime_app__$Event_$Void_$Void();
	this.onActivate = new lime_app__$Event_$Void_$Void();
	this.config = config;
	this.__width = 0;
	this.__height = 0;
	this.__fullscreen = false;
	this.__scale = 1;
	this.__x = 0;
	this.__y = 0;
	this.__title = "";
	this.id = -1;
	if(config != null) {
		if(Object.prototype.hasOwnProperty.call(config,"width")) {
			this.__width = config.width;
		}
		if(Object.prototype.hasOwnProperty.call(config,"height")) {
			this.__height = config.height;
		}
		if(Object.prototype.hasOwnProperty.call(config,"x")) {
			this.__x = config.x;
		}
		if(Object.prototype.hasOwnProperty.call(config,"y")) {
			this.__y = config.y;
		}
		if(Object.prototype.hasOwnProperty.call(config,"fullscreen")) {
			this.__fullscreen = config.fullscreen;
		}
		if(Object.prototype.hasOwnProperty.call(config,"borderless")) {
			this.__borderless = config.borderless;
		}
		if(Object.prototype.hasOwnProperty.call(config,"resizable")) {
			this.__resizable = config.resizable;
		}
		if(Object.prototype.hasOwnProperty.call(config,"title")) {
			this.__title = config.title;
		}
	}
	this.backend = new lime__$backend_html5_HTML5Window(this);
};
$hxClasses["lime.ui.Window"] = lime_ui_Window;
lime_ui_Window.__name__ = ["lime","ui","Window"];
lime_ui_Window.prototype = {
	application: null
	,config: null
	,display: null
	,id: null
	,onActivate: null
	,onClose: null
	,onCreate: null
	,onDeactivate: null
	,onDropFile: null
	,onEnter: null
	,onFocusIn: null
	,onFocusOut: null
	,onFullscreen: null
	,onKeyDown: null
	,onKeyUp: null
	,onLeave: null
	,onMinimize: null
	,onMouseDown: null
	,onMouseMove: null
	,onMouseMoveRelative: null
	,onMouseUp: null
	,onMouseWheel: null
	,onMove: null
	,onResize: null
	,onRestore: null
	,onTextEdit: null
	,onTextInput: null
	,renderer: null
	,scale: null
	,stage: null
	,backend: null
	,__borderless: null
	,__fullscreen: null
	,__height: null
	,__maximized: null
	,__minimized: null
	,__resizable: null
	,__scale: null
	,__title: null
	,__width: null
	,__x: null
	,__y: null
	,alert: function(message,title) {
		this.backend.alert(message,title);
	}
	,close: function() {
		this.backend.close();
	}
	,create: function(application) {
		this.application = application;
		this.backend.create(application);
		if(this.renderer != null) {
			this.renderer.create();
		}
	}
	,focus: function() {
	}
	,move: function(x,y) {
		this.__x = x;
		this.__y = y;
	}
	,resize: function(width,height) {
		this.__width = width;
		this.__height = height;
	}
	,setIcon: function(image) {
		if(image == null) {
			return;
		}
	}
	,toString: function() {
		return "[object Window]";
	}
	,get_display: function() {
		return this.backend.getDisplay();
	}
	,get_borderless: function() {
		return this.__borderless;
	}
	,set_borderless: function(value) {
		return this.__borderless = this.backend.setBorderless(value);
	}
	,get_enableTextEvents: function() {
		return this.backend.getEnableTextEvents();
	}
	,set_enableTextEvents: function(value) {
		return this.backend.setEnableTextEvents(value);
	}
	,get_fullscreen: function() {
		return this.__fullscreen;
	}
	,set_fullscreen: function(value) {
		return this.__fullscreen = this.backend.setFullscreen(value);
	}
	,get_height: function() {
		return this.__height;
	}
	,set_height: function(value) {
		this.resize(this.__width,value);
		return this.__height;
	}
	,get_maximized: function() {
		return this.__maximized;
	}
	,set_maximized: function(value) {
		this.__minimized = false;
		return this.__maximized = this.backend.setMaximized(value);
	}
	,get_minimized: function() {
		return this.__minimized;
	}
	,set_minimized: function(value) {
		this.__maximized = false;
		return this.__minimized = this.backend.setMinimized(value);
	}
	,get_resizable: function() {
		return this.__resizable;
	}
	,set_resizable: function(value) {
		this.__resizable = this.backend.setResizable(value);
		return this.__resizable;
	}
	,get_scale: function() {
		return this.__scale;
	}
	,get_title: function() {
		return this.__title;
	}
	,set_title: function(value) {
		return this.__title = this.backend.setTitle(value);
	}
	,get_width: function() {
		return this.__width;
	}
	,set_width: function(value) {
		this.resize(value,this.__height);
		return this.__width;
	}
	,get_x: function() {
		return this.__x;
	}
	,set_x: function(value) {
		this.move(value,this.__y);
		return this.__x;
	}
	,get_y: function() {
		return this.__y;
	}
	,set_y: function(value) {
		this.move(this.__x,value);
		return this.__y;
	}
	,__class__: lime_ui_Window
	,__properties__: {set_y:"set_y",get_y:"get_y",set_x:"set_x",get_x:"get_x",set_width:"set_width",get_width:"get_width",set_title:"set_title",get_title:"get_title",get_scale:"get_scale",set_resizable:"set_resizable",get_resizable:"get_resizable",set_minimized:"set_minimized",get_minimized:"get_minimized",set_maximized:"set_maximized",get_maximized:"get_maximized",set_height:"set_height",get_height:"get_height",set_fullscreen:"set_fullscreen",get_fullscreen:"get_fullscreen",set_enableTextEvents:"set_enableTextEvents",get_enableTextEvents:"get_enableTextEvents",get_display:"get_display",set_borderless:"set_borderless",get_borderless:"get_borderless"}
};
var lime_utils_TAError = $hxClasses["lime.utils.TAError"] = { __ename__ : ["lime","utils","TAError"], __constructs__ : ["RangeError"] };
lime_utils_TAError.RangeError = ["RangeError",0];
lime_utils_TAError.RangeError.toString = $estr;
lime_utils_TAError.RangeError.__enum__ = lime_utils_TAError;
lime_utils_TAError.__empty_constructs__ = [lime_utils_TAError.RangeError];
var lime_utils_Bytes = function(length,bytesData) {
	haxe_io_Bytes.call(this,bytesData);
};
$hxClasses["lime.utils.Bytes"] = lime_utils_Bytes;
lime_utils_Bytes.__name__ = ["lime","utils","Bytes"];
lime_utils_Bytes.alloc = function(length) {
	var bytes = new haxe_io_Bytes(new ArrayBuffer(length));
	return new lime_utils_Bytes(bytes.length,bytes.b.bufferValue);
};
lime_utils_Bytes.fastGet = function(b,pos) {
	return b.bytes[pos];
};
lime_utils_Bytes.ofData = function(b) {
	var bytes = haxe_io_Bytes.ofData(b);
	return new lime_utils_Bytes(bytes.length,bytes.b.bufferValue);
};
lime_utils_Bytes.ofString = function(s) {
	var bytes = haxe_io_Bytes.ofString(s);
	return new lime_utils_Bytes(bytes.length,bytes.b.bufferValue);
};
lime_utils_Bytes.readFile = function(path) {
	return null;
};
lime_utils_Bytes.lime_bytes_from_data_pointer = function(data,length) {
	return lime_utils_Bytes.cffi_lime_bytes_from_data_pointer(data,length);
};
lime_utils_Bytes.lime_bytes_get_data_pointer = function(data) {
	return lime_utils_Bytes.cffi_lime_bytes_get_data_pointer(data);
};
lime_utils_Bytes.lime_bytes_read_file = function(path,bytes) {
	return lime_utils_Bytes.cffi_lime_bytes_read_file(path,bytes);
};
lime_utils_Bytes.__super__ = haxe_io_Bytes;
lime_utils_Bytes.prototype = $extend(haxe_io_Bytes.prototype,{
	__class__: lime_utils_Bytes
});
var lime_utils__$Float32Array_Float32Array_$Impl_$ = {};
$hxClasses["lime.utils._Float32Array.Float32Array_Impl_"] = lime_utils__$Float32Array_Float32Array_$Impl_$;
lime_utils__$Float32Array_Float32Array_$Impl_$.__name__ = ["lime","utils","_Float32Array","Float32Array_Impl_"];
lime_utils__$Float32Array_Float32Array_$Impl_$.fromBytes = function(bytes,byteOffset,len) {
	if(byteOffset == null) {
		byteOffset = 0;
	}
	if(byteOffset == null) {
		return new Float32Array(bytes.b.bufferValue);
	}
	if(len == null) {
		return new Float32Array(bytes.b.bufferValue,byteOffset);
	}
	return new Float32Array(bytes.b.bufferValue,byteOffset,len);
};
lime_utils__$Float32Array_Float32Array_$Impl_$.toBytes = function(this1) {
	return new haxe_io_Bytes(new Uint8Array(this1.buffer));
};
lime_utils__$Float32Array_Float32Array_$Impl_$.toString = function(this1) {
	if(this1 != null) {
		return "Float32Array [byteLength:" + this1.byteLength + ", length:" + this1.length + "]";
	} else {
		return null;
	}
};
var lime_utils_GLUtils = function() { };
$hxClasses["lime.utils.GLUtils"] = lime_utils_GLUtils;
lime_utils_GLUtils.__name__ = ["lime","utils","GLUtils"];
lime_utils_GLUtils.compileShader = function(source,type) {
	var shader = lime_graphics_opengl_GL.context.createShader(type);
	lime_graphics_opengl_GL.context.shaderSource(shader,source);
	lime_graphics_opengl_GL.context.compileShader(shader);
	if(lime_graphics_opengl_GL.context.getShaderParameter(shader,35713) == 0) {
		switch(type) {
		case 35632:
			throw new js__$Boot_HaxeError("Error compiling fragment shader");
			break;
		case 35633:
			throw new js__$Boot_HaxeError("Error compiling vertex shader");
			break;
		default:
			throw new js__$Boot_HaxeError("Error compiling unknown shader type");
		}
	}
	return shader;
};
lime_utils_GLUtils.createProgram = function(vertexSource,fragmentSource) {
	var vertexShader = lime_utils_GLUtils.compileShader(vertexSource,35633);
	var fragmentShader = lime_utils_GLUtils.compileShader(fragmentSource,35632);
	var program = lime_graphics_opengl_GL.context.createProgram();
	lime_graphics_opengl_GL.context.attachShader(program,vertexShader);
	lime_graphics_opengl_GL.context.attachShader(program,fragmentShader);
	lime_graphics_opengl_GL.context.linkProgram(program);
	if(lime_graphics_opengl_GL.context.getProgramParameter(program,35714) == 0) {
		throw new js__$Boot_HaxeError("Unable to initialize the shader program.");
	}
	return program;
};
var lime_utils__$Int16Array_Int16Array_$Impl_$ = {};
$hxClasses["lime.utils._Int16Array.Int16Array_Impl_"] = lime_utils__$Int16Array_Int16Array_$Impl_$;
lime_utils__$Int16Array_Int16Array_$Impl_$.__name__ = ["lime","utils","_Int16Array","Int16Array_Impl_"];
lime_utils__$Int16Array_Int16Array_$Impl_$.fromBytes = function(bytes,byteOffset,len) {
	if(byteOffset == null) {
		byteOffset = 0;
	}
	if(byteOffset == null) {
		return new Int16Array(bytes.b.bufferValue);
	}
	if(len == null) {
		return new Int16Array(bytes.b.bufferValue,byteOffset);
	}
	return new Int16Array(bytes.b.bufferValue,byteOffset,len);
};
lime_utils__$Int16Array_Int16Array_$Impl_$.toBytes = function(this1) {
	return new haxe_io_Bytes(new Uint8Array(this1.buffer));
};
lime_utils__$Int16Array_Int16Array_$Impl_$.toString = function(this1) {
	if(this1 != null) {
		return "Int16Array [byteLength:" + this1.byteLength + ", length:" + this1.length + "]";
	} else {
		return null;
	}
};
var lime_utils__$Int32Array_Int32Array_$Impl_$ = {};
$hxClasses["lime.utils._Int32Array.Int32Array_Impl_"] = lime_utils__$Int32Array_Int32Array_$Impl_$;
lime_utils__$Int32Array_Int32Array_$Impl_$.__name__ = ["lime","utils","_Int32Array","Int32Array_Impl_"];
lime_utils__$Int32Array_Int32Array_$Impl_$.fromBytes = function(bytes,byteOffset,len) {
	if(byteOffset == null) {
		byteOffset = 0;
	}
	if(byteOffset == null) {
		return new Int32Array(bytes.b.bufferValue);
	}
	if(len == null) {
		return new Int32Array(bytes.b.bufferValue,byteOffset);
	}
	return new Int32Array(bytes.b.bufferValue,byteOffset,len);
};
lime_utils__$Int32Array_Int32Array_$Impl_$.toBytes = function(this1) {
	return new haxe_io_Bytes(new Uint8Array(this1.buffer));
};
lime_utils__$Int32Array_Int32Array_$Impl_$.toString = function(this1) {
	if(this1 != null) {
		return "Int32Array [byteLength:" + this1.byteLength + ", length:" + this1.length + "]";
	} else {
		return null;
	}
};
var lime_utils_Log = function() { };
$hxClasses["lime.utils.Log"] = lime_utils_Log;
lime_utils_Log.__name__ = ["lime","utils","Log"];
lime_utils_Log.debug = function(message,info) {
	if(lime_utils_Log.level >= 4) {
		console.log("[" + info.className + "] " + message);
	}
};
lime_utils_Log.error = function(message,info) {
	if(lime_utils_Log.level >= 1) {
		console.log("[" + info.className + "] ERROR: " + message);
	}
};
lime_utils_Log.info = function(message,info) {
	if(lime_utils_Log.level >= 3) {
		console.log("[" + info.className + "] " + message);
	}
};
lime_utils_Log.print = function(message) {
	console.log(message);
};
lime_utils_Log.println = function(message) {
	console.log(message);
};
lime_utils_Log.verbose = function(message,info) {
	if(lime_utils_Log.level >= 5) {
		console.log("[" + info.className + "] " + message);
	}
};
lime_utils_Log.warn = function(message,info) {
	if(lime_utils_Log.level >= 2) {
		console.log("[" + info.className + "] WARNING: " + message);
	}
};
var lime_utils__$Log_LogLevel_$Impl_$ = {};
$hxClasses["lime.utils._Log.LogLevel_Impl_"] = lime_utils__$Log_LogLevel_$Impl_$;
lime_utils__$Log_LogLevel_$Impl_$.__name__ = ["lime","utils","_Log","LogLevel_Impl_"];
lime_utils__$Log_LogLevel_$Impl_$.gt = function(a,b) {
	return a > b;
};
lime_utils__$Log_LogLevel_$Impl_$.gte = function(a,b) {
	return a >= b;
};
lime_utils__$Log_LogLevel_$Impl_$.lt = function(a,b) {
	return a < b;
};
lime_utils__$Log_LogLevel_$Impl_$.lte = function(a,b) {
	return a <= b;
};
var lime_utils__$UInt32Array_UInt32Array_$Impl_$ = {};
$hxClasses["lime.utils._UInt32Array.UInt32Array_Impl_"] = lime_utils__$UInt32Array_UInt32Array_$Impl_$;
lime_utils__$UInt32Array_UInt32Array_$Impl_$.__name__ = ["lime","utils","_UInt32Array","UInt32Array_Impl_"];
lime_utils__$UInt32Array_UInt32Array_$Impl_$.fromBytes = function(bytes,byteOffset,len) {
	if(byteOffset == null) {
		byteOffset = 0;
	}
	if(byteOffset == null) {
		return new Uint32Array(bytes.b.bufferValue);
	}
	if(len == null) {
		return new Uint32Array(bytes.b.bufferValue,byteOffset);
	}
	return new Uint32Array(bytes.b.bufferValue,byteOffset,len);
};
lime_utils__$UInt32Array_UInt32Array_$Impl_$.toBytes = function(this1) {
	return new haxe_io_Bytes(new Uint8Array(this1.buffer));
};
lime_utils__$UInt32Array_UInt32Array_$Impl_$.toString = function(this1) {
	if(this1 != null) {
		return "UInt32Array [byteLength:" + this1.byteLength + ", length:" + this1.length + "]";
	} else {
		return null;
	}
};
var lime_utils__$UInt8Array_UInt8Array_$Impl_$ = {};
$hxClasses["lime.utils._UInt8Array.UInt8Array_Impl_"] = lime_utils__$UInt8Array_UInt8Array_$Impl_$;
lime_utils__$UInt8Array_UInt8Array_$Impl_$.__name__ = ["lime","utils","_UInt8Array","UInt8Array_Impl_"];
lime_utils__$UInt8Array_UInt8Array_$Impl_$.fromBytes = function(bytes,byteOffset,len) {
	if(byteOffset == null) {
		return new Uint8Array(bytes.b.bufferValue);
	}
	if(len == null) {
		return new Uint8Array(bytes.b.bufferValue,byteOffset);
	}
	return new Uint8Array(bytes.b.bufferValue,byteOffset,len);
};
lime_utils__$UInt8Array_UInt8Array_$Impl_$.toBytes = function(this1) {
	return new haxe_io_Bytes(new Uint8Array(this1.buffer));
};
lime_utils__$UInt8Array_UInt8Array_$Impl_$.toString = function(this1) {
	if(this1 != null) {
		return "UInt8Array [byteLength:" + this1.byteLength + ", length:" + this1.length + "]";
	} else {
		return null;
	}
};
var lime_utils_compress_Deflate = function() { };
$hxClasses["lime.utils.compress.Deflate"] = lime_utils_compress_Deflate;
lime_utils_compress_Deflate.__name__ = ["lime","utils","compress","Deflate"];
lime_utils_compress_Deflate.compress = function(bytes) {
	var data = pako.deflateRaw(bytes.b.bufferValue);
	return haxe_io_Bytes.ofData(data);
};
lime_utils_compress_Deflate.decompress = function(bytes) {
	var data = pako.inflateRaw(bytes.b.bufferValue);
	return haxe_io_Bytes.ofData(data);
};
var lime_utils_compress_LZMA = function() { };
$hxClasses["lime.utils.compress.LZMA"] = lime_utils_compress_LZMA;
lime_utils_compress_LZMA.__name__ = ["lime","utils","compress","LZMA"];
lime_utils_compress_LZMA.compress = function(bytes) {
	return null;
};
lime_utils_compress_LZMA.decompress = function(bytes) {
	return null;
};
var lime_utils_compress_Zlib = function() { };
$hxClasses["lime.utils.compress.Zlib"] = lime_utils_compress_Zlib;
lime_utils_compress_Zlib.__name__ = ["lime","utils","compress","Zlib"];
lime_utils_compress_Zlib.compress = function(bytes) {
	var data = pako.deflate(bytes.b.bufferValue);
	return haxe_io_Bytes.ofData(data);
};
lime_utils_compress_Zlib.decompress = function(bytes) {
	var data = pako.inflate(bytes.b.bufferValue);
	return haxe_io_Bytes.ofData(data);
};
var motion_actuators_IGenericActuator = function() { };
$hxClasses["motion.actuators.IGenericActuator"] = motion_actuators_IGenericActuator;
motion_actuators_IGenericActuator.__name__ = ["motion","actuators","IGenericActuator"];
motion_actuators_IGenericActuator.prototype = {
	autoVisible: null
	,delay: null
	,ease: null
	,onComplete: null
	,onRepeat: null
	,onUpdate: null
	,reflect: null
	,repeat: null
	,reverse: null
	,smartRotation: null
	,snapping: null
	,onPause: null
	,onResume: null
	,apply: null
	,move: null
	,pause: null
	,resume: null
	,stop: null
	,__class__: motion_actuators_IGenericActuator
};
var motion_actuators_GenericActuator = function(target,duration,properties) {
	this._autoVisible = true;
	this._delay = 0;
	this._reflect = false;
	this._repeat = 0;
	this._reverse = false;
	this._smartRotation = false;
	this._snapping = false;
	this.special = false;
	this.target = target;
	this.properties = properties;
	this.duration = duration;
	this._ease = motion_Actuate.defaultEase;
};
$hxClasses["motion.actuators.GenericActuator"] = motion_actuators_GenericActuator;
motion_actuators_GenericActuator.__name__ = ["motion","actuators","GenericActuator"];
motion_actuators_GenericActuator.__interfaces__ = [motion_actuators_IGenericActuator];
motion_actuators_GenericActuator.prototype = {
	duration: null
	,id: null
	,properties: null
	,target: null
	,_autoVisible: null
	,_delay: null
	,_ease: null
	,_onComplete: null
	,_onCompleteParams: null
	,_onRepeat: null
	,_onRepeatParams: null
	,_onUpdate: null
	,_onUpdateParams: null
	,_onResume: null
	,_onResumeParams: null
	,_onPause: null
	,_onPauseParams: null
	,_reflect: null
	,_repeat: null
	,_reverse: null
	,_smartRotation: null
	,_snapping: null
	,special: null
	,apply: function() {
		var _g = 0;
		var _g1 = Reflect.fields(this.properties);
		while(_g < _g1.length) {
			var i = _g1[_g];
			++_g;
			if(Object.prototype.hasOwnProperty.call(this.target,i)) {
				this.target[i] = Reflect.field(this.properties,i);
			} else {
				var o = this.target;
				var value = Reflect.field(this.properties,i);
				var tmp;
				var tmp1;
				if(o.__properties__) {
					tmp = o.__properties__["set_" + i];
					tmp1 = tmp;
				} else {
					tmp1 = false;
				}
				if(tmp1) {
					o[tmp](value);
				} else {
					o[i] = value;
				}
			}
		}
	}
	,autoVisible: function(value) {
		if(value == null) {
			value = true;
		}
		this._autoVisible = value;
		return this;
	}
	,callMethod: function(method,params) {
		if(params == null) {
			params = [];
		}
		return method.apply(method,params);
	}
	,change: function() {
		if(this._onUpdate != null) {
			var method = this._onUpdate;
			var params = this._onUpdateParams;
			if(params == null) {
				params = [];
			}
			method.apply(method,params);
		}
	}
	,complete: function(sendEvent) {
		if(sendEvent == null) {
			sendEvent = true;
		}
		if(sendEvent) {
			this.change();
			if(this._onComplete != null) {
				var method = this._onComplete;
				var params = this._onCompleteParams;
				if(params == null) {
					params = [];
				}
				method.apply(method,params);
			}
		}
		motion_Actuate.unload(this);
	}
	,delay: function(duration) {
		this._delay = duration;
		return this;
	}
	,ease: function(easing) {
		this._ease = easing;
		return this;
	}
	,move: function() {
	}
	,onComplete: function(handler,parameters) {
		this._onComplete = handler;
		if(parameters == null) {
			this._onCompleteParams = [];
		} else {
			this._onCompleteParams = parameters;
		}
		if(this.duration == 0) {
			this.complete();
		}
		return this;
	}
	,onRepeat: function(handler,parameters) {
		this._onRepeat = handler;
		if(parameters == null) {
			this._onRepeatParams = [];
		} else {
			this._onRepeatParams = parameters;
		}
		return this;
	}
	,onUpdate: function(handler,parameters) {
		this._onUpdate = handler;
		if(parameters == null) {
			this._onUpdateParams = [];
		} else {
			this._onUpdateParams = parameters;
		}
		return this;
	}
	,onPause: function(handler,parameters) {
		this._onPause = handler;
		if(parameters == null) {
			this._onPauseParams = [];
		} else {
			this._onPauseParams = parameters;
		}
		return this;
	}
	,onResume: function(handler,parameters) {
		this._onResume = handler;
		if(parameters == null) {
			this._onResumeParams = [];
		} else {
			this._onResumeParams = parameters;
		}
		return this;
	}
	,pause: function() {
		if(this._onPause != null) {
			var method = this._onPause;
			var params = this._onPauseParams;
			if(params == null) {
				params = [];
			}
			method.apply(method,params);
		}
	}
	,reflect: function(value) {
		if(value == null) {
			value = true;
		}
		this._reflect = value;
		this.special = true;
		return this;
	}
	,repeat: function(times) {
		if(times == null) {
			times = -1;
		}
		this._repeat = times;
		return this;
	}
	,resume: function() {
		if(this._onResume != null) {
			var method = this._onResume;
			var params = this._onResumeParams;
			if(params == null) {
				params = [];
			}
			method.apply(method,params);
		}
	}
	,reverse: function(value) {
		if(value == null) {
			value = true;
		}
		this._reverse = value;
		this.special = true;
		return this;
	}
	,smartRotation: function(value) {
		if(value == null) {
			value = true;
		}
		this._smartRotation = value;
		this.special = true;
		return this;
	}
	,snapping: function(value) {
		if(value == null) {
			value = true;
		}
		this._snapping = value;
		this.special = true;
		return this;
	}
	,stop: function(properties,complete,sendEvent) {
	}
	,__class__: motion_actuators_GenericActuator
};
var motion_actuators_SimpleActuator = function(target,duration,properties) {
	this.active = true;
	this.propertyDetails = [];
	this.sendChange = false;
	this.paused = false;
	this.cacheVisible = false;
	this.initialized = false;
	this.setVisible = false;
	this.toggleVisible = false;
	this.startTime = openfl_Lib.getTimer() / 1000;
	motion_actuators_GenericActuator.call(this,target,duration,properties);
	if(!motion_actuators_SimpleActuator.addedEvent) {
		motion_actuators_SimpleActuator.addedEvent = true;
		openfl_Lib.current.stage.addEventListener("enterFrame",motion_actuators_SimpleActuator.stage_onEnterFrame);
	}
};
$hxClasses["motion.actuators.SimpleActuator"] = motion_actuators_SimpleActuator;
motion_actuators_SimpleActuator.__name__ = ["motion","actuators","SimpleActuator"];
motion_actuators_SimpleActuator.stage_onEnterFrame = function(event) {
	var currentTime = openfl_Lib.getTimer() / 1000;
	var actuator;
	var j = 0;
	var _g1 = 0;
	var _g = motion_actuators_SimpleActuator.actuatorsLength;
	while(_g1 < _g) {
		++_g1;
		actuator = motion_actuators_SimpleActuator.actuators[j];
		if(actuator != null && actuator.active) {
			if(currentTime >= actuator.timeOffset) {
				actuator.update(currentTime);
			}
			++j;
		} else {
			motion_actuators_SimpleActuator.actuators.splice(j,1);
			--motion_actuators_SimpleActuator.actuatorsLength;
		}
	}
};
motion_actuators_SimpleActuator.__super__ = motion_actuators_GenericActuator;
motion_actuators_SimpleActuator.prototype = $extend(motion_actuators_GenericActuator.prototype,{
	setField_openfl_geom_Transform: function(target,propertyName,value) {
		if(Object.prototype.hasOwnProperty.call(target,propertyName)) {
			target[propertyName] = value;
		} else {
			var tmp;
			var tmp1;
			if(target.__properties__) {
				tmp = target.__properties__["set_" + propertyName];
				tmp1 = tmp;
			} else {
				tmp1 = false;
			}
			if(tmp1) {
				target[tmp](value);
			} else {
				target[propertyName] = value;
			}
		}
	}
	,setField_motion_actuators_TransformActuator_T: function(target,propertyName,value) {
		if(Object.prototype.hasOwnProperty.call(target,propertyName)) {
			target[propertyName] = value;
		} else {
			var tmp;
			var tmp1;
			if(target.__properties__) {
				tmp = target.__properties__["set_" + propertyName];
				tmp1 = tmp;
			} else {
				tmp1 = false;
			}
			if(tmp1) {
				target[tmp](value);
			} else {
				target[propertyName] = value;
			}
		}
	}
	,setField_motion_actuators_MotionPathActuator_T: function(target,propertyName,value) {
		if(Object.prototype.hasOwnProperty.call(target,propertyName)) {
			target[propertyName] = value;
		} else {
			var tmp;
			var tmp1;
			if(target.__properties__) {
				tmp = target.__properties__["set_" + propertyName];
				tmp1 = tmp;
			} else {
				tmp1 = false;
			}
			if(tmp1) {
				target[tmp](value);
			} else {
				target[propertyName] = value;
			}
		}
	}
	,setField_openfl_display_DisplayObject: function(target,propertyName,value) {
		if(Object.prototype.hasOwnProperty.call(target,propertyName)) {
			target[propertyName] = value;
		} else {
			var tmp;
			var tmp1;
			if(target.__properties__) {
				tmp = target.__properties__["set_" + propertyName];
				tmp1 = tmp;
			} else {
				tmp1 = false;
			}
			if(tmp1) {
				target[tmp](value);
			} else {
				target[propertyName] = value;
			}
		}
	}
	,setField_motion_actuators_SimpleActuator_T: function(target,propertyName,value) {
		if(Object.prototype.hasOwnProperty.call(target,propertyName)) {
			target[propertyName] = value;
		} else {
			var tmp;
			var tmp1;
			if(target.__properties__) {
				tmp = target.__properties__["set_" + propertyName];
				tmp1 = tmp;
			} else {
				tmp1 = false;
			}
			if(tmp1) {
				target[tmp](value);
			} else {
				target[propertyName] = value;
			}
		}
	}
	,timeOffset: null
	,active: null
	,cacheVisible: null
	,detailsLength: null
	,initialized: null
	,paused: null
	,pauseTime: null
	,propertyDetails: null
	,sendChange: null
	,setVisible: null
	,startTime: null
	,toggleVisible: null
	,autoVisible: function(value) {
		if(value == null) {
			value = true;
		}
		this._autoVisible = value;
		if(!value) {
			this.toggleVisible = false;
			if(this.setVisible) {
				var target = this.target;
				var value1 = this.cacheVisible;
				if(Object.prototype.hasOwnProperty.call(target,"visible")) {
					target["visible"] = value1;
				} else {
					var tmp;
					var tmp1;
					if(target.__properties__) {
						tmp = target.__properties__["set_" + "visible"];
						tmp1 = tmp;
					} else {
						tmp1 = false;
					}
					if(tmp1) {
						target[tmp](value1);
					} else {
						target["visible"] = value1;
					}
				}
			}
		}
		return this;
	}
	,delay: function(duration) {
		this._delay = duration;
		this.timeOffset = this.startTime + duration;
		return this;
	}
	,getField: function(target,propertyName) {
		var value = null;
		if(Object.prototype.hasOwnProperty.call(target,propertyName)) {
			value = Reflect.field(target,propertyName);
		} else {
			var tmp;
			var value1;
			if(target == null) {
				value1 = null;
			} else {
				var value2;
				if(target.__properties__) {
					tmp = target.__properties__["get_" + propertyName];
					value2 = tmp;
				} else {
					value2 = false;
				}
				if(value2) {
					value1 = target[tmp]();
				} else {
					value1 = target[propertyName];
				}
			}
			value = value1;
		}
		return value;
	}
	,initialize: function() {
		var details;
		var start;
		var _g = 0;
		var _g1 = Reflect.fields(this.properties);
		while(_g < _g1.length) {
			var i = _g1[_g];
			++_g;
			var isField = true;
			if(Object.prototype.hasOwnProperty.call(this.target,i) && !(this.target.__properties__ && this.target.__properties__["set_" + i])) {
				start = Reflect.field(this.target,i);
			} else {
				isField = false;
				var o = this.target;
				var tmp;
				if(o == null) {
					start = null;
				} else {
					var start1;
					if(o.__properties__) {
						tmp = o.__properties__["get_" + i];
						start1 = tmp;
					} else {
						start1 = false;
					}
					if(start1) {
						start = o[tmp]();
					} else {
						start = o[i];
					}
				}
			}
			if(typeof(start) == "number") {
				var target = this.properties;
				var value = null;
				if(Object.prototype.hasOwnProperty.call(target,i)) {
					value = Reflect.field(target,i);
				} else {
					var tmp1;
					var value1;
					if(target == null) {
						value1 = null;
					} else {
						var value2;
						if(target.__properties__) {
							tmp1 = target.__properties__["get_" + i];
							value2 = tmp1;
						} else {
							value2 = false;
						}
						if(value2) {
							value1 = target[tmp1]();
						} else {
							value1 = target[i];
						}
					}
					value = value1;
				}
				var value3 = value;
				if(start == null) {
					start = 0;
				}
				if(value3 == null) {
					value3 = 0;
				}
				details = new motion_actuators_PropertyDetails(this.target,i,start,value3 - start,isField);
				this.propertyDetails.push(details);
			}
		}
		this.detailsLength = this.propertyDetails.length;
		this.initialized = true;
	}
	,move: function() {
		this.toggleVisible = Object.prototype.hasOwnProperty.call(this.properties,"alpha") && js_Boot.__instanceof(this.target,openfl_display_DisplayObject);
		var tmp;
		if(this.toggleVisible && this.properties.alpha != 0) {
			var target = this.target;
			var value = null;
			if(Object.prototype.hasOwnProperty.call(target,"visible")) {
				value = Reflect.field(target,"visible");
			} else {
				var tmp1;
				var value1;
				if(target == null) {
					value1 = null;
				} else {
					var value2;
					if(target.__properties__) {
						tmp1 = target.__properties__["get_" + "visible"];
						value2 = tmp1;
					} else {
						value2 = false;
					}
					if(value2) {
						value1 = target[tmp1]();
					} else {
						value1 = target["visible"];
					}
				}
				value = value1;
			}
			tmp = !value;
		} else {
			tmp = false;
		}
		if(tmp) {
			this.setVisible = true;
			var target1 = this.target;
			var value3 = null;
			if(Object.prototype.hasOwnProperty.call(target1,"visible")) {
				value3 = Reflect.field(target1,"visible");
			} else {
				var tmp2;
				var value4;
				if(target1 == null) {
					value4 = null;
				} else {
					var value5;
					if(target1.__properties__) {
						tmp2 = target1.__properties__["get_" + "visible"];
						value5 = tmp2;
					} else {
						value5 = false;
					}
					if(value5) {
						value4 = target1[tmp2]();
					} else {
						value4 = target1["visible"];
					}
				}
				value3 = value4;
			}
			this.cacheVisible = value3;
			var target2 = this.target;
			if(Object.prototype.hasOwnProperty.call(target2,"visible")) {
				target2["visible"] = true;
			} else {
				var tmp3;
				var tmp4;
				if(target2.__properties__) {
					tmp3 = target2.__properties__["set_" + "visible"];
					tmp4 = tmp3;
				} else {
					tmp4 = false;
				}
				if(tmp4) {
					target2[tmp3](true);
				} else {
					target2["visible"] = true;
				}
			}
		}
		this.timeOffset = this.startTime;
		motion_actuators_SimpleActuator.actuators.push(this);
		++motion_actuators_SimpleActuator.actuatorsLength;
	}
	,onUpdate: function(handler,parameters) {
		this._onUpdate = handler;
		if(parameters == null) {
			this._onUpdateParams = [];
		} else {
			this._onUpdateParams = parameters;
		}
		this.sendChange = true;
		return this;
	}
	,pause: function() {
		if(!this.paused) {
			this.paused = true;
			motion_actuators_GenericActuator.prototype.pause.call(this);
			this.pauseTime = openfl_Lib.getTimer();
		}
	}
	,resume: function() {
		if(this.paused) {
			this.paused = false;
			this.timeOffset += (openfl_Lib.getTimer() - this.pauseTime) / 1000;
			motion_actuators_GenericActuator.prototype.resume.call(this);
		}
	}
	,setProperty: function(details,value) {
		if(details.isField) {
			details.target[details.propertyName] = value;
		} else {
			var o = details.target;
			var field = details.propertyName;
			var tmp;
			var tmp1;
			if(o.__properties__) {
				tmp = o.__properties__["set_" + field];
				tmp1 = tmp;
			} else {
				tmp1 = false;
			}
			if(tmp1) {
				o[tmp](value);
			} else {
				o[field] = value;
			}
		}
	}
	,stop: function(properties,complete,sendEvent) {
		if(this.active) {
			if(properties == null) {
				this.active = false;
				if(complete) {
					this.apply();
				}
				this.complete(sendEvent);
				return;
			}
			var _g = 0;
			var _g1 = Reflect.fields(properties);
			while(_g < _g1.length) {
				var i = _g1[_g];
				++_g;
				if(Object.prototype.hasOwnProperty.call(this.properties,i)) {
					this.active = false;
					if(complete) {
						this.apply();
					}
					this.complete(sendEvent);
					return;
				}
			}
		}
	}
	,update: function(currentTime) {
		if(!this.paused) {
			var details;
			var easing;
			var i;
			var tweenPosition = (currentTime - this.timeOffset) / this.duration;
			if(tweenPosition > 1) {
				tweenPosition = 1;
			}
			if(!this.initialized) {
				this.initialize();
			}
			if(!this.special) {
				easing = this._ease.calculate(tweenPosition);
				var _g1 = 0;
				var _g = this.detailsLength;
				while(_g1 < _g) {
					details = this.propertyDetails[_g1++];
					var value = details.start + details.change * easing;
					if(details.isField) {
						details.target[details.propertyName] = value;
					} else {
						var o = details.target;
						var field = details.propertyName;
						var tmp;
						var tmp1;
						if(o.__properties__) {
							tmp = o.__properties__["set_" + field];
							tmp1 = tmp;
						} else {
							tmp1 = false;
						}
						if(tmp1) {
							o[tmp](value);
						} else {
							o[field] = value;
						}
					}
				}
			} else {
				if(!this._reverse) {
					easing = this._ease.calculate(tweenPosition);
				} else {
					easing = this._ease.calculate(1 - tweenPosition);
				}
				var endValue;
				var _g11 = 0;
				var _g2 = this.detailsLength;
				while(_g11 < _g2) {
					details = this.propertyDetails[_g11++];
					if(this._smartRotation && (details.propertyName == "rotation" || details.propertyName == "rotationX" || details.propertyName == "rotationY" || details.propertyName == "rotationZ")) {
						var rotation = details.change % 360;
						if(rotation > 180) {
							rotation -= 360;
						} else if(rotation < -180) {
							rotation += 360;
						}
						endValue = details.start + rotation * easing;
					} else {
						endValue = details.start + details.change * easing;
					}
					if(!this._snapping) {
						if(details.isField) {
							details.target[details.propertyName] = endValue;
						} else {
							var o1 = details.target;
							var field1 = details.propertyName;
							var tmp2;
							var tmp3;
							if(o1.__properties__) {
								tmp2 = o1.__properties__["set_" + field1];
								tmp3 = tmp2;
							} else {
								tmp3 = false;
							}
							if(tmp3) {
								o1[tmp2](endValue);
							} else {
								o1[field1] = endValue;
							}
						}
					} else {
						var value1 = Math.round(endValue);
						if(details.isField) {
							details.target[details.propertyName] = value1;
						} else {
							var o2 = details.target;
							var field2 = details.propertyName;
							var tmp4;
							var tmp5;
							if(o2.__properties__) {
								tmp4 = o2.__properties__["set_" + field2];
								tmp5 = tmp4;
							} else {
								tmp5 = false;
							}
							if(tmp5) {
								o2[tmp4](value1);
							} else {
								o2[field2] = value1;
							}
						}
					}
				}
			}
			if(tweenPosition == 1) {
				if(this._repeat == 0) {
					this.active = false;
					var tmp6;
					if(this.toggleVisible) {
						var target = this.target;
						var value2 = null;
						if(Object.prototype.hasOwnProperty.call(target,"alpha")) {
							value2 = Reflect.field(target,"alpha");
						} else {
							var tmp7;
							var value3;
							if(target == null) {
								value3 = null;
							} else {
								var value4;
								if(target.__properties__) {
									tmp7 = target.__properties__["get_" + "alpha"];
									value4 = tmp7;
								} else {
									value4 = false;
								}
								if(value4) {
									value3 = target[tmp7]();
								} else {
									value3 = target["alpha"];
								}
							}
							value2 = value3;
						}
						tmp6 = value2 == 0;
					} else {
						tmp6 = false;
					}
					if(tmp6) {
						var target1 = this.target;
						if(Object.prototype.hasOwnProperty.call(target1,"visible")) {
							target1["visible"] = false;
						} else {
							var tmp8;
							var tmp9;
							if(target1.__properties__) {
								tmp8 = target1.__properties__["set_" + "visible"];
								tmp9 = tmp8;
							} else {
								tmp9 = false;
							}
							if(tmp9) {
								target1[tmp8](false);
							} else {
								target1["visible"] = false;
							}
						}
					}
					this.complete(true);
					return;
				} else {
					if(this._onRepeat != null) {
						var method = this._onRepeat;
						var params = this._onRepeatParams;
						if(params == null) {
							params = [];
						}
						method.apply(method,params);
					}
					if(this._reflect) {
						this._reverse = !this._reverse;
					}
					this.startTime = currentTime;
					this.timeOffset = this.startTime + this._delay;
					if(this._repeat > 0) {
						this._repeat--;
					}
				}
			}
			if(this.sendChange) {
				this.change();
			}
		}
	}
	,__class__: motion_actuators_SimpleActuator
});
var motion_easing_Expo = function() { };
$hxClasses["motion.easing.Expo"] = motion_easing_Expo;
motion_easing_Expo.__name__ = ["motion","easing","Expo"];
motion_easing_Expo.__properties__ = {get_easeOut:"get_easeOut",get_easeInOut:"get_easeInOut",get_easeIn:"get_easeIn"}
motion_easing_Expo.get_easeIn = function() {
	return new motion_easing_ExpoEaseIn();
};
motion_easing_Expo.get_easeInOut = function() {
	return new motion_easing_ExpoEaseInOut();
};
motion_easing_Expo.get_easeOut = function() {
	return new motion_easing_ExpoEaseOut();
};
var motion_easing_IEasing = function() { };
$hxClasses["motion.easing.IEasing"] = motion_easing_IEasing;
motion_easing_IEasing.__name__ = ["motion","easing","IEasing"];
motion_easing_IEasing.prototype = {
	calculate: null
	,ease: null
	,__class__: motion_easing_IEasing
};
var motion_easing_ExpoEaseOut = function() {
};
$hxClasses["motion.easing.ExpoEaseOut"] = motion_easing_ExpoEaseOut;
motion_easing_ExpoEaseOut.__name__ = ["motion","easing","ExpoEaseOut"];
motion_easing_ExpoEaseOut.__interfaces__ = [motion_easing_IEasing];
motion_easing_ExpoEaseOut.prototype = {
	calculate: function(k) {
		if(k == 1) {
			return 1;
		} else {
			return 1 - Math.pow(2,-10 * k);
		}
	}
	,ease: function(t,b,c,d) {
		if(t == d) {
			return b + c;
		} else {
			return c * (1 - Math.pow(2,-10 * t / d)) + b;
		}
	}
	,__class__: motion_easing_ExpoEaseOut
};
var motion_Actuate = function() { };
$hxClasses["motion.Actuate"] = motion_Actuate;
motion_Actuate.__name__ = ["motion","Actuate"];
motion_Actuate.apply = function(target,properties,customActuator) {
	motion_Actuate.stop(target,properties);
	if(customActuator == null) {
		customActuator = motion_Actuate.defaultActuator;
	}
	var actuator = Type.createInstance(customActuator,[target,0,properties]);
	actuator.apply();
	return actuator;
};
motion_Actuate.effects = function(target,duration,overwrite) {
	if(overwrite == null) {
		overwrite = true;
	}
	return new motion__$Actuate_EffectsOptions(target,duration,overwrite);
};
motion_Actuate.getLibrary = function(target,allowCreation) {
	if(allowCreation == null) {
		allowCreation = true;
	}
	if(motion_Actuate.targetLibraries.h.__keys__[target.__id__] == null && allowCreation) {
		motion_Actuate.targetLibraries.set(target,[]);
	}
	return motion_Actuate.targetLibraries.h[target.__id__];
};
motion_Actuate.isActive = function() {
	var result = false;
	var library = motion_Actuate.targetLibraries.iterator();
	while(library.hasNext()) {
		library.next();
		result = true;
		break;
	}
	return result;
};
motion_Actuate.motionPath = function(target,duration,properties,overwrite) {
	if(overwrite == null) {
		overwrite = true;
	}
	return motion_Actuate.tween(target,duration,properties,overwrite,motion_actuators_MotionPathActuator);
};
motion_Actuate.pause = function(target) {
	if(js_Boot.__instanceof(target,motion_actuators_IGenericActuator)) {
		target.pause();
	} else {
		var library = motion_Actuate.getLibrary(target,false);
		if(library != null) {
			var _g = 0;
			while(_g < library.length) {
				var actuator = library[_g];
				++_g;
				actuator.pause();
			}
		}
	}
};
motion_Actuate.pauseAll = function() {
	var library = motion_Actuate.targetLibraries.iterator();
	while(library.hasNext()) {
		var library1 = library.next();
		var _g = 0;
		while(_g < library1.length) {
			var actuator = library1[_g];
			++_g;
			actuator.pause();
		}
	}
};
motion_Actuate.reset = function() {
	var library = motion_Actuate.targetLibraries.iterator();
	while(library.hasNext()) {
		var library1 = library.next();
		var i = library1.length - 1;
		while(i >= 0) {
			library1[i].stop(null,false,false);
			--i;
		}
	}
	motion_Actuate.targetLibraries = new haxe_ds_ObjectMap();
};
motion_Actuate.resume = function(target) {
	if(js_Boot.__instanceof(target,motion_actuators_IGenericActuator)) {
		target.resume();
	} else {
		var library = motion_Actuate.getLibrary(target,false);
		if(library != null) {
			var _g = 0;
			while(_g < library.length) {
				var actuator = library[_g];
				++_g;
				actuator.resume();
			}
		}
	}
};
motion_Actuate.resumeAll = function() {
	var library = motion_Actuate.targetLibraries.iterator();
	while(library.hasNext()) {
		var library1 = library.next();
		var _g = 0;
		while(_g < library1.length) {
			var actuator = library1[_g];
			++_g;
			actuator.resume();
		}
	}
};
motion_Actuate.stop = function(target,properties,complete,sendEvent) {
	if(sendEvent == null) {
		sendEvent = true;
	}
	if(complete == null) {
		complete = false;
	}
	if(target != null) {
		if(js_Boot.__instanceof(target,motion_actuators_IGenericActuator)) {
			target.stop(null,complete,sendEvent);
		} else {
			var library = motion_Actuate.getLibrary(target,false);
			if(library != null) {
				if(typeof(properties) == "string") {
					var temp = { };
					temp[properties] = null;
					properties = temp;
				} else if((properties instanceof Array) && properties.__enum__ == null) {
					var temp1 = { };
					var _g = 0;
					var _g1 = js_Boot.__cast(properties , Array);
					while(_g < _g1.length) {
						var property = _g1[_g];
						++_g;
						temp1[property] = null;
					}
					properties = temp1;
				}
				var i = library.length - 1;
				while(i >= 0) {
					library[i].stop(properties,complete,sendEvent);
					--i;
				}
			}
		}
	}
};
motion_Actuate.timer = function(duration,customActuator) {
	return motion_Actuate.tween(new motion__$Actuate_TweenTimer(0),duration,new motion__$Actuate_TweenTimer(1),false,customActuator);
};
motion_Actuate.transform = function(target,duration,overwrite) {
	if(overwrite == null) {
		overwrite = true;
	}
	if(duration == null) {
		duration = 0;
	}
	return new motion__$Actuate_TransformOptions(target,duration,overwrite);
};
motion_Actuate.tween = function(target,duration,properties,overwrite,customActuator) {
	if(overwrite == null) {
		overwrite = true;
	}
	if(target != null) {
		if(duration > 0) {
			if(customActuator == null) {
				customActuator = motion_Actuate.defaultActuator;
			}
			var actuator = Type.createInstance(customActuator,[target,duration,properties]);
			var library = motion_Actuate.getLibrary(actuator.target);
			if(overwrite) {
				var i = library.length - 1;
				while(i >= 0) {
					library[i].stop(actuator.properties,false,false);
					--i;
				}
				library = motion_Actuate.getLibrary(actuator.target);
			}
			library.push(actuator);
			actuator.move();
			return actuator;
		} else {
			return motion_Actuate.apply(target,properties,customActuator);
		}
	}
	return null;
};
motion_Actuate.unload = function(actuator) {
	var target = actuator.target;
	if(motion_Actuate.targetLibraries.h.__keys__[target.__id__] != null) {
		HxOverrides.remove(motion_Actuate.targetLibraries.h[target.__id__],actuator);
		if(motion_Actuate.targetLibraries.h[target.__id__].length == 0) {
			motion_Actuate.targetLibraries.remove(target);
		}
	}
};
motion_Actuate.update = function(target,duration,start,end,overwrite) {
	if(overwrite == null) {
		overwrite = true;
	}
	return motion_Actuate.tween(target,duration,{ start : start, end : end},overwrite,motion_actuators_MethodActuator);
};
var motion__$Actuate_EffectsOptions = function(target,duration,overwrite) {
	this.target = target;
	this.duration = duration;
	this.overwrite = overwrite;
};
$hxClasses["motion._Actuate.EffectsOptions"] = motion__$Actuate_EffectsOptions;
motion__$Actuate_EffectsOptions.__name__ = ["motion","_Actuate","EffectsOptions"];
motion__$Actuate_EffectsOptions.prototype = {
	duration: null
	,overwrite: null
	,target: null
	,filter: function(reference,properties) {
		properties.filter = reference;
		return motion_Actuate.tween(this.target,this.duration,properties,this.overwrite,motion_actuators_FilterActuator);
	}
	,__class__: motion__$Actuate_EffectsOptions
};
var motion__$Actuate_TransformOptions = function(target,duration,overwrite) {
	this.target = target;
	this.duration = duration;
	this.overwrite = overwrite;
};
$hxClasses["motion._Actuate.TransformOptions"] = motion__$Actuate_TransformOptions;
motion__$Actuate_TransformOptions.__name__ = ["motion","_Actuate","TransformOptions"];
motion__$Actuate_TransformOptions.prototype = {
	duration: null
	,overwrite: null
	,target: null
	,color: function(value,strength,alpha) {
		if(strength == null) {
			strength = 1;
		}
		if(value == null) {
			value = 0;
		}
		var properties = { colorValue : value, colorStrength : strength};
		if(alpha != null) {
			properties.colorAlpha = alpha;
		}
		return motion_Actuate.tween(this.target,this.duration,properties,this.overwrite,motion_actuators_TransformActuator);
	}
	,sound: function(volume,pan) {
		var properties = { };
		if(volume != null) {
			properties.soundVolume = volume;
		}
		if(pan != null) {
			properties.soundPan = pan;
		}
		return motion_Actuate.tween(this.target,this.duration,properties,this.overwrite,motion_actuators_TransformActuator);
	}
	,__class__: motion__$Actuate_TransformOptions
};
var motion__$Actuate_TweenTimer = function(progress) {
	this.progress = progress;
};
$hxClasses["motion._Actuate.TweenTimer"] = motion__$Actuate_TweenTimer;
motion__$Actuate_TweenTimer.__name__ = ["motion","_Actuate","TweenTimer"];
motion__$Actuate_TweenTimer.prototype = {
	progress: null
	,__class__: motion__$Actuate_TweenTimer
};
var motion_MotionPath = function() {
	this._x = new motion_ComponentPath();
	this._y = new motion_ComponentPath();
	this._rotation = null;
};
$hxClasses["motion.MotionPath"] = motion_MotionPath;
motion_MotionPath.__name__ = ["motion","MotionPath"];
motion_MotionPath.prototype = {
	rotation: null
	,x: null
	,y: null
	,_rotation: null
	,_x: null
	,_y: null
	,bezier: function(x,y,controlX,controlY,strength) {
		if(strength == null) {
			strength = 1;
		}
		this._x.addPath(new motion_BezierPath(x,controlX,strength));
		this._y.addPath(new motion_BezierPath(y,controlY,strength));
		return this;
	}
	,line: function(x,y,strength) {
		if(strength == null) {
			strength = 1;
		}
		this._x.addPath(new motion_LinearPath(x,strength));
		this._y.addPath(new motion_LinearPath(y,strength));
		return this;
	}
	,get_rotation: function() {
		if(this._rotation == null) {
			this._rotation = new motion_RotationPath(this._x,this._y);
		}
		return this._rotation;
	}
	,get_x: function() {
		return this._x;
	}
	,get_y: function() {
		return this._y;
	}
	,__class__: motion_MotionPath
	,__properties__: {get_y:"get_y",get_x:"get_x",get_rotation:"get_rotation"}
};
var motion_IComponentPath = function() { };
$hxClasses["motion.IComponentPath"] = motion_IComponentPath;
motion_IComponentPath.__name__ = ["motion","IComponentPath"];
motion_IComponentPath.prototype = {
	get_end: null
	,end: null
	,start: null
	,calculate: null
	,__class__: motion_IComponentPath
	,__properties__: {get_end:"get_end"}
};
var motion_ComponentPath = function() {
	this.paths = [];
	this.start = 0;
	this.totalStrength = 0;
};
$hxClasses["motion.ComponentPath"] = motion_ComponentPath;
motion_ComponentPath.__name__ = ["motion","ComponentPath"];
motion_ComponentPath.__interfaces__ = [motion_IComponentPath];
motion_ComponentPath.prototype = {
	start: null
	,end: null
	,paths: null
	,totalStrength: null
	,addPath: function(path) {
		this.paths.push(path);
		this.totalStrength += path.strength;
	}
	,calculate: function(k) {
		if(this.paths.length == 1) {
			return this.paths[0].calculate(this.start,k);
		} else {
			var ratio = k * this.totalStrength;
			var lastEnd = this.start;
			var _g = 0;
			var _g1 = this.paths;
			while(_g < _g1.length) {
				var path = _g1[_g];
				++_g;
				if(ratio > path.strength) {
					ratio -= path.strength;
					lastEnd = path.end;
				} else {
					return path.calculate(lastEnd,ratio / path.strength);
				}
			}
		}
		return 0;
	}
	,get_end: function() {
		if(this.paths.length > 0) {
			return this.paths[this.paths.length - 1].end;
		} else {
			return this.start;
		}
	}
	,__class__: motion_ComponentPath
	,__properties__: {get_end:"get_end"}
};
var motion_BezierPath = function(end,control,strength) {
	this.end = end;
	this.control = control;
	this.strength = strength;
};
$hxClasses["motion.BezierPath"] = motion_BezierPath;
motion_BezierPath.__name__ = ["motion","BezierPath"];
motion_BezierPath.prototype = {
	control: null
	,end: null
	,strength: null
	,calculate: function(start,k) {
		return (1 - k) * (1 - k) * start + 2 * (1 - k) * k * this.control + k * k * this.end;
	}
	,__class__: motion_BezierPath
};
var motion_LinearPath = function(end,strength) {
	motion_BezierPath.call(this,end,0,strength);
};
$hxClasses["motion.LinearPath"] = motion_LinearPath;
motion_LinearPath.__name__ = ["motion","LinearPath"];
motion_LinearPath.__super__ = motion_BezierPath;
motion_LinearPath.prototype = $extend(motion_BezierPath.prototype,{
	calculate: function(start,k) {
		return start + k * (this.end - start);
	}
	,__class__: motion_LinearPath
});
var motion_RotationPath = function(x,y) {
	this.step = 0.01;
	this._x = x;
	this._y = y;
	this.offset = 0;
	this.start = this.calculate(0.0);
};
$hxClasses["motion.RotationPath"] = motion_RotationPath;
motion_RotationPath.__name__ = ["motion","RotationPath"];
motion_RotationPath.__interfaces__ = [motion_IComponentPath];
motion_RotationPath.prototype = {
	end: null
	,offset: null
	,start: null
	,step: null
	,_x: null
	,_y: null
	,calculate: function(k) {
		var dX = this._x.calculate(k) - this._x.calculate(k + this.step);
		var angle = Math.atan2(this._y.calculate(k) - this._y.calculate(k + this.step),dX) * (180 / Math.PI);
		angle = (angle + this.offset) % 360;
		return angle;
	}
	,get_end: function() {
		return this.calculate(1.0);
	}
	,__class__: motion_RotationPath
	,__properties__: {get_end:"get_end"}
};
var motion_actuators_FilterActuator = function(target,duration,properties) {
	this.filterIndex = -1;
	motion_actuators_SimpleActuator.call(this,target,duration,properties);
	if(js_Boot.__instanceof(properties.filter,Class)) {
		this.filterClass = properties.filter;
		if(target.get_filters().length == 0) {
			target.set_filters([Type.createInstance(this.filterClass,[])]);
		}
		var _g = 0;
		var _g1 = target.get_filters();
		while(_g < _g1.length) {
			var filter = _g1[_g];
			++_g;
			if(js_Boot.__instanceof(filter,this.filterClass)) {
				this.filter = filter;
			}
		}
	} else {
		this.filterIndex = properties.filter;
		this.filter = target.get_filters()[this.filterIndex];
	}
};
$hxClasses["motion.actuators.FilterActuator"] = motion_actuators_FilterActuator;
motion_actuators_FilterActuator.__name__ = ["motion","actuators","FilterActuator"];
motion_actuators_FilterActuator.__super__ = motion_actuators_SimpleActuator;
motion_actuators_FilterActuator.prototype = $extend(motion_actuators_SimpleActuator.prototype,{
	filter: null
	,filterClass: null
	,filterIndex: null
	,apply: function() {
		var _g = 0;
		var _g1 = Reflect.fields(this.properties);
		while(_g < _g1.length) {
			var propertyName = _g1[_g];
			++_g;
			if(propertyName != "filter") {
				this.filter[propertyName] = Reflect.field(this.properties,propertyName);
			}
		}
		var target = this.target;
		var value = null;
		if(Object.prototype.hasOwnProperty.call(target,"filters")) {
			value = Reflect.field(target,"filters");
		} else {
			var tmp;
			var value1;
			if(target == null) {
				value1 = null;
			} else {
				var value2;
				if(target.__properties__) {
					tmp = target.__properties__["get_" + "filters"];
					value2 = tmp;
				} else {
					value2 = false;
				}
				if(value2) {
					value1 = target[tmp]();
				} else {
					value1 = target["filters"];
				}
			}
			value = value1;
		}
		var filters = value;
		filters[this.properties.filter] = this.filter;
		var target1 = this.target;
		if(Object.prototype.hasOwnProperty.call(target1,"filters")) {
			target1["filters"] = filters;
		} else {
			var tmp1;
			var tmp2;
			if(target1.__properties__) {
				tmp1 = target1.__properties__["set_" + "filters"];
				tmp2 = tmp1;
			} else {
				tmp2 = false;
			}
			if(tmp2) {
				target1[tmp1](filters);
			} else {
				target1["filters"] = filters;
			}
		}
	}
	,initialize: function() {
		var details;
		var start;
		var _g = 0;
		var _g1 = Reflect.fields(this.properties);
		while(_g < _g1.length) {
			var propertyName = _g1[_g];
			++_g;
			if(propertyName != "filter") {
				var target = this.filter;
				var value = null;
				if(Object.prototype.hasOwnProperty.call(target,propertyName)) {
					value = Reflect.field(target,propertyName);
				} else {
					var tmp;
					var value1;
					if(target == null) {
						value1 = null;
					} else {
						var value2;
						if(target.__properties__) {
							tmp = target.__properties__["get_" + propertyName];
							value2 = tmp;
						} else {
							value2 = false;
						}
						if(value2) {
							value1 = target[tmp]();
						} else {
							value1 = target[propertyName];
						}
					}
					value = value1;
				}
				start = value;
				details = new motion_actuators_PropertyDetails(this.filter,propertyName,start,Reflect.field(this.properties,propertyName) - start);
				this.propertyDetails.push(details);
			}
		}
		this.detailsLength = this.propertyDetails.length;
		this.initialized = true;
	}
	,update: function(currentTime) {
		motion_actuators_SimpleActuator.prototype.update.call(this,currentTime);
		var filters = this.target.get_filters();
		if(this.filterIndex > -1) {
			filters[this.properties.filter] = this.filter;
		} else {
			var _g1 = 0;
			var _g = filters.length;
			while(_g1 < _g) {
				var i = _g1++;
				if(js_Boot.__instanceof(filters[i],this.filterClass)) {
					filters[i] = this.filter;
				}
			}
		}
		var target = this.target;
		if(Object.prototype.hasOwnProperty.call(target,"filters")) {
			target["filters"] = filters;
		} else {
			var tmp;
			var tmp1;
			if(target.__properties__) {
				tmp = target.__properties__["set_" + "filters"];
				tmp1 = tmp;
			} else {
				tmp1 = false;
			}
			if(tmp1) {
				target[tmp](filters);
			} else {
				target["filters"] = filters;
			}
		}
	}
	,__class__: motion_actuators_FilterActuator
});
var motion_actuators_MethodActuator = function(target,duration,properties) {
	this.currentParameters = [];
	this.tweenProperties = { };
	motion_actuators_SimpleActuator.call(this,target,duration,properties);
	if(!Object.prototype.hasOwnProperty.call(properties,"start")) {
		this.properties.start = [];
	}
	if(!Object.prototype.hasOwnProperty.call(properties,"end")) {
		this.properties.end = this.properties.start;
	}
	var _g1 = 0;
	var _g = this.properties.start.length;
	while(_g1 < _g) this.currentParameters.push(this.properties.start[_g1++]);
};
$hxClasses["motion.actuators.MethodActuator"] = motion_actuators_MethodActuator;
motion_actuators_MethodActuator.__name__ = ["motion","actuators","MethodActuator"];
motion_actuators_MethodActuator.__super__ = motion_actuators_SimpleActuator;
motion_actuators_MethodActuator.prototype = $extend(motion_actuators_SimpleActuator.prototype,{
	currentParameters: null
	,tweenProperties: null
	,apply: function() {
		var method = this.target;
		var params = this.properties.end;
		if(params == null) {
			params = [];
		}
		method.apply(method,params);
	}
	,complete: function(sendEvent) {
		if(sendEvent == null) {
			sendEvent = true;
		}
		var _g1 = 0;
		var _g = this.properties.start.length;
		while(_g1 < _g) {
			var i = _g1++;
			this.currentParameters[i] = Reflect.field(this.tweenProperties,"param" + i);
		}
		var method = this.target;
		var params = this.currentParameters;
		if(params == null) {
			params = [];
		}
		method.apply(method,params);
		motion_actuators_SimpleActuator.prototype.complete.call(this,sendEvent);
	}
	,initialize: function() {
		var details;
		var propertyName;
		var start;
		var _g1 = 0;
		var _g = this.properties.start.length;
		while(_g1 < _g) {
			var i = _g1++;
			propertyName = "param" + i;
			start = this.properties.start[i];
			this.tweenProperties[propertyName] = start;
			if(typeof(start) == "number" || typeof(start) == "number" && ((start | 0) === start)) {
				details = new motion_actuators_PropertyDetails(this.tweenProperties,propertyName,start,this.properties.end[i] - start);
				this.propertyDetails.push(details);
			}
		}
		this.detailsLength = this.propertyDetails.length;
		this.initialized = true;
	}
	,update: function(currentTime) {
		motion_actuators_SimpleActuator.prototype.update.call(this,currentTime);
		if(this.active && !this.paused) {
			var _g1 = 0;
			var _g = this.properties.start.length;
			while(_g1 < _g) {
				var i = _g1++;
				this.currentParameters[i] = Reflect.field(this.tweenProperties,"param" + i);
			}
			var method = this.target;
			var params = this.currentParameters;
			if(params == null) {
				params = [];
			}
			method.apply(method,params);
		}
	}
	,__class__: motion_actuators_MethodActuator
});
var motion_actuators_MotionPathActuator = function(target,duration,properties) {
	motion_actuators_SimpleActuator.call(this,target,duration,properties);
};
$hxClasses["motion.actuators.MotionPathActuator"] = motion_actuators_MotionPathActuator;
motion_actuators_MotionPathActuator.__name__ = ["motion","actuators","MotionPathActuator"];
motion_actuators_MotionPathActuator.__super__ = motion_actuators_SimpleActuator;
motion_actuators_MotionPathActuator.prototype = $extend(motion_actuators_SimpleActuator.prototype,{
	apply: function() {
		var _g = 0;
		var _g1 = Reflect.fields(this.properties);
		while(_g < _g1.length) {
			var propertyName = _g1[_g];
			++_g;
			if(Object.prototype.hasOwnProperty.call(this.target,propertyName)) {
				this.target[propertyName] = (js_Boot.__cast(Reflect.field(this.properties,propertyName) , motion_IComponentPath)).get_end();
			} else {
				var o = this.target;
				var value = (js_Boot.__cast(Reflect.field(this.properties,propertyName) , motion_IComponentPath)).get_end();
				var tmp;
				var tmp1;
				if(o.__properties__) {
					tmp = o.__properties__["set_" + propertyName];
					tmp1 = tmp;
				} else {
					tmp1 = false;
				}
				if(tmp1) {
					o[tmp](value);
				} else {
					o[propertyName] = value;
				}
			}
		}
	}
	,initialize: function() {
		var details;
		var path;
		var _g = 0;
		var _g1 = Reflect.fields(this.properties);
		while(_g < _g1.length) {
			var propertyName = _g1[_g];
			++_g;
			path = js_Boot.__cast(Reflect.field(this.properties,propertyName) , motion_IComponentPath);
			if(path != null) {
				var isField = true;
				if(Object.prototype.hasOwnProperty.call(this.target,propertyName)) {
					path.start = Reflect.field(this.target,propertyName);
				} else {
					isField = false;
					var o = this.target;
					var tmp;
					var tmp1;
					if(o == null) {
						tmp1 = null;
					} else {
						var tmp2;
						if(o.__properties__) {
							tmp = o.__properties__["get_" + propertyName];
							tmp2 = tmp;
						} else {
							tmp2 = false;
						}
						if(tmp2) {
							tmp1 = o[tmp]();
						} else {
							tmp1 = o[propertyName];
						}
					}
					path.start = tmp1;
				}
				details = new motion_actuators_PropertyPathDetails(this.target,propertyName,path,isField);
				this.propertyDetails.push(details);
			}
		}
		this.detailsLength = this.propertyDetails.length;
		this.initialized = true;
	}
	,update: function(currentTime) {
		if(!this.paused) {
			var details;
			var easing;
			var tweenPosition = (currentTime - this.timeOffset) / this.duration;
			if(tweenPosition > 1) {
				tweenPosition = 1;
			}
			if(!this.initialized) {
				this.initialize();
			}
			if(!this.special) {
				easing = this._ease.calculate(tweenPosition);
				var _g = 0;
				var _g1 = this.propertyDetails;
				while(_g < _g1.length) {
					var details1 = _g1[_g];
					++_g;
					if(details1.isField) {
						details1.target[details1.propertyName] = (js_Boot.__cast(details1 , motion_actuators_PropertyPathDetails)).path.calculate(easing);
					} else {
						var o = details1.target;
						var field = details1.propertyName;
						var value = (js_Boot.__cast(details1 , motion_actuators_PropertyPathDetails)).path.calculate(easing);
						var tmp;
						var tmp1;
						if(o.__properties__) {
							tmp = o.__properties__["set_" + field];
							tmp1 = tmp;
						} else {
							tmp1 = false;
						}
						if(tmp1) {
							o[tmp](value);
						} else {
							o[field] = value;
						}
					}
				}
			} else {
				if(!this._reverse) {
					easing = this._ease.calculate(tweenPosition);
				} else {
					easing = this._ease.calculate(1 - tweenPosition);
				}
				var endValue;
				var _g2 = 0;
				var _g11 = this.propertyDetails;
				while(_g2 < _g11.length) {
					var details2 = _g11[_g2];
					++_g2;
					if(!this._snapping) {
						if(details2.isField) {
							details2.target[details2.propertyName] = (js_Boot.__cast(details2 , motion_actuators_PropertyPathDetails)).path.calculate(easing);
						} else {
							var o1 = details2.target;
							var field1 = details2.propertyName;
							var value1 = (js_Boot.__cast(details2 , motion_actuators_PropertyPathDetails)).path.calculate(easing);
							var tmp2;
							var tmp3;
							if(o1.__properties__) {
								tmp2 = o1.__properties__["set_" + field1];
								tmp3 = tmp2;
							} else {
								tmp3 = false;
							}
							if(tmp3) {
								o1[tmp2](value1);
							} else {
								o1[field1] = value1;
							}
						}
					} else if(details2.isField) {
						details2.target[details2.propertyName] = Math.round((js_Boot.__cast(details2 , motion_actuators_PropertyPathDetails)).path.calculate(easing));
					} else {
						var o2 = details2.target;
						var field2 = details2.propertyName;
						var value2 = Math.round((js_Boot.__cast(details2 , motion_actuators_PropertyPathDetails)).path.calculate(easing));
						var tmp4;
						var tmp5;
						if(o2.__properties__) {
							tmp4 = o2.__properties__["set_" + field2];
							tmp5 = tmp4;
						} else {
							tmp5 = false;
						}
						if(tmp5) {
							o2[tmp4](value2);
						} else {
							o2[field2] = value2;
						}
					}
				}
			}
			if(tweenPosition == 1) {
				if(this._repeat == 0) {
					this.active = false;
					var tmp6;
					if(this.toggleVisible) {
						var target = this.target;
						var value3 = null;
						if(Object.prototype.hasOwnProperty.call(target,"alpha")) {
							value3 = Reflect.field(target,"alpha");
						} else {
							var tmp7;
							var value4;
							if(target == null) {
								value4 = null;
							} else {
								var value5;
								if(target.__properties__) {
									tmp7 = target.__properties__["get_" + "alpha"];
									value5 = tmp7;
								} else {
									value5 = false;
								}
								if(value5) {
									value4 = target[tmp7]();
								} else {
									value4 = target["alpha"];
								}
							}
							value3 = value4;
						}
						tmp6 = value3 == 0;
					} else {
						tmp6 = false;
					}
					if(tmp6) {
						var target1 = this.target;
						if(Object.prototype.hasOwnProperty.call(target1,"visible")) {
							target1["visible"] = false;
						} else {
							var tmp8;
							var tmp9;
							if(target1.__properties__) {
								tmp8 = target1.__properties__["set_" + "visible"];
								tmp9 = tmp8;
							} else {
								tmp9 = false;
							}
							if(tmp9) {
								target1[tmp8](false);
							} else {
								target1["visible"] = false;
							}
						}
					}
					this.complete(true);
					return;
				} else {
					if(this._onRepeat != null) {
						var method = this._onRepeat;
						var params = this._onRepeatParams;
						if(params == null) {
							params = [];
						}
						method.apply(method,params);
					}
					if(this._reflect) {
						this._reverse = !this._reverse;
					}
					this.startTime = currentTime;
					this.timeOffset = this.startTime + this._delay;
					if(this._repeat > 0) {
						this._repeat--;
					}
				}
			}
			if(this.sendChange) {
				this.change();
			}
		}
	}
	,__class__: motion_actuators_MotionPathActuator
});
var motion_actuators_PropertyDetails = function(target,propertyName,start,change,isField) {
	if(isField == null) {
		isField = true;
	}
	this.target = target;
	this.propertyName = propertyName;
	this.start = start;
	this.change = change;
	this.isField = isField;
};
$hxClasses["motion.actuators.PropertyDetails"] = motion_actuators_PropertyDetails;
motion_actuators_PropertyDetails.__name__ = ["motion","actuators","PropertyDetails"];
motion_actuators_PropertyDetails.prototype = {
	change: null
	,isField: null
	,propertyName: null
	,start: null
	,target: null
	,__class__: motion_actuators_PropertyDetails
};
var motion_actuators_PropertyPathDetails = function(target,propertyName,path,isField) {
	if(isField == null) {
		isField = true;
	}
	motion_actuators_PropertyDetails.call(this,target,propertyName,0,0,isField);
	this.path = path;
};
$hxClasses["motion.actuators.PropertyPathDetails"] = motion_actuators_PropertyPathDetails;
motion_actuators_PropertyPathDetails.__name__ = ["motion","actuators","PropertyPathDetails"];
motion_actuators_PropertyPathDetails.__super__ = motion_actuators_PropertyDetails;
motion_actuators_PropertyPathDetails.prototype = $extend(motion_actuators_PropertyDetails.prototype,{
	path: null
	,__class__: motion_actuators_PropertyPathDetails
});
var motion_actuators_TransformActuator = function(target,duration,properties) {
	motion_actuators_SimpleActuator.call(this,target,duration,properties);
};
$hxClasses["motion.actuators.TransformActuator"] = motion_actuators_TransformActuator;
motion_actuators_TransformActuator.__name__ = ["motion","actuators","TransformActuator"];
motion_actuators_TransformActuator.__super__ = motion_actuators_SimpleActuator;
motion_actuators_TransformActuator.prototype = $extend(motion_actuators_SimpleActuator.prototype,{
	endColorTransform: null
	,endSoundTransform: null
	,tweenColorTransform: null
	,tweenSoundTransform: null
	,apply: function() {
		this.initialize();
		if(this.endColorTransform != null) {
			var target = this.target;
			var value = null;
			if(Object.prototype.hasOwnProperty.call(target,"transform")) {
				value = Reflect.field(target,"transform");
			} else {
				var tmp;
				var value1;
				if(target == null) {
					value1 = null;
				} else {
					var value2;
					if(target.__properties__) {
						tmp = target.__properties__["get_" + "transform"];
						value2 = tmp;
					} else {
						value2 = false;
					}
					if(value2) {
						value1 = target[tmp]();
					} else {
						value1 = target["transform"];
					}
				}
				value = value1;
			}
			var transform = value;
			var value3 = this.endColorTransform;
			if(Object.prototype.hasOwnProperty.call(transform,"colorTransform")) {
				transform["colorTransform"] = value3;
			} else {
				var tmp1;
				var tmp2;
				if(transform.__properties__) {
					tmp1 = transform.__properties__["set_" + "colorTransform"];
					tmp2 = tmp1;
				} else {
					tmp2 = false;
				}
				if(tmp2) {
					transform[tmp1](value3);
				} else {
					transform["colorTransform"] = value3;
				}
			}
		}
		if(this.endSoundTransform != null) {
			var target1 = this.target;
			var value4 = this.endSoundTransform;
			if(Object.prototype.hasOwnProperty.call(target1,"soundTransform")) {
				target1["soundTransform"] = value4;
			} else {
				var tmp3;
				var tmp4;
				if(target1.__properties__) {
					tmp3 = target1.__properties__["set_" + "soundTransform"];
					tmp4 = tmp3;
				} else {
					tmp4 = false;
				}
				if(tmp4) {
					target1[tmp3](value4);
				} else {
					target1["soundTransform"] = value4;
				}
			}
		}
	}
	,initialize: function() {
		if(Object.prototype.hasOwnProperty.call(this.properties,"colorValue") && js_Boot.__instanceof(this.target,openfl_display_DisplayObject)) {
			this.initializeColor();
		}
		if(Object.prototype.hasOwnProperty.call(this.properties,"soundVolume") || Object.prototype.hasOwnProperty.call(this.properties,"soundPan")) {
			this.initializeSound();
		}
		this.detailsLength = this.propertyDetails.length;
		this.initialized = true;
	}
	,initializeColor: function() {
		this.endColorTransform = new openfl_geom_ColorTransform();
		var color = this.properties.colorValue;
		var strength = this.properties.colorStrength;
		if(strength < 1) {
			var multiplier;
			var offset;
			if(strength < 0.5) {
				multiplier = 1;
				offset = strength * 2;
			} else {
				multiplier = 1 - (strength - 0.5) * 2;
				offset = 1;
			}
			this.endColorTransform.redMultiplier = multiplier;
			this.endColorTransform.greenMultiplier = multiplier;
			this.endColorTransform.blueMultiplier = multiplier;
			this.endColorTransform.redOffset = offset * (color >> 16 & 255);
			this.endColorTransform.greenOffset = offset * (color >> 8 & 255);
			this.endColorTransform.blueOffset = offset * (color & 255);
		} else {
			this.endColorTransform.redMultiplier = 0;
			this.endColorTransform.greenMultiplier = 0;
			this.endColorTransform.blueMultiplier = 0;
			this.endColorTransform.redOffset = color >> 16 & 255;
			this.endColorTransform.greenOffset = color >> 8 & 255;
			this.endColorTransform.blueOffset = color & 255;
		}
		var propertyNames = ["redMultiplier","greenMultiplier","blueMultiplier","redOffset","greenOffset","blueOffset"];
		if(Object.prototype.hasOwnProperty.call(this.properties,"colorAlpha")) {
			this.endColorTransform.alphaMultiplier = this.properties.colorAlpha;
			propertyNames.push("alphaMultiplier");
		} else {
			var target = this.target;
			var value = null;
			if(Object.prototype.hasOwnProperty.call(target,"alpha")) {
				value = Reflect.field(target,"alpha");
			} else {
				var tmp;
				var value1;
				if(target == null) {
					value1 = null;
				} else {
					var value2;
					if(target.__properties__) {
						tmp = target.__properties__["get_" + "alpha"];
						value2 = tmp;
					} else {
						value2 = false;
					}
					if(value2) {
						value1 = target[tmp]();
					} else {
						value1 = target["alpha"];
					}
				}
				value = value1;
			}
			this.endColorTransform.alphaMultiplier = value;
		}
		var target1 = this.target;
		var value3 = null;
		if(Object.prototype.hasOwnProperty.call(target1,"transform")) {
			value3 = Reflect.field(target1,"transform");
		} else {
			var tmp1;
			var value4;
			if(target1 == null) {
				value4 = null;
			} else {
				var value5;
				if(target1.__properties__) {
					tmp1 = target1.__properties__["get_" + "transform"];
					value5 = tmp1;
				} else {
					value5 = false;
				}
				if(value5) {
					value4 = target1[tmp1]();
				} else {
					value4 = target1["transform"];
				}
			}
			value3 = value4;
		}
		var transform = value3;
		var value6 = null;
		if(Object.prototype.hasOwnProperty.call(transform,"colorTransform")) {
			value6 = Reflect.field(transform,"colorTransform");
		} else {
			var tmp2;
			var value7;
			if(transform == null) {
				value7 = null;
			} else {
				var value8;
				if(transform.__properties__) {
					tmp2 = transform.__properties__["get_" + "colorTransform"];
					value8 = tmp2;
				} else {
					value8 = false;
				}
				if(value8) {
					value7 = transform[tmp2]();
				} else {
					value7 = transform["colorTransform"];
				}
			}
			value6 = value7;
		}
		var begin = value6;
		this.tweenColorTransform = new openfl_geom_ColorTransform();
		var details;
		var start;
		var _g = 0;
		while(_g < propertyNames.length) {
			var propertyName = propertyNames[_g];
			++_g;
			var value9 = null;
			if(Object.prototype.hasOwnProperty.call(begin,propertyName)) {
				value9 = Reflect.field(begin,propertyName);
			} else {
				var tmp3;
				var value10;
				if(begin == null) {
					value10 = null;
				} else {
					var value11;
					if(begin.__properties__) {
						tmp3 = begin.__properties__["get_" + propertyName];
						value11 = tmp3;
					} else {
						value11 = false;
					}
					if(value11) {
						value10 = begin[tmp3]();
					} else {
						value10 = begin[propertyName];
					}
				}
				value9 = value10;
			}
			start = value9;
			var details1 = this.tweenColorTransform;
			var target2 = this.endColorTransform;
			var value12 = null;
			if(Object.prototype.hasOwnProperty.call(target2,propertyName)) {
				value12 = Reflect.field(target2,propertyName);
			} else {
				var tmp4;
				var value13;
				if(target2 == null) {
					value13 = null;
				} else {
					var value14;
					if(target2.__properties__) {
						tmp4 = target2.__properties__["get_" + propertyName];
						value14 = tmp4;
					} else {
						value14 = false;
					}
					if(value14) {
						value13 = target2[tmp4]();
					} else {
						value13 = target2[propertyName];
					}
				}
				value12 = value13;
			}
			details = new motion_actuators_PropertyDetails(details1,propertyName,start,value12 - start);
			this.propertyDetails.push(details);
		}
	}
	,initializeSound: function() {
		var target = this.target;
		var value = null;
		if(Object.prototype.hasOwnProperty.call(target,"soundTransform")) {
			value = Reflect.field(target,"soundTransform");
		} else {
			var tmp;
			var value1;
			if(target == null) {
				value1 = null;
			} else {
				var value2;
				if(target.__properties__) {
					tmp = target.__properties__["get_" + "soundTransform"];
					value2 = tmp;
				} else {
					value2 = false;
				}
				if(value2) {
					value1 = target[tmp]();
				} else {
					value1 = target["soundTransform"];
				}
			}
			value = value1;
		}
		if(value == null) {
			var target1 = this.target;
			var value3 = new openfl_media_SoundTransform();
			if(Object.prototype.hasOwnProperty.call(target1,"soundTransform")) {
				target1["soundTransform"] = value3;
			} else {
				var tmp1;
				var tmp2;
				if(target1.__properties__) {
					tmp1 = target1.__properties__["set_" + "soundTransform"];
					tmp2 = tmp1;
				} else {
					tmp2 = false;
				}
				if(tmp2) {
					target1[tmp1](value3);
				} else {
					target1["soundTransform"] = value3;
				}
			}
		}
		var target2 = this.target;
		var value4 = null;
		if(Object.prototype.hasOwnProperty.call(target2,"soundTransform")) {
			value4 = Reflect.field(target2,"soundTransform");
		} else {
			var tmp3;
			var value5;
			if(target2 == null) {
				value5 = null;
			} else {
				var value6;
				if(target2.__properties__) {
					tmp3 = target2.__properties__["get_" + "soundTransform"];
					value6 = tmp3;
				} else {
					value6 = false;
				}
				if(value6) {
					value5 = target2[tmp3]();
				} else {
					value5 = target2["soundTransform"];
				}
			}
			value4 = value5;
		}
		var start = value4;
		var target3 = this.target;
		var value7 = null;
		if(Object.prototype.hasOwnProperty.call(target3,"soundTransform")) {
			value7 = Reflect.field(target3,"soundTransform");
		} else {
			var tmp4;
			var value8;
			if(target3 == null) {
				value8 = null;
			} else {
				var value9;
				if(target3.__properties__) {
					tmp4 = target3.__properties__["get_" + "soundTransform"];
					value9 = tmp4;
				} else {
					value9 = false;
				}
				if(value9) {
					value8 = target3[tmp4]();
				} else {
					value8 = target3["soundTransform"];
				}
			}
			value7 = value8;
		}
		this.endSoundTransform = value7;
		this.tweenSoundTransform = new openfl_media_SoundTransform();
		if(Object.prototype.hasOwnProperty.call(this.properties,"soundVolume")) {
			this.endSoundTransform.volume = this.properties.soundVolume;
			this.propertyDetails.push(new motion_actuators_PropertyDetails(this.tweenSoundTransform,"volume",start.volume,this.endSoundTransform.volume - start.volume));
		}
		if(Object.prototype.hasOwnProperty.call(this.properties,"soundPan")) {
			this.endSoundTransform.pan = this.properties.soundPan;
			this.propertyDetails.push(new motion_actuators_PropertyDetails(this.tweenSoundTransform,"pan",start.pan,this.endSoundTransform.pan - start.pan));
		}
	}
	,update: function(currentTime) {
		motion_actuators_SimpleActuator.prototype.update.call(this,currentTime);
		if(this.endColorTransform != null) {
			var target = this.target;
			var value = null;
			if(Object.prototype.hasOwnProperty.call(target,"transform")) {
				value = Reflect.field(target,"transform");
			} else {
				var tmp;
				var value1;
				if(target == null) {
					value1 = null;
				} else {
					var value2;
					if(target.__properties__) {
						tmp = target.__properties__["get_" + "transform"];
						value2 = tmp;
					} else {
						value2 = false;
					}
					if(value2) {
						value1 = target[tmp]();
					} else {
						value1 = target["transform"];
					}
				}
				value = value1;
			}
			var transform = value;
			var value3 = this.tweenColorTransform;
			if(Object.prototype.hasOwnProperty.call(transform,"colorTransform")) {
				transform["colorTransform"] = value3;
			} else {
				var tmp1;
				var tmp2;
				if(transform.__properties__) {
					tmp1 = transform.__properties__["set_" + "colorTransform"];
					tmp2 = tmp1;
				} else {
					tmp2 = false;
				}
				if(tmp2) {
					transform[tmp1](value3);
				} else {
					transform["colorTransform"] = value3;
				}
			}
		}
		if(this.endSoundTransform != null) {
			var target1 = this.target;
			var value4 = this.tweenSoundTransform;
			if(Object.prototype.hasOwnProperty.call(target1,"soundTransform")) {
				target1["soundTransform"] = value4;
			} else {
				var tmp3;
				var tmp4;
				if(target1.__properties__) {
					tmp3 = target1.__properties__["set_" + "soundTransform"];
					tmp4 = tmp3;
				} else {
					tmp4 = false;
				}
				if(tmp4) {
					target1[tmp3](value4);
				} else {
					target1["soundTransform"] = value4;
				}
			}
		}
	}
	,__class__: motion_actuators_TransformActuator
});
var motion_easing_Cubic = function() { };
$hxClasses["motion.easing.Cubic"] = motion_easing_Cubic;
motion_easing_Cubic.__name__ = ["motion","easing","Cubic"];
motion_easing_Cubic.__properties__ = {get_easeOut:"get_easeOut",get_easeInOut:"get_easeInOut",get_easeIn:"get_easeIn"}
motion_easing_Cubic.get_easeIn = function() {
	return new motion_easing_CubicEaseIn();
};
motion_easing_Cubic.get_easeInOut = function() {
	return new motion_easing_CubicEaseInOut();
};
motion_easing_Cubic.get_easeOut = function() {
	return new motion_easing_CubicEaseOut();
};
var motion_easing_CubicEaseIn = function() {
};
$hxClasses["motion.easing.CubicEaseIn"] = motion_easing_CubicEaseIn;
motion_easing_CubicEaseIn.__name__ = ["motion","easing","CubicEaseIn"];
motion_easing_CubicEaseIn.__interfaces__ = [motion_easing_IEasing];
motion_easing_CubicEaseIn.prototype = {
	calculate: function(k) {
		return k * k * k;
	}
	,ease: function(t,b,c,d) {
		return c * (t /= d) * t * t + b;
	}
	,__class__: motion_easing_CubicEaseIn
};
var motion_easing_CubicEaseInOut = function() {
};
$hxClasses["motion.easing.CubicEaseInOut"] = motion_easing_CubicEaseInOut;
motion_easing_CubicEaseInOut.__name__ = ["motion","easing","CubicEaseInOut"];
motion_easing_CubicEaseInOut.__interfaces__ = [motion_easing_IEasing];
motion_easing_CubicEaseInOut.prototype = {
	calculate: function(k) {
		if((k /= 0.5) < 1) {
			return 0.5 * k * k * k;
		} else {
			return 0.5 * ((k -= 2) * k * k + 2);
		}
	}
	,ease: function(t,b,c,d) {
		if((t /= d / 2) < 1) {
			return c / 2 * t * t * t + b;
		} else {
			return c / 2 * ((t -= 2) * t * t + 2) + b;
		}
	}
	,__class__: motion_easing_CubicEaseInOut
};
var motion_easing_CubicEaseOut = function() {
};
$hxClasses["motion.easing.CubicEaseOut"] = motion_easing_CubicEaseOut;
motion_easing_CubicEaseOut.__name__ = ["motion","easing","CubicEaseOut"];
motion_easing_CubicEaseOut.__interfaces__ = [motion_easing_IEasing];
motion_easing_CubicEaseOut.prototype = {
	calculate: function(k) {
		return --k * k * k + 1;
	}
	,ease: function(t,b,c,d) {
		t = t / d - 1;
		return c * (t * t * t + 1) + b;
	}
	,__class__: motion_easing_CubicEaseOut
};
var motion_easing_ExpoEaseIn = function() {
};
$hxClasses["motion.easing.ExpoEaseIn"] = motion_easing_ExpoEaseIn;
motion_easing_ExpoEaseIn.__name__ = ["motion","easing","ExpoEaseIn"];
motion_easing_ExpoEaseIn.__interfaces__ = [motion_easing_IEasing];
motion_easing_ExpoEaseIn.prototype = {
	calculate: function(k) {
		if(k == 0) {
			return 0;
		} else {
			return Math.pow(2,10 * (k - 1));
		}
	}
	,ease: function(t,b,c,d) {
		if(t == 0) {
			return b;
		} else {
			return c * Math.pow(2,10 * (t / d - 1)) + b;
		}
	}
	,__class__: motion_easing_ExpoEaseIn
};
var motion_easing_ExpoEaseInOut = function() {
};
$hxClasses["motion.easing.ExpoEaseInOut"] = motion_easing_ExpoEaseInOut;
motion_easing_ExpoEaseInOut.__name__ = ["motion","easing","ExpoEaseInOut"];
motion_easing_ExpoEaseInOut.__interfaces__ = [motion_easing_IEasing];
motion_easing_ExpoEaseInOut.prototype = {
	calculate: function(k) {
		if(k == 0) {
			return 0;
		}
		if(k == 1) {
			return 1;
		}
		if((k /= 0.5) < 1.0) {
			return 0.5 * Math.pow(2,10 * (k - 1));
		}
		return 0.5 * (2 - Math.pow(2,-10 * --k));
	}
	,ease: function(t,b,c,d) {
		if(t == 0) {
			return b;
		}
		if(t == d) {
			return b + c;
		}
		if((t /= d / 2.0) < 1.0) {
			return c / 2 * Math.pow(2,10 * (t - 1)) + b;
		}
		return c / 2 * (2 - Math.pow(2,-10 * --t)) + b;
	}
	,__class__: motion_easing_ExpoEaseInOut
};
var motion_easing_Linear = function() { };
$hxClasses["motion.easing.Linear"] = motion_easing_Linear;
motion_easing_Linear.__name__ = ["motion","easing","Linear"];
motion_easing_Linear.__properties__ = {get_easeNone:"get_easeNone"}
motion_easing_Linear.get_easeNone = function() {
	return new motion_easing_LinearEaseNone();
};
var motion_easing_LinearEaseNone = function() {
};
$hxClasses["motion.easing.LinearEaseNone"] = motion_easing_LinearEaseNone;
motion_easing_LinearEaseNone.__name__ = ["motion","easing","LinearEaseNone"];
motion_easing_LinearEaseNone.__interfaces__ = [motion_easing_IEasing];
motion_easing_LinearEaseNone.prototype = {
	calculate: function(k) {
		return k;
	}
	,ease: function(t,b,c,d) {
		return c * t / d + b;
	}
	,__class__: motion_easing_LinearEaseNone
};
var motion_easing_Quad = function() { };
$hxClasses["motion.easing.Quad"] = motion_easing_Quad;
motion_easing_Quad.__name__ = ["motion","easing","Quad"];
motion_easing_Quad.__properties__ = {get_easeOut:"get_easeOut",get_easeInOut:"get_easeInOut",get_easeIn:"get_easeIn"}
motion_easing_Quad.get_easeIn = function() {
	return new motion_easing_QuadEaseIn();
};
motion_easing_Quad.get_easeInOut = function() {
	return new motion_easing_QuadEaseInOut();
};
motion_easing_Quad.get_easeOut = function() {
	return new motion_easing_QuadEaseOut();
};
var motion_easing_QuadEaseIn = function() {
};
$hxClasses["motion.easing.QuadEaseIn"] = motion_easing_QuadEaseIn;
motion_easing_QuadEaseIn.__name__ = ["motion","easing","QuadEaseIn"];
motion_easing_QuadEaseIn.__interfaces__ = [motion_easing_IEasing];
motion_easing_QuadEaseIn.prototype = {
	calculate: function(k) {
		return k * k;
	}
	,ease: function(t,b,c,d) {
		return c * (t /= d) * t + b;
	}
	,__class__: motion_easing_QuadEaseIn
};
var motion_easing_QuadEaseInOut = function() {
};
$hxClasses["motion.easing.QuadEaseInOut"] = motion_easing_QuadEaseInOut;
motion_easing_QuadEaseInOut.__name__ = ["motion","easing","QuadEaseInOut"];
motion_easing_QuadEaseInOut.__interfaces__ = [motion_easing_IEasing];
motion_easing_QuadEaseInOut.prototype = {
	calculate: function(k) {
		if((k *= 2) < 1) {
			return 0.5 * k * k;
		}
		return -0.5 * ((k - 1) * (k - 3) - 1);
	}
	,ease: function(t,b,c,d) {
		if((t /= d / 2) < 1) {
			return c / 2 * t * t + b;
		}
		return -c / 2 * ((t - 1) * (t - 3) - 1) + b;
	}
	,__class__: motion_easing_QuadEaseInOut
};
var motion_easing_QuadEaseOut = function() {
};
$hxClasses["motion.easing.QuadEaseOut"] = motion_easing_QuadEaseOut;
motion_easing_QuadEaseOut.__name__ = ["motion","easing","QuadEaseOut"];
motion_easing_QuadEaseOut.__interfaces__ = [motion_easing_IEasing];
motion_easing_QuadEaseOut.prototype = {
	calculate: function(k) {
		return -k * (k - 2);
	}
	,ease: function(t,b,c,d) {
		return -c * (t /= d) * (t - 2) + b;
	}
	,__class__: motion_easing_QuadEaseOut
};
var openfl_IAssetCache = function() { };
$hxClasses["openfl.IAssetCache"] = openfl_IAssetCache;
openfl_IAssetCache.__name__ = ["openfl","IAssetCache"];
openfl_IAssetCache.prototype = {
	get_enabled: null
	,set_enabled: null
	,clear: null
	,getBitmapData: null
	,getFont: null
	,getSound: null
	,hasBitmapData: null
	,hasFont: null
	,hasSound: null
	,removeBitmapData: null
	,removeFont: null
	,removeSound: null
	,setBitmapData: null
	,setFont: null
	,setSound: null
	,__class__: openfl_IAssetCache
	,__properties__: {set_enabled:"set_enabled",get_enabled:"get_enabled"}
};
var openfl_AssetCache = function() {
	this.__enabled = true;
	this.bitmapData = new haxe_ds_StringMap();
	this.font = new haxe_ds_StringMap();
	this.sound = new haxe_ds_StringMap();
};
$hxClasses["openfl.AssetCache"] = openfl_AssetCache;
openfl_AssetCache.__name__ = ["openfl","AssetCache"];
openfl_AssetCache.__interfaces__ = [openfl_IAssetCache];
openfl_AssetCache.prototype = {
	bitmapData: null
	,font: null
	,sound: null
	,__enabled: null
	,clear: function(prefix) {
		if(prefix == null) {
			this.bitmapData = new haxe_ds_StringMap();
			this.font = new haxe_ds_StringMap();
			this.sound = new haxe_ds_StringMap();
		} else {
			var keys = this.bitmapData.keys();
			while(keys.hasNext()) {
				var key = keys.next();
				if(StringTools.startsWith(key,prefix)) {
					this.removeBitmapData(key);
				}
			}
			var keys1 = this.font.keys();
			while(keys1.hasNext()) {
				var key1 = keys1.next();
				if(StringTools.startsWith(key1,prefix)) {
					this.removeFont(key1);
				}
			}
			var keys2 = this.sound.keys();
			while(keys2.hasNext()) {
				var key2 = keys2.next();
				if(StringTools.startsWith(key2,prefix)) {
					this.removeSound(key2);
				}
			}
		}
	}
	,getBitmapData: function(id) {
		var _this = this.bitmapData;
		if(__map_reserved[id] != null) {
			return _this.getReserved(id);
		} else {
			return _this.h[id];
		}
	}
	,getFont: function(id) {
		var _this = this.font;
		if(__map_reserved[id] != null) {
			return _this.getReserved(id);
		} else {
			return _this.h[id];
		}
	}
	,getSound: function(id) {
		var _this = this.sound;
		if(__map_reserved[id] != null) {
			return _this.getReserved(id);
		} else {
			return _this.h[id];
		}
	}
	,hasBitmapData: function(id) {
		var _this = this.bitmapData;
		if(__map_reserved[id] != null) {
			return _this.existsReserved(id);
		} else {
			return _this.h.hasOwnProperty(id);
		}
	}
	,hasFont: function(id) {
		var _this = this.font;
		if(__map_reserved[id] != null) {
			return _this.existsReserved(id);
		} else {
			return _this.h.hasOwnProperty(id);
		}
	}
	,hasSound: function(id) {
		var _this = this.sound;
		if(__map_reserved[id] != null) {
			return _this.existsReserved(id);
		} else {
			return _this.h.hasOwnProperty(id);
		}
	}
	,removeBitmapData: function(id) {
		lime_Assets.cache.image.remove(id);
		return this.bitmapData.remove(id);
	}
	,removeFont: function(id) {
		lime_Assets.cache.font.remove(id);
		return this.font.remove(id);
	}
	,removeSound: function(id) {
		lime_Assets.cache.audio.remove(id);
		return this.sound.remove(id);
	}
	,setBitmapData: function(id,bitmapData) {
		var _this = this.bitmapData;
		if(__map_reserved[id] != null) {
			_this.setReserved(id,bitmapData);
		} else {
			_this.h[id] = bitmapData;
		}
	}
	,setFont: function(id,font) {
		var _this = this.font;
		if(__map_reserved[id] != null) {
			_this.setReserved(id,font);
		} else {
			_this.h[id] = font;
		}
	}
	,setSound: function(id,sound) {
		var _this = this.sound;
		if(__map_reserved[id] != null) {
			_this.setReserved(id,sound);
		} else {
			_this.h[id] = sound;
		}
	}
	,get_enabled: function() {
		return this.__enabled;
	}
	,set_enabled: function(value) {
		return this.__enabled = value;
	}
	,__class__: openfl_AssetCache
	,__properties__: {set_enabled:"set_enabled",get_enabled:"get_enabled"}
};
var openfl_Assets = function() { };
$hxClasses["openfl.Assets"] = openfl_Assets;
openfl_Assets.__name__ = ["openfl","Assets"];
openfl_Assets.addEventListener = function(type,listener,useCapture,priority,useWeakReference) {
	if(useWeakReference == null) {
		useWeakReference = false;
	}
	if(priority == null) {
		priority = 0;
	}
	if(useCapture == null) {
		useCapture = false;
	}
	if(!lime_Assets.onChange.has(openfl_Assets.LimeAssets_onChange)) {
		lime_Assets.onChange.add(openfl_Assets.LimeAssets_onChange);
	}
	openfl_Assets.dispatcher.addEventListener(type,listener,useCapture,priority,useWeakReference);
};
openfl_Assets.dispatchEvent = function(event) {
	return openfl_Assets.dispatcher.dispatchEvent(event);
};
openfl_Assets.exists = function(id,type) {
	return lime_Assets.exists(id,type);
};
openfl_Assets.getBitmapData = function(id,useCache) {
	if(useCache == null) {
		useCache = true;
	}
	if(useCache && openfl_Assets.cache.get_enabled() && openfl_Assets.cache.hasBitmapData(id)) {
		var bitmapData = openfl_Assets.cache.getBitmapData(id);
		if(openfl_Assets.isValidBitmapData(bitmapData)) {
			return bitmapData;
		}
	}
	var image = lime_Assets.getImage(id,false);
	if(image != null) {
		var bitmapData1 = openfl_display_BitmapData.fromImage(image);
		if(useCache && openfl_Assets.cache.get_enabled()) {
			openfl_Assets.cache.setBitmapData(id,bitmapData1);
		}
		return bitmapData1;
	}
	return null;
};
openfl_Assets.getBytes = function(id) {
	return openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytes(lime_Assets.getBytes(id));
};
openfl_Assets.getFont = function(id,useCache) {
	if(useCache == null) {
		useCache = true;
	}
	if(useCache && openfl_Assets.cache.get_enabled() && openfl_Assets.cache.hasFont(id)) {
		return openfl_Assets.cache.getFont(id);
	}
	var limeFont = lime_Assets.getFont(id,false);
	if(limeFont != null) {
		var font = openfl_text_Font.__fromLimeFont(limeFont);
		if(useCache && openfl_Assets.cache.get_enabled()) {
			openfl_Assets.cache.setFont(id,font);
		}
		return font;
	}
	return new openfl_text_Font();
};
openfl_Assets.getLibrary = function(name) {
	return lime_Assets.getLibrary(name);
};
openfl_Assets.getMovieClip = function(id) {
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName = HxOverrides.substr(id,id.indexOf(":") + 1,null);
	var library = openfl_Assets.getLibrary(libraryName);
	if(library != null) {
		if(library.exists(symbolName,"MOVIE_CLIP")) {
			if(library.isLocal(symbolName,"MOVIE_CLIP")) {
				return library.getMovieClip(symbolName);
			} else {
				lime_utils_Log.info("MovieClip asset \"" + id + "\" exists, but only asynchronously",{ fileName : "Assets.hx", lineNumber : 225, className : "openfl.Assets", methodName : "getMovieClip"});
			}
		} else {
			lime_utils_Log.info("There is no MovieClip asset with an ID of \"" + id + "\"",{ fileName : "Assets.hx", lineNumber : 231, className : "openfl.Assets", methodName : "getMovieClip"});
		}
	} else {
		lime_utils_Log.info("There is no asset library named \"" + libraryName + "\"",{ fileName : "Assets.hx", lineNumber : 237, className : "openfl.Assets", methodName : "getMovieClip"});
	}
	return null;
};
openfl_Assets.getMusic = function(id,useCache) {
	if(useCache == null) {
		useCache = true;
	}
	return openfl_Assets.getSound(id,useCache);
};
openfl_Assets.getPath = function(id) {
	return lime_Assets.getPath(id);
};
openfl_Assets.getSound = function(id,useCache) {
	if(useCache == null) {
		useCache = true;
	}
	if(useCache && openfl_Assets.cache.get_enabled() && openfl_Assets.cache.hasSound(id)) {
		var sound = openfl_Assets.cache.getSound(id);
		if(openfl_Assets.isValidSound(sound)) {
			return sound;
		}
	}
	var buffer = lime_Assets.getAudioBuffer(id,false);
	if(buffer != null) {
		var sound1 = openfl_media_Sound.fromAudioBuffer(buffer);
		if(useCache && openfl_Assets.cache.get_enabled()) {
			openfl_Assets.cache.setSound(id,sound1);
		}
		return sound1;
	}
	return null;
};
openfl_Assets.getText = function(id) {
	return lime_Assets.getText(id);
};
openfl_Assets.hasEventListener = function(type) {
	return openfl_Assets.dispatcher.hasEventListener(type);
};
openfl_Assets.isLocal = function(id,type,useCache) {
	if(useCache == null) {
		useCache = true;
	}
	if(useCache && openfl_Assets.cache.get_enabled()) {
		if(type == "IMAGE" || type == null) {
			if(openfl_Assets.cache.hasBitmapData(id)) {
				return true;
			}
		}
		if(type == "FONT" || type == null) {
			if(openfl_Assets.cache.hasFont(id)) {
				return true;
			}
		}
		if(type == "SOUND" || type == "MUSIC" || type == null) {
			if(openfl_Assets.cache.hasSound(id)) {
				return true;
			}
		}
	}
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName = HxOverrides.substr(id,id.indexOf(":") + 1,null);
	var library = openfl_Assets.getLibrary(libraryName);
	if(library != null) {
		return library.isLocal(symbolName,type);
	}
	return false;
};
openfl_Assets.isValidBitmapData = function(bitmapData) {
	if(bitmapData != null) {
		return bitmapData.image != null;
	} else {
		return false;
	}
};
openfl_Assets.isValidSound = function(sound) {
	return true;
};
openfl_Assets.list = function(type) {
	return lime_Assets.list(type);
};
openfl_Assets.loadBitmapData = function(id,useCache,handler) {
	if(useCache == null) {
		useCache = true;
	}
	if(useCache == null) {
		useCache = true;
	}
	var promise = new lime_app_Promise();
	if(handler != null) {
		promise.future.onComplete(handler);
		promise.future.onError(function(_) {
			handler(null);
		});
	}
	if(useCache && openfl_Assets.cache.get_enabled() && openfl_Assets.cache.hasBitmapData(id)) {
		var bitmapData = openfl_Assets.cache.getBitmapData(id);
		if(openfl_Assets.isValidBitmapData(bitmapData)) {
			promise.complete(bitmapData);
			return promise.future;
		}
	}
	lime_Assets.loadImage(id,false).onComplete(function(image) {
		if(image != null) {
			var bitmapData1 = openfl_display_BitmapData.fromImage(image);
			if(useCache && openfl_Assets.cache.get_enabled()) {
				openfl_Assets.cache.setBitmapData(id,bitmapData1);
			}
			promise.complete(bitmapData1);
		} else {
			promise.error("[Assets] Could not load Image \"" + id + "\"");
		}
	}).onError($bind(promise,promise.error)).onProgress($bind(promise,promise.progress));
	return promise.future;
};
openfl_Assets.loadBytes = function(id,handler) {
	var promise = new lime_app_Promise();
	var future = lime_Assets.loadBytes(id);
	if(handler != null) {
		promise.future.onComplete(handler);
		promise.future.onError(function(_) {
			handler(null);
		});
	}
	future.onComplete(function(bytes) {
		promise.complete(openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytes(bytes));
	});
	future.onProgress(function(progress) {
		promise.progress(progress);
	});
	future.onError(function(msg) {
		promise.error(msg);
	});
	return promise.future;
};
openfl_Assets.loadFont = function(id,useCache,handler) {
	if(useCache == null) {
		useCache = true;
	}
	if(useCache == null) {
		useCache = true;
	}
	var promise = new lime_app_Promise();
	if(handler != null) {
		promise.future.onComplete(handler);
		promise.future.onError(function(_) {
			handler(null);
		});
	}
	if(useCache && openfl_Assets.cache.get_enabled() && openfl_Assets.cache.hasFont(id)) {
		var tmp = openfl_Assets.cache.getFont(id);
		promise.complete(tmp);
		return promise.future;
	}
	lime_Assets.loadFont(id).onComplete(function(limeFont) {
		var font = openfl_text_Font.__fromLimeFont(limeFont);
		if(useCache && openfl_Assets.cache.get_enabled()) {
			openfl_Assets.cache.setFont(id,font);
		}
		promise.complete(font);
	}).onError($bind(promise,promise.error)).onProgress($bind(promise,promise.progress));
	return promise.future;
};
openfl_Assets.loadLibrary = function(name,handler) {
	var future = lime_Assets.loadLibrary(name);
	if(handler != null) {
		future.onComplete(handler);
		future.onError(function(_) {
			handler(null);
		});
	}
	return future;
};
openfl_Assets.loadMusic = function(id,useCache,handler) {
	if(useCache == null) {
		useCache = true;
	}
	if(useCache == null) {
		useCache = true;
	}
	return new lime_app_Future(function() {
		return openfl_Assets.getMusic(id,useCache);
	});
};
openfl_Assets.loadMovieClip = function(id,handler) {
	var promise = new lime_app_Promise();
	if(handler != null) {
		promise.future.onComplete(handler);
		promise.future.onError(function(_) {
			handler(null);
		});
	}
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName = HxOverrides.substr(id,id.indexOf(":") + 1,null);
	var library = openfl_Assets.getLibrary(libraryName);
	if(library != null) {
		if(library.exists(symbolName,"MOVIE_CLIP")) {
			promise.completeWith(library.loadMovieClip(symbolName));
		} else {
			promise.error("[Assets] There is no MovieClip asset with an ID of \"" + id + "\"");
		}
	} else {
		promise.error("[Assets] There is no asset library named \"" + libraryName + "\"");
	}
	return promise.future;
};
openfl_Assets.loadSound = function(id,useCache,handler) {
	if(useCache == null) {
		useCache = true;
	}
	if(useCache == null) {
		useCache = true;
	}
	var promise = new lime_app_Promise();
	lime_Assets.loadAudioBuffer(id,useCache).onComplete(function(buffer) {
		if(buffer != null) {
			var sound = openfl_media_Sound.fromAudioBuffer(buffer);
			if(useCache && openfl_Assets.cache.get_enabled()) {
				openfl_Assets.cache.setSound(id,sound);
			}
			promise.complete(sound);
		} else {
			promise.error("[Assets] Could not load Sound \"" + id + "\"");
		}
	}).onError($bind(promise,promise.error)).onProgress($bind(promise,promise.progress));
	return promise.future;
};
openfl_Assets.loadText = function(id,handler) {
	var future = lime_Assets.loadText(id);
	if(handler != null) {
		future.onComplete(handler);
		future.onError(function(_) {
			handler(null);
		});
	}
	return future;
};
openfl_Assets.registerLibrary = function(name,library) {
	lime_Assets.registerLibrary(name,library);
};
openfl_Assets.removeEventListener = function(type,listener,capture) {
	if(capture == null) {
		capture = false;
	}
	openfl_Assets.dispatcher.removeEventListener(type,listener,capture);
};
openfl_Assets.resolveClass = function(name) {
	return Type.resolveClass(name);
};
openfl_Assets.resolveEnum = function(name) {
	return Type.resolveEnum(name);
};
openfl_Assets.unloadLibrary = function(name) {
	lime_Assets.unloadLibrary(name);
};
openfl_Assets.LimeAssets_onChange = function() {
	openfl_Assets.dispatchEvent(new openfl_events_Event("change"));
};
var openfl_display_LoaderInfo = function() {
	openfl_events_EventDispatcher.call(this);
	this.applicationDomain = openfl_system_ApplicationDomain.currentDomain;
	this.bytesLoaded = 0;
	this.bytesTotal = 0;
	this.childAllowsParent = true;
	this.parameters = { };
};
$hxClasses["openfl.display.LoaderInfo"] = openfl_display_LoaderInfo;
openfl_display_LoaderInfo.__name__ = ["openfl","display","LoaderInfo"];
openfl_display_LoaderInfo.create = function(loader) {
	var loaderInfo = new openfl_display_LoaderInfo();
	loaderInfo.uncaughtErrorEvents = new openfl_events_UncaughtErrorEvents();
	if(loader != null) {
		loaderInfo.loader = loader;
	} else {
		loaderInfo.url = openfl_display_LoaderInfo.__rootURL;
	}
	return loaderInfo;
};
openfl_display_LoaderInfo.__super__ = openfl_events_EventDispatcher;
openfl_display_LoaderInfo.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	applicationDomain: null
	,bytes: null
	,bytesLoaded: null
	,bytesTotal: null
	,childAllowsParent: null
	,content: null
	,contentType: null
	,frameRate: null
	,height: null
	,loader: null
	,loaderURL: null
	,parameters: null
	,parentAllowsChild: null
	,sameDomain: null
	,sharedEvents: null
	,uncaughtErrorEvents: null
	,url: null
	,width: null
	,__class__: openfl_display_LoaderInfo
});
var openfl_system_ApplicationDomain = function(parentDomain) {
	if(parentDomain != null) {
		this.parentDomain = parentDomain;
	} else {
		this.parentDomain = openfl_system_ApplicationDomain.currentDomain;
	}
};
$hxClasses["openfl.system.ApplicationDomain"] = openfl_system_ApplicationDomain;
openfl_system_ApplicationDomain.__name__ = ["openfl","system","ApplicationDomain"];
openfl_system_ApplicationDomain.prototype = {
	parentDomain: null
	,getDefinition: function(name) {
		return Type.resolveClass(name);
	}
	,hasDefinition: function(name) {
		return Type.resolveClass(name) != null;
	}
	,__class__: openfl_system_ApplicationDomain
};
var openfl_events_UncaughtErrorEvents = function() {
	openfl_events_EventDispatcher.call(this);
};
$hxClasses["openfl.events.UncaughtErrorEvents"] = openfl_events_UncaughtErrorEvents;
openfl_events_UncaughtErrorEvents.__name__ = ["openfl","events","UncaughtErrorEvents"];
openfl_events_UncaughtErrorEvents.__super__ = openfl_events_EventDispatcher;
openfl_events_UncaughtErrorEvents.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	__class__: openfl_events_UncaughtErrorEvents
});
var openfl_geom_Matrix = function(a,b,c,d,tx,ty) {
	if(ty == null) {
		ty = 0;
	}
	if(tx == null) {
		tx = 0;
	}
	if(d == null) {
		d = 1;
	}
	if(c == null) {
		c = 0;
	}
	if(b == null) {
		b = 0;
	}
	if(a == null) {
		a = 1;
	}
	this.a = a;
	this.b = b;
	this.c = c;
	this.d = d;
	this.tx = tx;
	this.ty = ty;
};
$hxClasses["openfl.geom.Matrix"] = openfl_geom_Matrix;
openfl_geom_Matrix.__name__ = ["openfl","geom","Matrix"];
openfl_geom_Matrix.prototype = {
	a: null
	,b: null
	,c: null
	,d: null
	,tx: null
	,ty: null
	,__array: null
	,clone: function() {
		return new openfl_geom_Matrix(this.a,this.b,this.c,this.d,this.tx,this.ty);
	}
	,concat: function(m) {
		var a1 = this.a * m.a + this.b * m.c;
		this.b = this.a * m.b + this.b * m.d;
		this.a = a1;
		var c1 = this.c * m.a + this.d * m.c;
		this.d = this.c * m.b + this.d * m.d;
		this.c = c1;
		var tx1 = this.tx * m.a + this.ty * m.c + m.tx;
		this.ty = this.tx * m.b + this.ty * m.d + m.ty;
		this.tx = tx1;
	}
	,copyColumnFrom: function(column,vector3D) {
		if(column > 2) {
			throw new js__$Boot_HaxeError("Column " + column + " out of bounds (2)");
		} else if(column == 0) {
			this.a = vector3D.x;
			this.c = vector3D.y;
		} else if(column == 1) {
			this.b = vector3D.x;
			this.d = vector3D.y;
		} else {
			this.tx = vector3D.x;
			this.ty = vector3D.y;
		}
	}
	,copyColumnTo: function(column,vector3D) {
		if(column > 2) {
			throw new js__$Boot_HaxeError("Column " + column + " out of bounds (2)");
		} else if(column == 0) {
			vector3D.x = this.a;
			vector3D.y = this.c;
			vector3D.z = 0;
		} else if(column == 1) {
			vector3D.x = this.b;
			vector3D.y = this.d;
			vector3D.z = 0;
		} else {
			vector3D.x = this.tx;
			vector3D.y = this.ty;
			vector3D.z = 1;
		}
	}
	,copyFrom: function(sourceMatrix) {
		this.a = sourceMatrix.a;
		this.b = sourceMatrix.b;
		this.c = sourceMatrix.c;
		this.d = sourceMatrix.d;
		this.tx = sourceMatrix.tx;
		this.ty = sourceMatrix.ty;
	}
	,copyRowFrom: function(row,vector3D) {
		if(row > 2) {
			throw new js__$Boot_HaxeError("Row " + row + " out of bounds (2)");
		} else if(row == 0) {
			this.a = vector3D.x;
			this.c = vector3D.y;
		} else if(row == 1) {
			this.b = vector3D.x;
			this.d = vector3D.y;
		} else {
			this.tx = vector3D.x;
			this.ty = vector3D.y;
		}
	}
	,copyRowTo: function(row,vector3D) {
		if(row > 2) {
			throw new js__$Boot_HaxeError("Row " + row + " out of bounds (2)");
		} else if(row == 0) {
			vector3D.x = this.a;
			vector3D.y = this.b;
			vector3D.z = this.tx;
		} else if(row == 1) {
			vector3D.x = this.c;
			vector3D.y = this.d;
			vector3D.z = this.ty;
		} else {
			vector3D.setTo(0,0,1);
		}
	}
	,createBox: function(scaleX,scaleY,rotation,tx,ty) {
		if(ty == null) {
			ty = 0;
		}
		if(tx == null) {
			tx = 0;
		}
		if(rotation == null) {
			rotation = 0;
		}
		if(rotation != 0) {
			var cos = Math.cos(rotation);
			var sin = Math.sin(rotation);
			this.a = cos * scaleX;
			this.b = sin * scaleY;
			this.c = -sin * scaleX;
			this.d = cos * scaleY;
		} else {
			this.a = scaleX;
			this.b = 0;
			this.c = 0;
			this.d = scaleY;
		}
		this.tx = tx;
		this.ty = ty;
	}
	,createGradientBox: function(width,height,rotation,tx,ty) {
		if(ty == null) {
			ty = 0;
		}
		if(tx == null) {
			tx = 0;
		}
		if(rotation == null) {
			rotation = 0;
		}
		this.a = width / 1638.4;
		this.d = height / 1638.4;
		if(rotation != 0) {
			var cos = Math.cos(rotation);
			var sin = Math.sin(rotation);
			this.b = sin * this.d;
			this.c = -sin * this.a;
			this.a *= cos;
			this.d *= cos;
		} else {
			this.b = 0;
			this.c = 0;
		}
		this.tx = tx + width / 2;
		this.ty = ty + height / 2;
	}
	,deltaTransformPoint: function(point) {
		return new openfl_geom_Point(point.x * this.a + point.y * this.c,point.x * this.b + point.y * this.d);
	}
	,equals: function(matrix) {
		if(matrix != null && this.tx == matrix.tx && this.ty == matrix.ty && this.a == matrix.a && this.b == matrix.b && this.c == matrix.c) {
			return this.d == matrix.d;
		} else {
			return false;
		}
	}
	,identity: function() {
		this.a = 1;
		this.b = 0;
		this.c = 0;
		this.d = 1;
		this.tx = 0;
		this.ty = 0;
	}
	,invert: function() {
		var norm = this.a * this.d - this.b * this.c;
		if(norm == 0) {
			this.a = this.b = this.c = this.d = 0;
			this.tx = -this.tx;
			this.ty = -this.ty;
		} else {
			norm = 1.0 / norm;
			var a1 = this.d * norm;
			this.d = this.a * norm;
			this.a = a1;
			this.b *= -norm;
			this.c *= -norm;
			var tx1 = -this.a * this.tx - this.c * this.ty;
			this.ty = -this.b * this.tx - this.d * this.ty;
			this.tx = tx1;
		}
		return this;
	}
	,rotate: function(theta) {
		var cos = Math.cos(theta);
		var sin = Math.sin(theta);
		var a1 = this.a * cos - this.b * sin;
		this.b = this.a * sin + this.b * cos;
		this.a = a1;
		var c1 = this.c * cos - this.d * sin;
		this.d = this.c * sin + this.d * cos;
		this.c = c1;
		var tx1 = this.tx * cos - this.ty * sin;
		this.ty = this.tx * sin + this.ty * cos;
		this.tx = tx1;
	}
	,scale: function(sx,sy) {
		this.a *= sx;
		this.b *= sy;
		this.c *= sx;
		this.d *= sy;
		this.tx *= sx;
		this.ty *= sy;
	}
	,setRotation: function(theta,scale) {
		if(scale == null) {
			scale = 1;
		}
		this.a = Math.cos(theta) * scale;
		this.c = Math.sin(theta) * scale;
		this.b = -this.c;
		this.d = this.a;
	}
	,setTo: function(a,b,c,d,tx,ty) {
		this.a = a;
		this.b = b;
		this.c = c;
		this.d = d;
		this.tx = tx;
		this.ty = ty;
	}
	,to3DString: function(roundPixels) {
		if(roundPixels == null) {
			roundPixels = false;
		}
		if(roundPixels) {
			return "matrix3d(" + this.a + ", " + this.b + ", 0, 0, " + this.c + ", " + this.d + ", 0, 0, 0, 0, 1, 0, " + (this.tx | 0) + ", " + (this.ty | 0) + ", 0, 1)";
		} else {
			return "matrix3d(" + this.a + ", " + this.b + ", 0, 0, " + this.c + ", " + this.d + ", 0, 0, 0, 0, 1, 0, " + this.tx + ", " + this.ty + ", 0, 1)";
		}
	}
	,toMozString: function() {
		return "matrix(" + this.a + ", " + this.b + ", " + this.c + ", " + this.d + ", " + this.tx + "px, " + this.ty + "px)";
	}
	,toString: function() {
		return "matrix(" + this.a + ", " + this.b + ", " + this.c + ", " + this.d + ", " + this.tx + ", " + this.ty + ")";
	}
	,transformPoint: function(pos) {
		return new openfl_geom_Point(pos.x * this.a + pos.y * this.c + this.tx,pos.x * this.b + pos.y * this.d + this.ty);
	}
	,translate: function(dx,dy) {
		this.tx += dx;
		this.ty += dy;
	}
	,toArray: function(transpose) {
		if(transpose == null) {
			transpose = false;
		}
		if(this.__array == null) {
			this.__array = new Float32Array(9);
		}
		if(transpose) {
			this.__array[0] = this.a;
			this.__array[1] = this.b;
			this.__array[2] = 0;
			this.__array[3] = this.c;
			this.__array[4] = this.d;
			this.__array[5] = 0;
			this.__array[6] = this.tx;
			this.__array[7] = this.ty;
			this.__array[8] = 1;
		} else {
			this.__array[0] = this.a;
			this.__array[1] = this.c;
			this.__array[2] = this.tx;
			this.__array[3] = this.b;
			this.__array[4] = this.d;
			this.__array[5] = this.ty;
			this.__array[6] = 0;
			this.__array[7] = 0;
			this.__array[8] = 1;
		}
		return this.__array;
	}
	,__cleanValues: function() {
		this.a = Math.round(this.a * 1000) / 1000;
		this.b = Math.round(this.b * 1000) / 1000;
		this.c = Math.round(this.c * 1000) / 1000;
		this.d = Math.round(this.d * 1000) / 1000;
		this.tx = Math.round(this.tx * 10) / 10;
		this.ty = Math.round(this.ty * 10) / 10;
	}
	,__toMatrix3: function() {
		openfl_geom_Matrix.__matrix3.setTo(this.a,this.b,this.c,this.d,this.tx,this.ty);
		return openfl_geom_Matrix.__matrix3;
	}
	,__transformInversePoint: function(point) {
		var norm = this.a * this.d - this.b * this.c;
		if(norm == 0) {
			point.x = -this.tx;
			point.y = -this.ty;
		} else {
			var px = 1.0 / norm * (this.c * (this.ty - point.y) + this.d * (point.x - this.tx));
			point.y = 1.0 / norm * (this.a * (point.y - this.ty) + this.b * (this.tx - point.x));
			point.x = px;
		}
	}
	,__transformInverseX: function(px,py) {
		var norm = this.a * this.d - this.b * this.c;
		if(norm == 0) {
			return -this.tx;
		} else {
			return 1.0 / norm * (this.c * (this.ty - py) + this.d * (px - this.tx));
		}
	}
	,__transformInverseY: function(px,py) {
		var norm = this.a * this.d - this.b * this.c;
		if(norm == 0) {
			return -this.ty;
		} else {
			return 1.0 / norm * (this.a * (py - this.ty) + this.b * (this.tx - px));
		}
	}
	,__transformPoint: function(point) {
		var px = point.x;
		var py = point.y;
		point.x = px * this.a + py * this.c + this.tx;
		point.y = px * this.b + py * this.d + this.ty;
	}
	,__transformX: function(px,py) {
		return px * this.a + py * this.c + this.tx;
	}
	,__transformY: function(px,py) {
		return px * this.b + py * this.d + this.ty;
	}
	,__translateTransformed: function(px,py) {
		this.tx = px * this.a + py * this.c + this.tx;
		this.ty = px * this.b + py * this.d + this.ty;
	}
	,__class__: openfl_geom_Matrix
};
var openfl_geom_ColorTransform = function(redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier,redOffset,greenOffset,blueOffset,alphaOffset) {
	if(alphaOffset == null) {
		alphaOffset = 0;
	}
	if(blueOffset == null) {
		blueOffset = 0;
	}
	if(greenOffset == null) {
		greenOffset = 0;
	}
	if(redOffset == null) {
		redOffset = 0;
	}
	if(alphaMultiplier == null) {
		alphaMultiplier = 1;
	}
	if(blueMultiplier == null) {
		blueMultiplier = 1;
	}
	if(greenMultiplier == null) {
		greenMultiplier = 1;
	}
	if(redMultiplier == null) {
		redMultiplier = 1;
	}
	this.redMultiplier = redMultiplier;
	this.greenMultiplier = greenMultiplier;
	this.blueMultiplier = blueMultiplier;
	this.alphaMultiplier = alphaMultiplier;
	this.redOffset = redOffset;
	this.greenOffset = greenOffset;
	this.blueOffset = blueOffset;
	this.alphaOffset = alphaOffset;
};
$hxClasses["openfl.geom.ColorTransform"] = openfl_geom_ColorTransform;
openfl_geom_ColorTransform.__name__ = ["openfl","geom","ColorTransform"];
openfl_geom_ColorTransform.prototype = {
	alphaMultiplier: null
	,alphaOffset: null
	,blueMultiplier: null
	,blueOffset: null
	,greenMultiplier: null
	,greenOffset: null
	,redMultiplier: null
	,redOffset: null
	,concat: function(second) {
		this.redMultiplier *= second.redMultiplier;
		this.greenMultiplier *= second.greenMultiplier;
		this.blueMultiplier *= second.blueMultiplier;
		this.alphaMultiplier *= second.alphaMultiplier;
		this.redOffset = second.redMultiplier * this.redOffset + second.redOffset;
		this.greenOffset = second.greenMultiplier * this.greenOffset + second.greenOffset;
		this.blueOffset = second.blueMultiplier * this.blueOffset + second.blueOffset;
		this.alphaOffset = second.alphaMultiplier * this.alphaOffset + second.alphaOffset;
	}
	,toString: function() {
		return "(redMultiplier=" + this.redMultiplier + ", greenMultiplier=" + this.greenMultiplier + ", blueMultiplier=" + this.blueMultiplier + ", alphaMultiplier=" + this.alphaMultiplier + ", redOffset=" + this.redOffset + ", greenOffset=" + this.greenOffset + ", blueOffset=" + this.blueOffset + ", alphaOffset=" + this.alphaOffset + ")";
	}
	,__clone: function() {
		return new openfl_geom_ColorTransform(this.redMultiplier,this.greenMultiplier,this.blueMultiplier,this.alphaMultiplier,this.redOffset,this.greenOffset,this.blueOffset,this.alphaOffset);
	}
	,__combine: function(ct) {
		this.redMultiplier *= ct.redMultiplier;
		this.greenMultiplier *= ct.greenMultiplier;
		this.blueMultiplier *= ct.blueMultiplier;
		this.alphaMultiplier *= ct.alphaMultiplier;
		this.redOffset += ct.redOffset;
		this.greenOffset += ct.greenOffset;
		this.blueOffset += ct.blueOffset;
		this.alphaOffset += ct.alphaOffset;
	}
	,__equals: function(ct,skipAlphaMultiplier) {
		if(skipAlphaMultiplier == null) {
			skipAlphaMultiplier = false;
		}
		if(ct != null && this.redMultiplier == ct.redMultiplier && this.greenMultiplier == ct.greenMultiplier && this.blueMultiplier == ct.blueMultiplier && (skipAlphaMultiplier || this.alphaMultiplier == ct.alphaMultiplier) && this.redOffset == ct.redOffset && this.greenOffset == ct.greenOffset && this.blueOffset == ct.blueOffset) {
			return this.alphaOffset == ct.alphaOffset;
		} else {
			return false;
		}
	}
	,__isDefault: function() {
		if(this.redMultiplier == 1 && this.greenMultiplier == 1 && this.blueMultiplier == 1 && this.alphaMultiplier == 1 && this.redOffset == 0 && this.greenOffset == 0 && this.blueOffset == 0) {
			return this.alphaOffset == 0;
		} else {
			return false;
		}
	}
	,get_color: function() {
		return (this.redOffset | 0) << 16 | (this.greenOffset | 0) << 8 | (this.blueOffset | 0);
	}
	,set_color: function(value) {
		this.redOffset = value >> 16 & 255;
		this.greenOffset = value >> 8 & 255;
		this.blueOffset = value & 255;
		this.redMultiplier = 0;
		this.greenMultiplier = 0;
		this.blueMultiplier = 0;
		return this.get_color();
	}
	,__toLimeColorMatrix: function() {
		if(openfl_geom_ColorTransform.__limeColorMatrix == null) {
			openfl_geom_ColorTransform.__limeColorMatrix = new Float32Array(20);
		}
		openfl_geom_ColorTransform.__limeColorMatrix[0] = this.redMultiplier;
		openfl_geom_ColorTransform.__limeColorMatrix[4] = this.redOffset / 255;
		openfl_geom_ColorTransform.__limeColorMatrix[6] = this.greenMultiplier;
		openfl_geom_ColorTransform.__limeColorMatrix[9] = this.greenOffset / 255;
		openfl_geom_ColorTransform.__limeColorMatrix[12] = this.blueMultiplier;
		openfl_geom_ColorTransform.__limeColorMatrix[14] = this.blueOffset / 255;
		openfl_geom_ColorTransform.__limeColorMatrix[18] = this.alphaMultiplier;
		openfl_geom_ColorTransform.__limeColorMatrix[19] = this.alphaOffset / 255;
		return openfl_geom_ColorTransform.__limeColorMatrix;
	}
	,__class__: openfl_geom_ColorTransform
	,__properties__: {set_color:"set_color",get_color:"get_color"}
};
var openfl_Lib = function() { };
$hxClasses["openfl.Lib"] = openfl_Lib;
openfl_Lib.__name__ = ["openfl","Lib"];
openfl_Lib["as"] = function(v,c) {
	if(js_Boot.__instanceof(v,c)) {
		return v;
	} else {
		return null;
	}
};
openfl_Lib.attach = function(name) {
	return new openfl_display_MovieClip();
};
openfl_Lib.getTimer = function() {
	return lime_system_System.getTimer();
};
openfl_Lib.getURL = function(request,target) {
	if(target == null) {
		target = "_blank";
	}
	window.open(request.url,target);
};
openfl_Lib.notImplemented = function(posInfo) {
	var api = posInfo.className + "." + posInfo.methodName;
	var _this = openfl_Lib.__sentWarnings;
	if(!(__map_reserved[api] != null ? _this.existsReserved(api) : _this.h.hasOwnProperty(api))) {
		var _this1 = openfl_Lib.__sentWarnings;
		if(__map_reserved[api] != null) {
			_this1.setReserved(api,true);
		} else {
			_this1.h[api] = true;
		}
		lime_utils_Log.warn(posInfo.methodName + " is not implemented",posInfo);
	}
};
openfl_Lib.preventDefaultTouchMove = function() {
	window.document.addEventListener("touchmove",function(evt) {
		evt.preventDefault();
	},false);
};
openfl_Lib.trace = function(arg) {
	haxe_Log.trace(arg,{ fileName : "Lib.hx", lineNumber : 140, className : "openfl.Lib", methodName : "trace"});
};
var openfl__$Vector_Vector_$Impl_$ = {};
$hxClasses["openfl._Vector.Vector_Impl_"] = openfl__$Vector_Vector_$Impl_$;
openfl__$Vector_Vector_$Impl_$.__name__ = ["openfl","_Vector","Vector_Impl_"];
openfl__$Vector_Vector_$Impl_$.__properties__ = {set_length:"set_length",get_length:"get_length",set_fixed:"set_fixed",get_fixed:"get_fixed"}
openfl__$Vector_Vector_$Impl_$.concat = function(this1,a) {
	return this1.concat(a);
};
openfl__$Vector_Vector_$Impl_$.copy = function(this1) {
	return this1.copy();
};
openfl__$Vector_Vector_$Impl_$.get = function(this1,index) {
	return this1.get(index);
};
openfl__$Vector_Vector_$Impl_$.indexOf = function(this1,x,from) {
	if(from == null) {
		from = 0;
	}
	return this1.indexOf(x,from);
};
openfl__$Vector_Vector_$Impl_$.insertAt = function(this1,index,element) {
	this1.insertAt(index,element);
};
openfl__$Vector_Vector_$Impl_$.iterator = function(this1) {
	return this1.iterator();
};
openfl__$Vector_Vector_$Impl_$.join = function(this1,sep) {
	return this1.join(sep);
};
openfl__$Vector_Vector_$Impl_$.lastIndexOf = function(this1,x,from) {
	if(from == null) {
		from = 0;
	}
	return this1.lastIndexOf(x,from);
};
openfl__$Vector_Vector_$Impl_$.pop = function(this1) {
	return this1.pop();
};
openfl__$Vector_Vector_$Impl_$.push = function(this1,x) {
	return this1.push(x);
};
openfl__$Vector_Vector_$Impl_$.reverse = function(this1) {
	this1.reverse();
};
openfl__$Vector_Vector_$Impl_$.set = function(this1,index,value) {
	return this1.set(index,value);
};
openfl__$Vector_Vector_$Impl_$.shift = function(this1) {
	return this1.shift();
};
openfl__$Vector_Vector_$Impl_$.slice = function(this1,pos,end) {
	return this1.slice(pos,end);
};
openfl__$Vector_Vector_$Impl_$.sort = function(this1,f) {
	this1.sort(f);
};
openfl__$Vector_Vector_$Impl_$.splice = function(this1,pos,len) {
	return this1.splice(pos,len);
};
openfl__$Vector_Vector_$Impl_$.toString = function(this1) {
	return this1.toString();
};
openfl__$Vector_Vector_$Impl_$.unshift = function(this1,x) {
	this1.unshift(x);
};
openfl__$Vector_Vector_$Impl_$.ofArray = function(a) {
	var vector = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
	var _g1 = 0;
	var _g = a.length;
	while(_g1 < _g) {
		var i = _g1++;
		vector.set(i,a[i]);
	}
	return vector;
};
openfl__$Vector_Vector_$Impl_$.convert = function(v) {
	return v;
};
openfl__$Vector_Vector_$Impl_$.toBoolVector = function(t,length,fixed) {
	return new openfl__$Vector_BoolVector(length,fixed);
};
openfl__$Vector_Vector_$Impl_$.toIntVector = function(t,length,fixed) {
	return new openfl__$Vector_IntVector(length,fixed);
};
openfl__$Vector_Vector_$Impl_$.toFloatVector = function(t,length,fixed) {
	return new openfl__$Vector_FloatVector(length,fixed);
};
openfl__$Vector_Vector_$Impl_$.toFunctionVector = function(t,length,fixed) {
	return new openfl__$Vector_FunctionVector(length,fixed);
};
openfl__$Vector_Vector_$Impl_$.toObjectVector = function(t,length,fixed) {
	return new openfl__$Vector_ObjectVector(length,fixed);
};
openfl__$Vector_Vector_$Impl_$.fromBoolVector = function(vector) {
	return vector;
};
openfl__$Vector_Vector_$Impl_$.fromIntVector = function(vector) {
	return vector;
};
openfl__$Vector_Vector_$Impl_$.fromFloatVector = function(vector) {
	return vector;
};
openfl__$Vector_Vector_$Impl_$.fromFunctionVector = function(vector) {
	return vector;
};
openfl__$Vector_Vector_$Impl_$.fromObjectVector = function(vector) {
	return vector;
};
openfl__$Vector_Vector_$Impl_$.get_fixed = function(this1) {
	return this1.fixed;
};
openfl__$Vector_Vector_$Impl_$.set_fixed = function(this1,value) {
	return this1.fixed = value;
};
openfl__$Vector_Vector_$Impl_$.get_length = function(this1) {
	return this1.get_length();
};
openfl__$Vector_Vector_$Impl_$.set_length = function(this1,value) {
	return this1.set_length(value);
};
var openfl__$Vector_IVector = function() { };
$hxClasses["openfl._Vector.IVector"] = openfl__$Vector_IVector;
openfl__$Vector_IVector.__name__ = ["openfl","_Vector","IVector"];
openfl__$Vector_IVector.prototype = {
	get_length: null
	,set_length: null
	,fixed: null
	,concat: null
	,copy: null
	,get: null
	,indexOf: null
	,insertAt: null
	,iterator: null
	,join: null
	,lastIndexOf: null
	,pop: null
	,push: null
	,reverse: null
	,set: null
	,shift: null
	,slice: null
	,sort: null
	,splice: null
	,toString: null
	,unshift: null
	,__class__: openfl__$Vector_IVector
	,__properties__: {set_length:"set_length",get_length:"get_length"}
};
var openfl__$Vector_BoolVector = function(length,fixed,array) {
	if(array == null) {
		array = [];
	}
	this.__array = array;
	if(length != null) {
		this.set_length(length);
	}
	this.fixed = fixed == true;
};
$hxClasses["openfl._Vector.BoolVector"] = openfl__$Vector_BoolVector;
openfl__$Vector_BoolVector.__name__ = ["openfl","_Vector","BoolVector"];
openfl__$Vector_BoolVector.__interfaces__ = [openfl__$Vector_IVector];
openfl__$Vector_BoolVector.prototype = {
	fixed: null
	,__array: null
	,concat: function(a) {
		if(a == null) {
			return new openfl__$Vector_BoolVector(null,null,this.__array.slice());
		} else {
			return new openfl__$Vector_BoolVector(null,null,this.__array.concat((js_Boot.__cast(a , openfl__$Vector_BoolVector)).__array));
		}
	}
	,copy: function() {
		return new openfl__$Vector_BoolVector(null,this.fixed,this.__array.slice());
	}
	,get: function(index) {
		if(index >= this.__array.length) {
			return false;
		} else {
			return this.__array[index];
		}
	}
	,indexOf: function(x,from) {
		if(from == null) {
			from = 0;
		}
		var _g1 = from;
		var _g = this.__array.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(this.__array[i] == x) {
				return i;
			}
		}
		return -1;
	}
	,insertAt: function(index,element) {
		if(!this.fixed || index < this.__array.length) {
			this.__array.splice(index,0,element);
		}
	}
	,iterator: function() {
		return HxOverrides.iter(this.__array);
	}
	,join: function(sep) {
		return this.__array.join(sep);
	}
	,lastIndexOf: function(x,from) {
		if(from == null) {
			from = 0;
		}
		var i = this.__array.length - 1;
		while(i >= from) {
			if(this.__array[i] == x) {
				return i;
			}
			--i;
		}
		return -1;
	}
	,pop: function() {
		if(!this.fixed) {
			return this.__array.pop();
		} else {
			return null;
		}
	}
	,push: function(x) {
		if(!this.fixed) {
			return this.__array.push(x);
		} else {
			return this.__array.length;
		}
	}
	,reverse: function() {
		this.__array.reverse();
	}
	,set: function(index,value) {
		if(!this.fixed || index < this.__array.length) {
			return this.__array[index] = value;
		} else {
			return value;
		}
	}
	,shift: function() {
		if(!this.fixed) {
			return this.__array.shift();
		} else {
			return null;
		}
	}
	,slice: function(startIndex,endIndex) {
		if(endIndex == null) {
			endIndex = 16777215;
		}
		if(startIndex == null) {
			startIndex = 0;
		}
		return new openfl__$Vector_BoolVector(null,null,this.__array.slice(startIndex,endIndex));
	}
	,sort: function(f) {
		this.__array.sort(f);
	}
	,splice: function(pos,len) {
		return new openfl__$Vector_BoolVector(null,null,this.__array.splice(pos,len));
	}
	,toString: function() {
		return this.__array.toString();
	}
	,unshift: function(x) {
		if(!this.fixed) {
			this.__array.unshift(x);
		}
	}
	,get_length: function() {
		return this.__array.length;
	}
	,set_length: function(value) {
		if(!this.fixed) {
			var currentLength = this.__array.length;
			if(value < 0) {
				value = 0;
			}
			if(value > currentLength) {
				var _g1 = currentLength;
				var _g = value;
				while(_g1 < _g) this.__array[_g1++] = false;
			} else {
				while(this.__array.length > value) this.__array.pop();
			}
		}
		return this.__array.length;
	}
	,__class__: openfl__$Vector_BoolVector
	,__properties__: {set_length:"set_length",get_length:"get_length"}
};
var openfl__$Vector_FloatVector = function(length,fixed,array) {
	if(array == null) {
		array = [];
	}
	this.__array = array;
	if(length != null) {
		this.set_length(length);
	}
	this.fixed = fixed == true;
};
$hxClasses["openfl._Vector.FloatVector"] = openfl__$Vector_FloatVector;
openfl__$Vector_FloatVector.__name__ = ["openfl","_Vector","FloatVector"];
openfl__$Vector_FloatVector.__interfaces__ = [openfl__$Vector_IVector];
openfl__$Vector_FloatVector.prototype = {
	fixed: null
	,__array: null
	,concat: function(a) {
		if(a == null) {
			return new openfl__$Vector_FloatVector(null,null,this.__array.slice());
		} else {
			return new openfl__$Vector_FloatVector(null,null,this.__array.concat((js_Boot.__cast(a , openfl__$Vector_FloatVector)).__array));
		}
	}
	,copy: function() {
		return new openfl__$Vector_FloatVector(null,this.fixed,this.__array.slice());
	}
	,get: function(index) {
		return this.__array[index];
	}
	,indexOf: function(x,from) {
		if(from == null) {
			from = 0;
		}
		var _g1 = from;
		var _g = this.__array.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(this.__array[i] == x) {
				return i;
			}
		}
		return -1;
	}
	,insertAt: function(index,element) {
		if(!this.fixed || index < this.__array.length) {
			this.__array.splice(index,0,element);
		}
	}
	,iterator: function() {
		return HxOverrides.iter(this.__array);
	}
	,join: function(sep) {
		return this.__array.join(sep);
	}
	,lastIndexOf: function(x,from) {
		if(from == null) {
			from = 0;
		}
		var i = this.__array.length - 1;
		while(i >= from) {
			if(this.__array[i] == x) {
				return i;
			}
			--i;
		}
		return -1;
	}
	,pop: function() {
		if(!this.fixed) {
			return this.__array.pop();
		} else {
			return null;
		}
	}
	,push: function(x) {
		if(!this.fixed) {
			return this.__array.push(x);
		} else {
			return this.__array.length;
		}
	}
	,reverse: function() {
		this.__array.reverse();
	}
	,set: function(index,value) {
		if(!this.fixed || index < this.__array.length) {
			return this.__array[index] = value;
		} else {
			return value;
		}
	}
	,shift: function() {
		if(!this.fixed) {
			return this.__array.shift();
		} else {
			return null;
		}
	}
	,slice: function(startIndex,endIndex) {
		if(endIndex == null) {
			endIndex = 16777215;
		}
		if(startIndex == null) {
			startIndex = 0;
		}
		return new openfl__$Vector_FloatVector(null,null,this.__array.slice(startIndex,endIndex));
	}
	,sort: function(f) {
		this.__array.sort(f);
	}
	,splice: function(pos,len) {
		return new openfl__$Vector_FloatVector(null,null,this.__array.splice(pos,len));
	}
	,toString: function() {
		return this.__array.toString();
	}
	,unshift: function(x) {
		if(!this.fixed) {
			this.__array.unshift(x);
		}
	}
	,get_length: function() {
		return this.__array.length;
	}
	,set_length: function(value) {
		if(!this.fixed) {
			var currentLength = this.__array.length;
			if(value < 0) {
				value = 0;
			}
			if(value > currentLength) {
				var _g1 = currentLength;
				var _g = value;
				while(_g1 < _g) this.__array[_g1++] = 0;
			} else {
				while(this.__array.length > value) this.__array.pop();
			}
		}
		return this.__array.length;
	}
	,__class__: openfl__$Vector_FloatVector
	,__properties__: {set_length:"set_length",get_length:"get_length"}
};
var openfl__$Vector_FunctionVector = function(length,fixed,array) {
	if(array == null) {
		array = [];
	}
	this.__array = array;
	if(length != null) {
		this.set_length(length);
	}
	this.fixed = fixed == true;
};
$hxClasses["openfl._Vector.FunctionVector"] = openfl__$Vector_FunctionVector;
openfl__$Vector_FunctionVector.__name__ = ["openfl","_Vector","FunctionVector"];
openfl__$Vector_FunctionVector.__interfaces__ = [openfl__$Vector_IVector];
openfl__$Vector_FunctionVector.prototype = {
	fixed: null
	,__array: null
	,concat: function(a) {
		if(a == null) {
			return new openfl__$Vector_FunctionVector(null,null,this.__array.slice());
		} else {
			return new openfl__$Vector_FunctionVector(null,null,this.__array.concat((js_Boot.__cast(a , openfl__$Vector_FunctionVector)).__array));
		}
	}
	,copy: function() {
		return new openfl__$Vector_FunctionVector(null,this.fixed,this.__array.slice());
	}
	,get: function(index) {
		if(index >= this.__array.length) {
			return null;
		} else {
			return this.__array[index];
		}
	}
	,indexOf: function(x,from) {
		if(from == null) {
			from = 0;
		}
		var _g1 = from;
		var _g = this.__array.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(Reflect.compareMethods(this.__array[i],x)) {
				return i;
			}
		}
		return -1;
	}
	,insertAt: function(index,element) {
		if(!this.fixed || index < this.__array.length) {
			this.__array.splice(index,0,element);
		}
	}
	,iterator: function() {
		return HxOverrides.iter(this.__array);
	}
	,join: function(sep) {
		return this.__array.join(sep);
	}
	,lastIndexOf: function(x,from) {
		if(from == null) {
			from = 0;
		}
		var i = this.__array.length - 1;
		while(i >= from) {
			if(Reflect.compareMethods(this.__array[i],x)) {
				return i;
			}
			--i;
		}
		return -1;
	}
	,pop: function() {
		if(!this.fixed) {
			return this.__array.pop();
		} else {
			return null;
		}
	}
	,push: function(x) {
		if(!this.fixed) {
			return this.__array.push(x);
		} else {
			return this.__array.length;
		}
	}
	,reverse: function() {
		this.__array.reverse();
	}
	,set: function(index,value) {
		if(!this.fixed || index < this.__array.length) {
			return this.__array[index] = value;
		} else {
			return value;
		}
	}
	,shift: function() {
		if(!this.fixed) {
			return this.__array.shift();
		} else {
			return null;
		}
	}
	,slice: function(startIndex,endIndex) {
		if(endIndex == null) {
			endIndex = 16777215;
		}
		if(startIndex == null) {
			startIndex = 0;
		}
		return new openfl__$Vector_FunctionVector(null,null,this.__array.slice(startIndex,endIndex));
	}
	,sort: function(f) {
		this.__array.sort(f);
	}
	,splice: function(pos,len) {
		return new openfl__$Vector_FunctionVector(null,null,this.__array.splice(pos,len));
	}
	,toString: function() {
		return this.__array.toString();
	}
	,unshift: function(x) {
		if(!this.fixed) {
			this.__array.unshift(x);
		}
	}
	,get_length: function() {
		return this.__array.length;
	}
	,set_length: function(value) {
		if(!this.fixed) {
			var currentLength = this.__array.length;
			if(value < 0) {
				value = 0;
			}
			if(value > currentLength) {
				var _g1 = currentLength;
				var _g = value;
				while(_g1 < _g) this.__array[_g1++] = null;
			} else {
				while(this.__array.length > value) this.__array.pop();
			}
		}
		return this.__array.length;
	}
	,__class__: openfl__$Vector_FunctionVector
	,__properties__: {set_length:"set_length",get_length:"get_length"}
};
var openfl__$Vector_IntVector = function(length,fixed,array) {
	if(array == null) {
		array = [];
	}
	this.__array = array;
	if(length != null) {
		this.set_length(length);
	}
	this.fixed = fixed == true;
};
$hxClasses["openfl._Vector.IntVector"] = openfl__$Vector_IntVector;
openfl__$Vector_IntVector.__name__ = ["openfl","_Vector","IntVector"];
openfl__$Vector_IntVector.__interfaces__ = [openfl__$Vector_IVector];
openfl__$Vector_IntVector.prototype = {
	fixed: null
	,__array: null
	,concat: function(a) {
		if(a == null) {
			return new openfl__$Vector_IntVector(null,null,this.__array.slice());
		} else {
			return new openfl__$Vector_IntVector(null,null,this.__array.concat((js_Boot.__cast(a , openfl__$Vector_IntVector)).__array));
		}
	}
	,copy: function() {
		return new openfl__$Vector_IntVector(null,this.fixed,this.__array.slice());
	}
	,get: function(index) {
		return this.__array[index];
	}
	,indexOf: function(x,from) {
		if(from == null) {
			from = 0;
		}
		var _g1 = from;
		var _g = this.__array.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(this.__array[i] == x) {
				return i;
			}
		}
		return -1;
	}
	,insertAt: function(index,element) {
		if(!this.fixed || index < this.__array.length) {
			this.__array.splice(index,0,element);
		}
	}
	,iterator: function() {
		return HxOverrides.iter(this.__array);
	}
	,join: function(sep) {
		return this.__array.join(sep);
	}
	,lastIndexOf: function(x,from) {
		if(from == null) {
			from = 0;
		}
		var i = this.__array.length - 1;
		while(i >= from) {
			if(this.__array[i] == x) {
				return i;
			}
			--i;
		}
		return -1;
	}
	,pop: function() {
		if(!this.fixed) {
			return this.__array.pop();
		} else {
			return null;
		}
	}
	,push: function(x) {
		if(!this.fixed) {
			return this.__array.push(x);
		} else {
			return this.__array.length;
		}
	}
	,reverse: function() {
		this.__array.reverse();
	}
	,set: function(index,value) {
		if(!this.fixed || index < this.__array.length) {
			return this.__array[index] = value;
		} else {
			return value;
		}
	}
	,shift: function() {
		if(!this.fixed) {
			return this.__array.shift();
		} else {
			return null;
		}
	}
	,slice: function(startIndex,endIndex) {
		if(endIndex == null) {
			endIndex = 16777215;
		}
		if(startIndex == null) {
			startIndex = 0;
		}
		return new openfl__$Vector_IntVector(null,null,this.__array.slice(startIndex,endIndex));
	}
	,sort: function(f) {
		this.__array.sort(f);
	}
	,splice: function(pos,len) {
		return new openfl__$Vector_IntVector(null,null,this.__array.splice(pos,len));
	}
	,toString: function() {
		return this.__array.toString();
	}
	,unshift: function(x) {
		if(!this.fixed) {
			this.__array.unshift(x);
		}
	}
	,get_length: function() {
		return this.__array.length;
	}
	,set_length: function(value) {
		if(!this.fixed) {
			var currentLength = this.__array.length;
			if(value < 0) {
				value = 0;
			}
			if(value > currentLength) {
				var _g1 = currentLength;
				var _g = value;
				while(_g1 < _g) this.__array[_g1++] = 0;
			} else {
				while(this.__array.length > value) this.__array.pop();
			}
		}
		return this.__array.length;
	}
	,__class__: openfl__$Vector_IntVector
	,__properties__: {set_length:"set_length",get_length:"get_length"}
};
var openfl__$Vector_ObjectVector = function(length,fixed,array) {
	if(array == null) {
		array = [];
	}
	this.__array = array;
	if(length != null) {
		this.set_length(length);
	}
	this.fixed = fixed == true;
};
$hxClasses["openfl._Vector.ObjectVector"] = openfl__$Vector_ObjectVector;
openfl__$Vector_ObjectVector.__name__ = ["openfl","_Vector","ObjectVector"];
openfl__$Vector_ObjectVector.__interfaces__ = [openfl__$Vector_IVector];
openfl__$Vector_ObjectVector.prototype = {
	fixed: null
	,__array: null
	,concat: function(a) {
		if(a == null) {
			return new openfl__$Vector_ObjectVector(null,null,this.__array.slice());
		} else {
			return new openfl__$Vector_ObjectVector(null,null,this.__array.concat((js_Boot.__cast(a , openfl__$Vector_ObjectVector)).__array));
		}
	}
	,copy: function() {
		return new openfl__$Vector_ObjectVector(null,null,this.__array.slice());
	}
	,get: function(index) {
		return this.__array[index];
	}
	,indexOf: function(x,from) {
		if(from == null) {
			from = 0;
		}
		var _g1 = from;
		var _g = this.__array.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(this.__array[i] == x) {
				return i;
			}
		}
		return -1;
	}
	,insertAt: function(index,element) {
		if(!this.fixed || index < this.__array.length) {
			this.__array.splice(index,0,element);
		}
	}
	,iterator: function() {
		return HxOverrides.iter(this.__array);
	}
	,join: function(sep) {
		return this.__array.join(sep);
	}
	,lastIndexOf: function(x,from) {
		if(from == null) {
			from = 0;
		}
		var i = this.__array.length - 1;
		while(i >= from) {
			if(this.__array[i] == x) {
				return i;
			}
			--i;
		}
		return -1;
	}
	,pop: function() {
		if(!this.fixed) {
			return this.__array.pop();
		} else {
			return null;
		}
	}
	,push: function(x) {
		if(!this.fixed) {
			return this.__array.push(x);
		} else {
			return this.__array.length;
		}
	}
	,reverse: function() {
		this.__array.reverse();
	}
	,set: function(index,value) {
		if(!this.fixed || index < this.__array.length) {
			return this.__array[index] = value;
		} else {
			return value;
		}
	}
	,shift: function() {
		if(!this.fixed) {
			return this.__array.shift();
		} else {
			return null;
		}
	}
	,slice: function(startIndex,endIndex) {
		if(endIndex == null) {
			endIndex = 16777215;
		}
		if(startIndex == null) {
			startIndex = 0;
		}
		return new openfl__$Vector_ObjectVector(null,null,this.__array.slice(startIndex,endIndex));
	}
	,sort: function(f) {
		this.__array.sort(f);
	}
	,splice: function(pos,len) {
		return new openfl__$Vector_ObjectVector(null,null,this.__array.splice(pos,len));
	}
	,toString: function() {
		return this.__array.toString();
	}
	,unshift: function(x) {
		if(!this.fixed) {
			this.__array.unshift(x);
		}
	}
	,get_length: function() {
		return this.__array.length;
	}
	,set_length: function(value) {
		if(!this.fixed) {
			var currentLength = this.__array.length;
			if(value < 0) {
				value = 0;
			}
			if(value > currentLength) {
				var _g1 = currentLength;
				var _g = value;
				while(_g1 < _g) {
					++_g1;
					this.__array.push(null);
				}
			} else {
				while(this.__array.length > value) this.__array.pop();
			}
		}
		return this.__array.length;
	}
	,__class__: openfl__$Vector_ObjectVector
	,__properties__: {set_length:"set_length",get_length:"get_length"}
};
var openfl__$internal_renderer_AbstractBlendModeManager = function() {
};
$hxClasses["openfl._internal.renderer.AbstractBlendModeManager"] = openfl__$internal_renderer_AbstractBlendModeManager;
openfl__$internal_renderer_AbstractBlendModeManager.__name__ = ["openfl","_internal","renderer","AbstractBlendModeManager"];
openfl__$internal_renderer_AbstractBlendModeManager.prototype = {
	setBlendMode: function(blendMode) {
	}
	,__class__: openfl__$internal_renderer_AbstractBlendModeManager
};
var openfl__$internal_renderer_AbstractFilterManager = function(renderSession) {
	this.renderSession = renderSession;
};
$hxClasses["openfl._internal.renderer.AbstractFilterManager"] = openfl__$internal_renderer_AbstractFilterManager;
openfl__$internal_renderer_AbstractFilterManager.__name__ = ["openfl","_internal","renderer","AbstractFilterManager"];
openfl__$internal_renderer_AbstractFilterManager.prototype = {
	renderSession: null
	,pushObject: function(object) {
		return null;
	}
	,popObject: function(object) {
	}
	,__class__: openfl__$internal_renderer_AbstractFilterManager
};
var openfl__$internal_renderer_AbstractMaskManager = function(renderSession) {
	this.renderSession = renderSession;
};
$hxClasses["openfl._internal.renderer.AbstractMaskManager"] = openfl__$internal_renderer_AbstractMaskManager;
openfl__$internal_renderer_AbstractMaskManager.__name__ = ["openfl","_internal","renderer","AbstractMaskManager"];
openfl__$internal_renderer_AbstractMaskManager.prototype = {
	renderSession: null
	,pushMask: function(mask) {
	}
	,pushObject: function(object,handleScrollRect) {
		if(handleScrollRect == null) {
			handleScrollRect = true;
		}
	}
	,pushRect: function(rect,transform) {
	}
	,popMask: function() {
	}
	,popObject: function(object,handleScrollRect) {
		if(handleScrollRect == null) {
			handleScrollRect = true;
		}
	}
	,popRect: function() {
	}
	,saveState: function() {
	}
	,restoreState: function() {
	}
	,__class__: openfl__$internal_renderer_AbstractMaskManager
};
var openfl__$internal_renderer_AbstractRenderer = function(stage) {
	this.stage = stage;
	this.width = stage.stageWidth;
	this.height = stage.stageHeight;
};
$hxClasses["openfl._internal.renderer.AbstractRenderer"] = openfl__$internal_renderer_AbstractRenderer;
openfl__$internal_renderer_AbstractRenderer.__name__ = ["openfl","_internal","renderer","AbstractRenderer"];
openfl__$internal_renderer_AbstractRenderer.prototype = {
	height: null
	,width: null
	,transparent: null
	,viewport: null
	,renderSession: null
	,stage: null
	,clear: function() {
	}
	,render: function() {
	}
	,resize: function(width,height) {
		this.width = width;
		this.height = height;
	}
	,__class__: openfl__$internal_renderer_AbstractRenderer
};
var openfl__$internal_renderer_AbstractShaderManager = function() {
};
$hxClasses["openfl._internal.renderer.AbstractShaderManager"] = openfl__$internal_renderer_AbstractShaderManager;
openfl__$internal_renderer_AbstractShaderManager.__name__ = ["openfl","_internal","renderer","AbstractShaderManager"];
openfl__$internal_renderer_AbstractShaderManager.prototype = {
	currentShader: null
	,defaultShader: null
	,setShader: function(shader) {
	}
	,__class__: openfl__$internal_renderer_AbstractShaderManager
};
var openfl__$internal_renderer_DrawCommandBuffer = function() {
	if(openfl__$internal_renderer_DrawCommandBuffer.empty == null) {
		this.types = [];
		this.b = [];
		this.i = [];
		this.f = [];
		this.o = [];
		this.ff = [];
		this.ii = [];
		this.copyOnWrite = true;
	} else {
		this.clear();
	}
};
$hxClasses["openfl._internal.renderer.DrawCommandBuffer"] = openfl__$internal_renderer_DrawCommandBuffer;
openfl__$internal_renderer_DrawCommandBuffer.__name__ = ["openfl","_internal","renderer","DrawCommandBuffer"];
openfl__$internal_renderer_DrawCommandBuffer.prototype = {
	types: null
	,b: null
	,copyOnWrite: null
	,f: null
	,ff: null
	,i: null
	,ii: null
	,o: null
	,append: function(other) {
		if(this.get_length() == 0) {
			this.types = other.types;
			this.b = other.b;
			this.i = other.i;
			this.f = other.f;
			this.o = other.o;
			this.ff = other.ff;
			this.ii = other.ii;
			this.copyOnWrite = other.copyOnWrite = true;
			return other;
		}
		var data = new openfl__$internal_renderer_DrawCommandReader(other);
		var _g = 0;
		var _g1 = other.types;
		while(_g < _g1.length) {
			var type = _g1[_g];
			++_g;
			switch(type[1]) {
			case 0:
				var c = data.readBeginBitmapFill();
				this.beginBitmapFill(openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_bitmap(c),openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_matrix(c),openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_repeat(c),openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_smooth(c));
				break;
			case 1:
				var c1 = data.readBeginFill();
				this.beginFill(openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$.get_color(c1),openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$.get_alpha(c1));
				break;
			case 2:
				var c2 = data.readBeginGradientFill();
				this.beginGradientFill(openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_type(c2),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_colors(c2),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_alphas(c2),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_ratios(c2),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_matrix(c2),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_spreadMethod(c2),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_interpolationMethod(c2),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_focalPointRatio(c2));
				break;
			case 3:
				var c3 = data.readCubicCurveTo();
				this.cubicCurveTo(openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlX1(c3),openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlY1(c3),openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlX2(c3),openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlY2(c3),openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_anchorX(c3),openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_anchorY(c3));
				break;
			case 4:
				var c4 = data.readCurveTo();
				this.curveTo(openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_controlX(c4),openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_controlY(c4),openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_anchorX(c4),openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_anchorY(c4));
				break;
			case 5:
				var c5 = data.readDrawCircle();
				this.drawCircle(openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_x(c5),openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_y(c5),openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_radius(c5));
				break;
			case 6:
				var c6 = data.readDrawEllipse();
				this.drawEllipse(openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_x(c6),openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_y(c6),openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_width(c6),openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_height(c6));
				break;
			case 7:
				var c7 = data.readDrawRect();
				this.drawRect(openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_x(c7),openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_y(c7),openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_width(c7),openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_height(c7));
				break;
			case 8:
				var c8 = data.readDrawRoundRect();
				this.drawRoundRect(openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_x(c8),openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_y(c8),openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_width(c8),openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_height(c8),openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_ellipseWidth(c8),openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_ellipseHeight(c8));
				break;
			case 10:
				var c9 = data.readDrawTriangles();
				this.drawTriangles(openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$.get_vertices(c9),openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$.get_indices(c9),openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$.get_uvtData(c9),openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$.get_culling(c9));
				break;
			case 11:
				data.readEndFill();
				this.endFill();
				break;
			case 12:
				var c10 = data.readLineBitmapStyle();
				this.lineBitmapStyle(openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$.get_bitmap(c10),openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$.get_matrix(c10),openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$.get_repeat(c10),openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$.get_smooth(c10));
				break;
			case 13:
				var c11 = data.readLineGradientStyle();
				this.lineGradientStyle(openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_type(c11),openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_colors(c11),openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_alphas(c11),openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_ratios(c11),openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_matrix(c11),openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_spreadMethod(c11),openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_interpolationMethod(c11),openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_focalPointRatio(c11));
				break;
			case 14:
				var c12 = data.readLineStyle();
				this.lineStyle(openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_thickness(c12),openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_color(c12),openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_alpha(c12),openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_pixelHinting(c12),openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_scaleMode(c12),openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_caps(c12),openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_joints(c12),openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_miterLimit(c12));
				break;
			case 15:
				var c13 = data.readLineTo();
				this.lineTo(openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.get_x(c13),openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.get_y(c13));
				break;
			case 16:
				var c14 = data.readMoveTo();
				this.moveTo(openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_x(c14),openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_y(c14));
				break;
			case 17:
				this.overrideMatrix(openfl__$internal_renderer__$DrawCommandReader_OverrideMatrixView_$Impl_$.get_matrix(data.readOverrideMatrix()));
				break;
			default:
			}
		}
		data.destroy();
		return other;
	}
	,beginBitmapFill: function(bitmap,matrix,repeat,smooth) {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.BEGIN_BITMAP_FILL);
		this.o.push(bitmap);
		this.o.push(matrix);
		this.b.push(repeat);
		this.b.push(smooth);
	}
	,beginFill: function(color,alpha) {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.BEGIN_FILL);
		this.i.push(color);
		this.f.push(alpha);
	}
	,beginGradientFill: function(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio) {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.BEGIN_GRADIENT_FILL);
		this.o.push(type);
		this.ii.push(colors);
		this.ff.push(alphas);
		this.ii.push(ratios);
		this.o.push(matrix);
		this.o.push(spreadMethod);
		this.o.push(interpolationMethod);
		this.f.push(focalPointRatio);
	}
	,clear: function() {
		this.types = openfl__$internal_renderer_DrawCommandBuffer.empty.types;
		this.b = openfl__$internal_renderer_DrawCommandBuffer.empty.b;
		this.i = openfl__$internal_renderer_DrawCommandBuffer.empty.i;
		this.f = openfl__$internal_renderer_DrawCommandBuffer.empty.f;
		this.o = openfl__$internal_renderer_DrawCommandBuffer.empty.o;
		this.ff = openfl__$internal_renderer_DrawCommandBuffer.empty.ff;
		this.ii = openfl__$internal_renderer_DrawCommandBuffer.empty.ii;
		this.copyOnWrite = true;
	}
	,copy: function() {
		var copy = new openfl__$internal_renderer_DrawCommandBuffer();
		copy.append(this);
		return copy;
	}
	,cubicCurveTo: function(controlX1,controlY1,controlX2,controlY2,anchorX,anchorY) {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.CUBIC_CURVE_TO);
		this.f.push(controlX1);
		this.f.push(controlY1);
		this.f.push(controlX2);
		this.f.push(controlY2);
		this.f.push(anchorX);
		this.f.push(anchorY);
	}
	,curveTo: function(controlX,controlY,anchorX,anchorY) {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.CURVE_TO);
		this.f.push(controlX);
		this.f.push(controlY);
		this.f.push(anchorX);
		this.f.push(anchorY);
	}
	,destroy: function() {
		this.clear();
		this.types = null;
		this.b = null;
		this.i = null;
		this.f = null;
		this.o = null;
		this.ff = null;
		this.ii = null;
	}
	,drawCircle: function(x,y,radius) {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.DRAW_CIRCLE);
		this.f.push(x);
		this.f.push(y);
		this.f.push(radius);
	}
	,drawEllipse: function(x,y,width,height) {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.DRAW_ELLIPSE);
		this.f.push(x);
		this.f.push(y);
		this.f.push(width);
		this.f.push(height);
	}
	,drawRect: function(x,y,width,height) {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.DRAW_RECT);
		this.f.push(x);
		this.f.push(y);
		this.f.push(width);
		this.f.push(height);
	}
	,drawRoundRect: function(x,y,width,height,ellipseWidth,ellipseHeight) {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.DRAW_ROUND_RECT);
		this.f.push(x);
		this.f.push(y);
		this.f.push(width);
		this.f.push(height);
		this.f.push(ellipseWidth);
		this.o.push(ellipseHeight);
	}
	,drawTriangles: function(vertices,indices,uvtData,culling) {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.DRAW_TRIANGLES);
		this.o.push(vertices);
		this.o.push(indices);
		this.o.push(uvtData);
		this.o.push(culling);
	}
	,endFill: function() {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.END_FILL);
	}
	,lineBitmapStyle: function(bitmap,matrix,repeat,smooth) {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.LINE_BITMAP_STYLE);
		this.o.push(bitmap);
		this.o.push(matrix);
		this.b.push(repeat);
		this.b.push(smooth);
	}
	,lineGradientStyle: function(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio) {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.LINE_GRADIENT_STYLE);
		this.o.push(type);
		this.ii.push(colors);
		this.ff.push(alphas);
		this.ii.push(ratios);
		this.o.push(matrix);
		this.o.push(spreadMethod);
		this.o.push(interpolationMethod);
		this.f.push(focalPointRatio);
	}
	,lineStyle: function(thickness,color,alpha,pixelHinting,scaleMode,caps,joints,miterLimit) {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.LINE_STYLE);
		this.o.push(thickness);
		this.i.push(color);
		this.f.push(alpha);
		this.b.push(pixelHinting);
		this.o.push(scaleMode);
		this.o.push(caps);
		this.o.push(joints);
		this.f.push(miterLimit);
	}
	,lineTo: function(x,y) {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.LINE_TO);
		this.f.push(x);
		this.f.push(y);
	}
	,moveTo: function(x,y) {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.MOVE_TO);
		this.f.push(x);
		this.f.push(y);
	}
	,prepareWrite: function() {
		if(this.copyOnWrite) {
			this.types = this.types.slice();
			this.b = this.b.slice();
			this.i = this.i.slice();
			this.f = this.f.slice();
			this.o = this.o.slice();
			this.ff = this.ff.slice();
			this.ii = this.ii.slice();
			this.copyOnWrite = false;
		}
	}
	,overrideMatrix: function(matrix) {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.OVERRIDE_MATRIX);
		this.o.push(matrix);
	}
	,get_length: function() {
		return this.types.length;
	}
	,__class__: openfl__$internal_renderer_DrawCommandBuffer
	,__properties__: {get_length:"get_length"}
};
var openfl__$internal_renderer_DrawCommandReader = function(buffer) {
	this.buffer = buffer;
	this.bPos = this.iPos = this.fPos = this.oPos = this.ffPos = this.iiPos = this.tsPos = 0;
	this.prev = openfl__$internal_renderer_DrawCommandType.UNKNOWN;
};
$hxClasses["openfl._internal.renderer.DrawCommandReader"] = openfl__$internal_renderer_DrawCommandReader;
openfl__$internal_renderer_DrawCommandReader.__name__ = ["openfl","_internal","renderer","DrawCommandReader"];
openfl__$internal_renderer_DrawCommandReader.prototype = {
	buffer: null
	,bPos: null
	,iiPos: null
	,iPos: null
	,ffPos: null
	,fPos: null
	,oPos: null
	,prev: null
	,tsPos: null
	,advance: function() {
		switch(this.prev[1]) {
		case 0:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 1:
			this.iPos += 1;
			this.fPos += 1;
			break;
		case 2:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 3:
			this.fPos += 6;
			break;
		case 4:
			this.fPos += 4;
			break;
		case 5:
			this.fPos += 3;
			break;
		case 6:
			this.fPos += 4;
			break;
		case 7:
			this.fPos += 4;
			break;
		case 8:
			this.fPos += 5;
			this.oPos += 1;
			break;
		case 10:
			this.oPos += 4;
			break;
		case 11:
			break;
		case 12:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 13:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 14:
			this.oPos += 4;
			this.iPos += 1;
			this.fPos += 2;
			this.bPos += 1;
			break;
		case 15:
			this.fPos += 2;
			break;
		case 16:
			this.fPos += 2;
			break;
		case 17:
			this.oPos += 1;
			break;
		default:
		}
	}
	,bool: function(index) {
		return this.buffer.b[this.bPos + index];
	}
	,destroy: function() {
		this.buffer = null;
		this.reset();
	}
	,fArr: function(index) {
		return this.buffer.ff[this.ffPos + index];
	}
	,'float': function(index) {
		return this.buffer.f[this.fPos + index];
	}
	,iArr: function(index) {
		return this.buffer.ii[this.iiPos + index];
	}
	,'int': function(index) {
		return this.buffer.i[this.iPos + index];
	}
	,obj: function(index) {
		return this.buffer.o[this.oPos + index];
	}
	,readBeginBitmapFill: function() {
		this.advance();
		this.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_BITMAP_FILL;
		return openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$._new(this);
	}
	,readBeginFill: function() {
		this.advance();
		this.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_FILL;
		return openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$._new(this);
	}
	,readBeginGradientFill: function() {
		this.advance();
		this.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_GRADIENT_FILL;
		return openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$._new(this);
	}
	,readCubicCurveTo: function() {
		this.advance();
		this.prev = openfl__$internal_renderer_DrawCommandType.CUBIC_CURVE_TO;
		return openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$._new(this);
	}
	,readCurveTo: function() {
		this.advance();
		this.prev = openfl__$internal_renderer_DrawCommandType.CURVE_TO;
		return openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$._new(this);
	}
	,readDrawCircle: function() {
		this.advance();
		this.prev = openfl__$internal_renderer_DrawCommandType.DRAW_CIRCLE;
		return openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$._new(this);
	}
	,readDrawEllipse: function() {
		this.advance();
		this.prev = openfl__$internal_renderer_DrawCommandType.DRAW_ELLIPSE;
		return openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$._new(this);
	}
	,readDrawRect: function() {
		this.advance();
		this.prev = openfl__$internal_renderer_DrawCommandType.DRAW_RECT;
		return openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$._new(this);
	}
	,readDrawRoundRect: function() {
		this.advance();
		this.prev = openfl__$internal_renderer_DrawCommandType.DRAW_ROUND_RECT;
		return openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$._new(this);
	}
	,readDrawTriangles: function() {
		this.advance();
		this.prev = openfl__$internal_renderer_DrawCommandType.DRAW_TRIANGLES;
		return openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$._new(this);
	}
	,readEndFill: function() {
		this.advance();
		this.prev = openfl__$internal_renderer_DrawCommandType.END_FILL;
		return openfl__$internal_renderer__$DrawCommandReader_EndFillView_$Impl_$._new(this);
	}
	,readLineBitmapStyle: function() {
		this.advance();
		this.prev = openfl__$internal_renderer_DrawCommandType.LINE_BITMAP_STYLE;
		return openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$._new(this);
	}
	,readLineGradientStyle: function() {
		this.advance();
		this.prev = openfl__$internal_renderer_DrawCommandType.LINE_GRADIENT_STYLE;
		return openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$._new(this);
	}
	,readLineStyle: function() {
		this.advance();
		this.prev = openfl__$internal_renderer_DrawCommandType.LINE_STYLE;
		return openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$._new(this);
	}
	,readLineTo: function() {
		this.advance();
		this.prev = openfl__$internal_renderer_DrawCommandType.LINE_TO;
		return openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$._new(this);
	}
	,readMoveTo: function() {
		this.advance();
		this.prev = openfl__$internal_renderer_DrawCommandType.MOVE_TO;
		return openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$._new(this);
	}
	,readOverrideMatrix: function() {
		this.advance();
		this.prev = openfl__$internal_renderer_DrawCommandType.OVERRIDE_MATRIX;
		return openfl__$internal_renderer__$DrawCommandReader_OverrideMatrixView_$Impl_$._new(this);
	}
	,reset: function() {
		this.bPos = this.iPos = this.fPos = this.oPos = this.ffPos = this.iiPos = this.tsPos = 0;
	}
	,skip: function(type) {
		this.advance();
		this.prev = type;
	}
	,__class__: openfl__$internal_renderer_DrawCommandReader
};
var openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.BeginBitmapFillView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","BeginBitmapFillView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.__properties__ = {get_smooth:"get_smooth",get_repeat:"get_repeat",get_matrix:"get_matrix",get_bitmap:"get_bitmap"}
openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$._new = function(d) {
	return d;
};
openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_bitmap = function(this1) {
	return this1.obj(0);
};
openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_matrix = function(this1) {
	return this1.obj(1);
};
openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_repeat = function(this1) {
	return this1.bool(0);
};
openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_smooth = function(this1) {
	return this1.bool(1);
};
var openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.BeginFillView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","BeginFillView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$.__properties__ = {get_alpha:"get_alpha",get_color:"get_color"}
openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$._new = function(d) {
	return d;
};
openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$.get_color = function(this1) {
	return this1["int"](0);
};
openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$.get_alpha = function(this1) {
	return this1["float"](0);
};
var openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.BeginGradientFillView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","BeginGradientFillView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.__properties__ = {get_focalPointRatio:"get_focalPointRatio",get_interpolationMethod:"get_interpolationMethod",get_spreadMethod:"get_spreadMethod",get_matrix:"get_matrix",get_ratios:"get_ratios",get_alphas:"get_alphas",get_colors:"get_colors",get_type:"get_type"}
openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$._new = function(d) {
	return d;
};
openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_type = function(this1) {
	return this1.obj(0);
};
openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_colors = function(this1) {
	return this1.iArr(0);
};
openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_alphas = function(this1) {
	return this1.fArr(0);
};
openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_ratios = function(this1) {
	return this1.iArr(1);
};
openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_matrix = function(this1) {
	return this1.obj(1);
};
openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_spreadMethod = function(this1) {
	return this1.obj(2);
};
openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_interpolationMethod = function(this1) {
	return this1.obj(3);
};
openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_focalPointRatio = function(this1) {
	return this1["float"](0);
};
var openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.CubicCurveToView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","CubicCurveToView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.__properties__ = {get_anchorY:"get_anchorY",get_anchorX:"get_anchorX",get_controlY2:"get_controlY2",get_controlX2:"get_controlX2",get_controlY1:"get_controlY1",get_controlX1:"get_controlX1"}
openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$._new = function(d) {
	return d;
};
openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlX1 = function(this1) {
	return this1["float"](0);
};
openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlY1 = function(this1) {
	return this1["float"](1);
};
openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlX2 = function(this1) {
	return this1["float"](2);
};
openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlY2 = function(this1) {
	return this1["float"](3);
};
openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_anchorX = function(this1) {
	return this1["float"](4);
};
openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_anchorY = function(this1) {
	return this1["float"](5);
};
var openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.CurveToView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","CurveToView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.__properties__ = {get_anchorY:"get_anchorY",get_anchorX:"get_anchorX",get_controlY:"get_controlY",get_controlX:"get_controlX"}
openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$._new = function(d) {
	return d;
};
openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_controlX = function(this1) {
	return this1["float"](0);
};
openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_controlY = function(this1) {
	return this1["float"](1);
};
openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_anchorX = function(this1) {
	return this1["float"](2);
};
openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_anchorY = function(this1) {
	return this1["float"](3);
};
var openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.DrawCircleView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","DrawCircleView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.__properties__ = {get_radius:"get_radius",get_y:"get_y",get_x:"get_x"}
openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$._new = function(d) {
	return d;
};
openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_x = function(this1) {
	return this1["float"](0);
};
openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_y = function(this1) {
	return this1["float"](1);
};
openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_radius = function(this1) {
	return this1["float"](2);
};
var openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.DrawEllipseView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","DrawEllipseView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.__properties__ = {get_height:"get_height",get_width:"get_width",get_y:"get_y",get_x:"get_x"}
openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$._new = function(d) {
	return d;
};
openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_x = function(this1) {
	return this1["float"](0);
};
openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_y = function(this1) {
	return this1["float"](1);
};
openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_width = function(this1) {
	return this1["float"](2);
};
openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_height = function(this1) {
	return this1["float"](3);
};
var openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.DrawRectView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","DrawRectView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.__properties__ = {get_height:"get_height",get_width:"get_width",get_y:"get_y",get_x:"get_x"}
openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$._new = function(d) {
	return d;
};
openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_x = function(this1) {
	return this1["float"](0);
};
openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_y = function(this1) {
	return this1["float"](1);
};
openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_width = function(this1) {
	return this1["float"](2);
};
openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_height = function(this1) {
	return this1["float"](3);
};
var openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.DrawRoundRectView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","DrawRoundRectView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.__properties__ = {get_ellipseHeight:"get_ellipseHeight",get_ellipseWidth:"get_ellipseWidth",get_height:"get_height",get_width:"get_width",get_y:"get_y",get_x:"get_x"}
openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$._new = function(d) {
	return d;
};
openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_x = function(this1) {
	return this1["float"](0);
};
openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_y = function(this1) {
	return this1["float"](1);
};
openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_width = function(this1) {
	return this1["float"](2);
};
openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_height = function(this1) {
	return this1["float"](3);
};
openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_ellipseWidth = function(this1) {
	return this1["float"](4);
};
openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_ellipseHeight = function(this1) {
	return this1.obj(0);
};
var openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.DrawTrianglesView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","DrawTrianglesView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$.__properties__ = {get_culling:"get_culling",get_uvtData:"get_uvtData",get_indices:"get_indices",get_vertices:"get_vertices"}
openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$._new = function(d) {
	return d;
};
openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$.get_vertices = function(this1) {
	return this1.obj(0);
};
openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$.get_indices = function(this1) {
	return this1.obj(1);
};
openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$.get_uvtData = function(this1) {
	return this1.obj(2);
};
openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$.get_culling = function(this1) {
	return this1.obj(3);
};
var openfl__$internal_renderer__$DrawCommandReader_EndFillView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.EndFillView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_EndFillView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_EndFillView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","EndFillView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_EndFillView_$Impl_$._new = function(d) {
	return d;
};
var openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.LineBitmapStyleView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","LineBitmapStyleView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$.__properties__ = {get_smooth:"get_smooth",get_repeat:"get_repeat",get_matrix:"get_matrix",get_bitmap:"get_bitmap"}
openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$._new = function(d) {
	return d;
};
openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$.get_bitmap = function(this1) {
	return this1.obj(0);
};
openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$.get_matrix = function(this1) {
	return this1.obj(1);
};
openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$.get_repeat = function(this1) {
	return this1.bool(0);
};
openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$.get_smooth = function(this1) {
	return this1.bool(1);
};
var openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.LineGradientStyleView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","LineGradientStyleView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.__properties__ = {get_focalPointRatio:"get_focalPointRatio",get_interpolationMethod:"get_interpolationMethod",get_spreadMethod:"get_spreadMethod",get_matrix:"get_matrix",get_ratios:"get_ratios",get_alphas:"get_alphas",get_colors:"get_colors",get_type:"get_type"}
openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$._new = function(d) {
	return d;
};
openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_type = function(this1) {
	return this1.obj(0);
};
openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_colors = function(this1) {
	return this1.iArr(0);
};
openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_alphas = function(this1) {
	return this1.fArr(0);
};
openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_ratios = function(this1) {
	return this1.iArr(1);
};
openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_matrix = function(this1) {
	return this1.obj(1);
};
openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_spreadMethod = function(this1) {
	return this1.obj(2);
};
openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_interpolationMethod = function(this1) {
	return this1.obj(3);
};
openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_focalPointRatio = function(this1) {
	return this1["float"](0);
};
var openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.LineStyleView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","LineStyleView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.__properties__ = {get_miterLimit:"get_miterLimit",get_joints:"get_joints",get_caps:"get_caps",get_scaleMode:"get_scaleMode",get_pixelHinting:"get_pixelHinting",get_alpha:"get_alpha",get_color:"get_color",get_thickness:"get_thickness"}
openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$._new = function(d) {
	return d;
};
openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_thickness = function(this1) {
	return this1.obj(0);
};
openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_color = function(this1) {
	return this1["int"](0);
};
openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_alpha = function(this1) {
	return this1["float"](0);
};
openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_pixelHinting = function(this1) {
	return this1.bool(0);
};
openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_scaleMode = function(this1) {
	return this1.obj(1);
};
openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_caps = function(this1) {
	return this1.obj(2);
};
openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_joints = function(this1) {
	return this1.obj(3);
};
openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_miterLimit = function(this1) {
	return this1["float"](1);
};
var openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.LineToView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","LineToView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.__properties__ = {get_y:"get_y",get_x:"get_x"}
openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$._new = function(d) {
	return d;
};
openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.get_x = function(this1) {
	return this1["float"](0);
};
openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.get_y = function(this1) {
	return this1["float"](1);
};
var openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.MoveToView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","MoveToView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.__properties__ = {get_y:"get_y",get_x:"get_x"}
openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$._new = function(d) {
	return d;
};
openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_x = function(this1) {
	return this1["float"](0);
};
openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_y = function(this1) {
	return this1["float"](1);
};
var openfl__$internal_renderer__$DrawCommandReader_OverrideMatrixView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.OverrideMatrixView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_OverrideMatrixView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_OverrideMatrixView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","OverrideMatrixView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_OverrideMatrixView_$Impl_$.__properties__ = {get_matrix:"get_matrix"}
openfl__$internal_renderer__$DrawCommandReader_OverrideMatrixView_$Impl_$._new = function(d) {
	return d;
};
openfl__$internal_renderer__$DrawCommandReader_OverrideMatrixView_$Impl_$.get_matrix = function(this1) {
	return this1.obj(0);
};
var openfl__$internal_renderer_DrawCommandType = $hxClasses["openfl._internal.renderer.DrawCommandType"] = { __ename__ : ["openfl","_internal","renderer","DrawCommandType"], __constructs__ : ["BEGIN_BITMAP_FILL","BEGIN_FILL","BEGIN_GRADIENT_FILL","CUBIC_CURVE_TO","CURVE_TO","DRAW_CIRCLE","DRAW_ELLIPSE","DRAW_RECT","DRAW_ROUND_RECT","DRAW_TILES","DRAW_TRIANGLES","END_FILL","LINE_BITMAP_STYLE","LINE_GRADIENT_STYLE","LINE_STYLE","LINE_TO","MOVE_TO","OVERRIDE_MATRIX","UNKNOWN"] };
openfl__$internal_renderer_DrawCommandType.BEGIN_BITMAP_FILL = ["BEGIN_BITMAP_FILL",0];
openfl__$internal_renderer_DrawCommandType.BEGIN_BITMAP_FILL.toString = $estr;
openfl__$internal_renderer_DrawCommandType.BEGIN_BITMAP_FILL.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.BEGIN_FILL = ["BEGIN_FILL",1];
openfl__$internal_renderer_DrawCommandType.BEGIN_FILL.toString = $estr;
openfl__$internal_renderer_DrawCommandType.BEGIN_FILL.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.BEGIN_GRADIENT_FILL = ["BEGIN_GRADIENT_FILL",2];
openfl__$internal_renderer_DrawCommandType.BEGIN_GRADIENT_FILL.toString = $estr;
openfl__$internal_renderer_DrawCommandType.BEGIN_GRADIENT_FILL.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.CUBIC_CURVE_TO = ["CUBIC_CURVE_TO",3];
openfl__$internal_renderer_DrawCommandType.CUBIC_CURVE_TO.toString = $estr;
openfl__$internal_renderer_DrawCommandType.CUBIC_CURVE_TO.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.CURVE_TO = ["CURVE_TO",4];
openfl__$internal_renderer_DrawCommandType.CURVE_TO.toString = $estr;
openfl__$internal_renderer_DrawCommandType.CURVE_TO.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.DRAW_CIRCLE = ["DRAW_CIRCLE",5];
openfl__$internal_renderer_DrawCommandType.DRAW_CIRCLE.toString = $estr;
openfl__$internal_renderer_DrawCommandType.DRAW_CIRCLE.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.DRAW_ELLIPSE = ["DRAW_ELLIPSE",6];
openfl__$internal_renderer_DrawCommandType.DRAW_ELLIPSE.toString = $estr;
openfl__$internal_renderer_DrawCommandType.DRAW_ELLIPSE.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.DRAW_RECT = ["DRAW_RECT",7];
openfl__$internal_renderer_DrawCommandType.DRAW_RECT.toString = $estr;
openfl__$internal_renderer_DrawCommandType.DRAW_RECT.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.DRAW_ROUND_RECT = ["DRAW_ROUND_RECT",8];
openfl__$internal_renderer_DrawCommandType.DRAW_ROUND_RECT.toString = $estr;
openfl__$internal_renderer_DrawCommandType.DRAW_ROUND_RECT.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.DRAW_TILES = ["DRAW_TILES",9];
openfl__$internal_renderer_DrawCommandType.DRAW_TILES.toString = $estr;
openfl__$internal_renderer_DrawCommandType.DRAW_TILES.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.DRAW_TRIANGLES = ["DRAW_TRIANGLES",10];
openfl__$internal_renderer_DrawCommandType.DRAW_TRIANGLES.toString = $estr;
openfl__$internal_renderer_DrawCommandType.DRAW_TRIANGLES.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.END_FILL = ["END_FILL",11];
openfl__$internal_renderer_DrawCommandType.END_FILL.toString = $estr;
openfl__$internal_renderer_DrawCommandType.END_FILL.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.LINE_BITMAP_STYLE = ["LINE_BITMAP_STYLE",12];
openfl__$internal_renderer_DrawCommandType.LINE_BITMAP_STYLE.toString = $estr;
openfl__$internal_renderer_DrawCommandType.LINE_BITMAP_STYLE.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.LINE_GRADIENT_STYLE = ["LINE_GRADIENT_STYLE",13];
openfl__$internal_renderer_DrawCommandType.LINE_GRADIENT_STYLE.toString = $estr;
openfl__$internal_renderer_DrawCommandType.LINE_GRADIENT_STYLE.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.LINE_STYLE = ["LINE_STYLE",14];
openfl__$internal_renderer_DrawCommandType.LINE_STYLE.toString = $estr;
openfl__$internal_renderer_DrawCommandType.LINE_STYLE.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.LINE_TO = ["LINE_TO",15];
openfl__$internal_renderer_DrawCommandType.LINE_TO.toString = $estr;
openfl__$internal_renderer_DrawCommandType.LINE_TO.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.MOVE_TO = ["MOVE_TO",16];
openfl__$internal_renderer_DrawCommandType.MOVE_TO.toString = $estr;
openfl__$internal_renderer_DrawCommandType.MOVE_TO.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.OVERRIDE_MATRIX = ["OVERRIDE_MATRIX",17];
openfl__$internal_renderer_DrawCommandType.OVERRIDE_MATRIX.toString = $estr;
openfl__$internal_renderer_DrawCommandType.OVERRIDE_MATRIX.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.UNKNOWN = ["UNKNOWN",18];
openfl__$internal_renderer_DrawCommandType.UNKNOWN.toString = $estr;
openfl__$internal_renderer_DrawCommandType.UNKNOWN.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.__empty_constructs__ = [openfl__$internal_renderer_DrawCommandType.BEGIN_BITMAP_FILL,openfl__$internal_renderer_DrawCommandType.BEGIN_FILL,openfl__$internal_renderer_DrawCommandType.BEGIN_GRADIENT_FILL,openfl__$internal_renderer_DrawCommandType.CUBIC_CURVE_TO,openfl__$internal_renderer_DrawCommandType.CURVE_TO,openfl__$internal_renderer_DrawCommandType.DRAW_CIRCLE,openfl__$internal_renderer_DrawCommandType.DRAW_ELLIPSE,openfl__$internal_renderer_DrawCommandType.DRAW_RECT,openfl__$internal_renderer_DrawCommandType.DRAW_ROUND_RECT,openfl__$internal_renderer_DrawCommandType.DRAW_TILES,openfl__$internal_renderer_DrawCommandType.DRAW_TRIANGLES,openfl__$internal_renderer_DrawCommandType.END_FILL,openfl__$internal_renderer_DrawCommandType.LINE_BITMAP_STYLE,openfl__$internal_renderer_DrawCommandType.LINE_GRADIENT_STYLE,openfl__$internal_renderer_DrawCommandType.LINE_STYLE,openfl__$internal_renderer_DrawCommandType.LINE_TO,openfl__$internal_renderer_DrawCommandType.MOVE_TO,openfl__$internal_renderer_DrawCommandType.OVERRIDE_MATRIX,openfl__$internal_renderer_DrawCommandType.UNKNOWN];
var openfl__$internal_renderer_RenderSession = function() {
	this.activeTextures = 0;
	this.allowSmoothing = true;
};
$hxClasses["openfl._internal.renderer.RenderSession"] = openfl__$internal_renderer_RenderSession;
openfl__$internal_renderer_RenderSession.__name__ = ["openfl","_internal","renderer","RenderSession"];
openfl__$internal_renderer_RenderSession.prototype = {
	allowSmoothing: null
	,cairo: null
	,context: null
	,element: null
	,gl: null
	,renderer: null
	,roundPixels: null
	,transformProperty: null
	,transformOriginProperty: null
	,upscaled: null
	,vendorPrefix: null
	,z: null
	,projectionMatrix: null
	,drawCount: null
	,currentBlendMode: null
	,activeTextures: null
	,blendModeManager: null
	,filterManager: null
	,maskManager: null
	,shaderManager: null
	,__class__: openfl__$internal_renderer_RenderSession
};
var openfl__$internal_renderer_cairo_CairoBitmap = function() { };
$hxClasses["openfl._internal.renderer.cairo.CairoBitmap"] = openfl__$internal_renderer_cairo_CairoBitmap;
openfl__$internal_renderer_cairo_CairoBitmap.__name__ = ["openfl","_internal","renderer","cairo","CairoBitmap"];
openfl__$internal_renderer_cairo_CairoBitmap.render = function(bitmap,renderSession) {
	if(!bitmap.__renderable || bitmap.__worldAlpha <= 0) {
		return;
	}
	if(bitmap.bitmapData != null && bitmap.bitmapData.__isValid) {
		renderSession.maskManager.pushObject(bitmap);
		var transform = bitmap.__renderTransform;
		if(renderSession.roundPixels) {
			var matrix = transform.__toMatrix3();
			matrix.tx = Math.round(matrix.tx);
			matrix.ty = Math.round(matrix.ty);
		} else {
			transform.__toMatrix3();
		}
		if(bitmap.bitmapData.getSurface() != null) {
			if(renderSession.allowSmoothing && bitmap.smoothing) {
				1;
			} else {
				3;
			}
		}
		renderSession.maskManager.popObject(bitmap);
	}
};
var openfl__$internal_renderer_cairo_CairoBlendModeManager = function(renderSession) {
	openfl__$internal_renderer_AbstractBlendModeManager.call(this);
	this.renderSession = renderSession;
};
$hxClasses["openfl._internal.renderer.cairo.CairoBlendModeManager"] = openfl__$internal_renderer_cairo_CairoBlendModeManager;
openfl__$internal_renderer_cairo_CairoBlendModeManager.__name__ = ["openfl","_internal","renderer","cairo","CairoBlendModeManager"];
openfl__$internal_renderer_cairo_CairoBlendModeManager.__super__ = openfl__$internal_renderer_AbstractBlendModeManager;
openfl__$internal_renderer_cairo_CairoBlendModeManager.prototype = $extend(openfl__$internal_renderer_AbstractBlendModeManager.prototype,{
	currentBlendMode: null
	,renderSession: null
	,setBlendMode: function(blendMode) {
		if(this.currentBlendMode == blendMode) {
			return;
		}
		this.currentBlendMode = blendMode;
		switch(blendMode) {
		case 0:
			break;
		case 1:
			break;
		case 2:
			break;
		case 3:
			break;
		case 4:
			break;
		case 5:
			break;
		case 6:
			break;
		case 7:
			break;
		case 8:
			break;
		case 9:
			break;
		case 10:
			break;
		case 11:
			break;
		case 12:
			break;
		case 13:
			break;
		case 14:
			break;
		default:
		}
	}
	,__class__: openfl__$internal_renderer_cairo_CairoBlendModeManager
});
var openfl__$internal_renderer_cairo_CairoDisplayObject = function() { };
$hxClasses["openfl._internal.renderer.cairo.CairoDisplayObject"] = openfl__$internal_renderer_cairo_CairoDisplayObject;
openfl__$internal_renderer_cairo_CairoDisplayObject.__name__ = ["openfl","_internal","renderer","cairo","CairoDisplayObject"];
openfl__$internal_renderer_cairo_CairoDisplayObject.render = function(displayObject,renderSession) {
};
var openfl__$internal_renderer_cairo_CairoGraphics = function() { };
$hxClasses["openfl._internal.renderer.cairo.CairoGraphics"] = openfl__$internal_renderer_cairo_CairoGraphics;
openfl__$internal_renderer_cairo_CairoGraphics.__name__ = ["openfl","_internal","renderer","cairo","CairoGraphics"];
openfl__$internal_renderer_cairo_CairoGraphics.closePath = function(strokeBefore) {
	if(strokeBefore == null) {
		strokeBefore = false;
	}
	if(openfl__$internal_renderer_cairo_CairoGraphics.strokePattern == null) {
		return;
	}
};
openfl__$internal_renderer_cairo_CairoGraphics.createGradientPattern = function(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio) {
	var pattern = null;
	switch(type) {
	case 0:
		if(matrix == null) {
			matrix = new openfl_geom_Matrix();
		}
		var point1 = matrix.transformPoint(new openfl_geom_Point(-819.2,0));
		var point2 = matrix.transformPoint(new openfl_geom_Point(819.2,0));
		point1.x += openfl__$internal_renderer_cairo_CairoGraphics.graphics.__bounds.x;
		point2.x += openfl__$internal_renderer_cairo_CairoGraphics.graphics.__bounds.x;
		point1.y += openfl__$internal_renderer_cairo_CairoGraphics.graphics.__bounds.y;
		point2.y += openfl__$internal_renderer_cairo_CairoGraphics.graphics.__bounds.y;
		pattern = lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.createLinear(point1.x,point1.y,point2.x,point2.y);
		break;
	case 1:
		if(matrix == null) {
			matrix = new openfl_geom_Matrix();
		}
		var x = matrix.tx + openfl__$internal_renderer_cairo_CairoGraphics.graphics.__bounds.x;
		var y = matrix.ty + openfl__$internal_renderer_cairo_CairoGraphics.graphics.__bounds.y;
		pattern = lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.createRadial(x,y,0,x,y,(matrix.transformPoint(new openfl_geom_Point(1638.4,0)).x - matrix.tx) / 2);
		break;
	}
	var _g1 = 0;
	var _g = colors.length;
	while(_g1 < _g) {
		var i = _g1++;
		var ratio = ratios[i] / 255;
		if(ratio < 0) {
			ratio = 0;
		}
		if(ratio > 1) {
			ratio = 1;
		}
	}
	var mat = lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.get_matrix(pattern);
	mat.tx = openfl__$internal_renderer_cairo_CairoGraphics.bounds.x;
	mat.ty = openfl__$internal_renderer_cairo_CairoGraphics.bounds.y;
	return pattern;
};
openfl__$internal_renderer_cairo_CairoGraphics.createImagePattern = function(bitmapFill,matrix,bitmapRepeat,smooth) {
	var pattern = lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.createForSurface(bitmapFill.getSurface());
	if(smooth && openfl__$internal_renderer_cairo_CairoGraphics.allowSmoothing) {
		1;
	} else {
		3;
	}
	openfl__$internal_renderer_cairo_CairoGraphics.fillPatternMatrix = matrix;
	return pattern;
};
openfl__$internal_renderer_cairo_CairoGraphics.drawRoundRect = function(x,y,width,height,ellipseWidth,ellipseHeight) {
	if(ellipseHeight == null) {
		ellipseHeight = ellipseWidth;
	}
	ellipseWidth *= 0.5;
	ellipseHeight *= 0.5;
	if(ellipseWidth > width / 2) {
		ellipseWidth = width / 2;
	}
	if(ellipseHeight > height / 2) {
		ellipseHeight = height / 2;
	}
	var xe = x + width;
	var ye = y + height;
	var cx1 = -ellipseWidth + ellipseWidth * openfl__$internal_renderer_cairo_CairoGraphics.SIN45;
	var cx2 = -ellipseWidth + ellipseWidth * openfl__$internal_renderer_cairo_CairoGraphics.TAN22;
	var cy1 = -ellipseHeight + ellipseHeight * openfl__$internal_renderer_cairo_CairoGraphics.SIN45;
	var cy2 = -ellipseHeight + ellipseHeight * openfl__$internal_renderer_cairo_CairoGraphics.TAN22;
	openfl__$internal_renderer_cairo_CairoGraphics.quadraticCurveTo(xe,ye + cy2,xe + cx1,ye + cy1);
	openfl__$internal_renderer_cairo_CairoGraphics.quadraticCurveTo(xe + cx2,ye,xe - ellipseWidth,ye);
	openfl__$internal_renderer_cairo_CairoGraphics.quadraticCurveTo(x - cx2,ye,x - cx1,ye + cy1);
	openfl__$internal_renderer_cairo_CairoGraphics.quadraticCurveTo(x,ye + cy2,x,ye - ellipseHeight);
	openfl__$internal_renderer_cairo_CairoGraphics.quadraticCurveTo(x,y - cy2,x - cx1,y - cy1);
	openfl__$internal_renderer_cairo_CairoGraphics.quadraticCurveTo(x - cx2,y,x + ellipseWidth,y);
	openfl__$internal_renderer_cairo_CairoGraphics.quadraticCurveTo(xe + cx2,y,xe + cx1,y - cy1);
	openfl__$internal_renderer_cairo_CairoGraphics.quadraticCurveTo(xe,y - cy2,xe,y + ellipseHeight);
};
openfl__$internal_renderer_cairo_CairoGraphics.endFill = function() {
	openfl__$internal_renderer_cairo_CairoGraphics.playCommands(openfl__$internal_renderer_cairo_CairoGraphics.fillCommands,false);
	openfl__$internal_renderer_cairo_CairoGraphics.fillCommands.clear();
};
openfl__$internal_renderer_cairo_CairoGraphics.endStroke = function() {
	openfl__$internal_renderer_cairo_CairoGraphics.playCommands(openfl__$internal_renderer_cairo_CairoGraphics.strokeCommands,true);
	openfl__$internal_renderer_cairo_CairoGraphics.strokeCommands.clear();
};
openfl__$internal_renderer_cairo_CairoGraphics.hitTest = function(graphics,x,y) {
	return false;
};
openfl__$internal_renderer_cairo_CairoGraphics.isCCW = function(x1,y1,x2,y2,x3,y3) {
	return (x2 - x1) * (y3 - y1) - (y2 - y1) * (x3 - x1) < 0;
};
openfl__$internal_renderer_cairo_CairoGraphics.normalizeUVT = function(uvt,skipT) {
	if(skipT == null) {
		skipT = false;
	}
	var max = -Infinity;
	var tmp = -Infinity;
	var len = uvt.get_length();
	var _g1 = 1;
	var _g = len + 1;
	while(_g1 < _g) {
		var t = _g1++;
		if(skipT && t % 3 == 0) {
			continue;
		}
		tmp = uvt.get(t - 1);
		if(max < tmp) {
			max = tmp;
		}
	}
	if(!skipT) {
		return { max : max, uvt : uvt};
	}
	var result = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
	var _g11 = 1;
	var _g2 = len + 1;
	while(_g11 < _g2) {
		var t1 = _g11++;
		if(skipT && t1 % 3 == 0) {
			continue;
		}
		result.push(uvt.get(t1 - 1));
	}
	return { max : max, uvt : result};
};
openfl__$internal_renderer_cairo_CairoGraphics.playCommands = function(commands,stroke) {
	if(stroke == null) {
		stroke = false;
	}
	if(commands.get_length() == 0) {
		return;
	}
	openfl__$internal_renderer_cairo_CairoGraphics.bounds = openfl__$internal_renderer_cairo_CairoGraphics.graphics.__bounds;
	var offsetX = openfl__$internal_renderer_cairo_CairoGraphics.bounds.x;
	var offsetY = openfl__$internal_renderer_cairo_CairoGraphics.bounds.y;
	var positionX = 0.0;
	var positionY = 0.0;
	var closeGap = false;
	var startX = 0.0;
	var startY = 0.0;
	var hasPath = false;
	var data = new openfl__$internal_renderer_DrawCommandReader(commands);
	var _g = 0;
	var _g1 = commands.types;
	try {
		while(_g < _g1.length) {
			var type = _g1[_g];
			++_g;
			switch(type[1]) {
			case 0:
				var c = data.readBeginBitmapFill();
				openfl__$internal_renderer_cairo_CairoGraphics.fillPattern = openfl__$internal_renderer_cairo_CairoGraphics.createImagePattern(openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_bitmap(c),openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_matrix(c),openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_repeat(c),openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_smooth(c));
				openfl__$internal_renderer_cairo_CairoGraphics.bitmapFill = openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_bitmap(c);
				openfl__$internal_renderer_cairo_CairoGraphics.bitmapRepeat = openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_repeat(c);
				openfl__$internal_renderer_cairo_CairoGraphics.hasFill = true;
				break;
			case 1:
				var c1 = data.readBeginFill();
				if(openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$.get_alpha(c1) < 0.005) {
					openfl__$internal_renderer_cairo_CairoGraphics.hasFill = false;
				} else {
					if(openfl__$internal_renderer_cairo_CairoGraphics.fillPattern != null) {
						openfl__$internal_renderer_cairo_CairoGraphics.fillPatternMatrix = null;
					}
					openfl__$internal_renderer_cairo_CairoGraphics.fillPattern = lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.createRGBA(((openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$.get_color(c1) & 16711680) >>> 16) / 255,((openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$.get_color(c1) & 65280) >>> 8) / 255,(openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$.get_color(c1) & 255) / 255,openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$.get_alpha(c1));
					openfl__$internal_renderer_cairo_CairoGraphics.hasFill = true;
				}
				openfl__$internal_renderer_cairo_CairoGraphics.bitmapFill = null;
				break;
			case 2:
				var c2 = data.readBeginGradientFill();
				if(openfl__$internal_renderer_cairo_CairoGraphics.fillPattern != null) {
					openfl__$internal_renderer_cairo_CairoGraphics.fillPatternMatrix = null;
				}
				openfl__$internal_renderer_cairo_CairoGraphics.fillPattern = openfl__$internal_renderer_cairo_CairoGraphics.createGradientPattern(openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_type(c2),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_colors(c2),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_alphas(c2),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_ratios(c2),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_matrix(c2),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_spreadMethod(c2),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_interpolationMethod(c2),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_focalPointRatio(c2));
				openfl__$internal_renderer_cairo_CairoGraphics.hasFill = true;
				openfl__$internal_renderer_cairo_CairoGraphics.bitmapFill = null;
				break;
			case 3:
				var c3 = data.readCubicCurveTo();
				hasPath = true;
				openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlX1(c3);
				openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlY1(c3);
				openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlX2(c3);
				openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlY2(c3);
				openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_anchorX(c3);
				openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_anchorY(c3);
				break;
			case 4:
				var c4 = data.readCurveTo();
				hasPath = true;
				openfl__$internal_renderer_cairo_CairoGraphics.quadraticCurveTo(openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_controlX(c4) - offsetX,openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_controlY(c4) - offsetY,openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_anchorX(c4) - offsetX,openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_anchorY(c4) - offsetY);
				break;
			case 5:
				var c5 = data.readDrawCircle();
				hasPath = true;
				openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_x(c5);
				openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_radius(c5);
				openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_y(c5);
				openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_x(c5);
				openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_y(c5);
				openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_radius(c5);
				break;
			case 6:
				var c6 = data.readDrawEllipse();
				hasPath = true;
				var x = openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_x(c6);
				var y = openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_y(c6);
				var width = openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_width(c6);
				var height = openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_height(c6);
				x -= offsetX;
				y -= offsetY;
				break;
			case 7:
				var c7 = data.readDrawRect();
				hasPath = true;
				openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_x(c7);
				openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_y(c7);
				openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_width(c7);
				openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_height(c7);
				break;
			case 8:
				var c8 = data.readDrawRoundRect();
				hasPath = true;
				openfl__$internal_renderer_cairo_CairoGraphics.drawRoundRect(openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_x(c8) - offsetX,openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_y(c8) - offsetY,openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_width(c8),openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_height(c8),openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_ellipseWidth(c8),openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_ellipseHeight(c8));
				break;
			case 10:
				var c9 = data.readDrawTriangles();
				var v = openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$.get_vertices(c9);
				var ind = openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$.get_indices(c9);
				var uvt = openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$.get_uvtData(c9);
				var colorFill = openfl__$internal_renderer_cairo_CairoGraphics.bitmapFill == null;
				if(colorFill && uvt != null) {
					throw "__break__";
				}
				var width1 = 0;
				var height1 = 0;
				var currentMatrix = openfl__$internal_renderer_cairo_CairoGraphics.graphics.__renderTransform.__toMatrix3();
				if(!colorFill) {
					if(uvt == null) {
						uvt = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
						var _g3 = 0;
						var _g2 = v.get_length() / 2 | 0;
						while(_g3 < _g2) {
							var i = _g3++;
							uvt.push(v.get(i * 2) / openfl__$internal_renderer_cairo_CairoGraphics.bitmapFill.width);
							uvt.push(v.get(i * 2 + 1) / openfl__$internal_renderer_cairo_CairoGraphics.bitmapFill.height);
						}
					}
					var normalizedUVT = openfl__$internal_renderer_cairo_CairoGraphics.normalizeUVT(uvt,openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$.get_uvtData(c9).get_length() != v.get_length());
					uvt = normalizedUVT.uvt;
					if(normalizedUVT.max > 1) {
						width1 = openfl__$internal_renderer_cairo_CairoGraphics.bounds.width | 0;
						height1 = openfl__$internal_renderer_cairo_CairoGraphics.bounds.height | 0;
					} else {
						width1 = openfl__$internal_renderer_cairo_CairoGraphics.bitmapFill.width;
						height1 = openfl__$internal_renderer_cairo_CairoGraphics.bitmapFill.height;
					}
				}
				var i1 = 0;
				var l = ind.get_length();
				var a_;
				var b_;
				var c_;
				var iax;
				var iay;
				var ibx;
				var iby;
				var icx;
				var icy;
				var x1;
				var y1;
				var x2;
				var y2;
				var x3;
				var y3;
				var uvx1;
				var uvy1;
				var uvx2;
				var uvy2;
				var uvx3;
				var uvy3;
				var denom;
				var t1;
				var t2;
				var t3;
				var t4;
				var dx;
				var dy;
				while(i1 < l) {
					a_ = i1;
					b_ = i1 + 1;
					c_ = i1 + 2;
					iax = ind.get(a_) * 2;
					iay = ind.get(a_) * 2 + 1;
					ibx = ind.get(b_) * 2;
					iby = ind.get(b_) * 2 + 1;
					icx = ind.get(c_) * 2;
					icy = ind.get(c_) * 2 + 1;
					x1 = v.get(iax);
					y1 = v.get(iay);
					x2 = v.get(ibx);
					y2 = v.get(iby);
					x3 = v.get(icx);
					y3 = v.get(icy);
					switch(openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$.get_culling(c9)) {
					case 0:
						if((x2 - x1) * (y3 - y1) - (y2 - y1) * (x3 - x1) < 0) {
							i1 += 3;
							continue;
						}
						break;
					case 2:
						if(!((x2 - x1) * (y3 - y1) - (y2 - y1) * (x3 - x1) < 0)) {
							i1 += 3;
							continue;
						}
						break;
					default:
					}
					if(colorFill) {
						i1 += 3;
						continue;
					}
					openfl__$internal_renderer_cairo_CairoGraphics.graphics.__renderTransform.__toMatrix3();
					uvx1 = uvt.get(iax) * width1;
					uvx2 = uvt.get(ibx) * width1;
					uvx3 = uvt.get(icx) * width1;
					uvy1 = uvt.get(iay) * height1;
					uvy2 = uvt.get(iby) * height1;
					uvy3 = uvt.get(icy) * height1;
					denom = uvx1 * (uvy3 - uvy2) - uvx2 * uvy3 + uvx3 * uvy2 + (uvx2 - uvx3) * uvy1;
					if(denom == 0) {
						i1 += 3;
						continue;
					}
					x1 *= currentMatrix.a;
					x2 *= currentMatrix.a;
					x3 *= currentMatrix.a;
					y1 *= currentMatrix.d;
					y2 *= currentMatrix.d;
					y3 *= currentMatrix.d;
					t1 = -(uvy1 * (x3 - x2) - uvy2 * x3 + uvy3 * x2 + (uvy2 - uvy3) * x1) / denom;
					t2 = (uvy2 * y3 + uvy1 * (y2 - y3) - uvy3 * y2 + (uvy3 - uvy2) * y1) / denom;
					t3 = (uvx1 * (x3 - x2) - uvx2 * x3 + uvx3 * x2 + (uvx2 - uvx3) * x1) / denom;
					t4 = -(uvx2 * y3 + uvx1 * (y2 - y3) - uvx3 * y2 + (uvx3 - uvx2) * y1) / denom;
					dx = (uvx1 * (uvy3 * x2 - uvy2 * x3) + uvy1 * (uvx2 * x3 - uvx3 * x2) + (uvx3 * uvy2 - uvx2 * uvy3) * x1) / denom;
					dy = (uvx1 * (uvy3 * y2 - uvy2 * y3) + uvy1 * (uvx2 * y3 - uvx3 * y2) + (uvx3 * uvy2 - uvx2 * uvy3) * y1) / denom;
					i1 += 3;
				}
				break;
			case 12:
				var c10 = data.readLineBitmapStyle();
				if(stroke && openfl__$internal_renderer_cairo_CairoGraphics.hasStroke) {
					openfl__$internal_renderer_cairo_CairoGraphics.closePath();
				}
				openfl__$internal_renderer_cairo_CairoGraphics.strokePattern = openfl__$internal_renderer_cairo_CairoGraphics.createImagePattern(openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$.get_bitmap(c10),openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$.get_matrix(c10),openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$.get_repeat(c10),openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$.get_smooth(c10));
				openfl__$internal_renderer_cairo_CairoGraphics.hasStroke = true;
				break;
			case 13:
				var c11 = data.readLineGradientStyle();
				if(stroke && openfl__$internal_renderer_cairo_CairoGraphics.hasStroke) {
					openfl__$internal_renderer_cairo_CairoGraphics.closePath();
				}
				openfl__$internal_renderer_cairo_CairoGraphics.strokePattern = openfl__$internal_renderer_cairo_CairoGraphics.createGradientPattern(openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_type(c11),openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_colors(c11),openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_alphas(c11),openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_ratios(c11),openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_matrix(c11),openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_spreadMethod(c11),openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_interpolationMethod(c11),openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_focalPointRatio(c11));
				openfl__$internal_renderer_cairo_CairoGraphics.hasStroke = true;
				break;
			case 14:
				var c12 = data.readLineStyle();
				if(stroke) {
					openfl__$internal_renderer_cairo_CairoGraphics.closePath(openfl__$internal_renderer_cairo_CairoGraphics.hasStroke);
				}
				if(openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_thickness(c12) == null) {
					openfl__$internal_renderer_cairo_CairoGraphics.hasStroke = false;
				} else {
					openfl__$internal_renderer_cairo_CairoGraphics.hasStroke = true;
					if(openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_thickness(c12) > 0) {
						openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_thickness(c12);
					} else {
						1;
					}
					if(openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_joints(c12) != null) {
						var tmp;
						switch(openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_joints(c12)) {
						case 0:
							tmp = 2;
							break;
						case 1:
							tmp = 0;
							break;
						default:
							tmp = 1;
						}
					}
					if(openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_caps(c12) != null) {
						var tmp1;
						switch(openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_caps(c12)) {
						case 0:
							tmp1 = 0;
							break;
						case 2:
							tmp1 = 2;
							break;
						default:
							tmp1 = 1;
						}
					}
					openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_miterLimit(c12);
					var r = ((openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_color(c12) & 16711680) >>> 16) / 255;
					var g = ((openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_color(c12) & 65280) >>> 8) / 255;
					var b = (openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_color(c12) & 255) / 255;
					if(openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_alpha(c12) == 1) {
						openfl__$internal_renderer_cairo_CairoGraphics.strokePattern = lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.createRGB(r,g,b);
					} else {
						openfl__$internal_renderer_cairo_CairoGraphics.strokePattern = lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.createRGBA(r,g,b,openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_alpha(c12));
					}
				}
				break;
			case 15:
				var c13 = data.readLineTo();
				hasPath = true;
				openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.get_x(c13);
				openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.get_y(c13);
				positionX = openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.get_x(c13);
				positionY = openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.get_y(c13);
				break;
			case 16:
				var c14 = data.readMoveTo();
				openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_x(c14);
				openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_y(c14);
				positionX = openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_x(c14);
				positionY = openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_y(c14);
				closeGap = true;
				startX = openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_x(c14);
				startY = openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_y(c14);
				break;
			default:
				data.skip(type);
			}
		}
	} catch( e ) { if( e != "__break__" ) throw e; }
	data.destroy();
	if(hasPath) {
		if(stroke && openfl__$internal_renderer_cairo_CairoGraphics.hasStroke) {
			if(!(openfl__$internal_renderer_cairo_CairoGraphics.hasFill && closeGap)) {
				if(closeGap && positionX == startX && positionY == startY) {
					openfl__$internal_renderer_cairo_CairoGraphics.closePath(true);
				}
			}
		}
		if(!stroke && openfl__$internal_renderer_cairo_CairoGraphics.hasFill) {
			if(openfl__$internal_renderer_cairo_CairoGraphics.fillPatternMatrix != null) {
				var matrix = openfl__$internal_renderer_cairo_CairoGraphics.fillPatternMatrix.clone();
				matrix.invert();
				if(openfl__$internal_renderer_cairo_CairoGraphics.pendingMatrix != null) {
					matrix.concat(openfl__$internal_renderer_cairo_CairoGraphics.pendingMatrix);
				}
				matrix.__toMatrix3();
			}
			if(openfl__$internal_renderer_cairo_CairoGraphics.pendingMatrix != null) {
				openfl__$internal_renderer_cairo_CairoGraphics.pendingMatrix.__toMatrix3();
				openfl__$internal_renderer_cairo_CairoGraphics.inversePendingMatrix.__toMatrix3();
			}
		}
	}
};
openfl__$internal_renderer_cairo_CairoGraphics.quadraticCurveTo = function(cx,cy,x,y) {
	var current = null;
	if(!openfl__$internal_renderer_cairo_CairoGraphics.cairo.get_hasCurrentPoint()) {
		current = new lime_math_Vector2(cx,cy);
	} else {
		current = openfl__$internal_renderer_cairo_CairoGraphics.cairo.get_currentPoint();
	}
};
openfl__$internal_renderer_cairo_CairoGraphics.render = function(graphics,renderSession,parentTransform) {
};
openfl__$internal_renderer_cairo_CairoGraphics.renderMask = function(graphics,renderSession) {
	if(graphics.__commands.get_length() != 0) {
		var data = new openfl__$internal_renderer_DrawCommandReader(graphics.__commands);
		var _g = 0;
		var _g1 = graphics.__commands.types;
		while(_g < _g1.length) {
			var type = _g1[_g];
			++_g;
			switch(type[1]) {
			case 3:
				var c = data.readCubicCurveTo();
				openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlX1(c);
				openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlY1(c);
				openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlX2(c);
				openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlY2(c);
				openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_anchorX(c);
				openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_anchorY(c);
				openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_anchorX(c);
				openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_anchorX(c);
				break;
			case 4:
				var c1 = data.readCurveTo();
				openfl__$internal_renderer_cairo_CairoGraphics.quadraticCurveTo(openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_controlX(c1),openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_controlY(c1),openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_anchorX(c1),openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_anchorY(c1));
				openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_anchorX(c1);
				openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_anchorY(c1);
				break;
			case 5:
				var c2 = data.readDrawCircle();
				openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_x(c2);
				openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_y(c2);
				openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_radius(c2);
				break;
			case 6:
				var c3 = data.readDrawEllipse();
				var x = openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_x(c3);
				var y = openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_y(c3);
				var width = openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_width(c3);
				var height = openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_height(c3);
				x -= 0;
				y -= 0;
				break;
			case 7:
				var c4 = data.readDrawRect();
				openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_x(c4);
				openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_y(c4);
				openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_width(c4);
				openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_height(c4);
				break;
			case 8:
				var c5 = data.readDrawRoundRect();
				openfl__$internal_renderer_cairo_CairoGraphics.drawRoundRect(openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_x(c5),openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_y(c5),openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_width(c5),openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_height(c5),openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_ellipseWidth(c5),openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_ellipseHeight(c5));
				break;
			case 15:
				var c6 = data.readLineTo();
				openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.get_x(c6);
				openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.get_y(c6);
				openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.get_x(c6);
				openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.get_y(c6);
				break;
			case 16:
				var c7 = data.readMoveTo();
				openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_x(c7);
				openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_y(c7);
				openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_x(c7);
				openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_y(c7);
				break;
			default:
				data.skip(type);
			}
		}
		data.destroy();
	}
};
var openfl__$internal_renderer_cairo_CairoMaskManager = function(renderSession) {
	openfl__$internal_renderer_AbstractMaskManager.call(this,renderSession);
};
$hxClasses["openfl._internal.renderer.cairo.CairoMaskManager"] = openfl__$internal_renderer_cairo_CairoMaskManager;
openfl__$internal_renderer_cairo_CairoMaskManager.__name__ = ["openfl","_internal","renderer","cairo","CairoMaskManager"];
openfl__$internal_renderer_cairo_CairoMaskManager.__super__ = openfl__$internal_renderer_AbstractMaskManager;
openfl__$internal_renderer_cairo_CairoMaskManager.prototype = $extend(openfl__$internal_renderer_AbstractMaskManager.prototype,{
	pushMask: function(mask) {
		mask.__getRenderTransform().__toMatrix3();
		mask.__renderCairoMask(this.renderSession);
	}
	,pushObject: function(object,handleScrollRect) {
		if(handleScrollRect == null) {
			handleScrollRect = true;
		}
		if(handleScrollRect && object.__scrollRect != null) {
			this.pushRect(object.__scrollRect,object.__renderTransform);
		}
		if(object.__mask != null) {
			this.pushMask(object.__mask);
		}
	}
	,pushRect: function(rect,transform) {
	}
	,popMask: function() {
	}
	,popObject: function(object,handleScrollRect) {
		if(handleScrollRect == null) {
			handleScrollRect = true;
		}
		if(object.__mask != null) {
			this.popMask();
		}
		if(handleScrollRect && object.__scrollRect != null) {
			this.popRect();
		}
	}
	,popRect: function() {
	}
	,__class__: openfl__$internal_renderer_cairo_CairoMaskManager
});
var openfl__$internal_renderer_cairo_CairoRenderer = function(stage,cairo) {
	openfl__$internal_renderer_AbstractRenderer.call(this,stage);
	this.cairo = cairo;
	this.renderSession = new openfl__$internal_renderer_RenderSession();
	this.renderSession.cairo = cairo;
	this.renderSession.roundPixels = true;
	this.renderSession.renderer = this;
	this.renderSession.maskManager = new openfl__$internal_renderer_cairo_CairoMaskManager(this.renderSession);
	this.renderSession.blendModeManager = new openfl__$internal_renderer_cairo_CairoBlendModeManager(this.renderSession);
};
$hxClasses["openfl._internal.renderer.cairo.CairoRenderer"] = openfl__$internal_renderer_cairo_CairoRenderer;
openfl__$internal_renderer_cairo_CairoRenderer.__name__ = ["openfl","_internal","renderer","cairo","CairoRenderer"];
openfl__$internal_renderer_cairo_CairoRenderer.__super__ = openfl__$internal_renderer_AbstractRenderer;
openfl__$internal_renderer_cairo_CairoRenderer.prototype = $extend(openfl__$internal_renderer_AbstractRenderer.prototype,{
	cairo: null
	,clear: function() {
		var _g = 0;
		var _g1 = this.stage.stage3Ds;
		while(_g < _g1.get_length()) {
			var stage3D = _g1.get(_g);
			++_g;
			stage3D.__renderCairo(this.stage,this.renderSession);
		}
	}
	,render: function() {
		this.renderSession.allowSmoothing = this.stage.quality != 2;
		this.stage.__renderCairo(this.renderSession);
	}
	,__class__: openfl__$internal_renderer_cairo_CairoRenderer
});
var openfl__$internal_renderer_cairo_CairoTextField = function() { };
$hxClasses["openfl._internal.renderer.cairo.CairoTextField"] = openfl__$internal_renderer_cairo_CairoTextField;
openfl__$internal_renderer_cairo_CairoTextField.__name__ = ["openfl","_internal","renderer","cairo","CairoTextField"];
openfl__$internal_renderer_cairo_CairoTextField.render = function(textField,renderSession,transform) {
};
var openfl__$internal_renderer_canvas_CanvasBitmap = function() { };
$hxClasses["openfl._internal.renderer.canvas.CanvasBitmap"] = openfl__$internal_renderer_canvas_CanvasBitmap;
openfl__$internal_renderer_canvas_CanvasBitmap.__name__ = ["openfl","_internal","renderer","canvas","CanvasBitmap"];
openfl__$internal_renderer_canvas_CanvasBitmap.render = function(bitmap,renderSession) {
	if(!bitmap.__renderable || bitmap.__worldAlpha <= 0) {
		return;
	}
	var context = renderSession.context;
	if(bitmap.bitmapData != null && bitmap.bitmapData.__isValid) {
		renderSession.maskManager.pushObject(bitmap,false);
		lime_graphics_utils_ImageCanvasUtil.convertToCanvas(bitmap.bitmapData.image);
		context.globalAlpha = bitmap.__worldAlpha;
		var transform = bitmap.__renderTransform;
		var scrollRect = bitmap.__scrollRect;
		if(renderSession.roundPixels) {
			context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx | 0,transform.ty | 0);
		} else {
			context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx,transform.ty);
		}
		if(!renderSession.allowSmoothing || !bitmap.smoothing) {
			context.mozImageSmoothingEnabled = false;
			context.msImageSmoothingEnabled = false;
			context.imageSmoothingEnabled = false;
		}
		if(scrollRect == null) {
			context.drawImage(bitmap.bitmapData.image.get_src(),0,0);
		} else {
			context.drawImage(bitmap.bitmapData.image.get_src(),scrollRect.x,scrollRect.y,scrollRect.width,scrollRect.height,scrollRect.x,scrollRect.y,scrollRect.width,scrollRect.height);
		}
		if(!renderSession.allowSmoothing || !bitmap.smoothing) {
			context.mozImageSmoothingEnabled = true;
			context.msImageSmoothingEnabled = true;
			context.imageSmoothingEnabled = true;
		}
		renderSession.maskManager.popObject(bitmap,false);
	}
};
var openfl__$internal_renderer_canvas_CanvasDisplayObject = function() { };
$hxClasses["openfl._internal.renderer.canvas.CanvasDisplayObject"] = openfl__$internal_renderer_canvas_CanvasDisplayObject;
openfl__$internal_renderer_canvas_CanvasDisplayObject.__name__ = ["openfl","_internal","renderer","canvas","CanvasDisplayObject"];
openfl__$internal_renderer_canvas_CanvasDisplayObject.render = function(displayObject,renderSession) {
	if(displayObject.opaqueBackground == null && displayObject.__graphics == null) {
		return;
	}
	if(!displayObject.__renderable || displayObject.__worldAlpha <= 0) {
		return;
	}
	if(displayObject.opaqueBackground != null && displayObject.get_width() > 0 && displayObject.get_height() > 0) {
		renderSession.maskManager.pushObject(displayObject);
		var context = renderSession.context;
		var transform = displayObject.__renderTransform;
		if(renderSession.roundPixels) {
			context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx | 0,transform.ty | 0);
		} else {
			context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx,transform.ty);
		}
		var color = displayObject.opaqueBackground;
		context.fillStyle = "rgb(" + (color >>> 16 & 255) + "," + (color >>> 8 & 255) + "," + (color & 255) + ")";
		context.fillRect(0,0,displayObject.get_width(),displayObject.get_height());
		renderSession.maskManager.popObject(displayObject);
	}
	if(displayObject.__graphics != null) {
		if(!(!displayObject.__renderable || displayObject.__worldAlpha <= 0)) {
			var graphics = displayObject.__graphics;
			if(graphics != null) {
				openfl__$internal_renderer_canvas_CanvasGraphics.render(graphics,renderSession,displayObject.__renderTransform);
				if(graphics.__canvas != null) {
					var context1 = renderSession.context;
					var scrollRect = displayObject.__scrollRect;
					if(graphics.__width > 0 && graphics.__height > 0 && (scrollRect == null || scrollRect.width > 0 && scrollRect.height > 0)) {
						renderSession.maskManager.pushObject(displayObject);
						context1.globalAlpha = displayObject.__worldAlpha;
						var transform1 = graphics.__worldTransform;
						if(renderSession.roundPixels) {
							context1.setTransform(transform1.a,transform1.b,transform1.c,transform1.d,transform1.tx | 0,transform1.ty | 0);
						} else {
							context1.setTransform(transform1.a,transform1.b,transform1.c,transform1.d,transform1.tx,transform1.ty);
						}
						context1.drawImage(graphics.__canvas,0,0);
						renderSession.maskManager.popObject(displayObject);
					}
				}
			}
		}
	}
};
var openfl__$internal_renderer_canvas_CanvasGraphics = function() { };
$hxClasses["openfl._internal.renderer.canvas.CanvasGraphics"] = openfl__$internal_renderer_canvas_CanvasGraphics;
openfl__$internal_renderer_canvas_CanvasGraphics.__name__ = ["openfl","_internal","renderer","canvas","CanvasGraphics"];
openfl__$internal_renderer_canvas_CanvasGraphics.closePath = function(strokeBefore) {
	if(strokeBefore == null) {
		strokeBefore = false;
	}
	if(openfl__$internal_renderer_canvas_CanvasGraphics.context.strokeStyle == null) {
		return;
	}
	if(!strokeBefore) {
		openfl__$internal_renderer_canvas_CanvasGraphics.context.closePath();
	}
	openfl__$internal_renderer_canvas_CanvasGraphics.context.stroke();
	if(strokeBefore) {
		openfl__$internal_renderer_canvas_CanvasGraphics.context.closePath();
	}
	openfl__$internal_renderer_canvas_CanvasGraphics.context.beginPath();
};
openfl__$internal_renderer_canvas_CanvasGraphics.createBitmapFill = function(bitmap,bitmapRepeat,smooth) {
	lime_graphics_utils_ImageCanvasUtil.convertToCanvas(bitmap.image);
	openfl__$internal_renderer_canvas_CanvasGraphics.setSmoothing(smooth);
	return openfl__$internal_renderer_canvas_CanvasGraphics.context.createPattern(bitmap.image.get_src(),bitmapRepeat ? "repeat" : "no-repeat");
};
openfl__$internal_renderer_canvas_CanvasGraphics.createGradientPattern = function(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio) {
	var gradientFill = null;
	switch(type) {
	case 0:
		var matrix1 = matrix != null ? matrix : new openfl_geom_Matrix();
		var point1 = matrix1.transformPoint(new openfl_geom_Point(-819.2,0));
		var point2 = matrix1.transformPoint(new openfl_geom_Point(819.2,0));
		gradientFill = openfl__$internal_renderer_canvas_CanvasGraphics.context.createLinearGradient(point1.x,point1.y,point2.x,point2.y);
		break;
	case 1:
		if(matrix == null) {
			matrix = new openfl_geom_Matrix();
		}
		gradientFill = openfl__$internal_renderer_canvas_CanvasGraphics.context.createRadialGradient(matrix.tx,matrix.ty,0,matrix.tx,matrix.ty,(matrix.transformPoint(new openfl_geom_Point(1638.4,0)).x - matrix.tx) / 2);
		break;
	}
	var _g1 = 0;
	var _g = colors.length;
	while(_g1 < _g) {
		var i = _g1++;
		var rgb = colors[i];
		var ratio = ratios[i] / 255;
		if(ratio < 0) {
			ratio = 0;
		}
		if(ratio > 1) {
			ratio = 1;
		}
		gradientFill.addColorStop(ratio,"rgba(" + ((rgb & 16711680) >>> 16) + ", " + ((rgb & 65280) >>> 8) + ", " + (rgb & 255) + ", " + alphas[i] + ")");
	}
	return gradientFill;
};
openfl__$internal_renderer_canvas_CanvasGraphics.createTempPatternCanvas = function(bitmap,repeat,width,height) {
	var canvas = window.document.createElement("canvas");
	var context = canvas.getContext("2d");
	canvas.width = width;
	canvas.height = height;
	var tmp = bitmap.image.get_src();
	context.fillStyle = context.createPattern(tmp,repeat ? "repeat" : "no-repeat");
	context.beginPath();
	context.moveTo(0,0);
	context.lineTo(0,height);
	context.lineTo(width,height);
	context.lineTo(width,0);
	context.lineTo(0,0);
	context.closePath();
	if(!openfl__$internal_renderer_canvas_CanvasGraphics.hitTesting) {
		context.fill();
	}
	return canvas;
};
openfl__$internal_renderer_canvas_CanvasGraphics.drawRoundRect = function(x,y,width,height,ellipseWidth,ellipseHeight) {
	if(ellipseHeight == null) {
		ellipseHeight = ellipseWidth;
	}
	ellipseWidth *= 0.5;
	ellipseHeight *= 0.5;
	if(ellipseWidth > width / 2) {
		ellipseWidth = width / 2;
	}
	if(ellipseHeight > height / 2) {
		ellipseHeight = height / 2;
	}
	var xe = x + width;
	var ye = y + height;
	var cx1 = -ellipseWidth + ellipseWidth * openfl__$internal_renderer_canvas_CanvasGraphics.SIN45;
	var cx2 = -ellipseWidth + ellipseWidth * openfl__$internal_renderer_canvas_CanvasGraphics.TAN22;
	var cy1 = -ellipseHeight + ellipseHeight * openfl__$internal_renderer_canvas_CanvasGraphics.SIN45;
	var cy2 = -ellipseHeight + ellipseHeight * openfl__$internal_renderer_canvas_CanvasGraphics.TAN22;
	openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(xe,ye - ellipseHeight);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(xe,ye + cy2,xe + cx1,ye + cy1);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(xe + cx2,ye,xe - ellipseWidth,ye);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(x + ellipseWidth,ye);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(x - cx2,ye,x - cx1,ye + cy1);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(x,ye + cy2,x,ye - ellipseHeight);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(x,y + ellipseHeight);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(x,y - cy2,x - cx1,y - cy1);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(x - cx2,y,x + ellipseWidth,y);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(xe - ellipseWidth,y);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(xe + cx2,y,xe + cx1,y - cy1);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(xe,y - cy2,xe,y + ellipseHeight);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(xe,ye - ellipseHeight);
};
openfl__$internal_renderer_canvas_CanvasGraphics.endFill = function() {
	openfl__$internal_renderer_canvas_CanvasGraphics.context.beginPath();
	openfl__$internal_renderer_canvas_CanvasGraphics.playCommands(openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands,false);
	openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.clear();
};
openfl__$internal_renderer_canvas_CanvasGraphics.endStroke = function() {
	openfl__$internal_renderer_canvas_CanvasGraphics.context.beginPath();
	openfl__$internal_renderer_canvas_CanvasGraphics.playCommands(openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands,true);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.closePath();
	openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.clear();
};
openfl__$internal_renderer_canvas_CanvasGraphics.hitTest = function(graphics,x,y) {
	openfl__$internal_renderer_canvas_CanvasGraphics.bounds = graphics.__bounds;
	openfl__$internal_renderer_canvas_CanvasGraphics.graphics = graphics;
	if(graphics.__commands.get_length() == 0 || openfl__$internal_renderer_canvas_CanvasGraphics.bounds == null || openfl__$internal_renderer_canvas_CanvasGraphics.bounds.width <= 0 || openfl__$internal_renderer_canvas_CanvasGraphics.bounds.height <= 0) {
		return false;
	} else {
		openfl__$internal_renderer_canvas_CanvasGraphics.hitTesting = true;
		x -= openfl__$internal_renderer_canvas_CanvasGraphics.bounds.x;
		y -= openfl__$internal_renderer_canvas_CanvasGraphics.bounds.y;
		if(graphics.__canvas == null) {
			graphics.__canvas = window.document.createElement("canvas");
			graphics.__context = graphics.__canvas.getContext("2d");
		}
		openfl__$internal_renderer_canvas_CanvasGraphics.context = graphics.__context;
		openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.clear();
		openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.clear();
		openfl__$internal_renderer_canvas_CanvasGraphics.hasFill = false;
		openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke = false;
		openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill = null;
		openfl__$internal_renderer_canvas_CanvasGraphics.bitmapRepeat = false;
		openfl__$internal_renderer_canvas_CanvasGraphics.context.beginPath();
		var data = new openfl__$internal_renderer_DrawCommandReader(graphics.__commands);
		var _g = 0;
		var _g1 = graphics.__commands.types;
		while(_g < _g1.length) {
			var type = _g1[_g];
			++_g;
			switch(type[1]) {
			case 0:case 1:case 2:
				openfl__$internal_renderer_canvas_CanvasGraphics.endFill();
				openfl__$internal_renderer_canvas_CanvasGraphics.endStroke();
				if(openfl__$internal_renderer_canvas_CanvasGraphics.hasFill && openfl__$internal_renderer_canvas_CanvasGraphics.context.isPointInPath(x,y)) {
					data.destroy();
					return true;
				}
				if(openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke && openfl__$internal_renderer_canvas_CanvasGraphics.context.isPointInStroke(x,y)) {
					data.destroy();
					return true;
				}
				if(type == openfl__$internal_renderer_DrawCommandType.BEGIN_BITMAP_FILL) {
					var c = data.readBeginBitmapFill();
					openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.beginBitmapFill(openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_bitmap(c),openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_matrix(c),openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_repeat(c),openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_smooth(c));
					openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.beginBitmapFill(openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_bitmap(c),openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_matrix(c),openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_repeat(c),openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_smooth(c));
				} else if(type == openfl__$internal_renderer_DrawCommandType.BEGIN_GRADIENT_FILL) {
					var c1 = data.readBeginGradientFill();
					openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.beginGradientFill(openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_type(c1),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_colors(c1),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_alphas(c1),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_ratios(c1),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_matrix(c1),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_spreadMethod(c1),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_interpolationMethod(c1),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_focalPointRatio(c1));
					openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.beginGradientFill(openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_type(c1),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_colors(c1),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_alphas(c1),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_ratios(c1),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_matrix(c1),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_spreadMethod(c1),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_interpolationMethod(c1),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_focalPointRatio(c1));
				} else {
					var c2 = data.readBeginFill();
					openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.beginFill(openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$.get_color(c2),1);
					openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.beginFill(openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$.get_color(c2),1);
				}
				break;
			case 3:
				var c3 = data.readCubicCurveTo();
				openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.cubicCurveTo(openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlX1(c3),openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlY1(c3),openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlX2(c3),openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlY2(c3),openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_anchorX(c3),openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_anchorY(c3));
				openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.cubicCurveTo(openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlX1(c3),openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlY1(c3),openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlX2(c3),openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlY2(c3),openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_anchorX(c3),openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_anchorY(c3));
				break;
			case 4:
				var c4 = data.readCurveTo();
				openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.curveTo(openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_controlX(c4),openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_controlY(c4),openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_anchorX(c4),openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_anchorY(c4));
				openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.curveTo(openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_controlX(c4),openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_controlY(c4),openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_anchorX(c4),openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_anchorY(c4));
				break;
			case 5:
				var c5 = data.readDrawCircle();
				openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.drawCircle(openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_x(c5),openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_y(c5),openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_radius(c5));
				openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.drawCircle(openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_x(c5),openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_y(c5),openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_radius(c5));
				break;
			case 6:
				var c6 = data.readDrawEllipse();
				openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.drawEllipse(openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_x(c6),openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_y(c6),openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_width(c6),openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_height(c6));
				openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.drawEllipse(openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_x(c6),openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_y(c6),openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_width(c6),openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_height(c6));
				break;
			case 7:
				var c7 = data.readDrawRect();
				openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.drawRect(openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_x(c7),openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_y(c7),openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_width(c7),openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_height(c7));
				openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.drawRect(openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_x(c7),openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_y(c7),openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_width(c7),openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_height(c7));
				break;
			case 8:
				var c8 = data.readDrawRoundRect();
				openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.drawRoundRect(openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_x(c8),openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_y(c8),openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_width(c8),openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_height(c8),openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_ellipseWidth(c8),openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_ellipseHeight(c8));
				openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.drawRoundRect(openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_x(c8),openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_y(c8),openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_width(c8),openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_height(c8),openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_ellipseWidth(c8),openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_ellipseHeight(c8));
				break;
			case 11:
				data.readEndFill();
				openfl__$internal_renderer_canvas_CanvasGraphics.endFill();
				openfl__$internal_renderer_canvas_CanvasGraphics.endStroke();
				if(openfl__$internal_renderer_canvas_CanvasGraphics.hasFill && openfl__$internal_renderer_canvas_CanvasGraphics.context.isPointInPath(x,y)) {
					data.destroy();
					return true;
				}
				if(openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke && openfl__$internal_renderer_canvas_CanvasGraphics.context.isPointInStroke(x,y)) {
					data.destroy();
					return true;
				}
				openfl__$internal_renderer_canvas_CanvasGraphics.hasFill = false;
				openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill = null;
				break;
			case 12:
				var c9 = data.readLineBitmapStyle();
				openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.lineBitmapStyle(openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$.get_bitmap(c9),openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$.get_matrix(c9),openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$.get_repeat(c9),openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$.get_smooth(c9));
				break;
			case 13:
				var c10 = data.readLineGradientStyle();
				openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.lineGradientStyle(openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_type(c10),openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_colors(c10),openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_alphas(c10),openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_ratios(c10),openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_matrix(c10),openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_spreadMethod(c10),openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_interpolationMethod(c10),openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_focalPointRatio(c10));
				break;
			case 14:
				var c11 = data.readLineStyle();
				openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.lineStyle(openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_thickness(c11),openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_color(c11),1,openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_pixelHinting(c11),openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_scaleMode(c11),openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_caps(c11),openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_joints(c11),openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_miterLimit(c11));
				break;
			case 15:
				var c12 = data.readLineTo();
				openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.lineTo(openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.get_x(c12),openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.get_y(c12));
				openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.lineTo(openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.get_x(c12),openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.get_y(c12));
				break;
			case 16:
				var c13 = data.readMoveTo();
				openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.moveTo(openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_x(c13),openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_y(c13));
				openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.moveTo(openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_x(c13),openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_y(c13));
				break;
			default:
				data.skip(type);
			}
		}
		if(openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.get_length() > 0) {
			openfl__$internal_renderer_canvas_CanvasGraphics.endFill();
		}
		if(openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.get_length() > 0) {
			openfl__$internal_renderer_canvas_CanvasGraphics.endStroke();
		}
		data.destroy();
		if(openfl__$internal_renderer_canvas_CanvasGraphics.hasFill && openfl__$internal_renderer_canvas_CanvasGraphics.context.isPointInPath(x,y)) {
			return true;
		}
		if(openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke && openfl__$internal_renderer_canvas_CanvasGraphics.context.isPointInStroke(x,y)) {
			return true;
		}
	}
	return false;
};
openfl__$internal_renderer_canvas_CanvasGraphics.isCCW = function(x1,y1,x2,y2,x3,y3) {
	return (x2 - x1) * (y3 - y1) - (y2 - y1) * (x3 - x1) < 0;
};
openfl__$internal_renderer_canvas_CanvasGraphics.normalizeUVT = function(uvt,skipT) {
	if(skipT == null) {
		skipT = false;
	}
	var max = -Infinity;
	var tmp = -Infinity;
	var len = uvt.get_length();
	var _g1 = 1;
	var _g = len + 1;
	while(_g1 < _g) {
		var t = _g1++;
		if(skipT && t % 3 == 0) {
			continue;
		}
		tmp = uvt.get(t - 1);
		if(max < tmp) {
			max = tmp;
		}
	}
	if(!skipT) {
		return { max : max, uvt : uvt};
	}
	var result = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
	var _g11 = 1;
	var _g2 = len + 1;
	while(_g11 < _g2) {
		var t1 = _g11++;
		if(skipT && t1 % 3 == 0) {
			continue;
		}
		result.push(uvt.get(t1 - 1));
	}
	return { max : max, uvt : result};
};
openfl__$internal_renderer_canvas_CanvasGraphics.playCommands = function(commands,stroke) {
	if(stroke == null) {
		stroke = false;
	}
	openfl__$internal_renderer_canvas_CanvasGraphics.bounds = openfl__$internal_renderer_canvas_CanvasGraphics.graphics.__bounds;
	var offsetX = openfl__$internal_renderer_canvas_CanvasGraphics.bounds.x;
	var offsetY = openfl__$internal_renderer_canvas_CanvasGraphics.bounds.y;
	var positionX = 0.0;
	var positionY = 0.0;
	var closeGap = false;
	var startX = 0.0;
	var startY = 0.0;
	openfl__$internal_renderer_canvas_CanvasGraphics.setSmoothing(true);
	var data = new openfl__$internal_renderer_DrawCommandReader(commands);
	var _g = 0;
	var _g1 = commands.types;
	while(_g < _g1.length) {
		var type = _g1[_g];
		++_g;
		switch(type[1]) {
		case 0:
			var c = data.readBeginBitmapFill();
			openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill = openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_bitmap(c);
			var tmp = openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_bitmap(c);
			var tmp1 = openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_smooth(c);
			openfl__$internal_renderer_canvas_CanvasGraphics.context.fillStyle = openfl__$internal_renderer_canvas_CanvasGraphics.createBitmapFill(tmp,true,tmp1);
			openfl__$internal_renderer_canvas_CanvasGraphics.hasFill = true;
			if(openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_matrix(c) != null) {
				openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix = openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_matrix(c);
				openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix = openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_matrix(c).clone();
				openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix.invert();
			} else {
				openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix = null;
				openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix = null;
			}
			break;
		case 1:
			var c1 = data.readBeginFill();
			if(openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$.get_alpha(c1) < 0.005) {
				openfl__$internal_renderer_canvas_CanvasGraphics.hasFill = false;
			} else {
				if(openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$.get_alpha(c1) == 1) {
					var tmp2 = StringTools.hex(openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$.get_color(c1),6);
					openfl__$internal_renderer_canvas_CanvasGraphics.context.fillStyle = "#" + tmp2;
				} else {
					var tmp3 = "rgba(" + ((openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$.get_color(c1) & 16711680) >>> 16) + ", " + ((openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$.get_color(c1) & 65280) >>> 8) + ", " + (openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$.get_color(c1) & 255) + ", " + openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$.get_alpha(c1);
					openfl__$internal_renderer_canvas_CanvasGraphics.context.fillStyle = tmp3 + ")";
				}
				openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill = null;
				openfl__$internal_renderer_canvas_CanvasGraphics.setSmoothing(true);
				openfl__$internal_renderer_canvas_CanvasGraphics.hasFill = true;
			}
			break;
		case 2:
			var c2 = data.readBeginGradientFill();
			var tmp4 = openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_type(c2);
			var tmp5 = openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_colors(c2);
			var tmp6 = openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_alphas(c2);
			var tmp7 = openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_ratios(c2);
			var tmp8 = openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_matrix(c2);
			var tmp9 = openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_spreadMethod(c2);
			var tmp10 = openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_interpolationMethod(c2);
			var tmp11 = openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_focalPointRatio(c2);
			openfl__$internal_renderer_canvas_CanvasGraphics.context.fillStyle = openfl__$internal_renderer_canvas_CanvasGraphics.createGradientPattern(tmp4,tmp5,tmp6,tmp7,tmp8,tmp9,tmp10,tmp11);
			openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill = null;
			openfl__$internal_renderer_canvas_CanvasGraphics.setSmoothing(true);
			openfl__$internal_renderer_canvas_CanvasGraphics.hasFill = true;
			break;
		case 3:
			var c3 = data.readCubicCurveTo();
			openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlX1(c3) - offsetX,openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlY1(c3) - offsetY,openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlX2(c3) - offsetX,openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlY2(c3) - offsetY,openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_anchorX(c3) - offsetX,openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_anchorY(c3) - offsetY);
			break;
		case 4:
			var c4 = data.readCurveTo();
			openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_controlX(c4) - offsetX,openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_controlY(c4) - offsetY,openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_anchorX(c4) - offsetX,openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_anchorY(c4) - offsetY);
			break;
		case 5:
			var c5 = data.readDrawCircle();
			openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_x(c5) - offsetX + openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_radius(c5),openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_y(c5) - offsetY);
			openfl__$internal_renderer_canvas_CanvasGraphics.context.arc(openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_x(c5) - offsetX,openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_y(c5) - offsetY,openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_radius(c5),0,Math.PI * 2,true);
			break;
		case 6:
			var c6 = data.readDrawEllipse();
			var x = openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_x(c6);
			var y = openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_y(c6);
			var width = openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_width(c6);
			var height = openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_height(c6);
			x -= offsetX;
			y -= offsetY;
			var ox = width / 2 * .5522848;
			var oy = height / 2 * .5522848;
			var xe = x + width;
			var ye = y + height;
			var xm = x + width / 2;
			var ym = y + height / 2;
			openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(x,ym);
			openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(x,ym - oy,xm - ox,y,xm,y);
			openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(xm + ox,y,xe,ym - oy,xe,ym);
			openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(xe,ym + oy,xm + ox,ye,xm,ye);
			openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(xm - ox,ye,x,ym + oy,x,ym);
			break;
		case 7:
			var c7 = data.readDrawRect();
			var optimizationUsed = false;
			if(openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill != null) {
				var st = 0;
				var sr = 0;
				var sb = 0;
				var sl = 0;
				var canOptimizeMatrix = true;
				if(openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix != null) {
					if(openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix.b != 0 || openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix.c != 0) {
						canOptimizeMatrix = false;
					} else {
						var stl = openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix.transformPoint(new openfl_geom_Point(openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_x(c7),openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_y(c7)));
						var sbr = openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix.transformPoint(new openfl_geom_Point(openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_x(c7) + openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_width(c7),openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_y(c7) + openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_height(c7)));
						st = stl.y;
						sl = stl.x;
						sb = sbr.y;
						sr = sbr.x;
					}
				} else {
					st = openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_y(c7);
					sl = openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_x(c7);
					sb = openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_y(c7) + openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_height(c7);
					sr = openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_x(c7) + openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_width(c7);
				}
				if(canOptimizeMatrix && st >= 0 && sl >= 0 && sr <= openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill.width && sb <= openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill.height) {
					optimizationUsed = true;
					if(!openfl__$internal_renderer_canvas_CanvasGraphics.hitTesting) {
						openfl__$internal_renderer_canvas_CanvasGraphics.context.drawImage(openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill.image.get_src(),sl,st,sr - sl,sb - st,openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_x(c7) - offsetX,openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_y(c7) - offsetY,openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_width(c7),openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_height(c7));
					}
				}
			}
			if(!optimizationUsed) {
				openfl__$internal_renderer_canvas_CanvasGraphics.context.rect(openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_x(c7) - offsetX,openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_y(c7) - offsetY,openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_width(c7),openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_height(c7));
			}
			break;
		case 8:
			var c8 = data.readDrawRoundRect();
			openfl__$internal_renderer_canvas_CanvasGraphics.drawRoundRect(openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_x(c8) - offsetX,openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_y(c8) - offsetY,openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_width(c8),openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_height(c8),openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_ellipseWidth(c8),openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_ellipseHeight(c8));
			break;
		case 12:
			var c9 = data.readLineBitmapStyle();
			if(stroke && openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke) {
				openfl__$internal_renderer_canvas_CanvasGraphics.closePath();
			}
			openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(positionX - offsetX,positionY - offsetY);
			var tmp12 = openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$.get_bitmap(c9);
			var tmp13 = openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$.get_repeat(c9);
			var tmp14 = openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$.get_smooth(c9);
			openfl__$internal_renderer_canvas_CanvasGraphics.context.strokeStyle = openfl__$internal_renderer_canvas_CanvasGraphics.createBitmapFill(tmp12,tmp13,tmp14);
			openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke = true;
			break;
		case 13:
			var c10 = data.readLineGradientStyle();
			if(stroke && openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke) {
				openfl__$internal_renderer_canvas_CanvasGraphics.closePath();
			}
			openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(positionX - offsetX,positionY - offsetY);
			var tmp15 = openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_type(c10);
			var tmp16 = openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_colors(c10);
			var tmp17 = openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_alphas(c10);
			var tmp18 = openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_ratios(c10);
			var tmp19 = openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_matrix(c10);
			var tmp20 = openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_spreadMethod(c10);
			var tmp21 = openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_interpolationMethod(c10);
			var tmp22 = openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_focalPointRatio(c10);
			openfl__$internal_renderer_canvas_CanvasGraphics.context.strokeStyle = openfl__$internal_renderer_canvas_CanvasGraphics.createGradientPattern(tmp15,tmp16,tmp17,tmp18,tmp19,tmp20,tmp21,tmp22);
			openfl__$internal_renderer_canvas_CanvasGraphics.setSmoothing(true);
			openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke = true;
			break;
		case 14:
			var c11 = data.readLineStyle();
			if(stroke) {
				openfl__$internal_renderer_canvas_CanvasGraphics.closePath(openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke);
			}
			openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(positionX - offsetX,positionY - offsetY);
			if(openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_thickness(c11) == null) {
				openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke = false;
			} else {
				var tmp23 = openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_thickness(c11) > 0 ? openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_thickness(c11) : 1;
				openfl__$internal_renderer_canvas_CanvasGraphics.context.lineWidth = tmp23;
				var tmp24 = openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_joints(c11) == null ? "round" : openfl_display__$JointStyle_JointStyle_$Impl_$.toString(openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_joints(c11)).toLowerCase();
				openfl__$internal_renderer_canvas_CanvasGraphics.context.lineJoin = tmp24;
				var tmp25 = openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_caps(c11) == null ? "round" : openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_caps(c11) == 0 ? "butt" : openfl_display__$CapsStyle_CapsStyle_$Impl_$.toString(openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_caps(c11)).toLowerCase();
				openfl__$internal_renderer_canvas_CanvasGraphics.context.lineCap = tmp25;
				openfl__$internal_renderer_canvas_CanvasGraphics.context.miterLimit = openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_miterLimit(c11);
				if(openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_alpha(c11) == 1) {
					var tmp26 = StringTools.hex(openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_color(c11) & 16777215,6);
					openfl__$internal_renderer_canvas_CanvasGraphics.context.strokeStyle = "#" + tmp26;
				} else {
					var tmp27 = "rgba(" + ((openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_color(c11) & 16711680) >>> 16) + ", " + ((openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_color(c11) & 65280) >>> 8) + ", " + (openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_color(c11) & 255) + ", " + openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_alpha(c11);
					openfl__$internal_renderer_canvas_CanvasGraphics.context.strokeStyle = tmp27 + ")";
				}
				openfl__$internal_renderer_canvas_CanvasGraphics.setSmoothing(true);
				openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke = true;
			}
			break;
		case 15:
			var c12 = data.readLineTo();
			openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.get_x(c12) - offsetX,openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.get_y(c12) - offsetY);
			positionX = openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.get_x(c12);
			positionY = openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.get_y(c12);
			break;
		case 16:
			var c13 = data.readMoveTo();
			openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_x(c13) - offsetX,openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_y(c13) - offsetY);
			positionX = openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_x(c13);
			positionY = openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_y(c13);
			closeGap = true;
			startX = openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_x(c13);
			startY = openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_y(c13);
			break;
		default:
			data.skip(type);
		}
	}
	data.destroy();
	if(stroke && openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke) {
		if(openfl__$internal_renderer_canvas_CanvasGraphics.hasFill && closeGap) {
			openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(startX - offsetX,startY - offsetY);
		} else if(closeGap && positionX == startX && positionY == startY) {
			openfl__$internal_renderer_canvas_CanvasGraphics.closePath(true);
		}
		if(!openfl__$internal_renderer_canvas_CanvasGraphics.hitTesting) {
			openfl__$internal_renderer_canvas_CanvasGraphics.context.stroke();
		}
	}
	if(!stroke) {
		if(openfl__$internal_renderer_canvas_CanvasGraphics.hasFill || openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill != null) {
			openfl__$internal_renderer_canvas_CanvasGraphics.context.translate(-openfl__$internal_renderer_canvas_CanvasGraphics.bounds.x,-openfl__$internal_renderer_canvas_CanvasGraphics.bounds.y);
			if(openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix != null) {
				openfl__$internal_renderer_canvas_CanvasGraphics.context.transform(openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix.a,openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix.b,openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix.c,openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix.d,openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix.tx,openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix.ty);
				if(!openfl__$internal_renderer_canvas_CanvasGraphics.hitTesting) {
					openfl__$internal_renderer_canvas_CanvasGraphics.context.fill();
				}
				openfl__$internal_renderer_canvas_CanvasGraphics.context.transform(openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix.a,openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix.b,openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix.c,openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix.d,openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix.tx,openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix.ty);
			} else if(!openfl__$internal_renderer_canvas_CanvasGraphics.hitTesting) {
				openfl__$internal_renderer_canvas_CanvasGraphics.context.fill();
			}
			openfl__$internal_renderer_canvas_CanvasGraphics.context.translate(openfl__$internal_renderer_canvas_CanvasGraphics.bounds.x,openfl__$internal_renderer_canvas_CanvasGraphics.bounds.y);
			openfl__$internal_renderer_canvas_CanvasGraphics.context.closePath();
		}
	}
};
openfl__$internal_renderer_canvas_CanvasGraphics.render = function(graphics,renderSession,parentTransform) {
	graphics.__update();
	if(graphics.__dirty) {
		openfl__$internal_renderer_canvas_CanvasGraphics.hitTesting = false;
		openfl__$internal_renderer_canvas_CanvasGraphics.graphics = graphics;
		openfl__$internal_renderer_canvas_CanvasGraphics.allowSmoothing = renderSession.allowSmoothing;
		openfl__$internal_renderer_canvas_CanvasGraphics.bounds = graphics.__bounds;
		var width = graphics.__width;
		var height = graphics.__height;
		if(!graphics.__visible || graphics.__commands.get_length() == 0 || openfl__$internal_renderer_canvas_CanvasGraphics.bounds == null || width < 1 || height < 1) {
			graphics.__canvas = null;
			graphics.__context = null;
			graphics.__bitmap = null;
		} else {
			if(graphics.__canvas == null) {
				graphics.__canvas = window.document.createElement("canvas");
				graphics.__context = graphics.__canvas.getContext("2d");
			}
			openfl__$internal_renderer_canvas_CanvasGraphics.context = graphics.__context;
			graphics.__canvas.width = width;
			graphics.__canvas.height = height;
			var transform = graphics.__renderTransform;
			openfl__$internal_renderer_canvas_CanvasGraphics.context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx,transform.ty);
			openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.clear();
			openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.clear();
			openfl__$internal_renderer_canvas_CanvasGraphics.hasFill = false;
			openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke = false;
			openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill = null;
			openfl__$internal_renderer_canvas_CanvasGraphics.bitmapRepeat = false;
			var data = new openfl__$internal_renderer_DrawCommandReader(graphics.__commands);
			var _g = 0;
			var _g1 = graphics.__commands.types;
			try {
				while(_g < _g1.length) {
					var type = _g1[_g];
					++_g;
					switch(type[1]) {
					case 0:case 1:case 2:
						openfl__$internal_renderer_canvas_CanvasGraphics.endFill();
						openfl__$internal_renderer_canvas_CanvasGraphics.endStroke();
						if(type == openfl__$internal_renderer_DrawCommandType.BEGIN_BITMAP_FILL) {
							var c = data.readBeginBitmapFill();
							openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.beginBitmapFill(openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_bitmap(c),openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_matrix(c),openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_repeat(c),openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_smooth(c));
							openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.beginBitmapFill(openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_bitmap(c),openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_matrix(c),openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_repeat(c),openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_smooth(c));
						} else if(type == openfl__$internal_renderer_DrawCommandType.BEGIN_GRADIENT_FILL) {
							var c1 = data.readBeginGradientFill();
							openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.beginGradientFill(openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_type(c1),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_colors(c1),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_alphas(c1),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_ratios(c1),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_matrix(c1),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_spreadMethod(c1),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_interpolationMethod(c1),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_focalPointRatio(c1));
							openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.beginGradientFill(openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_type(c1),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_colors(c1),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_alphas(c1),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_ratios(c1),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_matrix(c1),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_spreadMethod(c1),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_interpolationMethod(c1),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_focalPointRatio(c1));
						} else {
							var c2 = data.readBeginFill();
							openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.beginFill(openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$.get_color(c2),openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$.get_alpha(c2));
							openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.beginFill(openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$.get_color(c2),openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$.get_alpha(c2));
						}
						break;
					case 3:
						var c3 = data.readCubicCurveTo();
						openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.cubicCurveTo(openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlX1(c3),openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlY1(c3),openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlX2(c3),openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlY2(c3),openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_anchorX(c3),openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_anchorY(c3));
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.cubicCurveTo(openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlX1(c3),openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlY1(c3),openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlX2(c3),openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlY2(c3),openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_anchorX(c3),openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_anchorY(c3));
						break;
					case 4:
						var c4 = data.readCurveTo();
						openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.curveTo(openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_controlX(c4),openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_controlY(c4),openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_anchorX(c4),openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_anchorY(c4));
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.curveTo(openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_controlX(c4),openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_controlY(c4),openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_anchorX(c4),openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_anchorY(c4));
						break;
					case 5:
						var c5 = data.readDrawCircle();
						openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.drawCircle(openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_x(c5),openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_y(c5),openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_radius(c5));
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.drawCircle(openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_x(c5),openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_y(c5),openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_radius(c5));
						break;
					case 6:
						var c6 = data.readDrawEllipse();
						openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.drawEllipse(openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_x(c6),openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_y(c6),openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_width(c6),openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_height(c6));
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.drawEllipse(openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_x(c6),openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_y(c6),openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_width(c6),openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_height(c6));
						break;
					case 7:
						var c7 = data.readDrawRect();
						openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.drawRect(openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_x(c7),openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_y(c7),openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_width(c7),openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_height(c7));
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.drawRect(openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_x(c7),openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_y(c7),openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_width(c7),openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_height(c7));
						break;
					case 8:
						var c8 = data.readDrawRoundRect();
						openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.drawRoundRect(openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_x(c8),openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_y(c8),openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_width(c8),openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_height(c8),openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_ellipseWidth(c8),openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_ellipseHeight(c8));
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.drawRoundRect(openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_x(c8),openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_y(c8),openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_width(c8),openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_height(c8),openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_ellipseWidth(c8),openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_ellipseHeight(c8));
						break;
					case 10:
						openfl__$internal_renderer_canvas_CanvasGraphics.endFill();
						openfl__$internal_renderer_canvas_CanvasGraphics.endStroke();
						var c9 = data.readDrawTriangles();
						var v = openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$.get_vertices(c9);
						var ind = openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$.get_indices(c9);
						var uvt = openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$.get_uvtData(c9);
						var pattern = null;
						var colorFill = openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill == null;
						if(colorFill && uvt != null) {
							throw "__break__";
						}
						if(!colorFill) {
							if(uvt == null) {
								uvt = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
								var _g3 = 0;
								var _g2 = v.get_length() / 2 | 0;
								while(_g3 < _g2) {
									var i = _g3++;
									uvt.push(v.get(i * 2) / openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill.width);
									uvt.push(v.get(i * 2 + 1) / openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill.height);
								}
							}
							var normalizedUVT = openfl__$internal_renderer_canvas_CanvasGraphics.normalizeUVT(uvt,uvt.get_length() != v.get_length());
							uvt = normalizedUVT.uvt;
							if(normalizedUVT.max > 1) {
								pattern = openfl__$internal_renderer_canvas_CanvasGraphics.createTempPatternCanvas(openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill,openfl__$internal_renderer_canvas_CanvasGraphics.bitmapRepeat,openfl__$internal_renderer_canvas_CanvasGraphics.bounds.width | 0,openfl__$internal_renderer_canvas_CanvasGraphics.bounds.height | 0);
							} else {
								pattern = openfl__$internal_renderer_canvas_CanvasGraphics.createTempPatternCanvas(openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill,openfl__$internal_renderer_canvas_CanvasGraphics.bitmapRepeat,openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill.width,openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill.height);
							}
						}
						var i1 = 0;
						var l = ind.get_length();
						var a_;
						var b_;
						var c_;
						var iax;
						var iay;
						var ibx;
						var iby;
						var icx;
						var icy;
						var x1;
						var y1;
						var x2;
						var y2;
						var x3;
						var y3;
						var uvx1;
						var uvy1;
						var uvx2;
						var uvy2;
						var uvx3;
						var uvy3;
						var denom;
						var t1;
						var t2;
						var t3;
						var t4;
						var dx;
						var dy;
						while(i1 < l) {
							a_ = i1;
							b_ = i1 + 1;
							c_ = i1 + 2;
							iax = ind.get(a_) * 2;
							iay = ind.get(a_) * 2 + 1;
							ibx = ind.get(b_) * 2;
							iby = ind.get(b_) * 2 + 1;
							icx = ind.get(c_) * 2;
							icy = ind.get(c_) * 2 + 1;
							x1 = v.get(iax);
							y1 = v.get(iay);
							x2 = v.get(ibx);
							y2 = v.get(iby);
							x3 = v.get(icx);
							y3 = v.get(icy);
							switch(openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$.get_culling(c9)) {
							case 0:
								if((x2 - x1) * (y3 - y1) - (y2 - y1) * (x3 - x1) < 0) {
									i1 += 3;
									continue;
								}
								break;
							case 2:
								if(!((x2 - x1) * (y3 - y1) - (y2 - y1) * (x3 - x1) < 0)) {
									i1 += 3;
									continue;
								}
								break;
							default:
							}
							if(colorFill) {
								openfl__$internal_renderer_canvas_CanvasGraphics.context.beginPath();
								openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(x1,y1);
								openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(x2,y2);
								openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(x3,y3);
								openfl__$internal_renderer_canvas_CanvasGraphics.context.closePath();
								if(!openfl__$internal_renderer_canvas_CanvasGraphics.hitTesting) {
									openfl__$internal_renderer_canvas_CanvasGraphics.context.fill();
								}
								i1 += 3;
								continue;
							}
							openfl__$internal_renderer_canvas_CanvasGraphics.context.save();
							openfl__$internal_renderer_canvas_CanvasGraphics.context.beginPath();
							openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(x1,y1);
							openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(x2,y2);
							openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(x3,y3);
							openfl__$internal_renderer_canvas_CanvasGraphics.context.closePath();
							openfl__$internal_renderer_canvas_CanvasGraphics.context.clip();
							uvx1 = uvt.get(iax) * pattern.width;
							uvx2 = uvt.get(ibx) * pattern.width;
							uvx3 = uvt.get(icx) * pattern.width;
							uvy1 = uvt.get(iay) * pattern.height;
							uvy2 = uvt.get(iby) * pattern.height;
							uvy3 = uvt.get(icy) * pattern.height;
							denom = uvx1 * (uvy3 - uvy2) - uvx2 * uvy3 + uvx3 * uvy2 + (uvx2 - uvx3) * uvy1;
							if(denom == 0) {
								i1 += 3;
								continue;
							}
							t1 = -(uvy1 * (x3 - x2) - uvy2 * x3 + uvy3 * x2 + (uvy2 - uvy3) * x1) / denom;
							t2 = (uvy2 * y3 + uvy1 * (y2 - y3) - uvy3 * y2 + (uvy3 - uvy2) * y1) / denom;
							t3 = (uvx1 * (x3 - x2) - uvx2 * x3 + uvx3 * x2 + (uvx2 - uvx3) * x1) / denom;
							t4 = -(uvx2 * y3 + uvx1 * (y2 - y3) - uvx3 * y2 + (uvx3 - uvx2) * y1) / denom;
							dx = (uvx1 * (uvy3 * x2 - uvy2 * x3) + uvy1 * (uvx2 * x3 - uvx3 * x2) + (uvx3 * uvy2 - uvx2 * uvy3) * x1) / denom;
							dy = (uvx1 * (uvy3 * y2 - uvy2 * y3) + uvy1 * (uvx2 * y3 - uvx3 * y2) + (uvx3 * uvy2 - uvx2 * uvy3) * y1) / denom;
							openfl__$internal_renderer_canvas_CanvasGraphics.context.transform(t1,t2,t3,t4,dx,dy);
							openfl__$internal_renderer_canvas_CanvasGraphics.context.drawImage(pattern,0,0);
							openfl__$internal_renderer_canvas_CanvasGraphics.context.restore();
							i1 += 3;
						}
						break;
					case 11:
						data.readEndFill();
						openfl__$internal_renderer_canvas_CanvasGraphics.endFill();
						openfl__$internal_renderer_canvas_CanvasGraphics.endStroke();
						openfl__$internal_renderer_canvas_CanvasGraphics.hasFill = false;
						openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill = null;
						break;
					case 12:
						var c10 = data.readLineBitmapStyle();
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.lineBitmapStyle(openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$.get_bitmap(c10),openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$.get_matrix(c10),openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$.get_repeat(c10),openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$.get_smooth(c10));
						break;
					case 13:
						var c11 = data.readLineGradientStyle();
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.lineGradientStyle(openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_type(c11),openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_colors(c11),openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_alphas(c11),openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_ratios(c11),openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_matrix(c11),openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_spreadMethod(c11),openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_interpolationMethod(c11),openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_focalPointRatio(c11));
						break;
					case 14:
						var c12 = data.readLineStyle();
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.lineStyle(openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_thickness(c12),openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_color(c12),openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_alpha(c12),openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_pixelHinting(c12),openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_scaleMode(c12),openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_caps(c12),openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_joints(c12),openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_miterLimit(c12));
						break;
					case 15:
						var c13 = data.readLineTo();
						openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.lineTo(openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.get_x(c13),openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.get_y(c13));
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.lineTo(openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.get_x(c13),openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.get_y(c13));
						break;
					case 16:
						var c14 = data.readMoveTo();
						openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.moveTo(openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_x(c14),openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_y(c14));
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.moveTo(openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_x(c14),openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_y(c14));
						break;
					default:
						data.skip(type);
					}
				}
			} catch( e ) { if( e != "__break__" ) throw e; }
			if(openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.get_length() > 0) {
				openfl__$internal_renderer_canvas_CanvasGraphics.endFill();
			}
			if(openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.get_length() > 0) {
				openfl__$internal_renderer_canvas_CanvasGraphics.endStroke();
			}
			data.destroy();
			graphics.__bitmap = openfl_display_BitmapData.fromCanvas(graphics.__canvas);
		}
		graphics.set___dirty(false);
	}
};
openfl__$internal_renderer_canvas_CanvasGraphics.renderMask = function(graphics,renderSession) {
	if(graphics.__commands.get_length() != 0) {
		openfl__$internal_renderer_canvas_CanvasGraphics.context = renderSession.context;
		var data = new openfl__$internal_renderer_DrawCommandReader(graphics.__commands);
		var _g = 0;
		var _g1 = graphics.__commands.types;
		while(_g < _g1.length) {
			var type = _g1[_g];
			++_g;
			switch(type[1]) {
			case 3:
				var c = data.readCubicCurveTo();
				openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlX1(c),openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlY1(c),openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlX2(c),openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlY2(c),openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_anchorX(c),openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_anchorY(c));
				openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_anchorX(c);
				openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_anchorY(c);
				break;
			case 4:
				var c1 = data.readCurveTo();
				openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_controlX(c1),openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_controlY(c1),openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_anchorX(c1),openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_anchorY(c1));
				openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_anchorX(c1);
				openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_anchorY(c1);
				break;
			case 5:
				var c2 = data.readDrawCircle();
				openfl__$internal_renderer_canvas_CanvasGraphics.context.arc(openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_x(c2),openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_y(c2),openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_radius(c2),0,Math.PI * 2,true);
				break;
			case 6:
				var c3 = data.readDrawEllipse();
				var x = openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_x(c3);
				var y = openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_y(c3);
				var width = openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_width(c3);
				var height = openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_height(c3);
				x -= 0;
				y -= 0;
				var ox = width / 2 * .5522848;
				var oy = height / 2 * .5522848;
				var xe = x + width;
				var ye = y + height;
				var xm = x + width / 2;
				var ym = y + height / 2;
				openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(x,ym);
				openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(x,ym - oy,xm - ox,y,xm,y);
				openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(xm + ox,y,xe,ym - oy,xe,ym);
				openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(xe,ym + oy,xm + ox,ye,xm,ye);
				openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(xm - ox,ye,x,ym + oy,x,ym);
				break;
			case 7:
				var c4 = data.readDrawRect();
				openfl__$internal_renderer_canvas_CanvasGraphics.context.rect(openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_x(c4),openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_y(c4),openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_width(c4),openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_height(c4));
				break;
			case 8:
				var c5 = data.readDrawRoundRect();
				openfl__$internal_renderer_canvas_CanvasGraphics.drawRoundRect(openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_x(c5),openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_y(c5),openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_width(c5),openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_height(c5),openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_ellipseWidth(c5),openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_ellipseHeight(c5));
				break;
			case 15:
				var c6 = data.readLineTo();
				openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.get_x(c6),openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.get_y(c6));
				openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.get_x(c6);
				openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.get_y(c6);
				break;
			case 16:
				var c7 = data.readMoveTo();
				openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_x(c7),openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_y(c7));
				openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_x(c7);
				openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_y(c7);
				break;
			default:
				data.skip(type);
			}
		}
		data.destroy();
	}
};
openfl__$internal_renderer_canvas_CanvasGraphics.setSmoothing = function(smooth) {
	if(!openfl__$internal_renderer_canvas_CanvasGraphics.allowSmoothing) {
		smooth = false;
	}
	if(openfl__$internal_renderer_canvas_CanvasGraphics.context.imageSmoothingEnabled != smooth) {
		openfl__$internal_renderer_canvas_CanvasGraphics.context.mozImageSmoothingEnabled = smooth;
		openfl__$internal_renderer_canvas_CanvasGraphics.context.msImageSmoothingEnabled = smooth;
		openfl__$internal_renderer_canvas_CanvasGraphics.context.imageSmoothingEnabled = smooth;
	}
};
var openfl__$internal_renderer_canvas_CanvasMaskManager = function(renderSession) {
	openfl__$internal_renderer_AbstractMaskManager.call(this,renderSession);
};
$hxClasses["openfl._internal.renderer.canvas.CanvasMaskManager"] = openfl__$internal_renderer_canvas_CanvasMaskManager;
openfl__$internal_renderer_canvas_CanvasMaskManager.__name__ = ["openfl","_internal","renderer","canvas","CanvasMaskManager"];
openfl__$internal_renderer_canvas_CanvasMaskManager.__super__ = openfl__$internal_renderer_AbstractMaskManager;
openfl__$internal_renderer_canvas_CanvasMaskManager.prototype = $extend(openfl__$internal_renderer_AbstractMaskManager.prototype,{
	pushMask: function(mask) {
		var context = this.renderSession.context;
		context.save();
		var transform = mask.__getRenderTransform();
		context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx,transform.ty);
		context.beginPath();
		mask.__renderCanvasMask(this.renderSession);
		context.clip();
	}
	,pushObject: function(object,handleScrollRect) {
		if(handleScrollRect == null) {
			handleScrollRect = true;
		}
		if(handleScrollRect && object.__scrollRect != null) {
			this.pushRect(object.__scrollRect,object.__renderTransform);
		}
		if(object.__mask != null) {
			this.pushMask(object.__mask);
		}
	}
	,pushRect: function(rect,transform) {
		var context = this.renderSession.context;
		context.save();
		context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx,transform.ty);
		context.beginPath();
		context.rect(rect.x,rect.y,rect.width,rect.height);
		context.clip();
	}
	,popMask: function() {
		this.renderSession.context.restore();
	}
	,popObject: function(object,handleScrollRect) {
		if(handleScrollRect == null) {
			handleScrollRect = true;
		}
		if(object.__mask != null) {
			this.popMask();
		}
		if(handleScrollRect && object.__scrollRect != null) {
			this.popRect();
		}
	}
	,popRect: function() {
		this.renderSession.context.restore();
	}
	,__class__: openfl__$internal_renderer_canvas_CanvasMaskManager
});
var openfl__$internal_renderer_canvas_CanvasRenderer = function(stage,context) {
	openfl__$internal_renderer_AbstractRenderer.call(this,stage);
	this.context = context;
	this.renderSession = new openfl__$internal_renderer_RenderSession();
	this.renderSession.context = context;
	this.renderSession.roundPixels = true;
	this.renderSession.renderer = this;
	this.renderSession.maskManager = new openfl__$internal_renderer_canvas_CanvasMaskManager(this.renderSession);
};
$hxClasses["openfl._internal.renderer.canvas.CanvasRenderer"] = openfl__$internal_renderer_canvas_CanvasRenderer;
openfl__$internal_renderer_canvas_CanvasRenderer.__name__ = ["openfl","_internal","renderer","canvas","CanvasRenderer"];
openfl__$internal_renderer_canvas_CanvasRenderer.__super__ = openfl__$internal_renderer_AbstractRenderer;
openfl__$internal_renderer_canvas_CanvasRenderer.prototype = $extend(openfl__$internal_renderer_AbstractRenderer.prototype,{
	context: null
	,clear: function() {
		var _g = 0;
		var _g1 = this.stage.stage3Ds;
		while(_g < _g1.get_length()) {
			var stage3D = _g1.get(_g);
			++_g;
			stage3D.__renderCanvas(this.stage,this.renderSession);
		}
	}
	,render: function() {
		this.renderSession.allowSmoothing = this.stage.quality != 2;
		this.context.setTransform(1,0,0,1,0,0);
		this.context.globalAlpha = 1;
		if(!this.stage.__transparent && this.stage.__clearBeforeRender) {
			this.context.fillStyle = this.stage.__colorString;
			this.context.fillRect(0,0,this.stage.stageWidth,this.stage.stageHeight);
		} else if(this.stage.__transparent && this.stage.__clearBeforeRender) {
			this.context.clearRect(0,0,this.stage.stageWidth,this.stage.stageHeight);
		}
		this.stage.__renderCanvas(this.renderSession);
	}
	,__class__: openfl__$internal_renderer_canvas_CanvasRenderer
});
var openfl__$internal_renderer_canvas_CanvasShape = function() { };
$hxClasses["openfl._internal.renderer.canvas.CanvasShape"] = openfl__$internal_renderer_canvas_CanvasShape;
openfl__$internal_renderer_canvas_CanvasShape.__name__ = ["openfl","_internal","renderer","canvas","CanvasShape"];
openfl__$internal_renderer_canvas_CanvasShape.render = function(shape,renderSession) {
	if(!shape.__renderable || shape.__worldAlpha <= 0) {
		return;
	}
	var graphics = shape.__graphics;
	if(graphics != null) {
		openfl__$internal_renderer_canvas_CanvasGraphics.render(graphics,renderSession,shape.__renderTransform);
		if(graphics.__canvas != null) {
			var context = renderSession.context;
			var scrollRect = shape.__scrollRect;
			if(graphics.__width > 0 && graphics.__height > 0 && (scrollRect == null || scrollRect.width > 0 && scrollRect.height > 0)) {
				renderSession.maskManager.pushObject(shape);
				context.globalAlpha = shape.__worldAlpha;
				var transform = graphics.__worldTransform;
				if(renderSession.roundPixels) {
					context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx | 0,transform.ty | 0);
				} else {
					context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx,transform.ty);
				}
				context.drawImage(graphics.__canvas,0,0);
				renderSession.maskManager.popObject(shape);
			}
		}
	}
};
var openfl__$internal_renderer_canvas_CanvasTextField = function() { };
$hxClasses["openfl._internal.renderer.canvas.CanvasTextField"] = openfl__$internal_renderer_canvas_CanvasTextField;
openfl__$internal_renderer_canvas_CanvasTextField.__name__ = ["openfl","_internal","renderer","canvas","CanvasTextField"];
openfl__$internal_renderer_canvas_CanvasTextField.disableInputMode = function(textEngine) {
};
openfl__$internal_renderer_canvas_CanvasTextField.enableInputMode = function(textEngine) {
	textEngine.__cursorPosition = -1;
	if(textEngine.__hiddenInput == null) {
		textEngine.__hiddenInput = window.document.createElement("input");
		var hiddenInput = textEngine.__hiddenInput;
		hiddenInput.type = "text";
		hiddenInput.style.position = "absolute";
		hiddenInput.style.opacity = "0";
		hiddenInput.style.color = "transparent";
		hiddenInput.style.left = "0px";
		hiddenInput.style.top = "50%";
		if(new EReg("(iPad|iPhone|iPod).*OS 8_","gi").match(window.navigator.userAgent)) {
			hiddenInput.style.fontSize = "0px";
			hiddenInput.style.width = "0px";
			hiddenInput.style.height = "0px";
		} else {
			hiddenInput.style.width = "1px";
			hiddenInput.style.height = "1px";
		}
		hiddenInput.style.pointerEvents = "none";
		hiddenInput.style.zIndex = "-10000000";
		if(textEngine.maxChars > 0) {
			hiddenInput.maxLength = textEngine.maxChars;
		}
		window.document.body.appendChild(hiddenInput);
		hiddenInput.value = textEngine.text;
	}
};
openfl__$internal_renderer_canvas_CanvasTextField.render = function(textField,renderSession,transform) {
	var textEngine = textField.__textEngine;
	var bounds = textEngine.bounds;
	var graphics = textField.__graphics;
	if(textField.__dirty) {
		textField.__updateLayout();
		if(graphics.__bounds == null) {
			graphics.__bounds = new openfl_geom_Rectangle();
		}
		graphics.__bounds.copyFrom(bounds);
	}
	graphics.__update();
	if(textField.__dirty || graphics.__dirty) {
		var width = graphics.__width;
		var height = graphics.__height;
		if((textEngine.text == null || textEngine.text == "") && !textEngine.background && !textEngine.border && !textEngine.__hasFocus && (textEngine.type != 1 || !textEngine.selectable) || (textEngine.width <= 0 || textEngine.height <= 0) && textEngine.autoSize != 2) {
			textField.__graphics.__canvas = null;
			textField.__graphics.__context = null;
			textField.__graphics.__bitmap = null;
			textField.__graphics.set___dirty(false);
			textField.__dirty = false;
		} else {
			if(textField.__graphics.__canvas == null) {
				textField.__graphics.__canvas = window.document.createElement("canvas");
				textField.__graphics.__context = textField.__graphics.__canvas.getContext("2d");
			}
			openfl__$internal_renderer_canvas_CanvasTextField.context = graphics.__context;
			graphics.__canvas.width = width;
			graphics.__canvas.height = height;
			var transform1 = graphics.__renderTransform;
			if(renderSession.roundPixels) {
				openfl__$internal_renderer_canvas_CanvasTextField.context.setTransform(transform1.a,transform1.b,transform1.c,transform1.d,transform1.tx | 0,transform1.ty | 0);
			} else {
				openfl__$internal_renderer_canvas_CanvasTextField.context.setTransform(transform1.a,transform1.b,transform1.c,transform1.d,transform1.tx,transform1.ty);
			}
			if(textEngine.text != null && textEngine.text != "" || textEngine.__hasFocus) {
				var text = textEngine.text;
				if(!renderSession.allowSmoothing || textEngine.antiAliasType == 0 && textEngine.sharpness == 400) {
					graphics.__context.mozImageSmoothingEnabled = false;
					graphics.__context.msImageSmoothingEnabled = false;
					graphics.__context.imageSmoothingEnabled = false;
				} else {
					graphics.__context.mozImageSmoothingEnabled = true;
					graphics.__context.msImageSmoothingEnabled = true;
					graphics.__context.imageSmoothingEnabled = true;
				}
				if(textEngine.border || textEngine.background) {
					openfl__$internal_renderer_canvas_CanvasTextField.context.rect(0.5,0.5,bounds.width - 1,bounds.height - 1);
					if(textEngine.background) {
						var tmp = StringTools.hex(textEngine.backgroundColor,6);
						openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle = "#" + tmp;
						openfl__$internal_renderer_canvas_CanvasTextField.context.fill();
					}
					if(textEngine.border) {
						openfl__$internal_renderer_canvas_CanvasTextField.context.lineWidth = 1;
						var tmp1 = StringTools.hex(textEngine.borderColor,6);
						openfl__$internal_renderer_canvas_CanvasTextField.context.strokeStyle = "#" + tmp1;
						openfl__$internal_renderer_canvas_CanvasTextField.context.stroke();
					}
				}
				openfl__$internal_renderer_canvas_CanvasTextField.context.textBaseline = "top";
				openfl__$internal_renderer_canvas_CanvasTextField.context.textAlign = "start";
				var scrollX = -textField.get_scrollH();
				var scrollY = 0.0;
				var _g1 = 0;
				var _g = textField.get_scrollV() - 1;
				while(_g1 < _g) {
					var i = _g1++;
					scrollY -= textEngine.lineHeights.get(i);
				}
				var advance;
				var offsetY = 0.0;
				var applyHack = new EReg("(iPad|iPhone|iPod|Firefox)","g").match(window.navigator.userAgent);
				var _g2 = 0;
				var _g11 = textEngine.layoutGroups;
				while(_g2 < _g11.get_length()) {
					var group = _g11.get(_g2);
					++_g2;
					if(group.lineIndex < textField.get_scrollV() - 1) {
						continue;
					}
					if(group.lineIndex > textField.get_scrollV() + textEngine.bottomScrollV - 2) {
						break;
					}
					openfl__$internal_renderer_canvas_CanvasTextField.context.font = openfl__$internal_text_TextEngine.getFont(group.format);
					var tmp2 = StringTools.hex(group.format.color,6);
					openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle = "#" + tmp2;
					if(applyHack) {
						offsetY = group.format.size * 0.185;
					}
					haxe_Log.trace(scrollY,{ fileName : "CanvasTextField.hx", lineNumber : 249, className : "openfl._internal.renderer.canvas.CanvasTextField", methodName : "render"});
					haxe_Log.trace(textField.get_scrollV(),{ fileName : "CanvasTextField.hx", lineNumber : 250, className : "openfl._internal.renderer.canvas.CanvasTextField", methodName : "render"});
					openfl__$internal_renderer_canvas_CanvasTextField.context.fillText(text.substring(group.startIndex,group.endIndex),group.offsetX + scrollX,group.offsetY + offsetY + scrollY);
					if(textField.__caretIndex > -1 && textEngine.selectable) {
						if(textField.__selectionIndex == textField.__caretIndex) {
							if(textField.__showCursor && group.startIndex <= textField.__caretIndex && group.endIndex >= textField.__caretIndex) {
								advance = 0.0;
								var _g3 = 0;
								var _g21 = textField.__caretIndex - group.startIndex;
								while(_g3 < _g21) {
									var i1 = _g3++;
									if(group.advances.length <= i1) {
										break;
									}
									advance += group.advances[i1];
								}
								openfl__$internal_renderer_canvas_CanvasTextField.context.fillRect(group.offsetX + advance,group.offsetY,1,group.height);
							}
						} else if(group.startIndex <= textField.__caretIndex && group.endIndex >= textField.__caretIndex || group.startIndex <= textField.__selectionIndex && group.endIndex >= textField.__selectionIndex) {
							var selectionStart = Math.min(textField.__selectionIndex,textField.__caretIndex) | 0;
							var selectionEnd = Math.max(textField.__selectionIndex,textField.__caretIndex) | 0;
							if(group.startIndex > selectionStart) {
								selectionStart = group.startIndex;
							}
							if(group.endIndex < selectionEnd) {
								selectionEnd = group.endIndex;
							}
							var start;
							var end;
							start = textField.getCharBoundaries(selectionStart);
							if(selectionEnd >= textEngine.text.length) {
								end = textField.getCharBoundaries(textEngine.text.length - 1);
								end.x += end.width + 2;
							} else {
								end = textField.getCharBoundaries(selectionEnd);
							}
							if(start != null && end != null) {
								openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle = "#000000";
								openfl__$internal_renderer_canvas_CanvasTextField.context.fillRect(start.x,start.y,end.x - start.x,group.height);
								openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle = "#FFFFFF";
								openfl__$internal_renderer_canvas_CanvasTextField.context.fillText(text.substring(selectionStart,selectionEnd),scrollX + start.x,group.offsetY + offsetY + scrollY);
							}
						}
					}
				}
			} else {
				if(textEngine.border || textEngine.background) {
					if(textEngine.border) {
						openfl__$internal_renderer_canvas_CanvasTextField.context.rect(0.5,0.5,bounds.width - 1,bounds.height - 1);
					} else {
						openfl__$internal_renderer_canvas_CanvasTextField.context.rect(0,0,bounds.width,bounds.height);
					}
					if(textEngine.background) {
						var tmp3 = StringTools.hex(textEngine.backgroundColor,6);
						openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle = "#" + tmp3;
						openfl__$internal_renderer_canvas_CanvasTextField.context.fill();
					}
					if(textEngine.border) {
						openfl__$internal_renderer_canvas_CanvasTextField.context.lineWidth = 1;
						openfl__$internal_renderer_canvas_CanvasTextField.context.lineCap = "square";
						var tmp4 = StringTools.hex(textEngine.borderColor,6);
						openfl__$internal_renderer_canvas_CanvasTextField.context.strokeStyle = "#" + tmp4;
						openfl__$internal_renderer_canvas_CanvasTextField.context.stroke();
					}
				}
				if(textField.__caretIndex > -1 && textEngine.selectable && textField.__showCursor) {
					var scrollX1 = -textField.get_scrollH();
					var scrollY1 = 0.0;
					var _g12 = 0;
					var _g4 = textField.get_scrollV() - 1;
					while(_g12 < _g4) {
						var i2 = _g12++;
						scrollY1 -= textEngine.lineHeights.get(i2);
					}
					openfl__$internal_renderer_canvas_CanvasTextField.context.beginPath();
					var tmp5 = StringTools.hex(textField.get_defaultTextFormat().color,6);
					openfl__$internal_renderer_canvas_CanvasTextField.context.strokeStyle = "#" + tmp5;
					openfl__$internal_renderer_canvas_CanvasTextField.context.moveTo(scrollX1 + 2.5,scrollY1 + 2.5);
					openfl__$internal_renderer_canvas_CanvasTextField.context.lineWidth = 1;
					openfl__$internal_renderer_canvas_CanvasTextField.context.lineTo(scrollX1 + 2.5,scrollY1 + openfl__$internal_text_TextEngine.getFormatHeight(textField.get_defaultTextFormat()) - 1);
					openfl__$internal_renderer_canvas_CanvasTextField.context.stroke();
					openfl__$internal_renderer_canvas_CanvasTextField.context.closePath();
				}
			}
			graphics.__bitmap = openfl_display_BitmapData.fromCanvas(textField.__graphics.__canvas);
			graphics.__visible = true;
			textField.__dirty = false;
			graphics.set___dirty(false);
		}
	}
};
var openfl__$internal_renderer_console_ConsoleRenderer = function(stage,ctx) {
	openfl__$internal_renderer_AbstractRenderer.call(this,stage);
	throw new js__$Boot_HaxeError("ConsoleRenderer not supported");
};
$hxClasses["openfl._internal.renderer.console.ConsoleRenderer"] = openfl__$internal_renderer_console_ConsoleRenderer;
openfl__$internal_renderer_console_ConsoleRenderer.__name__ = ["openfl","_internal","renderer","console","ConsoleRenderer"];
openfl__$internal_renderer_console_ConsoleRenderer.__super__ = openfl__$internal_renderer_AbstractRenderer;
openfl__$internal_renderer_console_ConsoleRenderer.prototype = $extend(openfl__$internal_renderer_AbstractRenderer.prototype,{
	render: function() {
	}
	,__class__: openfl__$internal_renderer_console_ConsoleRenderer
});
var openfl__$internal_renderer_dom_DOMBitmap = function() { };
$hxClasses["openfl._internal.renderer.dom.DOMBitmap"] = openfl__$internal_renderer_dom_DOMBitmap;
openfl__$internal_renderer_dom_DOMBitmap.__name__ = ["openfl","_internal","renderer","dom","DOMBitmap"];
openfl__$internal_renderer_dom_DOMBitmap.render = function(bitmap,renderSession) {
	if(bitmap.stage != null && bitmap.__worldVisible && bitmap.__renderable && bitmap.bitmapData != null && bitmap.bitmapData.__isValid) {
		if(bitmap.bitmapData.image.buffer.__srcImage != null) {
			openfl__$internal_renderer_dom_DOMBitmap.renderImage(bitmap,renderSession);
		} else {
			openfl__$internal_renderer_dom_DOMBitmap.renderCanvas(bitmap,renderSession);
		}
	} else {
		if(bitmap.__image != null) {
			renderSession.element.removeChild(bitmap.__image);
			bitmap.__image = null;
			bitmap.__style = null;
		}
		if(bitmap.__canvas != null) {
			renderSession.element.removeChild(bitmap.__canvas);
			bitmap.__canvas = null;
			bitmap.__style = null;
		}
	}
};
openfl__$internal_renderer_dom_DOMBitmap.renderCanvas = function(bitmap,renderSession) {
	if(bitmap.__image != null) {
		renderSession.element.removeChild(bitmap.__image);
		bitmap.__image = null;
	}
	if(bitmap.__canvas == null) {
		bitmap.__canvas = window.document.createElement("canvas");
		bitmap.__context = bitmap.__canvas.getContext("2d");
		if(!renderSession.allowSmoothing || !bitmap.smoothing) {
			bitmap.__context.mozImageSmoothingEnabled = false;
			bitmap.__context.msImageSmoothingEnabled = false;
			bitmap.__context.imageSmoothingEnabled = false;
		}
		openfl__$internal_renderer_dom_DOMRenderer.initializeElement(bitmap,bitmap.__canvas,renderSession);
	}
	lime_graphics_utils_ImageCanvasUtil.convertToCanvas(bitmap.bitmapData.image);
	bitmap.__canvas.width = bitmap.bitmapData.width;
	bitmap.__canvas.height = bitmap.bitmapData.height;
	bitmap.__context.globalAlpha = bitmap.__worldAlpha;
	bitmap.__context.drawImage(bitmap.bitmapData.image.buffer.__srcCanvas,0,0);
	openfl__$internal_renderer_dom_DOMRenderer.applyStyle(bitmap,renderSession,true,false,true);
};
openfl__$internal_renderer_dom_DOMBitmap.renderImage = function(bitmap,renderSession) {
	if(bitmap.__canvas != null) {
		renderSession.element.removeChild(bitmap.__canvas);
		bitmap.__canvas = null;
	}
	if(bitmap.__image == null) {
		bitmap.__image = window.document.createElement("img");
		bitmap.__image.src = bitmap.bitmapData.image.buffer.__srcImage.src;
		openfl__$internal_renderer_dom_DOMRenderer.initializeElement(bitmap,bitmap.__image,renderSession);
	}
	openfl__$internal_renderer_dom_DOMRenderer.applyStyle(bitmap,renderSession,true,true,true);
};
var openfl__$internal_renderer_dom_DOMDisplayObject = function() { };
$hxClasses["openfl._internal.renderer.dom.DOMDisplayObject"] = openfl__$internal_renderer_dom_DOMDisplayObject;
openfl__$internal_renderer_dom_DOMDisplayObject.__name__ = ["openfl","_internal","renderer","dom","DOMDisplayObject"];
openfl__$internal_renderer_dom_DOMDisplayObject.render = function(displayObject,renderSession) {
	if(displayObject.opaqueBackground == null && displayObject.__graphics == null) {
		return;
	}
	if(!displayObject.__renderable || displayObject.__worldAlpha <= 0) {
		return;
	}
	displayObject.opaqueBackground != null && displayObject.get_width() > 0 && displayObject.get_height() > 0;
	if(displayObject.__graphics != null) {
		var graphics = displayObject.__graphics;
		if(displayObject.stage != null && displayObject.__worldVisible && displayObject.__renderable && graphics != null) {
			if(graphics.__dirty || displayObject.__worldAlphaChanged || displayObject.__canvas == null && graphics.__canvas != null) {
				var matrix = openfl_geom_Matrix.__temp;
				matrix.identity();
				openfl__$internal_renderer_canvas_CanvasGraphics.render(graphics,renderSession,matrix);
				if(graphics.__canvas != null) {
					if(displayObject.__canvas == null) {
						displayObject.__canvas = window.document.createElement("canvas");
						displayObject.__context = displayObject.__canvas.getContext("2d");
						openfl__$internal_renderer_dom_DOMRenderer.initializeElement(displayObject,displayObject.__canvas,renderSession);
					}
					displayObject.__canvas.width = graphics.__canvas.width;
					displayObject.__canvas.height = graphics.__canvas.height;
					displayObject.__context.globalAlpha = displayObject.__worldAlpha;
					displayObject.__context.drawImage(graphics.__canvas,0,0);
				} else if(displayObject.__canvas != null) {
					renderSession.element.removeChild(displayObject.__canvas);
					displayObject.__canvas = null;
					displayObject.__style = null;
				}
			}
			if(displayObject.__canvas != null) {
				if(displayObject.__worldTransformChanged || graphics.__transformDirty) {
					graphics.__transformDirty = false;
					var transform = openfl_geom_Matrix.__temp;
					transform.identity();
					transform.translate(graphics.__bounds.x,graphics.__bounds.y);
					transform.concat(displayObject.__renderTransform);
					displayObject.__style.setProperty(renderSession.transformProperty,renderSession.roundPixels ? "matrix3d(" + transform.a + ", " + transform.b + ", 0, 0, " + transform.c + ", " + transform.d + ", 0, 0, 0, 0, 1, 0, " + (transform.tx | 0) + ", " + (transform.ty | 0) + ", 0, 1)" : "matrix3d(" + transform.a + ", " + transform.b + ", 0, 0, " + transform.c + ", " + transform.d + ", 0, 0, 0, 0, 1, 0, " + transform.tx + ", " + transform.ty + ", 0, 1)",null);
				}
				openfl__$internal_renderer_dom_DOMRenderer.applyStyle(displayObject,renderSession,false,false,true);
			}
		} else if(displayObject.__canvas != null) {
			renderSession.element.removeChild(displayObject.__canvas);
			displayObject.__canvas = null;
			displayObject.__style = null;
		}
	}
};
var openfl__$internal_renderer_dom_DOMMaskManager = function(renderSession) {
	openfl__$internal_renderer_AbstractMaskManager.call(this,renderSession);
};
$hxClasses["openfl._internal.renderer.dom.DOMMaskManager"] = openfl__$internal_renderer_dom_DOMMaskManager;
openfl__$internal_renderer_dom_DOMMaskManager.__name__ = ["openfl","_internal","renderer","dom","DOMMaskManager"];
openfl__$internal_renderer_dom_DOMMaskManager.__super__ = openfl__$internal_renderer_AbstractMaskManager;
openfl__$internal_renderer_dom_DOMMaskManager.prototype = $extend(openfl__$internal_renderer_AbstractMaskManager.prototype,{
	pushMask: function(mask) {
	}
	,pushObject: function(object,handleScrollRect) {
		if(handleScrollRect == null) {
			handleScrollRect = true;
		}
		if(object.__mask != null) {
			this.renderSession.maskManager.pushMask(object.__mask);
		}
	}
	,pushRect: function(rect,transform) {
	}
	,popMask: function() {
	}
	,popObject: function(object,handleScrollRect) {
		if(handleScrollRect == null) {
			handleScrollRect = true;
		}
		if(object.__mask != null) {
			this.renderSession.maskManager.popMask();
		}
	}
	,__class__: openfl__$internal_renderer_dom_DOMMaskManager
});
var openfl__$internal_renderer_dom_DOMRenderer = function(stage,element) {
	openfl__$internal_renderer_AbstractRenderer.call(this,stage);
	this.element = element;
	this.renderSession = new openfl__$internal_renderer_RenderSession();
	this.renderSession.element = element;
	this.renderSession.roundPixels = true;
	var prefix = (function () {
		  var styles = window.getComputedStyle(document.documentElement, ''),
			pre = (Array.prototype.slice
			  .call(styles)
			  .join('') 
			  .match(/-(moz|webkit|ms)-/) || (styles.OLink === '' && ['', 'o'])
			)[1],
			dom = ('WebKit|Moz|MS|O').match(new RegExp('(' + pre + ')', 'i'))[1];
		  return {
			dom: dom,
			lowercase: pre,
			css: '-' + pre + '-',
			js: pre[0].toUpperCase() + pre.substr(1)
		  };
		})();
	this.renderSession.vendorPrefix = prefix.lowercase;
	this.renderSession.transformProperty = prefix.lowercase == "webkit" ? "-webkit-transform" : "transform";
	this.renderSession.transformOriginProperty = prefix.lowercase == "webkit" ? "-webkit-transform-origin" : "transform-origin";
	this.renderSession.maskManager = new openfl__$internal_renderer_dom_DOMMaskManager(this.renderSession);
	this.renderSession.renderer = this;
};
$hxClasses["openfl._internal.renderer.dom.DOMRenderer"] = openfl__$internal_renderer_dom_DOMRenderer;
openfl__$internal_renderer_dom_DOMRenderer.__name__ = ["openfl","_internal","renderer","dom","DOMRenderer"];
openfl__$internal_renderer_dom_DOMRenderer.applyStyle = function(displayObject,renderSession,setTransform,setAlpha,setClip) {
	var style = displayObject.__style;
	if(setTransform && displayObject.__worldTransformChanged) {
		var _this = displayObject.__renderTransform;
		style.setProperty(renderSession.transformProperty,renderSession.roundPixels ? "matrix3d(" + _this.a + ", " + _this.b + ", 0, 0, " + _this.c + ", " + _this.d + ", 0, 0, 0, 0, 1, 0, " + (_this.tx | 0) + ", " + (_this.ty | 0) + ", 0, 1)" : "matrix3d(" + _this.a + ", " + _this.b + ", 0, 0, " + _this.c + ", " + _this.d + ", 0, 0, 0, 0, 1, 0, " + _this.tx + ", " + _this.ty + ", 0, 1)",null);
	}
	if(displayObject.__worldZ != ++renderSession.z) {
		displayObject.__worldZ = renderSession.z;
		style.setProperty("z-index",displayObject.__worldZ == null ? "null" : "" + displayObject.__worldZ,null);
	}
	if(setAlpha && displayObject.__worldAlphaChanged) {
		if(displayObject.__worldAlpha < 1) {
			style.setProperty("opacity",displayObject.__worldAlpha == null ? "null" : "" + displayObject.__worldAlpha,null);
		} else {
			style.removeProperty("opacity");
		}
	}
	if(setClip && displayObject.__worldClipChanged) {
		if(displayObject.__worldClip == null) {
			style.removeProperty("clip");
		} else {
			var clip = openfl_geom_Rectangle.__temp;
			var matrix = openfl_geom_Matrix.__temp;
			matrix.copyFrom(displayObject.__renderTransform);
			matrix.invert();
			displayObject.__worldClip.__transform(clip,matrix);
			style.setProperty("clip","rect(" + clip.y + "px, " + clip.get_right() + "px, " + clip.get_bottom() + "px, " + clip.x + "px)",null);
		}
	}
};
openfl__$internal_renderer_dom_DOMRenderer.initializeElement = function(displayObject,element,renderSession) {
	var style = displayObject.__style = element.style;
	style.setProperty("position","absolute",null);
	style.setProperty("top","0",null);
	style.setProperty("left","0",null);
	style.setProperty(renderSession.transformOriginProperty,"0 0 0",null);
	renderSession.element.appendChild(element);
	displayObject.__worldAlphaChanged = true;
	displayObject.__worldClipChanged = true;
	displayObject.__worldTransformChanged = true;
	displayObject.__worldVisibleChanged = true;
	displayObject.__worldZ = -1;
};
openfl__$internal_renderer_dom_DOMRenderer.__super__ = openfl__$internal_renderer_AbstractRenderer;
openfl__$internal_renderer_dom_DOMRenderer.prototype = $extend(openfl__$internal_renderer_AbstractRenderer.prototype,{
	element: null
	,clear: function() {
		var _g = 0;
		var _g1 = this.stage.stage3Ds;
		while(_g < _g1.get_length()) {
			var stage3D = _g1.get(_g);
			++_g;
			stage3D.__renderDOM(this.stage,this.renderSession);
		}
	}
	,render: function() {
		this.renderSession.allowSmoothing = this.stage.quality != 2;
		if(!this.stage.__transparent) {
			this.element.style.background = this.stage.__colorString;
		} else {
			this.element.style.background = "none";
		}
		this.renderSession.z = 1;
		this.stage.__renderDOM(this.renderSession);
	}
	,__class__: openfl__$internal_renderer_dom_DOMRenderer
});
var openfl__$internal_renderer_dom_DOMShape = function() { };
$hxClasses["openfl._internal.renderer.dom.DOMShape"] = openfl__$internal_renderer_dom_DOMShape;
openfl__$internal_renderer_dom_DOMShape.__name__ = ["openfl","_internal","renderer","dom","DOMShape"];
openfl__$internal_renderer_dom_DOMShape.render = function(shape,renderSession) {
	var graphics = shape.__graphics;
	if(shape.stage != null && shape.__worldVisible && shape.__renderable && graphics != null) {
		if(graphics.__dirty || shape.__worldAlphaChanged || shape.__canvas == null && graphics.__canvas != null) {
			var matrix = openfl_geom_Matrix.__temp;
			matrix.identity();
			openfl__$internal_renderer_canvas_CanvasGraphics.render(graphics,renderSession,matrix);
			if(graphics.__canvas != null) {
				if(shape.__canvas == null) {
					shape.__canvas = window.document.createElement("canvas");
					shape.__context = shape.__canvas.getContext("2d");
					openfl__$internal_renderer_dom_DOMRenderer.initializeElement(shape,shape.__canvas,renderSession);
				}
				shape.__canvas.width = graphics.__canvas.width;
				shape.__canvas.height = graphics.__canvas.height;
				shape.__context.globalAlpha = shape.__worldAlpha;
				shape.__context.drawImage(graphics.__canvas,0,0);
			} else if(shape.__canvas != null) {
				renderSession.element.removeChild(shape.__canvas);
				shape.__canvas = null;
				shape.__style = null;
			}
		}
		if(shape.__canvas != null) {
			if(shape.__worldTransformChanged || graphics.__transformDirty) {
				graphics.__transformDirty = false;
				var transform = openfl_geom_Matrix.__temp;
				transform.identity();
				transform.translate(graphics.__bounds.x,graphics.__bounds.y);
				transform.concat(shape.__renderTransform);
				shape.__style.setProperty(renderSession.transformProperty,renderSession.roundPixels ? "matrix3d(" + transform.a + ", " + transform.b + ", 0, 0, " + transform.c + ", " + transform.d + ", 0, 0, 0, 0, 1, 0, " + (transform.tx | 0) + ", " + (transform.ty | 0) + ", 0, 1)" : "matrix3d(" + transform.a + ", " + transform.b + ", 0, 0, " + transform.c + ", " + transform.d + ", 0, 0, 0, 0, 1, 0, " + transform.tx + ", " + transform.ty + ", 0, 1)",null);
			}
			openfl__$internal_renderer_dom_DOMRenderer.applyStyle(shape,renderSession,false,false,true);
		}
	} else if(shape.__canvas != null) {
		renderSession.element.removeChild(shape.__canvas);
		shape.__canvas = null;
		shape.__style = null;
	}
};
var openfl__$internal_renderer_dom_DOMTextField = function() { };
$hxClasses["openfl._internal.renderer.dom.DOMTextField"] = openfl__$internal_renderer_dom_DOMTextField;
openfl__$internal_renderer_dom_DOMTextField.__name__ = ["openfl","_internal","renderer","dom","DOMTextField"];
openfl__$internal_renderer_dom_DOMTextField.measureText = function(textField) {
	var textEngine = textField.__textEngine;
	var div = textField.__div;
	if(div == null) {
		div = window.document.createElement("div");
		var _this_r = new RegExp("\n","g".split("u").join(""));
		div.innerHTML = textEngine.text.replace(_this_r,"<br>");
		div.style.setProperty("font",openfl__$internal_text_TextEngine.getFont(textField.__textFormat),null);
		div.style.setProperty("pointer-events","none",null);
		div.style.position = "absolute";
		div.style.top = "110%";
		window.document.body.appendChild(div);
	}
	textEngine.__measuredWidth = div.clientWidth;
	if(textField.__div == null) {
		div.style.width = Std.string(textEngine.width - 4) + "px";
	}
	textEngine.__measuredHeight = div.clientHeight;
	if(textField.__div == null) {
		window.document.body.removeChild(div);
	}
};
openfl__$internal_renderer_dom_DOMTextField.render = function(textField,renderSession) {
	var textEngine = textField.__textEngine;
	if(textField.stage != null && textField.__worldVisible && textField.__renderable) {
		if(textField.__dirty || textField.__div == null) {
			if(textEngine.text != "" || textEngine.background || textEngine.border || textEngine.type == 1) {
				if(textField.__div == null) {
					textField.__div = window.document.createElement("div");
					openfl__$internal_renderer_dom_DOMRenderer.initializeElement(textField,textField.__div,renderSession);
					textField.__style.setProperty("outline","none",null);
					textField.__div.addEventListener("input",function(event) {
						event.preventDefault();
						if(textField.get_htmlText() != textField.__div.innerHTML) {
							textField.set_htmlText(textField.__div.innerHTML);
							textField.__dirty = false;
						}
					},true);
				}
				if(!textEngine.multiline) {
					textField.__style.setProperty("white-space","nowrap",null);
				} else {
					textField.__style.setProperty("word-wrap","break-word",null);
				}
				textField.__style.setProperty("overflow","hidden",null);
				if(textEngine.selectable) {
					textField.__style.setProperty("cursor","text",null);
				} else {
					textField.__style.setProperty("cursor","inherit",null);
				}
				textField.__div.contentEditable = textEngine.type == 1;
				var style = textField.__style;
				textField.__div.innerHTML = textEngine.text;
				if(textEngine.background) {
					style.setProperty("background-color","#" + StringTools.hex(textEngine.backgroundColor,6),null);
				} else {
					style.removeProperty("background-color");
				}
				if(textEngine.border) {
					style.setProperty("border","solid 1px #" + StringTools.hex(textEngine.borderColor,6),null);
				} else {
					style.removeProperty("border");
				}
				style.setProperty("font",openfl__$internal_text_TextEngine.getFont(textField.__textFormat),null);
				style.setProperty("color","#" + StringTools.hex(textField.__textFormat.color,6),null);
				if(textEngine.autoSize != 2) {
					style.setProperty("width","auto",null);
				} else {
					style.setProperty("width",textEngine.width + "px",null);
				}
				style.setProperty("height",textEngine.height + "px",null);
				var _g = textField.__textFormat.align;
				switch(_g) {
				case 0:
					style.setProperty("text-align","center",null);
					break;
				case 4:
					style.setProperty("text-align","right",null);
					break;
				default:
					style.setProperty("text-align","left",null);
				}
				textField.__dirty = false;
			} else if(textField.__div != null) {
				renderSession.element.removeChild(textField.__div);
				textField.__div = null;
			}
		}
		if(textField.__div != null) {
			openfl__$internal_renderer_dom_DOMRenderer.applyStyle(textField,renderSession,true,true,false);
		}
	} else if(textField.__div != null) {
		renderSession.element.removeChild(textField.__div);
		textField.__div = null;
		textField.__style = null;
	}
};
var openfl__$internal_renderer_opengl_GLBitmap = function() { };
$hxClasses["openfl._internal.renderer.opengl.GLBitmap"] = openfl__$internal_renderer_opengl_GLBitmap;
openfl__$internal_renderer_opengl_GLBitmap.__name__ = ["openfl","_internal","renderer","opengl","GLBitmap"];
openfl__$internal_renderer_opengl_GLBitmap.render = function(bitmap,renderSession) {
	if(!bitmap.__renderable || bitmap.__worldAlpha <= 0) {
		return;
	}
	if(bitmap.bitmapData != null && bitmap.bitmapData.__isValid) {
		var renderer = renderSession.renderer;
		var gl = renderSession.gl;
		renderSession.blendModeManager.setBlendMode(bitmap.get_blendMode());
		renderSession.maskManager.pushObject(bitmap);
		var shader = renderSession.filterManager.pushObject(bitmap);
		shader.get_data().uImage0.input = bitmap.bitmapData;
		var tmp = renderSession.allowSmoothing && (bitmap.smoothing || renderSession.upscaled);
		shader.get_data().uImage0.smoothing = tmp;
		shader.get_data().uMatrix.value = renderer.getMatrix(bitmap.__renderTransform);
		renderSession.shaderManager.setShader(shader);
		gl.bindBuffer(gl.ARRAY_BUFFER,bitmap.bitmapData.getBuffer(gl,bitmap.__worldAlpha));
		gl.vertexAttribPointer(shader.get_data().aPosition.index,3,gl.FLOAT,false,24,0);
		gl.vertexAttribPointer(shader.get_data().aTexCoord.index,2,gl.FLOAT,false,24,12);
		gl.vertexAttribPointer(shader.get_data().aAlpha.index,1,gl.FLOAT,false,24,20);
		gl.drawArrays(gl.TRIANGLE_STRIP,0,4);
		renderSession.maskManager.popObject(bitmap);
	}
};
var openfl__$internal_renderer_opengl_GLBlendModeManager = function(gl) {
	openfl__$internal_renderer_AbstractBlendModeManager.call(this);
	this.gl = gl;
	this.setBlendMode(10);
	gl.enable(gl.BLEND);
};
$hxClasses["openfl._internal.renderer.opengl.GLBlendModeManager"] = openfl__$internal_renderer_opengl_GLBlendModeManager;
openfl__$internal_renderer_opengl_GLBlendModeManager.__name__ = ["openfl","_internal","renderer","opengl","GLBlendModeManager"];
openfl__$internal_renderer_opengl_GLBlendModeManager.__super__ = openfl__$internal_renderer_AbstractBlendModeManager;
openfl__$internal_renderer_opengl_GLBlendModeManager.prototype = $extend(openfl__$internal_renderer_AbstractBlendModeManager.prototype,{
	currentBlendMode: null
	,gl: null
	,setBlendMode: function(blendMode) {
		if(this.currentBlendMode == blendMode) {
			return;
		}
		this.currentBlendMode = blendMode;
		switch(blendMode) {
		case 0:
			this.gl.blendEquation(this.gl.FUNC_ADD);
			this.gl.blendFunc(this.gl.ONE,this.gl.ONE);
			break;
		case 9:
			this.gl.blendEquation(this.gl.FUNC_ADD);
			this.gl.blendFunc(this.gl.DST_COLOR,this.gl.ONE_MINUS_SRC_ALPHA);
			break;
		case 12:
			this.gl.blendEquation(this.gl.FUNC_ADD);
			this.gl.blendFunc(this.gl.ONE,this.gl.ONE_MINUS_SRC_COLOR);
			break;
		case 14:
			this.gl.blendEquation(this.gl.FUNC_REVERSE_SUBTRACT);
			this.gl.blendFunc(this.gl.ONE,this.gl.ONE);
			break;
		default:
			this.gl.blendEquation(this.gl.FUNC_ADD);
			this.gl.blendFunc(this.gl.ONE,this.gl.ONE_MINUS_SRC_ALPHA);
		}
	}
	,__class__: openfl__$internal_renderer_opengl_GLBlendModeManager
});
var openfl__$internal_renderer_opengl_GLDisplayObject = function() { };
$hxClasses["openfl._internal.renderer.opengl.GLDisplayObject"] = openfl__$internal_renderer_opengl_GLDisplayObject;
openfl__$internal_renderer_opengl_GLDisplayObject.__name__ = ["openfl","_internal","renderer","opengl","GLDisplayObject"];
openfl__$internal_renderer_opengl_GLDisplayObject.render = function(displayObject,renderSession) {
	if(displayObject.opaqueBackground == null && displayObject.__graphics == null) {
		return;
	}
	if(!displayObject.__renderable || displayObject.__worldAlpha <= 0) {
		return;
	}
	if(displayObject.opaqueBackground != null && displayObject.get_width() > 0 && displayObject.get_height() > 0) {
		renderSession.maskManager.pushObject(displayObject);
		var gl = renderSession.gl;
		var rect = openfl_geom_Rectangle.__temp;
		rect.setTo(0,0,displayObject.get_width(),displayObject.get_height());
		renderSession.maskManager.pushRect(rect,displayObject.__renderTransform);
		var color = displayObject.opaqueBackground;
		gl.clearColor((color >>> 16 & 255) / 255,(color >>> 8 & 255) / 255,(color & 255) / 255,1);
		gl.clear(gl.COLOR_BUFFER_BIT);
		renderSession.maskManager.popRect();
		renderSession.maskManager.popObject(displayObject);
	}
	if(displayObject.__graphics != null) {
		if(!(!displayObject.__renderable || displayObject.__worldAlpha <= 0)) {
			var graphics = displayObject.__graphics;
			if(graphics != null) {
				openfl__$internal_renderer_canvas_CanvasGraphics.render(graphics,renderSession,displayObject.__renderTransform);
				if(graphics.__bitmap != null && graphics.__visible) {
					var renderer = renderSession.renderer;
					var gl1 = renderSession.gl;
					renderSession.blendModeManager.setBlendMode(displayObject.get_blendMode());
					renderSession.maskManager.pushObject(displayObject);
					var shader = renderSession.filterManager.pushObject(displayObject);
					shader.get_data().uImage0.input = graphics.__bitmap;
					shader.get_data().uImage0.smoothing = renderSession.allowSmoothing;
					shader.get_data().uMatrix.value = renderer.getMatrix(graphics.__worldTransform);
					renderSession.shaderManager.setShader(shader);
					gl1.bindBuffer(gl1.ARRAY_BUFFER,graphics.__bitmap.getBuffer(gl1,displayObject.__worldAlpha));
					gl1.vertexAttribPointer(shader.get_data().aPosition.index,3,gl1.FLOAT,false,24,0);
					gl1.vertexAttribPointer(shader.get_data().aTexCoord.index,2,gl1.FLOAT,false,24,12);
					gl1.vertexAttribPointer(shader.get_data().aAlpha.index,1,gl1.FLOAT,false,24,20);
					gl1.drawArrays(gl1.TRIANGLE_STRIP,0,4);
					renderSession.maskManager.popObject(displayObject);
				}
			}
		}
	}
};
var openfl__$internal_renderer_opengl_GLFilterManager = function(renderSession) {
	openfl__$internal_renderer_AbstractFilterManager.call(this,renderSession);
	this.gl = renderSession.gl;
};
$hxClasses["openfl._internal.renderer.opengl.GLFilterManager"] = openfl__$internal_renderer_opengl_GLFilterManager;
openfl__$internal_renderer_opengl_GLFilterManager.__name__ = ["openfl","_internal","renderer","opengl","GLFilterManager"];
openfl__$internal_renderer_opengl_GLFilterManager.__super__ = openfl__$internal_renderer_AbstractFilterManager;
openfl__$internal_renderer_opengl_GLFilterManager.prototype = $extend(openfl__$internal_renderer_AbstractFilterManager.prototype,{
	gl: null
	,pushObject: function(object) {
		if(object.__filters != null && object.__filters.length > 0) {
			return object.__filters[0].__initShader(this.renderSession);
		} else {
			return this.renderSession.shaderManager.defaultShader;
		}
	}
	,popObject: function(object) {
	}
	,__class__: openfl__$internal_renderer_opengl_GLFilterManager
});
var openfl__$internal_renderer_opengl_GLMaskManager = function(renderSession) {
	openfl__$internal_renderer_AbstractMaskManager.call(this,renderSession);
	this.gl = renderSession.gl;
	this.clipRects = [];
	this.numClipRects = 0;
	this.tempRect = new openfl_geom_Rectangle();
};
$hxClasses["openfl._internal.renderer.opengl.GLMaskManager"] = openfl__$internal_renderer_opengl_GLMaskManager;
openfl__$internal_renderer_opengl_GLMaskManager.__name__ = ["openfl","_internal","renderer","opengl","GLMaskManager"];
openfl__$internal_renderer_opengl_GLMaskManager.__super__ = openfl__$internal_renderer_AbstractMaskManager;
openfl__$internal_renderer_opengl_GLMaskManager.prototype = $extend(openfl__$internal_renderer_AbstractMaskManager.prototype,{
	clipRects: null
	,gl: null
	,numClipRects: null
	,tempRect: null
	,pushMask: function(mask) {
		this.pushRect(mask.getBounds(mask),mask.__getRenderTransform());
	}
	,pushObject: function(object,handleScrollRect) {
		if(handleScrollRect == null) {
			handleScrollRect = true;
		}
		if(handleScrollRect && object.__scrollRect != null) {
			this.pushRect(object.__scrollRect,object.__renderTransform);
		}
		if(object.__mask != null) {
			this.pushMask(object.__mask);
		}
	}
	,pushRect: function(rect,transform) {
		if(this.numClipRects == this.clipRects.length) {
			this.clipRects[this.numClipRects] = new openfl_geom_Rectangle();
		}
		var clipRect = this.clipRects[this.numClipRects];
		rect.__transform(clipRect,transform);
		if(this.numClipRects > 0) {
			var parentClipRect = this.clipRects[this.numClipRects - 1];
			clipRect.__contract(parentClipRect.x,parentClipRect.y,parentClipRect.width,parentClipRect.height);
		}
		if(clipRect.height < 0) {
			clipRect.height = 0;
		}
		if(clipRect.width < 0) {
			clipRect.width = 0;
		}
		this.scissorRect(clipRect);
		this.numClipRects++;
	}
	,popMask: function() {
		this.popRect();
	}
	,popObject: function(object,handleScrollRect) {
		if(handleScrollRect == null) {
			handleScrollRect = true;
		}
		if(object.__mask != null) {
			this.popMask();
		}
		if(handleScrollRect && object.__scrollRect != null) {
			this.popRect();
		}
	}
	,popRect: function() {
		if(this.numClipRects > 0) {
			this.numClipRects--;
			if(this.numClipRects > 0) {
				this.scissorRect(this.clipRects[this.numClipRects - 1]);
			} else {
				this.scissorRect();
			}
		}
	}
	,scissorRect: function(rect) {
		if(rect != null) {
			var renderer = this.renderSession.renderer;
			this.gl.enable(this.gl.SCISSOR_TEST);
			var clipRect = this.tempRect;
			rect.__transform(clipRect,renderer.displayMatrix);
			var width = Math.ceil(clipRect.width);
			var height = Math.ceil(clipRect.height);
			if(width < 0) {
				width = 0;
			}
			if(height < 0) {
				height = 0;
			}
			this.gl.scissor(Math.floor(clipRect.x),Math.floor(renderer.height - clipRect.y - clipRect.height),width,height);
		} else {
			this.gl.disable(this.gl.SCISSOR_TEST);
		}
	}
	,__class__: openfl__$internal_renderer_opengl_GLMaskManager
});
var openfl__$internal_renderer_opengl_GLRenderer = function(stage,gl) {
	openfl__$internal_renderer_AbstractRenderer.call(this,stage);
	this.gl = gl;
	this.matrix = lime_math__$Matrix4_Matrix4_$Impl_$._new();
	this.values = [];
	this.renderSession = new openfl__$internal_renderer_RenderSession();
	this.renderSession.gl = gl;
	this.renderSession.roundPixels = true;
	this.renderSession.renderer = this;
	this.renderSession.blendModeManager = new openfl__$internal_renderer_opengl_GLBlendModeManager(gl);
	this.renderSession.filterManager = new openfl__$internal_renderer_opengl_GLFilterManager(this.renderSession);
	this.renderSession.shaderManager = new openfl__$internal_renderer_opengl_GLShaderManager(gl);
	this.renderSession.maskManager = new openfl__$internal_renderer_opengl_GLMaskManager(this.renderSession);
	if(stage.window != null) {
		this.resize(stage.window.__width,stage.window.__height);
	}
};
$hxClasses["openfl._internal.renderer.opengl.GLRenderer"] = openfl__$internal_renderer_opengl_GLRenderer;
openfl__$internal_renderer_opengl_GLRenderer.__name__ = ["openfl","_internal","renderer","opengl","GLRenderer"];
openfl__$internal_renderer_opengl_GLRenderer.__super__ = openfl__$internal_renderer_AbstractRenderer;
openfl__$internal_renderer_opengl_GLRenderer.prototype = $extend(openfl__$internal_renderer_AbstractRenderer.prototype,{
	projection: null
	,displayHeight: null
	,displayMatrix: null
	,displayWidth: null
	,gl: null
	,matrix: null
	,offsetX: null
	,offsetY: null
	,values: null
	,clear: function() {
		if(this.stage.__transparent) {
			this.gl.clearColor(0,0,0,0);
		} else {
			this.gl.clearColor(this.stage.__colorSplit[0],this.stage.__colorSplit[1],this.stage.__colorSplit[2],1);
		}
		this.gl.clear(this.gl.COLOR_BUFFER_BIT);
		var _g = 0;
		var _g1 = this.stage.stage3Ds;
		while(_g < _g1.get_length()) {
			var stage3D = _g1.get(_g);
			++_g;
			stage3D.__renderGL(this.stage,this.renderSession);
		}
	}
	,getMatrix: function(transform) {
		var _matrix = openfl_geom_Matrix.__temp;
		_matrix.copyFrom(transform);
		_matrix.concat(this.displayMatrix);
		if(this.renderSession.roundPixels) {
			_matrix.tx = Math.round(_matrix.tx);
			_matrix.ty = Math.round(_matrix.ty);
		}
		lime_math__$Matrix4_Matrix4_$Impl_$.identity(this.matrix);
		lime_math__$Matrix4_Matrix4_$Impl_$.set(this.matrix,0,_matrix.a);
		lime_math__$Matrix4_Matrix4_$Impl_$.set(this.matrix,1,_matrix.b);
		lime_math__$Matrix4_Matrix4_$Impl_$.set(this.matrix,4,_matrix.c);
		lime_math__$Matrix4_Matrix4_$Impl_$.set(this.matrix,5,_matrix.d);
		lime_math__$Matrix4_Matrix4_$Impl_$.set(this.matrix,12,_matrix.tx);
		lime_math__$Matrix4_Matrix4_$Impl_$.set(this.matrix,13,_matrix.ty);
		lime_math__$Matrix4_Matrix4_$Impl_$.append(this.matrix,this.projection);
		var _g = 0;
		while(_g < 16) {
			var i = _g++;
			this.values[i] = lime_math__$Matrix4_Matrix4_$Impl_$.get(this.matrix,i);
		}
		return this.values;
	}
	,render: function() {
		this.gl.viewport(this.offsetX,this.offsetY,this.displayWidth,this.displayHeight);
		this.renderSession.allowSmoothing = this.stage.quality != 2;
		this.renderSession.upscaled = this.displayMatrix.a != 1 || this.displayMatrix.d != 1;
		this.stage.__renderGL(this.renderSession);
		if(this.offsetX > 0 || this.offsetY > 0) {
			this.gl.clearColor(0,0,0,1);
			this.gl.enable(this.gl.SCISSOR_TEST);
			if(this.offsetX > 0) {
				this.gl.scissor(0,0,this.offsetX,this.height);
				this.gl.clear(this.gl.COLOR_BUFFER_BIT);
				this.gl.scissor(this.offsetX + this.displayWidth,0,this.width,this.height);
				this.gl.clear(this.gl.COLOR_BUFFER_BIT);
			}
			if(this.offsetY > 0) {
				this.gl.scissor(0,0,this.width,this.offsetY);
				this.gl.clear(this.gl.COLOR_BUFFER_BIT);
				this.gl.scissor(0,this.offsetY + this.displayHeight,this.width,this.height);
				this.gl.clear(this.gl.COLOR_BUFFER_BIT);
			}
			this.gl.disable(this.gl.SCISSOR_TEST);
		}
	}
	,resize: function(width,height) {
		openfl__$internal_renderer_AbstractRenderer.prototype.resize.call(this,width,height);
		this.displayMatrix = this.stage.__displayMatrix;
		var _this = this.displayMatrix;
		this.offsetX = Math.round(0 * _this.a + 0 * _this.c + _this.tx);
		var _this1 = this.displayMatrix;
		this.offsetY = Math.round(0 * _this1.b + 0 * _this1.d + _this1.ty);
		var _this2 = this.displayMatrix;
		this.displayWidth = Math.round(this.stage.stageWidth * _this2.a + 0 * _this2.c + _this2.tx - this.offsetX);
		var _this3 = this.displayMatrix;
		this.displayHeight = Math.round(0 * _this3.b + this.stage.stageHeight * _this3.d + _this3.ty - this.offsetY);
		this.projection = lime_math__$Matrix4_Matrix4_$Impl_$.createOrtho(this.offsetX,this.displayWidth + this.offsetX,this.displayHeight + this.offsetY,this.offsetY,-1000,1000);
	}
	,__class__: openfl__$internal_renderer_opengl_GLRenderer
});
var openfl__$internal_renderer_opengl_GLShaderManager = function(gl) {
	openfl__$internal_renderer_AbstractShaderManager.call(this);
	this.gl = gl;
	this.defaultShader = new openfl_display_Shader();
	this.defaultShader.gl = gl;
	this.defaultShader.__init();
};
$hxClasses["openfl._internal.renderer.opengl.GLShaderManager"] = openfl__$internal_renderer_opengl_GLShaderManager;
openfl__$internal_renderer_opengl_GLShaderManager.__name__ = ["openfl","_internal","renderer","opengl","GLShaderManager"];
openfl__$internal_renderer_opengl_GLShaderManager.__super__ = openfl__$internal_renderer_AbstractShaderManager;
openfl__$internal_renderer_opengl_GLShaderManager.prototype = $extend(openfl__$internal_renderer_AbstractShaderManager.prototype,{
	gl: null
	,setShader: function(shader) {
		if(this.currentShader == shader) {
			if(this.currentShader != null) {
				this.currentShader.__update();
			}
			return;
		}
		if(this.currentShader != null) {
			this.currentShader.__disable();
		}
		if(shader == null) {
			this.currentShader = null;
			this.gl.useProgram(null);
			return;
		}
		this.currentShader = shader;
		if(this.currentShader.gl == null) {
			this.currentShader.gl = this.gl;
			this.currentShader.__init();
		}
		this.gl.useProgram(shader.glProgram);
		this.currentShader.__enable();
		this.currentShader.__update();
	}
	,__class__: openfl__$internal_renderer_opengl_GLShaderManager
});
var openfl__$internal_renderer_opengl_GLShape = function() { };
$hxClasses["openfl._internal.renderer.opengl.GLShape"] = openfl__$internal_renderer_opengl_GLShape;
openfl__$internal_renderer_opengl_GLShape.__name__ = ["openfl","_internal","renderer","opengl","GLShape"];
openfl__$internal_renderer_opengl_GLShape.render = function(shape,renderSession) {
	if(!shape.__renderable || shape.__worldAlpha <= 0) {
		return;
	}
	var graphics = shape.__graphics;
	if(graphics != null) {
		openfl__$internal_renderer_canvas_CanvasGraphics.render(graphics,renderSession,shape.__renderTransform);
		if(graphics.__bitmap != null && graphics.__visible) {
			var renderer = renderSession.renderer;
			var gl = renderSession.gl;
			renderSession.blendModeManager.setBlendMode(shape.get_blendMode());
			renderSession.maskManager.pushObject(shape);
			var shader = renderSession.filterManager.pushObject(shape);
			shader.get_data().uImage0.input = graphics.__bitmap;
			shader.get_data().uImage0.smoothing = renderSession.allowSmoothing;
			shader.get_data().uMatrix.value = renderer.getMatrix(graphics.__worldTransform);
			renderSession.shaderManager.setShader(shader);
			gl.bindBuffer(gl.ARRAY_BUFFER,graphics.__bitmap.getBuffer(gl,shape.__worldAlpha));
			gl.vertexAttribPointer(shader.get_data().aPosition.index,3,gl.FLOAT,false,24,0);
			gl.vertexAttribPointer(shader.get_data().aTexCoord.index,2,gl.FLOAT,false,24,12);
			gl.vertexAttribPointer(shader.get_data().aAlpha.index,1,gl.FLOAT,false,24,20);
			gl.drawArrays(gl.TRIANGLE_STRIP,0,4);
			renderSession.maskManager.popObject(shape);
		}
	}
};
var openfl__$internal_renderer_opengl_GLStage3D = function() { };
$hxClasses["openfl._internal.renderer.opengl.GLStage3D"] = openfl__$internal_renderer_opengl_GLStage3D;
openfl__$internal_renderer_opengl_GLStage3D.__name__ = ["openfl","_internal","renderer","opengl","GLStage3D"];
openfl__$internal_renderer_opengl_GLStage3D.render = function(stage3D,renderSession) {
	if(stage3D.context3D != null) {
		renderSession.blendModeManager.setBlendMode(null);
		if(renderSession.shaderManager.currentShader != null) {
			renderSession.shaderManager.setShader(null);
			if(stage3D.context3D.__program != null) {
				stage3D.context3D.__program.__use();
			}
		}
	}
};
var openfl__$internal_stage3D_AGALConverter = function() { };
$hxClasses["openfl._internal.stage3D.AGALConverter"] = openfl__$internal_stage3D_AGALConverter;
openfl__$internal_stage3D_AGALConverter.__name__ = ["openfl","_internal","stage3D","AGALConverter"];
openfl__$internal_stage3D_AGALConverter.prefixFromType = function(regType,programType) {
	switch(regType) {
	case 0:
		return "va";
	case 1:
		if(programType == openfl__$internal_stage3D__$AGALConverter_ProgramType.VERTEX) {
			return "vc";
		} else {
			return "fc";
		}
		break;
	case 2:
		if(programType == openfl__$internal_stage3D__$AGALConverter_ProgramType.VERTEX) {
			return "vt";
		} else {
			return "ft";
		}
		break;
	case 3:
		return "output_";
	case 4:
		return "v";
	case 5:
		return "sampler";
	default:
		throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError("Invalid data!"));
	}
};
openfl__$internal_stage3D_AGALConverter.readUInt64 = function(byteArray) {
	var low = byteArray.readInt();
	return new haxe__$Int64__$_$_$Int64(byteArray.readInt(),low);
};
openfl__$internal_stage3D_AGALConverter.convertToGLSL = function(agal,samplerState) {
	agal.position = 0;
	agal.__endian = 1;
	var magic = agal.readByte() & 255;
	if(magic == 176) {
		return agal.readUTF();
	}
	if(magic != 160) {
		throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError("Magic value must be 0xA0, may not be AGAL"));
	}
	if(agal.readInt() != 1) {
		throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError("Version must be 1"));
	}
	if((agal.readByte() & 255) != 161) {
		throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError("Shader type ID must be 0xA1"));
	}
	var programType = (agal.readByte() & 255) == 0 ? openfl__$internal_stage3D__$AGALConverter_ProgramType.VERTEX : openfl__$internal_stage3D__$AGALConverter_ProgramType.FRAGMENT;
	var map = new openfl__$internal_stage3D_RegisterMap();
	var sb_b = "";
	while(agal.position < openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(agal)) {
		var opcode = agal.readInt();
		var dest = agal.readUnsignedInt();
		var source1 = openfl__$internal_stage3D_AGALConverter.readUInt64(agal);
		var source2 = openfl__$internal_stage3D_AGALConverter.readUInt64(agal);
		var dr = openfl__$internal_stage3D__$AGALConverter_DestRegister.parse(dest,programType);
		var sr1 = openfl__$internal_stage3D__$AGALConverter_SourceRegister.parse(source1,programType,dr.mask);
		var sr2 = openfl__$internal_stage3D__$AGALConverter_SourceRegister.parse(source2,programType,dr.mask);
		sb_b += "\t";
		switch(opcode) {
		case 0:
			sb_b += Std.string(dr.toGLSL() + " = " + sr1.toGLSL() + "; // mov");
			map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 1:
			sb_b += Std.string(dr.toGLSL() + " = " + sr1.toGLSL() + " + " + sr2.toGLSL() + "; // add");
			map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr2,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 2:
			sb_b += Std.string(dr.toGLSL() + " = " + sr1.toGLSL() + " - " + sr2.toGLSL() + "; // sub");
			map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr2,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 3:
			sb_b += Std.string(dr.toGLSL() + " = " + sr1.toGLSL() + " * " + sr2.toGLSL() + "; // mul");
			map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr2,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 4:
			sb_b += Std.string(dr.toGLSL() + " = " + sr1.toGLSL() + " / " + sr2.toGLSL() + "; // div");
			map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr2,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 5:
			sb_b += Std.string(dr.toGLSL() + " = vec4(1) / " + sr1.toGLSL() + ", " + sr2.toGLSL() + "; // rcp (untested)");
			map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 6:
			sb_b += Std.string(dr.toGLSL() + " = min(" + sr1.toGLSL() + ", " + sr2.toGLSL() + "); // min");
			map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr2,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 7:
			sb_b += Std.string(dr.toGLSL() + " = max(" + sr1.toGLSL() + ", " + sr2.toGLSL() + "); // max");
			map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr2,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 8:
			sb_b += Std.string(dr.toGLSL() + " = fract(" + sr1.toGLSL() + "); // frc");
			map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 9:
			sb_b += Std.string(dr.toGLSL() + " = sqrt(" + sr1.toGLSL() + "); // sqrt");
			map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 10:
			sb_b += Std.string(dr.toGLSL() + " = inversesqrt(" + sr1.toGLSL() + "); // rsq");
			map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 11:
			sb_b += Std.string(dr.toGLSL() + " = pow(" + sr1.toGLSL() + ", " + sr2.toGLSL() + "); // pow");
			map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr2,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 12:
			sb_b += Std.string(dr.toGLSL() + " = log2(" + sr1.toGLSL() + "); // log");
			map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 13:
			sb_b += Std.string(dr.toGLSL() + " = exp2(" + sr1.toGLSL() + "); // exp");
			map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 14:
			sb_b += Std.string(dr.toGLSL() + " = normalize(" + sr1.toGLSL() + "); // normalize");
			map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 15:
			sb_b += Std.string(dr.toGLSL() + " = sin(" + sr1.toGLSL() + "); // sin");
			map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 16:
			sb_b += Std.string(dr.toGLSL() + " = cos(" + sr1.toGLSL() + "); // cos");
			map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 17:
			sr1.sourceMask = sr2.sourceMask = 7;
			sb_b += Std.string(dr.toGLSL() + " = cross(vec3(" + sr1.toGLSL() + "), vec3(" + sr2.toGLSL() + ")); // crs");
			map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr2,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 18:
			sr1.sourceMask = sr2.sourceMask = 7;
			sb_b += Std.string(dr.toGLSL() + " = vec4(dot(vec3(" + sr1.toGLSL() + "), vec3(" + sr2.toGLSL() + ")))" + dr.getWriteMask() + "; // dp3");
			map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr2,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 19:
			sr1.sourceMask = sr2.sourceMask = 15;
			sb_b += Std.string(dr.toGLSL() + " = vec4(dot(vec4(" + sr1.toGLSL() + "), vec4(" + sr2.toGLSL() + ")))" + dr.getWriteMask() + "; // dp4");
			map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr2,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 20:
			sb_b += Std.string(dr.toGLSL() + " = abs(" + sr1.toGLSL() + "); // abs");
			map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 21:
			sb_b += Std.string(dr.toGLSL() + " = -" + sr1.toGLSL() + "; // neg");
			map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 22:
			sb_b += Std.string(dr.toGLSL() + " = clamp(" + sr1.toGLSL() + ", 0.0, 1.0); // saturate");
			map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 23:
			var existingUsage = map.getRegisterUsage(sr2);
			if(existingUsage != openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4 && existingUsage != openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4_ARRAY) {
				sb_b += Std.string(dr.toGLSL() + " = " + sr1.toGLSL() + " * mat3(" + sr2.toGLSL(false) + "); // m33");
				map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
				map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
				map.addSR(sr2,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.MATRIX_4_4);
			} else {
				sr1.sourceMask = sr2.sourceMask = 7;
				sb_b += Std.string(dr.toGLSL() + " = vec3(" + "dot(" + sr1.toGLSL(true) + "," + sr2.toGLSL(true,0) + "), " + "dot(" + sr1.toGLSL(true) + "," + sr2.toGLSL(true,1) + ")," + "dot(" + sr1.toGLSL(true) + "," + sr2.toGLSL(true,2) + ")); // m33");
				map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
				map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
				map.addSR(sr2,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4,0);
				map.addSR(sr2,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4,1);
				map.addSR(sr2,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4,2);
			}
			break;
		case 24:
			var existingUsage1 = map.getRegisterUsage(sr2);
			if(existingUsage1 != openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4 && existingUsage1 != openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4_ARRAY) {
				sb_b += Std.string(dr.toGLSL() + " = " + sr1.toGLSL() + " * " + sr2.toGLSL(false) + "; // m44");
				map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
				map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
				map.addSR(sr2,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.MATRIX_4_4);
			} else {
				sr1.sourceMask = sr2.sourceMask = 15;
				sb_b += Std.string(dr.toGLSL() + " = vec4(" + "dot(" + sr1.toGLSL(true) + "," + sr2.toGLSL(true,0) + "), " + "dot(" + sr1.toGLSL(true) + "," + sr2.toGLSL(true,1) + "), " + "dot(" + sr1.toGLSL(true) + "," + sr2.toGLSL(true,2) + "), " + "dot(" + sr1.toGLSL(true) + "," + sr2.toGLSL(true,3) + ")); // m44");
				map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
				map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
				map.addSR(sr2,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4,0);
				map.addSR(sr2,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4,1);
				map.addSR(sr2,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4,2);
				map.addSR(sr2,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4,3);
			}
			break;
		case 25:
			dr.mask &= 7;
			var existingUsage2 = map.getRegisterUsage(sr2);
			if(existingUsage2 != openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4 && existingUsage2 != openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4_ARRAY) {
				sb_b += Std.string(dr.toGLSL() + " = " + sr1.toGLSL() + " * " + sr2.toGLSL(false) + "; // m34");
				map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
				map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
				map.addSR(sr2,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.MATRIX_4_4);
			} else {
				sr1.sourceMask = sr2.sourceMask = 15;
				sb_b += Std.string(dr.toGLSL() + " = vec3(" + "dot(" + sr1.toGLSL(true) + "," + sr2.toGLSL(true,0) + "), " + "dot(" + sr1.toGLSL(true) + "," + sr2.toGLSL(true,1) + ")," + "dot(" + sr1.toGLSL(true) + "," + sr2.toGLSL(true,2) + ")); // m34");
				map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
				map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
				map.addSR(sr2,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4,0);
				map.addSR(sr2,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4,1);
				map.addSR(sr2,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4,2);
			}
			break;
		case 39:
			sr1.sourceMask = 15;
			sb_b += Std.string("if (any(lessThan(" + sr1.toGLSL() + ", vec4(0)))) discard;");
			map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 40:
			var sampler = openfl__$internal_stage3D__$AGALConverter_SamplerRegister.parse(source2,programType);
			switch(sampler.d) {
			case 0:
				sr1.sourceMask = 3;
				map.addSaR(sampler,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.SAMPLER_2D);
				sb_b += Std.string(dr.toGLSL() + " = texture2D(" + sampler.toGLSL() + ", " + sr1.toGLSL() + "); // tex");
				break;
			case 1:
				sr1.sourceMask = 7;
				sb_b += Std.string(dr.toGLSL() + " = textureCube(" + sampler.toGLSL() + ", " + sr1.toGLSL() + "); // tex");
				map.addSaR(sampler,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.SAMPLER_CUBE);
				break;
			}
			map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			if(samplerState != null) {
				samplerState[sampler.n] = sampler.toSamplerState();
			}
			break;
		case 41:
			sr1.sourceMask = sr2.sourceMask = 15;
			sb_b += Std.string(dr.toGLSL() + " = vec4(greaterThanEqual(" + sr1.toGLSL() + ", " + sr2.toGLSL() + "))" + dr.getWriteMask() + "; // ste");
			map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr2,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 42:
			sr1.sourceMask = sr2.sourceMask = 15;
			sb_b += Std.string(dr.toGLSL() + " = vec4(lessThan(" + sr1.toGLSL() + ", " + sr2.toGLSL() + "))" + dr.getWriteMask() + "; // slt");
			map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr2,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 44:
			sr1.sourceMask = sr2.sourceMask = 15;
			sb_b += Std.string(dr.toGLSL() + " = vec4(equal(" + sr1.toGLSL() + ", " + sr2.toGLSL() + "))" + dr.getWriteMask() + "; // seq");
			map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr2,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 45:
			sr1.sourceMask = sr2.sourceMask = 15;
			sb_b += Std.string(dr.toGLSL() + " = vec4(notEqual(" + sr1.toGLSL() + ", " + sr2.toGLSL() + "))" + dr.getWriteMask() + "; // sne");
			map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr2,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		default:
			throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError("Opcode " + opcode));
		}
		sb_b += "\n";
	}
	var glsl_b = "";
	glsl_b = "" + Std.string("// AGAL " + (programType == openfl__$internal_stage3D__$AGALConverter_ProgramType.VERTEX ? "vertex" : "fragment") + " shader\n");
	glsl_b += Std.string("#version " + 100 + "\n");
	glsl_b += "precision highp float;\n";
	glsl_b += Std.string(map.toGLSL(false));
	if(programType == openfl__$internal_stage3D__$AGALConverter_ProgramType.VERTEX) {
		glsl_b += "uniform vec4 vcPositionScale;\n";
	}
	glsl_b += "void main() {\n";
	glsl_b += Std.string(map.toGLSL(true));
	glsl_b += Std.string(sb_b);
	if(programType == openfl__$internal_stage3D__$AGALConverter_ProgramType.VERTEX) {
		glsl_b += "\tgl_Position *= vcPositionScale;\n";
	}
	glsl_b += "}\n";
	return glsl_b;
};
var openfl__$internal_stage3D__$AGALConverter_DestRegister = function() {
};
$hxClasses["openfl._internal.stage3D._AGALConverter.DestRegister"] = openfl__$internal_stage3D__$AGALConverter_DestRegister;
openfl__$internal_stage3D__$AGALConverter_DestRegister.__name__ = ["openfl","_internal","stage3D","_AGALConverter","DestRegister"];
openfl__$internal_stage3D__$AGALConverter_DestRegister.parse = function(v,programType) {
	var dr = new openfl__$internal_stage3D__$AGALConverter_DestRegister();
	dr.programType = programType;
	dr.type = v >>> 24 & 15;
	dr.mask = v >>> 16 & 15;
	dr.n = v & 65535;
	return dr;
};
openfl__$internal_stage3D__$AGALConverter_DestRegister.prototype = {
	mask: null
	,n: null
	,programType: null
	,type: null
	,getWriteMask: function() {
		var str = ".";
		if((this.mask & 1) != 0) {
			str = "." + "x";
		}
		if((this.mask & 2) != 0) {
			str += "y";
		}
		if((this.mask & 4) != 0) {
			str += "z";
		}
		if((this.mask & 8) != 0) {
			str += "w";
		}
		return str;
	}
	,toGLSL: function(useMask) {
		if(useMask == null) {
			useMask = true;
		}
		var str;
		if(this.type == 3) {
			if(this.programType == openfl__$internal_stage3D__$AGALConverter_ProgramType.VERTEX) {
				str = "gl_Position";
			} else {
				str = "gl_FragColor";
			}
		} else {
			str = openfl__$internal_stage3D_AGALConverter.prefixFromType(this.type,this.programType) + this.n;
		}
		if(useMask && this.mask != 15) {
			str += this.getWriteMask();
		}
		return str;
	}
	,__class__: openfl__$internal_stage3D__$AGALConverter_DestRegister
};
var openfl__$internal_stage3D__$AGALConverter_ProgramType = $hxClasses["openfl._internal.stage3D._AGALConverter.ProgramType"] = { __ename__ : ["openfl","_internal","stage3D","_AGALConverter","ProgramType"], __constructs__ : ["VERTEX","FRAGMENT"] };
openfl__$internal_stage3D__$AGALConverter_ProgramType.VERTEX = ["VERTEX",0];
openfl__$internal_stage3D__$AGALConverter_ProgramType.VERTEX.toString = $estr;
openfl__$internal_stage3D__$AGALConverter_ProgramType.VERTEX.__enum__ = openfl__$internal_stage3D__$AGALConverter_ProgramType;
openfl__$internal_stage3D__$AGALConverter_ProgramType.FRAGMENT = ["FRAGMENT",1];
openfl__$internal_stage3D__$AGALConverter_ProgramType.FRAGMENT.toString = $estr;
openfl__$internal_stage3D__$AGALConverter_ProgramType.FRAGMENT.__enum__ = openfl__$internal_stage3D__$AGALConverter_ProgramType;
openfl__$internal_stage3D__$AGALConverter_ProgramType.__empty_constructs__ = [openfl__$internal_stage3D__$AGALConverter_ProgramType.VERTEX,openfl__$internal_stage3D__$AGALConverter_ProgramType.FRAGMENT];
var openfl__$internal_stage3D_RegisterMap = function() {
	this.mEntries = [];
};
$hxClasses["openfl._internal.stage3D.RegisterMap"] = openfl__$internal_stage3D_RegisterMap;
openfl__$internal_stage3D_RegisterMap.__name__ = ["openfl","_internal","stage3D","RegisterMap"];
openfl__$internal_stage3D_RegisterMap.prototype = {
	mEntries: null
	,add: function(type,name,number,usage) {
		var _g = 0;
		var _g1 = this.mEntries;
		while(_g < _g1.length) {
			var entry = _g1[_g];
			++_g;
			if(entry.type == type && entry.name == name && entry.number == number) {
				if(entry.usage != usage) {
					throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError("Cannot use register in multiple ways yet (mat4/vec4)"));
				}
				return;
			}
		}
		var entry1 = new openfl__$internal_stage3D__$AGALConverter_RegisterMapEntry();
		entry1.type = type;
		entry1.name = name;
		entry1.number = number;
		entry1.usage = usage;
		this.mEntries.push(entry1);
	}
	,addDR: function(dr,usage) {
		this.add(dr.type,dr.toGLSL(false),dr.n,usage);
	}
	,addSaR: function(sr,usage) {
		this.add(sr.type,sr.toGLSL(),sr.n,usage);
	}
	,addSR: function(sr,usage,offset) {
		if(offset == null) {
			offset = 0;
		}
		if(sr.d != 0) {
			this.add(sr.itype,openfl__$internal_stage3D_AGALConverter.prefixFromType(sr.itype,sr.programType) + sr.n,sr.n,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			this.add(sr.type,openfl__$internal_stage3D_AGALConverter.prefixFromType(sr.type,sr.programType) + sr.o,sr.o,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4_ARRAY);
			return;
		}
		this.add(sr.type,sr.toGLSL(false,offset),sr.n + offset,usage);
	}
	,getRegisterUsage: function(sr) {
		if(sr.d != 0) {
			return openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4_ARRAY;
		}
		return this.getUsage(sr.type,sr.toGLSL(false),sr.n);
	}
	,getUsage: function(type,name,number) {
		var _g = 0;
		var _g1 = this.mEntries;
		while(_g < _g1.length) {
			var entry = _g1[_g];
			++_g;
			if(entry.type == type && entry.name == name && entry.number == number) {
				return entry.usage;
			}
		}
		return openfl__$internal_stage3D__$AGALConverter_RegisterUsage.UNUSED;
	}
	,toGLSL: function(tempRegistersOnly) {
		this.mEntries.sort(function(a,b) {
			if(a.type != b.type) {
				return js_Boot.__cast(a.type , Int) - js_Boot.__cast(b.type , Int);
			} else {
				return a.number - b.number;
			}
		});
		var sb_b = "";
		var _g1 = 0;
		var _g = this.mEntries.length;
		while(_g1 < _g) {
			var i = _g1++;
			var entry = this.mEntries[i];
			if(tempRegistersOnly && entry.type != 2 || !tempRegistersOnly && entry.type == 2) {
				continue;
			}
			if(entry.type == 3) {
				continue;
			}
			switch(entry.type) {
			case 0:
				sb_b += "attribute ";
				break;
			case 1:
				sb_b += "uniform ";
				break;
			case 2:
				sb_b += "\t";
				break;
			case 3:
				break;
			case 4:
				sb_b += "varying ";
				break;
			case 5:
				sb_b += "uniform ";
				break;
			default:
				throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError());
			}
			switch(entry.usage[1]) {
			case 0:
				haxe_Log.trace("Missing switch patten: RegisterUsage.UNUSED",{ fileName : "AGALConverter.hx", lineNumber : 750, className : "openfl._internal.stage3D.RegisterMap", methodName : "toGLSL"});
				break;
			case 1:
				sb_b += "vec4 ";
				break;
			case 2:
				sb_b += "mat4 ";
				break;
			case 3:
				sb_b += "sampler2D ";
				break;
			case 4:
				haxe_Log.trace("Missing switch patten: RegisterUsage.SAMPLER_2D_ALPHA",{ fileName : "AGALConverter.hx", lineNumber : 754, className : "openfl._internal.stage3D.RegisterMap", methodName : "toGLSL"});
				break;
			case 5:
				sb_b += "samplerCube ";
				break;
			case 6:
				sb_b += "vec4 ";
				break;
			}
			if(entry.usage == openfl__$internal_stage3D__$AGALConverter_RegisterUsage.SAMPLER_2D_ALPHA) {
				sb_b += "sampler2D ";
				sb_b += Std.string(entry.name);
				sb_b += ";\n";
				sb_b += "uniform ";
				sb_b += "sampler2D ";
				sb_b += Std.string(entry.name + "_alpha");
				sb_b += ";\n";
			} else if(entry.usage == openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4_ARRAY) {
				var count = 128;
				if(i < this.mEntries.length - 1) {
					count = this.mEntries[i + 1].number - entry.number;
				}
				sb_b += Std.string(entry.name + "[" + count + "]");
				sb_b += ";\n";
			} else {
				sb_b += Std.string(entry.name);
				sb_b += ";\n";
			}
		}
		return sb_b;
	}
	,__class__: openfl__$internal_stage3D_RegisterMap
};
var openfl__$internal_stage3D__$AGALConverter_RegisterMapEntry = function() {
};
$hxClasses["openfl._internal.stage3D._AGALConverter.RegisterMapEntry"] = openfl__$internal_stage3D__$AGALConverter_RegisterMapEntry;
openfl__$internal_stage3D__$AGALConverter_RegisterMapEntry.__name__ = ["openfl","_internal","stage3D","_AGALConverter","RegisterMapEntry"];
openfl__$internal_stage3D__$AGALConverter_RegisterMapEntry.prototype = {
	name: null
	,number: null
	,type: null
	,usage: null
	,__class__: openfl__$internal_stage3D__$AGALConverter_RegisterMapEntry
};
var openfl__$internal_stage3D__$AGALConverter_RegisterUsage = $hxClasses["openfl._internal.stage3D._AGALConverter.RegisterUsage"] = { __ename__ : ["openfl","_internal","stage3D","_AGALConverter","RegisterUsage"], __constructs__ : ["UNUSED","VECTOR_4","MATRIX_4_4","SAMPLER_2D","SAMPLER_2D_ALPHA","SAMPLER_CUBE","VECTOR_4_ARRAY"] };
openfl__$internal_stage3D__$AGALConverter_RegisterUsage.UNUSED = ["UNUSED",0];
openfl__$internal_stage3D__$AGALConverter_RegisterUsage.UNUSED.toString = $estr;
openfl__$internal_stage3D__$AGALConverter_RegisterUsage.UNUSED.__enum__ = openfl__$internal_stage3D__$AGALConverter_RegisterUsage;
openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4 = ["VECTOR_4",1];
openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4.toString = $estr;
openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4.__enum__ = openfl__$internal_stage3D__$AGALConverter_RegisterUsage;
openfl__$internal_stage3D__$AGALConverter_RegisterUsage.MATRIX_4_4 = ["MATRIX_4_4",2];
openfl__$internal_stage3D__$AGALConverter_RegisterUsage.MATRIX_4_4.toString = $estr;
openfl__$internal_stage3D__$AGALConverter_RegisterUsage.MATRIX_4_4.__enum__ = openfl__$internal_stage3D__$AGALConverter_RegisterUsage;
openfl__$internal_stage3D__$AGALConverter_RegisterUsage.SAMPLER_2D = ["SAMPLER_2D",3];
openfl__$internal_stage3D__$AGALConverter_RegisterUsage.SAMPLER_2D.toString = $estr;
openfl__$internal_stage3D__$AGALConverter_RegisterUsage.SAMPLER_2D.__enum__ = openfl__$internal_stage3D__$AGALConverter_RegisterUsage;
openfl__$internal_stage3D__$AGALConverter_RegisterUsage.SAMPLER_2D_ALPHA = ["SAMPLER_2D_ALPHA",4];
openfl__$internal_stage3D__$AGALConverter_RegisterUsage.SAMPLER_2D_ALPHA.toString = $estr;
openfl__$internal_stage3D__$AGALConverter_RegisterUsage.SAMPLER_2D_ALPHA.__enum__ = openfl__$internal_stage3D__$AGALConverter_RegisterUsage;
openfl__$internal_stage3D__$AGALConverter_RegisterUsage.SAMPLER_CUBE = ["SAMPLER_CUBE",5];
openfl__$internal_stage3D__$AGALConverter_RegisterUsage.SAMPLER_CUBE.toString = $estr;
openfl__$internal_stage3D__$AGALConverter_RegisterUsage.SAMPLER_CUBE.__enum__ = openfl__$internal_stage3D__$AGALConverter_RegisterUsage;
openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4_ARRAY = ["VECTOR_4_ARRAY",6];
openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4_ARRAY.toString = $estr;
openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4_ARRAY.__enum__ = openfl__$internal_stage3D__$AGALConverter_RegisterUsage;
openfl__$internal_stage3D__$AGALConverter_RegisterUsage.__empty_constructs__ = [openfl__$internal_stage3D__$AGALConverter_RegisterUsage.UNUSED,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.MATRIX_4_4,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.SAMPLER_2D,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.SAMPLER_2D_ALPHA,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.SAMPLER_CUBE,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4_ARRAY];
var openfl__$internal_stage3D__$AGALConverter_SamplerRegister = function() {
};
$hxClasses["openfl._internal.stage3D._AGALConverter.SamplerRegister"] = openfl__$internal_stage3D__$AGALConverter_SamplerRegister;
openfl__$internal_stage3D__$AGALConverter_SamplerRegister.__name__ = ["openfl","_internal","stage3D","_AGALConverter","SamplerRegister"];
openfl__$internal_stage3D__$AGALConverter_SamplerRegister.parse = function(v,programType) {
	var sr = new openfl__$internal_stage3D__$AGALConverter_SamplerRegister();
	sr.programType = programType;
	var a;
	a = new haxe__$Int64__$_$_$Int64(v.high >> 31,v.high >> 28);
	var b = new haxe__$Int64__$_$_$Int64(0,15);
	sr.f = new haxe__$Int64__$_$_$Int64(a.high & b.high,a.low & b.low).low;
	var a1;
	a1 = new haxe__$Int64__$_$_$Int64(v.high >> 31,v.high >> 24);
	var b1 = new haxe__$Int64__$_$_$Int64(0,15);
	sr.m = new haxe__$Int64__$_$_$Int64(a1.high & b1.high,a1.low & b1.low).low;
	var a2;
	a2 = new haxe__$Int64__$_$_$Int64(v.high >> 31,v.high >> 20);
	var b2 = new haxe__$Int64__$_$_$Int64(0,15);
	sr.w = new haxe__$Int64__$_$_$Int64(a2.high & b2.high,a2.low & b2.low).low;
	var a3;
	a3 = new haxe__$Int64__$_$_$Int64(v.high >> 31,v.high >> 16);
	var b3 = new haxe__$Int64__$_$_$Int64(0,15);
	sr.s = new haxe__$Int64__$_$_$Int64(a3.high & b3.high,a3.low & b3.low).low;
	var a4;
	a4 = new haxe__$Int64__$_$_$Int64(v.high >> 31,v.high >> 12);
	var b4 = new haxe__$Int64__$_$_$Int64(0,15);
	sr.d = new haxe__$Int64__$_$_$Int64(a4.high & b4.high,a4.low & b4.low).low;
	var a5;
	a5 = new haxe__$Int64__$_$_$Int64(v.high >> 31,v.high >> 8);
	var b5 = new haxe__$Int64__$_$_$Int64(0,15);
	sr.t = new haxe__$Int64__$_$_$Int64(a5.high & b5.high,a5.low & b5.low).low;
	var a6;
	a6 = new haxe__$Int64__$_$_$Int64(v.high >> 31,v.high);
	var b6 = new haxe__$Int64__$_$_$Int64(0,15);
	sr.type = new haxe__$Int64__$_$_$Int64(a6.high & b6.high,a6.low & b6.low).low;
	var a7;
	a7 = new haxe__$Int64__$_$_$Int64(v.high >> 16,v.high << 16 | v.low >>> 16);
	var b7 = new haxe__$Int64__$_$_$Int64(0,255);
	sr.b = new haxe__$Int64__$_$_$Int64(a7.high & b7.high,a7.low & b7.low).low;
	var b8 = new haxe__$Int64__$_$_$Int64(0,65535);
	sr.n = new haxe__$Int64__$_$_$Int64(v.high & b8.high,v.low & b8.low).low;
	return sr;
};
openfl__$internal_stage3D__$AGALConverter_SamplerRegister.prototype = {
	b: null
	,d: null
	,f: null
	,m: null
	,n: null
	,programType: null
	,s: null
	,t: null
	,type: null
	,w: null
	,toGLSL: function() {
		return openfl__$internal_stage3D_AGALConverter.prefixFromType(this.type,this.programType) + this.n;
	}
	,toSamplerState: function() {
		var magFilter = 0;
		var minFilter = 0;
		var wrapModeS = 0;
		var wrapModeT = 0;
		switch(this.f) {
		case 0:
			magFilter = 9728;
			break;
		case 1:
			magFilter = 9729;
			break;
		default:
			throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError());
		}
		switch(this.m) {
		case 0:
			if(this.f != 0) {
				minFilter = 9729;
			} else {
				minFilter = 9728;
			}
			break;
		case 1:
			if(this.f != 0) {
				minFilter = 9986;
			} else {
				minFilter = 9984;
			}
			break;
		case 2:
			if(this.f != 0) {
				minFilter = 9987;
			} else {
				minFilter = 9985;
			}
			break;
		default:
			throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError());
		}
		switch(this.w) {
		case 0:
			wrapModeS = 33071;
			wrapModeT = 33071;
			break;
		case 1:
			wrapModeS = 10497;
			wrapModeT = 10497;
			break;
		default:
			throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError());
		}
		return new openfl__$internal_stage3D_SamplerState(minFilter,magFilter,wrapModeS,wrapModeT,(this.b << 24 >> 24) / 8.0,0.0);
	}
	,__class__: openfl__$internal_stage3D__$AGALConverter_SamplerRegister
};
var openfl__$internal_stage3D__$AGALConverter_SourceRegister = function() {
};
$hxClasses["openfl._internal.stage3D._AGALConverter.SourceRegister"] = openfl__$internal_stage3D__$AGALConverter_SourceRegister;
openfl__$internal_stage3D__$AGALConverter_SourceRegister.__name__ = ["openfl","_internal","stage3D","_AGALConverter","SourceRegister"];
openfl__$internal_stage3D__$AGALConverter_SourceRegister.parse = function(v,programType,sourceMask) {
	var sr = new openfl__$internal_stage3D__$AGALConverter_SourceRegister();
	sr.programType = programType;
	var a;
	a = new haxe__$Int64__$_$_$Int64(v.high >> 31,v.high >> 31);
	var b = new haxe__$Int64__$_$_$Int64(0,1);
	sr.d = new haxe__$Int64__$_$_$Int64(a.high & b.high,a.low & b.low).low;
	var a1;
	a1 = new haxe__$Int64__$_$_$Int64(v.high >> 31,v.high >> 16);
	var b1 = new haxe__$Int64__$_$_$Int64(0,3);
	sr.q = new haxe__$Int64__$_$_$Int64(a1.high & b1.high,a1.low & b1.low).low;
	var a2;
	a2 = new haxe__$Int64__$_$_$Int64(v.high >> 31,v.high >> 8);
	var b2 = new haxe__$Int64__$_$_$Int64(0,15);
	sr.itype = new haxe__$Int64__$_$_$Int64(a2.high & b2.high,a2.low & b2.low).low;
	var a3;
	a3 = new haxe__$Int64__$_$_$Int64(v.high >> 31,v.high);
	var b3 = new haxe__$Int64__$_$_$Int64(0,15);
	sr.type = new haxe__$Int64__$_$_$Int64(a3.high & b3.high,a3.low & b3.low).low;
	var a4;
	a4 = new haxe__$Int64__$_$_$Int64(v.high >> 24,v.high << 8 | v.low >>> 24);
	var b4 = new haxe__$Int64__$_$_$Int64(0,255);
	sr.s = new haxe__$Int64__$_$_$Int64(a4.high & b4.high,a4.low & b4.low).low;
	var a5;
	a5 = new haxe__$Int64__$_$_$Int64(v.high >> 16,v.high << 16 | v.low >>> 16);
	var b5 = new haxe__$Int64__$_$_$Int64(0,255);
	sr.o = new haxe__$Int64__$_$_$Int64(a5.high & b5.high,a5.low & b5.low).low;
	var b6 = new haxe__$Int64__$_$_$Int64(0,65535);
	sr.n = new haxe__$Int64__$_$_$Int64(v.high & b6.high,v.low & b6.low).low;
	sr.sourceMask = sourceMask;
	return sr;
};
openfl__$internal_stage3D__$AGALConverter_SourceRegister.prototype = {
	d: null
	,itype: null
	,n: null
	,o: null
	,programType: null
	,q: null
	,s: null
	,sourceMask: null
	,type: null
	,toGLSL: function(emitSwizzle,offset) {
		if(offset == null) {
			offset = 0;
		}
		if(emitSwizzle == null) {
			emitSwizzle = true;
		}
		if(this.type == 3) {
			if(this.programType == openfl__$internal_stage3D__$AGALConverter_ProgramType.VERTEX) {
				return "gl_Position";
			} else {
				return "gl_FragColor";
			}
		}
		var swizzle = "";
		if(this.type != 5 && !(this.s == 228 && this.sourceMask == 15)) {
			var _g = 0;
			while(_g < 4) {
				var i = _g++;
				if((this.sourceMask & 1 << i) != 0) {
					switch(this.s >> i * 2 & 3) {
					case 0:
						swizzle += "x";
						break;
					case 1:
						swizzle += "y";
						break;
					case 2:
						swizzle += "z";
						break;
					case 3:
						swizzle += "w";
						break;
					}
				}
			}
		}
		var str = openfl__$internal_stage3D_AGALConverter.prefixFromType(this.type,this.programType);
		if(this.d == 0) {
			str += this.n + offset;
		} else {
			str += this.o;
			var indexComponent = String.fromCharCode(HxOverrides.cca("x",0) + this.q);
			str += "[ int(" + (openfl__$internal_stage3D_AGALConverter.prefixFromType(this.itype,this.programType) + this.n + "." + indexComponent) + ") +" + offset + "]";
		}
		if(emitSwizzle && swizzle != "") {
			str += "." + swizzle;
		}
		return str;
	}
	,__class__: openfl__$internal_stage3D__$AGALConverter_SourceRegister
};
var openfl__$internal_stage3D_Context3DStateCache = function() {
	this._registers = openfl__$Vector_Vector_$Impl_$.toFloatVector(null,4096);
	this.clearSettings();
};
$hxClasses["openfl._internal.stage3D.Context3DStateCache"] = openfl__$internal_stage3D_Context3DStateCache;
openfl__$internal_stage3D_Context3DStateCache.__name__ = ["openfl","_internal","stage3D","Context3DStateCache"];
openfl__$internal_stage3D_Context3DStateCache.prototype = {
	_activeTexture: null
	,_activeVertexArray: null
	,_cullingMode: null
	,_depthTestCompareMode: null
	,_depthTestEnabled: null
	,_depthTestMask: null
	,_destBlendFactor: null
	,_program: null
	,_registers: null
	,_srcBlendFactor: null
	,_viewportHeight: null
	,_viewportOriginX: null
	,_viewportOriginY: null
	,_viewportWidth: null
	,clearRegisters: function() {
		var _g1 = 0;
		while(_g1 < 4096) this._registers.set(_g1++,-999999999.0);
	}
	,clearSettings: function() {
		this._srcBlendFactor = null;
		this._destBlendFactor = null;
		this._depthTestEnabled = false;
		this._depthTestMask = false;
		this._depthTestCompareMode = null;
		this._program = null;
		this._cullingMode = null;
		this._activeTexture = -1;
		this._activeVertexArray = -1;
		this._viewportOriginX = -1;
		this._viewportOriginY = -1;
		this._viewportWidth = -1;
		this._viewportHeight = -1;
		this.clearRegisters();
	}
	,updateActiveTextureSample: function(texture) {
		this._activeTexture = texture;
		return true;
	}
	,updateActiveVertexArray: function(vertexArray) {
		this._activeVertexArray = vertexArray;
		return true;
	}
	,updateBlendDestFactor: function(factor) {
		this._destBlendFactor = factor;
		return true;
	}
	,updateBlendSrcFactor: function(factor) {
		this._srcBlendFactor = factor;
		return true;
	}
	,updateCullingMode: function(cullMode) {
		this._cullingMode = cullMode;
		return true;
	}
	,updateDepthCompareMode: function(mode) {
		this._depthTestCompareMode = mode;
		return true;
	}
	,updateDepthTestEnabled: function(test) {
		this._depthTestEnabled = test;
		return true;
	}
	,updateDepthTestMask: function(mask) {
		this._depthTestMask = mask;
		return true;
	}
	,updateProgram3D: function(program3d) {
		this._program = program3d;
		return true;
	}
	,updateRegisters: function(mTemp,startRegister,numRegisters) {
		return true;
	}
	,updateViewport: function(originX,originY,width,height) {
		this._viewportOriginX = originX;
		this._viewportOriginY = originY;
		this._viewportWidth = width;
		this._viewportHeight = height;
		return true;
	}
	,__class__: openfl__$internal_stage3D_Context3DStateCache
};
var openfl__$internal_stage3D_GLUtils = function() { };
$hxClasses["openfl._internal.stage3D.GLUtils"] = openfl__$internal_stage3D_GLUtils;
openfl__$internal_stage3D_GLUtils.__name__ = ["openfl","_internal","stage3D","GLUtils"];
openfl__$internal_stage3D_GLUtils.CheckGLError = function() {
	if(!openfl__$internal_stage3D_GLUtils.debug) {
		return;
	}
	var error = lime_graphics_opengl_GL.context.getError();
	if(error != 0) {
		throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError("Error calling openGL api. Error: " + error + "\n"));
	}
};
var openfl__$internal_stage3D_SamplerState = function(minFilter,magFilter,wrapModeS,wrapModeT,lodBias,maxAniso) {
	if(maxAniso == null) {
		maxAniso = 0.0;
	}
	if(lodBias == null) {
		lodBias = 0.0;
	}
	this.minFilter = minFilter;
	this.magFilter = magFilter;
	this.wrapModeS = wrapModeS;
	this.wrapModeT = wrapModeT;
	this.lodBias = lodBias;
	this.maxAniso = maxAniso;
};
$hxClasses["openfl._internal.stage3D.SamplerState"] = openfl__$internal_stage3D_SamplerState;
openfl__$internal_stage3D_SamplerState.__name__ = ["openfl","_internal","stage3D","SamplerState"];
openfl__$internal_stage3D_SamplerState.prototype = {
	lodBias: null
	,magFilter: null
	,maxAniso: null
	,minFilter: null
	,wrapModeS: null
	,wrapModeT: null
	,equals: function(other) {
		if(this == other) {
			return true;
		}
		if(other == null) {
			return false;
		}
		if(this.minFilter == other.minFilter && this.magFilter == other.magFilter && this.wrapModeS == other.wrapModeS && this.wrapModeT == other.wrapModeT && this.lodBias == other.lodBias) {
			return this.maxAniso == other.maxAniso;
		} else {
			return false;
		}
	}
	,__class__: openfl__$internal_stage3D_SamplerState
};
var openfl__$internal_text_TextEngine = function(textField) {
	this.textField = textField;
	this.width = 100;
	this.height = 100;
	this.text = "";
	this.bounds = new openfl_geom_Rectangle(0,0,0,0);
	this.type = 0;
	this.autoSize = 2;
	this.embedFonts = false;
	this.selectable = true;
	this.borderColor = 0;
	this.border = false;
	this.backgroundColor = 16777215;
	this.background = false;
	this.gridFitType = 1;
	this.maxChars = 0;
	this.multiline = false;
	this.sharpness = 0;
	this.scrollH = 0;
	this.scrollV = 1;
	this.wordWrap = false;
	this.lineAscents = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
	this.lineBreaks = openfl__$Vector_Vector_$Impl_$.toIntVector(null);
	this.lineDescents = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
	this.lineLeadings = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
	this.lineHeights = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
	this.lineWidths = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
	this.layoutGroups = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
	this.textFormatRanges = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
	openfl__$internal_text_TextEngine.__canvas = window.document.createElement("canvas");
	openfl__$internal_text_TextEngine.__context = openfl__$internal_text_TextEngine.__canvas.getContext("2d");
};
$hxClasses["openfl._internal.text.TextEngine"] = openfl__$internal_text_TextEngine;
openfl__$internal_text_TextEngine.__name__ = ["openfl","_internal","text","TextEngine"];
openfl__$internal_text_TextEngine.findFont = function(name) {
	return null;
};
openfl__$internal_text_TextEngine.getFormatHeight = function(format) {
	var ascent;
	var descent;
	var leading;
	openfl__$internal_text_TextEngine.__context.font = openfl__$internal_text_TextEngine.getFont(format);
	ascent = format.size;
	descent = format.size * 0.185;
	leading = format.leading;
	return ascent + descent + leading;
};
openfl__$internal_text_TextEngine.getFont = function(format) {
	var font = format.italic ? "italic " : "normal ";
	font += "normal ";
	font += format.bold ? "bold " : "normal ";
	font += format.size + "px";
	font += "/" + (format.size + format.leading + 6) + "px ";
	var font1;
	switch(format.font) {
	case "_sans":
		font1 = "sans-serif";
		break;
	case "_serif":
		font1 = "serif";
		break;
	case "_typewriter":
		font1 = "monospace";
		break;
	default:
		font1 = "'" + format.font + "'";
	}
	font += "" + font1;
	return font;
};
openfl__$internal_text_TextEngine.getFontInstance = function(format) {
	return null;
};
openfl__$internal_text_TextEngine.prototype = {
	antiAliasType: null
	,autoSize: null
	,background: null
	,backgroundColor: null
	,border: null
	,borderColor: null
	,bottomScrollV: null
	,bounds: null
	,caretIndex: null
	,embedFonts: null
	,gridFitType: null
	,height: null
	,layoutGroups: null
	,lineAscents: null
	,lineBreaks: null
	,lineDescents: null
	,lineLeadings: null
	,lineHeights: null
	,lineWidths: null
	,maxChars: null
	,maxScrollH: null
	,maxScrollV: null
	,multiline: null
	,numLines: null
	,restrict: null
	,scrollH: null
	,scrollV: null
	,selectable: null
	,sharpness: null
	,text: null
	,textHeight: null
	,textFormatRanges: null
	,textWidth: null
	,type: null
	,width: null
	,wordWrap: null
	,textField: null
	,__cursorPosition: null
	,__cursorTimer: null
	,__hasFocus: null
	,__isKeyDown: null
	,__measuredHeight: null
	,__measuredWidth: null
	,__selectionStart: null
	,__showCursor: null
	,__textFormat: null
	,__textLayout: null
	,__texture: null
	,__cairoFont: null
	,__font: null
	,__hiddenInput: null
	,getBounds: function() {
		var padding = this.border ? 1 : 0;
		this.bounds.width = this.width + padding;
		this.bounds.height = this.height + padding;
	}
	,getLine: function(index) {
		if(index < 0 || index > this.lineBreaks.get_length() + 1) {
			return null;
		}
		if(this.lineBreaks.get_length() == 0) {
			return this.text;
		} else {
			return this.text.substring(index > 0 ? this.lineBreaks.get(index - 1) : 0,this.lineBreaks.get(index));
		}
	}
	,getLineBreakIndex: function(startIndex) {
		if(startIndex == null) {
			startIndex = 0;
		}
		var cr = this.text.indexOf("\n",startIndex);
		var lf = this.text.indexOf("\r",startIndex);
		if(cr == -1) {
			return lf;
		}
		if(lf == -1) {
			return cr;
		}
		if(cr < lf) {
			return cr;
		} else {
			return lf;
		}
	}
	,getLineMeasurements: function() {
		this.lineAscents.set_length(0);
		this.lineDescents.set_length(0);
		this.lineLeadings.set_length(0);
		this.lineHeights.set_length(0);
		this.lineWidths.set_length(0);
		var currentLineAscent = 0.0;
		var currentLineDescent = 0.0;
		var currentLineLeading = null;
		var currentLineHeight = 0.0;
		var currentLineWidth = 0.0;
		this.textWidth = 0;
		this.textHeight = 0;
		this.numLines = 1;
		this.bottomScrollV = 0;
		this.maxScrollH = 0;
		var _g = 0;
		var _g1 = this.layoutGroups;
		while(_g < _g1.get_length()) {
			var group = _g1.get(_g);
			++_g;
			while(group.lineIndex > this.numLines - 1) {
				this.lineAscents.push(currentLineAscent);
				this.lineDescents.push(currentLineDescent);
				this.lineLeadings.push(currentLineLeading != null ? currentLineLeading : 0);
				this.lineHeights.push(currentLineHeight);
				this.lineWidths.push(currentLineWidth);
				currentLineAscent = 0;
				currentLineDescent = 0;
				currentLineLeading = null;
				currentLineHeight = 0;
				currentLineWidth = 0;
				this.numLines++;
				if(this.textHeight <= this.height - 2) {
					this.bottomScrollV++;
				}
			}
			currentLineAscent = Math.max(currentLineAscent,group.ascent);
			currentLineDescent = Math.max(currentLineDescent,group.descent);
			if(currentLineLeading == null) {
				currentLineLeading = group.leading;
			} else {
				currentLineLeading = Math.max(currentLineLeading,group.leading) | 0;
			}
			currentLineHeight = Math.max(currentLineHeight,group.height);
			currentLineWidth = group.offsetX - 2 + group.width;
			if(currentLineWidth > this.textWidth) {
				this.textWidth = currentLineWidth;
			}
			this.textHeight = group.offsetY - 2 + group.ascent + group.descent;
		}
		this.lineAscents.push(currentLineAscent);
		this.lineDescents.push(currentLineDescent);
		this.lineLeadings.push(currentLineLeading != null ? currentLineLeading : 0);
		this.lineHeights.push(currentLineHeight);
		this.lineWidths.push(currentLineWidth);
		if(this.numLines == 1) {
			this.bottomScrollV = 1;
			if(currentLineLeading > 0) {
				this.textHeight += currentLineLeading;
			}
		} else if(this.textHeight <= this.height - 2) {
			this.bottomScrollV++;
		}
		if(this.autoSize != 2) {
			switch(this.autoSize) {
			case 0:case 1:case 3:
				if(!this.wordWrap) {
					this.width = this.textWidth + 4;
				}
				this.height = this.textHeight + 4;
				this.bottomScrollV = this.numLines;
				break;
			default:
			}
		}
		if(this.textWidth > this.width - 4) {
			this.maxScrollH = this.textWidth - this.width + 4 | 0;
		} else {
			this.maxScrollH = 0;
		}
		this.maxScrollV = this.numLines - this.bottomScrollV + 1;
	}
	,getLayoutGroups: function() {
		var _gthis = this;
		this.layoutGroups.set_length(0);
		var rangeIndex = -1;
		var formatRange = null;
		var currentFormat = openfl_text_TextField.__defaultTextFormat.clone();
		var leading = 0;
		var ascent = 0.0;
		var descent = 0.0;
		var layoutGroup;
		var widthValue;
		var heightValue = 0.0;
		var spaceWidth = 0.0;
		var previousSpaceIndex = 0;
		var spaceIndex = this.text.indexOf(" ");
		var breakIndex = this.getLineBreakIndex();
		var marginRight = 0.0;
		var offsetX = 2.0;
		var offsetY = 2.0;
		var textIndex = 0;
		var lineIndex = 0;
		var lineFormat = null;
		if(-1 < _gthis.textFormatRanges.get_length() - 1) {
			rangeIndex = 0;
			formatRange = _gthis.textFormatRanges.get(0);
			currentFormat.__merge(formatRange.format);
			openfl__$internal_text_TextEngine.__context.font = openfl__$internal_text_TextEngine.getFont(currentFormat);
			ascent = currentFormat.size;
			descent = currentFormat.size * 0.185;
			leading = currentFormat.leading;
			heightValue = ascent + descent + leading;
			if(spaceIndex > -1) {
				spaceWidth = openfl__$internal_text_TextEngine.__context.measureText(" ").width;
			}
		}
		lineFormat = formatRange.format;
		var wrap;
		while(textIndex < this.text.length) if(breakIndex > -1 && (spaceIndex == -1 || breakIndex < spaceIndex) && formatRange.end >= breakIndex) {
			layoutGroup = new openfl__$internal_text_TextLayoutGroup(formatRange.format,textIndex,breakIndex);
			var text = this.text;
			var advances = [];
			var _g1 = textIndex;
			var _g = breakIndex;
			while(_g1 < _g) advances.push(openfl__$internal_text_TextEngine.__context.measureText(text.charAt(_g1++)).width);
			layoutGroup.advances = advances;
			layoutGroup.offsetX = offsetX;
			layoutGroup.ascent = ascent;
			layoutGroup.descent = descent;
			layoutGroup.leading = leading;
			layoutGroup.lineIndex = lineIndex;
			layoutGroup.offsetY = offsetY;
			var advances1 = layoutGroup.advances;
			var width = 0.0;
			var _g2 = 0;
			while(_g2 < advances1.length) {
				var advance = advances1[_g2];
				++_g2;
				width += advance;
			}
			layoutGroup.width = width;
			layoutGroup.height = heightValue;
			this.layoutGroups.push(layoutGroup);
			offsetY += heightValue;
			offsetX = 2;
			if(this.wordWrap && layoutGroup.offsetX + layoutGroup.width > this.width - 2) {
				layoutGroup.offsetY = offsetY;
				layoutGroup.offsetX = offsetX;
				layoutGroup.lineIndex++;
				offsetY += heightValue;
				++lineIndex;
			}
			if(formatRange.end == breakIndex) {
				if(rangeIndex < _gthis.textFormatRanges.get_length() - 1) {
					++rangeIndex;
					formatRange = _gthis.textFormatRanges.get(rangeIndex);
					currentFormat.__merge(formatRange.format);
					openfl__$internal_text_TextEngine.__context.font = openfl__$internal_text_TextEngine.getFont(currentFormat);
					ascent = currentFormat.size;
					descent = currentFormat.size * 0.185;
					leading = currentFormat.leading;
					heightValue = ascent + descent + leading;
					if(spaceIndex > -1) {
						spaceWidth = openfl__$internal_text_TextEngine.__context.measureText(" ").width;
					}
				}
				lineFormat = formatRange.format;
			}
			textIndex = breakIndex + 1;
			breakIndex = this.getLineBreakIndex(textIndex);
			++lineIndex;
		} else if(formatRange.end >= spaceIndex && spaceIndex > -1 && textIndex < formatRange.end) {
			layoutGroup = null;
			wrap = false;
			while(textIndex != formatRange.end) {
				if(spaceIndex == -1) {
					spaceIndex = formatRange.end;
				}
				var text1 = this.text;
				var advances2 = [];
				var _g11 = textIndex;
				var _g3 = spaceIndex;
				while(_g11 < _g3) advances2.push(openfl__$internal_text_TextEngine.__context.measureText(text1.charAt(_g11++)).width);
				var width1 = 0.0;
				var _g4 = 0;
				while(_g4 < advances2.length) {
					var advance1 = advances2[_g4];
					++_g4;
					width1 += advance1;
				}
				widthValue = width1;
				if(this.wordWrap) {
					if(offsetX + widthValue > this.width - 2) {
						wrap = true;
					}
				}
				if(wrap) {
					offsetY += heightValue;
					var i = this.layoutGroups.get_length() - 1;
					var offsetCount = 0;
					while(true) {
						layoutGroup = this.layoutGroups.get(i);
						if(i > 0 && layoutGroup.startIndex > previousSpaceIndex) {
							++offsetCount;
						} else {
							break;
						}
						--i;
					}
					++lineIndex;
					offsetX = 2;
					if(offsetCount > 0) {
						var bumpX = this.layoutGroups.get(this.layoutGroups.get_length() - offsetCount).offsetX;
						var _g12 = this.layoutGroups.get_length() - offsetCount;
						var _g5 = this.layoutGroups.get_length();
						while(_g12 < _g5) {
							layoutGroup = this.layoutGroups.get(_g12++);
							layoutGroup.offsetX -= bumpX;
							layoutGroup.offsetY = offsetY;
							layoutGroup.lineIndex = lineIndex;
							offsetX += layoutGroup.width;
						}
					}
					layoutGroup = new openfl__$internal_text_TextLayoutGroup(formatRange.format,textIndex,spaceIndex);
					layoutGroup.advances = advances2;
					layoutGroup.offsetX = offsetX;
					layoutGroup.ascent = ascent;
					layoutGroup.descent = descent;
					layoutGroup.leading = leading;
					layoutGroup.lineIndex = lineIndex;
					layoutGroup.offsetY = offsetY;
					layoutGroup.width = widthValue;
					layoutGroup.height = heightValue;
					this.layoutGroups.push(layoutGroup);
					offsetX = widthValue + spaceWidth;
					marginRight = spaceWidth;
					wrap = false;
				} else {
					if(layoutGroup != null && textIndex == spaceIndex) {
						if(formatRange.format.align != 2) {
							layoutGroup.endIndex = spaceIndex;
						}
						layoutGroup.advances.push(spaceWidth);
						marginRight += spaceWidth;
					} else if(layoutGroup == null || lineFormat.align == 2) {
						layoutGroup = new openfl__$internal_text_TextLayoutGroup(formatRange.format,textIndex,spaceIndex);
						layoutGroup.advances = advances2;
						layoutGroup.offsetX = offsetX;
						layoutGroup.ascent = ascent;
						layoutGroup.descent = descent;
						layoutGroup.leading = leading;
						layoutGroup.lineIndex = lineIndex;
						layoutGroup.offsetY = offsetY;
						layoutGroup.width = widthValue;
						layoutGroup.height = heightValue;
						this.layoutGroups.push(layoutGroup);
						layoutGroup.advances.push(spaceWidth);
						marginRight = spaceWidth;
					} else {
						layoutGroup.endIndex = spaceIndex;
						layoutGroup.advances = layoutGroup.advances.concat(advances2);
						layoutGroup.width += marginRight + widthValue;
						layoutGroup.advances.push(spaceWidth);
						marginRight = spaceWidth;
					}
					offsetX += widthValue + spaceWidth;
				}
				textIndex = spaceIndex + 1;
				previousSpaceIndex = spaceIndex;
				spaceIndex = this.text.indexOf(" ",previousSpaceIndex + 1);
				if(formatRange.end <= previousSpaceIndex) {
					layoutGroup = null;
					if(rangeIndex < _gthis.textFormatRanges.get_length() - 1) {
						++rangeIndex;
						formatRange = _gthis.textFormatRanges.get(rangeIndex);
						currentFormat.__merge(formatRange.format);
						openfl__$internal_text_TextEngine.__context.font = openfl__$internal_text_TextEngine.getFont(currentFormat);
						ascent = currentFormat.size;
						descent = currentFormat.size * 0.185;
						leading = currentFormat.leading;
						heightValue = ascent + descent + leading;
						if(spaceIndex > -1) {
							spaceWidth = openfl__$internal_text_TextEngine.__context.measureText(" ").width;
						}
					}
				}
				if(spaceIndex > breakIndex && breakIndex > -1 || textIndex > this.text.length || spaceIndex > formatRange.end || spaceIndex == -1 && breakIndex > -1) {
					if(spaceIndex > formatRange.end) {
						--textIndex;
					}
					break;
				}
			}
		} else {
			if(textIndex > formatRange.end) {
				break;
			} else if(textIndex < formatRange.end) {
				layoutGroup = new openfl__$internal_text_TextLayoutGroup(formatRange.format,textIndex,formatRange.end);
				var text2 = this.text;
				var endIndex = formatRange.end;
				var advances3 = [];
				var _g13 = textIndex;
				while(_g13 < endIndex) advances3.push(openfl__$internal_text_TextEngine.__context.measureText(text2.charAt(_g13++)).width);
				layoutGroup.advances = advances3;
				layoutGroup.offsetX = offsetX;
				layoutGroup.ascent = ascent;
				layoutGroup.descent = descent;
				layoutGroup.leading = leading;
				layoutGroup.lineIndex = lineIndex;
				layoutGroup.offsetY = offsetY;
				var advances4 = layoutGroup.advances;
				var width2 = 0.0;
				var _g6 = 0;
				while(_g6 < advances4.length) {
					var advance2 = advances4[_g6];
					++_g6;
					width2 += advance2;
				}
				layoutGroup.width = width2;
				layoutGroup.height = heightValue;
				this.layoutGroups.push(layoutGroup);
				offsetX += layoutGroup.width;
				textIndex = formatRange.end;
			}
			if(rangeIndex < _gthis.textFormatRanges.get_length() - 1) {
				++rangeIndex;
				formatRange = _gthis.textFormatRanges.get(rangeIndex);
				currentFormat.__merge(formatRange.format);
				openfl__$internal_text_TextEngine.__context.font = openfl__$internal_text_TextEngine.getFont(currentFormat);
				ascent = currentFormat.size;
				descent = currentFormat.size * 0.185;
				leading = currentFormat.leading;
				heightValue = ascent + descent + leading;
				if(spaceIndex > -1) {
					spaceWidth = openfl__$internal_text_TextEngine.__context.measureText(" ").width;
				}
			}
			if(textIndex == formatRange.end) {
				break;
			}
		}
	}
	,setTextAlignment: function() {
		var lineIndex = -1;
		var offsetX = 0.0;
		var group;
		var lineLength;
		var _g1 = 0;
		var _g = this.layoutGroups.get_length();
		while(_g1 < _g) {
			var i = _g1++;
			group = this.layoutGroups.get(i);
			if(group.lineIndex != lineIndex) {
				lineIndex = group.lineIndex;
				switch(group.format.align) {
				case 0:
					if(this.lineWidths.get(lineIndex) < this.width - 4) {
						offsetX = Math.round((this.width - 4 - this.lineWidths.get(lineIndex)) / 2);
					} else {
						offsetX = 0;
					}
					break;
				case 2:
					if(this.lineWidths.get(lineIndex) < this.width - 4) {
						lineLength = 1;
						var _g3 = i + 1;
						var _g2 = this.layoutGroups.get_length();
						while(_g3 < _g2) if(this.layoutGroups.get(_g3++).lineIndex == lineIndex) {
							++lineLength;
						} else {
							break;
						}
						if(lineLength > 1) {
							group = this.layoutGroups.get(i + lineLength - 1);
							var endChar = this.text.charAt(group.endIndex);
							if(group.endIndex < this.text.length && endChar != "\n" && endChar != "\r") {
								offsetX = (this.width - 4 - this.lineWidths.get(lineIndex)) / (lineLength - 1);
								var _g31 = 1;
								var _g21 = lineLength;
								while(_g31 < _g21) {
									var j = _g31++;
									this.layoutGroups.get(i + j).offsetX += offsetX * j;
								}
							}
						}
					}
					offsetX = 0;
					break;
				case 4:
					if(this.lineWidths.get(lineIndex) < this.width - 4) {
						offsetX = Math.round(this.width - 4 - this.lineWidths.get(lineIndex));
					} else {
						offsetX = 0;
					}
					break;
				default:
					offsetX = 0;
				}
			}
			if(offsetX > 0) {
				group.offsetX += offsetX;
			}
		}
	}
	,update: function() {
		if(this.text == null || StringTools.trim(this.text) == "" || this.textFormatRanges.get_length() == 0) {
			this.lineAscents.set_length(0);
			this.lineBreaks.set_length(0);
			this.lineDescents.set_length(0);
			this.lineLeadings.set_length(0);
			this.lineHeights.set_length(0);
			this.lineWidths.set_length(0);
			this.layoutGroups.set_length(0);
			this.textWidth = 0;
			this.textHeight = 0;
			this.numLines = 1;
			this.maxScrollH = 0;
			this.maxScrollV = 1;
			this.bottomScrollV = 1;
		} else {
			this.getLayoutGroups();
			this.getLineMeasurements();
			this.setTextAlignment();
		}
		this.getBounds();
	}
	,__class__: openfl__$internal_text_TextEngine
};
var openfl__$internal_text_TextFormatRange = function(format,start,end) {
	this.format = format;
	this.start = start;
	this.end = end;
};
$hxClasses["openfl._internal.text.TextFormatRange"] = openfl__$internal_text_TextFormatRange;
openfl__$internal_text_TextFormatRange.__name__ = ["openfl","_internal","text","TextFormatRange"];
openfl__$internal_text_TextFormatRange.prototype = {
	end: null
	,format: null
	,start: null
	,__class__: openfl__$internal_text_TextFormatRange
};
var openfl__$internal_text_TextLayoutGroup = function(format,startIndex,endIndex) {
	this.format = format;
	this.startIndex = startIndex;
	this.endIndex = endIndex;
};
$hxClasses["openfl._internal.text.TextLayoutGroup"] = openfl__$internal_text_TextLayoutGroup;
openfl__$internal_text_TextLayoutGroup.__name__ = ["openfl","_internal","text","TextLayoutGroup"];
openfl__$internal_text_TextLayoutGroup.prototype = {
	advances: null
	,ascent: null
	,descent: null
	,endIndex: null
	,format: null
	,height: null
	,leading: null
	,lineIndex: null
	,offsetX: null
	,offsetY: null
	,startIndex: null
	,width: null
	,__class__: openfl__$internal_text_TextLayoutGroup
};
var openfl__$internal_utils_NullUtils = function() { };
$hxClasses["openfl._internal.utils.NullUtils"] = openfl__$internal_utils_NullUtils;
openfl__$internal_utils_NullUtils.__name__ = ["openfl","_internal","utils","NullUtils"];
var openfl__$internal_utils_PerlinNoise = function(seed,octaves,falloff) {
	if(seed == null) {
		seed = 123;
	}
	if(falloff == null) {
		falloff = .5;
	}
	this.octaves = octaves == null ? 4 : octaves;
	this.baseFactor = 0.015625;
	this.seedOffset(seed);
	this.octFreqPers(falloff);
};
$hxClasses["openfl._internal.utils.PerlinNoise"] = openfl__$internal_utils_PerlinNoise;
openfl__$internal_utils_PerlinNoise.__name__ = ["openfl","_internal","utils","PerlinNoise"];
openfl__$internal_utils_PerlinNoise.prototype = {
	octaves: null
	,aOctFreq: null
	,aOctPers: null
	,fPersMax: null
	,iXoffset: null
	,iYoffset: null
	,iZoffset: null
	,baseFactor: null
	,fill: function(bitmap,_x,_y,_z,_) {
		var baseX = _x * this.baseFactor + this.iXoffset;
		_y = _y * this.baseFactor + this.iYoffset;
		_z = _z * this.baseFactor + this.iZoffset;
		var width = bitmap.width;
		var height = bitmap.height;
		var p = openfl__$internal_utils_PerlinNoise.P;
		var octaves = this.octaves;
		var aOctFreq = this.aOctFreq;
		var aOctPers = this.aOctPers;
		var _g1 = 0;
		while(_g1 < height) {
			var py = _g1++;
			_x = baseX;
			var _g3 = 0;
			while(_g3 < width) {
				var px = _g3++;
				var s = 0.;
				var _g5 = 0;
				while(_g5 < octaves) {
					var i = _g5++;
					var fFreq = aOctFreq[i];
					var x = _x * fFreq;
					var y = _y * fFreq;
					var z = _z * fFreq;
					var xf = x - x % 1;
					var yf = y - y % 1;
					var zf = z - z % 1;
					var X = (xf | 0) & 255;
					var Y = (yf | 0) & 255;
					var Z = (zf | 0) & 255;
					x -= xf;
					y -= yf;
					z -= zf;
					var u = x * x * x * (x * (x * 6 - 15) + 10);
					var v = y * y * y * (y * (y * 6 - 15) + 10);
					var A = p[X] + Y;
					var AA = p[A] + Z;
					var AB = p[A + 1] + Z;
					var B = p[X + 1] + Y;
					var BA = p[B] + Z;
					var BB = p[B + 1] + Z;
					var x1 = x - 1;
					var y1 = y - 1;
					var z1 = z - 1;
					var hash = p[BB + 1] & 15;
					var g1 = (hash & 1) == 0 ? hash < 8 ? x1 : y1 : hash < 8 ? -x1 : -y1;
					var g11 = (hash & 2) == 0 ? hash < 4 ? y1 : hash == 12 ? x1 : z1 : hash < 4 ? -y1 : hash == 14 ? -x1 : -z1;
					hash = p[AB + 1] & 15;
					var g2 = ((hash & 1) == 0 ? hash < 8 ? x : y1 : hash < 8 ? -x : -y1) + ((hash & 2) == 0 ? hash < 4 ? y1 : hash == 12 ? x : z1 : hash < 4 ? -y1 : hash == 14 ? -x : -z1);
					hash = p[BA + 1] & 15;
					var g3 = (hash & 1) == 0 ? hash < 8 ? x1 : y : hash < 8 ? -x1 : -y;
					var g31 = (hash & 2) == 0 ? hash < 4 ? y : hash == 12 ? x1 : z1 : hash < 4 ? -y : hash == 14 ? -x1 : -z1;
					hash = p[AA + 1] & 15;
					var g4 = ((hash & 1) == 0 ? hash < 8 ? x : y : hash < 8 ? -x : -y) + ((hash & 2) == 0 ? hash < 4 ? y : hash == 12 ? x : z1 : hash < 4 ? -y : hash == 14 ? -x : -z1);
					hash = p[BB] & 15;
					var g5 = (hash & 1) == 0 ? hash < 8 ? x1 : y1 : hash < 8 ? -x1 : -y1;
					var g51 = (hash & 2) == 0 ? hash < 4 ? y1 : hash == 12 ? x1 : z : hash < 4 ? -y1 : hash == 14 ? -x1 : -z;
					hash = p[AB] & 15;
					var g6 = ((hash & 1) == 0 ? hash < 8 ? x : y1 : hash < 8 ? -x : -y1) + ((hash & 2) == 0 ? hash < 4 ? y1 : hash == 12 ? x : z : hash < 4 ? -y1 : hash == 14 ? -x : -z);
					hash = p[BA] & 15;
					var g7 = (hash & 1) == 0 ? hash < 8 ? x1 : y : hash < 8 ? -x1 : -y;
					var g71 = (hash & 2) == 0 ? hash < 4 ? y : hash == 12 ? x1 : z : hash < 4 ? -y : hash == 14 ? -x1 : -z;
					hash = p[AA] & 15;
					var g8 = ((hash & 1) == 0 ? hash < 8 ? x : y : hash < 8 ? -x : -y) + ((hash & 2) == 0 ? hash < 4 ? y : hash == 12 ? x : z : hash < 4 ? -y : hash == 14 ? -x : -z);
					g2 += u * (g1 + g11 - g2);
					g4 += u * (g3 + g31 - g4);
					g6 += u * (g5 + g51 - g6);
					g8 += u * (g7 + g71 - g8);
					g4 += v * (g2 - g4);
					g8 += v * (g6 - g8);
					s += (g8 + z * z * z * (z * (z * 6 - 15) + 10) * (g4 - g8)) * aOctPers[i];
				}
				var color = (s * this.fPersMax + 1) * 128 | 0;
				bitmap.setPixel32(px,py,-16777216 | color << 16 | color << 8 | color);
				_x += this.baseFactor;
			}
			_y += this.baseFactor;
		}
	}
	,octFreqPers: function(fPersistence) {
		var fFreq;
		var fPers;
		this.aOctFreq = [];
		this.aOctPers = [];
		this.fPersMax = 0;
		var _g1 = 0;
		var _g = this.octaves;
		while(_g1 < _g) {
			var i = _g1++;
			fFreq = Math.pow(2,i);
			fPers = Math.pow(fPersistence,i);
			this.fPersMax += fPers;
			this.aOctFreq.push(fFreq);
			this.aOctPers.push(fPers);
		}
		this.fPersMax = 1 / this.fPersMax;
	}
	,seedOffset: function(iSeed) {
		iSeed = iSeed * 16807. % 2147483647 | 0;
		this.iXoffset = iSeed;
		iSeed = iSeed * 16807. % 2147483647 | 0;
		this.iYoffset = iSeed;
		iSeed = iSeed * 16807. % 2147483647 | 0;
		this.iZoffset = iSeed;
	}
	,__class__: openfl__$internal_utils_PerlinNoise
};
var openfl_display_Application = function() {
	lime_app_Application.call(this);
	if(openfl_Lib.application == null) {
		openfl_Lib.application = this;
	}
};
$hxClasses["openfl.display.Application"] = openfl_display_Application;
openfl_display_Application.__name__ = ["openfl","display","Application"];
openfl_display_Application.__super__ = lime_app_Application;
openfl_display_Application.prototype = $extend(lime_app_Application.prototype,{
	create: function(config) {
		this.config = config;
		if(config != null) {
			if(Object.prototype.hasOwnProperty.call(config,"fps")) {
				this.backend.setFrameRate(config.fps);
			}
			if(Object.prototype.hasOwnProperty.call(config,"windows")) {
				var _g1 = config.windows;
				while(0 < _g1.length) {
					this.createWindow(new openfl_display_Window(_g1[0]));
					break;
				}
			}
			this.__preloader == null || this.__preloader.complete;
		}
	}
	,__class__: openfl_display_Application
});
var openfl_display_BitmapData = function(width,height,transparent,fillColor) {
	if(fillColor == null) {
		fillColor = -1;
	}
	if(transparent == null) {
		transparent = true;
	}
	this.transparent = transparent;
	if(width == null) {
		width = 0;
	} else {
		width = width;
	}
	if(height == null) {
		height = 0;
	} else {
		height = height;
	}
	if(width < 0) {
		width = 0;
	} else {
		width = width;
	}
	if(height < 0) {
		height = 0;
	} else {
		height = height;
	}
	this.width = width;
	this.height = height;
	this.rect = new openfl_geom_Rectangle(0,0,width,height);
	if(width > 0 && height > 0) {
		if(transparent) {
			if((fillColor & -16777216) == 0) {
				fillColor = 0;
			}
		} else {
			fillColor = -16777216 | fillColor & 16777215;
		}
		fillColor = fillColor << 8 | fillColor >>> 24 & 255;
		this.image = new lime_graphics_Image(null,0,0,width,height,fillColor);
		this.image.set_transparent(transparent);
		this.__isValid = true;
	}
	this.__worldTransform = new openfl_geom_Matrix();
	this.__worldColorTransform = new openfl_geom_ColorTransform();
};
$hxClasses["openfl.display.BitmapData"] = openfl_display_BitmapData;
openfl_display_BitmapData.__name__ = ["openfl","display","BitmapData"];
openfl_display_BitmapData.__interfaces__ = [openfl_display_IBitmapDrawable];
openfl_display_BitmapData.fromBase64 = function(base64,type,onload) {
	var bitmapData = new openfl_display_BitmapData(0,0,true);
	var onload1 = onload;
	var _gthis = bitmapData;
	lime_graphics_Image.fromBase64(base64,type,function(image) {
		_gthis.__fromImage(image);
		if(onload1 != null) {
			onload1(_gthis);
		}
	});
	return bitmapData;
};
openfl_display_BitmapData.fromBytes = function(bytes,rawAlpha,onload) {
	var bitmapData = new openfl_display_BitmapData(0,0,true);
	var rawAlpha1 = rawAlpha;
	var onload1 = onload;
	var _gthis = bitmapData;
	lime_graphics_Image.fromBytes(openfl_utils__$ByteArray_ByteArray_$Impl_$.toBytes(bytes),function(image) {
		_gthis.__fromImage(image);
		if(rawAlpha1 != null) {
			lime_graphics_utils_ImageCanvasUtil.convertToCanvas(image);
			lime_graphics_utils_ImageCanvasUtil.createImageData(image);
			var data = image.buffer.data;
			var _g1 = 0;
			var _g = openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(rawAlpha1);
			while(_g1 < _g) data[_g1++ * 4 + 3] = rawAlpha1.readUnsignedByte();
			image.version++;
		}
		if(onload1 != null) {
			onload1(_gthis);
		}
	});
	return bitmapData;
};
openfl_display_BitmapData.fromCanvas = function(canvas,transparent) {
	if(transparent == null) {
		transparent = true;
	}
	if(canvas == null) {
		return null;
	}
	var bitmapData = new openfl_display_BitmapData(0,0,transparent);
	bitmapData.__fromImage(lime_graphics_Image.fromCanvas(canvas));
	bitmapData.image.set_transparent(transparent);
	return bitmapData;
};
openfl_display_BitmapData.fromFile = function(path,onload,onerror) {
	var bitmapData = new openfl_display_BitmapData(0,0,true);
	bitmapData.__fromFile(path,onload,onerror);
	return bitmapData;
};
openfl_display_BitmapData.fromImage = function(image,transparent) {
	if(transparent == null) {
		transparent = true;
	}
	if(image == null || image.buffer == null) {
		return null;
	}
	var bitmapData = new openfl_display_BitmapData(0,0,transparent);
	bitmapData.__fromImage(image);
	bitmapData.image.set_transparent(transparent);
	return bitmapData;
};
openfl_display_BitmapData.prototype = {
	height: null
	,image: null
	,rect: null
	,transparent: null
	,width: null
	,__worldTransform: null
	,__worldColorTransform: null
	,__blendMode: null
	,__buffer: null
	,__bufferAlpha: null
	,__bufferData: null
	,__isValid: null
	,__surface: null
	,__texture: null
	,__textureVersion: null
	,applyFilter: function(sourceBitmapData,sourceRect,destPoint,filter) {
		if(!this.__isValid || sourceBitmapData == null || !sourceBitmapData.__isValid) {
			return;
		}
		filter.__applyFilter(sourceBitmapData,this,sourceRect,destPoint);
	}
	,clone: function() {
		if(!this.__isValid) {
			return new openfl_display_BitmapData(this.width,this.height,this.transparent);
		} else {
			return openfl_display_BitmapData.fromImage(this.image.clone(),this.transparent);
		}
	}
	,colorTransform: function(rect,colorTransform) {
		if(!this.__isValid) {
			return;
		}
		this.image.colorTransform(rect.__toLimeRectangle(),colorTransform.__toLimeColorMatrix());
	}
	,compare: function(otherBitmapData) {
		if(otherBitmapData == this) {
			return 0;
		} else if(otherBitmapData == null) {
			return -1;
		} else if(this.__isValid == false || otherBitmapData.__isValid == false) {
			return -2;
		} else if(this.width != otherBitmapData.width) {
			return -3;
		} else if(this.height != otherBitmapData.height) {
			return -4;
		}
		if(this.image != null && otherBitmapData.image != null && this.image.get_format() == otherBitmapData.image.get_format()) {
			var bytes = this.image.get_data();
			var otherBytes = otherBitmapData.image.get_data();
			var equal = true;
			var _g1 = 0;
			var _g = bytes.length;
			while(_g1 < _g) {
				var i = _g1++;
				if(bytes[i] != otherBytes[i]) {
					equal = false;
					break;
				}
			}
			if(equal) {
				return 0;
			}
		}
		var bitmapData = null;
		var foundDifference;
		var pixel;
		var otherPixel;
		var comparePixel;
		var r;
		var g;
		var b;
		var a;
		var _g11 = 0;
		var _g2 = this.height;
		while(_g11 < _g2) {
			var y = _g11++;
			var _g3 = 0;
			var _g21 = this.width;
			while(_g3 < _g21) {
				var x = _g3++;
				foundDifference = false;
				pixel = this.getPixel32(x,y);
				otherPixel = otherBitmapData.getPixel32(x,y);
				comparePixel = 0;
				if(pixel != otherPixel) {
					r = (pixel >>> 16 & 255) - (otherPixel >>> 16 & 255);
					g = (pixel >>> 8 & 255) - (otherPixel >>> 8 & 255);
					b = (pixel & 255) - (otherPixel & 255);
					if(r < 0) {
						r *= -1;
					}
					if(g < 0) {
						g *= -1;
					}
					if(b < 0) {
						b *= -1;
					}
					if(r == 0 && g == 0 && b == 0) {
						a = (pixel >>> 24 & 255) - (otherPixel >>> 24 & 255);
						if(a != 0) {
							comparePixel = 16711680;
							comparePixel = 16776960;
							comparePixel = 16777215;
							comparePixel = (a & 255) << 24 | 16711680 | 65280 | 255;
							foundDifference = true;
						}
					} else {
						comparePixel = 0 | (r & 255) << 16 | 0 | 0;
						comparePixel = (comparePixel >>> 24 & 255 & 255) << 24 | (comparePixel >>> 16 & 255 & 255) << 16 | (g & 255) << 8 | comparePixel & 255 & 255;
						comparePixel = (comparePixel >>> 24 & 255 & 255) << 24 | (comparePixel >>> 16 & 255 & 255) << 16 | (comparePixel >>> 8 & 255 & 255) << 8 | b & 255;
						comparePixel = -16777216 | (comparePixel >>> 16 & 255 & 255) << 16 | (comparePixel >>> 8 & 255 & 255) << 8 | comparePixel & 255 & 255;
						foundDifference = true;
					}
				}
				if(foundDifference) {
					if(bitmapData == null) {
						bitmapData = new openfl_display_BitmapData(this.width,this.height,this.transparent || otherBitmapData.transparent,0);
					}
					bitmapData.setPixel32(x,y,comparePixel);
				}
			}
		}
		if(bitmapData == null) {
			return 0;
		}
		return bitmapData;
	}
	,copyChannel: function(sourceBitmapData,sourceRect,destPoint,sourceChannel,destChannel) {
		if(!this.__isValid) {
			return;
		}
		var sourceChannel1;
		switch(sourceChannel) {
		case 1:
			sourceChannel1 = lime_graphics_ImageChannel.RED;
			break;
		case 2:
			sourceChannel1 = lime_graphics_ImageChannel.GREEN;
			break;
		case 4:
			sourceChannel1 = lime_graphics_ImageChannel.BLUE;
			break;
		case 8:
			sourceChannel1 = lime_graphics_ImageChannel.ALPHA;
			break;
		default:
			return;
		}
		var destChannel1;
		switch(destChannel) {
		case 1:
			destChannel1 = lime_graphics_ImageChannel.RED;
			break;
		case 2:
			destChannel1 = lime_graphics_ImageChannel.GREEN;
			break;
		case 4:
			destChannel1 = lime_graphics_ImageChannel.BLUE;
			break;
		case 8:
			destChannel1 = lime_graphics_ImageChannel.ALPHA;
			break;
		default:
			return;
		}
		this.image.copyChannel(sourceBitmapData.image,sourceRect.__toLimeRectangle(),destPoint.__toLimeVector2(),sourceChannel1,destChannel1);
	}
	,copyPixels: function(sourceBitmapData,sourceRect,destPoint,alphaBitmapData,alphaPoint,mergeAlpha) {
		if(mergeAlpha == null) {
			mergeAlpha = false;
		}
		if(!this.__isValid || sourceBitmapData == null) {
			return;
		}
		if(sourceBitmapData == this) {
			sourceBitmapData = sourceBitmapData.clone();
		}
		this.image.copyPixels(sourceBitmapData.image,sourceRect.__toLimeRectangle(),destPoint.__toLimeVector2(),alphaBitmapData != null ? alphaBitmapData.image : null,alphaPoint != null ? alphaPoint.__toLimeVector2() : null,mergeAlpha);
	}
	,dispose: function() {
		this.image = null;
		this.width = 0;
		this.height = 0;
		this.rect = null;
		this.__isValid = false;
		if(this.__texture != null) {
			var renderer = openfl_Lib.current.stage.__renderer;
			if(renderer != null) {
				var gl = renderer.renderSession.gl;
				if(gl != null) {
					gl.deleteTexture(this.__texture);
					this.__texture = null;
				}
			}
		}
	}
	,draw: function(source,matrix,colorTransform,blendMode,clipRect,smoothing) {
		if(smoothing == null) {
			smoothing = false;
		}
		if(!this.__isValid) {
			return;
		}
		if(colorTransform != null) {
			var tmp;
			var width;
			if(source == null) {
				width = null;
			} else {
				var width1;
				if(source.__properties__) {
					tmp = source.__properties__["get_" + "width"];
					width1 = tmp;
				} else {
					width1 = false;
				}
				if(width1) {
					width = source[tmp]();
				} else {
					width = source["width"];
				}
			}
			var width2 = Math.ceil(width);
			var tmp1;
			var height;
			if(source == null) {
				height = null;
			} else {
				var height1;
				if(source.__properties__) {
					tmp1 = source.__properties__["get_" + "height"];
					height1 = tmp1;
				} else {
					height1 = false;
				}
				if(height1) {
					height = source[tmp1]();
				} else {
					height = source["height"];
				}
			}
			var height2 = Math.ceil(height);
			var copy = new openfl_display_BitmapData(width2,height2,true,0);
			copy.draw(source);
			copy.colorTransform(copy.rect,colorTransform);
			source = copy;
		}
		lime_graphics_utils_ImageCanvasUtil.convertToCanvas(this.image);
		var buffer = this.image.buffer;
		var renderSession = new openfl__$internal_renderer_RenderSession();
		renderSession.context = buffer.__srcContext;
		renderSession.allowSmoothing = smoothing;
		renderSession.roundPixels = true;
		renderSession.maskManager = new openfl__$internal_renderer_canvas_CanvasMaskManager(renderSession);
		if(!smoothing) {
			buffer.__srcContext.mozImageSmoothingEnabled = false;
			buffer.__srcContext.msImageSmoothingEnabled = false;
			buffer.__srcContext.imageSmoothingEnabled = false;
		}
		if(clipRect != null) {
			renderSession.maskManager.pushRect(clipRect,new openfl_geom_Matrix());
		}
		var matrixCache = source.__worldTransform;
		source.__updateTransforms(matrix != null ? matrix : new openfl_geom_Matrix());
		source.__updateChildren(false);
		source.__renderCanvas(renderSession);
		source.__updateTransforms(matrixCache);
		source.__updateChildren(true);
		if(!smoothing) {
			buffer.__srcContext.mozImageSmoothingEnabled = true;
			buffer.__srcContext.msImageSmoothingEnabled = true;
			buffer.__srcContext.imageSmoothingEnabled = true;
		}
		if(clipRect != null) {
			renderSession.maskManager.popRect();
		}
		buffer.__srcContext.setTransform(1,0,0,1,0,0);
		buffer.__srcImageData = null;
		buffer.data = null;
		this.image.dirty = true;
		this.image.version++;
	}
	,drawWithQuality: function(source,matrix,colorTransform,blendMode,clipRect,smoothing,quality) {
		if(smoothing == null) {
			smoothing = false;
		}
		this.draw(source,matrix,colorTransform,blendMode,clipRect,smoothing);
	}
	,encode: function(rect,compressor,byteArray) {
		if(!this.__isValid || rect == null) {
			byteArray = null;
			return byteArray;
		}
		if(js_Boot.__instanceof(compressor,openfl_display_PNGEncoderOptions)) {
			byteArray = openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytes(this.image.encode("png"));
			return byteArray;
		} else if(js_Boot.__instanceof(compressor,openfl_display_JPEGEncoderOptions)) {
			byteArray = openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytes(this.image.encode("jpg",(js_Boot.__cast(compressor , openfl_display_JPEGEncoderOptions)).quality));
			return byteArray;
		}
		byteArray = null;
		return byteArray;
	}
	,fillRect: function(rect,color) {
		if(!this.__isValid || rect == null) {
			return;
		}
		if(this.transparent && (color & -16777216) == 0) {
			color = 0;
		}
		this.image.fillRect(rect.__toLimeRectangle(),color,1);
	}
	,floodFill: function(x,y,color) {
		if(!this.__isValid) {
			return;
		}
		this.image.floodFill(x,y,color,1);
	}
	,generateFilterRect: function(sourceRect,filter) {
		return sourceRect.clone();
	}
	,getBuffer: function(gl,alpha) {
		if(this.__buffer == null) {
			var array = [this.width,this.height,0,1,1,alpha,0,this.height,0,0,1,alpha,this.width,0,0,1,0,alpha,0,0,0,0,0,alpha];
			var this1;
			if(array != null) {
				this1 = new Float32Array(array);
			} else {
				this1 = null;
			}
			this.__bufferData = this1;
			this.__bufferAlpha = alpha;
			this.__buffer = gl.createBuffer();
			gl.bindBuffer(gl.ARRAY_BUFFER,this.__buffer);
			gl.bufferData(gl.ARRAY_BUFFER,this.__bufferData,gl.STATIC_DRAW);
		} else if(this.__bufferAlpha != alpha) {
			this.__bufferData[5] = alpha;
			this.__bufferData[11] = alpha;
			this.__bufferData[17] = alpha;
			this.__bufferData[23] = alpha;
			this.__bufferAlpha = alpha;
			gl.bindBuffer(gl.ARRAY_BUFFER,this.__buffer);
			gl.bufferData(gl.ARRAY_BUFFER,this.__bufferData,gl.STATIC_DRAW);
		}
		return this.__buffer;
	}
	,getColorBoundsRect: function(mask,color,findColor) {
		if(findColor == null) {
			findColor = true;
		}
		if(!this.__isValid) {
			return new openfl_geom_Rectangle(0,0,this.width,this.height);
		}
		if(!this.transparent || (mask >> 24 & 255) > 0) {
			var color1 = color;
			if((color1 >>> 24 & 255) == 0) {
				color1 = 0;
			}
		}
		var rect = this.image.getColorBoundsRect(mask,color,findColor,1);
		return new openfl_geom_Rectangle(rect.x,rect.y,rect.width,rect.height);
	}
	,getPixel: function(x,y) {
		if(!this.__isValid) {
			return 0;
		}
		return this.image.getPixel(x,y,1);
	}
	,getPixel32: function(x,y) {
		if(!this.__isValid) {
			return 0;
		}
		return this.image.getPixel32(x,y,1);
	}
	,getPixels: function(rect) {
		if(!this.__isValid) {
			return null;
		}
		if(rect == null) {
			rect = this.rect;
		}
		return openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytes(this.image.getPixels(rect.__toLimeRectangle(),1));
	}
	,getSurface: function() {
		if(!this.__isValid) {
			return null;
		}
		if(this.__surface == null) {
			this.__surface = lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$.fromImage(this.image);
		}
		return this.__surface;
	}
	,getTexture: function(gl) {
		if(!this.__isValid) {
			return null;
		}
		if(this.__texture == null) {
			this.__texture = gl.createTexture();
			gl.bindTexture(gl.TEXTURE_2D,this.__texture);
			gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_S,gl.CLAMP_TO_EDGE);
			gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_T,gl.CLAMP_TO_EDGE);
			gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MAG_FILTER,gl.NEAREST);
			gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MIN_FILTER,gl.NEAREST);
			this.__textureVersion = -1;
		}
		lime_graphics_utils_ImageCanvasUtil.sync(this.image,false);
		if(this.image != null && this.image.version != this.__textureVersion) {
			var internalFormat;
			var format;
			if(this.image.buffer.bitsPerPixel == 1) {
				internalFormat = gl.ALPHA;
				format = gl.ALPHA;
			} else {
				internalFormat = gl.RGBA;
				format = gl.RGBA;
			}
			gl.bindTexture(gl.TEXTURE_2D,this.__texture);
			var textureImage = this.image;
			if(textureImage.type != lime_graphics_ImageType.DATA && !textureImage.get_premultiplied()) {
				gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL,1);
			} else if(!textureImage.get_premultiplied() && textureImage.get_transparent()) {
				gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL,0);
				textureImage = textureImage.clone();
				textureImage.set_premultiplied(true);
			}
			if(textureImage.get_format() != 0) {
				textureImage = textureImage.clone();
				textureImage.set_format(0);
				textureImage.buffer.premultiplied = true;
			}
			if(textureImage.type == lime_graphics_ImageType.DATA) {
				gl.texImage2D(gl.TEXTURE_2D,0,internalFormat,textureImage.buffer.width,textureImage.buffer.height,0,format,gl.UNSIGNED_BYTE,textureImage.get_data());
			} else {
				gl.texImage2D(gl.TEXTURE_2D,0,internalFormat,format,gl.UNSIGNED_BYTE,textureImage.get_src());
			}
			gl.bindTexture(gl.TEXTURE_2D,null);
			this.__textureVersion = this.image.version;
		}
		return this.__texture;
	}
	,getVector: function(rect) {
		var pixels = this.getPixels(rect);
		var length = openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(pixels) / 4 | 0;
		var result = openfl__$Vector_Vector_$Impl_$.toIntVector(null,length,true);
		var _g1 = 0;
		while(_g1 < length) result.set(_g1++,pixels.readUnsignedInt());
		return result;
	}
	,histogram: function(hRect) {
		var pixels = this.getPixels(hRect != null ? hRect : new openfl_geom_Rectangle(0,0,this.width,this.height));
		var _g = [];
		var _g1 = 0;
		while(_g1 < 4) {
			++_g1;
			var _g2 = [];
			var _g3 = 0;
			while(_g3 < 256) {
				++_g3;
				_g2.push(0);
			}
			_g.push(_g2);
		}
		var _g21 = 0;
		var _g11 = openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(pixels);
		while(_g21 < _g11) ++_g[_g21++ % 4][pixels.readUnsignedByte()];
		return _g;
	}
	,hitTest: function(firstPoint,firstAlphaThreshold,secondObject,secondBitmapDataPoint,secondAlphaThreshold) {
		if(secondAlphaThreshold == null) {
			secondAlphaThreshold = 1;
		}
		if(!this.__isValid) {
			return false;
		}
		if(js_Boot.__instanceof(secondObject,openfl_display_Bitmap)) {
			secondObject = (js_Boot.__cast(secondObject , openfl_display_Bitmap)).bitmapData;
		}
		if(js_Boot.__instanceof(secondObject,openfl_geom_Point)) {
			var secondPoint = secondObject;
			var x = secondPoint.x - firstPoint.x | 0;
			var y = secondPoint.y - firstPoint.y | 0;
			if(this.rect.contains(x,y)) {
				if((this.getPixel32(x,y) >> 24 & 255) >= firstAlphaThreshold) {
					return true;
				}
			}
		} else if(js_Boot.__instanceof(secondObject,openfl_display_BitmapData)) {
			var secondBitmapData = secondObject;
			var x1;
			var y1;
			if(secondBitmapDataPoint == null) {
				x1 = 0;
				y1 = 0;
			} else {
				x1 = secondBitmapDataPoint.x - firstPoint.x | 0;
				y1 = secondBitmapDataPoint.y - firstPoint.y | 0;
			}
			if(this.rect.contains(x1,y1)) {
				var hitRect = openfl_geom_Rectangle.__temp;
				hitRect.setTo(x1,y1,Math.min(secondBitmapData.width,this.width - x1),Math.min(secondBitmapData.height,this.height - y1));
				var pixels = this.getPixels(hitRect);
				hitRect.offset(-x1,-y1);
				var testPixels = secondBitmapData.getPixels(hitRect);
				var length = hitRect.width * hitRect.height | 0;
				var pixel;
				var testPixel;
				var _g1 = 0;
				while(_g1 < length) {
					++_g1;
					pixel = pixels.readUnsignedInt();
					testPixel = testPixels.readUnsignedInt();
					if((pixel >> 24 & 255) >= firstAlphaThreshold && (testPixel >> 24 & 255) >= secondAlphaThreshold) {
						return true;
					}
				}
				return false;
			}
		} else if(js_Boot.__instanceof(secondObject,openfl_geom_Rectangle)) {
			var secondRectangle = openfl_geom_Rectangle.__temp;
			secondRectangle.copyFrom(secondObject);
			secondRectangle.offset(-firstPoint.x,-firstPoint.y);
			secondRectangle.__contract(0,0,this.width,this.height);
			if(secondRectangle.width > 0 && secondRectangle.height > 0) {
				var pixels1 = this.getPixels(secondRectangle);
				var length1 = openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(pixels1) / 4 | 0;
				var pixel1;
				var _g11 = 0;
				while(_g11 < length1) {
					++_g11;
					pixel1 = pixels1.readUnsignedInt();
					if((pixel1 >> 24 & 255) >= firstAlphaThreshold) {
						return true;
					}
				}
			}
		}
		return false;
	}
	,lock: function() {
	}
	,merge: function(sourceBitmapData,sourceRect,destPoint,redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier) {
		if(!this.__isValid || sourceBitmapData == null || !sourceBitmapData.__isValid || sourceRect == null || destPoint == null) {
			return;
		}
		this.image.merge(sourceBitmapData.image,sourceRect.__toLimeRectangle(),destPoint.__toLimeVector2(),redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier);
	}
	,noise: function(randomSeed,low,high,channelOptions,grayScale) {
		if(grayScale == null) {
			grayScale = false;
		}
		if(channelOptions == null) {
			channelOptions = 7;
		}
		if(high == null) {
			high = 255;
		}
		if(low == null) {
			low = 0;
		}
		if(!this.__isValid) {
			return;
		}
		var func = function() {
			randomSeed = randomSeed * 1103515245 + 12345;
			return (Math.abs(randomSeed / 65536) | 0) % 32768;
		};
		func();
		var range = high - low;
		new openfl_utils_ByteArrayData(0);
		var redChannel = (channelOptions & 1) == 1;
		var greenChannel = (channelOptions & 2) >> 1 == 1;
		var blueChannel = (channelOptions & 4) >> 2 == 1;
		var alphaChannel = (channelOptions & 8) >> 3 == 1;
		var _g1 = 0;
		var _g = this.height;
		while(_g1 < _g) {
			var y = _g1++;
			var _g3 = 0;
			var _g2 = this.width;
			while(_g3 < _g2) {
				var x = _g3++;
				var red = 0;
				var blue = 0;
				var green = 0;
				var alpha = 255;
				if(grayScale) {
					blue = low + func() % range;
					green = blue;
					red = green;
					alpha = 255;
				} else {
					if(redChannel) {
						red = low + func() % range;
					}
					if(greenChannel) {
						green = low + func() % range;
					}
					if(blueChannel) {
						blue = low + func() % range;
					}
					if(alphaChannel) {
						alpha = low + func() % range;
					}
				}
				var rgb = alpha;
				rgb = (rgb << 8) + red;
				rgb = (rgb << 8) + green;
				rgb = (rgb << 8) + blue;
				this.setPixel32(x,y,rgb);
			}
		}
	}
	,paletteMap: function(sourceBitmapData,sourceRect,destPoint,redArray,greenArray,blueArray,alphaArray) {
		var sw = sourceRect.width | 0;
		var sh = sourceRect.height | 0;
		var pixels = this.getPixels(sourceRect);
		pixels.position = 0;
		var pixelValue;
		var r;
		var g;
		var b;
		var a;
		var color;
		var c1;
		var c2;
		var c3;
		var c4;
		var _g1 = 0;
		var _g = sh * sw;
		while(_g1 < _g) {
			var i = _g1++;
			pixelValue = pixels.readUnsignedInt();
			if(alphaArray == null) {
				c1 = pixelValue & -16777216;
			} else {
				c1 = alphaArray[pixelValue >> 24 & 255];
			}
			if(redArray == null) {
				c2 = pixelValue & 16711680;
			} else {
				c2 = redArray[pixelValue >> 16 & 255];
			}
			if(greenArray == null) {
				c3 = pixelValue & 65280;
			} else {
				c3 = greenArray[pixelValue >> 8 & 255];
			}
			if(blueArray == null) {
				c4 = pixelValue & 255;
			} else {
				c4 = blueArray[pixelValue & 255];
			}
			a = (c1 >> 24 & 255) + (c2 >> 24 & 255) + (c3 >> 24 & 255) + (c4 >> 24 & 255);
			r = (c1 >> 16 & 255) + (c2 >> 16 & 255) + (c3 >> 16 & 255) + (c4 >> 16 & 255);
			g = (c1 >> 8 & 255) + (c2 >> 8 & 255) + (c3 >> 8 & 255) + (c4 >> 8 & 255);
			b = (c1 & 255) + (c2 & 255) + (c3 & 255) + (c4 & 255);
			color = a << 24 | r << 16 | g << 8 | b;
			pixels.position = i * 4;
			pixels.writeUnsignedInt(color);
		}
		pixels.position = 0;
		this.setPixels(new openfl_geom_Rectangle(destPoint.x,destPoint.y,sw,sh),pixels);
	}
	,perlinNoise: function(baseX,baseY,numOctaves,randomSeed,stitch,fractalNoise,channelOptions,grayScale,offsets) {
		if(grayScale == null) {
			grayScale = false;
		}
		if(channelOptions == null) {
			channelOptions = 7;
		}
		if(!this.__isValid) {
			return;
		}
		new openfl__$internal_utils_PerlinNoise(randomSeed,numOctaves,0.01).fill(this,baseX,baseY,0);
	}
	,scroll: function(x,y) {
		if(!this.__isValid) {
			return;
		}
		this.image.scroll(x,y);
	}
	,setPixel: function(x,y,color) {
		if(!this.__isValid) {
			return;
		}
		this.image.setPixel(x,y,color,1);
	}
	,setPixel32: function(x,y,color) {
		if(!this.__isValid) {
			return;
		}
		this.image.setPixel32(x,y,color,1);
	}
	,setPixels: function(rect,byteArray) {
		if(!this.__isValid || rect == null) {
			return;
		}
		this.image.setPixels(rect.__toLimeRectangle(),openfl_utils__$ByteArray_ByteArray_$Impl_$.toBytes(byteArray),1);
	}
	,setVector: function(rect,inputVector) {
		var byteArray = new openfl_utils_ByteArrayData(0);
		openfl_utils__$ByteArray_ByteArray_$Impl_$.set_length(byteArray,inputVector.get_length() * 4);
		var _g = 0;
		while(_g < inputVector.get_length()) {
			var color = inputVector.get(_g);
			++_g;
			byteArray.writeUnsignedInt(color);
		}
		byteArray.position = 0;
		this.setPixels(rect,byteArray);
	}
	,threshold: function(sourceBitmapData,sourceRect,destPoint,operation,threshold,color,mask,copySource) {
		if(copySource == null) {
			copySource = false;
		}
		if(mask == null) {
			mask = -1;
		}
		if(color == null) {
			color = 0;
		}
		if(sourceBitmapData == null || sourceRect == null || destPoint == null || sourceRect.x > sourceBitmapData.width || sourceRect.y > sourceBitmapData.height || destPoint.x > this.width || destPoint.y > this.height) {
			return 0;
		}
		return this.image.threshold(sourceBitmapData.image,sourceRect.__toLimeRectangle(),destPoint.__toLimeVector2(),operation,threshold,color,mask,copySource,1);
	}
	,unlock: function(changeRect) {
	}
	,__fromBase64: function(base64,type,onload) {
		var _gthis = this;
		lime_graphics_Image.fromBase64(base64,type,function(image) {
			_gthis.__fromImage(image);
			if(onload != null) {
				onload(_gthis);
			}
		});
	}
	,__fromBytes: function(bytes,rawAlpha,onload) {
		var _gthis = this;
		lime_graphics_Image.fromBytes(openfl_utils__$ByteArray_ByteArray_$Impl_$.toBytes(bytes),function(image) {
			_gthis.__fromImage(image);
			if(rawAlpha != null) {
				lime_graphics_utils_ImageCanvasUtil.convertToCanvas(image);
				lime_graphics_utils_ImageCanvasUtil.createImageData(image);
				var data = image.buffer.data;
				var _g1 = 0;
				var _g = openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(rawAlpha);
				while(_g1 < _g) data[_g1++ * 4 + 3] = rawAlpha.readUnsignedByte();
				image.version++;
			}
			if(onload != null) {
				onload(_gthis);
			}
		});
	}
	,__fromFile: function(path,onload,onerror) {
		var _gthis = this;
		lime_graphics_Image.fromFile(path,function(image) {
			_gthis.__fromImage(image);
			if(onload != null) {
				onload(_gthis);
			}
		},onerror);
	}
	,__fromImage: function(image) {
		if(image != null && image.buffer != null) {
			this.image = image;
			this.width = image.width;
			this.height = image.height;
			this.rect = new openfl_geom_Rectangle(0,0,image.width,image.height);
			this.__isValid = true;
		}
	}
	,__renderCairo: function(renderSession) {
		if(!this.__isValid) {
			return;
		}
		var cairo = renderSession.cairo;
		if(this.__worldTransform == null) {
			this.__worldTransform = new openfl_geom_Matrix();
		}
		var transform = this.__worldTransform;
		if(renderSession.roundPixels) {
			var matrix = transform.__toMatrix3();
			matrix.tx = Math.round(matrix.tx);
			matrix.ty = Math.round(matrix.ty);
		} else {
			transform.__toMatrix3();
		}
		if(this.getSurface() != null) {
			!renderSession.allowSmoothing || cairo.get_antialias() == 1;
		}
	}
	,__renderCairoMask: function(renderSession) {
	}
	,__renderCanvas: function(renderSession) {
		if(!this.__isValid) {
			return;
		}
		if(this.image.type == lime_graphics_ImageType.DATA) {
			lime_graphics_utils_ImageCanvasUtil.convertToCanvas(this.image);
		}
		var context = renderSession.context;
		if(this.__worldTransform == null) {
			this.__worldTransform = new openfl_geom_Matrix();
		}
		context.globalAlpha = 1;
		var transform = this.__worldTransform;
		if(renderSession.roundPixels) {
			context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx | 0,transform.ty | 0);
		} else {
			context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx,transform.ty);
		}
		context.drawImage(this.image.get_src(),0,0);
	}
	,__renderCanvasMask: function(renderSession) {
	}
	,__renderGL: function(renderSession) {
	}
	,__resize: function(width,height) {
		this.width = width;
		this.height = height;
		this.rect.width = width;
		this.rect.height = height;
	}
	,__sync: function() {
		lime_graphics_utils_ImageCanvasUtil.sync(this.image,false);
	}
	,__updateChildren: function(transformOnly) {
	}
	,__updateMask: function(maskGraphics) {
	}
	,__updateTransforms: function(overrideTransform) {
		if(overrideTransform == null) {
			this.__worldTransform.identity();
		} else {
			this.__worldTransform = overrideTransform;
		}
	}
	,__class__: openfl_display_BitmapData
};
var openfl_display__$BlendMode_BlendMode_$Impl_$ = {};
$hxClasses["openfl.display._BlendMode.BlendMode_Impl_"] = openfl_display__$BlendMode_BlendMode_$Impl_$;
openfl_display__$BlendMode_BlendMode_$Impl_$.__name__ = ["openfl","display","_BlendMode","BlendMode_Impl_"];
openfl_display__$BlendMode_BlendMode_$Impl_$.fromString = function(value) {
	switch(value) {
	case "add":
		return 0;
	case "alpha":
		return 1;
	case "darken":
		return 2;
	case "difference":
		return 3;
	case "erase":
		return 4;
	case "hardlight":
		return 5;
	case "invert":
		return 6;
	case "layer":
		return 7;
	case "lighten":
		return 8;
	case "multiply":
		return 9;
	case "normal":
		return 10;
	case "overlay":
		return 11;
	case "screen":
		return 12;
	case "shader":
		return 13;
	case "subtract":
		return 14;
	default:
		return null;
	}
};
openfl_display__$BlendMode_BlendMode_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "add";
	case 1:
		return "alpha";
	case 2:
		return "darken";
	case 3:
		return "difference";
	case 4:
		return "erase";
	case 5:
		return "hardlight";
	case 6:
		return "invert";
	case 7:
		return "layer";
	case 8:
		return "lighten";
	case 9:
		return "multiply";
	case 10:
		return "normal";
	case 11:
		return "overlay";
	case 12:
		return "screen";
	case 13:
		return "shader";
	case 14:
		return "subtract";
	default:
		return null;
	}
};
var openfl_display__$CapsStyle_CapsStyle_$Impl_$ = {};
$hxClasses["openfl.display._CapsStyle.CapsStyle_Impl_"] = openfl_display__$CapsStyle_CapsStyle_$Impl_$;
openfl_display__$CapsStyle_CapsStyle_$Impl_$.__name__ = ["openfl","display","_CapsStyle","CapsStyle_Impl_"];
openfl_display__$CapsStyle_CapsStyle_$Impl_$.fromString = function(value) {
	switch(value) {
	case "none":
		return 0;
	case "round":
		return 1;
	case "square":
		return 2;
	default:
		return null;
	}
};
openfl_display__$CapsStyle_CapsStyle_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "none";
	case 1:
		return "round";
	case 2:
		return "square";
	default:
		return null;
	}
};
var openfl_display_DirectRenderer = function(type) {
	if(type == null) {
		type = "DirectRenderer";
	}
	openfl_display_DisplayObject.call(this);
};
$hxClasses["openfl.display.DirectRenderer"] = openfl_display_DirectRenderer;
openfl_display_DirectRenderer.__name__ = ["openfl","display","DirectRenderer"];
openfl_display_DirectRenderer.__super__ = openfl_display_DisplayObject;
openfl_display_DirectRenderer.prototype = $extend(openfl_display_DisplayObject.prototype,{
	__render: null
	,get_render: function() {
		return this.__render;
	}
	,set_render: function(value) {
		return this.__render = value;
	}
	,__class__: openfl_display_DirectRenderer
	,__properties__: $extend(openfl_display_DisplayObject.prototype.__properties__,{set_render:"set_render",get_render:"get_render"})
});
var openfl_display_FrameLabel = function(name,frame) {
	openfl_events_EventDispatcher.call(this);
	this.__name = name;
	this.__frame = frame;
};
$hxClasses["openfl.display.FrameLabel"] = openfl_display_FrameLabel;
openfl_display_FrameLabel.__name__ = ["openfl","display","FrameLabel"];
openfl_display_FrameLabel.__super__ = openfl_events_EventDispatcher;
openfl_display_FrameLabel.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	__frame: null
	,__name: null
	,get_frame: function() {
		return this.__frame;
	}
	,get_name: function() {
		return this.__name;
	}
	,__class__: openfl_display_FrameLabel
	,__properties__: {get_name:"get_name",get_frame:"get_frame"}
});
var openfl_display__$GradientType_GradientType_$Impl_$ = {};
$hxClasses["openfl.display._GradientType.GradientType_Impl_"] = openfl_display__$GradientType_GradientType_$Impl_$;
openfl_display__$GradientType_GradientType_$Impl_$.__name__ = ["openfl","display","_GradientType","GradientType_Impl_"];
openfl_display__$GradientType_GradientType_$Impl_$.fromString = function(value) {
	switch(value) {
	case "linear":
		return 0;
	case "radial":
		return 1;
	default:
		return null;
	}
};
openfl_display__$GradientType_GradientType_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "linear";
	case 1:
		return "radial";
	default:
		return null;
	}
};
var openfl_display_Graphics = function(owner) {
	this.__dirty = true;
	this.__owner = owner;
	this.__commands = new openfl__$internal_renderer_DrawCommandBuffer();
	this.__strokePadding = 0;
	this.__positionX = 0;
	this.__positionY = 0;
	this.__renderTransform = new openfl_geom_Matrix();
	this.__worldTransform = new openfl_geom_Matrix();
	this.__width = 0;
	this.__height = 0;
	this.moveTo(0,0);
};
$hxClasses["openfl.display.Graphics"] = openfl_display_Graphics;
openfl_display_Graphics.__name__ = ["openfl","display","Graphics"];
openfl_display_Graphics.prototype = {
	__bounds: null
	,__commands: null
	,__dirty: null
	,__height: null
	,__positionX: null
	,__positionY: null
	,__renderTransform: null
	,__strokePadding: null
	,__transformDirty: null
	,__visible: null
	,__owner: null
	,__width: null
	,__worldTransform: null
	,__canvas: null
	,__context: null
	,__bitmap: null
	,beginBitmapFill: function(bitmap,matrix,repeat,smooth) {
		if(smooth == null) {
			smooth = false;
		}
		if(repeat == null) {
			repeat = true;
		}
		this.__commands.beginBitmapFill(bitmap,matrix != null ? matrix.clone() : null,repeat,smooth);
		this.__visible = true;
	}
	,beginFill: function(color,alpha) {
		if(alpha == null) {
			alpha = 1;
		}
		if(color == null) {
			color = 0;
		}
		this.__commands.beginFill(color & 16777215,alpha);
		if(alpha > 0) {
			this.__visible = true;
		}
	}
	,beginGradientFill: function(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio) {
		if(focalPointRatio == null) {
			focalPointRatio = 0;
		}
		if(interpolationMethod == null) {
			interpolationMethod = 1;
		}
		if(spreadMethod == null) {
			spreadMethod = 0;
		}
		this.__commands.beginGradientFill(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio);
		var _g = 0;
		while(_g < alphas.length) {
			var alpha = alphas[_g];
			++_g;
			if(alpha > 0) {
				this.__visible = true;
				break;
			}
		}
	}
	,clear: function() {
		this.__commands.clear();
		this.__strokePadding = 0;
		if(this.__bounds != null) {
			this.set___dirty(true);
			this.__transformDirty = true;
			this.__bounds = null;
		}
		this.__visible = false;
		this.moveTo(0,0);
	}
	,copyFrom: function(sourceGraphics) {
		this.__bounds = sourceGraphics.__bounds != null ? sourceGraphics.__bounds.clone() : null;
		this.__commands = sourceGraphics.__commands.copy();
		this.set___dirty(true);
		this.__strokePadding = sourceGraphics.__strokePadding;
		this.__positionX = sourceGraphics.__positionX;
		this.__positionY = sourceGraphics.__positionY;
		this.__transformDirty = true;
		this.__visible = sourceGraphics.__visible;
	}
	,cubicCurveTo: function(controlX1,controlY1,controlX2,controlY2,anchorX,anchorY) {
		this.__inflateBounds(this.__positionX - this.__strokePadding,this.__positionY - this.__strokePadding);
		this.__inflateBounds(this.__positionX + this.__strokePadding,this.__positionY + this.__strokePadding);
		var ix1;
		var iy1;
		var ix2;
		var iy2;
		ix1 = anchorX;
		ix2 = anchorX;
		if(!((controlX1 < anchorX && controlX1 > this.__positionX || controlX1 > anchorX && controlX1 < this.__positionX) && (controlX2 < anchorX && controlX2 > this.__positionX || controlX2 > anchorX && controlX2 < this.__positionX))) {
			var u = 2 * this.__positionX - 4 * controlX1 + 2 * controlX2;
			var v = controlX1 - this.__positionX;
			var w = -this.__positionX + 3 * controlX1 + anchorX - 3 * controlX2;
			var t1 = (-u + Math.sqrt(u * u - 4 * v * w)) / (2 * w);
			var t2 = (-u - Math.sqrt(u * u - 4 * v * w)) / (2 * w);
			if(t1 > 0 && t1 < 1) {
				ix1 = this.__calculateBezierCubicPoint(t1,this.__positionX,controlX1,controlX2,anchorX);
			}
			if(t2 > 0 && t2 < 1) {
				ix2 = this.__calculateBezierCubicPoint(t2,this.__positionX,controlX1,controlX2,anchorX);
			}
		}
		iy1 = anchorY;
		iy2 = anchorY;
		if(!((controlY1 < anchorY && controlY1 > this.__positionX || controlY1 > anchorY && controlY1 < this.__positionX) && (controlY2 < anchorY && controlY2 > this.__positionX || controlY2 > anchorY && controlY2 < this.__positionX))) {
			var u1 = 2 * this.__positionX - 4 * controlY1 + 2 * controlY2;
			var v1 = controlY1 - this.__positionX;
			var w1 = -this.__positionX + 3 * controlY1 + anchorY - 3 * controlY2;
			var t11 = (-u1 + Math.sqrt(u1 * u1 - 4 * v1 * w1)) / (2 * w1);
			var t21 = (-u1 - Math.sqrt(u1 * u1 - 4 * v1 * w1)) / (2 * w1);
			if(t11 > 0 && t11 < 1) {
				iy1 = this.__calculateBezierCubicPoint(t11,this.__positionX,controlY1,controlY2,anchorY);
			}
			if(t21 > 0 && t21 < 1) {
				iy2 = this.__calculateBezierCubicPoint(t21,this.__positionX,controlY1,controlY2,anchorY);
			}
		}
		this.__inflateBounds(ix1 - this.__strokePadding,iy1 - this.__strokePadding);
		this.__inflateBounds(ix1 + this.__strokePadding,iy1 + this.__strokePadding);
		this.__inflateBounds(ix2 - this.__strokePadding,iy2 - this.__strokePadding);
		this.__inflateBounds(ix2 + this.__strokePadding,iy2 + this.__strokePadding);
		this.__positionX = anchorX;
		this.__positionY = anchorY;
		this.__commands.cubicCurveTo(controlX1,controlY1,controlX2,controlY2,anchorX,anchorY);
		this.set___dirty(true);
	}
	,curveTo: function(controlX,controlY,anchorX,anchorY) {
		this.__inflateBounds(this.__positionX - this.__strokePadding,this.__positionY - this.__strokePadding);
		this.__inflateBounds(this.__positionX + this.__strokePadding,this.__positionY + this.__strokePadding);
		var ix;
		var iy;
		if(controlX < anchorX && controlX > this.__positionX || controlX > anchorX && controlX < this.__positionX) {
			ix = anchorX;
		} else {
			ix = this.__calculateBezierQuadPoint((this.__positionX - controlX) / (this.__positionX - 2 * controlX + anchorX),this.__positionX,controlX,anchorX);
		}
		if(controlY < anchorY && controlY > this.__positionY || controlY > anchorY && controlY < this.__positionY) {
			iy = anchorY;
		} else {
			iy = this.__calculateBezierQuadPoint((this.__positionY - controlY) / (this.__positionY - 2 * controlY + anchorY),this.__positionY,controlY,anchorY);
		}
		this.__inflateBounds(ix - this.__strokePadding,iy - this.__strokePadding);
		this.__inflateBounds(ix + this.__strokePadding,iy + this.__strokePadding);
		this.__positionX = anchorX;
		this.__positionY = anchorY;
		this.__commands.curveTo(controlX,controlY,anchorX,anchorY);
		this.set___dirty(true);
	}
	,drawCircle: function(x,y,radius) {
		if(radius <= 0) {
			return;
		}
		this.__inflateBounds(x - radius - this.__strokePadding,y - radius - this.__strokePadding);
		this.__inflateBounds(x + radius + this.__strokePadding,y + radius + this.__strokePadding);
		this.__commands.drawCircle(x,y,radius);
		this.set___dirty(true);
	}
	,drawEllipse: function(x,y,width,height) {
		if(width <= 0 || height <= 0) {
			return;
		}
		this.__inflateBounds(x - this.__strokePadding,y - this.__strokePadding);
		this.__inflateBounds(x + width + this.__strokePadding,y + height + this.__strokePadding);
		this.__commands.drawEllipse(x,y,width,height);
		this.set___dirty(true);
	}
	,drawGraphicsData: function(graphicsData) {
		var fill;
		var bitmapFill;
		var gradientFill;
		var stroke;
		var path;
		var _g = 0;
		while(_g < graphicsData.get_length()) {
			var graphics = graphicsData.get(_g);
			++_g;
			if(js_Boot.__instanceof(graphics,openfl_display_GraphicsSolidFill)) {
				fill = graphics;
				this.beginFill(fill.color,fill.alpha);
			} else if(js_Boot.__instanceof(graphics,openfl_display_GraphicsBitmapFill)) {
				bitmapFill = graphics;
				this.beginBitmapFill(bitmapFill.bitmapData,bitmapFill.matrix,bitmapFill.repeat,bitmapFill.smooth);
			} else if(js_Boot.__instanceof(graphics,openfl_display_GraphicsGradientFill)) {
				gradientFill = graphics;
				this.beginGradientFill(gradientFill.type,gradientFill.colors,gradientFill.alphas,gradientFill.ratios,gradientFill.matrix,gradientFill.spreadMethod,gradientFill.interpolationMethod,gradientFill.focalPointRatio);
			} else if(js_Boot.__instanceof(graphics,openfl_display_GraphicsStroke)) {
				stroke = graphics;
				if(js_Boot.__instanceof(stroke.fill,openfl_display_GraphicsSolidFill)) {
					fill = stroke.fill;
					this.lineStyle(stroke.thickness,fill.color,fill.alpha,stroke.pixelHinting,stroke.scaleMode,stroke.caps,stroke.joints,stroke.miterLimit);
				} else {
					this.lineStyle(stroke.thickness,0,1,stroke.pixelHinting,stroke.scaleMode,stroke.caps,stroke.joints,stroke.miterLimit);
					if(js_Boot.__instanceof(stroke.fill,openfl_display_GraphicsBitmapFill)) {
						bitmapFill = stroke.fill;
						this.lineBitmapStyle(bitmapFill.bitmapData,bitmapFill.matrix,bitmapFill.repeat,bitmapFill.smooth);
					} else if(js_Boot.__instanceof(stroke.fill,openfl_display_GraphicsGradientFill)) {
						gradientFill = stroke.fill;
						this.lineGradientStyle(gradientFill.type,gradientFill.colors,gradientFill.alphas,gradientFill.ratios,gradientFill.matrix,gradientFill.spreadMethod,gradientFill.interpolationMethod,gradientFill.focalPointRatio);
					}
				}
			} else if(js_Boot.__instanceof(graphics,openfl_display_GraphicsPath)) {
				path = graphics;
				this.drawPath(path.commands,path.data,path.winding);
			} else if(js_Boot.__instanceof(graphics,openfl_display_GraphicsEndFill)) {
				this.endFill();
			}
		}
	}
	,drawPath: function(commands,data,winding) {
		if(winding == null) {
			winding = 0;
		}
		var dataIndex = 0;
		var _g = 0;
		try {
			while(_g < commands.get_length()) {
				var command = commands.get(_g);
				++_g;
				switch(command) {
				case 1:
					this.moveTo(data.get(dataIndex),data.get(dataIndex + 1));
					dataIndex += 2;
					break;
				case 2:
					this.lineTo(data.get(dataIndex),data.get(dataIndex + 1));
					dataIndex += 2;
					break;
				case 3:
					this.curveTo(data.get(dataIndex),data.get(dataIndex + 1),data.get(dataIndex + 2),data.get(dataIndex + 3));
					dataIndex += 4;
					break;
				case 4:
					this.moveTo(data.get(dataIndex + 2),data.get(dataIndex + 3));
					throw "__break__";
					break;
				case 5:
					this.lineTo(data.get(dataIndex + 2),data.get(dataIndex + 3));
					throw "__break__";
					break;
				case 6:
					this.cubicCurveTo(data.get(dataIndex),data.get(dataIndex + 1),data.get(dataIndex + 2),data.get(dataIndex + 3),data.get(dataIndex + 4),data.get(dataIndex + 5));
					dataIndex += 6;
					break;
				default:
				}
			}
		} catch( e ) { if( e != "__break__" ) throw e; }
	}
	,drawRect: function(x,y,width,height) {
		if(width <= 0 || height <= 0) {
			return;
		}
		this.__inflateBounds(x - this.__strokePadding,y - this.__strokePadding);
		this.__inflateBounds(x + width + this.__strokePadding,y + height + this.__strokePadding);
		this.__commands.drawRect(x,y,width,height);
		this.set___dirty(true);
	}
	,drawRoundRect: function(x,y,width,height,ellipseWidth,ellipseHeight) {
		if(width <= 0 || height <= 0) {
			return;
		}
		this.__inflateBounds(x - this.__strokePadding,y - this.__strokePadding);
		this.__inflateBounds(x + width + this.__strokePadding,y + height + this.__strokePadding);
		this.__commands.drawRoundRect(x,y,width,height,ellipseWidth,ellipseHeight);
		this.set___dirty(true);
	}
	,drawRoundRectComplex: function(x,y,width,height,topLeftRadius,topRightRadius,bottomLeftRadius,bottomRightRadius) {
		openfl_Lib.notImplemented({ fileName : "Graphics.hx", lineNumber : 444, className : "openfl.display.Graphics", methodName : "drawRoundRectComplex"});
	}
	,drawTriangles: function(vertices,indices,uvtData,culling) {
		if(culling == null) {
			culling = 1;
		}
		var vlen = vertices.get_length() / 2 | 0;
		if(culling == null) {
			culling = 1;
		}
		if(indices == null) {
			if(vlen % 3 != 0) {
				throw new js__$Boot_HaxeError(new openfl_errors_ArgumentError("Not enough vertices to close a triangle."));
			}
			indices = openfl__$Vector_Vector_$Impl_$.toIntVector(null);
			var _g1 = 0;
			while(_g1 < vlen) indices.push(_g1++);
		}
		this.__inflateBounds(0,0);
		var tmpx = -Infinity;
		var tmpy = -Infinity;
		var maxX = -Infinity;
		var maxY = -Infinity;
		var _g11 = 0;
		while(_g11 < vlen) {
			var i = _g11++;
			tmpx = vertices.get(i * 2);
			tmpy = vertices.get(i * 2 + 1);
			if(maxX < tmpx) {
				maxX = tmpx;
			}
			if(maxY < tmpy) {
				maxY = tmpy;
			}
		}
		this.__inflateBounds(maxX,maxY);
		this.__commands.drawTriangles(vertices,indices,uvtData,culling);
		this.set___dirty(true);
		this.__visible = true;
	}
	,endFill: function() {
		this.__commands.endFill();
	}
	,lineBitmapStyle: function(bitmap,matrix,repeat,smooth) {
		if(smooth == null) {
			smooth = false;
		}
		if(repeat == null) {
			repeat = true;
		}
		this.__commands.lineBitmapStyle(bitmap,matrix != null ? matrix.clone() : null,repeat,smooth);
	}
	,lineGradientStyle: function(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio) {
		if(focalPointRatio == null) {
			focalPointRatio = 0;
		}
		if(interpolationMethod == null) {
			interpolationMethod = 1;
		}
		if(spreadMethod == null) {
			spreadMethod = 0;
		}
		this.__commands.lineGradientStyle(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio);
	}
	,lineStyle: function(thickness,color,alpha,pixelHinting,scaleMode,caps,joints,miterLimit) {
		if(miterLimit == null) {
			miterLimit = 3;
		}
		if(scaleMode == null) {
			scaleMode = 2;
		}
		if(pixelHinting == null) {
			pixelHinting = false;
		}
		if(alpha == null) {
			alpha = 1;
		}
		if(color == null) {
			color = 0;
		}
		if(thickness != null) {
			if(joints == 1) {
				if(thickness > this.__strokePadding) {
					this.__strokePadding = thickness;
				}
			} else if(thickness / 2 > this.__strokePadding) {
				this.__strokePadding = thickness / 2;
			}
		}
		this.__commands.lineStyle(thickness,color,alpha,pixelHinting,scaleMode,caps,joints,miterLimit);
		if(thickness != null) {
			this.__visible = true;
		}
	}
	,lineTo: function(x,y) {
		if(!isFinite(x) || !isFinite(y)) {
			return;
		}
		this.__inflateBounds(this.__positionX - this.__strokePadding,this.__positionY - this.__strokePadding);
		this.__inflateBounds(this.__positionX + this.__strokePadding,this.__positionY + this.__strokePadding);
		this.__positionX = x;
		this.__positionY = y;
		this.__inflateBounds(this.__positionX - this.__strokePadding,this.__positionY - this.__strokePadding);
		this.__inflateBounds(this.__positionX + this.__strokePadding * 2,this.__positionY + this.__strokePadding);
		this.__commands.lineTo(x,y);
		this.set___dirty(true);
	}
	,moveTo: function(x,y) {
		this.__positionX = x;
		this.__positionY = y;
		this.__commands.moveTo(x,y);
	}
	,readGraphicsData: function(recurse) {
		if(recurse == null) {
			recurse = true;
		}
		var graphicsData = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
		this.__owner.__readGraphicsData(graphicsData,recurse);
		return graphicsData;
	}
	,__calculateBezierCubicPoint: function(t,p1,p2,p3,p4) {
		var iT = 1 - t;
		return p1 * (iT * iT * iT) + 3 * p2 * t * (iT * iT) + 3 * p3 * iT * (t * t) + p4 * (t * t * t);
	}
	,__calculateBezierQuadPoint: function(t,p1,p2,p3) {
		var iT = 1 - t;
		return iT * iT * p1 + 2 * iT * t * p2 + t * t * p3;
	}
	,__cleanup: function() {
		if(this.__bounds != null) {
			this.set___dirty(true);
			this.__transformDirty = true;
		}
		this.__bitmap = null;
		this.__canvas = null;
		this.__context = null;
	}
	,__getBounds: function(rect,matrix) {
		if(this.__bounds == null) {
			return;
		}
		var bounds = openfl_geom_Rectangle.__temp;
		this.__bounds.__transform(bounds,matrix);
		rect.__expand(bounds.x,bounds.y,bounds.width,bounds.height);
	}
	,__hitTest: function(x,y,shapeFlag,matrix) {
		if(this.__bounds == null) {
			return false;
		}
		var norm = matrix.a * matrix.d - matrix.b * matrix.c;
		var px = norm == 0 ? -matrix.tx : 1.0 / norm * (matrix.c * (matrix.ty - y) + matrix.d * (x - matrix.tx));
		var norm1 = matrix.a * matrix.d - matrix.b * matrix.c;
		var py = norm1 == 0 ? -matrix.ty : 1.0 / norm1 * (matrix.a * (y - matrix.ty) + matrix.b * (matrix.tx - x));
		if(px > this.__bounds.x && py > this.__bounds.y && this.__bounds.contains(px,py)) {
			if(shapeFlag) {
				return openfl__$internal_renderer_canvas_CanvasGraphics.hitTest(this,px,py);
			}
			return true;
		}
		return false;
	}
	,__inflateBounds: function(x,y) {
		if(this.__bounds == null) {
			this.__bounds = new openfl_geom_Rectangle(x,y,0,0);
			this.__transformDirty = true;
			return;
		}
		if(x < this.__bounds.x) {
			this.__bounds.width += this.__bounds.x - x;
			this.__bounds.x = x;
			this.__transformDirty = true;
		}
		if(y < this.__bounds.y) {
			this.__bounds.height += this.__bounds.y - y;
			this.__bounds.y = y;
			this.__transformDirty = true;
		}
		if(x > this.__bounds.x + this.__bounds.width) {
			this.__bounds.width = x - this.__bounds.x;
		}
		if(y > this.__bounds.y + this.__bounds.height) {
			this.__bounds.height = y - this.__bounds.y;
		}
	}
	,__readGraphicsData: function(graphicsData) {
		var data = new openfl__$internal_renderer_DrawCommandReader(this.__commands);
		var path;
		var _g = 0;
		var _g1 = this.__commands.types;
		while(_g < _g1.length) {
			var type = _g1[_g];
			++_g;
			switch(type[1]) {
			case 0:
				var c = data.readBeginBitmapFill();
				graphicsData.push(new openfl_display_GraphicsBitmapFill(openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_bitmap(c),openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_matrix(c),openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_repeat(c),openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_smooth(c)));
				break;
			case 1:
				graphicsData.push(new openfl_display_GraphicsSolidFill(openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$.get_color(data.readBeginFill()),1));
				break;
			case 2:
				var c1 = data.readBeginGradientFill();
				graphicsData.push(new openfl_display_GraphicsGradientFill(openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_type(c1),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_colors(c1),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_alphas(c1),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_ratios(c1),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_matrix(c1),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_spreadMethod(c1),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_interpolationMethod(c1),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_focalPointRatio(c1)));
				break;
			case 3:
				data.readCubicCurveTo();
				break;
			case 4:
				var c2 = data.readCurveTo();
				path = new openfl_display_GraphicsPath();
				path.curveTo(openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_controlX(c2),openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_controlY(c2),openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_anchorX(c2),openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_anchorY(c2));
				graphicsData.push(path);
				break;
			case 5:
				data.readDrawCircle();
				break;
			case 6:
				data.readDrawEllipse();
				break;
			case 7:
				data.readDrawEllipse();
				break;
			case 8:
				data.readDrawEllipse();
				break;
			case 11:
				data.readEndFill();
				graphicsData.push(new openfl_display_GraphicsEndFill());
				break;
			case 12:
				data.readLineBitmapStyle();
				break;
			case 13:
				data.readLineGradientStyle();
				break;
			case 14:
				var c3 = data.readLineStyle();
				graphicsData.push(new openfl_display_GraphicsStroke(openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_thickness(c3),openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_pixelHinting(c3),openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_scaleMode(c3),openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_caps(c3),openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_joints(c3),openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_miterLimit(c3)));
				break;
			case 15:
				var c4 = data.readLineTo();
				path = new openfl_display_GraphicsPath();
				path.lineTo(openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.get_x(c4),openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.get_y(c4));
				graphicsData.push(path);
				break;
			case 16:
				var c5 = data.readMoveTo();
				path = new openfl_display_GraphicsPath();
				path.moveTo(openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_x(c5),openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_y(c5));
				graphicsData.push(path);
				break;
			default:
				data.skip(type);
			}
		}
	}
	,__update: function() {
		if(this.__bounds == null || this.__bounds.width <= 0 || this.__bounds.height <= 0) {
			return;
		}
		var parentTransform = this.__owner.__getRenderTransform();
		var scaleX;
		var scaleY;
		if(parentTransform.b == 0) {
			scaleX = Math.abs(parentTransform.a);
		} else {
			scaleX = Math.sqrt(parentTransform.a * parentTransform.a + parentTransform.b * parentTransform.b);
		}
		if(parentTransform.c == 0) {
			scaleY = Math.abs(parentTransform.d);
		} else {
			scaleY = Math.sqrt(parentTransform.c * parentTransform.c + parentTransform.d * parentTransform.d);
		}
		var width = this.__bounds.width * scaleX;
		var height = this.__bounds.height * scaleY;
		if(Math.abs(width - this.__width) > 2 || Math.abs(height - this.__height) > 2) {
			this.set___dirty(true);
		}
		this.__width = Math.floor(width);
		this.__height = Math.floor(height);
		if(this.__width <= 0 || this.__height <= 0) {
			return;
		}
		this.__renderTransform.a = this.__width / this.__bounds.width;
		this.__renderTransform.d = this.__height / this.__bounds.height;
		this.__worldTransform.a = 1 / this.__renderTransform.a;
		this.__worldTransform.b = 0;
		this.__worldTransform.c = 0;
		this.__worldTransform.d = 1 / this.__renderTransform.d;
		this.__worldTransform.tx = this.__bounds.x;
		this.__worldTransform.ty = this.__bounds.y;
		this.__worldTransform.concat(this.__owner.__renderTransform);
	}
	,set___dirty: function(value) {
		if(value && this.__owner != null) {
			var _this = this.__owner;
			if(!_this.__renderDirty) {
				_this.__renderDirty = true;
				openfl_display_DisplayObject.__worldRenderDirty++;
			}
		}
		return this.__dirty = value;
	}
	,__class__: openfl_display_Graphics
	,__properties__: {set___dirty:"set___dirty"}
};
var openfl_display_IGraphicsFill = function() { };
$hxClasses["openfl.display.IGraphicsFill"] = openfl_display_IGraphicsFill;
openfl_display_IGraphicsFill.__name__ = ["openfl","display","IGraphicsFill"];
openfl_display_IGraphicsFill.prototype = {
	__graphicsFillType: null
	,__class__: openfl_display_IGraphicsFill
};
var openfl_display_IGraphicsData = function() { };
$hxClasses["openfl.display.IGraphicsData"] = openfl_display_IGraphicsData;
openfl_display_IGraphicsData.__name__ = ["openfl","display","IGraphicsData"];
openfl_display_IGraphicsData.prototype = {
	__graphicsDataType: null
	,__class__: openfl_display_IGraphicsData
};
var openfl_display_GraphicsBitmapFill = function(bitmapData,matrix,repeat,smooth) {
	if(smooth == null) {
		smooth = false;
	}
	if(repeat == null) {
		repeat = true;
	}
	this.bitmapData = bitmapData;
	this.matrix = matrix;
	this.repeat = repeat;
	this.smooth = smooth;
	this.__graphicsDataType = openfl_display_GraphicsDataType.BITMAP;
	this.__graphicsFillType = openfl_display_GraphicsFillType.BITMAP_FILL;
};
$hxClasses["openfl.display.GraphicsBitmapFill"] = openfl_display_GraphicsBitmapFill;
openfl_display_GraphicsBitmapFill.__name__ = ["openfl","display","GraphicsBitmapFill"];
openfl_display_GraphicsBitmapFill.__interfaces__ = [openfl_display_IGraphicsFill,openfl_display_IGraphicsData];
openfl_display_GraphicsBitmapFill.prototype = {
	bitmapData: null
	,matrix: null
	,repeat: null
	,smooth: null
	,__graphicsDataType: null
	,__graphicsFillType: null
	,__class__: openfl_display_GraphicsBitmapFill
};
var openfl_display_GraphicsEndFill = function() {
	this.__graphicsDataType = openfl_display_GraphicsDataType.END;
	this.__graphicsFillType = openfl_display_GraphicsFillType.END_FILL;
};
$hxClasses["openfl.display.GraphicsEndFill"] = openfl_display_GraphicsEndFill;
openfl_display_GraphicsEndFill.__name__ = ["openfl","display","GraphicsEndFill"];
openfl_display_GraphicsEndFill.__interfaces__ = [openfl_display_IGraphicsFill,openfl_display_IGraphicsData];
openfl_display_GraphicsEndFill.prototype = {
	__graphicsDataType: null
	,__graphicsFillType: null
	,__class__: openfl_display_GraphicsEndFill
};
var openfl_display_GraphicsGradientFill = function(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio) {
	if(focalPointRatio == null) {
		focalPointRatio = 0;
	}
	if(type == null) {
		type = 0;
	}
	if(spreadMethod == null) {
		spreadMethod = 0;
	}
	if(interpolationMethod == null) {
		interpolationMethod = 1;
	}
	this.type = type;
	this.colors = colors;
	this.alphas = alphas;
	this.ratios = ratios;
	this.matrix = matrix;
	this.spreadMethod = spreadMethod;
	this.interpolationMethod = interpolationMethod;
	this.focalPointRatio = focalPointRatio;
	this.__graphicsDataType = openfl_display_GraphicsDataType.GRADIENT;
	this.__graphicsFillType = openfl_display_GraphicsFillType.GRADIENT_FILL;
};
$hxClasses["openfl.display.GraphicsGradientFill"] = openfl_display_GraphicsGradientFill;
openfl_display_GraphicsGradientFill.__name__ = ["openfl","display","GraphicsGradientFill"];
openfl_display_GraphicsGradientFill.__interfaces__ = [openfl_display_IGraphicsFill,openfl_display_IGraphicsData];
openfl_display_GraphicsGradientFill.prototype = {
	alphas: null
	,colors: null
	,focalPointRatio: null
	,interpolationMethod: null
	,matrix: null
	,ratios: null
	,spreadMethod: null
	,type: null
	,__graphicsDataType: null
	,__graphicsFillType: null
	,__class__: openfl_display_GraphicsGradientFill
};
var openfl_display_IGraphicsPath = function() { };
$hxClasses["openfl.display.IGraphicsPath"] = openfl_display_IGraphicsPath;
openfl_display_IGraphicsPath.__name__ = ["openfl","display","IGraphicsPath"];
var openfl_display_GraphicsPath = function(commands,data,winding) {
	if(winding == null) {
		winding = 0;
	}
	this.commands = commands;
	this.data = data;
	this.winding = winding;
	this.__graphicsDataType = openfl_display_GraphicsDataType.PATH;
};
$hxClasses["openfl.display.GraphicsPath"] = openfl_display_GraphicsPath;
openfl_display_GraphicsPath.__name__ = ["openfl","display","GraphicsPath"];
openfl_display_GraphicsPath.__interfaces__ = [openfl_display_IGraphicsPath,openfl_display_IGraphicsData];
openfl_display_GraphicsPath.prototype = {
	commands: null
	,data: null
	,winding: null
	,__graphicsDataType: null
	,curveTo: function(controlX,controlY,anchorX,anchorY) {
		if(this.commands != null && this.data != null) {
			this.commands.push(3);
			this.data.push(anchorX);
			this.data.push(anchorY);
			this.data.push(controlX);
			this.data.push(controlY);
		}
	}
	,lineTo: function(x,y) {
		if(this.commands != null && this.data != null) {
			this.commands.push(2);
			this.data.push(x);
			this.data.push(y);
		}
	}
	,moveTo: function(x,y) {
		if(this.commands != null && this.data != null) {
			this.commands.push(1);
			this.data.push(x);
			this.data.push(y);
		}
	}
	,wideLineTo: function(x,y) {
		if(this.commands != null && this.data != null) {
			this.commands.push(2);
			this.data.push(x);
			this.data.push(y);
		}
	}
	,wideMoveTo: function(x,y) {
		if(this.commands != null && this.data != null) {
			this.commands.push(1);
			this.data.push(x);
			this.data.push(y);
		}
	}
	,__class__: openfl_display_GraphicsPath
};
var openfl_display__$GraphicsPathWinding_GraphicsPathWinding_$Impl_$ = {};
$hxClasses["openfl.display._GraphicsPathWinding.GraphicsPathWinding_Impl_"] = openfl_display__$GraphicsPathWinding_GraphicsPathWinding_$Impl_$;
openfl_display__$GraphicsPathWinding_GraphicsPathWinding_$Impl_$.__name__ = ["openfl","display","_GraphicsPathWinding","GraphicsPathWinding_Impl_"];
openfl_display__$GraphicsPathWinding_GraphicsPathWinding_$Impl_$.fromString = function(value) {
	switch(value) {
	case "evenOdd":
		return 0;
	case "nonZero":
		return 1;
	default:
		return null;
	}
};
openfl_display__$GraphicsPathWinding_GraphicsPathWinding_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "evenOdd";
	case 1:
		return "nonZero";
	default:
		return null;
	}
};
var openfl_display_GraphicsSolidFill = function(color,alpha) {
	if(alpha == null) {
		alpha = 1;
	}
	if(color == null) {
		color = 0;
	}
	this.alpha = alpha;
	this.color = color;
	this.__graphicsDataType = openfl_display_GraphicsDataType.SOLID;
	this.__graphicsFillType = openfl_display_GraphicsFillType.SOLID_FILL;
};
$hxClasses["openfl.display.GraphicsSolidFill"] = openfl_display_GraphicsSolidFill;
openfl_display_GraphicsSolidFill.__name__ = ["openfl","display","GraphicsSolidFill"];
openfl_display_GraphicsSolidFill.__interfaces__ = [openfl_display_IGraphicsFill,openfl_display_IGraphicsData];
openfl_display_GraphicsSolidFill.prototype = {
	alpha: null
	,color: null
	,__graphicsDataType: null
	,__graphicsFillType: null
	,__class__: openfl_display_GraphicsSolidFill
};
var openfl_display_IGraphicsStroke = function() { };
$hxClasses["openfl.display.IGraphicsStroke"] = openfl_display_IGraphicsStroke;
openfl_display_IGraphicsStroke.__name__ = ["openfl","display","IGraphicsStroke"];
var openfl_display_GraphicsStroke = function(thickness,pixelHinting,scaleMode,caps,joints,miterLimit,fill) {
	if(miterLimit == null) {
		miterLimit = 3;
	}
	if(pixelHinting == null) {
		pixelHinting = false;
	}
	if(thickness == null) {
		thickness = 0.0;
	}
	this.caps = caps != null ? caps : 0;
	this.fill = fill;
	this.joints = joints != null ? joints : 2;
	this.miterLimit = miterLimit;
	this.pixelHinting = pixelHinting;
	this.scaleMode = scaleMode != null ? scaleMode : 2;
	this.thickness = thickness;
	this.__graphicsDataType = openfl_display_GraphicsDataType.STROKE;
};
$hxClasses["openfl.display.GraphicsStroke"] = openfl_display_GraphicsStroke;
openfl_display_GraphicsStroke.__name__ = ["openfl","display","GraphicsStroke"];
openfl_display_GraphicsStroke.__interfaces__ = [openfl_display_IGraphicsStroke,openfl_display_IGraphicsData];
openfl_display_GraphicsStroke.prototype = {
	caps: null
	,fill: null
	,joints: null
	,miterLimit: null
	,pixelHinting: null
	,scaleMode: null
	,thickness: null
	,__graphicsDataType: null
	,__class__: openfl_display_GraphicsStroke
};
var openfl_display_GraphicsDataType = $hxClasses["openfl.display.GraphicsDataType"] = { __ename__ : ["openfl","display","GraphicsDataType"], __constructs__ : ["STROKE","SOLID","GRADIENT","PATH","BITMAP","END"] };
openfl_display_GraphicsDataType.STROKE = ["STROKE",0];
openfl_display_GraphicsDataType.STROKE.toString = $estr;
openfl_display_GraphicsDataType.STROKE.__enum__ = openfl_display_GraphicsDataType;
openfl_display_GraphicsDataType.SOLID = ["SOLID",1];
openfl_display_GraphicsDataType.SOLID.toString = $estr;
openfl_display_GraphicsDataType.SOLID.__enum__ = openfl_display_GraphicsDataType;
openfl_display_GraphicsDataType.GRADIENT = ["GRADIENT",2];
openfl_display_GraphicsDataType.GRADIENT.toString = $estr;
openfl_display_GraphicsDataType.GRADIENT.__enum__ = openfl_display_GraphicsDataType;
openfl_display_GraphicsDataType.PATH = ["PATH",3];
openfl_display_GraphicsDataType.PATH.toString = $estr;
openfl_display_GraphicsDataType.PATH.__enum__ = openfl_display_GraphicsDataType;
openfl_display_GraphicsDataType.BITMAP = ["BITMAP",4];
openfl_display_GraphicsDataType.BITMAP.toString = $estr;
openfl_display_GraphicsDataType.BITMAP.__enum__ = openfl_display_GraphicsDataType;
openfl_display_GraphicsDataType.END = ["END",5];
openfl_display_GraphicsDataType.END.toString = $estr;
openfl_display_GraphicsDataType.END.__enum__ = openfl_display_GraphicsDataType;
openfl_display_GraphicsDataType.__empty_constructs__ = [openfl_display_GraphicsDataType.STROKE,openfl_display_GraphicsDataType.SOLID,openfl_display_GraphicsDataType.GRADIENT,openfl_display_GraphicsDataType.PATH,openfl_display_GraphicsDataType.BITMAP,openfl_display_GraphicsDataType.END];
var openfl_display_GraphicsFillType = $hxClasses["openfl.display.GraphicsFillType"] = { __ename__ : ["openfl","display","GraphicsFillType"], __constructs__ : ["SOLID_FILL","GRADIENT_FILL","BITMAP_FILL","END_FILL"] };
openfl_display_GraphicsFillType.SOLID_FILL = ["SOLID_FILL",0];
openfl_display_GraphicsFillType.SOLID_FILL.toString = $estr;
openfl_display_GraphicsFillType.SOLID_FILL.__enum__ = openfl_display_GraphicsFillType;
openfl_display_GraphicsFillType.GRADIENT_FILL = ["GRADIENT_FILL",1];
openfl_display_GraphicsFillType.GRADIENT_FILL.toString = $estr;
openfl_display_GraphicsFillType.GRADIENT_FILL.__enum__ = openfl_display_GraphicsFillType;
openfl_display_GraphicsFillType.BITMAP_FILL = ["BITMAP_FILL",2];
openfl_display_GraphicsFillType.BITMAP_FILL.toString = $estr;
openfl_display_GraphicsFillType.BITMAP_FILL.__enum__ = openfl_display_GraphicsFillType;
openfl_display_GraphicsFillType.END_FILL = ["END_FILL",3];
openfl_display_GraphicsFillType.END_FILL.toString = $estr;
openfl_display_GraphicsFillType.END_FILL.__enum__ = openfl_display_GraphicsFillType;
openfl_display_GraphicsFillType.__empty_constructs__ = [openfl_display_GraphicsFillType.SOLID_FILL,openfl_display_GraphicsFillType.GRADIENT_FILL,openfl_display_GraphicsFillType.BITMAP_FILL,openfl_display_GraphicsFillType.END_FILL];
var openfl_display_IPreloader = function() { };
$hxClasses["openfl.display.IPreloader"] = openfl_display_IPreloader;
openfl_display_IPreloader.__name__ = ["openfl","display","IPreloader"];
openfl_display_IPreloader.prototype = {
	onInit: null
	,onLoaded: null
	,onUpdate: null
	,__class__: openfl_display_IPreloader
};
var openfl_display__$InterpolationMethod_InterpolationMethod_$Impl_$ = {};
$hxClasses["openfl.display._InterpolationMethod.InterpolationMethod_Impl_"] = openfl_display__$InterpolationMethod_InterpolationMethod_$Impl_$;
openfl_display__$InterpolationMethod_InterpolationMethod_$Impl_$.__name__ = ["openfl","display","_InterpolationMethod","InterpolationMethod_Impl_"];
openfl_display__$InterpolationMethod_InterpolationMethod_$Impl_$.fromString = function(value) {
	switch(value) {
	case "linearRGB":
		return 0;
	case "rgb":
		return 1;
	default:
		return null;
	}
};
openfl_display__$InterpolationMethod_InterpolationMethod_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "linearRGB";
	case 1:
		return "rgb";
	default:
		return null;
	}
};
var openfl_display_JPEGEncoderOptions = function(quality) {
	if(quality == null) {
		quality = 80;
	}
	this.quality = quality;
};
$hxClasses["openfl.display.JPEGEncoderOptions"] = openfl_display_JPEGEncoderOptions;
openfl_display_JPEGEncoderOptions.__name__ = ["openfl","display","JPEGEncoderOptions"];
openfl_display_JPEGEncoderOptions.prototype = {
	quality: null
	,__class__: openfl_display_JPEGEncoderOptions
};
var openfl_display__$JointStyle_JointStyle_$Impl_$ = {};
$hxClasses["openfl.display._JointStyle.JointStyle_Impl_"] = openfl_display__$JointStyle_JointStyle_$Impl_$;
openfl_display__$JointStyle_JointStyle_$Impl_$.__name__ = ["openfl","display","_JointStyle","JointStyle_Impl_"];
openfl_display__$JointStyle_JointStyle_$Impl_$.fromString = function(value) {
	switch(value) {
	case "bevel":
		return 0;
	case "miter":
		return 1;
	case "round":
		return 2;
	default:
		return null;
	}
};
openfl_display__$JointStyle_JointStyle_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "bevel";
	case 1:
		return "miter";
	case 2:
		return "round";
	default:
		return null;
	}
};
var openfl_display__$LineScaleMode_LineScaleMode_$Impl_$ = {};
$hxClasses["openfl.display._LineScaleMode.LineScaleMode_Impl_"] = openfl_display__$LineScaleMode_LineScaleMode_$Impl_$;
openfl_display__$LineScaleMode_LineScaleMode_$Impl_$.__name__ = ["openfl","display","_LineScaleMode","LineScaleMode_Impl_"];
openfl_display__$LineScaleMode_LineScaleMode_$Impl_$.fromString = function(value) {
	switch(value) {
	case "horizontal":
		return 0;
	case "none":
		return 1;
	case "normal":
		return 2;
	case "vertical":
		return 3;
	default:
		return null;
	}
};
openfl_display__$LineScaleMode_LineScaleMode_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "horizontal";
	case 1:
		return "none";
	case 2:
		return "normal";
	case 3:
		return "vertical";
	default:
		return null;
	}
};
var openfl_display_Loader = function() {
	openfl_display_DisplayObjectContainer.call(this);
	this.contentLoaderInfo = openfl_display_LoaderInfo.create(this);
};
$hxClasses["openfl.display.Loader"] = openfl_display_Loader;
openfl_display_Loader.__name__ = ["openfl","display","Loader"];
openfl_display_Loader.__super__ = openfl_display_DisplayObjectContainer;
openfl_display_Loader.prototype = $extend(openfl_display_DisplayObjectContainer.prototype,{
	content: null
	,contentLoaderInfo: null
	,mImage: null
	,mShape: null
	,close: function() {
		openfl_Lib.notImplemented({ fileName : "Loader.hx", lineNumber : 39, className : "openfl.display.Loader", methodName : "close"});
	}
	,load: function(request,context) {
		var extension = "";
		var parts = request.url.split(".");
		if(parts.length > 0) {
			extension = parts[parts.length - 1].toLowerCase();
		}
		if(extension.indexOf("?") != -1) {
			extension = extension.split("?")[0];
		}
		this.contentLoaderInfo.url = request.url;
		if(request.contentType == null || request.contentType == "") {
			var tmp;
			switch(extension) {
			case "gif":
				tmp = "image/gif";
				break;
			case "jpeg":case "jpg":
				tmp = "image/jpeg";
				break;
			case "png":
				tmp = "image/png";
				break;
			case "swf":
				tmp = "application/x-shockwave-flash";
				break;
			default:
				tmp = "application/x-www-form-urlencoded";
			}
			this.contentLoaderInfo.contentType = tmp;
		} else {
			this.contentLoaderInfo.contentType = request.contentType;
		}
		var worker = new lime_system_BackgroundWorker();
		worker.doWork.add(function(_) {
			openfl_display_BitmapData.fromFile(request.url,function(bitmapData) {
				worker.sendComplete(bitmapData);
			},function() {
				worker.sendError("ioError");
			});
		});
		worker.onError.add($bind(this,this.BitmapData_onError));
		worker.onComplete.add($bind(this,this.BitmapData_onLoad));
		worker.run();
	}
	,loadBytes: function(buffer,context) {
		var worker = new lime_system_BackgroundWorker();
		worker.doWork.add(function(_) {
			openfl_display_BitmapData.fromBytes(buffer,null,function(bitmapData) {
				worker.sendComplete(bitmapData);
			});
		});
		worker.onComplete.add($bind(this,this.BitmapData_onLoad));
		worker.run();
	}
	,unload: function() {
		if(this.get_numChildren() > 0) {
			while(this.get_numChildren() > 0) this.removeChildAt(0);
			this.content = null;
			this.contentLoaderInfo.url = null;
			this.contentLoaderInfo.contentType = null;
			this.contentLoaderInfo.content = null;
			this.contentLoaderInfo.bytesLoaded = 0;
			this.contentLoaderInfo.bytesTotal = 0;
			this.contentLoaderInfo.width = 0;
			this.contentLoaderInfo.height = 0;
			var event = new openfl_events_Event("unload");
			event.currentTarget = this;
			this.__dispatchEvent(event);
		}
	}
	,unloadAndStop: function(gc) {
		if(gc == null) {
			gc = true;
		}
		openfl_Lib.notImplemented({ fileName : "Loader.hx", lineNumber : 180, className : "openfl.display.Loader", methodName : "unloadAndStop"});
	}
	,BitmapData_onLoad: function(bitmapData) {
		this.contentLoaderInfo.content = new openfl_display_Bitmap(bitmapData);
		this.content = this.contentLoaderInfo.content;
		this.addChild(this.contentLoaderInfo.content);
		var event = new openfl_events_Event("complete");
		event.target = this.contentLoaderInfo;
		event.currentTarget = this.contentLoaderInfo;
		this.contentLoaderInfo.dispatchEvent(event);
	}
	,BitmapData_onError: function(_) {
		var event = new openfl_events_IOErrorEvent("ioError");
		event.target = this.contentLoaderInfo;
		event.currentTarget = this.contentLoaderInfo;
		this.contentLoaderInfo.dispatchEvent(event);
	}
	,__class__: openfl_display_Loader
});
var openfl_display_OpenGLView = function() {
	openfl_display_DirectRenderer.call(this,"OpenGLView");
};
$hxClasses["openfl.display.OpenGLView"] = openfl_display_OpenGLView;
openfl_display_OpenGLView.__name__ = ["openfl","display","OpenGLView"];
openfl_display_OpenGLView.__properties__ = {get_isSupported:"get_isSupported"}
openfl_display_OpenGLView.get_isSupported = function() {
	if(!window.WebGLRenderingContext) {
		return false;
	}
	if(lime_graphics_opengl_GL.context != null) {
		return true;
	} else {
		var canvas = window.document.createElement("canvas");
		var context = canvas.getContext("webgl");
		if(context == null) {
			context = canvas.getContext("experimental-webgl");
		}
		return context != null;
	}
};
openfl_display_OpenGLView.__super__ = openfl_display_DirectRenderer;
openfl_display_OpenGLView.prototype = $extend(openfl_display_DirectRenderer.prototype,{
	__added: null
	,__initialized: null
	,__renderCanvas: function(renderSession) {
	}
	,__renderDOM: function(renderSession) {
		if(this.stage != null && this.__worldVisible && this.__renderable) {
			if(!this.__added) {
				renderSession.element.appendChild(this.__canvas);
				this.__added = true;
				openfl__$internal_renderer_dom_DOMRenderer.initializeElement(this,this.__canvas,renderSession);
			}
			if(this.__context != null) {
				var rect = null;
				if(this.__scrollRect == null) {
					rect = new openfl_geom_Rectangle(0,0,this.stage.stageWidth,this.stage.stageHeight);
				} else {
					rect = new openfl_geom_Rectangle(this.get_x() + this.__scrollRect.x,this.get_y() + this.__scrollRect.y,this.__scrollRect.width,this.__scrollRect.height);
				}
				if(this.__render != null) {
					this.__render(rect);
				}
			}
		} else if(this.__added) {
			renderSession.element.removeChild(this.__canvas);
			this.__added = false;
		}
	}
	,__renderGL: function(renderSession) {
		if(this.stage != null && this.__renderable) {
			var rect = null;
			if(this.__scrollRect == null) {
				rect = new openfl_geom_Rectangle(0,0,this.stage.stageWidth,this.stage.stageHeight);
			} else {
				rect = new openfl_geom_Rectangle(this.get_x() + this.__scrollRect.x,this.get_y() + this.__scrollRect.y,this.__scrollRect.width,this.__scrollRect.height);
			}
			renderSession.shaderManager.setShader(null);
			renderSession.blendModeManager.setBlendMode(null);
			if(this.__render != null) {
				this.__render(rect);
			}
		}
	}
	,__class__: openfl_display_OpenGLView
});
var openfl_display_PNGEncoderOptions = function(fastCompression) {
	if(fastCompression == null) {
		fastCompression = false;
	}
	this.fastCompression = fastCompression;
};
$hxClasses["openfl.display.PNGEncoderOptions"] = openfl_display_PNGEncoderOptions;
openfl_display_PNGEncoderOptions.__name__ = ["openfl","display","PNGEncoderOptions"];
openfl_display_PNGEncoderOptions.prototype = {
	fastCompression: null
	,__class__: openfl_display_PNGEncoderOptions
};
var openfl_display__$PixelSnapping_PixelSnapping_$Impl_$ = {};
$hxClasses["openfl.display._PixelSnapping.PixelSnapping_Impl_"] = openfl_display__$PixelSnapping_PixelSnapping_$Impl_$;
openfl_display__$PixelSnapping_PixelSnapping_$Impl_$.__name__ = ["openfl","display","_PixelSnapping","PixelSnapping_Impl_"];
openfl_display__$PixelSnapping_PixelSnapping_$Impl_$.fromString = function(value) {
	switch(value) {
	case "always":
		return 0;
	case "auto":
		return 1;
	case "never":
		return 2;
	default:
		return null;
	}
};
openfl_display__$PixelSnapping_PixelSnapping_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "always";
	case 1:
		return "auto";
	case 2:
		return "never";
	default:
		return null;
	}
};
var openfl_display_Preloader = function(display) {
	lime_app_Preloader.call(this);
	this.display = display;
};
$hxClasses["openfl.display.Preloader"] = openfl_display_Preloader;
openfl_display_Preloader.__name__ = ["openfl","display","Preloader"];
openfl_display_Preloader.__super__ = lime_app_Preloader;
openfl_display_Preloader.prototype = $extend(lime_app_Preloader.prototype,{
	display: null
	,displayComplete: null
	,displayHasInit: null
	,displayHasLoaded: null
	,displayHasUpdate: null
	,init: function() {
		if(!this.complete && this.display != null) {
			var o = this.display;
			var fields = Type.getInstanceFields(o == null ? null : js_Boot.getClass(o));
			var _g = 0;
			while(_g < fields.length) {
				var field = fields[_g];
				++_g;
				if(field == "onInit") {
					this.displayHasInit = true;
				}
				if(field == "onUpdate") {
					this.displayHasUpdate = true;
				}
				if(field == "onLoaded") {
					this.displayHasLoaded = true;
				}
			}
			if(js_Boot.__instanceof(this.display,openfl_display_DisplayObject)) {
				openfl_Lib.current.addChild(this.display);
			}
			if(this.displayHasInit) {
				Reflect.field(this.display,"onInit").apply(this.display,[]);
			}
		}
	}
	,load: function(urls,types) {
		if(urls.length > 0) {
			this.init();
		}
		lime_app_Preloader.prototype.load.call(this,urls,types);
	}
	,start: function() {
		if(this.displayHasLoaded) {
			if(js_Boot.__instanceof(this.display,openfl_events_IEventDispatcher)) {
				this.display.addEventListener("complete",$bind(this,this.display_onComplete));
			}
			Reflect.field(this.display,"onLoaded").apply(this.display,[]);
			if(this.display != null && !js_Boot.__instanceof(this.display,openfl_events_IEventDispatcher)) {
				this.display_onComplete(null);
			}
		} else if(this.display != null) {
			this.display_onComplete(null);
		} else {
			lime_app_Preloader.prototype.start.call(this);
		}
	}
	,update: function(loaded,total) {
		if(this.displayHasUpdate) {
			Reflect.field(this.display,"onUpdate").apply(this.display,[loaded,total]);
		}
	}
	,display_onComplete: function(event) {
		if(this.display != null && js_Boot.__instanceof(this.display,openfl_events_IEventDispatcher)) {
			this.display.removeEventListener("complete",$bind(this,this.display_onComplete));
		}
		if(js_Boot.__instanceof(this.display,openfl_display_DisplayObject)) {
			if(this.display.parent == openfl_Lib.current) {
				openfl_Lib.current.removeChild(this.display);
			}
		}
		openfl_Lib.current.stage.set_focus(null);
		this.display = null;
		lime_app_Preloader.prototype.start.call(this);
	}
	,__class__: openfl_display_Preloader
});
var openfl_display_DefaultPreloader = function() {
	openfl_display_Sprite.call(this);
	var backgroundColor = this.getBackgroundColor();
	var color = 0;
	if(0.299 * (backgroundColor >> 16 & 255) + 0.587 * (backgroundColor >> 8 & 255) + 0.114 * (backgroundColor & 255) < 70) {
		color = 16777215;
	}
	var y = this.getHeight() / 2 - 3.5;
	var width = this.getWidth() - 60;
	this.outline = new openfl_display_Sprite();
	this.outline.get_graphics().beginFill(color,0.07);
	this.outline.get_graphics().drawRect(0,0,width,7);
	this.outline.set_x(30);
	this.outline.set_y(y);
	this.outline.set_alpha(0);
	this.addChild(this.outline);
	this.progress = new openfl_display_Sprite();
	this.progress.get_graphics().beginFill(color,0.35);
	this.progress.get_graphics().drawRect(0,0,width - 4,3);
	this.progress.set_x(32);
	this.progress.set_y(y + 2);
	this.progress.set_scaleX(0);
	this.progress.set_alpha(0);
	this.addChild(this.progress);
	this.startAnimation = openfl_Lib.getTimer() + 100;
	this.endAnimation = this.startAnimation + 1000;
};
$hxClasses["openfl.display.DefaultPreloader"] = openfl_display_DefaultPreloader;
openfl_display_DefaultPreloader.__name__ = ["openfl","display","DefaultPreloader"];
openfl_display_DefaultPreloader.__interfaces__ = [openfl_display_IPreloader];
openfl_display_DefaultPreloader.__super__ = openfl_display_Sprite;
openfl_display_DefaultPreloader.prototype = $extend(openfl_display_Sprite.prototype,{
	endAnimation: null
	,outline: null
	,progress: null
	,startAnimation: null
	,getBackgroundColor: function() {
		return openfl_Lib.current.stage.window.config.background;
	}
	,getHeight: function() {
		var height = openfl_Lib.current.stage.window.config.height;
		if(height > 0) {
			return height;
		} else {
			return openfl_Lib.current.stage.stageHeight;
		}
	}
	,getWidth: function() {
		var width = openfl_Lib.current.stage.window.config.width;
		if(width > 0) {
			return width;
		} else {
			return openfl_Lib.current.stage.stageWidth;
		}
	}
	,onInit: function() {
		this.addEventListener("enterFrame",$bind(this,this.this_onEnterFrame));
	}
	,onLoaded: function() {
		this.removeEventListener("enterFrame",$bind(this,this.this_onEnterFrame));
		this.dispatchEvent(new openfl_events_Event("complete"));
	}
	,onUpdate: function(bytesLoaded,bytesTotal) {
		var percentLoaded = bytesLoaded / bytesTotal;
		if(percentLoaded > 1) {
			percentLoaded = 1;
		}
		this.progress.set_scaleX(percentLoaded);
	}
	,this_onEnterFrame: function(event) {
		var percent = (openfl_Lib.getTimer() - this.startAnimation) / (this.endAnimation - this.startAnimation);
		if(percent < 0) {
			percent = 0;
		}
		if(percent > 1) {
			percent = 1;
		}
		this.outline.set_alpha(percent);
		this.progress.set_alpha(percent);
	}
	,__class__: openfl_display_DefaultPreloader
});
var openfl_display_Shader = function(code) {
	this.__data = new openfl_display_ShaderData(null);
	if(this.__glFragmentSource == null) {
		this.__glFragmentSource = "varying float vAlpha;\n\t\tvarying vec2 vTexCoord;\n\t\tuniform sampler2D uImage0;\n\t\t\n\t\tvoid main(void) {\n\t\t\t\n\t\t\tvec4 color = texture2D (uImage0, vTexCoord);\n\t\t\t\n\t\t\tif (color.a == 0.0) {\n\t\t\t\t\n\t\t\t\tgl_FragColor = vec4 (0.0, 0.0, 0.0, 0.0);\n\t\t\t\t\n\t\t\t} else {\n\t\t\t\t\n\t\t\t\tgl_FragColor = color * vAlpha;\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t}";
	}
	if(this.__glVertexSource == null) {
		this.__glVertexSource = "attribute float aAlpha;\n\t\tattribute vec4 aPosition;\n\t\tattribute vec2 aTexCoord;\n\t\tvarying float vAlpha;\n\t\tvarying vec2 vTexCoord;\n\t\t\n\t\tuniform mat4 uMatrix;\n\t\t\n\t\tvoid main(void) {\n\t\t\t\n\t\t\tvAlpha = aAlpha;\n\t\t\tvTexCoord = aTexCoord;\n\t\t\tgl_Position = uMatrix * aPosition;\n\t\t\t\n\t\t}";
	}
	this.byteCode = code;
	this.precisionHint = 1;
	this.__glSourceDirty = true;
};
$hxClasses["openfl.display.Shader"] = openfl_display_Shader;
openfl_display_Shader.__name__ = ["openfl","display","Shader"];
openfl_display_Shader.prototype = {
	byteCode: null
	,glProgram: null
	,precisionHint: null
	,gl: null
	,__data: null
	,__glFragmentSource: null
	,__glSourceDirty: null
	,__glVertexSource: null
	,__isUniform: null
	,__inputBitmapData: null
	,__paramBool: null
	,__paramFloat: null
	,__paramInt: null
	,__uniformMatrix2: null
	,__uniformMatrix3: null
	,__uniformMatrix4: null
	,__disable: function() {
		if(this.glProgram != null) {
			this.__disableGL();
		}
	}
	,__disableGL: function() {
		if(this.get_data().uImage0 != null) {
			this.get_data().uImage0.input = null;
		}
		var _g = 0;
		var _g1 = this.__paramBool;
		while(_g < _g1.length) {
			var parameter = _g1[_g];
			++_g;
			this.gl.disableVertexAttribArray(parameter.index);
		}
		var _g2 = 0;
		var _g11 = this.__paramFloat;
		while(_g2 < _g11.length) {
			var parameter1 = _g11[_g2];
			++_g2;
			this.gl.disableVertexAttribArray(parameter1.index);
		}
		var _g3 = 0;
		var _g12 = this.__paramInt;
		while(_g3 < _g12.length) {
			var parameter2 = _g12[_g3];
			++_g3;
			this.gl.disableVertexAttribArray(parameter2.index);
		}
		this.gl.bindBuffer(this.gl.ARRAY_BUFFER,null);
		this.gl.bindTexture(this.gl.TEXTURE_2D,null);
	}
	,__enable: function() {
		this.__init();
		if(this.glProgram != null) {
			this.__enableGL();
		}
	}
	,__enableGL: function() {
		var textureCount = 0;
		var _g = 0;
		var _g1 = this.__inputBitmapData;
		while(_g < _g1.length) {
			var input = _g1[_g];
			++_g;
			this.gl.uniform1i(input.index,textureCount);
			++textureCount;
		}
	}
	,__init: function() {
		if(this.__data == null) {
			this.__data = new openfl_display_ShaderData(null);
		}
		if(this.__glFragmentSource != null && this.__glVertexSource != null && (this.glProgram == null || this.__glSourceDirty)) {
			this.__initGL();
		}
	}
	,__initGL: function() {
		if(this.__glSourceDirty || this.__isUniform == null) {
			this.__glSourceDirty = false;
			this.glProgram = null;
			this.__isUniform = new haxe_ds_StringMap();
			this.__inputBitmapData = [];
			this.__paramBool = [];
			this.__paramFloat = [];
			this.__paramInt = [];
			this.__uniformMatrix2 = new Float32Array(4);
			this.__uniformMatrix3 = new Float32Array(9);
			this.__uniformMatrix4 = new Float32Array(16);
			this.__processGLData(this.get_glVertexSource(),"attribute");
			this.__processGLData(this.get_glVertexSource(),"uniform");
			this.__processGLData(this.get_glFragmentSource(),"uniform");
		}
		if(this.gl != null && this.glProgram == null) {
			this.glProgram = lime_utils_GLUtils.createProgram(this.get_glVertexSource(),"#ifdef GL_ES\n\t\t\t\tprecision " + (this.precisionHint == 1 ? "mediump" : "lowp") + " float;\n\t\t\t\t#endif\n\t\t\t\t" + this.get_glFragmentSource());
			if(this.glProgram != null) {
				var _g = 0;
				var _g1 = this.__inputBitmapData;
				while(_g < _g1.length) {
					var input = _g1[_g];
					++_g;
					var key = input.name;
					var _this = this.__isUniform;
					if(__map_reserved[key] != null ? _this.getReserved(key) : _this.h[key]) {
						input.index = this.gl.getUniformLocation(this.glProgram,input.name);
					} else {
						input.index = this.gl.getAttribLocation(this.glProgram,input.name);
					}
				}
				var _g2 = 0;
				var _g11 = this.__paramBool;
				while(_g2 < _g11.length) {
					var parameter = _g11[_g2];
					++_g2;
					var key1 = parameter.name;
					var _this1 = this.__isUniform;
					if(__map_reserved[key1] != null ? _this1.getReserved(key1) : _this1.h[key1]) {
						parameter.index = this.gl.getUniformLocation(this.glProgram,parameter.name);
					} else {
						parameter.index = this.gl.getAttribLocation(this.glProgram,parameter.name);
					}
				}
				var _g3 = 0;
				var _g12 = this.__paramFloat;
				while(_g3 < _g12.length) {
					var parameter1 = _g12[_g3];
					++_g3;
					var key2 = parameter1.name;
					var _this2 = this.__isUniform;
					if(__map_reserved[key2] != null ? _this2.getReserved(key2) : _this2.h[key2]) {
						parameter1.index = this.gl.getUniformLocation(this.glProgram,parameter1.name);
					} else {
						parameter1.index = this.gl.getAttribLocation(this.glProgram,parameter1.name);
					}
				}
				var _g4 = 0;
				var _g13 = this.__paramInt;
				while(_g4 < _g13.length) {
					var parameter2 = _g13[_g4];
					++_g4;
					var key3 = parameter2.name;
					var _this3 = this.__isUniform;
					if(__map_reserved[key3] != null ? _this3.getReserved(key3) : _this3.h[key3]) {
						parameter2.index = this.gl.getUniformLocation(this.glProgram,parameter2.name);
					} else {
						parameter2.index = this.gl.getAttribLocation(this.glProgram,parameter2.name);
					}
				}
			}
		}
	}
	,__processGLData: function(source,storageType) {
		var lastMatch = 0;
		var position;
		var regex;
		var name;
		var type;
		if(storageType == "uniform") {
			regex = new EReg("uniform ([A-Za-z0-9]+) ([A-Za-z0-9]+)","");
		} else {
			regex = new EReg("attribute ([A-Za-z0-9]+) ([A-Za-z0-9]+)","");
		}
		while(regex.matchSub(source,lastMatch)) {
			type = regex.matched(1);
			name = regex.matched(2);
			if(StringTools.startsWith(type,"sampler")) {
				var input = new openfl_display_ShaderInput();
				input.name = name;
				this.__inputBitmapData.push(input);
				this.get_data()[name] = input;
			} else {
				var parameterType;
				switch(type) {
				case "bool":
					parameterType = 0;
					break;
				case "bvec2":
					parameterType = 1;
					break;
				case "bvec3":
					parameterType = 2;
					break;
				case "bvec4":
					parameterType = 3;
					break;
				case "dvec2":case "vec2":
					parameterType = 5;
					break;
				case "dvec3":case "vec3":
					parameterType = 6;
					break;
				case "double":case "float":
					parameterType = 4;
					break;
				case "ivec3":case "uvec3":
					parameterType = 10;
					break;
				case "ivec4":case "uvec4":
					parameterType = 11;
					break;
				case "mat2":case "mat2x2":
					parameterType = 12;
					break;
				case "mat2x3":
					parameterType = 13;
					break;
				case "mat2x4":
					parameterType = 14;
					break;
				case "mat3x2":
					parameterType = 15;
					break;
				case "mat3":case "mat3x3":
					parameterType = 16;
					break;
				case "mat3x4":
					parameterType = 17;
					break;
				case "mat4":case "mat4x4":
					parameterType = 20;
					break;
				case "mat4x2":
					parameterType = 18;
					break;
				case "mat4x3":
					parameterType = 19;
					break;
				case "int":case "uint":
					parameterType = 8;
					break;
				case "ivec2":case "uvec2":
					parameterType = 9;
					break;
				case "dvec4":case "vec4":
					parameterType = 7;
					break;
				default:
					parameterType = null;
				}
				switch(parameterType) {
				case 0:case 1:case 2:case 3:
					var parameter = new openfl_display_ShaderParameter();
					parameter.name = name;
					parameter.type = parameterType;
					this.__paramBool.push(parameter);
					this.get_data()[name] = parameter;
					break;
				case 8:case 9:case 10:case 11:
					var parameter1 = new openfl_display_ShaderParameter();
					parameter1.name = name;
					parameter1.type = parameterType;
					this.__paramInt.push(parameter1);
					this.get_data()[name] = parameter1;
					break;
				default:
					var parameter2 = new openfl_display_ShaderParameter();
					parameter2.name = name;
					parameter2.type = parameterType;
					this.__paramFloat.push(parameter2);
					this.get_data()[name] = parameter2;
				}
			}
			var _this = this.__isUniform;
			var value = storageType == "uniform";
			if(__map_reserved[name] != null) {
				_this.setReserved(name,value);
			} else {
				_this.h[name] = value;
			}
			position = regex.matchedPos();
			lastMatch = position.pos + position.len;
		}
	}
	,__update: function() {
		if(this.glProgram != null) {
			this.__updateGL();
		}
	}
	,__updateGL: function() {
		var textureCount = 0;
		var _g = 0;
		var _g1 = this.__inputBitmapData;
		while(_g < _g1.length) {
			var input = _g1[_g];
			++_g;
			if(input.input != null) {
				this.gl.activeTexture(this.gl.TEXTURE0 + textureCount);
				this.gl.bindTexture(this.gl.TEXTURE_2D,input.input.getTexture(this.gl));
				if(input.smoothing) {
					this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_MAG_FILTER,this.gl.LINEAR);
					this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_MIN_FILTER,this.gl.LINEAR);
				} else {
					this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_MAG_FILTER,this.gl.NEAREST);
					this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_MIN_FILTER,this.gl.NEAREST);
				}
			}
			++textureCount;
		}
		var index = 0;
		var _g2 = 0;
		var _g11 = this.__paramBool;
		while(_g2 < _g11.length) {
			var parameter = _g11[_g2];
			++_g2;
			var value = parameter.value;
			index = parameter.index;
			if(value != null) {
				switch(parameter.type) {
				case 0:
					this.gl.uniform1i(index,value[0] ? 1 : 0);
					break;
				case 1:
					this.gl.uniform2i(index,value[0] ? 1 : 0,value[1] ? 1 : 0);
					break;
				case 2:
					this.gl.uniform3i(index,value[0] ? 1 : 0,value[1] ? 1 : 0,value[2] ? 1 : 0);
					break;
				case 3:
					this.gl.uniform4i(index,value[0] ? 1 : 0,value[1] ? 1 : 0,value[2] ? 1 : 0,value[3] ? 1 : 0);
					break;
				default:
				}
			} else {
				var key = parameter.name;
				var _this = this.__isUniform;
				if(!(__map_reserved[key] != null ? _this.getReserved(key) : _this.h[key])) {
					this.gl.enableVertexAttribArray(parameter.index);
				}
			}
		}
		var _g3 = 0;
		var _g12 = this.__paramFloat;
		while(_g3 < _g12.length) {
			var parameter1 = _g12[_g3];
			++_g3;
			var value1 = parameter1.value;
			index = parameter1.index;
			if(value1 != null) {
				switch(parameter1.type) {
				case 4:
					this.gl.uniform1f(index,value1[0]);
					break;
				case 5:
					this.gl.uniform2f(index,value1[0],value1[1]);
					break;
				case 6:
					this.gl.uniform3f(index,value1[0],value1[1],value1[2]);
					break;
				case 7:
					this.gl.uniform4f(index,value1[0],value1[1],value1[2],value1[3]);
					break;
				case 12:
					var _g21 = 0;
					while(_g21 < 4) {
						var i = _g21++;
						this.__uniformMatrix2[i] = value1[i];
					}
					this.gl.uniformMatrix2fv(index,false,this.__uniformMatrix2);
					break;
				case 16:
					var _g22 = 0;
					while(_g22 < 9) {
						var i1 = _g22++;
						this.__uniformMatrix3[i1] = value1[i1];
					}
					this.gl.uniformMatrix3fv(index,false,this.__uniformMatrix3);
					break;
				case 20:
					var _g23 = 0;
					while(_g23 < 16) {
						var i2 = _g23++;
						this.__uniformMatrix4[i2] = value1[i2];
					}
					this.gl.uniformMatrix4fv(index,false,this.__uniformMatrix4);
					break;
				default:
				}
			} else {
				var key1 = parameter1.name;
				var _this1 = this.__isUniform;
				if(!(__map_reserved[key1] != null ? _this1.getReserved(key1) : _this1.h[key1])) {
					this.gl.enableVertexAttribArray(parameter1.index);
				}
			}
		}
		var _g4 = 0;
		var _g13 = this.__paramInt;
		while(_g4 < _g13.length) {
			var parameter2 = _g13[_g4];
			++_g4;
			var value2 = parameter2.value;
			if(value2 != null) {
				switch(parameter2.type) {
				case 8:
					this.gl.uniform1i(index,value2[0]);
					break;
				case 9:
					this.gl.uniform2i(index,value2[0],value2[1]);
					break;
				case 10:
					this.gl.uniform3i(index,value2[0],value2[1],value2[2]);
					break;
				case 11:
					this.gl.uniform4i(index,value2[0],value2[1],value2[2],value2[3]);
					break;
				default:
				}
			} else {
				var key2 = parameter2.name;
				var _this2 = this.__isUniform;
				if(!(__map_reserved[key2] != null ? _this2.getReserved(key2) : _this2.h[key2])) {
					this.gl.enableVertexAttribArray(parameter2.index);
				}
			}
		}
	}
	,get_data: function() {
		if(this.__glSourceDirty || this.__data == null) {
			this.__init();
		}
		return this.__data;
	}
	,set_data: function(value) {
		return this.__data = value;
	}
	,get_glFragmentSource: function() {
		return this.__glFragmentSource;
	}
	,set_glFragmentSource: function(value) {
		if(value != this.__glFragmentSource) {
			this.__glSourceDirty = true;
		}
		return this.__glFragmentSource = value;
	}
	,get_glVertexSource: function() {
		return this.__glVertexSource;
	}
	,set_glVertexSource: function(value) {
		if(value != this.__glFragmentSource) {
			this.__glSourceDirty = true;
		}
		return this.__glFragmentSource = value;
	}
	,__class__: openfl_display_Shader
	,__properties__: {set_glVertexSource:"set_glVertexSource",get_glVertexSource:"get_glVertexSource",set_glFragmentSource:"set_glFragmentSource",get_glFragmentSource:"get_glFragmentSource",set_data:"set_data",get_data:"get_data"}
};
var openfl_display_ShaderData = function(byteArray) {
};
$hxClasses["openfl.display.ShaderData"] = openfl_display_ShaderData;
openfl_display_ShaderData.__name__ = ["openfl","display","ShaderData"];
openfl_display_ShaderData.prototype = {
	aAlpha: null
	,aPosition: null
	,aTexCoord: null
	,uImage0: null
	,uMatrix: null
	,__class__: openfl_display_ShaderData
};
var openfl_display_ShaderInput = function() {
	this.channels = 0;
	this.height = 0;
	this.index = 0;
	this.width = 0;
};
$hxClasses["openfl.display.ShaderInput"] = openfl_display_ShaderInput;
openfl_display_ShaderInput.__name__ = ["openfl","display","ShaderInput"];
openfl_display_ShaderInput.prototype = {
	channels: null
	,height: null
	,index: null
	,input: null
	,name: null
	,smoothing: null
	,width: null
	,__class__: openfl_display_ShaderInput
};
var openfl_display_ShaderParameter = function() {
	this.index = 0;
};
$hxClasses["openfl.display.ShaderParameter"] = openfl_display_ShaderParameter;
openfl_display_ShaderParameter.__name__ = ["openfl","display","ShaderParameter"];
openfl_display_ShaderParameter.prototype = {
	index: null
	,name: null
	,type: null
	,value: null
	,__class__: openfl_display_ShaderParameter
};
var openfl_display__$ShaderParameterType_ShaderParameterType_$Impl_$ = {};
$hxClasses["openfl.display._ShaderParameterType.ShaderParameterType_Impl_"] = openfl_display__$ShaderParameterType_ShaderParameterType_$Impl_$;
openfl_display__$ShaderParameterType_ShaderParameterType_$Impl_$.__name__ = ["openfl","display","_ShaderParameterType","ShaderParameterType_Impl_"];
openfl_display__$ShaderParameterType_ShaderParameterType_$Impl_$.fromString = function(value) {
	switch(value) {
	case "bool":
		return 0;
	case "bool2":
		return 1;
	case "bool3":
		return 1;
	case "bool4":
		return 1;
	case "float":
		return 4;
	case "float2":
		return 5;
	case "float3":
		return 6;
	case "float4":
		return 7;
	case "int":
		return 8;
	case "int2":
		return 9;
	case "int3":
		return 10;
	case "int4":
		return 11;
	case "matrix2x2":
		return 12;
	case "matrix2x3":
		return 13;
	case "matrix2x4":
		return 14;
	case "matrix3x2":
		return 15;
	case "matrix3x3":
		return 16;
	case "matrix3x4":
		return 17;
	case "matrix4x2":
		return 18;
	case "matrix4x3":
		return 19;
	case "matrix4x4":
		return 20;
	default:
		return null;
	}
};
openfl_display__$ShaderParameterType_ShaderParameterType_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "bool";
	case 1:
		return "bool2";
	case 2:
		return "bool3";
	case 3:
		return "bool4";
	case 4:
		return "float";
	case 5:
		return "float2";
	case 6:
		return "float3";
	case 7:
		return "float4";
	case 8:
		return "int";
	case 9:
		return "int2";
	case 10:
		return "int3";
	case 11:
		return "int4";
	case 12:
		return "matrix2x2";
	case 13:
		return "matrix2x3";
	case 14:
		return "matrix2x4";
	case 15:
		return "matrix3x2";
	case 16:
		return "matrix3x3";
	case 17:
		return "matrix3x4";
	case 18:
		return "matrix4x2";
	case 19:
		return "matrix4x3";
	case 20:
		return "matrix4x4";
	default:
		return null;
	}
};
var openfl_display__$ShaderPrecision_ShaderPrecision_$Impl_$ = {};
$hxClasses["openfl.display._ShaderPrecision.ShaderPrecision_Impl_"] = openfl_display__$ShaderPrecision_ShaderPrecision_$Impl_$;
openfl_display__$ShaderPrecision_ShaderPrecision_$Impl_$.__name__ = ["openfl","display","_ShaderPrecision","ShaderPrecision_Impl_"];
openfl_display__$ShaderPrecision_ShaderPrecision_$Impl_$.fromString = function(value) {
	switch(value) {
	case "fast":
		return 0;
	case "full":
		return 1;
	default:
		return null;
	}
};
openfl_display__$ShaderPrecision_ShaderPrecision_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "fast";
	case 1:
		return "full";
	default:
		return null;
	}
};
var openfl_display__$SpreadMethod_SpreadMethod_$Impl_$ = {};
$hxClasses["openfl.display._SpreadMethod.SpreadMethod_Impl_"] = openfl_display__$SpreadMethod_SpreadMethod_$Impl_$;
openfl_display__$SpreadMethod_SpreadMethod_$Impl_$.__name__ = ["openfl","display","_SpreadMethod","SpreadMethod_Impl_"];
openfl_display__$SpreadMethod_SpreadMethod_$Impl_$.fromString = function(value) {
	switch(value) {
	case "pad":
		return 0;
	case "reflect":
		return 1;
	case "repeat":
		return 2;
	default:
		return null;
	}
};
openfl_display__$SpreadMethod_SpreadMethod_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "pad";
	case 1:
		return "reflect";
	case 2:
		return "repeat";
	default:
		return null;
	}
};
var openfl_display_Stage = function(window,color) {
	openfl_display_DisplayObjectContainer.call(this);
	this.application = window.application;
	this.window = window;
	if(color == null) {
		this.__transparent = true;
		this.set_color(0);
	} else {
		this.set_color(color);
	}
	this.set_name(null);
	this.__deltaTime = 0;
	this.__displayState = 2;
	this.__mouseX = 0;
	this.__mouseY = 0;
	this.__lastClickTime = 0;
	this.__logicalWidth = 0;
	this.__logicalHeight = 0;
	this.__displayMatrix = new openfl_geom_Matrix();
	this.stage3Ds = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
	this.stage3Ds.push(new openfl_display_Stage3D());
	this.__resize();
	this.stage = this;
	this.align = 6;
	this.allowsFullScreen = false;
	this.allowsFullScreenInteractive = false;
	this.quality = 1;
	this.scaleMode = 2;
	this.stageFocusRect = true;
	this.__macKeyboard = /AppleWebKit/.test (navigator.userAgent) && /Mobile\/\w+/.test (navigator.userAgent) || /Mac/.test (navigator.platform);
	this.__clearBeforeRender = true;
	this.__stack = [];
	this.__rollOutStack = [];
	if(openfl_Lib.current.stage == null) {
		this.stage.addChild(openfl_Lib.current);
	}
};
$hxClasses["openfl.display.Stage"] = openfl_display_Stage;
openfl_display_Stage.__name__ = ["openfl","display","Stage"];
openfl_display_Stage.__interfaces__ = [lime_app_IModule];
openfl_display_Stage.__super__ = openfl_display_DisplayObjectContainer;
openfl_display_Stage.prototype = $extend(openfl_display_DisplayObjectContainer.prototype,{
	align: null
	,allowsFullScreen: null
	,allowsFullScreenInteractive: null
	,application: null
	,quality: null
	,scaleMode: null
	,stage3Ds: null
	,stageFocusRect: null
	,stageHeight: null
	,stageWidth: null
	,window: null
	,__cacheFocus: null
	,__clearBeforeRender: null
	,__color: null
	,__colorSplit: null
	,__colorString: null
	,__deltaTime: null
	,__dirty: null
	,__displayMatrix: null
	,__displayState: null
	,__dragBounds: null
	,__dragObject: null
	,__dragOffsetX: null
	,__dragOffsetY: null
	,__focus: null
	,__fullscreen: null
	,__invalidated: null
	,__lastClickTime: null
	,__logicalWidth: null
	,__logicalHeight: null
	,__macKeyboard: null
	,__mouseDownLeft: null
	,__mouseDownMiddle: null
	,__mouseDownRight: null
	,__mouseOverTarget: null
	,__mouseX: null
	,__mouseY: null
	,__primaryTouch: null
	,__renderer: null
	,__rendering: null
	,__rollOutStack: null
	,__stack: null
	,__transparent: null
	,__wasDirty: null
	,addRenderer: function(renderer) {
		var f = $bind(this,this.render);
		var a1 = renderer;
		var tmp = function() {
			f(a1);
		};
		renderer.onRender.add(tmp);
		var f1 = $bind(this,this.onRenderContextLost);
		var a11 = renderer;
		var tmp1 = function() {
			f1(a11);
		};
		renderer.onContextLost.add(tmp1);
		var f2 = $bind(this,this.onRenderContextRestored);
		var a12 = renderer;
		var tmp2 = function(a2) {
			f2(a12,a2);
		};
		renderer.onContextRestored.add(tmp2);
	}
	,addWindow: function(window) {
		if(this.window != window) {
			return;
		}
		var f = $bind(this,this.onWindowActivate);
		var a1 = window;
		var tmp = function() {
			f(a1);
		};
		window.onActivate.add(tmp);
		var f1 = $bind(this,this.onWindowClose);
		var a11 = window;
		var tmp1 = function() {
			f1(a11);
		};
		window.onClose.add(tmp1);
		var f2 = $bind(this,this.onWindowCreate);
		var a12 = window;
		var tmp2 = function() {
			f2(a12);
		};
		window.onCreate.add(tmp2);
		var f3 = $bind(this,this.onWindowDeactivate);
		var a13 = window;
		var tmp3 = function() {
			f3(a13);
		};
		window.onDeactivate.add(tmp3);
		var f4 = $bind(this,this.onWindowDropFile);
		var a14 = window;
		var tmp4 = function(a2) {
			f4(a14,a2);
		};
		window.onDropFile.add(tmp4);
		var f5 = $bind(this,this.onWindowEnter);
		var a15 = window;
		var tmp5 = function() {
			f5(a15);
		};
		window.onEnter.add(tmp5);
		var f6 = $bind(this,this.onWindowFocusIn);
		var a16 = window;
		var tmp6 = function() {
			f6(a16);
		};
		window.onFocusIn.add(tmp6);
		var f7 = $bind(this,this.onWindowFocusOut);
		var a17 = window;
		var tmp7 = function() {
			f7(a17);
		};
		window.onFocusOut.add(tmp7);
		var f8 = $bind(this,this.onWindowFullscreen);
		var a18 = window;
		var tmp8 = function() {
			f8(a18);
		};
		window.onFullscreen.add(tmp8);
		var f9 = $bind(this,this.onKeyDown);
		var a19 = window;
		var tmp9 = function(a21,a3) {
			f9(a19,a21,a3);
		};
		window.onKeyDown.add(tmp9);
		var f10 = $bind(this,this.onKeyUp);
		var a110 = window;
		var tmp10 = function(a22,a31) {
			f10(a110,a22,a31);
		};
		window.onKeyUp.add(tmp10);
		var f11 = $bind(this,this.onWindowLeave);
		var a111 = window;
		var tmp11 = function() {
			f11(a111);
		};
		window.onLeave.add(tmp11);
		var f12 = $bind(this,this.onWindowMinimize);
		var a112 = window;
		var tmp12 = function() {
			f12(a112);
		};
		window.onMinimize.add(tmp12);
		var f13 = $bind(this,this.onMouseDown);
		var a113 = window;
		var tmp13 = function(x,y,a23) {
			f13(a113,x,y,a23);
		};
		window.onMouseDown.add(tmp13);
		var f14 = $bind(this,this.onMouseMove);
		var a114 = window;
		var tmp14 = function(x1,y1) {
			f14(a114,x1,y1);
		};
		window.onMouseMove.add(tmp14);
		var f15 = $bind(this,this.onMouseMoveRelative);
		var a115 = window;
		var tmp15 = function(x2,y2) {
			f15(a115,x2,y2);
		};
		window.onMouseMoveRelative.add(tmp15);
		var f16 = $bind(this,this.onMouseUp);
		var a116 = window;
		var tmp16 = function(x3,y3,a24) {
			f16(a116,x3,y3,a24);
		};
		window.onMouseUp.add(tmp16);
		var f17 = $bind(this,this.onMouseWheel);
		var a117 = window;
		var tmp17 = function(a25,a32) {
			f17(a117,a25,a32);
		};
		window.onMouseWheel.add(tmp17);
		var f18 = $bind(this,this.onWindowMove);
		var a118 = window;
		var tmp18 = function(x4,y4) {
			f18(a118,x4,y4);
		};
		window.onMove.add(tmp18);
		var f19 = $bind(this,this.onWindowResize);
		var a119 = window;
		var tmp19 = function(a26,a33) {
			f19(a119,a26,a33);
		};
		window.onResize.add(tmp19);
		var f20 = $bind(this,this.onWindowRestore);
		var a120 = window;
		var tmp20 = function() {
			f20(a120);
		};
		window.onRestore.add(tmp20);
		var f21 = $bind(this,this.onTextEdit);
		var a121 = window;
		var tmp21 = function(a27,a34,a4) {
			f21(a121,a27,a34,a4);
		};
		window.onTextEdit.add(tmp21);
		var f22 = $bind(this,this.onTextInput);
		var a122 = window;
		var tmp22 = function(a28) {
			f22(a122,a28);
		};
		window.onTextInput.add(tmp22);
		if(window.id > -1) {
			this.onWindowCreate(window);
		}
	}
	,registerModule: function(application) {
		application.onExit.add($bind(this,this.onModuleExit),false,0);
		application.onUpdate.add($bind(this,this.update));
		var gamepad = lime_ui_Gamepad.devices.iterator();
		while(gamepad.hasNext()) this.__onGamepadConnect(gamepad.next());
		lime_ui_Gamepad.onConnect.add($bind(this,this.__onGamepadConnect));
		lime_ui_Touch.onStart.add($bind(this,this.onTouchStart));
		lime_ui_Touch.onMove.add($bind(this,this.onTouchMove));
		lime_ui_Touch.onEnd.add($bind(this,this.onTouchEnd));
	}
	,removeRenderer: function(renderer) {
	}
	,removeWindow: function(window) {
	}
	,setPreloader: function(preloader) {
	}
	,unregisterModule: function(application) {
		application.onExit.remove($bind(this,this.onModuleExit));
		application.onUpdate.remove($bind(this,this.update));
		lime_ui_Gamepad.onConnect.remove($bind(this,this.__onGamepadConnect));
		lime_ui_Touch.onStart.remove($bind(this,this.onTouchStart));
		lime_ui_Touch.onMove.remove($bind(this,this.onTouchMove));
		lime_ui_Touch.onEnd.remove($bind(this,this.onTouchEnd));
	}
	,globalToLocal: function(pos) {
		return pos.clone();
	}
	,invalidate: function() {
		this.__invalidated = true;
	}
	,localToGlobal: function(pos) {
		return pos.clone();
	}
	,onGamepadAxisMove: function(gamepad,axis,value) {
		openfl_ui_GameInput.__onGamepadAxisMove(gamepad,axis,value);
	}
	,onGamepadButtonDown: function(gamepad,button) {
		openfl_ui_GameInput.__onGamepadButtonDown(gamepad,button);
	}
	,onGamepadButtonUp: function(gamepad,button) {
		openfl_ui_GameInput.__onGamepadButtonUp(gamepad,button);
	}
	,onGamepadConnect: function(gamepad) {
		openfl_ui_GameInput.__onGamepadConnect(gamepad);
	}
	,onGamepadDisconnect: function(gamepad) {
		openfl_ui_GameInput.__onGamepadDisconnect(gamepad);
	}
	,onJoystickAxisMove: function(joystick,axis,value) {
	}
	,onJoystickButtonDown: function(joystick,button) {
	}
	,onJoystickButtonUp: function(joystick,button) {
	}
	,onJoystickConnect: function(joystick) {
	}
	,onJoystickDisconnect: function(joystick) {
	}
	,onJoystickHatMove: function(joystick,hat,position) {
	}
	,onJoystickTrackballMove: function(joystick,trackball,value) {
	}
	,onKeyDown: function(window,keyCode,modifier) {
		if(this.window == null || this.window != window) {
			return;
		}
		this.__onKey("keyDown",keyCode,modifier);
	}
	,onKeyUp: function(window,keyCode,modifier) {
		if(this.window == null || this.window != window) {
			return;
		}
		this.__onKey("keyUp",keyCode,modifier);
	}
	,onModuleExit: function(code) {
		if(this.window != null) {
			this.__broadcastEvent(new openfl_events_Event("deactivate"));
		}
	}
	,onMouseDown: function(window,x,y,button) {
		if(this.window == null || this.window != window) {
			return;
		}
		var type;
		switch(button) {
		case 1:
			type = "middleMouseDown";
			break;
		case 2:
			type = "rightMouseDown";
			break;
		default:
			type = "mouseDown";
		}
		this.__onMouse(type,x * window.__scale | 0,y * window.__scale | 0,button);
	}
	,onMouseMove: function(window,x,y) {
		if(this.window == null || this.window != window) {
			return;
		}
		this.__onMouse("mouseMove",x * window.__scale | 0,y * window.__scale | 0,0);
	}
	,onMouseMoveRelative: function(window,x,y) {
	}
	,onMouseUp: function(window,x,y,button) {
		if(this.window == null || this.window != window) {
			return;
		}
		var type;
		switch(button) {
		case 1:
			type = "middleMouseUp";
			break;
		case 2:
			type = "rightMouseUp";
			break;
		default:
			type = "mouseUp";
		}
		this.__onMouse(type,x * window.__scale | 0,y * window.__scale | 0,button);
	}
	,onMouseWheel: function(window,deltaX,deltaY) {
		if(this.window == null || this.window != window) {
			return;
		}
		this.__onMouseWheel(deltaX * window.__scale | 0,deltaY * window.__scale | 0);
	}
	,onPreloadComplete: function() {
	}
	,onPreloadProgress: function(loaded,total) {
	}
	,onRenderContextLost: function(renderer) {
	}
	,onRenderContextRestored: function(renderer,context) {
	}
	,onTextEdit: function(window,text,start,length) {
	}
	,onTextInput: function(window,text) {
		if(this.window == null || this.window != window) {
			return;
		}
		var stack = [];
		if(this.__focus == null) {
			this.__getInteractive(stack);
		} else {
			this.__focus.__getInteractive(stack);
		}
		var event = new openfl_events_TextEvent("textInput",true,false,text);
		if(stack.length > 0) {
			stack.reverse();
			this.__fireEvent(event,stack);
		} else {
			this.__dispatchEvent(event);
		}
	}
	,onTouchMove: function(touch) {
		this.__onTouch("touchMove",touch);
	}
	,onTouchEnd: function(touch) {
		if(this.__primaryTouch == touch) {
			this.__primaryTouch = null;
		}
		this.__onTouch("touchEnd",touch);
	}
	,onTouchStart: function(touch) {
		if(this.__primaryTouch == null) {
			this.__primaryTouch = touch;
		}
		this.__onTouch("touchBegin",touch);
	}
	,onWindowActivate: function(window) {
		if(this.window == null || this.window != window) {
			return;
		}
		this.__broadcastEvent(new openfl_events_Event("activate"));
	}
	,onWindowClose: function(window) {
		if(this.window == window) {
			this.window = null;
		}
	}
	,onWindowCreate: function(window) {
		if(this.window == null || this.window != window) {
			return;
		}
		if(window.renderer != null) {
			var _g = window.renderer.context;
			switch(_g[1]) {
			case 0:
				this.__renderer = new openfl__$internal_renderer_opengl_GLRenderer(this,_g[2]);
				break;
			case 1:
				this.__renderer = new openfl__$internal_renderer_canvas_CanvasRenderer(this,_g[2]);
				break;
			case 2:
				this.__renderer = new openfl__$internal_renderer_dom_DOMRenderer(this,_g[2]);
				break;
			case 4:
				break;
			case 5:
				break;
			default:
			}
		}
	}
	,onWindowDeactivate: function(window) {
		if(this.window == null || this.window != window) {
			return;
		}
		this.__primaryTouch = null;
		this.__broadcastEvent(new openfl_events_Event("deactivate"));
	}
	,onWindowDropFile: function(window,file) {
	}
	,onWindowEnter: function(window) {
	}
	,onWindowFocusIn: function(window) {
		if(this.window == null || this.window != window) {
			return;
		}
		this.set_focus(this.__cacheFocus);
	}
	,onWindowFocusOut: function(window) {
		if(this.window == null || this.window != window) {
			return;
		}
		var currentFocus = this.get_focus();
		this.set_focus(null);
		this.__cacheFocus = currentFocus;
	}
	,onWindowFullscreen: function(window) {
		if(this.window == null || this.window != window) {
			return;
		}
		this.__resize();
		if(this.__displayState == 2) {
			this.__displayState = 1;
			this.__dispatchEvent(new openfl_events_FullScreenEvent("fullScreen",false,false,false,true));
		}
	}
	,onWindowLeave: function(window) {
		if(this.window == null || this.window != window) {
			return;
		}
		this.__dispatchEvent(new openfl_events_Event("mouseLeave"));
	}
	,onWindowMinimize: function(window) {
	}
	,onWindowMove: function(window,x,y) {
	}
	,onWindowResize: function(window,width,height) {
		if(this.window == null || this.window != window) {
			return;
		}
		this.__resize();
		if(this.__displayState != 2 && !window.__fullscreen) {
			this.__displayState = 2;
			this.__dispatchEvent(new openfl_events_FullScreenEvent("fullScreen",false,false,true,true));
		}
	}
	,onWindowRestore: function(window) {
	}
	,render: function(renderer) {
		if(renderer.window == null || renderer.window != this.window) {
			return;
		}
		if(this.application != null && this.application.__windows.length > 0) {
			if(!this.__transformDirty) {
				this.__transformDirty = true;
				openfl_display_DisplayObject.__worldTransformDirty++;
			}
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				openfl_display_DisplayObject.__worldRenderDirty++;
			}
		}
		if(this.__rendering) {
			return;
		}
		this.__rendering = true;
		if(this.__renderer != null) {
			this.__renderer.clear();
		}
		this.__broadcastEvent(new openfl_events_Event("enterFrame"));
		this.__broadcastEvent(new openfl_events_Event("exitFrame"));
		if(this.__invalidated) {
			this.__invalidated = false;
			this.__broadcastEvent(new openfl_events_Event("render"));
		}
		this.__renderable = true;
		this.__enterFrame(this.__deltaTime);
		this.__deltaTime = 0;
		this.__update(false,true);
		if(this.__renderer != null) {
			if(renderer.type == lime_graphics_RendererType.CAIRO) {
				var _g = renderer.context;
				if(_g[1] == 4) {
					var cairo = _g[2];
					(js_Boot.__cast(this.__renderer , openfl__$internal_renderer_cairo_CairoRenderer)).cairo = cairo;
					this.__renderer.renderSession.cairo = cairo;
				}
			}
			this.__renderer.render();
		}
		this.__rendering = false;
	}
	,update: function(deltaTime) {
		this.__deltaTime = deltaTime;
	}
	,__broadcastEvent: function(event) {
		var key = event.type;
		var _this = openfl_display_DisplayObject.__broadcastEvents;
		if(__map_reserved[key] != null ? _this.existsReserved(key) : _this.h.hasOwnProperty(key)) {
			var key1 = event.type;
			var _this1 = openfl_display_DisplayObject.__broadcastEvents;
			var dispatchers = __map_reserved[key1] != null ? _this1.getReserved(key1) : _this1.h[key1];
			var _g = 0;
			while(_g < dispatchers.length) {
				var dispatcher = dispatchers[_g];
				++_g;
				dispatcher.__dispatch(event);
			}
		}
	}
	,__drag: function(mouse) {
		var parent = this.__dragObject.parent;
		if(parent != null) {
			var _this = parent.__getWorldTransform();
			var norm = _this.a * _this.d - _this.b * _this.c;
			if(norm == 0) {
				mouse.x = -_this.tx;
				mouse.y = -_this.ty;
			} else {
				var px = 1.0 / norm * (_this.c * (_this.ty - mouse.y) + _this.d * (mouse.x - _this.tx));
				mouse.y = 1.0 / norm * (_this.a * (mouse.y - _this.ty) + _this.b * (_this.tx - mouse.x));
				mouse.x = px;
			}
		}
		var x = mouse.x + this.__dragOffsetX;
		var y = mouse.y + this.__dragOffsetY;
		if(this.__dragBounds != null) {
			if(x < this.__dragBounds.x) {
				x = this.__dragBounds.x;
			} else if(x > this.__dragBounds.get_right()) {
				x = this.__dragBounds.get_right();
			}
			if(y < this.__dragBounds.y) {
				y = this.__dragBounds.y;
			} else if(y > this.__dragBounds.get_bottom()) {
				y = this.__dragBounds.get_bottom();
			}
		}
		this.__dragObject.set_x(x);
		this.__dragObject.set_y(y);
	}
	,__fireEvent: function(event,stack) {
		var target;
		var length = stack.length;
		if(length == 0) {
			event.eventPhase = 2;
			target = event.target;
			target.__dispatch(event);
		} else {
			event.eventPhase = 1;
			event.target = stack[stack.length - 1];
			var _g1 = 0;
			var _g = length - 1;
			while(_g1 < _g) {
				stack[_g1++].__dispatch(event);
				if(event.__isCanceled) {
					return;
				}
			}
			event.eventPhase = 2;
			target = event.target;
			target.__dispatch(event);
			if(event.__isCanceled) {
				return;
			}
			if(event.bubbles) {
				event.eventPhase = 3;
				var i = length - 2;
				while(i >= 0) {
					stack[i].__dispatch(event);
					if(event.__isCanceled) {
						return;
					}
					--i;
				}
			}
		}
	}
	,__getInteractive: function(stack) {
		if(stack != null) {
			stack.push(this);
		}
		return true;
	}
	,__onKey: function(type,keyCode,modifier) {
		openfl_events_MouseEvent.__altKey = lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_altKey(modifier);
		openfl_events_MouseEvent.__commandKey = lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_metaKey(modifier);
		openfl_events_MouseEvent.__ctrlKey = lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_ctrlKey(modifier);
		openfl_events_MouseEvent.__shiftKey = lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_shiftKey(modifier);
		var stack = [];
		if(this.__focus == null) {
			this.__getInteractive(stack);
		} else {
			this.__focus.__getInteractive(stack);
		}
		if(stack.length > 0) {
			var keyLocation;
			switch(keyCode) {
			case 1073741908:case 1073741909:case 1073741910:case 1073741911:case 1073741912:case 1073741913:case 1073741914:case 1073741915:case 1073741916:case 1073741917:case 1073741918:case 1073741919:case 1073741920:case 1073741921:case 1073741922:case 1073741923:case 1073742044:
				keyLocation = 3;
				break;
			case 1073742048:case 1073742049:case 1073742050:case 1073742051:
				keyLocation = 1;
				break;
			case 1073742052:case 1073742053:case 1073742054:case 1073742055:
				keyLocation = 2;
				break;
			default:
				keyLocation = 0;
			}
			var keyCode1;
			switch(keyCode) {
			case 8:
				keyCode1 = 8;
				break;
			case 9:
				keyCode1 = 9;
				break;
			case 13:
				keyCode1 = 13;
				break;
			case 27:
				keyCode1 = 27;
				break;
			case 32:
				keyCode1 = 32;
				break;
			case 33:
				keyCode1 = 49;
				break;
			case 34:
				keyCode1 = 222;
				break;
			case 35:
				keyCode1 = 51;
				break;
			case 36:
				keyCode1 = 52;
				break;
			case 37:
				keyCode1 = 53;
				break;
			case 38:
				keyCode1 = 55;
				break;
			case 39:
				keyCode1 = 222;
				break;
			case 40:
				keyCode1 = 57;
				break;
			case 41:
				keyCode1 = 48;
				break;
			case 42:
				keyCode1 = 56;
				break;
			case 44:
				keyCode1 = 188;
				break;
			case 45:
				keyCode1 = 189;
				break;
			case 46:
				keyCode1 = 190;
				break;
			case 47:
				keyCode1 = 191;
				break;
			case 48:
				keyCode1 = 48;
				break;
			case 49:
				keyCode1 = 49;
				break;
			case 50:
				keyCode1 = 50;
				break;
			case 51:
				keyCode1 = 51;
				break;
			case 52:
				keyCode1 = 52;
				break;
			case 53:
				keyCode1 = 53;
				break;
			case 54:
				keyCode1 = 54;
				break;
			case 55:
				keyCode1 = 55;
				break;
			case 56:
				keyCode1 = 56;
				break;
			case 57:
				keyCode1 = 57;
				break;
			case 58:
				keyCode1 = 186;
				break;
			case 59:
				keyCode1 = 186;
				break;
			case 60:
				keyCode1 = 60;
				break;
			case 61:
				keyCode1 = 187;
				break;
			case 62:
				keyCode1 = 190;
				break;
			case 63:
				keyCode1 = 191;
				break;
			case 64:
				keyCode1 = 50;
				break;
			case 91:
				keyCode1 = 219;
				break;
			case 92:
				keyCode1 = 220;
				break;
			case 93:
				keyCode1 = 221;
				break;
			case 94:
				keyCode1 = 54;
				break;
			case 95:
				keyCode1 = 189;
				break;
			case 96:
				keyCode1 = 192;
				break;
			case 97:
				keyCode1 = 65;
				break;
			case 98:
				keyCode1 = 66;
				break;
			case 99:
				keyCode1 = 67;
				break;
			case 100:
				keyCode1 = 68;
				break;
			case 101:
				keyCode1 = 69;
				break;
			case 102:
				keyCode1 = 70;
				break;
			case 103:
				keyCode1 = 71;
				break;
			case 104:
				keyCode1 = 72;
				break;
			case 105:
				keyCode1 = 73;
				break;
			case 106:
				keyCode1 = 74;
				break;
			case 107:
				keyCode1 = 75;
				break;
			case 108:
				keyCode1 = 76;
				break;
			case 109:
				keyCode1 = 77;
				break;
			case 110:
				keyCode1 = 78;
				break;
			case 111:
				keyCode1 = 79;
				break;
			case 112:
				keyCode1 = 80;
				break;
			case 113:
				keyCode1 = 81;
				break;
			case 114:
				keyCode1 = 82;
				break;
			case 115:
				keyCode1 = 83;
				break;
			case 116:
				keyCode1 = 84;
				break;
			case 117:
				keyCode1 = 85;
				break;
			case 118:
				keyCode1 = 86;
				break;
			case 119:
				keyCode1 = 87;
				break;
			case 120:
				keyCode1 = 88;
				break;
			case 121:
				keyCode1 = 89;
				break;
			case 122:
				keyCode1 = 90;
				break;
			case 127:
				keyCode1 = 46;
				break;
			case 1073741881:
				keyCode1 = 20;
				break;
			case 1073741882:
				keyCode1 = 112;
				break;
			case 1073741883:
				keyCode1 = 113;
				break;
			case 1073741884:
				keyCode1 = 114;
				break;
			case 1073741885:
				keyCode1 = 115;
				break;
			case 1073741886:
				keyCode1 = 116;
				break;
			case 1073741887:
				keyCode1 = 117;
				break;
			case 1073741888:
				keyCode1 = 118;
				break;
			case 1073741889:
				keyCode1 = 119;
				break;
			case 1073741890:
				keyCode1 = 120;
				break;
			case 1073741891:
				keyCode1 = 121;
				break;
			case 1073741892:
				keyCode1 = 122;
				break;
			case 1073741893:
				keyCode1 = 123;
				break;
			case 1073741894:
				keyCode1 = 301;
				break;
			case 1073741895:
				keyCode1 = 145;
				break;
			case 1073741896:
				keyCode1 = 19;
				break;
			case 1073741897:
				keyCode1 = 45;
				break;
			case 1073741898:
				keyCode1 = 36;
				break;
			case 1073741899:
				keyCode1 = 33;
				break;
			case 1073741901:
				keyCode1 = 35;
				break;
			case 1073741902:
				keyCode1 = 34;
				break;
			case 1073741903:
				keyCode1 = 39;
				break;
			case 1073741904:
				keyCode1 = 37;
				break;
			case 1073741905:
				keyCode1 = 40;
				break;
			case 1073741906:
				keyCode1 = 38;
				break;
			case 1073741907:
				keyCode1 = 144;
				break;
			case 1073741908:
				keyCode1 = 111;
				break;
			case 1073741909:
				keyCode1 = 106;
				break;
			case 1073741910:
				keyCode1 = 109;
				break;
			case 1073741911:
				keyCode1 = 107;
				break;
			case 1073741912:
				keyCode1 = 108;
				break;
			case 1073741913:
				keyCode1 = 97;
				break;
			case 1073741914:
				keyCode1 = 98;
				break;
			case 1073741915:
				keyCode1 = 99;
				break;
			case 1073741916:
				keyCode1 = 100;
				break;
			case 1073741917:
				keyCode1 = 101;
				break;
			case 1073741918:
				keyCode1 = 102;
				break;
			case 1073741919:
				keyCode1 = 103;
				break;
			case 1073741920:
				keyCode1 = 104;
				break;
			case 1073741921:
				keyCode1 = 105;
				break;
			case 1073741922:
				keyCode1 = 96;
				break;
			case 1073741923:
				keyCode1 = 110;
				break;
			case 1073741925:
				keyCode1 = 302;
				break;
			case 1073741928:
				keyCode1 = 124;
				break;
			case 1073741929:
				keyCode1 = 125;
				break;
			case 1073741930:
				keyCode1 = 126;
				break;
			case 1073741982:
				keyCode1 = 13;
				break;
			case 1073742044:
				keyCode1 = 110;
				break;
			case 1073742048:
				keyCode1 = 17;
				break;
			case 1073742049:
				keyCode1 = 16;
				break;
			case 1073742050:
				keyCode1 = 18;
				break;
			case 1073742051:
				keyCode1 = 15;
				break;
			case 1073742052:
				keyCode1 = 17;
				break;
			case 1073742053:
				keyCode1 = 16;
				break;
			case 1073742054:
				keyCode1 = 18;
				break;
			case 1073742055:
				keyCode1 = 15;
				break;
			default:
				keyCode1 = keyCode;
			}
			var event = new openfl_events_KeyboardEvent(type,true,false,openfl_ui_Keyboard.__getCharCode(keyCode1,lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_shiftKey(modifier)),keyCode1,keyLocation,this.__macKeyboard ? lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_ctrlKey(modifier) || lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_metaKey(modifier) : lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_ctrlKey(modifier),lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_altKey(modifier),lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_shiftKey(modifier),lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_ctrlKey(modifier),lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_metaKey(modifier));
			stack.reverse();
			this.__fireEvent(event,stack);
			if(event.__isCanceled) {
				if(type == "keyDown") {
					this.window.onKeyDown.cancel();
				} else {
					this.window.onKeyUp.cancel();
				}
			}
		}
	}
	,__onGamepadConnect: function(gamepad) {
		this.onGamepadConnect(gamepad);
		var f = $bind(this,this.onGamepadAxisMove);
		var a1 = gamepad;
		var tmp = function(a2,a3) {
			f(a1,a2,a3);
		};
		gamepad.onAxisMove.add(tmp);
		var f1 = $bind(this,this.onGamepadButtonDown);
		var a11 = gamepad;
		var tmp1 = function(a21) {
			f1(a11,a21);
		};
		gamepad.onButtonDown.add(tmp1);
		var f2 = $bind(this,this.onGamepadButtonUp);
		var a12 = gamepad;
		var tmp2 = function(a22) {
			f2(a12,a22);
		};
		gamepad.onButtonUp.add(tmp2);
		var f3 = $bind(this,this.onGamepadDisconnect);
		var a13 = gamepad;
		var tmp3 = function() {
			f3(a13);
		};
		gamepad.onDisconnect.add(tmp3);
	}
	,__onMouse: function(type,x,y,button) {
		if(button > 2) {
			return;
		}
		var targetPoint = new openfl_geom_Point(x,y);
		var _this = this.__displayMatrix;
		var norm = _this.a * _this.d - _this.b * _this.c;
		if(norm == 0) {
			targetPoint.x = -_this.tx;
			targetPoint.y = -_this.ty;
		} else {
			var px = 1.0 / norm * (_this.c * (_this.ty - targetPoint.y) + _this.d * (targetPoint.x - _this.tx));
			targetPoint.y = 1.0 / norm * (_this.a * (targetPoint.y - _this.ty) + _this.b * (_this.tx - targetPoint.x));
			targetPoint.x = px;
		}
		this.__mouseX = targetPoint.x;
		this.__mouseY = targetPoint.y;
		var stack = [];
		var target = null;
		if(this.__hitTest(this.__mouseX,this.__mouseY,true,stack,true,this)) {
			target = stack[stack.length - 1];
		} else {
			target = this;
			stack = [this];
		}
		if(target == null) {
			target = this;
		}
		var clickType = null;
		switch(type) {
		case "middleMouseDown":
			this.__mouseDownMiddle = target;
			break;
		case "middleMouseUp":
			if(this.__mouseDownMiddle == target) {
				clickType = "middleClick";
			}
			this.__mouseDownMiddle = null;
			break;
		case "mouseDown":
			if(target.get_tabEnabled()) {
				this.set_focus(target);
			} else {
				this.set_focus(null);
			}
			this.__mouseDownLeft = target;
			break;
		case "mouseUp":
			if(this.__mouseDownLeft == target) {
				clickType = "click";
			}
			this.__mouseDownLeft = null;
			break;
		case "rightMouseDown":
			this.__mouseDownRight = target;
			break;
		case "rightMouseUp":
			if(this.__mouseDownRight == target) {
				clickType = "rightClick";
			}
			this.__mouseDownRight = null;
			break;
		default:
		}
		this.__fireEvent(openfl_events_MouseEvent.__create(type,button,this.__mouseX,this.__mouseY,target == this ? targetPoint : target.globalToLocal(targetPoint),target),stack);
		if(clickType != null) {
			this.__fireEvent(openfl_events_MouseEvent.__create(clickType,button,this.__mouseX,this.__mouseY,target == this ? targetPoint : target.globalToLocal(targetPoint),target),stack);
			if(type == "mouseUp" && (js_Boot.__cast(target , openfl_display_InteractiveObject)).doubleClickEnabled) {
				var currentTime = openfl_Lib.getTimer();
				if(currentTime - this.__lastClickTime < 500) {
					this.__fireEvent(openfl_events_MouseEvent.__create("doubleClick",button,this.__mouseX,this.__mouseY,target == this ? targetPoint : target.globalToLocal(targetPoint),target),stack);
					this.__lastClickTime = 0;
				} else {
					this.__lastClickTime = currentTime;
				}
			}
		}
		if(openfl_ui_Mouse.__cursor == "auto") {
			var cursor = null;
			if(this.__mouseDownLeft != null) {
				cursor = this.__mouseDownLeft.__getCursor();
			} else {
				var _g = 0;
				while(_g < stack.length) {
					var target1 = stack[_g];
					++_g;
					cursor = target1.__getCursor();
					if(cursor != null) {
						lime_ui_Mouse.set_cursor(cursor);
						break;
					}
				}
			}
			if(cursor == null) {
				lime_ui_Mouse.set_cursor(lime_ui_MouseCursor.ARROW);
			}
		}
		var event;
		var localPoint;
		if(target != this.__mouseOverTarget) {
			if(this.__mouseOverTarget != null) {
				if(this.__mouseOverTarget == this) {
					localPoint = targetPoint;
				} else {
					localPoint = this.__mouseOverTarget.globalToLocal(targetPoint);
				}
				event = openfl_events_MouseEvent.__create("mouseOut",button,this.__mouseX,this.__mouseY,localPoint,this.__mouseOverTarget);
				this.__mouseOverTarget.__dispatchEvent(event);
			}
		}
		var _g1 = 0;
		var _g11 = this.__rollOutStack;
		while(_g1 < _g11.length) {
			var target2 = _g11[_g1];
			++_g1;
			if(stack.indexOf(target2) == -1) {
				HxOverrides.remove(this.__rollOutStack,target2);
				localPoint = this.__mouseOverTarget.globalToLocal(targetPoint);
				event = openfl_events_MouseEvent.__create("rollOut",button,this.__mouseX,this.__mouseY,localPoint,this.__mouseOverTarget);
				event.bubbles = false;
				target2.__dispatchEvent(event);
			}
		}
		var _g2 = 0;
		while(_g2 < stack.length) {
			var target3 = stack[_g2];
			++_g2;
			if(this.__rollOutStack.indexOf(target3) == -1) {
				if(target3.hasEventListener("rollOver")) {
					localPoint = target3.globalToLocal(targetPoint);
					event = openfl_events_MouseEvent.__create("rollOver",button,this.__mouseX,this.__mouseY,localPoint,target3);
					event.bubbles = false;
					target3.__dispatchEvent(event);
				}
				if(target3.hasEventListener("rollOut")) {
					this.__rollOutStack.push(target3);
				}
			}
		}
		if(target != this.__mouseOverTarget) {
			if(target != null) {
				if(target == this) {
					localPoint = targetPoint;
				} else {
					localPoint = target.globalToLocal(targetPoint);
				}
				event = openfl_events_MouseEvent.__create("mouseOver",button,this.__mouseX,this.__mouseY,localPoint,target);
				event.bubbles = true;
				target.__dispatchEvent(event);
			}
			this.__mouseOverTarget = target;
		}
		if(this.__dragObject != null) {
			this.__drag(targetPoint);
		}
	}
	,__onMouseWheel: function(deltaX,deltaY) {
		var x = this.__mouseX;
		var y = this.__mouseY;
		var stack = [];
		var target = null;
		if(this.__hitTest(this.__mouseX,this.__mouseY,true,stack,true,this)) {
			target = stack[stack.length - 1];
		} else {
			target = this;
			stack = [this];
		}
		if(target == null) {
			target = this;
		}
		var targetPoint = new openfl_geom_Point(x,y);
		var _this = this.__displayMatrix;
		var norm = _this.a * _this.d - _this.b * _this.c;
		if(norm == 0) {
			targetPoint.x = -_this.tx;
			targetPoint.y = -_this.ty;
		} else {
			var px = 1.0 / norm * (_this.c * (_this.ty - targetPoint.y) + _this.d * (targetPoint.x - _this.tx));
			targetPoint.y = 1.0 / norm * (_this.a * (targetPoint.y - _this.ty) + _this.b * (_this.tx - targetPoint.x));
			targetPoint.x = px;
		}
		this.__fireEvent(openfl_events_MouseEvent.__create("mouseWheel",0,this.__mouseX,this.__mouseY,target == this ? targetPoint : target.globalToLocal(targetPoint),target,deltaY | 0),stack);
	}
	,__onTouch: function(type,touch) {
		var point = new openfl_geom_Point(Math.round(touch.x * this.window.__width),Math.round(touch.y * this.window.__height));
		var _this = this.__displayMatrix;
		var norm = _this.a * _this.d - _this.b * _this.c;
		if(norm == 0) {
			point.x = -_this.tx;
			point.y = -_this.ty;
		} else {
			var px = 1.0 / norm * (_this.c * (_this.ty - point.y) + _this.d * (point.x - _this.tx));
			point.y = 1.0 / norm * (_this.a * (point.y - _this.ty) + _this.b * (_this.tx - point.x));
			point.x = px;
		}
		var touchX = point.x;
		var touchY = point.y;
		var __stack = [];
		if(this.__hitTest(touchX,touchY,false,__stack,true,this)) {
			var target = __stack[__stack.length - 1];
			if(target == null) {
				target = this;
			}
			var touchEvent = openfl_events_TouchEvent.__create(type,null,touchX,touchY,target.globalToLocal(point),target);
			touchEvent.touchPointID = touch.id;
			touchEvent.isPrimaryTouchPoint = this.__primaryTouch == touch;
			this.__fireEvent(touchEvent,__stack);
		} else {
			var touchEvent1 = openfl_events_TouchEvent.__create(type,null,touchX,touchY,point,this);
			touchEvent1.touchPointID = touch.id;
			touchEvent1.isPrimaryTouchPoint = this.__primaryTouch == touch;
			this.__fireEvent(touchEvent1,[this.stage]);
		}
	}
	,__resize: function() {
		var cacheWidth = this.stageWidth;
		var cacheHeight = this.stageHeight;
		var windowWidth = this.window.__width * this.window.__scale | 0;
		var windowHeight = this.window.__height * this.window.__scale | 0;
		this.__logicalWidth = this.window.__width;
		this.__logicalHeight = this.window.__height;
		this.__displayMatrix.identity();
		if(this.__logicalWidth == 0 && this.__logicalHeight == 0) {
			this.stageWidth = windowWidth;
			this.stageHeight = windowHeight;
		} else {
			this.stageWidth = this.__logicalWidth;
			this.stageHeight = this.__logicalHeight;
			var targetScale = Math.min(windowWidth / this.stageWidth,windowHeight / this.stageHeight);
			var offsetX = Math.round((windowWidth - this.stageWidth * targetScale) / 2);
			var offsetY = Math.round((windowHeight - this.stageHeight * targetScale) / 2);
			this.__displayMatrix.scale(targetScale,targetScale);
			this.__displayMatrix.translate(offsetX,offsetY);
		}
		var _g = 0;
		var _g1 = this.stage3Ds;
		while(_g < _g1.get_length()) {
			var stage3D = _g1.get(_g);
			++_g;
			stage3D.__resize(this.stageWidth,this.stageHeight);
		}
		if(this.__renderer != null) {
			this.__renderer.resize(windowWidth,windowHeight);
		}
		if(this.stageWidth != cacheWidth || this.stageHeight != cacheHeight) {
			this.__dispatchEvent(new openfl_events_Event("resize"));
		}
	}
	,__setLogicalSize: function(width,height) {
		this.__logicalWidth = width;
		this.__logicalHeight = height;
		this.__resize();
	}
	,__startDrag: function(sprite,lockCenter,bounds) {
		this.__dragBounds = bounds == null ? null : bounds.clone();
		this.__dragObject = sprite;
		if(this.__dragObject != null) {
			if(lockCenter) {
				this.__dragOffsetX = 0;
				this.__dragOffsetY = 0;
			} else {
				var mouse = new openfl_geom_Point(this.get_mouseX(),this.get_mouseY());
				var parent = this.__dragObject.parent;
				if(parent != null) {
					var _this = parent.__getWorldTransform();
					var norm = _this.a * _this.d - _this.b * _this.c;
					if(norm == 0) {
						mouse.x = -_this.tx;
						mouse.y = -_this.ty;
					} else {
						var px = 1.0 / norm * (_this.c * (_this.ty - mouse.y) + _this.d * (mouse.x - _this.tx));
						mouse.y = 1.0 / norm * (_this.a * (mouse.y - _this.ty) + _this.b * (_this.tx - mouse.x));
						mouse.x = px;
					}
				}
				this.__dragOffsetX = this.__dragObject.get_x() - mouse.x;
				this.__dragOffsetY = this.__dragObject.get_y() - mouse.y;
			}
		}
	}
	,__stopDrag: function(sprite) {
		this.__dragBounds = null;
		this.__dragObject = null;
	}
	,__update: function(transformOnly,updateChildren,maskGrahpics) {
		if(transformOnly) {
			if(openfl_display_DisplayObject.__worldTransformDirty > 0) {
				openfl_display_DisplayObjectContainer.prototype.__update.call(this,true,updateChildren,maskGrahpics);
				if(updateChildren) {
					openfl_display_DisplayObject.__worldTransformDirty = 0;
					this.__dirty = true;
				}
			}
		} else if(openfl_display_DisplayObject.__worldTransformDirty > 0 || this.__dirty || openfl_display_DisplayObject.__worldRenderDirty > 0) {
			openfl_display_DisplayObjectContainer.prototype.__update.call(this,false,updateChildren,maskGrahpics);
			if(updateChildren) {
				openfl_display_DisplayObject.__worldTransformDirty = 0;
				openfl_display_DisplayObject.__worldRenderDirty = 0;
				this.__dirty = false;
			}
		}
	}
	,get_color: function() {
		return this.__color;
	}
	,set_color: function(value) {
		this.__colorSplit = [((value & 16711680) >>> 16) / 255,((value & 65280) >>> 8) / 255,(value & 255) / 255];
		this.__colorString = "#" + StringTools.hex(value,6);
		return this.__color = value;
	}
	,get_displayState: function() {
		return this.__displayState;
	}
	,set_displayState: function(value) {
		if(this.window != null) {
			if(value == 2) {
				if(this.window.__fullscreen) {
					this.window.set_fullscreen(false);
				}
			} else if(!this.window.__fullscreen) {
				this.window.set_fullscreen(true);
			}
		}
		return this.__displayState = value;
	}
	,get_focus: function() {
		return this.__focus;
	}
	,set_focus: function(value) {
		if(value != this.__focus) {
			var oldFocus = this.__focus;
			this.__focus = value;
			this.__cacheFocus = value;
			if(oldFocus != null) {
				var event = new openfl_events_FocusEvent("focusOut",true,false,this.__focus,false,0);
				var stack = [];
				oldFocus.__getInteractive(stack);
				stack.reverse();
				this.__fireEvent(event,stack);
			}
			if(this.__focus != null) {
				var event1 = new openfl_events_FocusEvent("focusIn",true,false,oldFocus,false,0);
				var stack1 = [];
				value.__getInteractive(stack1);
				stack1.reverse();
				this.__fireEvent(event1,stack1);
			}
		}
		return this.__focus;
	}
	,get_frameRate: function() {
		if(this.application != null) {
			return this.application.backend.getFrameRate();
		}
		return 0;
	}
	,set_frameRate: function(value) {
		if(this.application != null) {
			return this.application.backend.setFrameRate(value);
		}
		return value;
	}
	,get_mouseX: function() {
		return this.__mouseX;
	}
	,get_mouseY: function() {
		return this.__mouseY;
	}
	,__class__: openfl_display_Stage
	,__properties__: $extend(openfl_display_DisplayObjectContainer.prototype.__properties__,{set_frameRate:"set_frameRate",get_frameRate:"get_frameRate",set_focus:"set_focus",get_focus:"get_focus",set_displayState:"set_displayState",get_displayState:"get_displayState",set_color:"set_color",get_color:"get_color"})
});
var openfl_display_Stage3D = function() {
	openfl_events_EventDispatcher.call(this);
	this.set_x(0);
	this.set_y(0);
	this.visible = true;
};
$hxClasses["openfl.display.Stage3D"] = openfl_display_Stage3D;
openfl_display_Stage3D.__name__ = ["openfl","display","Stage3D"];
openfl_display_Stage3D.__super__ = openfl_events_EventDispatcher;
openfl_display_Stage3D.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	context3D: null
	,visible: null
	,x: null
	,y: null
	,__contextRequested: null
	,__canvas: null
	,__style: null
	,__webgl: null
	,requestContext3D: function(context3DRenderMode,profile) {
		if(profile == null) {
			profile = 0;
		}
		if(context3DRenderMode == null) {
			context3DRenderMode = 0;
		}
		this.__contextRequested = true;
	}
	,requestContext3DMatchingProfiles: function(profiles) {
		this.requestContext3D();
	}
	,__createContext: function(renderSession) {
	}
	,__dispatchError: function() {
		this.dispatchEvent(new openfl_events_ErrorEvent("error",false,false,"Context3D not available"));
	}
	,__renderCairo: function(stage,renderSession) {
		if(!this.visible) {
			return;
		}
		if(this.__contextRequested) {
			this.__dispatchError();
			this.__contextRequested = false;
		}
	}
	,__renderCanvas: function(stage,renderSession) {
		if(!this.visible) {
			return;
		}
		if(this.__contextRequested) {
			this.__dispatchError();
			this.__contextRequested = false;
		}
	}
	,__renderDOM: function(stage,renderSession) {
		if(!this.visible) {
			return;
		}
		if(this.__contextRequested) {
			if(this.context3D == null) {
				this.__canvas = window.document.createElement("canvas");
				this.__canvas.width = stage.stageWidth;
				this.__canvas.height = stage.stageHeight;
				var $window = stage.window;
				var options = Object.prototype.hasOwnProperty.call($window.config,"background") && $window.config.background == null;
				var options1 = Object.prototype.hasOwnProperty.call($window.config,"antialiasing") && $window.config.antialiasing > 0;
				var options2 = Object.prototype.hasOwnProperty.call($window.config,"depthBuffer") ? $window.config.depthBuffer : true;
				var options3 = Object.prototype.hasOwnProperty.call($window.config,"stencilBuffer") && $window.config.stencilBuffer;
				this.__webgl = js_html__$CanvasElement_CanvasUtil.getContextWebGL(this.__canvas,{ alpha : options, antialias : options1, depth : options2, premultipliedAlpha : true, stencil : options3, preserveDrawingBuffer : false});
				if(this.__webgl != null) {
					lime_graphics_opengl_GL.context = this.__webgl;
					this.context3D = new openfl_display3D_Context3D(this,renderSession);
					renderSession.element.appendChild(this.__canvas);
					this.__style = this.__canvas.style;
					this.__style.setProperty("position","absolute",null);
					this.__style.setProperty("top","0",null);
					this.__style.setProperty("left","0",null);
					this.__style.setProperty(renderSession.transformOriginProperty,"0 0 0",null);
					this.__style.setProperty("z-index","-1",null);
					this.dispatchEvent(new openfl_events_Event("context3DCreate"));
				} else {
					this.__dispatchError();
				}
			}
			this.__contextRequested = false;
		}
		if(this.context3D != null) {
			lime_graphics_opengl_GL.context = this.__webgl;
			this.__resetContext3DStates();
		}
	}
	,__renderGL: function(stage,renderSession) {
		if(!this.visible) {
			return;
		}
		if(this.__contextRequested) {
			if(this.context3D == null) {
				this.context3D = new openfl_display3D_Context3D(this,renderSession);
				this.dispatchEvent(new openfl_events_Event("context3DCreate"));
			}
			this.__contextRequested = false;
		}
		if(this.context3D != null) {
			this.__resetContext3DStates();
			if(this.context3D != null) {
				renderSession.blendModeManager.setBlendMode(null);
				if(renderSession.shaderManager.currentShader != null) {
					renderSession.shaderManager.setShader(null);
					if(this.context3D.__program != null) {
						this.context3D.__program.__use();
					}
				}
			}
		}
	}
	,__resize: function(width,height) {
		if(this.__canvas != null) {
			this.__canvas.width = width;
			this.__canvas.height = height;
		}
	}
	,__resetContext3DStates: function() {
		this.context3D.__updateBlendFactors();
		this.context3D.__updateBackbufferViewport();
	}
	,set_x: function(value) {
		this.x = value;
		if(this.context3D != null) {
			this.context3D.__updateBackbufferViewport();
		}
		return value;
	}
	,set_y: function(value) {
		this.y = value;
		if(this.context3D != null) {
			this.context3D.__updateBackbufferViewport();
		}
		return value;
	}
	,__class__: openfl_display_Stage3D
	,__properties__: {set_y:"set_y",set_x:"set_x"}
});
var openfl_display__$StageAlign_StageAlign_$Impl_$ = {};
$hxClasses["openfl.display._StageAlign.StageAlign_Impl_"] = openfl_display__$StageAlign_StageAlign_$Impl_$;
openfl_display__$StageAlign_StageAlign_$Impl_$.__name__ = ["openfl","display","_StageAlign","StageAlign_Impl_"];
openfl_display__$StageAlign_StageAlign_$Impl_$.fromString = function(value) {
	switch(value) {
	case "bottom":
		return 0;
	case "bottomLeft":
		return 1;
	case "bottomRight":
		return 2;
	case "left":
		return 3;
	case "right":
		return 4;
	case "top":
		return 5;
	case "topLeft":
		return 6;
	case "topRight":
		return 7;
	default:
		return null;
	}
};
openfl_display__$StageAlign_StageAlign_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "bottom";
	case 1:
		return "bottomLeft";
	case 2:
		return "bottomRight";
	case 3:
		return "left";
	case 4:
		return "right";
	case 5:
		return "top";
	case 6:
		return "topLeft";
	case 7:
		return "topRight";
	default:
		return null;
	}
};
var openfl_display__$StageDisplayState_StageDisplayState_$Impl_$ = {};
$hxClasses["openfl.display._StageDisplayState.StageDisplayState_Impl_"] = openfl_display__$StageDisplayState_StageDisplayState_$Impl_$;
openfl_display__$StageDisplayState_StageDisplayState_$Impl_$.__name__ = ["openfl","display","_StageDisplayState","StageDisplayState_Impl_"];
openfl_display__$StageDisplayState_StageDisplayState_$Impl_$.fromString = function(value) {
	switch(value) {
	case "fullScreen":
		return 0;
	case "fullScreenInteractive":
		return 1;
	case "normal":
		return 2;
	default:
		return null;
	}
};
openfl_display__$StageDisplayState_StageDisplayState_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "fullScreen";
	case 1:
		return "fullScreenInteractive";
	case 2:
		return "normal";
	default:
		return null;
	}
};
var openfl_display__$StageQuality_StageQuality_$Impl_$ = {};
$hxClasses["openfl.display._StageQuality.StageQuality_Impl_"] = openfl_display__$StageQuality_StageQuality_$Impl_$;
openfl_display__$StageQuality_StageQuality_$Impl_$.__name__ = ["openfl","display","_StageQuality","StageQuality_Impl_"];
openfl_display__$StageQuality_StageQuality_$Impl_$.fromString = function(value) {
	switch(value) {
	case "best":
		return 0;
	case "high":
		return 1;
	case "low":
		return 2;
	case "medium":
		return 3;
	default:
		return null;
	}
};
openfl_display__$StageQuality_StageQuality_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "best";
	case 1:
		return "high";
	case 2:
		return "low";
	case 3:
		return "medium";
	default:
		return null;
	}
};
var openfl_display__$StageScaleMode_StageScaleMode_$Impl_$ = {};
$hxClasses["openfl.display._StageScaleMode.StageScaleMode_Impl_"] = openfl_display__$StageScaleMode_StageScaleMode_$Impl_$;
openfl_display__$StageScaleMode_StageScaleMode_$Impl_$.__name__ = ["openfl","display","_StageScaleMode","StageScaleMode_Impl_"];
openfl_display__$StageScaleMode_StageScaleMode_$Impl_$.fromString = function(value) {
	switch(value) {
	case "exactFit":
		return 0;
	case "noBorder":
		return 1;
	case "noScale":
		return 2;
	case "showAll":
		return 3;
	default:
		return null;
	}
};
openfl_display__$StageScaleMode_StageScaleMode_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "exactFit";
	case 1:
		return "noBorder";
	case 2:
		return "noScale";
	case 3:
		return "showAll";
	default:
		return null;
	}
};
var openfl_display__$TriangleCulling_TriangleCulling_$Impl_$ = {};
$hxClasses["openfl.display._TriangleCulling.TriangleCulling_Impl_"] = openfl_display__$TriangleCulling_TriangleCulling_$Impl_$;
openfl_display__$TriangleCulling_TriangleCulling_$Impl_$.__name__ = ["openfl","display","_TriangleCulling","TriangleCulling_Impl_"];
openfl_display__$TriangleCulling_TriangleCulling_$Impl_$.fromString = function(value) {
	switch(value) {
	case "negative":
		return 0;
	case "none":
		return 1;
	case "positive":
		return 2;
	default:
		return null;
	}
};
openfl_display__$TriangleCulling_TriangleCulling_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "negative";
	case 1:
		return "none";
	case 2:
		return "positive";
	default:
		return null;
	}
};
var openfl_display_Window = function(config) {
	lime_ui_Window.call(this,config);
};
$hxClasses["openfl.display.Window"] = openfl_display_Window;
openfl_display_Window.__name__ = ["openfl","display","Window"];
openfl_display_Window.__super__ = lime_ui_Window;
openfl_display_Window.prototype = $extend(lime_ui_Window.prototype,{
	create: function(application) {
		lime_ui_Window.prototype.create.call(this,application);
		this.stage = new openfl_display_Stage(this,Object.prototype.hasOwnProperty.call(this.config,"background") ? this.config.background : 16777215);
		if(Object.prototype.hasOwnProperty.call(this.config,"resizable") && !this.config.resizable) {
			this.stage.__setLogicalSize(this.config.width,this.config.height);
		}
		application.addModule(this.stage);
	}
	,__class__: openfl_display_Window
});
var openfl_display3D_Context3D = function(stage3D,renderSession) {
	this.totalGPUMemory = 0;
	this.profile = 0;
	this.enableErrorChecking = false;
	this.driverInfo = "OpenGL (Direct blitting)";
	this.backBufferWidth = 0;
	this.backBufferHeight = 0;
	openfl_events_EventDispatcher.call(this);
	this.__stage3D = stage3D;
	this.__renderSession = renderSession;
	this.__vertexConstants = new Float32Array(512);
	this.__fragmentConstants = new Float32Array(512);
	var array = [1.0,1.0,1.0,1.0];
	var this1;
	if(array != null) {
		this1 = new Float32Array(array);
	} else {
		this1 = null;
	}
	this.__positionScale = this1;
	this.__samplerDirty = 0;
	this.__samplerTextures = openfl__$Vector_Vector_$Impl_$.toObjectVector(null,8);
	this.__samplerStates = [];
	var _g = 0;
	while(_g < 8) this.__samplerStates[_g++] = new openfl__$internal_stage3D_SamplerState(9729,9729,33071,33071);
	this.maxBackBufferHeight = this.maxBackBufferWidth = lime_graphics_opengl_GL.context.getParameter(3386);
	this.__backBufferAntiAlias = 0;
	this.__backBufferEnableDepthAndStencil = true;
	this.__backBufferWantsBestResolution = false;
	this.__frameCount = 0;
	this.__rttDepthAndStencil = false;
	this.__samplerDirty = 0;
	this.__stencilCompareMode = 0;
	this.__stencilRef = 0;
	this.__stencilReadMask = 255;
	this.__supportsPackedDepthStencil = true;
	this.__stats = openfl__$Vector_Vector_$Impl_$.toIntVector(null,11);
	this.__statsCache = openfl__$Vector_Vector_$Impl_$.toIntVector(null,11);
	openfl__$internal_stage3D_GLUtils.CheckGLError();
	var vendor = lime_graphics_opengl_GL.context.getParameter(7936);
	openfl__$internal_stage3D_GLUtils.CheckGLError();
	var version = lime_graphics_opengl_GL.context.getParameter(7938);
	openfl__$internal_stage3D_GLUtils.CheckGLError();
	var renderer = lime_graphics_opengl_GL.context.getParameter(7937);
	openfl__$internal_stage3D_GLUtils.CheckGLError();
	var glslVersion = lime_graphics_opengl_GL.context.getParameter(35724);
	openfl__$internal_stage3D_GLUtils.CheckGLError();
	this.driverInfo = "OpenGL" + " Vendor=" + vendor + " Version=" + version + " Renderer=" + renderer + " GLSL=" + glslVersion;
	var _g1 = 0;
	var _g2 = this.__stats.get_length();
	while(_g1 < _g2) this.__stats.set(_g1++,0);
	openfl_display3D_Context3D.__stateCache.clearSettings();
};
$hxClasses["openfl.display3D.Context3D"] = openfl_display3D_Context3D;
openfl_display3D_Context3D.__name__ = ["openfl","display3D","Context3D"];
openfl_display3D_Context3D.__super__ = openfl_events_EventDispatcher;
openfl_display3D_Context3D.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	backBufferHeight: null
	,backBufferWidth: null
	,driverInfo: null
	,enableErrorChecking: null
	,maxBackBufferHeight: null
	,maxBackBufferWidth: null
	,profile: null
	,totalGPUMemory: null
	,__backBufferAntiAlias: null
	,__backBufferEnableDepthAndStencil: null
	,__backBufferWantsBestResolution: null
	,__depthRenderBuffer: null
	,__depthStencilRenderBuffer: null
	,__fragmentConstants: null
	,__framebuffer: null
	,__frameCount: null
	,__positionScale: null
	,__program: null
	,__renderSession: null
	,__renderToTexture: null
	,__rttDepthAndStencil: null
	,__samplerDirty: null
	,__samplerTextures: null
	,__samplerStates: null
	,__scissorRectangle: null
	,__stage3D: null
	,__stats: null
	,__statsCache: null
	,__stencilCompareMode: null
	,__stencilRef: null
	,__stencilReadMask: null
	,__stencilRenderBuffer: null
	,__supportsPackedDepthStencil: null
	,__vertexConstants: null
	,clear: function(red,green,blue,alpha,depth,stencil,mask) {
		if(mask == null) {
			mask = 7;
		}
		if(stencil == null) {
			stencil = 0;
		}
		if(depth == null) {
			depth = 1;
		}
		if(alpha == null) {
			alpha = 1;
		}
		if(blue == null) {
			blue = 0;
		}
		if(green == null) {
			green = 0;
		}
		if(red == null) {
			red = 0;
		}
		var clearMask = 0;
		if((mask & 1) != 0) {
			clearMask = 16384;
			lime_graphics_opengl_GL.context.clearColor(red,green,blue,alpha);
			openfl__$internal_stage3D_GLUtils.CheckGLError();
		}
		if((mask & 2) != 0) {
			clearMask |= 256;
			lime_graphics_opengl_GL.context.clearDepth(depth);
			openfl__$internal_stage3D_GLUtils.CheckGLError();
		}
		if((mask & 4) != 0) {
			clearMask |= 1024;
			lime_graphics_opengl_GL.context.clearStencil(stencil);
			openfl__$internal_stage3D_GLUtils.CheckGLError();
		}
		lime_graphics_opengl_GL.context.clear(clearMask);
		openfl__$internal_stage3D_GLUtils.CheckGLError();
	}
	,configureBackBuffer: function(width,height,antiAlias,enableDepthAndStencil,wantsBestResolution,wantsBestResolutionOnBrowserZoom) {
		if(wantsBestResolutionOnBrowserZoom == null) {
			wantsBestResolutionOnBrowserZoom = false;
		}
		if(wantsBestResolution == null) {
			wantsBestResolution = false;
		}
		if(enableDepthAndStencil == null) {
			enableDepthAndStencil = true;
		}
		this.__updateBackbufferViewport();
		this.backBufferWidth = width;
		this.backBufferHeight = height;
		this.__backBufferAntiAlias = antiAlias;
		this.__backBufferEnableDepthAndStencil = enableDepthAndStencil;
		this.__backBufferWantsBestResolution = wantsBestResolution;
		openfl_display3D_Context3D.__stateCache.clearSettings();
	}
	,createCubeTexture: function(size,format,optimizeForRenderToTexture,streamingLevels) {
		if(streamingLevels == null) {
			streamingLevels = 0;
		}
		return new openfl_display3D_textures_CubeTexture(this,size,format,optimizeForRenderToTexture,streamingLevels);
	}
	,createIndexBuffer: function(numIndices,bufferUsage) {
		if(bufferUsage == null) {
			bufferUsage = 1;
		}
		return new openfl_display3D_IndexBuffer3D(this,numIndices,openfl_display3D__$Context3DBufferUsage_Context3DBufferUsage_$Impl_$.toString(bufferUsage));
	}
	,createProgram: function() {
		return new openfl_display3D_Program3D(this);
	}
	,createRectangleTexture: function(width,height,format,optimizeForRenderToTexture) {
		return new openfl_display3D_textures_RectangleTexture(this,width,height,openfl_display3D__$Context3DTextureFormat_Context3DTextureFormat_$Impl_$.toString(format),optimizeForRenderToTexture);
	}
	,createTexture: function(width,height,format,optimizeForRenderToTexture,streamingLevels) {
		if(streamingLevels == null) {
			streamingLevels = 0;
		}
		return new openfl_display3D_textures_Texture(this,width,height,format,optimizeForRenderToTexture,streamingLevels);
	}
	,createVertexBuffer: function(numVertices,data32PerVertex,bufferUsage) {
		if(bufferUsage == null) {
			bufferUsage = 1;
		}
		return new openfl_display3D_VertexBuffer3D(this,numVertices,data32PerVertex,openfl_display3D__$Context3DBufferUsage_Context3DBufferUsage_$Impl_$.toString(bufferUsage));
	}
	,createVideoTexture: function() {
		return new openfl_display3D_textures_VideoTexture(this);
	}
	,dispose: function() {
	}
	,drawToBitmapData: function(destination) {
	}
	,drawTriangles: function(indexBuffer,firstIndex,numTriangles) {
		if(numTriangles == null) {
			numTriangles = -1;
		}
		if(firstIndex == null) {
			firstIndex = 0;
		}
		if(this.__program == null) {
			return;
		}
		this.__flushSamplerState();
		this.__program.__flush();
		var count = numTriangles == -1 ? indexBuffer.__numIndices : numTriangles * 3;
		lime_graphics_opengl_GL.context.bindBuffer(34963,indexBuffer.__id);
		openfl__$internal_stage3D_GLUtils.CheckGLError();
		lime_graphics_opengl_GL.context.drawElements(4,count,indexBuffer.__elementType,firstIndex);
		openfl__$internal_stage3D_GLUtils.CheckGLError();
		this.__statsIncrement(0);
	}
	,present: function() {
		this.__statsClear(0);
		this.__frameCount++;
	}
	,setBlendFactors: function(sourceFactor,destinationFactor) {
		var updateSrc = openfl_display3D_Context3D.__stateCache.updateBlendSrcFactor(sourceFactor);
		var updateDest = openfl_display3D_Context3D.__stateCache.updateBlendDestFactor(destinationFactor);
		if(updateSrc || updateDest) {
			this.__updateBlendFactors();
		}
	}
	,setColorMask: function(red,green,blue,alpha) {
		lime_graphics_opengl_GL.context.colorMask(red,green,blue,alpha);
	}
	,setCulling: function(triangleFaceToCull) {
		if(openfl_display3D_Context3D.__stateCache.updateCullingMode(triangleFaceToCull)) {
			switch(triangleFaceToCull) {
			case 0:
				lime_graphics_opengl_GL.context.enable(2884);
				lime_graphics_opengl_GL.context.cullFace(1028);
				break;
			case 1:
				lime_graphics_opengl_GL.context.enable(2884);
				lime_graphics_opengl_GL.context.cullFace(1029);
				break;
			case 2:
				lime_graphics_opengl_GL.context.enable(2884);
				lime_graphics_opengl_GL.context.cullFace(1032);
				break;
			case 3:
				lime_graphics_opengl_GL.context.disable(2884);
				break;
			default:
				throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError());
			}
		}
	}
	,setDepthTest: function(depthMask,passCompareMode) {
		var depthTestEnabled = this.__backBufferEnableDepthAndStencil;
		if(openfl_display3D_Context3D.__stateCache.updateDepthTestEnabled(depthTestEnabled)) {
			if(depthTestEnabled) {
				lime_graphics_opengl_GL.context.enable(2929);
			} else {
				lime_graphics_opengl_GL.context.disable(2929);
			}
		}
		if(openfl_display3D_Context3D.__stateCache.updateDepthTestMask(depthMask)) {
			lime_graphics_opengl_GL.context.depthMask(depthMask);
		}
		if(openfl_display3D_Context3D.__stateCache.updateDepthCompareMode(passCompareMode)) {
			switch(passCompareMode) {
			case 0:
				lime_graphics_opengl_GL.context.depthFunc(519);
				break;
			case 1:
				lime_graphics_opengl_GL.context.depthFunc(514);
				break;
			case 2:
				lime_graphics_opengl_GL.context.depthFunc(516);
				break;
			case 3:
				lime_graphics_opengl_GL.context.depthFunc(518);
				break;
			case 4:
				lime_graphics_opengl_GL.context.depthFunc(513);
				break;
			case 5:
				lime_graphics_opengl_GL.context.depthFunc(515);
				break;
			case 6:
				lime_graphics_opengl_GL.context.depthFunc(512);
				break;
			case 7:
				lime_graphics_opengl_GL.context.depthFunc(517);
				break;
			default:
				throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError());
			}
		}
	}
	,setProgram: function(program) {
		if(program == null) {
			throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError());
		}
		if(openfl_display3D_Context3D.__stateCache.updateProgram3D(program)) {
			program.__use();
			program.__setPositionScale(this.__positionScale);
			this.__program = program;
			this.__samplerDirty |= this.__program.__samplerUsageMask;
		}
	}
	,setProgramConstantsFromByteArray: function(programType,firstRegister,numRegisters,data,byteArrayOffset) {
		if(numRegisters == 0) {
			return;
		}
		if(numRegisters == -1) {
			numRegisters = (openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(data) >> 2) - byteArrayOffset;
		}
		var isVertex = programType == 1;
		var dest = isVertex ? this.__vertexConstants : this.__fragmentConstants;
		var bytes = openfl_utils__$ByteArray_ByteArray_$Impl_$.toBytes(data);
		var len = openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(data);
		var floatData = len == null ? new Float32Array(bytes.b.bufferValue,0) : new Float32Array(bytes.b.bufferValue,0,len);
		var outOffset = firstRegister * 4;
		var inOffset = _$UInt_UInt_$Impl_$.toFloat(byteArrayOffset) / _$UInt_UInt_$Impl_$.toFloat(4) | 0;
		var _g1 = 0;
		var _g = numRegisters * 4;
		while(_g1 < _g) {
			var i = _g1++;
			dest[outOffset + i] = floatData[inOffset + i];
		}
		if(this.__program != null) {
			this.__program.__markDirty(isVertex,firstRegister,numRegisters);
		}
	}
	,setProgramConstantsFromMatrix: function(programType,firstRegister,matrix,transposedMatrix) {
		if(transposedMatrix == null) {
			transposedMatrix = false;
		}
		var isVertex = programType == 1;
		var dest = isVertex ? this.__vertexConstants : this.__fragmentConstants;
		var source = matrix.rawData;
		var i = firstRegister * 4;
		if(transposedMatrix) {
			dest[i++] = source.get(0);
			dest[i++] = source.get(4);
			dest[i++] = source.get(8);
			dest[i++] = source.get(12);
			dest[i++] = source.get(1);
			dest[i++] = source.get(5);
			dest[i++] = source.get(9);
			dest[i++] = source.get(13);
			dest[i++] = source.get(2);
			dest[i++] = source.get(6);
			dest[i++] = source.get(10);
			dest[i++] = source.get(14);
			dest[i++] = source.get(3);
			dest[i++] = source.get(7);
			dest[i++] = source.get(11);
			dest[i++] = source.get(15);
		} else {
			dest[i++] = source.get(0);
			dest[i++] = source.get(1);
			dest[i++] = source.get(2);
			dest[i++] = source.get(3);
			dest[i++] = source.get(4);
			dest[i++] = source.get(5);
			dest[i++] = source.get(6);
			dest[i++] = source.get(7);
			dest[i++] = source.get(8);
			dest[i++] = source.get(9);
			dest[i++] = source.get(10);
			dest[i++] = source.get(11);
			dest[i++] = source.get(12);
			dest[i++] = source.get(13);
			dest[i++] = source.get(14);
			dest[i++] = source.get(15);
		}
		if(this.__program != null) {
			this.__program.__markDirty(isVertex,firstRegister,4);
		}
	}
	,setProgramConstantsFromVector: function(programType,firstRegister,data,numRegisters) {
		if(numRegisters == null) {
			numRegisters = -1;
		}
		if(numRegisters == 0) {
			return;
		}
		if(numRegisters == -1) {
			numRegisters = data.get_length() >> 2;
		}
		var isVertex = programType == 1;
		var dest = isVertex ? this.__vertexConstants : this.__fragmentConstants;
		var sourceIndex = 0;
		var destIndex = firstRegister * 4;
		var _g1 = 0;
		var _g = numRegisters;
		while(_g1 < _g) {
			++_g1;
			dest[destIndex++] = data.get(sourceIndex++);
			dest[destIndex++] = data.get(sourceIndex++);
			dest[destIndex++] = data.get(sourceIndex++);
			dest[destIndex++] = data.get(sourceIndex++);
		}
		if(this.__program != null) {
			this.__program.__markDirty(isVertex,firstRegister,numRegisters);
		}
	}
	,setRenderToBackBuffer: function() {
		lime_graphics_opengl_GL.context.bindFramebuffer(36160,null);
		openfl__$internal_stage3D_GLUtils.CheckGLError();
		this.__renderToTexture = null;
		this.__scissorRectangle = null;
		this.__updateBackbufferViewport();
		this.__updateScissorRectangle();
		this.__updateDepthAndStencilState();
		this.__positionScale[1] = 1.0;
		if(this.__program != null) {
			this.__program.__setPositionScale(this.__positionScale);
		}
	}
	,setRenderToTexture: function(texture,enableDepthAndStencil,antiAlias,surfaceSelector) {
		if(surfaceSelector == null) {
			surfaceSelector = 0;
		}
		if(antiAlias == null) {
			antiAlias = 0;
		}
		if(enableDepthAndStencil == null) {
			enableDepthAndStencil = false;
		}
		var width = 0;
		var height = 0;
		if(js_Boot.__instanceof(texture,openfl_display3D_textures_Texture)) {
			var texture2D = texture;
			width = texture2D.__width;
			height = texture2D.__height;
		} else if(js_Boot.__instanceof(texture,openfl_display3D_textures_RectangleTexture)) {
			var rectTexture = texture;
			width = rectTexture.__width;
			height = rectTexture.__height;
		} else {
			throw new js__$Boot_HaxeError(new openfl_errors_Error("Invalid texture"));
		}
		if(this.__framebuffer == null) {
			this.__framebuffer = lime_graphics_opengl_GL.context.createFramebuffer();
			openfl__$internal_stage3D_GLUtils.CheckGLError();
		}
		lime_graphics_opengl_GL.context.bindFramebuffer(36160,this.__framebuffer);
		openfl__$internal_stage3D_GLUtils.CheckGLError();
		lime_graphics_opengl_GL.context.framebufferTexture2D(36160,36064,3553,texture.__textureID,0);
		openfl__$internal_stage3D_GLUtils.CheckGLError();
		if(enableDepthAndStencil) {
			if(this.__supportsPackedDepthStencil) {
				if(this.__depthStencilRenderBuffer == null) {
					this.__depthStencilRenderBuffer = lime_graphics_opengl_GL.context.createRenderbuffer();
					openfl__$internal_stage3D_GLUtils.CheckGLError();
				}
				lime_graphics_opengl_GL.context.bindRenderbuffer(36161,this.__depthStencilRenderBuffer);
				openfl__$internal_stage3D_GLUtils.CheckGLError();
				lime_graphics_opengl_GL.context.renderbufferStorage(36161,34041,width,height);
				openfl__$internal_stage3D_GLUtils.CheckGLError();
				lime_graphics_opengl_GL.context.framebufferRenderbuffer(36160,33306,36161,this.__depthStencilRenderBuffer);
				openfl__$internal_stage3D_GLUtils.CheckGLError();
			} else {
				if(this.__depthRenderBuffer == null) {
					this.__depthRenderBuffer = lime_graphics_opengl_GL.context.createRenderbuffer();
					openfl__$internal_stage3D_GLUtils.CheckGLError();
				}
				if(this.__stencilRenderBuffer == null) {
					this.__stencilRenderBuffer = lime_graphics_opengl_GL.context.createRenderbuffer();
					openfl__$internal_stage3D_GLUtils.CheckGLError();
				}
				lime_graphics_opengl_GL.context.bindRenderbuffer(36161,this.__depthRenderBuffer);
				openfl__$internal_stage3D_GLUtils.CheckGLError();
				lime_graphics_opengl_GL.context.renderbufferStorage(36161,33189,width,height);
				openfl__$internal_stage3D_GLUtils.CheckGLError();
				lime_graphics_opengl_GL.context.bindRenderbuffer(36161,this.__stencilRenderBuffer);
				openfl__$internal_stage3D_GLUtils.CheckGLError();
				lime_graphics_opengl_GL.context.renderbufferStorage(36161,36168,width,height);
				openfl__$internal_stage3D_GLUtils.CheckGLError();
				lime_graphics_opengl_GL.context.framebufferRenderbuffer(36160,36096,36161,this.__depthRenderBuffer);
				openfl__$internal_stage3D_GLUtils.CheckGLError();
				lime_graphics_opengl_GL.context.framebufferRenderbuffer(36160,36128,36161,this.__stencilRenderBuffer);
				openfl__$internal_stage3D_GLUtils.CheckGLError();
			}
			lime_graphics_opengl_GL.context.bindRenderbuffer(36161,null);
			openfl__$internal_stage3D_GLUtils.CheckGLError();
		}
		this.__setViewport(0,0,width,height);
		if(this.enableErrorChecking) {
			if(lime_graphics_opengl_GL.context.checkFramebufferStatus(36160) != 36053) {
				haxe_Log.trace("Error: Context3D.setRenderToTexture status:${code} width:${texture2D.__width} height:${texture2D.__height}",{ fileName : "Context3D.hx", lineNumber : 720, className : "openfl.display3D.Context3D", methodName : "setRenderToTexture"});
			}
		}
		this.__positionScale[1] = -1.0;
		if(this.__program != null) {
			this.__program.__setPositionScale(this.__positionScale);
		}
		this.__renderToTexture = texture;
		this.__scissorRectangle = null;
		this.__rttDepthAndStencil = enableDepthAndStencil;
		this.__updateScissorRectangle();
		this.__updateDepthAndStencilState();
	}
	,setSamplerStateAt: function(sampler,wrap,filter,mipfilter) {
		if(sampler < 0 || sampler > 8) {
			throw new js__$Boot_HaxeError(new openfl_errors_Error("sampler out of range"));
		}
		var state = this.__samplerStates[sampler];
		switch(wrap) {
		case 0:
			state.wrapModeS = 33071;
			state.wrapModeT = 33071;
			break;
		case 1:
			state.wrapModeS = 33071;
			state.wrapModeT = 10497;
			break;
		case 2:
			state.wrapModeS = 10497;
			state.wrapModeT = 10497;
			break;
		case 3:
			state.wrapModeS = 10497;
			state.wrapModeT = 33071;
			break;
		default:
			throw new js__$Boot_HaxeError(new openfl_errors_Error("wrap bad enum"));
		}
		switch(filter) {
		case 0:
			state.magFilter = 9729;
			break;
		case 1:
			state.magFilter = 9729;
			break;
		case 2:
			state.magFilter = 9729;
			break;
		case 3:
			state.magFilter = 9729;
			break;
		case 4:
			state.magFilter = 9729;
			break;
		case 5:
			state.magFilter = 9728;
			break;
		default:
			throw new js__$Boot_HaxeError(new openfl_errors_Error("filter bad enum"));
		}
		switch(mipfilter) {
		case 0:
			state.minFilter = 9987;
			break;
		case 1:
			state.minFilter = 9984;
			break;
		case 2:
			state.minFilter = filter == 5 ? 9728 : 9729;
			break;
		default:
			throw new js__$Boot_HaxeError(new openfl_errors_Error("mipfiter bad enum"));
		}
	}
	,setScissorRectangle: function(rectangle) {
		this.__scissorRectangle = rectangle != null ? rectangle.clone() : null;
		this.__updateScissorRectangle();
	}
	,setStencilActions: function(triangleFace,compareMode,actionOnBothPass,actionOnDepthFail,actionOnDepthPassStencilFail) {
		if(actionOnDepthPassStencilFail == null) {
			actionOnDepthPassStencilFail = 5;
		}
		if(actionOnDepthFail == null) {
			actionOnDepthFail = 5;
		}
		if(actionOnBothPass == null) {
			actionOnBothPass = 5;
		}
		if(compareMode == null) {
			compareMode = 0;
		}
		if(triangleFace == null) {
			triangleFace = 2;
		}
		this.__stencilCompareMode = compareMode;
		lime_graphics_opengl_GL.context.stencilOp(this.__getGLStencilAction(actionOnDepthFail),this.__getGLStencilAction(actionOnDepthPassStencilFail),this.__getGLStencilAction(actionOnBothPass));
		lime_graphics_opengl_GL.context.stencilFunc(this.__getGLCompareMode(this.__stencilCompareMode),this.__stencilRef,this.__stencilReadMask);
	}
	,setStencilReferenceValue: function(referenceValue,readMask,writeMask) {
		if(writeMask == null) {
			writeMask = 255;
		}
		if(readMask == null) {
			readMask = 255;
		}
		this.__stencilReadMask = readMask;
		this.__stencilRef = referenceValue;
		lime_graphics_opengl_GL.context.stencilFunc(this.__getGLCompareMode(this.__stencilCompareMode),this.__stencilRef,this.__stencilReadMask);
		lime_graphics_opengl_GL.context.stencilMask(writeMask);
	}
	,setTextureAt: function(sampler,texture) {
		if(this.__samplerTextures.get(sampler) != texture) {
			this.__samplerTextures.set(sampler,texture);
			this.__samplerDirty |= 1 << sampler;
		}
	}
	,setVertexBufferAt: function(index,buffer,bufferOffset,format) {
		if(format == null) {
			format = 4;
		}
		if(bufferOffset == null) {
			bufferOffset = 0;
		}
		if(buffer == null) {
			lime_graphics_opengl_GL.context.disableVertexAttribArray(index);
			openfl__$internal_stage3D_GLUtils.CheckGLError();
			lime_graphics_opengl_GL.context.bindBuffer(34962,null);
			openfl__$internal_stage3D_GLUtils.CheckGLError();
			return;
		}
		lime_graphics_opengl_GL.context.enableVertexAttribArray(index);
		openfl__$internal_stage3D_GLUtils.CheckGLError();
		lime_graphics_opengl_GL.context.bindBuffer(34962,buffer.__id);
		openfl__$internal_stage3D_GLUtils.CheckGLError();
		var byteOffset = bufferOffset * 4;
		switch(format) {
		case 0:
			lime_graphics_opengl_GL.context.vertexAttribPointer(index,4,5121,true,buffer.__stride,byteOffset);
			openfl__$internal_stage3D_GLUtils.CheckGLError();
			break;
		case 1:
			lime_graphics_opengl_GL.context.vertexAttribPointer(index,1,5126,false,buffer.__stride,byteOffset);
			openfl__$internal_stage3D_GLUtils.CheckGLError();
			break;
		case 2:
			lime_graphics_opengl_GL.context.vertexAttribPointer(index,2,5126,false,buffer.__stride,byteOffset);
			openfl__$internal_stage3D_GLUtils.CheckGLError();
			break;
		case 3:
			lime_graphics_opengl_GL.context.vertexAttribPointer(index,3,5126,false,buffer.__stride,byteOffset);
			openfl__$internal_stage3D_GLUtils.CheckGLError();
			break;
		case 4:
			lime_graphics_opengl_GL.context.vertexAttribPointer(index,4,5126,false,buffer.__stride,byteOffset);
			openfl__$internal_stage3D_GLUtils.CheckGLError();
			break;
		default:
			throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError());
		}
	}
	,__flushSamplerState: function() {
		var sampler = 0;
		while(this.__samplerDirty != 0) {
			if((this.__samplerDirty & 1 << sampler) != 0) {
				if(openfl_display3D_Context3D.__stateCache.updateActiveTextureSample(sampler)) {
					lime_graphics_opengl_GL.context.activeTexture(33984 + sampler);
					openfl__$internal_stage3D_GLUtils.CheckGLError();
				}
				var texture = this.__samplerTextures.get(sampler);
				if(texture != null) {
					var target = texture.__textureTarget;
					var texture1 = texture.__getTexture();
					lime_graphics_opengl_GL.context.bindTexture(target,texture1);
					openfl__$internal_stage3D_GLUtils.CheckGLError();
					var state = this.__program.__getSamplerState(sampler);
					if(state != null) {
						texture.__setSamplerState(state);
					}
				} else {
					lime_graphics_opengl_GL.context.bindTexture(3553,null);
					openfl__$internal_stage3D_GLUtils.CheckGLError();
				}
				this.__samplerDirty &= ~(1 << sampler);
			}
			++sampler;
		}
	}
	,__getGLCompareMode: function(compareMode) {
		switch(compareMode) {
		case 0:
			return 519;
		case 1:
			return 514;
		case 2:
			return 516;
		case 3:
			return 518;
		case 4:
			return 513;
		case 5:
			return 515;
		case 6:
			return 512;
		case 7:
			return 517;
		default:
			return 514;
		}
	}
	,__getGLStencilAction: function(stencilAction) {
		switch(stencilAction) {
		case 0:
			return 7683;
		case 1:
			return 34056;
		case 2:
			return 7682;
		case 3:
			return 34055;
		case 4:
			return 5386;
		case 5:
			return 7680;
		case 6:
			return 7681;
		case 7:
			return 0;
		default:
			return 7680;
		}
	}
	,__hasGLExtension: function(name) {
		return lime_graphics_opengl_GL.context.getSupportedExtensions().indexOf(name) != -1;
	}
	,__setViewport: function(originX,originY,width,height) {
		if(openfl_display3D_Context3D.__stateCache.updateViewport(originX,originY,width,height)) {
			lime_graphics_opengl_GL.context.viewport(originX,originY,width,height);
			openfl__$internal_stage3D_GLUtils.CheckGLError();
		}
	}
	,__statsAdd: function(stat,value) {
		this.__stats.set(stat,this.__stats.get(stat) + value);
		return this.__stats.get(stat);
	}
	,__statsClear: function(stat) {
		this.__stats.set(stat,0);
	}
	,__statsDecrement: function(stat) {
		this.__stats.set(stat,this.__stats.get(stat) - 1);
	}
	,__statsIncrement: function(stat) {
		this.__stats.set(stat,this.__stats.get(stat) + 1);
	}
	,__statsSendToTelemetry: function() {
	}
	,__statsSubtract: function(stat,value) {
		this.__stats.set(stat,this.__stats.get(stat) - value);
		return this.__stats.get(stat);
	}
	,__updateDepthAndStencilState: function() {
		if(this.__renderToTexture != null ? this.__rttDepthAndStencil : this.__backBufferEnableDepthAndStencil) {
			lime_graphics_opengl_GL.context.enable(2929);
			openfl__$internal_stage3D_GLUtils.CheckGLError();
			lime_graphics_opengl_GL.context.enable(2960);
			openfl__$internal_stage3D_GLUtils.CheckGLError();
		} else {
			lime_graphics_opengl_GL.context.disable(2929);
			openfl__$internal_stage3D_GLUtils.CheckGLError();
			lime_graphics_opengl_GL.context.disable(2960);
			openfl__$internal_stage3D_GLUtils.CheckGLError();
		}
	}
	,__updateBlendFactors: function() {
		if(openfl_display3D_Context3D.__stateCache._srcBlendFactor == null || openfl_display3D_Context3D.__stateCache._destBlendFactor == null) {
			return;
		}
		var src = 1;
		var dest = 0;
		switch(openfl_display3D_Context3D.__stateCache._srcBlendFactor) {
		case 0:
			src = 772;
			break;
		case 1:
			src = 774;
			break;
		case 2:
			src = 1;
			break;
		case 3:
			src = 773;
			break;
		case 4:
			src = 775;
			break;
		case 5:
			src = 771;
			break;
		case 7:
			src = 770;
			break;
		case 9:
			src = 0;
			break;
		default:
			throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError());
		}
		switch(openfl_display3D_Context3D.__stateCache._destBlendFactor) {
		case 0:
			dest = 772;
			break;
		case 2:
			dest = 1;
			break;
		case 3:
			dest = 773;
			break;
		case 5:
			dest = 771;
			break;
		case 6:
			dest = 769;
			break;
		case 7:
			dest = 770;
			break;
		case 8:
			dest = 768;
			break;
		case 9:
			dest = 0;
			break;
		default:
			throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError());
		}
		lime_graphics_opengl_GL.context.enable(3042);
		openfl__$internal_stage3D_GLUtils.CheckGLError();
		lime_graphics_opengl_GL.context.blendFunc(src,dest);
		openfl__$internal_stage3D_GLUtils.CheckGLError();
	}
	,__updateScissorRectangle: function() {
		if(this.__scissorRectangle == null) {
			lime_graphics_opengl_GL.context.disable(3089);
			openfl__$internal_stage3D_GLUtils.CheckGLError();
			return;
		}
		lime_graphics_opengl_GL.context.enable(3089);
		openfl__$internal_stage3D_GLUtils.CheckGLError();
		var height = 0;
		if(this.__renderToTexture != null) {
			if(js_Boot.__instanceof(this.__renderToTexture,openfl_display3D_textures_Texture)) {
				height = this.__renderToTexture.__height;
			} else if(js_Boot.__instanceof(this.__renderToTexture,openfl_display3D_textures_RectangleTexture)) {
				height = this.__renderToTexture.__height;
			}
		} else {
			height = this.backBufferHeight;
		}
		lime_graphics_opengl_GL.context.scissor(this.__scissorRectangle.x | 0,height - (this.__scissorRectangle.y | 0) - (this.__scissorRectangle.height | 0) | 0,this.__scissorRectangle.width | 0,this.__scissorRectangle.height | 0);
		openfl__$internal_stage3D_GLUtils.CheckGLError();
	}
	,__updateBackbufferViewport: function() {
		if(this.__renderToTexture == null) {
			this.__setViewport(this.__stage3D.x | 0,this.__stage3D.y | 0,this.backBufferWidth,this.backBufferHeight);
		}
	}
	,set_enableErrorChecking: function(value) {
		return this.enableErrorChecking = openfl__$internal_stage3D_GLUtils.debug = value;
	}
	,__class__: openfl_display3D_Context3D
	,__properties__: {set_enableErrorChecking:"set_enableErrorChecking"}
});
var openfl_display3D__$Context3D_Context3DTelemetry_$Impl_$ = {};
$hxClasses["openfl.display3D._Context3D.Context3DTelemetry_Impl_"] = openfl_display3D__$Context3D_Context3DTelemetry_$Impl_$;
openfl_display3D__$Context3D_Context3DTelemetry_$Impl_$.__name__ = ["openfl","display3D","_Context3D","Context3DTelemetry_Impl_"];
var openfl_display3D__$Context3DBlendFactor_Context3DBlendFactor_$Impl_$ = {};
$hxClasses["openfl.display3D._Context3DBlendFactor.Context3DBlendFactor_Impl_"] = openfl_display3D__$Context3DBlendFactor_Context3DBlendFactor_$Impl_$;
openfl_display3D__$Context3DBlendFactor_Context3DBlendFactor_$Impl_$.__name__ = ["openfl","display3D","_Context3DBlendFactor","Context3DBlendFactor_Impl_"];
openfl_display3D__$Context3DBlendFactor_Context3DBlendFactor_$Impl_$.fromString = function(value) {
	switch(value) {
	case "destinationAlpha":
		return 0;
	case "destinationColor":
		return 1;
	case "one":
		return 2;
	case "oneMinusDestinationAlpha":
		return 3;
	case "oneMinusDestinationColor":
		return 4;
	case "oneMinusSourceAlpha":
		return 5;
	case "oneMinusSourceColor":
		return 6;
	case "sourceAlpha":
		return 7;
	case "sourceColor":
		return 8;
	case "zero":
		return 9;
	default:
		return null;
	}
};
openfl_display3D__$Context3DBlendFactor_Context3DBlendFactor_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "destinationAlpha";
	case 1:
		return "destinationColor";
	case 2:
		return "one";
	case 3:
		return "oneMinusDestinationAlpha";
	case 4:
		return "oneMinusDestinationColor";
	case 5:
		return "oneMinusSourceAlpha";
	case 6:
		return "oneMinusSourceColor";
	case 7:
		return "sourceAlpha";
	case 8:
		return "sourceColor";
	case 9:
		return "zero";
	default:
		return null;
	}
};
var openfl_display3D__$Context3DBufferUsage_Context3DBufferUsage_$Impl_$ = {};
$hxClasses["openfl.display3D._Context3DBufferUsage.Context3DBufferUsage_Impl_"] = openfl_display3D__$Context3DBufferUsage_Context3DBufferUsage_$Impl_$;
openfl_display3D__$Context3DBufferUsage_Context3DBufferUsage_$Impl_$.__name__ = ["openfl","display3D","_Context3DBufferUsage","Context3DBufferUsage_Impl_"];
openfl_display3D__$Context3DBufferUsage_Context3DBufferUsage_$Impl_$.fromString = function(value) {
	switch(value) {
	case "dynamicDraw":
		return 0;
	case "staticDraw":
		return 1;
	default:
		return null;
	}
};
openfl_display3D__$Context3DBufferUsage_Context3DBufferUsage_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "dynamicDraw";
	case 1:
		return "staticDraw";
	default:
		return null;
	}
};
var openfl_display3D__$Context3DCompareMode_Context3DCompareMode_$Impl_$ = {};
$hxClasses["openfl.display3D._Context3DCompareMode.Context3DCompareMode_Impl_"] = openfl_display3D__$Context3DCompareMode_Context3DCompareMode_$Impl_$;
openfl_display3D__$Context3DCompareMode_Context3DCompareMode_$Impl_$.__name__ = ["openfl","display3D","_Context3DCompareMode","Context3DCompareMode_Impl_"];
openfl_display3D__$Context3DCompareMode_Context3DCompareMode_$Impl_$.fromString = function(value) {
	switch(value) {
	case "always":
		return 0;
	case "equal":
		return 1;
	case "greater":
		return 2;
	case "greaterEqual":
		return 3;
	case "less":
		return 4;
	case "lessEqual":
		return 5;
	case "never":
		return 6;
	case "notEqual":
		return 7;
	default:
		return null;
	}
};
openfl_display3D__$Context3DCompareMode_Context3DCompareMode_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "always";
	case 1:
		return "equal";
	case 2:
		return "greater";
	case 3:
		return "greaterEqual";
	case 4:
		return "less";
	case 5:
		return "lessEqual";
	case 6:
		return "never";
	case 7:
		return "notEqual";
	default:
		return null;
	}
};
var openfl_display3D__$Context3DMipFilter_Context3DMipFilter_$Impl_$ = {};
$hxClasses["openfl.display3D._Context3DMipFilter.Context3DMipFilter_Impl_"] = openfl_display3D__$Context3DMipFilter_Context3DMipFilter_$Impl_$;
openfl_display3D__$Context3DMipFilter_Context3DMipFilter_$Impl_$.__name__ = ["openfl","display3D","_Context3DMipFilter","Context3DMipFilter_Impl_"];
openfl_display3D__$Context3DMipFilter_Context3DMipFilter_$Impl_$.fromString = function(value) {
	switch(value) {
	case "miplinear":
		return 0;
	case "mipnearest":
		return 1;
	case "mipnone":
		return 2;
	default:
		return null;
	}
};
openfl_display3D__$Context3DMipFilter_Context3DMipFilter_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "miplinear";
	case 1:
		return "mipnearest";
	case 2:
		return "mipnone";
	default:
		return null;
	}
};
var openfl_display3D__$Context3DProfile_Context3DProfile_$Impl_$ = {};
$hxClasses["openfl.display3D._Context3DProfile.Context3DProfile_Impl_"] = openfl_display3D__$Context3DProfile_Context3DProfile_$Impl_$;
openfl_display3D__$Context3DProfile_Context3DProfile_$Impl_$.__name__ = ["openfl","display3D","_Context3DProfile","Context3DProfile_Impl_"];
openfl_display3D__$Context3DProfile_Context3DProfile_$Impl_$.fromString = function(value) {
	switch(value) {
	case "baseline":
		return 0;
	case "baselineConstrained":
		return 1;
	case "baselineExtended":
		return 2;
	case "standard":
		return 3;
	case "standardConstrained":
		return 4;
	default:
		return null;
	}
};
openfl_display3D__$Context3DProfile_Context3DProfile_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "baseline";
	case 1:
		return "baselineConstrained";
	case 2:
		return "baselineExtended";
	case 3:
		return "standard";
	case 4:
		return "standardConstrained";
	default:
		return null;
	}
};
var openfl_display3D__$Context3DProgramType_Context3DProgramType_$Impl_$ = {};
$hxClasses["openfl.display3D._Context3DProgramType.Context3DProgramType_Impl_"] = openfl_display3D__$Context3DProgramType_Context3DProgramType_$Impl_$;
openfl_display3D__$Context3DProgramType_Context3DProgramType_$Impl_$.__name__ = ["openfl","display3D","_Context3DProgramType","Context3DProgramType_Impl_"];
openfl_display3D__$Context3DProgramType_Context3DProgramType_$Impl_$.fromString = function(value) {
	switch(value) {
	case "fragment":
		return 0;
	case "vertex":
		return 1;
	default:
		return null;
	}
};
openfl_display3D__$Context3DProgramType_Context3DProgramType_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "fragment";
	case 1:
		return "vertex";
	default:
		return null;
	}
};
var openfl_display3D__$Context3DRenderMode_Context3DRenderMode_$Impl_$ = {};
$hxClasses["openfl.display3D._Context3DRenderMode.Context3DRenderMode_Impl_"] = openfl_display3D__$Context3DRenderMode_Context3DRenderMode_$Impl_$;
openfl_display3D__$Context3DRenderMode_Context3DRenderMode_$Impl_$.__name__ = ["openfl","display3D","_Context3DRenderMode","Context3DRenderMode_Impl_"];
openfl_display3D__$Context3DRenderMode_Context3DRenderMode_$Impl_$.fromString = function(value) {
	switch(value) {
	case "auto":
		return 0;
	case "software":
		return 1;
	default:
		return null;
	}
};
openfl_display3D__$Context3DRenderMode_Context3DRenderMode_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "auto";
	case 1:
		return "software";
	default:
		return null;
	}
};
var openfl_display3D__$Context3DStencilAction_Context3DStencilAction_$Impl_$ = {};
$hxClasses["openfl.display3D._Context3DStencilAction.Context3DStencilAction_Impl_"] = openfl_display3D__$Context3DStencilAction_Context3DStencilAction_$Impl_$;
openfl_display3D__$Context3DStencilAction_Context3DStencilAction_$Impl_$.__name__ = ["openfl","display3D","_Context3DStencilAction","Context3DStencilAction_Impl_"];
openfl_display3D__$Context3DStencilAction_Context3DStencilAction_$Impl_$.fromString = function(value) {
	switch(value) {
	case "decrementSaturate":
		return 0;
	case "decrementWrap":
		return 1;
	case "incrementSaturate":
		return 2;
	case "incrementWrap":
		return 3;
	case "invert":
		return 4;
	case "keep":
		return 5;
	case "set":
		return 6;
	case "zero":
		return 7;
	default:
		return null;
	}
};
openfl_display3D__$Context3DStencilAction_Context3DStencilAction_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "decrementSaturate";
	case 1:
		return "decrementWrap";
	case 2:
		return "incrementSaturate";
	case 3:
		return "incrementWrap";
	case 4:
		return "invert";
	case 5:
		return "keep";
	case 6:
		return "set";
	case 7:
		return "zero";
	default:
		return null;
	}
};
var openfl_display3D__$Context3DTextureFilter_Context3DTextureFilter_$Impl_$ = {};
$hxClasses["openfl.display3D._Context3DTextureFilter.Context3DTextureFilter_Impl_"] = openfl_display3D__$Context3DTextureFilter_Context3DTextureFilter_$Impl_$;
openfl_display3D__$Context3DTextureFilter_Context3DTextureFilter_$Impl_$.__name__ = ["openfl","display3D","_Context3DTextureFilter","Context3DTextureFilter_Impl_"];
openfl_display3D__$Context3DTextureFilter_Context3DTextureFilter_$Impl_$.fromString = function(value) {
	switch(value) {
	case "anisotropic16x":
		return 0;
	case "anisotropic2x":
		return 1;
	case "anisotropic4x":
		return 2;
	case "anisotropic8x":
		return 3;
	case "linear":
		return 4;
	case "nearest":
		return 5;
	default:
		return null;
	}
};
openfl_display3D__$Context3DTextureFilter_Context3DTextureFilter_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "anisotropic16x";
	case 1:
		return "anisotropic2x";
	case 2:
		return "anisotropic4x";
	case 3:
		return "anisotropic8x";
	case 4:
		return "linear";
	case 5:
		return "nearest";
	default:
		return null;
	}
};
var openfl_display3D__$Context3DTextureFormat_Context3DTextureFormat_$Impl_$ = {};
$hxClasses["openfl.display3D._Context3DTextureFormat.Context3DTextureFormat_Impl_"] = openfl_display3D__$Context3DTextureFormat_Context3DTextureFormat_$Impl_$;
openfl_display3D__$Context3DTextureFormat_Context3DTextureFormat_$Impl_$.__name__ = ["openfl","display3D","_Context3DTextureFormat","Context3DTextureFormat_Impl_"];
openfl_display3D__$Context3DTextureFormat_Context3DTextureFormat_$Impl_$.fromString = function(value) {
	switch(value) {
	case "bgrPacked565":
		return 0;
	case "bgra":
		return 1;
	case "bgraPacked4444":
		return 2;
	case "compressed":
		return 3;
	case "compressedAlpha":
		return 4;
	case "rgbaHalfFloat":
		return 5;
	default:
		return null;
	}
};
openfl_display3D__$Context3DTextureFormat_Context3DTextureFormat_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "bgrPacked565";
	case 1:
		return "bgra";
	case 2:
		return "bgraPacked4444";
	case 3:
		return "compressed";
	case 4:
		return "compressedAlpha";
	case 5:
		return "rgbaHalfFloat";
	default:
		return null;
	}
};
var openfl_display3D__$Context3DTriangleFace_Context3DTriangleFace_$Impl_$ = {};
$hxClasses["openfl.display3D._Context3DTriangleFace.Context3DTriangleFace_Impl_"] = openfl_display3D__$Context3DTriangleFace_Context3DTriangleFace_$Impl_$;
openfl_display3D__$Context3DTriangleFace_Context3DTriangleFace_$Impl_$.__name__ = ["openfl","display3D","_Context3DTriangleFace","Context3DTriangleFace_Impl_"];
openfl_display3D__$Context3DTriangleFace_Context3DTriangleFace_$Impl_$.fromString = function(value) {
	switch(value) {
	case "back":
		return 0;
	case "front":
		return 1;
	case "frontAndBack":
		return 2;
	case "none":
		return 3;
	default:
		return null;
	}
};
openfl_display3D__$Context3DTriangleFace_Context3DTriangleFace_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "back";
	case 1:
		return "front";
	case 2:
		return "frontAndBack";
	case 3:
		return "none";
	default:
		return null;
	}
};
var openfl_display3D__$Context3DVertexBufferFormat_Context3DVertexBufferFormat_$Impl_$ = {};
$hxClasses["openfl.display3D._Context3DVertexBufferFormat.Context3DVertexBufferFormat_Impl_"] = openfl_display3D__$Context3DVertexBufferFormat_Context3DVertexBufferFormat_$Impl_$;
openfl_display3D__$Context3DVertexBufferFormat_Context3DVertexBufferFormat_$Impl_$.__name__ = ["openfl","display3D","_Context3DVertexBufferFormat","Context3DVertexBufferFormat_Impl_"];
openfl_display3D__$Context3DVertexBufferFormat_Context3DVertexBufferFormat_$Impl_$.fromString = function(value) {
	switch(value) {
	case "bytes4":
		return 0;
	case "float1":
		return 1;
	case "float2":
		return 2;
	case "float3":
		return 3;
	case "float4":
		return 4;
	default:
		return null;
	}
};
openfl_display3D__$Context3DVertexBufferFormat_Context3DVertexBufferFormat_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "bytes4";
	case 1:
		return "float1";
	case 2:
		return "float2";
	case 3:
		return "float3";
	case 4:
		return "float4";
	default:
		return null;
	}
};
var openfl_display3D__$Context3DWrapMode_Context3DWrapMode_$Impl_$ = {};
$hxClasses["openfl.display3D._Context3DWrapMode.Context3DWrapMode_Impl_"] = openfl_display3D__$Context3DWrapMode_Context3DWrapMode_$Impl_$;
openfl_display3D__$Context3DWrapMode_Context3DWrapMode_$Impl_$.__name__ = ["openfl","display3D","_Context3DWrapMode","Context3DWrapMode_Impl_"];
openfl_display3D__$Context3DWrapMode_Context3DWrapMode_$Impl_$.fromString = function(value) {
	switch(value) {
	case "clamp":
		return 0;
	case "clamp_u_repeat_y":
		return 1;
	case "repeat":
		return 2;
	case "repeat_u_clamp_y":
		return 3;
	default:
		return null;
	}
};
openfl_display3D__$Context3DWrapMode_Context3DWrapMode_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "clamp";
	case 1:
		return "clamp_u_repeat_y";
	case 2:
		return "repeat";
	case 3:
		return "repeat_u_clamp_y";
	default:
		return null;
	}
};
var openfl_display3D_IndexBuffer3D = function(context3D,numIndices,bufferUsage) {
	this.__context = context3D;
	this.__numIndices = numIndices;
	this.__elementType = 5123;
	this.__id = lime_graphics_opengl_GL.context.createBuffer();
	openfl__$internal_stage3D_GLUtils.CheckGLError();
	this.__usage = openfl_display3D__$Context3DBufferUsage_Context3DBufferUsage_$Impl_$.fromString(bufferUsage) == 0 ? 35048 : 35044;
	this.__context.__statsIncrement(1);
	this.__memoryUsage = 0;
};
$hxClasses["openfl.display3D.IndexBuffer3D"] = openfl_display3D_IndexBuffer3D;
openfl_display3D_IndexBuffer3D.__name__ = ["openfl","display3D","IndexBuffer3D"];
openfl_display3D_IndexBuffer3D.prototype = {
	__context: null
	,__elementType: null
	,__id: null
	,__memoryUsage: null
	,__numIndices: null
	,__usage: null
	,dispose: function() {
		lime_graphics_opengl_GL.context.deleteBuffer(this.__id);
		this.__context.__statsDecrement(1);
		this.__context.__statsSubtract(6,this.__memoryUsage);
		this.__memoryUsage = 0;
	}
	,uploadFromByteArray: function(data,byteArrayOffset,startOffset,count) {
		var offset = byteArrayOffset + startOffset * 2;
		var buffer = openfl_utils__$ByteArray_ByteArray_$Impl_$.toArrayBuffer(data);
		var this1;
		if(buffer != null) {
			if(count == null) {
				this1 = new Int16Array(buffer,offset);
			} else {
				this1 = new Int16Array(buffer,offset,count);
			}
		} else {
			this1 = null;
		}
		this.uploadFromTypedArray(this1);
	}
	,uploadFromTypedArray: function(data) {
		lime_graphics_opengl_GL.context.bindBuffer(34963,this.__id);
		openfl__$internal_stage3D_GLUtils.CheckGLError();
		lime_graphics_opengl_GL.context.bufferData(34963,data,this.__usage);
		openfl__$internal_stage3D_GLUtils.CheckGLError();
		if(data.byteLength != this.__memoryUsage) {
			this.__context.__statsAdd(6,data.byteLength - this.__memoryUsage);
			this.__memoryUsage = data.byteLength;
		}
	}
	,uploadFromVector: function(data,startOffset,count) {
		var length = startOffset + count;
		var this1;
		if(count != null) {
			this1 = new Int16Array(count);
		} else {
			this1 = null;
		}
		var buffer = this1;
		var _g1 = startOffset;
		while(_g1 < length) {
			var i = _g1++;
			buffer[i - startOffset] = data.get(i);
		}
		this.uploadFromTypedArray(buffer);
	}
	,__class__: openfl_display3D_IndexBuffer3D
};
var openfl_display3D_Program3D = function(context3D) {
	this.__context = context3D;
	this.__memUsage = 0;
	this.__samplerUsageMask = 0;
	this.__uniforms = new List();
	this.__samplerUniforms = new List();
	this.__alphaSamplerUniforms = new List();
	this.__samplerStates = openfl__$Vector_Vector_$Impl_$.toObjectVector(null,8);
};
$hxClasses["openfl.display3D.Program3D"] = openfl_display3D_Program3D;
openfl_display3D_Program3D.__name__ = ["openfl","display3D","Program3D"];
openfl_display3D_Program3D.prototype = {
	__alphaSamplerUniforms: null
	,__context: null
	,__fragmentShaderID: null
	,__fragmentSource: null
	,__fragmentUniformMap: null
	,__memUsage: null
	,__positionScale: null
	,__programID: null
	,__samplerStates: null
	,__samplerUniforms: null
	,__samplerUsageMask: null
	,__uniforms: null
	,__vertexShaderID: null
	,__vertexSource: null
	,__vertexUniformMap: null
	,dispose: function() {
		this.__deleteShaders();
	}
	,upload: function(vertexProgram,fragmentProgram) {
		var samplerStates = [];
		this.__uploadFromGLSL(openfl__$internal_stage3D_AGALConverter.convertToGLSL(vertexProgram,null),openfl__$internal_stage3D_AGALConverter.convertToGLSL(fragmentProgram,samplerStates));
		var _g1 = 0;
		var _g = samplerStates.length;
		while(_g1 < _g) {
			var i = _g1++;
			this.__setSamplerState(i,samplerStates[i]);
		}
	}
	,__buildUniformList: function() {
		this.__uniforms.clear();
		this.__samplerUniforms.clear();
		this.__alphaSamplerUniforms.clear();
		this.__samplerUsageMask = 0;
		var numActive = 0;
		numActive = lime_graphics_opengl_GL.context.getProgramParameter(this.__programID,35718);
		openfl__$internal_stage3D_GLUtils.CheckGLError();
		var vertexUniforms = new List();
		var fragmentUniforms = new List();
		var _g1 = 0;
		var _g = numActive;
		while(_g1 < _g) {
			var i = _g1++;
			var info = lime_graphics_opengl_GL.context.getActiveUniform(this.__programID,i);
			var name = info.name;
			var size = info.size;
			var uniformType = info.type;
			openfl__$internal_stage3D_GLUtils.CheckGLError();
			var uniform = new openfl_display3D__$Program3D_Uniform();
			uniform.name = name;
			uniform.size = size;
			uniform.type = uniformType;
			uniform.location = lime_graphics_opengl_GL.context.getUniformLocation(this.__programID,uniform.name);
			openfl__$internal_stage3D_GLUtils.CheckGLError();
			var indexBracket = uniform.name.indexOf("[");
			if(indexBracket >= 0) {
				uniform.name = uniform.name.substring(0,indexBracket);
			}
			switch(uniform.type) {
			case 35674:
				uniform.regCount = 2;
				break;
			case 35675:
				uniform.regCount = 3;
				break;
			case 35676:
				uniform.regCount = 4;
				break;
			default:
				uniform.regCount = 1;
			}
			uniform.regCount *= uniform.size;
			this.__uniforms.add(uniform);
			if(uniform.name == "vcPositionScale") {
				this.__positionScale = uniform;
			} else if(StringTools.startsWith(uniform.name,"vc")) {
				uniform.regIndex = Std.parseInt(uniform.name.substring(2));
				uniform.regData = this.__context.__vertexConstants;
				vertexUniforms.add(uniform);
			} else if(StringTools.startsWith(uniform.name,"fc")) {
				uniform.regIndex = Std.parseInt(uniform.name.substring(2));
				uniform.regData = this.__context.__fragmentConstants;
				fragmentUniforms.add(uniform);
			} else if(StringTools.startsWith(uniform.name,"sampler") && !StringTools.endsWith(uniform.name,"_alpha")) {
				uniform.regIndex = Std.parseInt(uniform.name.substring(7));
				this.__samplerUniforms.add(uniform);
				var _g4 = 0;
				var _g3 = uniform.regCount;
				while(_g4 < _g3) this.__samplerUsageMask |= 1 << uniform.regIndex + _g4++;
			} else if(StringTools.startsWith(uniform.name,"sampler") && StringTools.endsWith(uniform.name,"_alpha")) {
				var len = uniform.name.indexOf("_") - 7;
				uniform.regIndex = Std.parseInt(uniform.name.substring(7,7 + len)) + 4;
				this.__alphaSamplerUniforms.add(uniform);
			}
			if(openfl_display3D_Program3D.verbose) {
				haxe_Log.trace("" + i + " name:" + uniform.name + " type:" + uniform.type + " size:" + uniform.size + " location:" + Std.string(uniform.location),{ fileName : "Program3D.hx", lineNumber : 174, className : "openfl.display3D.Program3D", methodName : "__buildUniformList"});
			}
		}
		this.__vertexUniformMap = new openfl_display3D__$Program3D_UniformMap(Lambda.array(vertexUniforms));
		this.__fragmentUniformMap = new openfl_display3D__$Program3D_UniformMap(Lambda.array(fragmentUniforms));
	}
	,__deleteShaders: function() {
		if(this.__programID != null) {
			this.__programID = null;
		}
		if(this.__vertexShaderID != null) {
			lime_graphics_opengl_GL.context.deleteShader(this.__vertexShaderID);
			openfl__$internal_stage3D_GLUtils.CheckGLError();
			this.__vertexShaderID = null;
		}
		if(this.__fragmentShaderID != null) {
			lime_graphics_opengl_GL.context.deleteShader(this.__fragmentShaderID);
			openfl__$internal_stage3D_GLUtils.CheckGLError();
			this.__fragmentShaderID = null;
		}
		if(this.__memUsage != 0) {
			this.__context.__statsDecrement(5);
			this.__context.__statsSubtract(10,this.__memUsage);
			this.__memUsage = 0;
		}
	}
	,__flush: function() {
		this.__vertexUniformMap.flush();
		this.__fragmentUniformMap.flush();
	}
	,__getSamplerState: function(sampler) {
		return this.__samplerStates.get(sampler);
	}
	,__markDirty: function(isVertex,index,count) {
		if(isVertex) {
			this.__vertexUniformMap.markDirty(index,count);
		} else {
			this.__fragmentUniformMap.markDirty(index,count);
		}
	}
	,__setPositionScale: function(positionScale) {
		if(this.__positionScale != null) {
			lime_graphics_opengl_GL.context.uniform4fv(this.__positionScale.location,positionScale);
			openfl__$internal_stage3D_GLUtils.CheckGLError();
		}
	}
	,__setSamplerState: function(sampler,state) {
		this.__samplerStates.set(sampler,state);
	}
	,__uploadFromGLSL: function(vertexShaderSource,fragmentShaderSource) {
		this.__deleteShaders();
		if(openfl_display3D_Program3D.verbose) {
			haxe_Log.trace(vertexShaderSource,{ fileName : "Program3D.hx", lineNumber : 278, className : "openfl.display3D.Program3D", methodName : "__uploadFromGLSL"});
			haxe_Log.trace(fragmentShaderSource,{ fileName : "Program3D.hx", lineNumber : 279, className : "openfl.display3D.Program3D", methodName : "__uploadFromGLSL"});
		}
		this.__vertexSource = vertexShaderSource;
		this.__fragmentSource = fragmentShaderSource;
		this.__vertexShaderID = lime_graphics_opengl_GL.context.createShader(35633);
		lime_graphics_opengl_GL.context.shaderSource(this.__vertexShaderID,vertexShaderSource);
		openfl__$internal_stage3D_GLUtils.CheckGLError();
		lime_graphics_opengl_GL.context.compileShader(this.__vertexShaderID);
		openfl__$internal_stage3D_GLUtils.CheckGLError();
		var shaderCompiled = lime_graphics_opengl_GL.context.getShaderParameter(this.__vertexShaderID,35713);
		openfl__$internal_stage3D_GLUtils.CheckGLError();
		if(shaderCompiled == 0) {
			var vertexInfoLog = lime_graphics_opengl_GL.context.getShaderInfoLog(this.__vertexShaderID);
			if(vertexInfoLog != null && vertexInfoLog.length != 0) {
				haxe_Log.trace("vertex: " + vertexInfoLog,{ fileName : "Program3D.hx", lineNumber : 303, className : "openfl.display3D.Program3D", methodName : "__uploadFromGLSL"});
			}
			throw new js__$Boot_HaxeError(new openfl_errors_Error("Error compiling vertex shader: " + vertexInfoLog));
		}
		this.__fragmentShaderID = lime_graphics_opengl_GL.context.createShader(35632);
		lime_graphics_opengl_GL.context.shaderSource(this.__fragmentShaderID,fragmentShaderSource);
		openfl__$internal_stage3D_GLUtils.CheckGLError();
		lime_graphics_opengl_GL.context.compileShader(this.__fragmentShaderID);
		openfl__$internal_stage3D_GLUtils.CheckGLError();
		if(lime_graphics_opengl_GL.context.getShaderParameter(this.__fragmentShaderID,35713) == 0) {
			var fragmentInfoLog = lime_graphics_opengl_GL.context.getShaderInfoLog(this.__fragmentShaderID);
			if(fragmentInfoLog != null && fragmentInfoLog.length != 0) {
				haxe_Log.trace("fragment: " + fragmentInfoLog,{ fileName : "Program3D.hx", lineNumber : 326, className : "openfl.display3D.Program3D", methodName : "__uploadFromGLSL"});
			}
			throw new js__$Boot_HaxeError(new openfl_errors_Error("Error compiling fragment shader: " + fragmentInfoLog));
		}
		this.__programID = lime_graphics_opengl_GL.context.createProgram();
		lime_graphics_opengl_GL.context.attachShader(this.__programID,this.__vertexShaderID);
		openfl__$internal_stage3D_GLUtils.CheckGLError();
		lime_graphics_opengl_GL.context.attachShader(this.__programID,this.__fragmentShaderID);
		openfl__$internal_stage3D_GLUtils.CheckGLError();
		var _g = 0;
		while(_g < 16) {
			var i = _g++;
			var name = "va" + i;
			if(vertexShaderSource.indexOf(" " + name) != -1) {
				lime_graphics_opengl_GL.context.bindAttribLocation(this.__programID,i,name);
			}
		}
		lime_graphics_opengl_GL.context.linkProgram(this.__programID);
		var infoLog = lime_graphics_opengl_GL.context.getProgramInfoLog(this.__programID);
		if(infoLog != null && infoLog.length != 0) {
			haxe_Log.trace("program: ${infoLog}",{ fileName : "Program3D.hx", lineNumber : 359, className : "openfl.display3D.Program3D", methodName : "__uploadFromGLSL"});
		}
		this.__buildUniformList();
		this.__memUsage = 1;
		this.__context.__statsIncrement(5);
		this.__context.__statsAdd(10,this.__memUsage);
	}
	,__use: function() {
		var program = this.__programID;
		lime_graphics_opengl_GL.__currentProgram = program;
		lime_graphics_opengl_GL.context.useProgram(program);
		openfl__$internal_stage3D_GLUtils.CheckGLError();
		this.__vertexUniformMap.markAllDirty();
		this.__fragmentUniformMap.markAllDirty();
		var _g_head = this.__samplerUniforms.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			if(val.regCount == 1) {
				lime_graphics_opengl_GL.context.uniform1i(val.location,val.regIndex);
				openfl__$internal_stage3D_GLUtils.CheckGLError();
			} else {
				throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError("!!! TODO: uniform location on webgl"));
			}
		}
		var _g_head1 = this.__alphaSamplerUniforms.h;
		while(_g_head1 != null) {
			var val1 = _g_head1.item;
			_g_head1 = _g_head1.next;
			if(val1.regCount == 1) {
				lime_graphics_opengl_GL.context.uniform1i(val1.location,val1.regIndex);
				openfl__$internal_stage3D_GLUtils.CheckGLError();
			} else {
				throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError("!!! TODO: uniform location on webgl"));
			}
		}
	}
	,__class__: openfl_display3D_Program3D
};
var openfl_display3D__$Program3D_Uniform = function() {
	this.isDirty = true;
};
$hxClasses["openfl.display3D._Program3D.Uniform"] = openfl_display3D__$Program3D_Uniform;
openfl_display3D__$Program3D_Uniform.__name__ = ["openfl","display3D","_Program3D","Uniform"];
openfl_display3D__$Program3D_Uniform.prototype = {
	name: null
	,location: null
	,type: null
	,size: null
	,regData: null
	,regIndex: null
	,regCount: null
	,isDirty: null
	,flush: function() {
		var index = this.regIndex * 4;
		switch(this.type) {
		case 35664:
			var location = this.location;
			var v = this.__getRegisters(index,this.regCount * 2);
			lime_graphics_opengl_GL.context.uniform2fv(location,v);
			break;
		case 35665:
			var location1 = this.location;
			var v1 = this.__getRegisters(index,this.regCount * 3);
			lime_graphics_opengl_GL.context.uniform3fv(location1,v1);
			break;
		case 35666:
			var location2 = this.location;
			var v2 = this.__getRegisters(index,this.regCount * 4);
			lime_graphics_opengl_GL.context.uniform4fv(location2,v2);
			break;
		case 35674:
			var location3 = this.location;
			var v3 = this.__getRegisters(index,this.size * 2 * 2);
			lime_graphics_opengl_GL.context.uniformMatrix2fv(location3,false,v3);
			break;
		case 35675:
			var location4 = this.location;
			var v4 = this.__getRegisters(index,this.size * 3 * 3);
			lime_graphics_opengl_GL.context.uniformMatrix3fv(location4,false,v4);
			break;
		case 35676:
			var location5 = this.location;
			var v5 = this.__getRegisters(index,this.size * 4 * 4);
			lime_graphics_opengl_GL.context.uniformMatrix4fv(location5,false,v5);
			break;
		default:
			var location6 = this.location;
			var v6 = this.__getRegisters(index,this.regCount * 4);
			lime_graphics_opengl_GL.context.uniform4fv(location6,v6);
		}
		openfl__$internal_stage3D_GLUtils.CheckGLError();
	}
	,__getRegisters: function(index,size) {
		return this.regData.subarray(index,index + size);
	}
	,__class__: openfl_display3D__$Program3D_Uniform
};
var openfl_display3D__$Program3D_UniformMap = function(list) {
	this.__uniforms = list;
	this.__uniforms.sort(function(a,b) {
		return Reflect.compare(a.regIndex,b.regIndex);
	});
	var total = 0;
	var _g = 0;
	var _g1 = this.__uniforms;
	while(_g < _g1.length) {
		var uniform = _g1[_g];
		++_g;
		if(uniform.regIndex + uniform.regCount > total) {
			total = uniform.regIndex + uniform.regCount;
		}
	}
	this.__registerLookup = openfl__$Vector_Vector_$Impl_$.toObjectVector(null,total);
	var _g2 = 0;
	var _g11 = this.__uniforms;
	while(_g2 < _g11.length) {
		var uniform1 = _g11[_g2];
		++_g2;
		var _g3 = 0;
		var _g21 = uniform1.regCount;
		while(_g3 < _g21) this.__registerLookup.set(uniform1.regIndex + _g3++,uniform1);
	}
	this.__anyDirty = this.__allDirty = true;
};
$hxClasses["openfl.display3D._Program3D.UniformMap"] = openfl_display3D__$Program3D_UniformMap;
openfl_display3D__$Program3D_UniformMap.__name__ = ["openfl","display3D","_Program3D","UniformMap"];
openfl_display3D__$Program3D_UniformMap.prototype = {
	__allDirty: null
	,__anyDirty: null
	,__registerLookup: null
	,__uniforms: null
	,flush: function() {
		if(this.__anyDirty) {
			var _g = 0;
			var _g1 = this.__uniforms;
			while(_g < _g1.length) {
				var uniform = _g1[_g];
				++_g;
				if(this.__allDirty || uniform.isDirty) {
					uniform.flush();
					uniform.isDirty = false;
				}
			}
			this.__anyDirty = this.__allDirty = false;
		}
	}
	,markAllDirty: function() {
		this.__allDirty = true;
		this.__anyDirty = true;
	}
	,markDirty: function(start,count) {
		if(this.__allDirty) {
			return;
		}
		var end = start + count;
		if(end > this.__registerLookup.get_length()) {
			end = this.__registerLookup.get_length();
		}
		var index = start;
		while(index < end) {
			var uniform = this.__registerLookup.get(index);
			if(uniform != null) {
				uniform.isDirty = true;
				this.__anyDirty = true;
				index = uniform.regIndex + uniform.regCount;
			} else {
				++index;
			}
		}
	}
	,__class__: openfl_display3D__$Program3D_UniformMap
};
var openfl_display3D_VertexBuffer3D = function(context3D,numVertices,dataPerVertex,bufferUsage) {
	this.__context = context3D;
	this.__numVertices = numVertices;
	this.__vertexSize = dataPerVertex;
	this.__id = lime_graphics_opengl_GL.context.createBuffer();
	openfl__$internal_stage3D_GLUtils.CheckGLError();
	this.__stride = this.__vertexSize * 4;
	this.__memoryUsage = 0;
	this.__usage = openfl_display3D__$Context3DBufferUsage_Context3DBufferUsage_$Impl_$.fromString(bufferUsage) == 0 ? 35048 : 35044;
	this.__context.__statsIncrement(2);
};
$hxClasses["openfl.display3D.VertexBuffer3D"] = openfl_display3D_VertexBuffer3D;
openfl_display3D_VertexBuffer3D.__name__ = ["openfl","display3D","VertexBuffer3D"];
openfl_display3D_VertexBuffer3D.prototype = {
	__context: null
	,__data: null
	,__id: null
	,__memoryUsage: null
	,__numVertices: null
	,__stride: null
	,__usage: null
	,__vertexSize: null
	,dispose: function() {
		lime_graphics_opengl_GL.context.deleteBuffer(this.__id);
		this.__context.__statsDecrement(2);
		this.__context.__statsSubtract(7,this.__memoryUsage);
		this.__memoryUsage = 0;
	}
	,uploadFromByteArray: function(data,byteArrayOffset,startVertex,numVertices) {
		var offset = byteArrayOffset + startVertex * this.__stride;
		var length = numVertices * this.__vertexSize;
		var buffer = openfl_utils__$ByteArray_ByteArray_$Impl_$.toArrayBuffer(data);
		var this1;
		if(buffer != null) {
			if(length == null) {
				this1 = new Float32Array(buffer,offset);
			} else {
				this1 = new Float32Array(buffer,offset,length);
			}
		} else {
			this1 = null;
		}
		this.uploadFromTypedArray(this1);
	}
	,uploadFromTypedArray: function(data) {
		lime_graphics_opengl_GL.context.bindBuffer(34962,this.__id);
		openfl__$internal_stage3D_GLUtils.CheckGLError();
		lime_graphics_opengl_GL.context.bufferData(34962,data,this.__usage);
		openfl__$internal_stage3D_GLUtils.CheckGLError();
		if(data.byteLength != this.__memoryUsage) {
			this.__context.__statsAdd(7,data.byteLength - this.__memoryUsage);
			this.__memoryUsage = data.byteLength;
		}
	}
	,uploadFromVector: function(data,startVertex,numVertices) {
		var start = startVertex * this.__vertexSize;
		var count = numVertices * this.__vertexSize;
		var length = start + count;
		var this1;
		if(count != null) {
			this1 = new Float32Array(count);
		} else {
			this1 = null;
		}
		var buffer = this1;
		var _g1 = start;
		while(_g1 < length) {
			var i = _g1++;
			buffer[i - start] = data.get(i);
		}
		this.uploadFromTypedArray(buffer);
	}
	,__class__: openfl_display3D_VertexBuffer3D
};
var openfl_display3D_textures_TextureBase = function(context,target) {
	this.__outputTextureMemoryUsage = false;
	openfl_events_EventDispatcher.call(this);
	this.__context = context;
	this.__textureTarget = target;
	this.__textureID = lime_graphics_opengl_GL.context.createTexture();
	this.__internalFormat = 6408;
	this.__format = 6408;
	this.__memoryUsage = 0;
	this.__compressedMemoryUsage = 0;
};
$hxClasses["openfl.display3D.textures.TextureBase"] = openfl_display3D_textures_TextureBase;
openfl_display3D_textures_TextureBase.__name__ = ["openfl","display3D","textures","TextureBase"];
openfl_display3D_textures_TextureBase.__super__ = openfl_events_EventDispatcher;
openfl_display3D_textures_TextureBase.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	__alphaTexture: null
	,__compressedMemoryUsage: null
	,__context: null
	,__format: null
	,__internalFormat: null
	,__memoryUsage: null
	,__outputTextureMemoryUsage: null
	,__samplerState: null
	,__textureID: null
	,__textureTarget: null
	,dispose: function() {
		if(this.__alphaTexture != null) {
			this.__alphaTexture.dispose();
		}
		lime_graphics_opengl_GL.context.deleteTexture(this.__textureID);
		if(this.__compressedMemoryUsage > 0) {
			this.__context.__statsDecrement(4);
			this.__context.__statsSubtract(9,this.__compressedMemoryUsage);
			this.__compressedMemoryUsage = 0;
		}
		if(this.__memoryUsage > 0) {
			this.__context.__statsDecrement(3);
			this.__context.__statsSubtract(8,this.__memoryUsage);
			this.__memoryUsage = 0;
		}
	}
	,__getImage: function(bitmapData) {
		var image = bitmapData.image;
		if(!bitmapData.__isValid || image == null) {
			return null;
		}
		lime_graphics_utils_ImageCanvasUtil.sync(image,false);
		if(image.type != lime_graphics_ImageType.DATA && !image.get_premultiplied()) {
			lime_graphics_opengl_GL.context.pixelStorei(37441,1);
		} else if(!image.get_premultiplied() && image.get_transparent()) {
			lime_graphics_opengl_GL.context.pixelStorei(37441,0);
			image = image.clone();
			image.set_premultiplied(true);
		}
		if(image.get_format() != 0) {
			image = image.clone();
			image.set_format(0);
			image.buffer.premultiplied = true;
		}
		return image;
	}
	,__getTexture: function() {
		return this.__textureID;
	}
	,__setSamplerState: function(state) {
		if(!state.equals(this.__samplerState)) {
			lime_graphics_opengl_GL.context.bindTexture(this.__textureTarget,this.__textureID);
			openfl__$internal_stage3D_GLUtils.CheckGLError();
			lime_graphics_opengl_GL.context.texParameteri(this.__textureTarget,10241,state.minFilter);
			openfl__$internal_stage3D_GLUtils.CheckGLError();
			lime_graphics_opengl_GL.context.texParameteri(this.__textureTarget,10240,state.magFilter);
			openfl__$internal_stage3D_GLUtils.CheckGLError();
			lime_graphics_opengl_GL.context.texParameteri(this.__textureTarget,10242,state.wrapModeS);
			openfl__$internal_stage3D_GLUtils.CheckGLError();
			lime_graphics_opengl_GL.context.texParameteri(this.__textureTarget,10243,state.wrapModeT);
			openfl__$internal_stage3D_GLUtils.CheckGLError();
			this.__samplerState = state;
		}
	}
	,__trackCompressedMemoryUsage: function(memory) {
		if(this.__compressedMemoryUsage == 0) {
			this.__context.__statsIncrement(4);
		}
		this.__compressedMemoryUsage += memory;
		this.__context.__statsAdd(9,memory);
		this.__trackMemoryUsage(memory);
	}
	,__trackMemoryUsage: function(memory) {
		if(this.__memoryUsage == 0) {
			this.__context.__statsIncrement(3);
		}
		this.__memoryUsage += memory;
		this.__context.__statsAdd(8,memory);
	}
	,__class__: openfl_display3D_textures_TextureBase
});
var openfl_display3D_textures_CubeTexture = function(context,size,format,optimizeForRenderToTexture,streamingLevels) {
	openfl_display3D_textures_TextureBase.call(this,context,34067);
	this.__size = size;
	this.__optimizeForRenderToTexture = optimizeForRenderToTexture;
	this.__streamingLevels = streamingLevels;
	this.__uploadedSides = 0;
};
$hxClasses["openfl.display3D.textures.CubeTexture"] = openfl_display3D_textures_CubeTexture;
openfl_display3D_textures_CubeTexture.__name__ = ["openfl","display3D","textures","CubeTexture"];
openfl_display3D_textures_CubeTexture.__super__ = openfl_display3D_textures_TextureBase;
openfl_display3D_textures_CubeTexture.prototype = $extend(openfl_display3D_textures_TextureBase.prototype,{
	__optimizeForRenderToTexture: null
	,__size: null
	,__streamingLevels: null
	,__uploadedSides: null
	,uploadCompressedTextureFromByteArray: function(data,byteArrayOffset,async) {
		if(async == null) {
			async = false;
		}
	}
	,uploadFromBitmapData: function(source,side,miplevel,generateMipmap) {
		if(generateMipmap == null) {
			generateMipmap = false;
		}
		if(miplevel == null) {
			miplevel = 0;
		}
		lime_graphics_opengl_GL.context.bindTexture(this.__textureTarget,this.__textureID);
		switch(side) {
		case 0:
			break;
		case 1:
			break;
		case 2:
			break;
		case 3:
			break;
		case 4:
			break;
		case 5:
			break;
		default:
			throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError());
		}
		this.__uploadedSides |= 1 << side;
		lime_graphics_opengl_GL.context.bindTexture(this.__textureTarget,null);
	}
	,uploadFromByteArray: function(data,byteArrayOffset,side,miplevel) {
		if(miplevel == null) {
			miplevel = 0;
		}
	}
	,__class__: openfl_display3D_textures_CubeTexture
});
var openfl_display3D_textures_RectangleTexture = function(context,width,height,format,optimizeForRenderToTexture) {
	openfl_display3D_textures_TextureBase.call(this,context,3553);
	this.__width = width;
	this.__height = height;
	this.__optimizeForRenderToTexture = optimizeForRenderToTexture;
	this.uploadFromTypedArray(null);
};
$hxClasses["openfl.display3D.textures.RectangleTexture"] = openfl_display3D_textures_RectangleTexture;
openfl_display3D_textures_RectangleTexture.__name__ = ["openfl","display3D","textures","RectangleTexture"];
openfl_display3D_textures_RectangleTexture.__super__ = openfl_display3D_textures_TextureBase;
openfl_display3D_textures_RectangleTexture.prototype = $extend(openfl_display3D_textures_TextureBase.prototype,{
	__height: null
	,__optimizeForRenderToTexture: null
	,__width: null
	,uploadFromBitmapData: function(source) {
		if(source == null) {
			return;
		}
		var image = this.__getImage(source);
		if(image == null) {
			return;
		}
		this.uploadFromTypedArray(image.get_data());
	}
	,uploadFromByteArray: function(data,byteArrayOffset) {
		if(byteArrayOffset == 0) {
			this.uploadFromTypedArray(data.b);
			return;
		}
		var buffer = openfl_utils__$ByteArray_ByteArray_$Impl_$.toArrayBuffer(data);
		var this1;
		if(buffer != null) {
			this1 = new Uint8Array(buffer,byteArrayOffset);
		} else {
			this1 = null;
		}
		this.uploadFromTypedArray(this1);
	}
	,uploadFromTypedArray: function(data) {
		lime_graphics_opengl_GL.context.bindTexture(this.__textureTarget,this.__textureID);
		openfl__$internal_stage3D_GLUtils.CheckGLError();
		lime_graphics_opengl_GL.context.texImage2D(this.__textureTarget,0,this.__internalFormat,this.__width,this.__height,0,this.__format,5121,data);
		openfl__$internal_stage3D_GLUtils.CheckGLError();
		lime_graphics_opengl_GL.context.bindTexture(this.__textureTarget,null);
		openfl__$internal_stage3D_GLUtils.CheckGLError();
		this.__trackMemoryUsage(this.__width * this.__height * 4);
	}
	,__class__: openfl_display3D_textures_RectangleTexture
});
var openfl_display3D_textures_Texture = function(context,width,height,format,optimizeForRenderToTexture,streamingLevels) {
	openfl_display3D_textures_TextureBase.call(this,context,3553);
	this.__width = width;
	this.__height = height;
	this.__optimizeForRenderToTexture = optimizeForRenderToTexture;
	this.__streamingLevels = streamingLevels;
};
$hxClasses["openfl.display3D.textures.Texture"] = openfl_display3D_textures_Texture;
openfl_display3D_textures_Texture.__name__ = ["openfl","display3D","textures","Texture"];
openfl_display3D_textures_Texture.__getATFVersion = function(data) {
	if(data.readUTFBytes(3) != "ATF") {
		throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError("ATF signature not found"));
	}
	var position = data.position;
	var version = 0;
	if(_$UInt_UInt_$Impl_$.gte(data.length - data.position,5)) {
		if(openfl_display3D_textures_Texture.__readUInt32(data) == 255) {
			version = data.readUnsignedByte();
		} else {
			data.position = position;
		}
	}
	return version;
};
openfl_display3D_textures_Texture.__readUInt24 = function(data) {
	var value = data.readUnsignedByte() << 16;
	value = value | data.readUnsignedByte() << 8;
	value = value | data.readUnsignedByte();
	return value;
};
openfl_display3D_textures_Texture.__readUInt32 = function(data) {
	var value = data.readUnsignedByte() << 24;
	value = value | data.readUnsignedByte() << 16;
	value = value | data.readUnsignedByte() << 8;
	value = value | data.readUnsignedByte();
	return value;
};
openfl_display3D_textures_Texture.__super__ = openfl_display3D_textures_TextureBase;
openfl_display3D_textures_Texture.prototype = $extend(openfl_display3D_textures_TextureBase.prototype,{
	__height: null
	,__optimizeForRenderToTexture: null
	,__streamingLevels: null
	,__width: null
	,uploadCompressedTextureFromByteArray: function(data,byteArrayOffset,async) {
		if(async == null) {
			async = false;
		}
		var _gthis = this;
		data.position = byteArrayOffset;
		var signature = data.readUTFBytes(3);
		data.position = byteArrayOffset;
		if(signature == "ATF") {
			lime_graphics_opengl_GL.context.bindTexture(this.__textureTarget,this.__textureID);
			openfl__$internal_stage3D_GLUtils.CheckGLError();
			this.__uploadATFTextureFromByteArray(data,byteArrayOffset);
			lime_graphics_opengl_GL.context.bindTexture(this.__textureTarget,null);
			openfl__$internal_stage3D_GLUtils.CheckGLError();
		} else {
			lime_graphics_opengl_GL.context.bindTexture(this.__textureTarget,null);
			openfl__$internal_stage3D_GLUtils.CheckGLError();
		}
		if(async) {
			haxe_Timer.delay(function() {
				_gthis.dispatchEvent(new openfl_events_Event("textureReady"));
			},1);
		}
	}
	,uploadFromBitmapData: function(source,miplevel,generateMipmap) {
		if(generateMipmap == null) {
			generateMipmap = false;
		}
		if(miplevel == null) {
			miplevel = 0;
		}
		if(source == null) {
			return;
		}
		var width = this.__width >> miplevel;
		var height = this.__height >> miplevel;
		if(source.width != width || source.height != height) {
			var copy = new openfl_display_BitmapData(width,height,true,0);
			copy.draw(source);
			source = copy;
		}
		this.uploadFromTypedArray(this.__getImage(source).get_data(),miplevel);
	}
	,uploadFromByteArray: function(data,byteArrayOffset,miplevel) {
		if(miplevel == null) {
			miplevel = 0;
		}
		if(byteArrayOffset == 0) {
			this.uploadFromTypedArray(data.b);
			return;
		}
		var buffer = openfl_utils__$ByteArray_ByteArray_$Impl_$.toArrayBuffer(data);
		var this1;
		if(buffer != null) {
			this1 = new Uint8Array(buffer,byteArrayOffset);
		} else {
			this1 = null;
		}
		this.uploadFromTypedArray(this1,miplevel);
	}
	,uploadFromTypedArray: function(data,miplevel) {
		if(miplevel == null) {
			miplevel = 0;
		}
		if(data == null) {
			return;
		}
		var width = this.__width >> miplevel;
		var height = this.__height >> miplevel;
		lime_graphics_opengl_GL.context.bindTexture(this.__textureTarget,this.__textureID);
		openfl__$internal_stage3D_GLUtils.CheckGLError();
		lime_graphics_opengl_GL.context.texImage2D(this.__textureTarget,miplevel,this.__internalFormat,width,height,0,this.__format,5121,data);
		openfl__$internal_stage3D_GLUtils.CheckGLError();
		lime_graphics_opengl_GL.context.bindTexture(this.__textureTarget,null);
		openfl__$internal_stage3D_GLUtils.CheckGLError();
		this.__trackMemoryUsage(width * height * 4);
	}
	,__uploadATFTextureFromByteArray: function(data,byteArrayOffset) {
		data.position = byteArrayOffset;
		var version = openfl_display3D_textures_Texture.__getATFVersion(data);
		if(js_Boot.__cast(byteArrayOffset + (version == 0 ? openfl_display3D_textures_Texture.__readUInt24(data) : openfl_display3D_textures_Texture.__readUInt32(data)) , Int) > openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(data)) {
			throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError("ATF length exceeds byte array length"));
		}
		if(data.readUnsignedByte() >> 7 != 0) {
			throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError("ATF Cube maps are not supported"));
		}
		var width = 1 << data.readUnsignedByte();
		var height = 1 << data.readUnsignedByte();
		if(width != this.__width || height != this.__height) {
			throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError("ATF width and height dont match"));
		}
		var mipCount = data.readUnsignedByte();
		var _g1 = 0;
		while(_g1 < mipCount) {
			++_g1;
			var _g2 = 0;
			while(_g2 < 3) {
				_g2++;
				var blockLength = version == 0 ? openfl_display3D_textures_Texture.__readUInt24(data) : openfl_display3D_textures_Texture.__readUInt32(data);
				data.position = data.position + blockLength;
			}
		}
	}
	,__class__: openfl_display3D_textures_Texture
});
var openfl_display3D_textures_VideoTexture = function(context) {
	openfl_display3D_textures_TextureBase.call(this,context,3553);
};
$hxClasses["openfl.display3D.textures.VideoTexture"] = openfl_display3D_textures_VideoTexture;
openfl_display3D_textures_VideoTexture.__name__ = ["openfl","display3D","textures","VideoTexture"];
openfl_display3D_textures_VideoTexture.__super__ = openfl_display3D_textures_TextureBase;
openfl_display3D_textures_VideoTexture.prototype = $extend(openfl_display3D_textures_TextureBase.prototype,{
	videoHeight: null
	,videoWidth: null
	,__netStream: null
	,attachNetStream: function(netStream) {
		var _gthis = this;
		this.__netStream = netStream;
		if(this.__netStream.__video.readyState == 4) {
			haxe_Timer.delay(function() {
				_gthis.__textureReady();
			},0);
		} else {
			this.__netStream.__video.addEventListener("canplay",function(_) {
				_gthis.__textureReady();
			},false);
		}
	}
	,__getTexture: function() {
		if(!this.__netStream.__video.paused) {
			lime_graphics_opengl_GL.context.bindTexture(this.__textureTarget,this.__textureID);
			openfl__$internal_stage3D_GLUtils.CheckGLError();
			lime_graphics_opengl_GL.context.texImage2D(3553,0,6408,6408,5121,this.__netStream.__video);
			openfl__$internal_stage3D_GLUtils.CheckGLError();
		}
		return this.__textureID;
	}
	,__textureReady: function() {
		this.videoWidth = this.__netStream.__video.videoWidth;
		this.videoHeight = this.__netStream.__video.videoHeight;
		this.dispatchEvent(new openfl_events_Event("textureReady"));
	}
	,__class__: openfl_display3D_textures_VideoTexture
});
var openfl_errors_Error = function(message,id) {
	if(id == null) {
		id = 0;
	}
	if(message == null) {
		message = "";
	}
	this.message = message;
	this.errorID = id;
	this.name = "Error";
};
$hxClasses["openfl.errors.Error"] = openfl_errors_Error;
openfl_errors_Error.__name__ = ["openfl","errors","Error"];
openfl_errors_Error.prototype = {
	errorID: null
	,message: null
	,name: null
	,getStackTrace: function() {
		return haxe_CallStack.toString(haxe_CallStack.exceptionStack());
	}
	,toString: function() {
		if(this.message != null) {
			return this.message;
		} else {
			return "Error";
		}
	}
	,__class__: openfl_errors_Error
};
var openfl_errors_ArgumentError = function(message) {
	if(message == null) {
		message = "";
	}
	openfl_errors_Error.call(this,message);
	this.name = "ArgumentError";
};
$hxClasses["openfl.errors.ArgumentError"] = openfl_errors_ArgumentError;
openfl_errors_ArgumentError.__name__ = ["openfl","errors","ArgumentError"];
openfl_errors_ArgumentError.__super__ = openfl_errors_Error;
openfl_errors_ArgumentError.prototype = $extend(openfl_errors_Error.prototype,{
	__class__: openfl_errors_ArgumentError
});
var openfl_errors_IOError = function(message) {
	if(message == null) {
		message = "";
	}
	openfl_errors_Error.call(this,message);
	this.name = "IOError";
};
$hxClasses["openfl.errors.IOError"] = openfl_errors_IOError;
openfl_errors_IOError.__name__ = ["openfl","errors","IOError"];
openfl_errors_IOError.__super__ = openfl_errors_Error;
openfl_errors_IOError.prototype = $extend(openfl_errors_Error.prototype,{
	__class__: openfl_errors_IOError
});
var openfl_errors_EOFError = function() {
	openfl_errors_IOError.call(this,"End of file was encountered");
	this.name = "EOFError";
	this.errorID = 2030;
};
$hxClasses["openfl.errors.EOFError"] = openfl_errors_EOFError;
openfl_errors_EOFError.__name__ = ["openfl","errors","EOFError"];
openfl_errors_EOFError.__super__ = openfl_errors_IOError;
openfl_errors_EOFError.prototype = $extend(openfl_errors_IOError.prototype,{
	__class__: openfl_errors_EOFError
});
var openfl_errors_IllegalOperationError = function(message) {
	if(message == null) {
		message = "";
	}
	openfl_errors_Error.call(this,message,0);
	this.name = "IllegalOperationError";
};
$hxClasses["openfl.errors.IllegalOperationError"] = openfl_errors_IllegalOperationError;
openfl_errors_IllegalOperationError.__name__ = ["openfl","errors","IllegalOperationError"];
openfl_errors_IllegalOperationError.__super__ = openfl_errors_Error;
openfl_errors_IllegalOperationError.prototype = $extend(openfl_errors_Error.prototype,{
	__class__: openfl_errors_IllegalOperationError
});
var openfl_errors_RangeError = function(message) {
	if(message == null) {
		message = "";
	}
	openfl_errors_Error.call(this,message,0);
	this.name = "RangeError";
};
$hxClasses["openfl.errors.RangeError"] = openfl_errors_RangeError;
openfl_errors_RangeError.__name__ = ["openfl","errors","RangeError"];
openfl_errors_RangeError.__super__ = openfl_errors_Error;
openfl_errors_RangeError.prototype = $extend(openfl_errors_Error.prototype,{
	__class__: openfl_errors_RangeError
});
var openfl_errors_TypeError = function(message) {
	if(message == null) {
		message = "";
	}
	openfl_errors_Error.call(this,message,0);
	this.name = "TypeError";
};
$hxClasses["openfl.errors.TypeError"] = openfl_errors_TypeError;
openfl_errors_TypeError.__name__ = ["openfl","errors","TypeError"];
openfl_errors_TypeError.__super__ = openfl_errors_Error;
openfl_errors_TypeError.prototype = $extend(openfl_errors_Error.prototype,{
	__class__: openfl_errors_TypeError
});
var openfl_events_ActivityEvent = function(type,bubbles,cancelable,activating) {
	if(activating == null) {
		activating = false;
	}
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = false;
	}
	openfl_events_Event.call(this,type,bubbles,cancelable);
	this.activating = activating;
};
$hxClasses["openfl.events.ActivityEvent"] = openfl_events_ActivityEvent;
openfl_events_ActivityEvent.__name__ = ["openfl","events","ActivityEvent"];
openfl_events_ActivityEvent.__super__ = openfl_events_Event;
openfl_events_ActivityEvent.prototype = $extend(openfl_events_Event.prototype,{
	activating: null
	,clone: function() {
		var event = new openfl_events_ActivityEvent(this.type,this.bubbles,this.cancelable,this.activating);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("ActivityEvent",["type","bubbles","cancelable","activating"]);
	}
	,__class__: openfl_events_ActivityEvent
});
var openfl_events_TextEvent = function(type,bubbles,cancelable,text) {
	if(text == null) {
		text = "";
	}
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = false;
	}
	openfl_events_Event.call(this,type,bubbles,cancelable);
	this.text = text;
};
$hxClasses["openfl.events.TextEvent"] = openfl_events_TextEvent;
openfl_events_TextEvent.__name__ = ["openfl","events","TextEvent"];
openfl_events_TextEvent.__super__ = openfl_events_Event;
openfl_events_TextEvent.prototype = $extend(openfl_events_Event.prototype,{
	text: null
	,clone: function() {
		var event = new openfl_events_TextEvent(this.type,this.bubbles,this.cancelable,this.text);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("TextEvent",["type","bubbles","cancelable","text"]);
	}
	,__class__: openfl_events_TextEvent
});
var openfl_events_ErrorEvent = function(type,bubbles,cancelable,text,id) {
	if(id == null) {
		id = 0;
	}
	if(text == null) {
		text = "";
	}
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = false;
	}
	openfl_events_TextEvent.call(this,type,bubbles,cancelable,text);
	this.errorID = id;
};
$hxClasses["openfl.events.ErrorEvent"] = openfl_events_ErrorEvent;
openfl_events_ErrorEvent.__name__ = ["openfl","events","ErrorEvent"];
openfl_events_ErrorEvent.__super__ = openfl_events_TextEvent;
openfl_events_ErrorEvent.prototype = $extend(openfl_events_TextEvent.prototype,{
	errorID: null
	,clone: function() {
		var event = new openfl_events_ErrorEvent(this.type,this.bubbles,this.cancelable,this.text,this.errorID);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("ErrorEvent",["type","bubbles","cancelable","text","errorID"]);
	}
	,__class__: openfl_events_ErrorEvent
});
var openfl_events__$EventDispatcher_DispatchIterator = function(list) {
	this.list = list;
	this.index = list.length;
};
$hxClasses["openfl.events._EventDispatcher.DispatchIterator"] = openfl_events__$EventDispatcher_DispatchIterator;
openfl_events__$EventDispatcher_DispatchIterator.__name__ = ["openfl","events","_EventDispatcher","DispatchIterator"];
openfl_events__$EventDispatcher_DispatchIterator.prototype = {
	active: null
	,index: null
	,isCopy: null
	,list: null
	,copy: function() {
		if(this.index < this.list.length && !this.isCopy) {
			this.list = this.list.slice();
			this.isCopy = true;
		}
	}
	,hasNext: function() {
		if(this.index < this.list.length) {
			return true;
		} else {
			this.active = false;
			return false;
		}
	}
	,next: function() {
		return this.list[this.index++];
	}
	,remove: function(listener,listIndex) {
		if(this.active) {
			if(!this.isCopy) {
				if(listIndex <= this.index) {
					this.index--;
				}
			} else {
				var _g1 = this.index;
				var _g = this.list.length;
				while(_g1 < _g) {
					var i = _g1++;
					if(this.list[i] == listener) {
						this.list.splice(i,1);
						break;
					}
				}
			}
		}
	}
	,reset: function(list) {
		this.list = list;
		this.active = true;
		this.index = 0;
	}
	,__class__: openfl_events__$EventDispatcher_DispatchIterator
};
var openfl_events__$EventDispatcher_Listener = function(callback,useCapture,priority) {
	this.callback = callback;
	this.useCapture = useCapture;
	this.priority = priority;
};
$hxClasses["openfl.events._EventDispatcher.Listener"] = openfl_events__$EventDispatcher_Listener;
openfl_events__$EventDispatcher_Listener.__name__ = ["openfl","events","_EventDispatcher","Listener"];
openfl_events__$EventDispatcher_Listener.prototype = {
	callback: null
	,priority: null
	,useCapture: null
	,match: function(callback,useCapture) {
		if(Reflect.compareMethods(this.callback,callback)) {
			return this.useCapture == useCapture;
		} else {
			return false;
		}
	}
	,__class__: openfl_events__$EventDispatcher_Listener
};
var openfl_events_FocusEvent = function(type,bubbles,cancelable,relatedObject,shiftKey,keyCode) {
	if(keyCode == null) {
		keyCode = 0;
	}
	if(shiftKey == null) {
		shiftKey = false;
	}
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = false;
	}
	openfl_events_Event.call(this,type,bubbles,cancelable);
	this.keyCode = keyCode;
	this.shiftKey = shiftKey;
	this.relatedObject = relatedObject;
};
$hxClasses["openfl.events.FocusEvent"] = openfl_events_FocusEvent;
openfl_events_FocusEvent.__name__ = ["openfl","events","FocusEvent"];
openfl_events_FocusEvent.__super__ = openfl_events_Event;
openfl_events_FocusEvent.prototype = $extend(openfl_events_Event.prototype,{
	keyCode: null
	,relatedObject: null
	,shiftKey: null
	,clone: function() {
		var event = new openfl_events_FocusEvent(this.type,this.bubbles,this.cancelable,this.relatedObject,this.shiftKey,this.keyCode);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("FocusEvent",["type","bubbles","cancelable","relatedObject","shiftKey","keyCode"]);
	}
	,__class__: openfl_events_FocusEvent
});
var openfl_events_FullScreenEvent = function(type,bubbles,cancelable,fullScreen,interactive) {
	if(interactive == null) {
		interactive = false;
	}
	if(fullScreen == null) {
		fullScreen = false;
	}
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = false;
	}
	openfl_events_ActivityEvent.call(this,type,bubbles,cancelable);
	this.fullScreen = fullScreen;
	this.interactive = interactive;
};
$hxClasses["openfl.events.FullScreenEvent"] = openfl_events_FullScreenEvent;
openfl_events_FullScreenEvent.__name__ = ["openfl","events","FullScreenEvent"];
openfl_events_FullScreenEvent.__super__ = openfl_events_ActivityEvent;
openfl_events_FullScreenEvent.prototype = $extend(openfl_events_ActivityEvent.prototype,{
	fullScreen: null
	,interactive: null
	,clone: function() {
		var event = new openfl_events_FullScreenEvent(this.type,this.bubbles,this.cancelable,this.fullScreen,this.interactive);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("FullscreenEvent",["type","bubbles","cancelable","fullscreen","interactive"]);
	}
	,__class__: openfl_events_FullScreenEvent
});
var openfl_events_GameInputEvent = function(type,bubbles,cancelable,device) {
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = true;
	}
	openfl_events_Event.call(this,type,bubbles,cancelable);
	this.device = device;
};
$hxClasses["openfl.events.GameInputEvent"] = openfl_events_GameInputEvent;
openfl_events_GameInputEvent.__name__ = ["openfl","events","GameInputEvent"];
openfl_events_GameInputEvent.__super__ = openfl_events_Event;
openfl_events_GameInputEvent.prototype = $extend(openfl_events_Event.prototype,{
	device: null
	,clone: function() {
		var event = new openfl_events_GameInputEvent(this.type,this.bubbles,this.cancelable,this.device);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("GameInputEvent",["type","bubbles","cancelable","device"]);
	}
	,__class__: openfl_events_GameInputEvent
});
var openfl_events_HTTPStatusEvent = function(type,bubbles,cancelable,status,redirected) {
	if(redirected == null) {
		redirected = false;
	}
	if(status == null) {
		status = 0;
	}
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = false;
	}
	this.status = status;
	this.redirected = redirected;
	openfl_events_Event.call(this,type,bubbles,cancelable);
};
$hxClasses["openfl.events.HTTPStatusEvent"] = openfl_events_HTTPStatusEvent;
openfl_events_HTTPStatusEvent.__name__ = ["openfl","events","HTTPStatusEvent"];
openfl_events_HTTPStatusEvent.__super__ = openfl_events_Event;
openfl_events_HTTPStatusEvent.prototype = $extend(openfl_events_Event.prototype,{
	redirected: null
	,responseHeaders: null
	,responseURL: null
	,status: null
	,clone: function() {
		var event = new openfl_events_HTTPStatusEvent(this.type,this.bubbles,null,this.status,this.redirected);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("HTTPStatusEvent",["type","bubbles","cancelable","status","redirected"]);
	}
	,__class__: openfl_events_HTTPStatusEvent
});
var openfl_events_IOErrorEvent = function(type,bubbles,cancelable,text,id) {
	if(id == null) {
		id = 0;
	}
	if(text == null) {
		text = "";
	}
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = true;
	}
	openfl_events_ErrorEvent.call(this,type,bubbles,cancelable,text,id);
};
$hxClasses["openfl.events.IOErrorEvent"] = openfl_events_IOErrorEvent;
openfl_events_IOErrorEvent.__name__ = ["openfl","events","IOErrorEvent"];
openfl_events_IOErrorEvent.__super__ = openfl_events_ErrorEvent;
openfl_events_IOErrorEvent.prototype = $extend(openfl_events_ErrorEvent.prototype,{
	clone: function() {
		var event = new openfl_events_IOErrorEvent(this.type,this.bubbles,this.cancelable,this.text,this.errorID);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("IOErrorEvent",["type","bubbles","cancelable","text","errorID"]);
	}
	,__class__: openfl_events_IOErrorEvent
});
var openfl_events_KeyboardEvent = function(type,bubbles,cancelable,charCodeValue,keyCodeValue,keyLocationValue,ctrlKeyValue,altKeyValue,shiftKeyValue,controlKeyValue,commandKeyValue) {
	if(commandKeyValue == null) {
		commandKeyValue = false;
	}
	if(controlKeyValue == null) {
		controlKeyValue = false;
	}
	if(shiftKeyValue == null) {
		shiftKeyValue = false;
	}
	if(altKeyValue == null) {
		altKeyValue = false;
	}
	if(ctrlKeyValue == null) {
		ctrlKeyValue = false;
	}
	if(keyCodeValue == null) {
		keyCodeValue = 0;
	}
	if(charCodeValue == null) {
		charCodeValue = 0;
	}
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = false;
	}
	openfl_events_Event.call(this,type,bubbles,cancelable);
	this.charCode = charCodeValue;
	this.keyCode = keyCodeValue;
	this.keyLocation = keyLocationValue != null ? keyLocationValue : 0;
	this.ctrlKey = ctrlKeyValue;
	this.altKey = altKeyValue;
	this.shiftKey = shiftKeyValue;
	this.controlKey = controlKeyValue;
	this.commandKey = commandKeyValue;
};
$hxClasses["openfl.events.KeyboardEvent"] = openfl_events_KeyboardEvent;
openfl_events_KeyboardEvent.__name__ = ["openfl","events","KeyboardEvent"];
openfl_events_KeyboardEvent.__super__ = openfl_events_Event;
openfl_events_KeyboardEvent.prototype = $extend(openfl_events_Event.prototype,{
	altKey: null
	,charCode: null
	,ctrlKey: null
	,commandKey: null
	,controlKey: null
	,keyCode: null
	,keyLocation: null
	,shiftKey: null
	,clone: function() {
		var event = new openfl_events_KeyboardEvent(this.type,this.bubbles,this.cancelable,this.charCode,this.keyCode,this.keyLocation,this.ctrlKey,this.altKey,this.shiftKey,this.controlKey,this.commandKey);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("KeyboardEvent",["type","bubbles","cancelable","charCode","keyCode","keyLocation","ctrlKey","altKey","shiftKey"]);
	}
	,__class__: openfl_events_KeyboardEvent
});
var openfl_events_MouseEvent = function(type,bubbles,cancelable,localX,localY,relatedObject,ctrlKey,altKey,shiftKey,buttonDown,delta,commandKey,clickCount) {
	if(clickCount == null) {
		clickCount = 0;
	}
	if(commandKey == null) {
		commandKey = false;
	}
	if(delta == null) {
		delta = 0;
	}
	if(buttonDown == null) {
		buttonDown = false;
	}
	if(shiftKey == null) {
		shiftKey = false;
	}
	if(altKey == null) {
		altKey = false;
	}
	if(ctrlKey == null) {
		ctrlKey = false;
	}
	if(localY == null) {
		localY = 0;
	}
	if(localX == null) {
		localX = 0;
	}
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = true;
	}
	openfl_events_Event.call(this,type,bubbles,cancelable);
	this.shiftKey = shiftKey;
	this.altKey = altKey;
	this.ctrlKey = ctrlKey;
	this.bubbles = bubbles;
	this.relatedObject = relatedObject;
	this.delta = delta;
	this.localX = localX;
	this.localY = localY;
	this.buttonDown = buttonDown;
	this.commandKey = commandKey;
	this.clickCount = clickCount;
	this.stageX = NaN;
	this.stageY = NaN;
};
$hxClasses["openfl.events.MouseEvent"] = openfl_events_MouseEvent;
openfl_events_MouseEvent.__name__ = ["openfl","events","MouseEvent"];
openfl_events_MouseEvent.__create = function(type,button,stageX,stageY,local,target,delta) {
	if(delta == null) {
		delta = 0;
	}
	switch(type) {
	case "mouseDown":
		openfl_events_MouseEvent.__buttonDown = true;
		break;
	case "mouseUp":
		openfl_events_MouseEvent.__buttonDown = false;
		break;
	default:
	}
	var event = new openfl_events_MouseEvent(type,true,false,local.x,local.y,null,openfl_events_MouseEvent.__ctrlKey,openfl_events_MouseEvent.__altKey,openfl_events_MouseEvent.__shiftKey,openfl_events_MouseEvent.__buttonDown,delta,openfl_events_MouseEvent.__commandKey);
	event.stageX = stageX;
	event.stageY = stageY;
	event.target = target;
	return event;
};
openfl_events_MouseEvent.__super__ = openfl_events_Event;
openfl_events_MouseEvent.prototype = $extend(openfl_events_Event.prototype,{
	altKey: null
	,buttonDown: null
	,commandKey: null
	,clickCount: null
	,ctrlKey: null
	,delta: null
	,localX: null
	,localY: null
	,relatedObject: null
	,shiftKey: null
	,stageX: null
	,stageY: null
	,clone: function() {
		var event = new openfl_events_MouseEvent(this.type,this.bubbles,this.cancelable,this.localX,this.localY,this.relatedObject,this.ctrlKey,this.altKey,this.shiftKey,this.buttonDown,this.delta,this.commandKey,this.clickCount);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("MouseEvent",["type","bubbles","cancelable","localX","localY","relatedObject","ctrlKey","altKey","shiftKey","buttonDown","delta"]);
	}
	,updateAfterEvent: function() {
	}
	,__class__: openfl_events_MouseEvent
});
var openfl_events_NetStatusEvent = function(type,bubbles,cancelable,info) {
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = false;
	}
	this.info = info;
	openfl_events_Event.call(this,type,bubbles,cancelable);
};
$hxClasses["openfl.events.NetStatusEvent"] = openfl_events_NetStatusEvent;
openfl_events_NetStatusEvent.__name__ = ["openfl","events","NetStatusEvent"];
openfl_events_NetStatusEvent.__super__ = openfl_events_Event;
openfl_events_NetStatusEvent.prototype = $extend(openfl_events_Event.prototype,{
	info: null
	,clone: function() {
		var event = new openfl_events_NetStatusEvent(this.type,this.bubbles,this.cancelable,this.info);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("NetStatusEvent",["type","bubbles","cancelable","info"]);
	}
	,__class__: openfl_events_NetStatusEvent
});
var openfl_events_ProgressEvent = function(type,bubbles,cancelable,bytesLoaded,bytesTotal) {
	if(bytesTotal == null) {
		bytesTotal = 0;
	}
	if(bytesLoaded == null) {
		bytesLoaded = 0;
	}
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = false;
	}
	openfl_events_Event.call(this,type,bubbles,cancelable);
	this.bytesLoaded = bytesLoaded;
	this.bytesTotal = bytesTotal;
};
$hxClasses["openfl.events.ProgressEvent"] = openfl_events_ProgressEvent;
openfl_events_ProgressEvent.__name__ = ["openfl","events","ProgressEvent"];
openfl_events_ProgressEvent.__super__ = openfl_events_Event;
openfl_events_ProgressEvent.prototype = $extend(openfl_events_Event.prototype,{
	bytesLoaded: null
	,bytesTotal: null
	,clone: function() {
		var event = new openfl_events_ProgressEvent(this.type,this.bubbles,this.cancelable,this.bytesLoaded,this.bytesTotal);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("ProgressEvent",["type","bubbles","cancelable","bytesLoaded","bytesTotal"]);
	}
	,__class__: openfl_events_ProgressEvent
});
var openfl_events_SecurityErrorEvent = function(type,bubbles,cancelable,text,id) {
	if(id == null) {
		id = 0;
	}
	if(text == null) {
		text = "";
	}
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = false;
	}
	openfl_events_ErrorEvent.call(this,type,bubbles,cancelable,text,id);
};
$hxClasses["openfl.events.SecurityErrorEvent"] = openfl_events_SecurityErrorEvent;
openfl_events_SecurityErrorEvent.__name__ = ["openfl","events","SecurityErrorEvent"];
openfl_events_SecurityErrorEvent.__super__ = openfl_events_ErrorEvent;
openfl_events_SecurityErrorEvent.prototype = $extend(openfl_events_ErrorEvent.prototype,{
	clone: function() {
		var event = new openfl_events_SecurityErrorEvent(this.type,this.bubbles,this.cancelable,this.text,this.errorID);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("SecurityErrorEvent",["type","bubbles","cancelable","text","errorID"]);
	}
	,__class__: openfl_events_SecurityErrorEvent
});
var openfl_events_TimerEvent = function(type,bubbles,cancelable) {
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = false;
	}
	openfl_events_Event.call(this,type,bubbles,cancelable);
};
$hxClasses["openfl.events.TimerEvent"] = openfl_events_TimerEvent;
openfl_events_TimerEvent.__name__ = ["openfl","events","TimerEvent"];
openfl_events_TimerEvent.__super__ = openfl_events_Event;
openfl_events_TimerEvent.prototype = $extend(openfl_events_Event.prototype,{
	clone: function() {
		var event = new openfl_events_TimerEvent(this.type,this.bubbles,this.cancelable);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("TimerEvent",["type","bubbles","cancelable"]);
	}
	,updateAfterEvent: function() {
	}
	,__class__: openfl_events_TimerEvent
});
var openfl_events_TouchEvent = function(type,bubbles,cancelable,touchPointID,isPrimaryTouchPoint,localX,localY,sizeX,sizeY,pressure,relatedObject,ctrlKey,altKey,shiftKey,commandKey,controlKey,timestamp,touchIntent,samples,isTouchPointCanceled) {
	if(isTouchPointCanceled == null) {
		isTouchPointCanceled = false;
	}
	if(timestamp == null) {
		timestamp = 0;
	}
	if(controlKey == null) {
		controlKey = false;
	}
	if(commandKey == null) {
		commandKey = false;
	}
	if(shiftKey == null) {
		shiftKey = false;
	}
	if(altKey == null) {
		altKey = false;
	}
	if(ctrlKey == null) {
		ctrlKey = false;
	}
	if(pressure == null) {
		pressure = 0;
	}
	if(sizeY == null) {
		sizeY = 0;
	}
	if(sizeX == null) {
		sizeX = 0;
	}
	if(localY == null) {
		localY = 0;
	}
	if(localX == null) {
		localX = 0;
	}
	if(isPrimaryTouchPoint == null) {
		isPrimaryTouchPoint = false;
	}
	if(touchPointID == null) {
		touchPointID = 0;
	}
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = true;
	}
	openfl_events_Event.call(this,type,bubbles,cancelable);
	this.touchPointID = touchPointID;
	this.isPrimaryTouchPoint = isPrimaryTouchPoint;
	this.localX = localX;
	this.localY = localY;
	this.sizeX = sizeX;
	this.sizeY = sizeY;
	this.pressure = pressure;
	this.relatedObject = relatedObject;
	this.ctrlKey = ctrlKey;
	this.altKey = altKey;
	this.shiftKey = shiftKey;
	this.commandKey = commandKey;
	this.controlKey = controlKey;
	this.stageX = NaN;
	this.stageY = NaN;
};
$hxClasses["openfl.events.TouchEvent"] = openfl_events_TouchEvent;
openfl_events_TouchEvent.__name__ = ["openfl","events","TouchEvent"];
openfl_events_TouchEvent.__create = function(type,touch,stageX,stageY,local,target) {
	var evt = new openfl_events_TouchEvent(type,true,false,0,true,local.x,local.y,1,1,1);
	evt.stageX = stageX;
	evt.stageY = stageY;
	evt.target = target;
	return evt;
};
openfl_events_TouchEvent.__super__ = openfl_events_Event;
openfl_events_TouchEvent.prototype = $extend(openfl_events_Event.prototype,{
	altKey: null
	,commandKey: null
	,controlKey: null
	,ctrlKey: null
	,delta: null
	,isPrimaryTouchPoint: null
	,localX: null
	,localY: null
	,pressure: null
	,relatedObject: null
	,shiftKey: null
	,sizeX: null
	,sizeY: null
	,stageX: null
	,stageY: null
	,touchPointID: null
	,clone: function() {
		var event = new openfl_events_TouchEvent(this.type,this.bubbles,this.cancelable,this.touchPointID,this.isPrimaryTouchPoint,this.localX,this.localY,this.sizeX,this.sizeY,this.pressure,this.relatedObject,this.ctrlKey,this.altKey,this.shiftKey,this.commandKey,this.controlKey);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("TouchEvent",["type","bubbles","cancelable","touchPointID","isPrimaryTouchPoint","localX","localY","sizeX","sizeY","pressure","relatedObject","ctrlKey","altKey","shiftKey","commandKey","controlKey"]);
	}
	,updateAfterEvent: function() {
	}
	,__class__: openfl_events_TouchEvent
});
var openfl_filters_BitmapFilter = function() {
};
$hxClasses["openfl.filters.BitmapFilter"] = openfl_filters_BitmapFilter;
openfl_filters_BitmapFilter.__name__ = ["openfl","filters","BitmapFilter"];
openfl_filters_BitmapFilter.prototype = {
	clone: function() {
		return new openfl_filters_BitmapFilter();
	}
	,__applyFilter: function(sourceBitmapData,destBitmapData,sourceRect,destPoint) {
	}
	,__initShader: function(renderSession) {
		return renderSession.shaderManager.defaultShader;
	}
	,__class__: openfl_filters_BitmapFilter
};
var openfl_filters__$BitmapFilterType_BitmapFilterType_$Impl_$ = {};
$hxClasses["openfl.filters._BitmapFilterType.BitmapFilterType_Impl_"] = openfl_filters__$BitmapFilterType_BitmapFilterType_$Impl_$;
openfl_filters__$BitmapFilterType_BitmapFilterType_$Impl_$.__name__ = ["openfl","filters","_BitmapFilterType","BitmapFilterType_Impl_"];
openfl_filters__$BitmapFilterType_BitmapFilterType_$Impl_$.fromString = function(value) {
	switch(value) {
	case "full":
		return 0;
	case "inner":
		return 1;
	case "outer":
		return 2;
	default:
		return null;
	}
};
openfl_filters__$BitmapFilterType_BitmapFilterType_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "full";
	case 1:
		return "inner";
	case 2:
		return "outer";
	default:
		return null;
	}
};
var openfl_filters_BlurFilter = function(blurX,blurY,quality) {
	if(quality == null) {
		quality = 1;
	}
	if(blurY == null) {
		blurY = 4;
	}
	if(blurX == null) {
		blurX = 4;
	}
	openfl_filters_BitmapFilter.call(this);
	this.blurX = blurX;
	this.blurY = blurY;
	this.set_quality(quality);
};
$hxClasses["openfl.filters.BlurFilter"] = openfl_filters_BlurFilter;
openfl_filters_BlurFilter.__name__ = ["openfl","filters","BlurFilter"];
openfl_filters_BlurFilter.__super__ = openfl_filters_BitmapFilter;
openfl_filters_BlurFilter.prototype = $extend(openfl_filters_BitmapFilter.prototype,{
	blurX: null
	,blurY: null
	,quality: null
	,clone: function() {
		return new openfl_filters_BlurFilter(this.blurX,this.blurY,this.quality);
	}
	,set_quality: function(value) {
		return this.quality = value;
	}
	,__class__: openfl_filters_BlurFilter
	,__properties__: {set_quality:"set_quality"}
});
var openfl_filters__$ColorMatrixFilter_ColorMatrixShader = function() {
	if(this.__glFragmentSource == null) {
		this.__glFragmentSource = "varying float vAlpha;\n\t\tvarying vec2 vTexCoord;\n\t\tuniform sampler2D uImage0;\n\t\t\n\t\tuniform mat4 uMultipliers;\n\t\tuniform vec4 uOffsets;\n\t\t\n\t\tvoid main(void) {\n\t\t\t\n\t\t\tvec4 color = texture2D (uImage0, vTexCoord);\n\t\t\t\n\t\t\tif (color.a == 0.0) {\n\t\t\t\t\n\t\t\t\tgl_FragColor = vec4 (0.0, 0.0, 0.0, 0.0);\n\t\t\t\t\n\t\t\t} else {\n\t\t\t\t\n\t\t\t\tcolor = vec4 (color.rgb / color.a, color.a);\n\t\t\t\tcolor = uOffsets + color * uMultipliers;\n\t\t\t\t\n\t\t\t\tgl_FragColor = vec4 (color.rgb * color.a * vAlpha, color.a * vAlpha);\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t}";
	}
	openfl_display_Shader.call(this);
	this.get_data().uMultipliers.value = [1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1];
	this.get_data().uOffsets.value = [0,0,0,0];
};
$hxClasses["openfl.filters._ColorMatrixFilter.ColorMatrixShader"] = openfl_filters__$ColorMatrixFilter_ColorMatrixShader;
openfl_filters__$ColorMatrixFilter_ColorMatrixShader.__name__ = ["openfl","filters","_ColorMatrixFilter","ColorMatrixShader"];
openfl_filters__$ColorMatrixFilter_ColorMatrixShader.__super__ = openfl_display_Shader;
openfl_filters__$ColorMatrixFilter_ColorMatrixShader.prototype = $extend(openfl_display_Shader.prototype,{
	init: function(matrix) {
		var multipliers = this.get_data().uMultipliers.value;
		var offsets = this.get_data().uOffsets.value;
		multipliers[0] = matrix[0];
		multipliers[1] = matrix[1];
		multipliers[2] = matrix[2];
		multipliers[3] = matrix[3];
		multipliers[4] = matrix[5];
		multipliers[5] = matrix[6];
		multipliers[6] = matrix[7];
		multipliers[7] = matrix[8];
		multipliers[8] = matrix[10];
		multipliers[9] = matrix[11];
		multipliers[10] = matrix[12];
		multipliers[11] = matrix[13];
		multipliers[12] = matrix[15];
		multipliers[13] = matrix[16];
		multipliers[14] = matrix[17];
		multipliers[15] = matrix[18];
		offsets[0] = matrix[4] / 255.0;
		offsets[1] = matrix[9] / 255.0;
		offsets[2] = matrix[14] / 255.0;
		offsets[3] = matrix[19] / 255.0;
	}
	,__class__: openfl_filters__$ColorMatrixFilter_ColorMatrixShader
});
var openfl_filters_ColorMatrixFilter = function(matrix) {
	openfl_filters_BitmapFilter.call(this);
	this.set_matrix(matrix);
};
$hxClasses["openfl.filters.ColorMatrixFilter"] = openfl_filters_ColorMatrixFilter;
openfl_filters_ColorMatrixFilter.__name__ = ["openfl","filters","ColorMatrixFilter"];
openfl_filters_ColorMatrixFilter.__super__ = openfl_filters_BitmapFilter;
openfl_filters_ColorMatrixFilter.prototype = $extend(openfl_filters_BitmapFilter.prototype,{
	matrix: null
	,clone: function() {
		return new openfl_filters_ColorMatrixFilter(this.matrix);
	}
	,__applyFilter: function(sourceBitmapData,destBitmapData,sourceRect,destPoint) {
		lime_graphics_utils_ImageCanvasUtil.convertToCanvas(sourceBitmapData.image);
		lime_graphics_utils_ImageCanvasUtil.createImageData(sourceBitmapData.image);
		lime_graphics_utils_ImageCanvasUtil.convertToCanvas(destBitmapData.image);
		lime_graphics_utils_ImageCanvasUtil.createImageData(destBitmapData.image);
		var source = sourceBitmapData.image.get_data();
		var target = destBitmapData.image.get_data();
		var offsetX = destPoint.x - sourceRect.x | 0;
		var offsetY = destPoint.y - sourceRect.y | 0;
		var sourceStride = sourceBitmapData.width * 4;
		var targetStride = destBitmapData.width * 4;
		var sourceOffset;
		var targetOffset;
		var _g1 = sourceRect.y | 0;
		var _g = sourceRect.height | 0;
		while(_g1 < _g) {
			var row = _g1++;
			var _g3 = sourceRect.x | 0;
			var _g2 = sourceRect.width | 0;
			while(_g3 < _g2) {
				var column = _g3++;
				sourceOffset = row * sourceStride + column * 4;
				targetOffset = (row + offsetX) * targetStride + (column + offsetY) * 4;
				var srcR = source[sourceOffset];
				var srcG = source[sourceOffset + 1];
				var srcB = source[sourceOffset + 2];
				var srcA = source[sourceOffset + 3];
				target[targetOffset] = _$UInt_UInt_$Impl_$.toFloat(srcR) * this.matrix[0] + _$UInt_UInt_$Impl_$.toFloat(srcG) * this.matrix[1] + _$UInt_UInt_$Impl_$.toFloat(srcB) * this.matrix[2] + _$UInt_UInt_$Impl_$.toFloat(srcA) * this.matrix[3] + this.matrix[4] | 0;
				target[targetOffset + 1] = _$UInt_UInt_$Impl_$.toFloat(srcR) * this.matrix[5] + _$UInt_UInt_$Impl_$.toFloat(srcG) * this.matrix[6] + _$UInt_UInt_$Impl_$.toFloat(srcB) * this.matrix[7] + _$UInt_UInt_$Impl_$.toFloat(srcA) * this.matrix[8] + this.matrix[9] | 0;
				target[targetOffset + 2] = _$UInt_UInt_$Impl_$.toFloat(srcR) * this.matrix[10] + _$UInt_UInt_$Impl_$.toFloat(srcG) * this.matrix[11] + _$UInt_UInt_$Impl_$.toFloat(srcB) * this.matrix[12] + _$UInt_UInt_$Impl_$.toFloat(srcA) * this.matrix[13] + this.matrix[14] | 0;
				target[targetOffset + 3] = _$UInt_UInt_$Impl_$.toFloat(srcR) * this.matrix[15] + _$UInt_UInt_$Impl_$.toFloat(srcG) * this.matrix[16] + _$UInt_UInt_$Impl_$.toFloat(srcB) * this.matrix[17] + _$UInt_UInt_$Impl_$.toFloat(srcA) * this.matrix[18] + this.matrix[19] | 0;
			}
		}
		destBitmapData.image.dirty = true;
	}
	,__initShader: function(renderSession) {
		openfl_filters_ColorMatrixFilter.__colorMatrixShader.init(this.matrix);
		return openfl_filters_ColorMatrixFilter.__colorMatrixShader;
	}
	,set_matrix: function(value) {
		if(value == null) {
			value = [1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1,0];
		}
		return this.matrix = value;
	}
	,__class__: openfl_filters_ColorMatrixFilter
	,__properties__: {set_matrix:"set_matrix"}
});
var openfl_filters__$ConvolutionFilter_ConvolutionShader = function() {
	if(this.__glFragmentSource == null) {
		this.__glFragmentSource = "varying vec2 vBlurCoords[9];\n\t\tvarying float vAlpha;\n\t\tvarying vec2 vTexCoord;\n\t\t\n\t\tuniform sampler2D uImage0;\n\t\t\n\t\tuniform float uBias;\n\t\tuniform mat3 uConvoMatrix;\n\t\tuniform float uDivisor;\n\t\tuniform bool uPreserveAlpha;\n\t\t\n\t\tvoid main(void) {\n\t\t\t\n\t\t\tvec4 tc = texture2D (uImage0, vBlurCoords[4]);\n\t\t\tvec4 c = vec4 (0.0);\n\t\t\t\n\t\t\tc += texture2D (uImage0, vBlurCoords[0]) * uConvoMatrix[0][0];\n\t\t\tc += texture2D (uImage0, vBlurCoords[1]) * uConvoMatrix[0][1];\n\t\t\tc += texture2D (uImage0, vBlurCoords[2]) * uConvoMatrix[0][2];\n\t\t\t\n\t\t\tc += texture2D (uImage0, vBlurCoords[3]) * uConvoMatrix[1][0];\n\t\t\tc += tc * uConvoMatrix[1][1];\n\t\t\tc += texture2D (uImage0, vBlurCoords[5]) * uConvoMatrix[1][2];\n\t\t\t\n\t\t\tc += texture2D (uImage0, vBlurCoords[6]) * uConvoMatrix[2][0];\n\t\t\tc += texture2D (uImage0, vBlurCoords[7]) * uConvoMatrix[2][1];\n\t\t\tc += texture2D (uImage0, vBlurCoords[8]) * uConvoMatrix[2][2];\n\t\t\t\n\t\t\tif (uDivisor > 0) {\n\t\t\t\t\n\t\t\t\tc /= vec4 (uDivisor, uDivisor, uDivisor, uDivisor);\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\tc += vec4 (uBias, uBias, uBias, uBias);\n\t\t\t\n\t\t\tif (uPreserveAlpha) {\n\t\t\t\t\n\t\t\t\tc.a = tc.a;\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\tgl_FragColor = c * vAlpha;\n\t\t\t\n\t\t}";
	}
	if(this.__glVertexSource == null) {
		this.__glVertexSource = "attribute float aAlpha;\n\t\tattribute vec4 aPosition;\n\t\tattribute vec2 aTexCoord;\n\t\t\n\t\tvarying vec2 vBlurCoords[9];\n\t\tvarying float vAlpha;\n\t\tvarying vec2 vTexCoord;\n\t\t\n\t\tuniform mat4 uMatrix;\n\t\tuniform vec2 uTextureSize;\n\t\t\n\t\tvoid main(void) {\n\t\t\t\n\t\t\tvec2 r = vec2 (1.0, 1.0) / uTextureSize;\n\t\t\tvec2 t = aTexCoord;\n\t\t\t\n\t\t\tvBlurCoords[0] = t + r * vec2 (-1.0, -1.0);\n\t\t\tvBlurCoords[1] = t + r * vec2 (0.0, -1.0);\n\t\t\tvBlurCoords[2] = t + r * vec2 (1.0, -1.0);\n\t\t\t\n\t\t\tvBlurCoords[3] = t + r * vec2 (-1.0, 0.0);\n\t\t\tvBlurCoords[4] = t;\n\t\t\tvBlurCoords[5] = t + r * vec2 (1.0, 0.0);\n\t\t\t\n\t\t\tvBlurCoords[6] = t + r * vec2 (-1.0, 1.0);\n\t\t\tvBlurCoords[7] = t + r * vec2 (0.0, 1.0);\n\t\t\tvBlurCoords[8] = t + r * vec2 (1.0, 1.0);\n\t\t\t\n\t\t\tvAlpha = aAlpha;\n\t\t\tvTexCoord = aTexCoord;\n\t\t\tgl_Position = uMatrix * aPosition;\n\t\t\t\n\t\t}";
	}
	openfl_display_Shader.call(this);
	this.get_data().uDivisor.value = [1];
	this.get_data().uBias.value = [0];
	this.get_data().uPreserveAlpha.value = [true];
};
$hxClasses["openfl.filters._ConvolutionFilter.ConvolutionShader"] = openfl_filters__$ConvolutionFilter_ConvolutionShader;
openfl_filters__$ConvolutionFilter_ConvolutionShader.__name__ = ["openfl","filters","_ConvolutionFilter","ConvolutionShader"];
openfl_filters__$ConvolutionFilter_ConvolutionShader.__super__ = openfl_display_Shader;
openfl_filters__$ConvolutionFilter_ConvolutionShader.prototype = $extend(openfl_display_Shader.prototype,{
	__update: function() {
		var tmp = this.get_data().uImage0.input.width;
		this.get_data().uTextureSize.value = [tmp,this.get_data().uImage0.input.height];
		openfl_display_Shader.prototype.__update.call(this);
	}
	,__class__: openfl_filters__$ConvolutionFilter_ConvolutionShader
});
var openfl_filters_ConvolutionFilter = function(matrixX,matrixY,matrix,divisor,bias,preserveAlpha,clamp,color,alpha) {
	if(alpha == null) {
		alpha = 0.0;
	}
	if(color == null) {
		color = 0;
	}
	if(clamp == null) {
		clamp = true;
	}
	if(preserveAlpha == null) {
		preserveAlpha = true;
	}
	if(bias == null) {
		bias = 0.0;
	}
	if(divisor == null) {
		divisor = 1.0;
	}
	if(matrixY == null) {
		matrixY = 0;
	}
	if(matrixX == null) {
		matrixX = 0;
	}
	openfl_filters_BitmapFilter.call(this);
	this.matrixX = matrixX;
	this.matrixY = matrixY;
	this.set_matrix(matrix);
	this.divisor = divisor;
	this.bias = bias;
	this.preserveAlpha = preserveAlpha;
	this.clamp = clamp;
	this.color = color;
	this.alpha = alpha;
};
$hxClasses["openfl.filters.ConvolutionFilter"] = openfl_filters_ConvolutionFilter;
openfl_filters_ConvolutionFilter.__name__ = ["openfl","filters","ConvolutionFilter"];
openfl_filters_ConvolutionFilter.__super__ = openfl_filters_BitmapFilter;
openfl_filters_ConvolutionFilter.prototype = $extend(openfl_filters_BitmapFilter.prototype,{
	alpha: null
	,bias: null
	,clamp: null
	,color: null
	,divisor: null
	,matrix: null
	,matrixX: null
	,matrixY: null
	,preserveAlpha: null
	,clone: function() {
		return new openfl_filters_ConvolutionFilter(this.matrixX,this.matrixY,this.matrix,this.divisor,this.bias,this.preserveAlpha,this.clamp,this.color,this.alpha);
	}
	,__initShader: function(renderSession) {
		var data = openfl_filters_ConvolutionFilter.__convolutionShader.get_data();
		data.uConvoMatrix.value = this.matrix;
		data.uDivisor.value[0] = this.divisor;
		data.uBias.value[0] = this.bias;
		data.uPreserveAlpha.value[0] = this.preserveAlpha;
		return openfl_filters_ConvolutionFilter.__convolutionShader;
	}
	,set_matrix: function(v) {
		if(v == null) {
			v = [0,0,0,0,1,0,0,0,0];
		}
		if(v.length != 9) {
			throw new js__$Boot_HaxeError("Only a 3x3 matrix is supported");
		}
		return this.matrix = v;
	}
	,__class__: openfl_filters_ConvolutionFilter
	,__properties__: {set_matrix:"set_matrix"}
});
var openfl_filters_DropShadowFilter = function(distance,angle,color,alpha,blurX,blurY,strength,quality,inner,knockout,hideObject) {
	if(hideObject == null) {
		hideObject = false;
	}
	if(knockout == null) {
		knockout = false;
	}
	if(inner == null) {
		inner = false;
	}
	if(quality == null) {
		quality = 1;
	}
	if(strength == null) {
		strength = 1;
	}
	if(blurY == null) {
		blurY = 4;
	}
	if(blurX == null) {
		blurX = 4;
	}
	if(alpha == null) {
		alpha = 1;
	}
	if(color == null) {
		color = 0;
	}
	if(angle == null) {
		angle = 45;
	}
	if(distance == null) {
		distance = 4;
	}
	openfl_filters_BitmapFilter.call(this);
	this.distance = distance;
	this.angle = angle;
	this.color = color;
	this.alpha = alpha;
	this.blurX = blurX;
	this.blurY = blurY;
	this.strength = strength;
	this.set_quality(quality);
	this.inner = inner;
	this.set_knockout(knockout);
	this.set_hideObject(hideObject);
};
$hxClasses["openfl.filters.DropShadowFilter"] = openfl_filters_DropShadowFilter;
openfl_filters_DropShadowFilter.__name__ = ["openfl","filters","DropShadowFilter"];
openfl_filters_DropShadowFilter.__super__ = openfl_filters_BitmapFilter;
openfl_filters_DropShadowFilter.prototype = $extend(openfl_filters_BitmapFilter.prototype,{
	alpha: null
	,angle: null
	,blurX: null
	,blurY: null
	,color: null
	,distance: null
	,hideObject: null
	,inner: null
	,knockout: null
	,quality: null
	,strength: null
	,clone: function() {
		return new openfl_filters_DropShadowFilter(this.distance,this.angle,this.color,this.alpha,this.blurX,this.blurY,this.strength,this.quality,this.inner,this.knockout,this.hideObject);
	}
	,set_knockout: function(value) {
		return this.knockout = value;
	}
	,set_hideObject: function(value) {
		return this.hideObject = value;
	}
	,set_quality: function(value) {
		return this.quality = value;
	}
	,__class__: openfl_filters_DropShadowFilter
	,__properties__: {set_quality:"set_quality",set_knockout:"set_knockout",set_hideObject:"set_hideObject"}
});
var openfl_filters_GlowFilter = function(color,alpha,blurX,blurY,strength,quality,inner,knockout) {
	if(knockout == null) {
		knockout = false;
	}
	if(inner == null) {
		inner = false;
	}
	if(quality == null) {
		quality = 1;
	}
	if(strength == null) {
		strength = 2;
	}
	if(blurY == null) {
		blurY = 6;
	}
	if(blurX == null) {
		blurX = 6;
	}
	if(alpha == null) {
		alpha = 1;
	}
	if(color == null) {
		color = 16711680;
	}
	openfl_filters_BitmapFilter.call(this);
	this.color = color;
	this.alpha = alpha;
	this.blurX = blurX;
	this.blurY = blurY;
	this.strength = strength;
	this.set_quality(quality);
	this.inner = inner;
	this.set_knockout(knockout);
};
$hxClasses["openfl.filters.GlowFilter"] = openfl_filters_GlowFilter;
openfl_filters_GlowFilter.__name__ = ["openfl","filters","GlowFilter"];
openfl_filters_GlowFilter.__super__ = openfl_filters_BitmapFilter;
openfl_filters_GlowFilter.prototype = $extend(openfl_filters_BitmapFilter.prototype,{
	alpha: null
	,blurX: null
	,blurY: null
	,color: null
	,inner: null
	,knockout: null
	,quality: null
	,strength: null
	,clone: function() {
		return new openfl_filters_GlowFilter(this.color,this.alpha,this.blurX,this.blurY,this.strength,this.quality,this.inner,this.knockout);
	}
	,set_knockout: function(value) {
		return this.knockout = value;
	}
	,set_quality: function(value) {
		return this.quality = value;
	}
	,__class__: openfl_filters_GlowFilter
	,__properties__: {set_quality:"set_quality",set_knockout:"set_knockout"}
});
var openfl_filters__$ColorMatrixShader_$ShaderData = function(byteArray) {
	openfl_display_ShaderData.call(this,byteArray);
};
$hxClasses["openfl.filters._ColorMatrixShader_ShaderData"] = openfl_filters__$ColorMatrixShader_$ShaderData;
openfl_filters__$ColorMatrixShader_$ShaderData.__name__ = ["openfl","filters","_ColorMatrixShader_ShaderData"];
openfl_filters__$ColorMatrixShader_$ShaderData.__super__ = openfl_display_ShaderData;
openfl_filters__$ColorMatrixShader_$ShaderData.prototype = $extend(openfl_display_ShaderData.prototype,{
	uMultipliers: null
	,uOffsets: null
	,__class__: openfl_filters__$ColorMatrixShader_$ShaderData
});
var openfl_filters__$ConvolutionShader_$ShaderData = function(byteArray) {
	openfl_display_ShaderData.call(this,byteArray);
};
$hxClasses["openfl.filters._ConvolutionShader_ShaderData"] = openfl_filters__$ConvolutionShader_$ShaderData;
openfl_filters__$ConvolutionShader_$ShaderData.__name__ = ["openfl","filters","_ConvolutionShader_ShaderData"];
openfl_filters__$ConvolutionShader_$ShaderData.__super__ = openfl_display_ShaderData;
openfl_filters__$ConvolutionShader_$ShaderData.prototype = $extend(openfl_display_ShaderData.prototype,{
	uTextureSize: null
	,uBias: null
	,uConvoMatrix: null
	,uDivisor: null
	,uPreserveAlpha: null
	,__class__: openfl_filters__$ConvolutionShader_$ShaderData
});
var openfl_geom_Matrix3D = function(v) {
	if(v != null && v.get_length() == 16) {
		this.rawData = v;
	} else {
		var a = [1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0];
		var vector = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
		var _g1 = 0;
		var _g = a.length;
		while(_g1 < _g) {
			var i = _g1++;
			vector.set(i,a[i]);
		}
		this.rawData = vector;
	}
};
$hxClasses["openfl.geom.Matrix3D"] = openfl_geom_Matrix3D;
openfl_geom_Matrix3D.__name__ = ["openfl","geom","Matrix3D"];
openfl_geom_Matrix3D.create2D = function(x,y,scale,rotation) {
	if(rotation == null) {
		rotation = 0;
	}
	if(scale == null) {
		scale = 1;
	}
	var theta = rotation * Math.PI / 180.0;
	var c = Math.cos(theta);
	var s = Math.sin(theta);
	var a = [c * scale,-s * scale,0,0,s * scale,c * scale,0,0,0,0,1,0,x,y,0,1];
	var vector = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
	var _g1 = 0;
	var _g = a.length;
	while(_g1 < _g) {
		var i = _g1++;
		vector.set(i,a[i]);
	}
	return new openfl_geom_Matrix3D(vector);
};
openfl_geom_Matrix3D.createABCD = function(a,b,c,d,tx,ty) {
	var a1 = [a,b,0,0,c,d,0,0,0,0,1,0,tx,ty,0,1];
	var vector = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
	var _g1 = 0;
	var _g = a1.length;
	while(_g1 < _g) {
		var i = _g1++;
		vector.set(i,a1[i]);
	}
	return new openfl_geom_Matrix3D(vector);
};
openfl_geom_Matrix3D.createOrtho = function(x0,x1,y0,y1,zNear,zFar) {
	var sx = 1.0 / (x1 - x0);
	var sy = 1.0 / (y1 - y0);
	var sz = 1.0 / (zFar - zNear);
	var a = [2.0 * sx,0,0,0,0,2.0 * sy,0,0,0,0,-2.0 * sz,0,-(x0 + x1) * sx,-(y0 + y1) * sy,-(zNear + zFar) * sz,1];
	var vector = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
	var _g1 = 0;
	var _g = a.length;
	while(_g1 < _g) {
		var i = _g1++;
		vector.set(i,a[i]);
	}
	return new openfl_geom_Matrix3D(vector);
};
openfl_geom_Matrix3D.interpolate = function(thisMat,toMat,percent) {
	var m = new openfl_geom_Matrix3D();
	var _g = 0;
	while(_g < 16) {
		var i = _g++;
		m.rawData.set(i,thisMat.rawData.get(i) + (toMat.rawData.get(i) - thisMat.rawData.get(i)) * percent);
	}
	return m;
};
openfl_geom_Matrix3D.__getAxisRotation = function(x,y,z,degrees) {
	var m = new openfl_geom_Matrix3D();
	var a1 = new openfl_geom_Vector3D(x,y,z);
	var rad = -degrees * (Math.PI / 180);
	var c = Math.cos(rad);
	var s = Math.sin(rad);
	var t = 1.0 - c;
	m.rawData.set(0,c + a1.x * a1.x * t);
	m.rawData.set(5,c + a1.y * a1.y * t);
	m.rawData.set(10,c + a1.z * a1.z * t);
	var tmp1 = a1.x * a1.y * t;
	var tmp2 = a1.z * s;
	m.rawData.set(4,tmp1 + tmp2);
	m.rawData.set(1,tmp1 - tmp2);
	tmp1 = a1.x * a1.z * t;
	tmp2 = a1.y * s;
	m.rawData.set(8,tmp1 - tmp2);
	m.rawData.set(2,tmp1 + tmp2);
	tmp1 = a1.y * a1.z * t;
	tmp2 = a1.x * s;
	m.rawData.set(9,tmp1 + tmp2);
	m.rawData.set(6,tmp1 - tmp2);
	return m;
};
openfl_geom_Matrix3D.prototype = {
	rawData: null
	,append: function(lhs) {
		var m111 = this.rawData.get(0);
		var m121 = this.rawData.get(4);
		var m131 = this.rawData.get(8);
		var m141 = this.rawData.get(12);
		var m112 = this.rawData.get(1);
		var m122 = this.rawData.get(5);
		var m132 = this.rawData.get(9);
		var m142 = this.rawData.get(13);
		var m113 = this.rawData.get(2);
		var m123 = this.rawData.get(6);
		var m133 = this.rawData.get(10);
		var m143 = this.rawData.get(14);
		var m114 = this.rawData.get(3);
		var m124 = this.rawData.get(7);
		var m134 = this.rawData.get(11);
		var m144 = this.rawData.get(15);
		var m211 = lhs.rawData.get(0);
		var m221 = lhs.rawData.get(4);
		var m231 = lhs.rawData.get(8);
		var m241 = lhs.rawData.get(12);
		var m212 = lhs.rawData.get(1);
		var m222 = lhs.rawData.get(5);
		var m232 = lhs.rawData.get(9);
		var m242 = lhs.rawData.get(13);
		var m213 = lhs.rawData.get(2);
		var m223 = lhs.rawData.get(6);
		var m233 = lhs.rawData.get(10);
		var m243 = lhs.rawData.get(14);
		var m214 = lhs.rawData.get(3);
		var m224 = lhs.rawData.get(7);
		var m234 = lhs.rawData.get(11);
		var m244 = lhs.rawData.get(15);
		this.rawData.set(0,m111 * m211 + m112 * m221 + m113 * m231 + m114 * m241);
		this.rawData.set(1,m111 * m212 + m112 * m222 + m113 * m232 + m114 * m242);
		this.rawData.set(2,m111 * m213 + m112 * m223 + m113 * m233 + m114 * m243);
		this.rawData.set(3,m111 * m214 + m112 * m224 + m113 * m234 + m114 * m244);
		this.rawData.set(4,m121 * m211 + m122 * m221 + m123 * m231 + m124 * m241);
		this.rawData.set(5,m121 * m212 + m122 * m222 + m123 * m232 + m124 * m242);
		this.rawData.set(6,m121 * m213 + m122 * m223 + m123 * m233 + m124 * m243);
		this.rawData.set(7,m121 * m214 + m122 * m224 + m123 * m234 + m124 * m244);
		this.rawData.set(8,m131 * m211 + m132 * m221 + m133 * m231 + m134 * m241);
		this.rawData.set(9,m131 * m212 + m132 * m222 + m133 * m232 + m134 * m242);
		this.rawData.set(10,m131 * m213 + m132 * m223 + m133 * m233 + m134 * m243);
		this.rawData.set(11,m131 * m214 + m132 * m224 + m133 * m234 + m134 * m244);
		this.rawData.set(12,m141 * m211 + m142 * m221 + m143 * m231 + m144 * m241);
		this.rawData.set(13,m141 * m212 + m142 * m222 + m143 * m232 + m144 * m242);
		this.rawData.set(14,m141 * m213 + m142 * m223 + m143 * m233 + m144 * m243);
		this.rawData.set(15,m141 * m214 + m142 * m224 + m143 * m234 + m144 * m244);
	}
	,appendRotation: function(degrees,axis,pivotPoint) {
		var tx;
		var ty;
		var tz = 0;
		ty = tz;
		tx = ty;
		if(pivotPoint != null) {
			tx = pivotPoint.x;
			ty = pivotPoint.y;
			tz = pivotPoint.z;
		}
		var radian = degrees * Math.PI / 180;
		var cos = Math.cos(radian);
		var sin = Math.sin(radian);
		var x = axis.x;
		var y = axis.y;
		var z = axis.z;
		var x2 = x * x;
		var y2 = y * y;
		var z2 = z * z;
		var ls = x2 + y2 + z2;
		if(ls != 0) {
			var l = Math.sqrt(ls);
			x /= l;
			y /= l;
			z /= l;
			x2 /= ls;
			y2 /= ls;
			z2 /= ls;
		}
		var ccos = 1 - cos;
		var m = new openfl_geom_Matrix3D();
		var d = m.rawData;
		d.set(0,x2 + (y2 + z2) * cos);
		d.set(1,x * y * ccos + z * sin);
		d.set(2,x * z * ccos - y * sin);
		d.set(4,x * y * ccos - z * sin);
		d.set(5,y2 + (x2 + z2) * cos);
		d.set(6,y * z * ccos + x * sin);
		d.set(8,x * z * ccos + y * sin);
		d.set(9,y * z * ccos - x * sin);
		d.set(10,z2 + (x2 + y2) * cos);
		d.set(12,(tx * (y2 + z2) - x * (ty * y + tz * z)) * ccos + (ty * z - tz * y) * sin);
		d.set(13,(ty * (x2 + z2) - y * (tx * x + tz * z)) * ccos + (tz * x - tx * z) * sin);
		d.set(14,(tz * (x2 + y2) - z * (tx * x + ty * y)) * ccos + (tx * y - ty * x) * sin);
		this.append(m);
	}
	,appendScale: function(xScale,yScale,zScale) {
		var a = [xScale,0.0,0.0,0.0,0.0,yScale,0.0,0.0,0.0,0.0,zScale,0.0,0.0,0.0,0.0,1.0];
		var vector = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
		var _g1 = 0;
		var _g = a.length;
		while(_g1 < _g) {
			var i = _g1++;
			vector.set(i,a[i]);
		}
		this.append(new openfl_geom_Matrix3D(vector));
	}
	,appendTranslation: function(x,y,z) {
		this.rawData.set(12,this.rawData.get(12) + x);
		this.rawData.set(13,this.rawData.get(13) + y);
		this.rawData.set(14,this.rawData.get(14) + z);
	}
	,clone: function() {
		return new openfl_geom_Matrix3D(this.rawData.copy());
	}
	,copyColumnFrom: function(column,vector3D) {
		switch(column) {
		case 0:
			this.rawData.set(0,vector3D.x);
			this.rawData.set(1,vector3D.y);
			this.rawData.set(2,vector3D.z);
			this.rawData.set(3,vector3D.w);
			break;
		case 1:
			this.rawData.set(4,vector3D.x);
			this.rawData.set(5,vector3D.y);
			this.rawData.set(6,vector3D.z);
			this.rawData.set(7,vector3D.w);
			break;
		case 2:
			this.rawData.set(8,vector3D.x);
			this.rawData.set(9,vector3D.y);
			this.rawData.set(10,vector3D.z);
			this.rawData.set(11,vector3D.w);
			break;
		case 3:
			this.rawData.set(12,vector3D.x);
			this.rawData.set(13,vector3D.y);
			this.rawData.set(14,vector3D.z);
			this.rawData.set(15,vector3D.w);
			break;
		default:
		}
	}
	,copyColumnTo: function(column,vector3D) {
		switch(column) {
		case 0:
			vector3D.x = this.rawData.get(0);
			vector3D.y = this.rawData.get(1);
			vector3D.z = this.rawData.get(2);
			vector3D.w = this.rawData.get(3);
			break;
		case 1:
			vector3D.x = this.rawData.get(4);
			vector3D.y = this.rawData.get(5);
			vector3D.z = this.rawData.get(6);
			vector3D.w = this.rawData.get(7);
			break;
		case 2:
			vector3D.x = this.rawData.get(8);
			vector3D.y = this.rawData.get(9);
			vector3D.z = this.rawData.get(10);
			vector3D.w = this.rawData.get(11);
			break;
		case 3:
			vector3D.x = this.rawData.get(12);
			vector3D.y = this.rawData.get(13);
			vector3D.z = this.rawData.get(14);
			vector3D.w = this.rawData.get(15);
			break;
		default:
		}
	}
	,copyFrom: function(other) {
		this.rawData = other.rawData.copy();
	}
	,copyRawDataFrom: function(vector,index,transpose) {
		if(transpose == null) {
			transpose = false;
		}
		if(index == null) {
			index = 0;
		}
		if(transpose) {
			this.transpose();
		}
		var _g1 = 0;
		var _g = vector.get_length() - index;
		while(_g1 < _g) {
			var i = _g1++;
			this.rawData.set(i,vector.get(i + index));
		}
		if(transpose) {
			this.transpose();
		}
	}
	,copyRawDataTo: function(vector,index,transpose) {
		if(transpose == null) {
			transpose = false;
		}
		if(index == null) {
			index = 0;
		}
		if(transpose) {
			this.transpose();
		}
		var _g1 = 0;
		var _g = this.rawData.get_length();
		while(_g1 < _g) {
			var i = _g1++;
			vector.set(i + index,this.rawData.get(i));
		}
		if(transpose) {
			this.transpose();
		}
	}
	,copyRowFrom: function(row,vector3D) {
		switch(row) {
		case 0:
			this.rawData.set(0,vector3D.x);
			this.rawData.set(4,vector3D.y);
			this.rawData.set(8,vector3D.z);
			this.rawData.set(12,vector3D.w);
			break;
		case 1:
			this.rawData.set(1,vector3D.x);
			this.rawData.set(5,vector3D.y);
			this.rawData.set(9,vector3D.z);
			this.rawData.set(13,vector3D.w);
			break;
		case 2:
			this.rawData.set(2,vector3D.x);
			this.rawData.set(6,vector3D.y);
			this.rawData.set(10,vector3D.z);
			this.rawData.set(14,vector3D.w);
			break;
		case 3:
			this.rawData.set(3,vector3D.x);
			this.rawData.set(7,vector3D.y);
			this.rawData.set(11,vector3D.z);
			this.rawData.set(15,vector3D.w);
			break;
		default:
		}
	}
	,copyRowTo: function(row,vector3D) {
		switch(row) {
		case 0:
			vector3D.x = this.rawData.get(0);
			vector3D.y = this.rawData.get(4);
			vector3D.z = this.rawData.get(8);
			vector3D.w = this.rawData.get(12);
			break;
		case 1:
			vector3D.x = this.rawData.get(1);
			vector3D.y = this.rawData.get(5);
			vector3D.z = this.rawData.get(9);
			vector3D.w = this.rawData.get(13);
			break;
		case 2:
			vector3D.x = this.rawData.get(2);
			vector3D.y = this.rawData.get(6);
			vector3D.z = this.rawData.get(10);
			vector3D.w = this.rawData.get(14);
			break;
		case 3:
			vector3D.x = this.rawData.get(3);
			vector3D.y = this.rawData.get(7);
			vector3D.z = this.rawData.get(11);
			vector3D.w = this.rawData.get(15);
			break;
		default:
		}
	}
	,copyToMatrix3D: function(other) {
		other.rawData = this.rawData.copy();
	}
	,decompose: function(orientationStyle) {
		if(orientationStyle == null) {
			orientationStyle = 1;
		}
		var vec = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
		var mr = this.clone().rawData.copy();
		var pos = new openfl_geom_Vector3D(mr.get(12),mr.get(13),mr.get(14));
		mr.set(12,0);
		mr.set(13,0);
		mr.set(14,0);
		var scale = new openfl_geom_Vector3D();
		scale.x = Math.sqrt(mr.get(0) * mr.get(0) + mr.get(1) * mr.get(1) + mr.get(2) * mr.get(2));
		scale.y = Math.sqrt(mr.get(4) * mr.get(4) + mr.get(5) * mr.get(5) + mr.get(6) * mr.get(6));
		scale.z = Math.sqrt(mr.get(8) * mr.get(8) + mr.get(9) * mr.get(9) + mr.get(10) * mr.get(10));
		if(mr.get(0) * (mr.get(5) * mr.get(10) - mr.get(6) * mr.get(9)) - mr.get(1) * (mr.get(4) * mr.get(10) - mr.get(6) * mr.get(8)) + mr.get(2) * (mr.get(4) * mr.get(9) - mr.get(5) * mr.get(8)) < 0) {
			scale.z = -scale.z;
		}
		mr.set(0,mr.get(0) / scale.x);
		mr.set(1,mr.get(1) / scale.x);
		mr.set(2,mr.get(2) / scale.x);
		mr.set(4,mr.get(4) / scale.y);
		mr.set(5,mr.get(5) / scale.y);
		mr.set(6,mr.get(6) / scale.y);
		mr.set(8,mr.get(8) / scale.z);
		mr.set(9,mr.get(9) / scale.z);
		mr.set(10,mr.get(10) / scale.z);
		var rot = new openfl_geom_Vector3D();
		switch(orientationStyle) {
		case 0:
			rot.w = Math.acos((mr.get(0) + mr.get(5) + mr.get(10) - 1) / 2);
			var len = Math.sqrt((mr.get(6) - mr.get(9)) * (mr.get(6) - mr.get(9)) + (mr.get(8) - mr.get(2)) * (mr.get(8) - mr.get(2)) + (mr.get(1) - mr.get(4)) * (mr.get(1) - mr.get(4)));
			if(len != 0) {
				rot.x = (mr.get(6) - mr.get(9)) / len;
				rot.y = (mr.get(8) - mr.get(2)) / len;
				rot.z = (mr.get(1) - mr.get(4)) / len;
			} else {
				rot.x = rot.y = rot.z = 0;
			}
			break;
		case 1:
			rot.y = Math.asin(-mr.get(2));
			if(mr.get(2) != 1 && mr.get(2) != -1) {
				rot.x = Math.atan2(mr.get(6),mr.get(10));
				rot.z = Math.atan2(mr.get(1),mr.get(0));
			} else {
				rot.z = 0;
				rot.x = Math.atan2(mr.get(4),mr.get(5));
			}
			break;
		case 2:
			var tr = mr.get(0) + mr.get(5) + mr.get(10);
			if(tr > 0) {
				rot.w = Math.sqrt(1 + tr) / 2;
				rot.x = (mr.get(6) - mr.get(9)) / (4 * rot.w);
				rot.y = (mr.get(8) - mr.get(2)) / (4 * rot.w);
				rot.z = (mr.get(1) - mr.get(4)) / (4 * rot.w);
			} else if(mr.get(0) > mr.get(5) && mr.get(0) > mr.get(10)) {
				rot.x = Math.sqrt(1 + mr.get(0) - mr.get(5) - mr.get(10)) / 2;
				rot.w = (mr.get(6) - mr.get(9)) / (4 * rot.x);
				rot.y = (mr.get(1) + mr.get(4)) / (4 * rot.x);
				rot.z = (mr.get(8) + mr.get(2)) / (4 * rot.x);
			} else if(mr.get(5) > mr.get(10)) {
				rot.y = Math.sqrt(1 + mr.get(5) - mr.get(0) - mr.get(10)) / 2;
				rot.x = (mr.get(1) + mr.get(4)) / (4 * rot.y);
				rot.w = (mr.get(8) - mr.get(2)) / (4 * rot.y);
				rot.z = (mr.get(6) + mr.get(9)) / (4 * rot.y);
			} else {
				rot.z = Math.sqrt(1 + mr.get(10) - mr.get(0) - mr.get(5)) / 2;
				rot.x = (mr.get(8) + mr.get(2)) / (4 * rot.z);
				rot.y = (mr.get(6) + mr.get(9)) / (4 * rot.z);
				rot.w = (mr.get(1) - mr.get(4)) / (4 * rot.z);
			}
			break;
		}
		vec.push(pos);
		vec.push(rot);
		vec.push(scale);
		return vec;
	}
	,deltaTransformVector: function(v) {
		var x = v.x;
		var y = v.y;
		var z = v.z;
		return new openfl_geom_Vector3D(x * this.rawData.get(0) + y * this.rawData.get(4) + z * this.rawData.get(8) + this.rawData.get(3),x * this.rawData.get(1) + y * this.rawData.get(5) + z * this.rawData.get(9) + this.rawData.get(7),x * this.rawData.get(2) + y * this.rawData.get(6) + z * this.rawData.get(10) + this.rawData.get(11),0);
	}
	,identity: function() {
		var a = [1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0];
		var vector = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
		var _g1 = 0;
		var _g = a.length;
		while(_g1 < _g) {
			var i = _g1++;
			vector.set(i,a[i]);
		}
		this.rawData = vector;
	}
	,interpolateTo: function(toMat,percent) {
		var _g = 0;
		while(_g < 16) {
			var i = _g++;
			this.rawData.set(i,this.rawData.get(i) + (toMat.rawData.get(i) - this.rawData.get(i)) * percent);
		}
	}
	,invert: function() {
		var d = this.get_determinant();
		var invertable = Math.abs(d) > 0.00000000001;
		if(invertable) {
			d = 1 / d;
			var m11 = this.rawData.get(0);
			var m21 = this.rawData.get(4);
			var m31 = this.rawData.get(8);
			var m41 = this.rawData.get(12);
			var m12 = this.rawData.get(1);
			var m22 = this.rawData.get(5);
			var m32 = this.rawData.get(9);
			var m42 = this.rawData.get(13);
			var m13 = this.rawData.get(2);
			var m23 = this.rawData.get(6);
			var m33 = this.rawData.get(10);
			var m43 = this.rawData.get(14);
			var m14 = this.rawData.get(3);
			var m24 = this.rawData.get(7);
			var m34 = this.rawData.get(11);
			var m44 = this.rawData.get(15);
			this.rawData.set(0,d * (m22 * (m33 * m44 - m43 * m34) - m32 * (m23 * m44 - m43 * m24) + m42 * (m23 * m34 - m33 * m24)));
			this.rawData.set(1,-d * (m12 * (m33 * m44 - m43 * m34) - m32 * (m13 * m44 - m43 * m14) + m42 * (m13 * m34 - m33 * m14)));
			this.rawData.set(2,d * (m12 * (m23 * m44 - m43 * m24) - m22 * (m13 * m44 - m43 * m14) + m42 * (m13 * m24 - m23 * m14)));
			this.rawData.set(3,-d * (m12 * (m23 * m34 - m33 * m24) - m22 * (m13 * m34 - m33 * m14) + m32 * (m13 * m24 - m23 * m14)));
			this.rawData.set(4,-d * (m21 * (m33 * m44 - m43 * m34) - m31 * (m23 * m44 - m43 * m24) + m41 * (m23 * m34 - m33 * m24)));
			this.rawData.set(5,d * (m11 * (m33 * m44 - m43 * m34) - m31 * (m13 * m44 - m43 * m14) + m41 * (m13 * m34 - m33 * m14)));
			this.rawData.set(6,-d * (m11 * (m23 * m44 - m43 * m24) - m21 * (m13 * m44 - m43 * m14) + m41 * (m13 * m24 - m23 * m14)));
			this.rawData.set(7,d * (m11 * (m23 * m34 - m33 * m24) - m21 * (m13 * m34 - m33 * m14) + m31 * (m13 * m24 - m23 * m14)));
			this.rawData.set(8,d * (m21 * (m32 * m44 - m42 * m34) - m31 * (m22 * m44 - m42 * m24) + m41 * (m22 * m34 - m32 * m24)));
			this.rawData.set(9,-d * (m11 * (m32 * m44 - m42 * m34) - m31 * (m12 * m44 - m42 * m14) + m41 * (m12 * m34 - m32 * m14)));
			this.rawData.set(10,d * (m11 * (m22 * m44 - m42 * m24) - m21 * (m12 * m44 - m42 * m14) + m41 * (m12 * m24 - m22 * m14)));
			this.rawData.set(11,-d * (m11 * (m22 * m34 - m32 * m24) - m21 * (m12 * m34 - m32 * m14) + m31 * (m12 * m24 - m22 * m14)));
			this.rawData.set(12,-d * (m21 * (m32 * m43 - m42 * m33) - m31 * (m22 * m43 - m42 * m23) + m41 * (m22 * m33 - m32 * m23)));
			this.rawData.set(13,d * (m11 * (m32 * m43 - m42 * m33) - m31 * (m12 * m43 - m42 * m13) + m41 * (m12 * m33 - m32 * m13)));
			this.rawData.set(14,-d * (m11 * (m22 * m43 - m42 * m23) - m21 * (m12 * m43 - m42 * m13) + m41 * (m12 * m23 - m22 * m13)));
			this.rawData.set(15,d * (m11 * (m22 * m33 - m32 * m23) - m21 * (m12 * m33 - m32 * m13) + m31 * (m12 * m23 - m22 * m13)));
		}
		return invertable;
	}
	,pointAt: function(pos,at,up) {
		if(at == null) {
			at = new openfl_geom_Vector3D(0,0,-1);
		}
		if(up == null) {
			up = new openfl_geom_Vector3D(0,-1,0);
		}
		var dir = at.subtract(pos);
		var vup = up.clone();
		var right;
		dir.normalize();
		vup.normalize();
		var dir2 = dir.clone();
		dir2.scaleBy(vup.dotProduct(dir));
		vup = vup.subtract(dir2);
		if(vup.get_length() > 0) {
			vup.normalize();
		} else if(dir.x != 0) {
			vup = new openfl_geom_Vector3D(-dir.y,dir.x,0);
		} else {
			vup = new openfl_geom_Vector3D(1,0,0);
		}
		right = vup.crossProduct(dir);
		right.normalize();
		this.rawData.set(0,right.x);
		this.rawData.set(4,right.y);
		this.rawData.set(8,right.z);
		this.rawData.set(12,0.0);
		this.rawData.set(1,vup.x);
		this.rawData.set(5,vup.y);
		this.rawData.set(9,vup.z);
		this.rawData.set(13,0.0);
		this.rawData.set(2,dir.x);
		this.rawData.set(6,dir.y);
		this.rawData.set(10,dir.z);
		this.rawData.set(14,0.0);
		this.rawData.set(3,pos.x);
		this.rawData.set(7,pos.y);
		this.rawData.set(11,pos.z);
		this.rawData.set(15,1.0);
	}
	,prepend: function(rhs) {
		var m111 = rhs.rawData.get(0);
		var m121 = rhs.rawData.get(4);
		var m131 = rhs.rawData.get(8);
		var m141 = rhs.rawData.get(12);
		var m112 = rhs.rawData.get(1);
		var m122 = rhs.rawData.get(5);
		var m132 = rhs.rawData.get(9);
		var m142 = rhs.rawData.get(13);
		var m113 = rhs.rawData.get(2);
		var m123 = rhs.rawData.get(6);
		var m133 = rhs.rawData.get(10);
		var m143 = rhs.rawData.get(14);
		var m114 = rhs.rawData.get(3);
		var m124 = rhs.rawData.get(7);
		var m134 = rhs.rawData.get(11);
		var m144 = rhs.rawData.get(15);
		var m211 = this.rawData.get(0);
		var m221 = this.rawData.get(4);
		var m231 = this.rawData.get(8);
		var m241 = this.rawData.get(12);
		var m212 = this.rawData.get(1);
		var m222 = this.rawData.get(5);
		var m232 = this.rawData.get(9);
		var m242 = this.rawData.get(13);
		var m213 = this.rawData.get(2);
		var m223 = this.rawData.get(6);
		var m233 = this.rawData.get(10);
		var m243 = this.rawData.get(14);
		var m214 = this.rawData.get(3);
		var m224 = this.rawData.get(7);
		var m234 = this.rawData.get(11);
		var m244 = this.rawData.get(15);
		this.rawData.set(0,m111 * m211 + m112 * m221 + m113 * m231 + m114 * m241);
		this.rawData.set(1,m111 * m212 + m112 * m222 + m113 * m232 + m114 * m242);
		this.rawData.set(2,m111 * m213 + m112 * m223 + m113 * m233 + m114 * m243);
		this.rawData.set(3,m111 * m214 + m112 * m224 + m113 * m234 + m114 * m244);
		this.rawData.set(4,m121 * m211 + m122 * m221 + m123 * m231 + m124 * m241);
		this.rawData.set(5,m121 * m212 + m122 * m222 + m123 * m232 + m124 * m242);
		this.rawData.set(6,m121 * m213 + m122 * m223 + m123 * m233 + m124 * m243);
		this.rawData.set(7,m121 * m214 + m122 * m224 + m123 * m234 + m124 * m244);
		this.rawData.set(8,m131 * m211 + m132 * m221 + m133 * m231 + m134 * m241);
		this.rawData.set(9,m131 * m212 + m132 * m222 + m133 * m232 + m134 * m242);
		this.rawData.set(10,m131 * m213 + m132 * m223 + m133 * m233 + m134 * m243);
		this.rawData.set(11,m131 * m214 + m132 * m224 + m133 * m234 + m134 * m244);
		this.rawData.set(12,m141 * m211 + m142 * m221 + m143 * m231 + m144 * m241);
		this.rawData.set(13,m141 * m212 + m142 * m222 + m143 * m232 + m144 * m242);
		this.rawData.set(14,m141 * m213 + m142 * m223 + m143 * m233 + m144 * m243);
		this.rawData.set(15,m141 * m214 + m142 * m224 + m143 * m234 + m144 * m244);
	}
	,prependRotation: function(degrees,axis,pivotPoint) {
		var tx;
		var ty;
		var tz = 0;
		ty = tz;
		tx = ty;
		if(pivotPoint != null) {
			tx = pivotPoint.x;
			ty = pivotPoint.y;
			tz = pivotPoint.z;
		}
		var radian = degrees * Math.PI / 180;
		var cos = Math.cos(radian);
		var sin = Math.sin(radian);
		var x = axis.x;
		var y = axis.y;
		var z = axis.z;
		var x2 = x * x;
		var y2 = y * y;
		var z2 = z * z;
		var ls = x2 + y2 + z2;
		if(ls != 0) {
			var l = Math.sqrt(ls);
			x /= l;
			y /= l;
			z /= l;
			x2 /= ls;
			y2 /= ls;
			z2 /= ls;
		}
		var ccos = 1 - cos;
		var m = new openfl_geom_Matrix3D();
		var d = m.rawData;
		d.set(0,x2 + (y2 + z2) * cos);
		d.set(1,x * y * ccos + z * sin);
		d.set(2,x * z * ccos - y * sin);
		d.set(4,x * y * ccos - z * sin);
		d.set(5,y2 + (x2 + z2) * cos);
		d.set(6,y * z * ccos + x * sin);
		d.set(8,x * z * ccos + y * sin);
		d.set(9,y * z * ccos - x * sin);
		d.set(10,z2 + (x2 + y2) * cos);
		d.set(12,(tx * (y2 + z2) - x * (ty * y + tz * z)) * ccos + (ty * z - tz * y) * sin);
		d.set(13,(ty * (x2 + z2) - y * (tx * x + tz * z)) * ccos + (tz * x - tx * z) * sin);
		d.set(14,(tz * (x2 + y2) - z * (tx * x + ty * y)) * ccos + (tx * y - ty * x) * sin);
		this.prepend(m);
	}
	,prependScale: function(xScale,yScale,zScale) {
		var a = [xScale,0.0,0.0,0.0,0.0,yScale,0.0,0.0,0.0,0.0,zScale,0.0,0.0,0.0,0.0,1.0];
		var vector = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
		var _g1 = 0;
		var _g = a.length;
		while(_g1 < _g) {
			var i = _g1++;
			vector.set(i,a[i]);
		}
		this.prepend(new openfl_geom_Matrix3D(vector));
	}
	,prependTranslation: function(x,y,z) {
		var m = new openfl_geom_Matrix3D();
		m.set_position(new openfl_geom_Vector3D(x,y,z));
		this.prepend(m);
	}
	,recompose: function(components,orientationStyle) {
		if(components.get_length() < 3 || components.get(2).x == 0 || components.get(2).y == 0 || components.get(2).z == 0) {
			return false;
		}
		if(orientationStyle == null) {
			orientationStyle = 1;
		}
		this.identity();
		var scale = [];
		scale[0] = scale[1] = scale[2] = components.get(2).x;
		scale[4] = scale[5] = scale[6] = components.get(2).y;
		scale[8] = scale[9] = scale[10] = components.get(2).z;
		if(orientationStyle == null) {
			var x = components.get(1).x;
			var y = components.get(1).y;
			var z = components.get(1).z;
			var w = components.get(1).w;
			if(orientationStyle == 0) {
				x *= Math.sin(w / 2);
				y *= Math.sin(w / 2);
				z *= Math.sin(w / 2);
				w = Math.cos(w / 2);
			}
			this.rawData.set(0,(1 - 2 * y * y - 2 * z * z) * scale[0]);
			this.rawData.set(1,(2 * x * y + 2 * w * z) * scale[1]);
			this.rawData.set(2,(2 * x * z - 2 * w * y) * scale[2]);
			this.rawData.set(3,0);
			this.rawData.set(4,(2 * x * y - 2 * w * z) * scale[4]);
			this.rawData.set(5,(1 - 2 * x * x - 2 * z * z) * scale[5]);
			this.rawData.set(6,(2 * y * z + 2 * w * x) * scale[6]);
			this.rawData.set(7,0);
			this.rawData.set(8,(2 * x * z + 2 * w * y) * scale[8]);
			this.rawData.set(9,(2 * y * z - 2 * w * x) * scale[9]);
			this.rawData.set(10,(1 - 2 * x * x - 2 * y * y) * scale[10]);
			this.rawData.set(11,0);
			this.rawData.set(12,components.get(0).x);
			this.rawData.set(13,components.get(0).y);
			this.rawData.set(14,components.get(0).z);
			this.rawData.set(15,1);
		} else if(orientationStyle == 1) {
			var cx = Math.cos(components.get(1).x);
			var cy = Math.cos(components.get(1).y);
			var cz = Math.cos(components.get(1).z);
			var sx = Math.sin(components.get(1).x);
			var sy = Math.sin(components.get(1).y);
			var sz = Math.sin(components.get(1).z);
			this.rawData.set(0,cy * cz * scale[0]);
			this.rawData.set(1,cy * sz * scale[1]);
			this.rawData.set(2,-sy * scale[2]);
			this.rawData.set(3,0);
			this.rawData.set(4,(sx * sy * cz - cx * sz) * scale[4]);
			this.rawData.set(5,(sx * sy * sz + cx * cz) * scale[5]);
			this.rawData.set(6,sx * cy * scale[6]);
			this.rawData.set(7,0);
			this.rawData.set(8,(cx * sy * cz + sx * sz) * scale[8]);
			this.rawData.set(9,(cx * sy * sz - sx * cz) * scale[9]);
			this.rawData.set(10,cx * cy * scale[10]);
			this.rawData.set(11,0);
			this.rawData.set(12,components.get(0).x);
			this.rawData.set(13,components.get(0).y);
			this.rawData.set(14,components.get(0).z);
			this.rawData.set(15,1);
		} else {
			var x1 = components.get(1).x;
			var y1 = components.get(1).y;
			var z1 = components.get(1).z;
			var w1 = components.get(1).w;
			if(orientationStyle == 0) {
				x1 *= Math.sin(w1 / 2);
				y1 *= Math.sin(w1 / 2);
				z1 *= Math.sin(w1 / 2);
				w1 = Math.cos(w1 / 2);
			}
			this.rawData.set(0,(1 - 2 * y1 * y1 - 2 * z1 * z1) * scale[0]);
			this.rawData.set(1,(2 * x1 * y1 + 2 * w1 * z1) * scale[1]);
			this.rawData.set(2,(2 * x1 * z1 - 2 * w1 * y1) * scale[2]);
			this.rawData.set(3,0);
			this.rawData.set(4,(2 * x1 * y1 - 2 * w1 * z1) * scale[4]);
			this.rawData.set(5,(1 - 2 * x1 * x1 - 2 * z1 * z1) * scale[5]);
			this.rawData.set(6,(2 * y1 * z1 + 2 * w1 * x1) * scale[6]);
			this.rawData.set(7,0);
			this.rawData.set(8,(2 * x1 * z1 + 2 * w1 * y1) * scale[8]);
			this.rawData.set(9,(2 * y1 * z1 - 2 * w1 * x1) * scale[9]);
			this.rawData.set(10,(1 - 2 * x1 * x1 - 2 * y1 * y1) * scale[10]);
			this.rawData.set(11,0);
			this.rawData.set(12,components.get(0).x);
			this.rawData.set(13,components.get(0).y);
			this.rawData.set(14,components.get(0).z);
			this.rawData.set(15,1);
		}
		if(components.get(2).x == 0) {
			this.rawData.set(0,1e-15);
		}
		if(components.get(2).y == 0) {
			this.rawData.set(5,1e-15);
		}
		if(components.get(2).z == 0) {
			this.rawData.set(10,1e-15);
		}
		return !(components.get(2).x == 0 || components.get(2).y == 0 || components.get(2).y == 0);
	}
	,transformVector: function(v) {
		var x = v.x;
		var y = v.y;
		var z = v.z;
		return new openfl_geom_Vector3D(x * this.rawData.get(0) + y * this.rawData.get(4) + z * this.rawData.get(8) + this.rawData.get(12),x * this.rawData.get(1) + y * this.rawData.get(5) + z * this.rawData.get(9) + this.rawData.get(13),x * this.rawData.get(2) + y * this.rawData.get(6) + z * this.rawData.get(10) + this.rawData.get(14),x * this.rawData.get(3) + y * this.rawData.get(7) + z * this.rawData.get(11) + this.rawData.get(15));
	}
	,transformVectors: function(vin,vout) {
		var i = 0;
		var x;
		var y;
		var z;
		while(i + 3 <= vin.get_length()) {
			x = vin.get(i);
			y = vin.get(i + 1);
			z = vin.get(i + 2);
			vout.set(i,x * this.rawData.get(0) + y * this.rawData.get(4) + z * this.rawData.get(8) + this.rawData.get(12));
			vout.set(i + 1,x * this.rawData.get(1) + y * this.rawData.get(5) + z * this.rawData.get(9) + this.rawData.get(13));
			vout.set(i + 2,x * this.rawData.get(2) + y * this.rawData.get(6) + z * this.rawData.get(10) + this.rawData.get(14));
			i += 3;
		}
	}
	,transpose: function() {
		var oRawData = this.rawData.copy();
		this.rawData.set(1,oRawData.get(4));
		this.rawData.set(2,oRawData.get(8));
		this.rawData.set(3,oRawData.get(12));
		this.rawData.set(4,oRawData.get(1));
		this.rawData.set(6,oRawData.get(9));
		this.rawData.set(7,oRawData.get(13));
		this.rawData.set(8,oRawData.get(2));
		this.rawData.set(9,oRawData.get(6));
		this.rawData.set(11,oRawData.get(14));
		this.rawData.set(12,oRawData.get(3));
		this.rawData.set(13,oRawData.get(7));
		this.rawData.set(14,oRawData.get(11));
	}
	,get_determinant: function() {
		return (this.rawData.get(0) * this.rawData.get(5) - this.rawData.get(4) * this.rawData.get(1)) * (this.rawData.get(10) * this.rawData.get(15) - this.rawData.get(14) * this.rawData.get(11)) - (this.rawData.get(0) * this.rawData.get(9) - this.rawData.get(8) * this.rawData.get(1)) * (this.rawData.get(6) * this.rawData.get(15) - this.rawData.get(14) * this.rawData.get(7)) + (this.rawData.get(0) * this.rawData.get(13) - this.rawData.get(12) * this.rawData.get(1)) * (this.rawData.get(6) * this.rawData.get(11) - this.rawData.get(10) * this.rawData.get(7)) + (this.rawData.get(4) * this.rawData.get(9) - this.rawData.get(8) * this.rawData.get(5)) * (this.rawData.get(2) * this.rawData.get(15) - this.rawData.get(14) * this.rawData.get(3)) - (this.rawData.get(4) * this.rawData.get(13) - this.rawData.get(12) * this.rawData.get(5)) * (this.rawData.get(2) * this.rawData.get(11) - this.rawData.get(10) * this.rawData.get(3)) + (this.rawData.get(8) * this.rawData.get(13) - this.rawData.get(12) * this.rawData.get(9)) * (this.rawData.get(2) * this.rawData.get(7) - this.rawData.get(6) * this.rawData.get(3));
	}
	,get_position: function() {
		return new openfl_geom_Vector3D(this.rawData.get(12),this.rawData.get(13),this.rawData.get(14));
	}
	,set_position: function(val) {
		this.rawData.set(12,val.x);
		this.rawData.set(13,val.y);
		this.rawData.set(14,val.z);
		return val;
	}
	,__class__: openfl_geom_Matrix3D
	,__properties__: {set_position:"set_position",get_position:"get_position",get_determinant:"get_determinant"}
};
var openfl_geom__$Orientation3D_Orientation3D_$Impl_$ = {};
$hxClasses["openfl.geom._Orientation3D.Orientation3D_Impl_"] = openfl_geom__$Orientation3D_Orientation3D_$Impl_$;
openfl_geom__$Orientation3D_Orientation3D_$Impl_$.__name__ = ["openfl","geom","_Orientation3D","Orientation3D_Impl_"];
openfl_geom__$Orientation3D_Orientation3D_$Impl_$.fromString = function(value) {
	switch(value) {
	case "axisAngle":
		return 0;
	case "eulerAngles":
		return 1;
	case "quaternion":
		return 2;
	default:
		return null;
	}
};
openfl_geom__$Orientation3D_Orientation3D_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "axisAngle";
	case 1:
		return "eulerAngles";
	case 2:
		return "quaternion";
	default:
		return null;
	}
};
var openfl_geom_Point = function(x,y) {
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.x = x;
	this.y = y;
};
$hxClasses["openfl.geom.Point"] = openfl_geom_Point;
openfl_geom_Point.__name__ = ["openfl","geom","Point"];
openfl_geom_Point.distance = function(pt1,pt2) {
	var dx = pt1.x - pt2.x;
	var dy = pt1.y - pt2.y;
	return Math.sqrt(dx * dx + dy * dy);
};
openfl_geom_Point.interpolate = function(pt1,pt2,f) {
	return new openfl_geom_Point(pt2.x + f * (pt1.x - pt2.x),pt2.y + f * (pt1.y - pt2.y));
};
openfl_geom_Point.polar = function(len,angle) {
	return new openfl_geom_Point(len * Math.cos(angle),len * Math.sin(angle));
};
openfl_geom_Point.prototype = {
	x: null
	,y: null
	,add: function(v) {
		return new openfl_geom_Point(v.x + this.x,v.y + this.y);
	}
	,clone: function() {
		return new openfl_geom_Point(this.x,this.y);
	}
	,copyFrom: function(sourcePoint) {
		this.x = sourcePoint.x;
		this.y = sourcePoint.y;
	}
	,equals: function(toCompare) {
		if(toCompare != null && toCompare.x == this.x) {
			return toCompare.y == this.y;
		} else {
			return false;
		}
	}
	,normalize: function(thickness) {
		if(this.x == 0 && this.y == 0) {
			return;
		} else {
			var norm = thickness / Math.sqrt(this.x * this.x + this.y * this.y);
			this.x *= norm;
			this.y *= norm;
		}
	}
	,offset: function(dx,dy) {
		this.x += dx;
		this.y += dy;
	}
	,setTo: function(xa,ya) {
		this.x = xa;
		this.y = ya;
	}
	,subtract: function(v) {
		return new openfl_geom_Point(this.x - v.x,this.y - v.y);
	}
	,toString: function() {
		return "(x=" + this.x + ", y=" + this.y + ")";
	}
	,__toLimeVector2: function() {
		if(openfl_geom_Point.__limeVector2 == null) {
			openfl_geom_Point.__limeVector2 = new lime_math_Vector2();
		}
		var _this = openfl_geom_Point.__limeVector2;
		_this.x = this.x;
		_this.y = this.y;
		return openfl_geom_Point.__limeVector2;
	}
	,get_length: function() {
		return Math.sqrt(this.x * this.x + this.y * this.y);
	}
	,__class__: openfl_geom_Point
	,__properties__: {get_length:"get_length"}
};
var openfl_geom_Rectangle = function(x,y,width,height) {
	if(height == null) {
		height = 0;
	}
	if(width == null) {
		width = 0;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.x = x;
	this.y = y;
	this.width = width;
	this.height = height;
};
$hxClasses["openfl.geom.Rectangle"] = openfl_geom_Rectangle;
openfl_geom_Rectangle.__name__ = ["openfl","geom","Rectangle"];
openfl_geom_Rectangle.prototype = {
	height: null
	,width: null
	,x: null
	,y: null
	,clone: function() {
		return new openfl_geom_Rectangle(this.x,this.y,this.width,this.height);
	}
	,contains: function(x,y) {
		if(x >= this.x && y >= this.y && x < this.get_right()) {
			return y < this.get_bottom();
		} else {
			return false;
		}
	}
	,containsPoint: function(point) {
		return this.contains(point.x,point.y);
	}
	,containsRect: function(rect) {
		if(rect.width <= 0 || rect.height <= 0) {
			if(rect.x > this.x && rect.y > this.y && rect.get_right() < this.get_right()) {
				return rect.get_bottom() < this.get_bottom();
			} else {
				return false;
			}
		} else if(rect.x >= this.x && rect.y >= this.y && rect.get_right() <= this.get_right()) {
			return rect.get_bottom() <= this.get_bottom();
		} else {
			return false;
		}
	}
	,copyFrom: function(sourceRect) {
		this.x = sourceRect.x;
		this.y = sourceRect.y;
		this.width = sourceRect.width;
		this.height = sourceRect.height;
	}
	,equals: function(toCompare) {
		if(toCompare != null && this.x == toCompare.x && this.y == toCompare.y && this.width == toCompare.width) {
			return this.height == toCompare.height;
		} else {
			return false;
		}
	}
	,inflate: function(dx,dy) {
		this.x -= dx;
		this.width += dx * 2;
		this.y -= dy;
		this.height += dy * 2;
	}
	,inflatePoint: function(point) {
		this.inflate(point.x,point.y);
	}
	,intersection: function(toIntersect) {
		var x0 = this.x < toIntersect.x ? toIntersect.x : this.x;
		var x1 = this.get_right() > toIntersect.get_right() ? toIntersect.get_right() : this.get_right();
		if(x1 <= x0) {
			return new openfl_geom_Rectangle();
		}
		var y0 = this.y < toIntersect.y ? toIntersect.y : this.y;
		var y1 = this.get_bottom() > toIntersect.get_bottom() ? toIntersect.get_bottom() : this.get_bottom();
		if(y1 <= y0) {
			return new openfl_geom_Rectangle();
		}
		return new openfl_geom_Rectangle(x0,y0,x1 - x0,y1 - y0);
	}
	,intersects: function(toIntersect) {
		if((this.get_right() > toIntersect.get_right() ? toIntersect.get_right() : this.get_right()) <= (this.x < toIntersect.x ? toIntersect.x : this.x)) {
			return false;
		}
		return (this.get_bottom() > toIntersect.get_bottom() ? toIntersect.get_bottom() : this.get_bottom()) > (this.y < toIntersect.y ? toIntersect.y : this.y);
	}
	,isEmpty: function() {
		if(!(this.width <= 0)) {
			return this.height <= 0;
		} else {
			return true;
		}
	}
	,offset: function(dx,dy) {
		this.x += dx;
		this.y += dy;
	}
	,offsetPoint: function(point) {
		this.x += point.x;
		this.y += point.y;
	}
	,setEmpty: function() {
		this.x = this.y = this.width = this.height = 0;
	}
	,setTo: function(xa,ya,widtha,heighta) {
		this.x = xa;
		this.y = ya;
		this.width = widtha;
		this.height = heighta;
	}
	,toString: function() {
		return "(x=" + this.x + ", y=" + this.y + ", width=" + this.width + ", height=" + this.height + ")";
	}
	,union: function(toUnion) {
		if(this.width == 0 || this.height == 0) {
			return toUnion.clone();
		} else if(toUnion.width == 0 || toUnion.height == 0) {
			return this.clone();
		}
		var x0 = this.x > toUnion.x ? toUnion.x : this.x;
		var y0 = this.y > toUnion.y ? toUnion.y : this.y;
		return new openfl_geom_Rectangle(x0,y0,(this.get_right() < toUnion.get_right() ? toUnion.get_right() : this.get_right()) - x0,(this.get_bottom() < toUnion.get_bottom() ? toUnion.get_bottom() : this.get_bottom()) - y0);
	}
	,__contract: function(x,y,width,height) {
		if(this.width == 0 && this.height == 0) {
			return;
		}
		var offsetX = 0.0;
		var offsetY = 0.0;
		var offsetRight = 0.0;
		var offsetBottom = 0.0;
		if(this.x < x) {
			offsetX = x - this.x;
		}
		if(this.y < y) {
			offsetY = y - this.y;
		}
		if(this.get_right() > x + width) {
			offsetRight = x + width - this.get_right();
		}
		if(this.get_bottom() > y + height) {
			offsetBottom = y + height - this.get_bottom();
		}
		this.x += offsetX;
		this.y += offsetY;
		this.width += offsetRight - offsetX;
		this.height += offsetBottom - offsetY;
	}
	,__expand: function(x,y,width,height) {
		if(this.width == 0 && this.height == 0) {
			this.x = x;
			this.y = y;
			this.width = width;
			this.height = height;
			return;
		}
		var cacheRight = this.get_right();
		var cacheBottom = this.get_bottom();
		if(this.x > x) {
			this.x = x;
			this.width = cacheRight - x;
		}
		if(this.y > y) {
			this.y = y;
			this.height = cacheBottom - y;
		}
		if(cacheRight < x + width) {
			this.width = x + width - this.x;
		}
		if(cacheBottom < y + height) {
			this.height = y + height - this.y;
		}
	}
	,__toLimeRectangle: function() {
		if(openfl_geom_Rectangle.__limeRectangle == null) {
			openfl_geom_Rectangle.__limeRectangle = new lime_math_Rectangle();
		}
		openfl_geom_Rectangle.__limeRectangle.setTo(this.x,this.y,this.width,this.height);
		return openfl_geom_Rectangle.__limeRectangle;
	}
	,__transform: function(rect,m) {
		var tx0 = m.a * this.x + m.c * this.y;
		var tx1 = tx0;
		var ty0 = m.b * this.x + m.d * this.y;
		var ty1 = ty0;
		var tx = m.a * (this.x + this.width) + m.c * this.y;
		var ty = m.b * (this.x + this.width) + m.d * this.y;
		if(tx < tx0) {
			tx0 = tx;
		}
		if(ty < ty0) {
			ty0 = ty;
		}
		if(tx > tx1) {
			tx1 = tx;
		}
		if(ty > ty1) {
			ty1 = ty;
		}
		tx = m.a * (this.x + this.width) + m.c * (this.y + this.height);
		ty = m.b * (this.x + this.width) + m.d * (this.y + this.height);
		if(tx < tx0) {
			tx0 = tx;
		}
		if(ty < ty0) {
			ty0 = ty;
		}
		if(tx > tx1) {
			tx1 = tx;
		}
		if(ty > ty1) {
			ty1 = ty;
		}
		tx = m.a * this.x + m.c * (this.y + this.height);
		ty = m.b * this.x + m.d * (this.y + this.height);
		if(tx < tx0) {
			tx0 = tx;
		}
		if(ty < ty0) {
			ty0 = ty;
		}
		if(tx > tx1) {
			tx1 = tx;
		}
		if(ty > ty1) {
			ty1 = ty;
		}
		rect.setTo(tx0 + m.tx,ty0 + m.ty,tx1 - tx0,ty1 - ty0);
	}
	,get_bottom: function() {
		return this.y + this.height;
	}
	,set_bottom: function(b) {
		this.height = b - this.y;
		return b;
	}
	,get_bottomRight: function() {
		return new openfl_geom_Point(this.x + this.width,this.y + this.height);
	}
	,set_bottomRight: function(p) {
		this.width = p.x - this.x;
		this.height = p.y - this.y;
		return p.clone();
	}
	,get_left: function() {
		return this.x;
	}
	,set_left: function(l) {
		this.width -= l - this.x;
		this.x = l;
		return l;
	}
	,get_right: function() {
		return this.x + this.width;
	}
	,set_right: function(r) {
		this.width = r - this.x;
		return r;
	}
	,get_size: function() {
		return new openfl_geom_Point(this.width,this.height);
	}
	,set_size: function(p) {
		this.width = p.x;
		this.height = p.y;
		return p.clone();
	}
	,get_top: function() {
		return this.y;
	}
	,set_top: function(t) {
		this.height -= t - this.y;
		this.y = t;
		return t;
	}
	,get_topLeft: function() {
		return new openfl_geom_Point(this.x,this.y);
	}
	,set_topLeft: function(p) {
		this.x = p.x;
		this.y = p.y;
		return p.clone();
	}
	,__class__: openfl_geom_Rectangle
	,__properties__: {set_topLeft:"set_topLeft",get_topLeft:"get_topLeft",set_top:"set_top",get_top:"get_top",set_size:"set_size",get_size:"get_size",set_right:"set_right",get_right:"get_right",set_left:"set_left",get_left:"get_left",set_bottomRight:"set_bottomRight",get_bottomRight:"get_bottomRight",set_bottom:"set_bottom",get_bottom:"get_bottom"}
};
var openfl_geom_Transform = function(displayObject) {
	this.__colorTransform = new openfl_geom_ColorTransform();
	this.concatenatedColorTransform = new openfl_geom_ColorTransform();
	this.pixelBounds = new openfl_geom_Rectangle();
	this.__displayObject = displayObject;
	this.__hasMatrix = true;
};
$hxClasses["openfl.geom.Transform"] = openfl_geom_Transform;
openfl_geom_Transform.__name__ = ["openfl","geom","Transform"];
openfl_geom_Transform.prototype = {
	concatenatedColorTransform: null
	,pixelBounds: null
	,__colorTransform: null
	,__displayObject: null
	,__hasMatrix: null
	,__hasMatrix3D: null
	,get_colorTransform: function() {
		return this.__colorTransform;
	}
	,set_colorTransform: function(value) {
		if(!this.__colorTransform.__equals(value)) {
			this.__colorTransform = value;
			if(value != null) {
				this.__displayObject.set_alpha(value.alphaMultiplier);
			}
			var _this = this.__displayObject;
			if(!_this.__renderDirty) {
				_this.__renderDirty = true;
				openfl_display_DisplayObject.__worldRenderDirty++;
			}
		}
		return this.__colorTransform;
	}
	,get_concatenatedMatrix: function() {
		if(this.__hasMatrix) {
			return this.__displayObject.__getWorldTransform().clone();
		}
		return null;
	}
	,get_matrix: function() {
		if(this.__hasMatrix) {
			return this.__displayObject.__transform.clone();
		}
		return null;
	}
	,set_matrix: function(value) {
		if(value == null) {
			this.__hasMatrix = false;
			return null;
		}
		this.__hasMatrix = true;
		this.__hasMatrix3D = false;
		if(this.__displayObject != null) {
			var rotation = 180 / Math.PI * Math.atan2(value.d,value.c) - 90;
			if(rotation != this.__displayObject.__rotation) {
				this.__displayObject.__rotation = rotation;
				var radians = rotation * (Math.PI / 180);
				this.__displayObject.__rotationSine = Math.sin(radians);
				this.__displayObject.__rotationCosine = Math.cos(radians);
			}
			this.__displayObject.__transform.copyFrom(value);
			var _this = this.__displayObject;
			if(!_this.__transformDirty) {
				_this.__transformDirty = true;
				openfl_display_DisplayObject.__worldTransformDirty++;
			}
		}
		return value;
	}
	,get_matrix3D: function() {
		if(this.__hasMatrix3D) {
			var matrix = this.__displayObject.__transform;
			var a = [matrix.a,matrix.b,0.0,0.0,matrix.c,matrix.d,0.0,0.0,0.0,0.0,1.0,0.0,matrix.tx,matrix.ty,0.0,1.0];
			var vector = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
			var _g1 = 0;
			var _g = a.length;
			while(_g1 < _g) {
				var i = _g1++;
				vector.set(i,a[i]);
			}
			return new openfl_geom_Matrix3D(vector);
		}
		return null;
	}
	,set_matrix3D: function(value) {
		if(value == null) {
			this.__hasMatrix3D = false;
			return null;
		}
		this.__hasMatrix = false;
		this.__hasMatrix3D = true;
		if(this.__displayObject != null) {
			var rotation = 180 / Math.PI * Math.atan2(value.rawData.get(5),value.rawData.get(4)) - 90;
			if(rotation != this.__displayObject.__rotation) {
				this.__displayObject.__rotation = rotation;
				var radians = rotation * (Math.PI / 180);
				this.__displayObject.__rotationSine = Math.sin(radians);
				this.__displayObject.__rotationCosine = Math.cos(radians);
			}
			this.__displayObject.__transform.a = value.rawData.get(0);
			this.__displayObject.__transform.b = value.rawData.get(1);
			this.__displayObject.__transform.c = value.rawData.get(5);
			this.__displayObject.__transform.d = value.rawData.get(6);
			this.__displayObject.__transform.tx = value.rawData.get(12);
			this.__displayObject.__transform.ty = value.rawData.get(13);
			var _this = this.__displayObject;
			if(!_this.__transformDirty) {
				_this.__transformDirty = true;
				openfl_display_DisplayObject.__worldTransformDirty++;
			}
		}
		return value;
	}
	,__class__: openfl_geom_Transform
	,__properties__: {set_matrix3D:"set_matrix3D",get_matrix3D:"get_matrix3D",set_matrix:"set_matrix",get_matrix:"get_matrix",get_concatenatedMatrix:"get_concatenatedMatrix",set_colorTransform:"set_colorTransform",get_colorTransform:"get_colorTransform"}
};
var openfl_geom_Vector3D = function(x,y,z,w) {
	if(w == null) {
		w = 0;
	}
	if(z == null) {
		z = 0;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.w = w;
	this.x = x;
	this.y = y;
	this.z = z;
};
$hxClasses["openfl.geom.Vector3D"] = openfl_geom_Vector3D;
openfl_geom_Vector3D.__name__ = ["openfl","geom","Vector3D"];
openfl_geom_Vector3D.__properties__ = {get_Z_AXIS:"get_Z_AXIS",get_Y_AXIS:"get_Y_AXIS",get_X_AXIS:"get_X_AXIS"}
openfl_geom_Vector3D.angleBetween = function(a,b) {
	var la = a.get_length();
	var lb = b.get_length();
	var dot = a.dotProduct(b);
	if(la != 0) {
		dot /= la;
	}
	if(lb != 0) {
		dot /= lb;
	}
	return Math.acos(dot);
};
openfl_geom_Vector3D.distance = function(pt1,pt2) {
	var x = pt2.x - pt1.x;
	var y = pt2.y - pt1.y;
	var z = pt2.z - pt1.z;
	return Math.sqrt(x * x + y * y + z * z);
};
openfl_geom_Vector3D.get_X_AXIS = function() {
	return new openfl_geom_Vector3D(1,0,0);
};
openfl_geom_Vector3D.get_Y_AXIS = function() {
	return new openfl_geom_Vector3D(0,1,0);
};
openfl_geom_Vector3D.get_Z_AXIS = function() {
	return new openfl_geom_Vector3D(0,0,1);
};
openfl_geom_Vector3D.prototype = {
	w: null
	,x: null
	,y: null
	,z: null
	,add: function(a) {
		return new openfl_geom_Vector3D(this.x + a.x,this.y + a.y,this.z + a.z);
	}
	,clone: function() {
		return new openfl_geom_Vector3D(this.x,this.y,this.z,this.w);
	}
	,copyFrom: function(sourceVector3D) {
		this.x = sourceVector3D.x;
		this.y = sourceVector3D.y;
		this.z = sourceVector3D.z;
	}
	,crossProduct: function(a) {
		return new openfl_geom_Vector3D(this.y * a.z - this.z * a.y,this.z * a.x - this.x * a.z,this.x * a.y - this.y * a.x,1);
	}
	,decrementBy: function(a) {
		this.x -= a.x;
		this.y -= a.y;
		this.z -= a.z;
	}
	,dotProduct: function(a) {
		return this.x * a.x + this.y * a.y + this.z * a.z;
	}
	,equals: function(toCompare,allFour) {
		if(allFour == null) {
			allFour = false;
		}
		if(this.x == toCompare.x && this.y == toCompare.y && this.z == toCompare.z) {
			if(!(!allFour)) {
				return this.w == toCompare.w;
			} else {
				return true;
			}
		} else {
			return false;
		}
	}
	,incrementBy: function(a) {
		this.x += a.x;
		this.y += a.y;
		this.z += a.z;
	}
	,nearEquals: function(toCompare,tolerance,allFour) {
		if(allFour == null) {
			allFour = false;
		}
		if(Math.abs(this.x - toCompare.x) < tolerance && Math.abs(this.y - toCompare.y) < tolerance && Math.abs(this.z - toCompare.z) < tolerance) {
			if(!(!allFour)) {
				return Math.abs(this.w - toCompare.w) < tolerance;
			} else {
				return true;
			}
		} else {
			return false;
		}
	}
	,negate: function() {
		this.x *= -1;
		this.y *= -1;
		this.z *= -1;
	}
	,normalize: function() {
		var l = this.get_length();
		if(l != 0) {
			this.x /= l;
			this.y /= l;
			this.z /= l;
		}
		return l;
	}
	,project: function() {
		this.x /= this.w;
		this.y /= this.w;
		this.z /= this.w;
	}
	,scaleBy: function(s) {
		this.x *= s;
		this.y *= s;
		this.z *= s;
	}
	,setTo: function(xa,ya,za) {
		this.x = xa;
		this.y = ya;
		this.z = za;
	}
	,subtract: function(a) {
		return new openfl_geom_Vector3D(this.x - a.x,this.y - a.y,this.z - a.z);
	}
	,toString: function() {
		return "Vector3D(" + this.x + ", " + this.y + ", " + this.z + ")";
	}
	,get_length: function() {
		return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
	}
	,get_lengthSquared: function() {
		return this.x * this.x + this.y * this.y + this.z * this.z;
	}
	,__class__: openfl_geom_Vector3D
	,__properties__: {get_lengthSquared:"get_lengthSquared",get_length:"get_length"}
};
var openfl_media_ID3Info = function() {
};
$hxClasses["openfl.media.ID3Info"] = openfl_media_ID3Info;
openfl_media_ID3Info.__name__ = ["openfl","media","ID3Info"];
openfl_media_ID3Info.prototype = {
	album: null
	,artist: null
	,comment: null
	,genre: null
	,songName: null
	,track: null
	,year: null
	,__class__: openfl_media_ID3Info
};
var openfl_media_Sound = function(stream,context) {
	openfl_events_EventDispatcher.call(this,this);
	this.bytesLoaded = 0;
	this.bytesTotal = 0;
	this.isBuffering = false;
	this.url = null;
	if(stream != null) {
		this.load(stream,context);
	}
};
$hxClasses["openfl.media.Sound"] = openfl_media_Sound;
openfl_media_Sound.__name__ = ["openfl","media","Sound"];
openfl_media_Sound.fromAudioBuffer = function(buffer) {
	var sound = new openfl_media_Sound();
	sound.__buffer = buffer;
	return sound;
};
openfl_media_Sound.fromFile = function(path) {
	return openfl_media_Sound.fromAudioBuffer(lime_audio_AudioBuffer.fromFile(path));
};
openfl_media_Sound.__super__ = openfl_events_EventDispatcher;
openfl_media_Sound.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	bytesLoaded: null
	,bytesTotal: null
	,isBuffering: null
	,url: null
	,__buffer: null
	,close: function() {
	}
	,load: function(stream,context) {
		var _gthis = this;
		this.url = stream.url;
		var key = this.url;
		var _this = lime_app_Preloader.audioBuffers;
		if(__map_reserved[key] != null ? _this.existsReserved(key) : _this.h.hasOwnProperty(key)) {
			var key1 = this.url;
			var _this1 = lime_app_Preloader.audioBuffers;
			this.AudioBuffer_onURLLoad(__map_reserved[key1] != null ? _this1.getReserved(key1) : _this1.h[key1]);
		} else {
			lime_audio_AudioBuffer.loadFromFile(this.url).onComplete($bind(this,this.AudioBuffer_onURLLoad)).onError(function(_) {
				_gthis.AudioBuffer_onURLLoad(null);
			});
		}
	}
	,loadCompressedDataFromByteArray: function(bytes,bytesLength,forcePlayAsMusic) {
		if(forcePlayAsMusic == null) {
			forcePlayAsMusic = false;
		}
		this.__buffer = lime_audio_AudioBuffer.fromBytes(openfl_utils__$ByteArray_ByteArray_$Impl_$.toBytes(bytes));
	}
	,loadPCMFromByteArray: function(bytes,samples,format,stereo,sampleRate) {
		if(sampleRate == null) {
			sampleRate = 44100;
		}
		if(stereo == null) {
			stereo = true;
		}
		this.__buffer = lime_audio_AudioBuffer.fromBytes(openfl_utils__$ByteArray_ByteArray_$Impl_$.toBytes(bytes));
	}
	,play: function(startTime,loops,sndTransform) {
		if(loops == null) {
			loops = 0;
		}
		if(startTime == null) {
			startTime = 0.0;
		}
		if(sndTransform == null) {
			sndTransform = new openfl_media_SoundTransform();
		} else {
			sndTransform = sndTransform.clone();
		}
		var pan = openfl_media_SoundMixer.__soundTransform.pan + sndTransform.pan;
		if(pan > 1) {
			pan = 1;
		}
		if(pan < -1) {
			pan = -1;
		}
		var volume = openfl_media_SoundMixer.__soundTransform.volume * sndTransform.volume;
		var source = new lime_audio_AudioSource(this.__buffer);
		source.offset = startTime | 0;
		if(loops > 1) {
			source.set_loops(loops - 1);
		}
		source.set_gain(volume);
		var position = source.get_position();
		position.x = pan;
		position.z = -1 * Math.sqrt(1 - Math.pow(pan,2));
		source.set_position(position);
		return new openfl_media_SoundChannel(source,sndTransform);
	}
	,get_id3: function() {
		return new openfl_media_ID3Info();
	}
	,get_length: function() {
		if(this.__buffer != null) {
			return this.__buffer.get_src().duration() * 1000 | 0;
		}
		return 0;
	}
	,AudioBuffer_onURLLoad: function(buffer) {
		if(buffer == null) {
			this.dispatchEvent(new openfl_events_IOErrorEvent("ioError"));
		} else {
			this.__buffer = buffer;
			this.dispatchEvent(new openfl_events_Event("complete"));
		}
	}
	,__class__: openfl_media_Sound
	,__properties__: {get_length:"get_length",get_id3:"get_id3"}
});
var openfl_media_SoundChannel = function(source,soundTransform) {
	openfl_events_EventDispatcher.call(this,this);
	this.leftPeak = 1;
	this.rightPeak = 1;
	if(soundTransform != null) {
		this.__soundTransform = soundTransform;
	} else {
		this.__soundTransform = new openfl_media_SoundTransform();
	}
	if(source != null) {
		this.__source = source;
		this.__source.onComplete.add($bind(this,this.source_onComplete));
		this.__isValid = true;
		this.__source.play();
	}
	openfl_media_SoundMixer.__registerSoundChannel(this);
};
$hxClasses["openfl.media.SoundChannel"] = openfl_media_SoundChannel;
openfl_media_SoundChannel.__name__ = ["openfl","media","SoundChannel"];
openfl_media_SoundChannel.__super__ = openfl_events_EventDispatcher;
openfl_media_SoundChannel.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	leftPeak: null
	,rightPeak: null
	,__isValid: null
	,__soundTransform: null
	,__source: null
	,stop: function() {
		openfl_media_SoundMixer.__unregisterSoundChannel(this);
		if(!this.__isValid) {
			return;
		}
		this.__source.stop();
		this.__dispose();
	}
	,__dispose: function() {
		if(!this.__isValid) {
			return;
		}
		this.__source.dispose();
		this.__isValid = false;
	}
	,__updateTransform: function() {
		this.set_soundTransform(this.get_soundTransform());
	}
	,get_position: function() {
		if(!this.__isValid) {
			return 0;
		}
		return this.__source.get_currentTime() + this.__source.offset;
	}
	,set_position: function(value) {
		if(!this.__isValid) {
			return 0;
		}
		this.__source.set_currentTime((value | 0) - this.__source.offset);
		return value;
	}
	,get_soundTransform: function() {
		return this.__soundTransform.clone();
	}
	,set_soundTransform: function(value) {
		if(value != null) {
			this.__soundTransform.pan = value.pan;
			this.__soundTransform.volume = value.volume;
			var pan = openfl_media_SoundMixer.__soundTransform.pan + this.__soundTransform.pan;
			if(pan < -1) {
				pan = -1;
			}
			if(pan > 1) {
				pan = 1;
			}
			if(this.__isValid) {
				this.__source.set_gain(openfl_media_SoundMixer.__soundTransform.volume * this.__soundTransform.volume);
				var position = this.__source.get_position();
				position.x = pan;
				position.z = -1 * Math.sqrt(1 - Math.pow(pan,2));
				this.__source.set_position(position);
				return value;
			}
		}
		return value;
	}
	,source_onComplete: function() {
		openfl_media_SoundMixer.__unregisterSoundChannel(this);
		this.__dispose();
		this.dispatchEvent(new openfl_events_Event("soundComplete"));
	}
	,__class__: openfl_media_SoundChannel
	,__properties__: {set_soundTransform:"set_soundTransform",get_soundTransform:"get_soundTransform",set_position:"set_position",get_position:"get_position"}
});
var openfl_media_SoundLoaderContext = function(bufferTime,checkPolicyFile) {
	if(checkPolicyFile == null) {
		checkPolicyFile = false;
	}
	if(bufferTime == null) {
		bufferTime = 1000;
	}
	this.bufferTime = bufferTime;
	this.checkPolicyFile = checkPolicyFile;
};
$hxClasses["openfl.media.SoundLoaderContext"] = openfl_media_SoundLoaderContext;
openfl_media_SoundLoaderContext.__name__ = ["openfl","media","SoundLoaderContext"];
openfl_media_SoundLoaderContext.prototype = {
	bufferTime: null
	,checkPolicyFile: null
	,__class__: openfl_media_SoundLoaderContext
};
var openfl_media_SoundTransform = function(vol,panning) {
	if(panning == null) {
		panning = 0;
	}
	if(vol == null) {
		vol = 1;
	}
	this.volume = vol;
	this.pan = panning;
	this.leftToLeft = 0;
	this.leftToRight = 0;
	this.rightToLeft = 0;
	this.rightToRight = 0;
};
$hxClasses["openfl.media.SoundTransform"] = openfl_media_SoundTransform;
openfl_media_SoundTransform.__name__ = ["openfl","media","SoundTransform"];
openfl_media_SoundTransform.prototype = {
	leftToLeft: null
	,leftToRight: null
	,pan: null
	,rightToLeft: null
	,rightToRight: null
	,volume: null
	,clone: function() {
		return new openfl_media_SoundTransform(this.volume,this.pan);
	}
	,__class__: openfl_media_SoundTransform
};
var openfl_media_SoundMixer = function() { };
$hxClasses["openfl.media.SoundMixer"] = openfl_media_SoundMixer;
openfl_media_SoundMixer.__name__ = ["openfl","media","SoundMixer"];
openfl_media_SoundMixer.__properties__ = {set_soundTransform:"set_soundTransform",get_soundTransform:"get_soundTransform"}
openfl_media_SoundMixer.areSoundsInaccessible = function() {
	return false;
};
openfl_media_SoundMixer.stopAll = function() {
	var _g = 0;
	var _g1 = openfl_media_SoundMixer.__soundChannels;
	while(_g < _g1.length) {
		var channel = _g1[_g];
		++_g;
		channel.stop();
	}
};
openfl_media_SoundMixer.__registerSoundChannel = function(soundChannel) {
	openfl_media_SoundMixer.__soundChannels.push(soundChannel);
};
openfl_media_SoundMixer.__unregisterSoundChannel = function(soundChannel) {
	HxOverrides.remove(openfl_media_SoundMixer.__soundChannels,soundChannel);
};
openfl_media_SoundMixer.get_soundTransform = function() {
	return openfl_media_SoundMixer.__soundTransform;
};
openfl_media_SoundMixer.set_soundTransform = function(value) {
	openfl_media_SoundMixer.__soundTransform = value.clone();
	var _g = 0;
	var _g1 = openfl_media_SoundMixer.__soundChannels;
	while(_g < _g1.length) {
		var channel = _g1[_g];
		++_g;
		channel.__updateTransform();
	}
	return value;
};
var openfl_net_NetConnection = function() {
	openfl_events_EventDispatcher.call(this);
};
$hxClasses["openfl.net.NetConnection"] = openfl_net_NetConnection;
openfl_net_NetConnection.__name__ = ["openfl","net","NetConnection"];
openfl_net_NetConnection.__super__ = openfl_events_EventDispatcher;
openfl_net_NetConnection.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	connect: function(command,_,_1,_2,_3,_4) {
		if(command != null) {
			throw new js__$Boot_HaxeError("Error: Can only connect in \"HTTP streaming\" mode");
		}
		this.dispatchEvent(new openfl_events_NetStatusEvent("netStatus",false,true,{ code : "connectSuccess"}));
	}
	,__class__: openfl_net_NetConnection
});
var openfl_net_NetStream = function(connection,peerID) {
	openfl_events_EventDispatcher.call(this);
	this.__connection = connection;
	this.__video = window.document.createElement("video");
	this.__video.addEventListener("error",$bind(this,this.video_onError),false);
	this.__video.addEventListener("waiting",$bind(this,this.video_onWaiting),false);
	this.__video.addEventListener("ended",$bind(this,this.video_onEnd),false);
	this.__video.addEventListener("pause",$bind(this,this.video_onPause),false);
	this.__video.addEventListener("seeking",$bind(this,this.video_onSeeking),false);
	this.__video.addEventListener("playing",$bind(this,this.video_onPlaying),false);
	this.__video.addEventListener("timeupdate",$bind(this,this.video_onTimeUpdate),false);
	this.__video.addEventListener("loadstart",$bind(this,this.video_onLoadStart),false);
	this.__video.addEventListener("stalled",$bind(this,this.video_onStalled),false);
	this.__video.addEventListener("durationchanged",$bind(this,this.video_onDurationChanged),false);
	this.__video.addEventListener("canplay",$bind(this,this.video_onCanPlay),false);
	this.__video.addEventListener("canplaythrough",$bind(this,this.video_onCanPlayThrough),false);
	this.__video.addEventListener("loadedmetadata",$bind(this,this.video_onLoadMetaData),false);
};
$hxClasses["openfl.net.NetStream"] = openfl_net_NetStream;
openfl_net_NetStream.__name__ = ["openfl","net","NetStream"];
openfl_net_NetStream.__super__ = openfl_events_EventDispatcher;
openfl_net_NetStream.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	audioCodec: null
	,bufferLength: null
	,bufferTime: null
	,bytesLoaded: null
	,bytesTotal: null
	,checkPolicyFile: null
	,client: null
	,currentFPS: null
	,decodedFrames: null
	,liveDelay: null
	,objectEncoding: null
	,soundTransform: null
	,time: null
	,videoCode: null
	,__connection: null
	,__timer: null
	,__video: null
	,close: function() {
		this.__video.pause();
		this.__video.src = "";
		this.time = 0;
	}
	,pause: function() {
		this.__video.pause();
	}
	,play: function(url,_,_1,_2,_3,_4) {
		this.__video.src = url;
		this.__video.play();
	}
	,requestVideoStatus: function() {
		var _gthis = this;
		if(this.__timer == null) {
			this.__timer = new haxe_Timer(1);
		}
		this.__timer.run = function() {
			if(_gthis.__video.paused) {
				_gthis.__playStatus("NetStream.Play.pause");
			} else {
				_gthis.__playStatus("NetStream.Play.playing");
			}
			_gthis.__timer.stop();
		};
	}
	,resume: function() {
		this.__video.play();
	}
	,seek: function(time) {
		if(time < 0) {
			time = 0;
		} else if(time > this.__video.duration) {
			time = this.__video.duration;
		}
		this.__video.currentTime = time;
	}
	,togglePause: function() {
		if(this.__video.paused) {
			this.__video.play();
		} else {
			this.__video.pause();
		}
	}
	,__playStatus: function(code) {
		if(this.client != null) {
			try {
				var handler = this.client.onPlayStatus;
				handler({ code : code, duration : this.__video.duration, position : this.__video.currentTime, speed : this.__video.playbackRate, start : this.__video.startTime});
			} catch( e ) {
				haxe_CallStack.lastException = e;
			}
		}
	}
	,video_onCanPlay: function(event) {
		this.__playStatus("NetStream.Play.canplay");
	}
	,video_onCanPlayThrough: function(event) {
		this.__playStatus("NetStream.Play.canplaythrough");
	}
	,video_onDurationChanged: function(event) {
		this.__playStatus("NetStream.Play.durationchanged");
	}
	,video_onEnd: function(event) {
		this.__connection.dispatchEvent(new openfl_events_NetStatusEvent("netStatus",false,false,{ code : "NetStream.Play.Stop"}));
		this.__playStatus("NetStream.Play.Complete");
	}
	,video_onError: function(event) {
		this.__connection.dispatchEvent(new openfl_events_NetStatusEvent("netStatus",false,false,{ code : "NetStream.Play.Stop"}));
		this.__playStatus("NetStream.Play.error");
	}
	,video_onLoadMetaData: function(event) {
		if(this.client != null) {
			try {
				this.client.onMetaData({ width : this.__video.videoWidth, height : this.__video.videoHeight, duration : this.__video.duration});
			} catch( e ) {
				haxe_CallStack.lastException = e;
			}
		}
	}
	,video_onLoadStart: function(event) {
		this.__playStatus("NetStream.Play.loadstart");
	}
	,video_onPause: function(event) {
		this.__playStatus("NetStream.Play.pause");
	}
	,video_onPlaying: function(event) {
		this.__connection.dispatchEvent(new openfl_events_NetStatusEvent("netStatus",false,false,{ code : "NetStream.Play.Start"}));
		this.__playStatus("NetStream.Play.playing");
	}
	,video_onSeeking: function(event) {
		this.__playStatus("NetStream.Play.seeking");
	}
	,video_onStalled: function(event) {
		this.__playStatus("NetStream.Play.stalled");
	}
	,video_onTimeUpdate: function(event) {
		this.time = this.__video.currentTime;
		this.__playStatus("NetStream.Play.timeupdate");
	}
	,video_onWaiting: function(event) {
		this.__playStatus("NetStream.Play.waiting");
	}
	,get_speed: function() {
		return this.__video.playbackRate;
	}
	,set_speed: function(value) {
		return this.__video.playbackRate = value;
	}
	,__class__: openfl_net_NetStream
	,__properties__: {set_speed:"set_speed",get_speed:"get_speed"}
});
var openfl_net_URLLoader = function(request) {
	openfl_events_EventDispatcher.call(this);
	this.bytesLoaded = 0;
	this.bytesTotal = 0;
	this.set_dataFormat(1);
	if(request != null) {
		this.load(request);
	}
};
$hxClasses["openfl.net.URLLoader"] = openfl_net_URLLoader;
openfl_net_URLLoader.__name__ = ["openfl","net","URLLoader"];
openfl_net_URLLoader.__super__ = openfl_events_EventDispatcher;
openfl_net_URLLoader.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	bytesLoaded: null
	,bytesTotal: null
	,data: null
	,dataFormat: null
	,close: function() {
	}
	,getData: function() {
		return null;
	}
	,load: function(request) {
		this.requestUrl(request.url,request.method,request.data,request.formatRequestHeaders());
	}
	,registerEvents: function(subject) {
		var self = this;
		if(typeof XMLHttpRequestProgressEvent != "undefined") {
			subject.addEventListener("progress",$bind(this,this.onProgress),false);
		}
		subject.onreadystatechange = function() {
			if(subject.readyState != 4) {
				return;
			}
			var s;
			try {
				s = subject.status;
			} catch( e ) {
				haxe_CallStack.lastException = e;
				s = null;
			}
			if(s == undefined) {
				s = null;
			}
			if(s != null) {
				self.onStatus(s);
			}
			if(s != null && s >= 200 && s < 400) {
				self.onData(subject.response);
			} else if(s == null) {
				self.onError("Failed to connect or resolve host");
			} else if(s == 12029) {
				self.onError("Failed to connect to host");
			} else if(s == 12007) {
				self.onError("Unknown host");
			} else if(s == 0) {
				self.onError("Unable to make request (may be blocked due to cross-domain permissions)");
				self.onSecurityError("Unable to make request (may be blocked due to cross-domain permissions)");
			} else {
				self.onError("Http Error #" + subject.status);
			}
		};
	}
	,requestUrl: function(url,method,data,requestHeaders) {
		var xmlHttpRequest = new XMLHttpRequest();
		this.registerEvents(xmlHttpRequest);
		var uri = "";
		if(js_Boot.__instanceof(data,openfl_utils_ByteArrayData)) {
			var data1 = data;
			var _g = this.dataFormat;
			if(_g == 0) {
				uri = js_Boot.__cast(data1 , ArrayBuffer);
			} else {
				uri = data1.readUTFBytes(data1.length);
			}
		} else if(js_Boot.__instanceof(data,openfl_net_URLVariables)) {
			var data2 = data;
			var _g1 = 0;
			var _g11 = Reflect.fields(data2);
			while(_g1 < _g11.length) {
				var p = _g11[_g1];
				++_g1;
				if(uri.length != 0) {
					uri += "&";
				}
				var uri1 = encodeURIComponent(p) + "=";
				var s = Reflect.field(data2,p);
				uri += uri1 + encodeURIComponent(s);
			}
		} else if(data != null) {
			uri = data.toString();
		}
		try {
			if(method == "GET" && uri != null && uri != "") {
				var question = url.split("?").length <= 1;
				xmlHttpRequest.open(method,url + (question ? "?" : "&") + Std.string(uri),true);
				uri = "";
			} else {
				xmlHttpRequest.open(method,url,true);
			}
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			this.onError(e.toString());
			return;
		}
		var _g2 = this.dataFormat;
		if(_g2 == 0) {
			xmlHttpRequest.responseType = "arraybuffer";
		}
		var _g12 = 0;
		while(_g12 < requestHeaders.length) {
			var header = requestHeaders[_g12];
			++_g12;
			xmlHttpRequest.setRequestHeader(header.name,header.value);
		}
		xmlHttpRequest.send(uri);
		this.onOpen();
		this.getData = function() {
			if(xmlHttpRequest.response != null) {
				return xmlHttpRequest.response;
			} else {
				return xmlHttpRequest.responseText;
			}
		};
	}
	,onData: function(_) {
		var content = this.getData();
		if(this.dataFormat == 0) {
			this.data = openfl_utils__$ByteArray_ByteArray_$Impl_$.fromArrayBuffer(content);
		} else {
			this.data = Std.string(content);
		}
		var evt = new openfl_events_Event("complete");
		evt.currentTarget = this;
		this.dispatchEvent(evt);
	}
	,onError: function(msg) {
		var evt = new openfl_events_IOErrorEvent("ioError");
		evt.text = msg;
		evt.currentTarget = this;
		this.dispatchEvent(evt);
	}
	,onOpen: function() {
		var evt = new openfl_events_Event("open");
		evt.currentTarget = this;
		this.dispatchEvent(evt);
	}
	,onProgress: function(event) {
		var evt = new openfl_events_ProgressEvent("progress");
		evt.currentTarget = this;
		evt.bytesLoaded = event.loaded;
		evt.bytesTotal = event.total;
		this.dispatchEvent(evt);
	}
	,onSecurityError: function(msg) {
		var evt = new openfl_events_SecurityErrorEvent("securityError");
		evt.text = msg;
		evt.currentTarget = this;
		this.dispatchEvent(evt);
	}
	,onStatus: function(status) {
		var evt = new openfl_events_HTTPStatusEvent("httpStatus",false,false,status);
		evt.currentTarget = this;
		this.dispatchEvent(evt);
	}
	,set_dataFormat: function(inputVal) {
		if(inputVal == 0 && !Object.prototype.hasOwnProperty.call(window,"ArrayBuffer")) {
			this.dataFormat = 1;
		} else {
			this.dataFormat = inputVal;
		}
		return this.dataFormat;
	}
	,__class__: openfl_net_URLLoader
	,__properties__: {set_dataFormat:"set_dataFormat"}
});
var openfl_net__$URLLoaderDataFormat_URLLoaderDataFormat_$Impl_$ = {};
$hxClasses["openfl.net._URLLoaderDataFormat.URLLoaderDataFormat_Impl_"] = openfl_net__$URLLoaderDataFormat_URLLoaderDataFormat_$Impl_$;
openfl_net__$URLLoaderDataFormat_URLLoaderDataFormat_$Impl_$.__name__ = ["openfl","net","_URLLoaderDataFormat","URLLoaderDataFormat_Impl_"];
openfl_net__$URLLoaderDataFormat_URLLoaderDataFormat_$Impl_$.fromString = function(value) {
	switch(value) {
	case "binary":
		return 0;
	case "text":
		return 1;
	case "variables":
		return 2;
	default:
		return null;
	}
};
openfl_net__$URLLoaderDataFormat_URLLoaderDataFormat_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "binary";
	case 1:
		return "text";
	case 2:
		return "variables";
	default:
		return null;
	}
};
var openfl_net_URLRequest = function(inURL) {
	if(inURL != null) {
		this.url = inURL;
	}
	this.requestHeaders = [];
	this.method = openfl_net__$URLRequestMethod_URLRequestMethod_$Impl_$.toString(1);
	this.contentType = null;
};
$hxClasses["openfl.net.URLRequest"] = openfl_net_URLRequest;
openfl_net_URLRequest.__name__ = ["openfl","net","URLRequest"];
openfl_net_URLRequest.prototype = {
	contentType: null
	,data: null
	,method: null
	,requestHeaders: null
	,url: null
	,userAgent: null
	,formatRequestHeaders: function() {
		var res = this.requestHeaders;
		if(res == null) {
			res = [];
		}
		if(openfl_net__$URLRequestMethod_URLRequestMethod_$Impl_$.fromString(this.method) == 1 || this.data == null) {
			return res;
		}
		if(typeof(this.data) == "string" || js_Boot.__instanceof(this.data,openfl_utils_ByteArrayData)) {
			res = res.slice();
			res.push(new openfl_net_URLRequestHeader("Content-Type",this.contentType != null ? this.contentType : "application/x-www-form-urlencoded"));
		}
		return res;
	}
	,__class__: openfl_net_URLRequest
};
var openfl_net_URLRequestHeader = function(name,value) {
	if(value == null) {
		value = "";
	}
	if(name == null) {
		name = "";
	}
	this.name = name;
	this.value = value;
};
$hxClasses["openfl.net.URLRequestHeader"] = openfl_net_URLRequestHeader;
openfl_net_URLRequestHeader.__name__ = ["openfl","net","URLRequestHeader"];
openfl_net_URLRequestHeader.prototype = {
	name: null
	,value: null
	,__class__: openfl_net_URLRequestHeader
};
var openfl_net__$URLRequestMethod_URLRequestMethod_$Impl_$ = {};
$hxClasses["openfl.net._URLRequestMethod.URLRequestMethod_Impl_"] = openfl_net__$URLRequestMethod_URLRequestMethod_$Impl_$;
openfl_net__$URLRequestMethod_URLRequestMethod_$Impl_$.__name__ = ["openfl","net","_URLRequestMethod","URLRequestMethod_Impl_"];
openfl_net__$URLRequestMethod_URLRequestMethod_$Impl_$.fromString = function(value) {
	switch(value) {
	case "DELETE":
		return 0;
	case "GET":
		return 1;
	case "HEAD":
		return 2;
	case "OPTIONS":
		return 3;
	case "POST":
		return 4;
	case "PUT":
		return 5;
	default:
		return null;
	}
};
openfl_net__$URLRequestMethod_URLRequestMethod_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "DELETE";
	case 1:
		return "GET";
	case 2:
		return "HEAD";
	case 3:
		return "OPTIONS";
	case 4:
		return "POST";
	case 5:
		return "PUT";
	default:
		return null;
	}
};
var openfl_net_URLVariables = function(source) {
	if(source != null) {
		this.decode(source);
	}
};
$hxClasses["openfl.net.URLVariables"] = openfl_net_URLVariables;
openfl_net_URLVariables.__name__ = ["openfl","net","URLVariables"];
openfl_net_URLVariables.prototype = {
	decode: function(source) {
		var fields = Reflect.fields(this);
		var _g = 0;
		while(_g < fields.length) {
			var f = fields[_g];
			++_g;
			Reflect.deleteField(this,f);
		}
		var fields1 = source.split(";").join("&").split("&");
		var _g1 = 0;
		while(_g1 < fields1.length) {
			var f1 = fields1[_g1];
			++_g1;
			var eq = f1.indexOf("=");
			if(eq > 0) {
				var s = HxOverrides.substr(f1,0,eq);
				var field = decodeURIComponent(s.split("+").join(" "));
				var s1 = HxOverrides.substr(f1,eq + 1,null);
				this[field] = decodeURIComponent(s1.split("+").join(" "));
			} else if(eq != 0) {
				this[decodeURIComponent(f1.split("+").join(" "))] = "";
			}
		}
	}
	,toString: function() {
		var result = [];
		var fields = Reflect.fields(this);
		var _g = 0;
		while(_g < fields.length) {
			var f = fields[_g];
			++_g;
			var tmp = encodeURIComponent(f) + "=";
			var s = Reflect.field(this,f);
			result.push(tmp + encodeURIComponent(s));
		}
		return result.join("&");
	}
	,__class__: openfl_net_URLVariables
};
var openfl_system_LoaderContext = function(checkPolicyFile,applicationDomain,securityDomain) {
	if(checkPolicyFile == null) {
		checkPolicyFile = false;
	}
	this.checkPolicyFile = checkPolicyFile;
	this.securityDomain = securityDomain;
	this.applicationDomain = applicationDomain;
	this.allowCodeImport = true;
	this.allowLoadBytesCodeExecution = true;
};
$hxClasses["openfl.system.LoaderContext"] = openfl_system_LoaderContext;
openfl_system_LoaderContext.__name__ = ["openfl","system","LoaderContext"];
openfl_system_LoaderContext.prototype = {
	allowCodeImport: null
	,allowLoadBytesCodeExecution: null
	,applicationDomain: null
	,checkPolicyFile: null
	,securityDomain: null
	,__class__: openfl_system_LoaderContext
};
var openfl_system_SecurityDomain = function() {
};
$hxClasses["openfl.system.SecurityDomain"] = openfl_system_SecurityDomain;
openfl_system_SecurityDomain.__name__ = ["openfl","system","SecurityDomain"];
openfl_system_SecurityDomain.prototype = {
	__class__: openfl_system_SecurityDomain
};
var openfl_text__$AntiAliasType_AntiAliasType_$Impl_$ = {};
$hxClasses["openfl.text._AntiAliasType.AntiAliasType_Impl_"] = openfl_text__$AntiAliasType_AntiAliasType_$Impl_$;
openfl_text__$AntiAliasType_AntiAliasType_$Impl_$.__name__ = ["openfl","text","_AntiAliasType","AntiAliasType_Impl_"];
openfl_text__$AntiAliasType_AntiAliasType_$Impl_$.fromString = function(value) {
	switch(value) {
	case "advanced":
		return 0;
	case "normal":
		return 1;
	default:
		return null;
	}
};
openfl_text__$AntiAliasType_AntiAliasType_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "advanced";
	case 1:
		return "normal";
	default:
		return null;
	}
};
var openfl_text_Font = function(name) {
	lime_text_Font.call(this,name);
};
$hxClasses["openfl.text.Font"] = openfl_text_Font;
openfl_text_Font.__name__ = ["openfl","text","Font"];
openfl_text_Font.enumerateFonts = function(enumerateDeviceFonts) {
	if(enumerateDeviceFonts == null) {
		enumerateDeviceFonts = false;
	}
	return openfl_text_Font.__registeredFonts;
};
openfl_text_Font.fromBytes = function(bytes) {
	var font = new openfl_text_Font();
	font.__fromBytes(openfl_utils__$ByteArray_ByteArray_$Impl_$.toBytes(bytes));
	return font;
};
openfl_text_Font.fromFile = function(path) {
	var font = new openfl_text_Font();
	font.__fromFile(path);
	return font;
};
openfl_text_Font.registerFont = function(font) {
	var instance = js_Boot.__cast(Type.createInstance(font,[]) , openfl_text_Font);
	if(instance != null) {
		openfl_text_Font.__registeredFonts.push(instance);
	}
};
openfl_text_Font.__fromLimeFont = function(value) {
	var font = new openfl_text_Font();
	font.name = value.name;
	font.src = value.src;
	return font;
};
openfl_text_Font.__super__ = lime_text_Font;
openfl_text_Font.prototype = $extend(lime_text_Font.prototype,{
	fontStyle: null
	,fontType: null
	,get_fontName: function() {
		return this.name;
	}
	,set_fontName: function(value) {
		return this.name = value;
	}
	,__class__: openfl_text_Font
	,__properties__: $extend(lime_text_Font.prototype.__properties__,{set_fontName:"set_fontName",get_fontName:"get_fontName"})
});
var openfl_text__$FontStyle_FontStyle_$Impl_$ = {};
$hxClasses["openfl.text._FontStyle.FontStyle_Impl_"] = openfl_text__$FontStyle_FontStyle_$Impl_$;
openfl_text__$FontStyle_FontStyle_$Impl_$.__name__ = ["openfl","text","_FontStyle","FontStyle_Impl_"];
openfl_text__$FontStyle_FontStyle_$Impl_$.fromString = function(value) {
	switch(value) {
	case "bold":
		return 0;
	case "boldItalic":
		return 1;
	case "italic":
		return 2;
	case "regular":
		return 3;
	default:
		return null;
	}
};
openfl_text__$FontStyle_FontStyle_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "bold";
	case 1:
		return "boldItalic";
	case 2:
		return "italic";
	case 3:
		return "regular";
	default:
		return null;
	}
};
var openfl_text__$FontType_FontType_$Impl_$ = {};
$hxClasses["openfl.text._FontType.FontType_Impl_"] = openfl_text__$FontType_FontType_$Impl_$;
openfl_text__$FontType_FontType_$Impl_$.__name__ = ["openfl","text","_FontType","FontType_Impl_"];
openfl_text__$FontType_FontType_$Impl_$.fromString = function(value) {
	switch(value) {
	case "device":
		return 0;
	case "embedded":
		return 1;
	case "embeddedCFF":
		return 2;
	default:
		return null;
	}
};
openfl_text__$FontType_FontType_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "device";
	case 1:
		return "embedded";
	case 2:
		return "embeddedCFF";
	default:
		return null;
	}
};
var openfl_text__$GridFitType_GridFitType_$Impl_$ = {};
$hxClasses["openfl.text._GridFitType.GridFitType_Impl_"] = openfl_text__$GridFitType_GridFitType_$Impl_$;
openfl_text__$GridFitType_GridFitType_$Impl_$.__name__ = ["openfl","text","_GridFitType","GridFitType_Impl_"];
openfl_text__$GridFitType_GridFitType_$Impl_$.fromString = function(value) {
	switch(value) {
	case "none":
		return 0;
	case "pixel":
		return 1;
	case "subpixel":
		return 2;
	default:
		return null;
	}
};
openfl_text__$GridFitType_GridFitType_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "none";
	case 1:
		return "pixel";
	case 2:
		return "subpixel";
	default:
		return null;
	}
};
var openfl_text__$TextFieldAutoSize_TextFieldAutoSize_$Impl_$ = {};
$hxClasses["openfl.text._TextFieldAutoSize.TextFieldAutoSize_Impl_"] = openfl_text__$TextFieldAutoSize_TextFieldAutoSize_$Impl_$;
openfl_text__$TextFieldAutoSize_TextFieldAutoSize_$Impl_$.__name__ = ["openfl","text","_TextFieldAutoSize","TextFieldAutoSize_Impl_"];
openfl_text__$TextFieldAutoSize_TextFieldAutoSize_$Impl_$.fromString = function(value) {
	switch(value) {
	case "center":
		return 0;
	case "left":
		return 1;
	case "none":
		return 2;
	case "right":
		return 3;
	default:
		return null;
	}
};
openfl_text__$TextFieldAutoSize_TextFieldAutoSize_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "center";
	case 1:
		return "left";
	case 2:
		return "none";
	case 3:
		return "right";
	default:
		return null;
	}
};
var openfl_text__$TextFieldType_TextFieldType_$Impl_$ = {};
$hxClasses["openfl.text._TextFieldType.TextFieldType_Impl_"] = openfl_text__$TextFieldType_TextFieldType_$Impl_$;
openfl_text__$TextFieldType_TextFieldType_$Impl_$.__name__ = ["openfl","text","_TextFieldType","TextFieldType_Impl_"];
openfl_text__$TextFieldType_TextFieldType_$Impl_$.fromString = function(value) {
	switch(value) {
	case "dynamic":
		return 0;
	case "input":
		return 1;
	default:
		return null;
	}
};
openfl_text__$TextFieldType_TextFieldType_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "dynamic";
	case 1:
		return "input";
	default:
		return null;
	}
};
var openfl_text_TextFormat = function(font,size,color,bold,italic,underline,url,target,align,leftMargin,rightMargin,indent,leading) {
	this.font = font;
	this.size = size;
	this.color = color;
	this.bold = bold;
	this.italic = italic;
	this.underline = underline;
	this.url = url;
	this.target = target;
	this.align = align;
	this.leftMargin = leftMargin;
	this.rightMargin = rightMargin;
	this.indent = indent;
	this.leading = leading;
};
$hxClasses["openfl.text.TextFormat"] = openfl_text_TextFormat;
openfl_text_TextFormat.__name__ = ["openfl","text","TextFormat"];
openfl_text_TextFormat.prototype = {
	align: null
	,blockIndent: null
	,bold: null
	,bullet: null
	,color: null
	,font: null
	,indent: null
	,italic: null
	,kerning: null
	,leading: null
	,leftMargin: null
	,letterSpacing: null
	,rightMargin: null
	,size: null
	,tabStops: null
	,target: null
	,underline: null
	,url: null
	,clone: function() {
		var newFormat = new openfl_text_TextFormat(this.font,this.size,this.color,this.bold,this.italic,this.underline,this.url,this.target);
		newFormat.align = this.align;
		newFormat.leftMargin = this.leftMargin;
		newFormat.rightMargin = this.rightMargin;
		newFormat.indent = this.indent;
		newFormat.leading = this.leading;
		newFormat.blockIndent = this.blockIndent;
		newFormat.bullet = this.bullet;
		newFormat.kerning = this.kerning;
		newFormat.letterSpacing = this.letterSpacing;
		newFormat.tabStops = this.tabStops;
		return newFormat;
	}
	,__merge: function(format) {
		if(format.font != null) {
			this.font = format.font;
		}
		if(format.size != null) {
			this.size = format.size;
		}
		if(format.color != null) {
			this.color = format.color;
		}
		if(format.bold != null) {
			this.bold = format.bold;
		}
		if(format.italic != null) {
			this.italic = format.italic;
		}
		if(format.underline != null) {
			this.underline = format.underline;
		}
		if(format.url != null) {
			this.url = format.url;
		}
		if(format.target != null) {
			this.target = format.target;
		}
		if(format.align != null) {
			this.align = format.align;
		}
		if(format.leftMargin != null) {
			this.leftMargin = format.leftMargin;
		}
		if(format.rightMargin != null) {
			this.rightMargin = format.rightMargin;
		}
		if(format.indent != null) {
			this.indent = format.indent;
		}
		if(format.leading != null) {
			this.leading = format.leading;
		}
		if(format.blockIndent != null) {
			this.blockIndent = format.blockIndent;
		}
		if(format.bullet != null) {
			this.bullet = format.bullet;
		}
		if(format.kerning != null) {
			this.kerning = format.kerning;
		}
		if(format.letterSpacing != null) {
			this.letterSpacing = format.letterSpacing;
		}
		if(format.tabStops != null) {
			this.tabStops = format.tabStops;
		}
	}
	,__class__: openfl_text_TextFormat
};
var openfl_text__$TextFormatAlign_TextFormatAlign_$Impl_$ = {};
$hxClasses["openfl.text._TextFormatAlign.TextFormatAlign_Impl_"] = openfl_text__$TextFormatAlign_TextFormatAlign_$Impl_$;
openfl_text__$TextFormatAlign_TextFormatAlign_$Impl_$.__name__ = ["openfl","text","_TextFormatAlign","TextFormatAlign_Impl_"];
openfl_text__$TextFormatAlign_TextFormatAlign_$Impl_$.fromString = function(value) {
	switch(value) {
	case "center":
		return 0;
	case "end":
		return 1;
	case "justify":
		return 2;
	case "left":
		return 3;
	case "right":
		return 4;
	case "start":
		return 5;
	default:
		return null;
	}
};
openfl_text__$TextFormatAlign_TextFormatAlign_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "center";
	case 1:
		return "end";
	case 2:
		return "justify";
	case 3:
		return "left";
	case 4:
		return "right";
	case 5:
		return "start";
	default:
		return null;
	}
};
var openfl_text_TextLineMetrics = function(x,width,height,ascent,descent,leading) {
	this.x = x;
	this.width = width;
	this.height = height;
	this.ascent = ascent;
	this.descent = descent;
	this.leading = leading;
};
$hxClasses["openfl.text.TextLineMetrics"] = openfl_text_TextLineMetrics;
openfl_text_TextLineMetrics.__name__ = ["openfl","text","TextLineMetrics"];
openfl_text_TextLineMetrics.prototype = {
	ascent: null
	,descent: null
	,height: null
	,leading: null
	,width: null
	,x: null
	,__class__: openfl_text_TextLineMetrics
};
var openfl_ui_GameInput = function() {
	openfl_events_EventDispatcher.call(this);
	openfl_ui_GameInput.__instances.push(this);
};
$hxClasses["openfl.ui.GameInput"] = openfl_ui_GameInput;
openfl_ui_GameInput.__name__ = ["openfl","ui","GameInput"];
openfl_ui_GameInput.getDeviceAt = function(index) {
	if(index >= 0 && index < openfl_ui_GameInput.__deviceList.length) {
		return openfl_ui_GameInput.__deviceList[index];
	}
	return null;
};
openfl_ui_GameInput.__getDevice = function(gamepad) {
	if(gamepad == null) {
		return null;
	}
	if(openfl_ui_GameInput.__devices.h.__keys__[gamepad.__id__] == null) {
		var device = new openfl_ui_GameInputDevice(lime_ui_Joystick.__getDeviceData()[gamepad.id].id,lime_ui_Joystick.__getDeviceData()[gamepad.id].id);
		openfl_ui_GameInput.__deviceList.push(device);
		openfl_ui_GameInput.__devices.set(gamepad,device);
		openfl_ui_GameInput.numDevices = openfl_ui_GameInput.__deviceList.length;
	}
	return openfl_ui_GameInput.__devices.h[gamepad.__id__];
};
openfl_ui_GameInput.__onGamepadAxisMove = function(gamepad,axis,value) {
	var device = openfl_ui_GameInput.__getDevice(gamepad);
	if(device == null) {
		return;
	}
	if(device.enabled) {
		if(!device.__axis.h.hasOwnProperty(axis)) {
			var control;
			switch(axis) {
			case 0:
				control = "LEFT_X";
				break;
			case 1:
				control = "LEFT_Y";
				break;
			case 2:
				control = "RIGHT_X";
				break;
			case 3:
				control = "RIGHT_Y";
				break;
			case 4:
				control = "TRIGGER_LEFT";
				break;
			case 5:
				control = "TRIGGER_RIGHT";
				break;
			default:
				control = "UNKNOWN (" + axis + ")";
			}
			var control1 = new openfl_ui_GameInputControl(device,"AXIS_" + control,-1,1);
			device.__axis.h[axis] = control1;
			device.__controls.push(control1);
		}
		var control2 = device.__axis.h[axis];
		control2.value = value;
		control2.dispatchEvent(new openfl_events_Event("change"));
	}
};
openfl_ui_GameInput.__onGamepadButtonDown = function(gamepad,button) {
	var device = openfl_ui_GameInput.__getDevice(gamepad);
	if(device == null) {
		return;
	}
	if(device.enabled) {
		if(!device.__button.h.hasOwnProperty(button)) {
			var control;
			switch(button) {
			case 0:
				control = "A";
				break;
			case 1:
				control = "B";
				break;
			case 2:
				control = "X";
				break;
			case 3:
				control = "Y";
				break;
			case 4:
				control = "BACK";
				break;
			case 5:
				control = "GUIDE";
				break;
			case 6:
				control = "START";
				break;
			case 7:
				control = "LEFT_STICK";
				break;
			case 8:
				control = "RIGHT_STICK";
				break;
			case 9:
				control = "LEFT_SHOULDER";
				break;
			case 10:
				control = "RIGHT_SHOULDER";
				break;
			case 11:
				control = "DPAD_UP";
				break;
			case 12:
				control = "DPAD_DOWN";
				break;
			case 13:
				control = "DPAD_LEFT";
				break;
			case 14:
				control = "DPAD_RIGHT";
				break;
			default:
				control = "UNKNOWN (" + button + ")";
			}
			var control1 = new openfl_ui_GameInputControl(device,"BUTTON_" + control,0,1);
			device.__button.h[button] = control1;
			device.__controls.push(control1);
		}
		var control2 = device.__button.h[button];
		control2.value = 1;
		control2.dispatchEvent(new openfl_events_Event("change"));
	}
};
openfl_ui_GameInput.__onGamepadButtonUp = function(gamepad,button) {
	var device = openfl_ui_GameInput.__getDevice(gamepad);
	if(device == null) {
		return;
	}
	if(device.enabled) {
		if(!device.__button.h.hasOwnProperty(button)) {
			var control;
			switch(button) {
			case 0:
				control = "A";
				break;
			case 1:
				control = "B";
				break;
			case 2:
				control = "X";
				break;
			case 3:
				control = "Y";
				break;
			case 4:
				control = "BACK";
				break;
			case 5:
				control = "GUIDE";
				break;
			case 6:
				control = "START";
				break;
			case 7:
				control = "LEFT_STICK";
				break;
			case 8:
				control = "RIGHT_STICK";
				break;
			case 9:
				control = "LEFT_SHOULDER";
				break;
			case 10:
				control = "RIGHT_SHOULDER";
				break;
			case 11:
				control = "DPAD_UP";
				break;
			case 12:
				control = "DPAD_DOWN";
				break;
			case 13:
				control = "DPAD_LEFT";
				break;
			case 14:
				control = "DPAD_RIGHT";
				break;
			default:
				control = "UNKNOWN (" + button + ")";
			}
			var control1 = new openfl_ui_GameInputControl(device,"BUTTON_" + control,0,1);
			device.__button.h[button] = control1;
			device.__controls.push(control1);
		}
		var control2 = device.__button.h[button];
		control2.value = 0;
		control2.dispatchEvent(new openfl_events_Event("change"));
	}
};
openfl_ui_GameInput.__onGamepadConnect = function(gamepad) {
	var device = openfl_ui_GameInput.__getDevice(gamepad);
	if(device == null) {
		return;
	}
	var _g = 0;
	var _g1 = openfl_ui_GameInput.__instances;
	while(_g < _g1.length) {
		var instance = _g1[_g];
		++_g;
		instance.dispatchEvent(new openfl_events_GameInputEvent("deviceAdded",null,null,device));
	}
};
openfl_ui_GameInput.__onGamepadDisconnect = function(gamepad) {
	var device = openfl_ui_GameInput.__devices.h[gamepad.__id__];
	if(device != null) {
		if(openfl_ui_GameInput.__devices.h.__keys__[gamepad.__id__] != null) {
			HxOverrides.remove(openfl_ui_GameInput.__deviceList,openfl_ui_GameInput.__devices.h[gamepad.__id__]);
			openfl_ui_GameInput.__devices.remove(gamepad);
		}
		openfl_ui_GameInput.numDevices = openfl_ui_GameInput.__deviceList.length;
		var _g = 0;
		var _g1 = openfl_ui_GameInput.__instances;
		while(_g < _g1.length) {
			var instance = _g1[_g];
			++_g;
			instance.dispatchEvent(new openfl_events_GameInputEvent("deviceRemoved",null,null,device));
		}
	}
};
openfl_ui_GameInput.__super__ = openfl_events_EventDispatcher;
openfl_ui_GameInput.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	__class__: openfl_ui_GameInput
});
var openfl_ui_GameInputControl = function(device,id,minValue,maxValue,value) {
	if(value == null) {
		value = 0;
	}
	openfl_events_EventDispatcher.call(this);
	this.device = device;
	this.id = id;
	this.minValue = minValue;
	this.maxValue = maxValue;
	this.value = value;
};
$hxClasses["openfl.ui.GameInputControl"] = openfl_ui_GameInputControl;
openfl_ui_GameInputControl.__name__ = ["openfl","ui","GameInputControl"];
openfl_ui_GameInputControl.__super__ = openfl_events_EventDispatcher;
openfl_ui_GameInputControl.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	device: null
	,id: null
	,maxValue: null
	,minValue: null
	,value: null
	,__class__: openfl_ui_GameInputControl
});
var openfl_ui_GameInputDevice = function(id,name) {
	this.__controls = [];
	this.__button = new haxe_ds_IntMap();
	this.__axis = new haxe_ds_IntMap();
	this.id = id;
	this.name = name;
	var control;
	var _g = 0;
	while(_g < 6) {
		var i = _g++;
		control = new openfl_ui_GameInputControl(this,"AXIS_" + i,-1,1);
		this.__axis.h[i] = control;
		this.__controls.push(control);
	}
	var _g1 = 0;
	while(_g1 < 15) {
		var i1 = _g1++;
		control = new openfl_ui_GameInputControl(this,"BUTTON_" + i1,0,1);
		this.__button.h[i1] = control;
		this.__controls.push(control);
	}
};
$hxClasses["openfl.ui.GameInputDevice"] = openfl_ui_GameInputDevice;
openfl_ui_GameInputDevice.__name__ = ["openfl","ui","GameInputDevice"];
openfl_ui_GameInputDevice.prototype = {
	enabled: null
	,id: null
	,name: null
	,sampleInterval: null
	,__axis: null
	,__button: null
	,__controls: null
	,__gamepad: null
	,getCachedSamples: function(data,append) {
		if(append == null) {
			append = false;
		}
		return 0;
	}
	,getControlAt: function(i) {
		if(i >= 0 && i < this.__controls.length) {
			return this.__controls[i];
		}
		return null;
	}
	,startCachingSamples: function(numSamples,controls) {
	}
	,stopCachingSamples: function() {
	}
	,get_numControls: function() {
		return this.__controls.length;
	}
	,__class__: openfl_ui_GameInputDevice
	,__properties__: {get_numControls:"get_numControls"}
};
var openfl_ui_Keyboard = function() { };
$hxClasses["openfl.ui.Keyboard"] = openfl_ui_Keyboard;
openfl_ui_Keyboard.__name__ = ["openfl","ui","Keyboard"];
openfl_ui_Keyboard.isAccessible = function() {
	return false;
};
openfl_ui_Keyboard.__convertKeyCode = function(key) {
	switch(key) {
	case 8:
		return 8;
	case 9:
		return 9;
	case 13:
		return 13;
	case 27:
		return 27;
	case 32:
		return 32;
	case 33:
		return 49;
	case 34:
		return 222;
	case 35:
		return 51;
	case 36:
		return 52;
	case 37:
		return 53;
	case 38:
		return 55;
	case 39:
		return 222;
	case 40:
		return 57;
	case 41:
		return 48;
	case 42:
		return 56;
	case 44:
		return 188;
	case 45:
		return 189;
	case 46:
		return 190;
	case 47:
		return 191;
	case 48:
		return 48;
	case 49:
		return 49;
	case 50:
		return 50;
	case 51:
		return 51;
	case 52:
		return 52;
	case 53:
		return 53;
	case 54:
		return 54;
	case 55:
		return 55;
	case 56:
		return 56;
	case 57:
		return 57;
	case 58:
		return 186;
	case 59:
		return 186;
	case 60:
		return 60;
	case 61:
		return 187;
	case 62:
		return 190;
	case 63:
		return 191;
	case 64:
		return 50;
	case 91:
		return 219;
	case 92:
		return 220;
	case 93:
		return 221;
	case 94:
		return 54;
	case 95:
		return 189;
	case 96:
		return 192;
	case 97:
		return 65;
	case 98:
		return 66;
	case 99:
		return 67;
	case 100:
		return 68;
	case 101:
		return 69;
	case 102:
		return 70;
	case 103:
		return 71;
	case 104:
		return 72;
	case 105:
		return 73;
	case 106:
		return 74;
	case 107:
		return 75;
	case 108:
		return 76;
	case 109:
		return 77;
	case 110:
		return 78;
	case 111:
		return 79;
	case 112:
		return 80;
	case 113:
		return 81;
	case 114:
		return 82;
	case 115:
		return 83;
	case 116:
		return 84;
	case 117:
		return 85;
	case 118:
		return 86;
	case 119:
		return 87;
	case 120:
		return 88;
	case 121:
		return 89;
	case 122:
		return 90;
	case 127:
		return 46;
	case 1073741881:
		return 20;
	case 1073741882:
		return 112;
	case 1073741883:
		return 113;
	case 1073741884:
		return 114;
	case 1073741885:
		return 115;
	case 1073741886:
		return 116;
	case 1073741887:
		return 117;
	case 1073741888:
		return 118;
	case 1073741889:
		return 119;
	case 1073741890:
		return 120;
	case 1073741891:
		return 121;
	case 1073741892:
		return 122;
	case 1073741893:
		return 123;
	case 1073741894:
		return 301;
	case 1073741895:
		return 145;
	case 1073741896:
		return 19;
	case 1073741897:
		return 45;
	case 1073741898:
		return 36;
	case 1073741899:
		return 33;
	case 1073741901:
		return 35;
	case 1073741902:
		return 34;
	case 1073741903:
		return 39;
	case 1073741904:
		return 37;
	case 1073741905:
		return 40;
	case 1073741906:
		return 38;
	case 1073741907:
		return 144;
	case 1073741908:
		return 111;
	case 1073741909:
		return 106;
	case 1073741910:
		return 109;
	case 1073741911:
		return 107;
	case 1073741912:
		return 108;
	case 1073741913:
		return 97;
	case 1073741914:
		return 98;
	case 1073741915:
		return 99;
	case 1073741916:
		return 100;
	case 1073741917:
		return 101;
	case 1073741918:
		return 102;
	case 1073741919:
		return 103;
	case 1073741920:
		return 104;
	case 1073741921:
		return 105;
	case 1073741922:
		return 96;
	case 1073741923:
		return 110;
	case 1073741925:
		return 302;
	case 1073741928:
		return 124;
	case 1073741929:
		return 125;
	case 1073741930:
		return 126;
	case 1073741982:
		return 13;
	case 1073742044:
		return 110;
	case 1073742048:
		return 17;
	case 1073742049:
		return 16;
	case 1073742050:
		return 18;
	case 1073742051:
		return 15;
	case 1073742052:
		return 17;
	case 1073742053:
		return 16;
	case 1073742054:
		return 18;
	case 1073742055:
		return 15;
	default:
		return key;
	}
};
openfl_ui_Keyboard.__getCharCode = function(key,shift) {
	if(shift == null) {
		shift = false;
	}
	if(!shift) {
		switch(key) {
		case 8:
			return 8;
		case 9:
			return 9;
		case 13:
			return 13;
		case 27:
			return 27;
		case 32:
			return 32;
		case 186:
			return 59;
		case 187:
			return 61;
		case 188:
			return 44;
		case 189:
			return 45;
		case 190:
			return 46;
		case 191:
			return 47;
		case 192:
			return 96;
		case 219:
			return 91;
		case 220:
			return 92;
		case 221:
			return 93;
		case 222:
			return 39;
		}
		if(key >= 48 && key <= 57) {
			return key - 48 + 48;
		}
		if(key >= 65 && key <= 90) {
			return key - 65 + 97;
		}
	} else {
		switch(key) {
		case 48:
			return 41;
		case 49:
			return 33;
		case 50:
			return 64;
		case 51:
			return 35;
		case 52:
			return 36;
		case 53:
			return 37;
		case 54:
			return 94;
		case 55:
			return 38;
		case 56:
			return 42;
		case 57:
			return 40;
		case 186:
			return 58;
		case 187:
			return 43;
		case 188:
			return 60;
		case 189:
			return 95;
		case 190:
			return 62;
		case 191:
			return 63;
		case 192:
			return 126;
		case 219:
			return 123;
		case 220:
			return 124;
		case 221:
			return 125;
		case 222:
			return 34;
		}
		if(key >= 65 && key <= 90) {
			return key - 65 + 65;
		}
	}
	if(key >= 96 && key <= 105) {
		return key - 96 + 48;
	}
	switch(key) {
	case 8:
		return 8;
	case 13:
		return 13;
	case 46:
		return 127;
	case 106:
		return 42;
	case 107:
		return 43;
	case 108:
		return 44;
	case 110:
		return 45;
	case 111:
		return 46;
	}
	return 0;
};
openfl_ui_Keyboard.__getKeyLocation = function(key) {
	switch(key) {
	case 1073741908:case 1073741909:case 1073741910:case 1073741911:case 1073741912:case 1073741913:case 1073741914:case 1073741915:case 1073741916:case 1073741917:case 1073741918:case 1073741919:case 1073741920:case 1073741921:case 1073741922:case 1073741923:case 1073742044:
		return 3;
	case 1073742048:case 1073742049:case 1073742050:case 1073742051:
		return 1;
	case 1073742052:case 1073742053:case 1073742054:case 1073742055:
		return 2;
	default:
		return 0;
	}
};
var openfl_ui_Mouse = function() { };
$hxClasses["openfl.ui.Mouse"] = openfl_ui_Mouse;
openfl_ui_Mouse.__name__ = ["openfl","ui","Mouse"];
openfl_ui_Mouse.__properties__ = {set_cursor:"set_cursor",get_cursor:"get_cursor"}
openfl_ui_Mouse.hide = function() {
	lime_ui_Mouse.hide();
};
openfl_ui_Mouse.show = function() {
	lime_ui_Mouse.show();
};
openfl_ui_Mouse.get_cursor = function() {
	return openfl_ui_Mouse.__cursor;
};
openfl_ui_Mouse.set_cursor = function(value) {
	switch(value) {
	case "arrow":
		lime_ui_Mouse.set_cursor(lime_ui_MouseCursor.ARROW);
		break;
	case "button":
		lime_ui_Mouse.set_cursor(lime_ui_MouseCursor.POINTER);
		break;
	case "hand":
		lime_ui_Mouse.set_cursor(lime_ui_MouseCursor.MOVE);
		break;
	case "ibeam":
		lime_ui_Mouse.set_cursor(lime_ui_MouseCursor.TEXT);
		break;
	default:
	}
	return openfl_ui_Mouse.__cursor = value;
};
var openfl_utils__$ByteArray_ByteArray_$Impl_$ = {};
$hxClasses["openfl.utils._ByteArray.ByteArray_Impl_"] = openfl_utils__$ByteArray_ByteArray_$Impl_$;
openfl_utils__$ByteArray_ByteArray_$Impl_$.__name__ = ["openfl","utils","_ByteArray","ByteArray_Impl_"];
openfl_utils__$ByteArray_ByteArray_$Impl_$.__properties__ = {set_length:"set_length",get_length:"get_length"}
openfl_utils__$ByteArray_ByteArray_$Impl_$._new = function(length) {
	if(length == null) {
		length = 0;
	}
	return new openfl_utils_ByteArrayData(length);
};
openfl_utils__$ByteArray_ByteArray_$Impl_$.get = function(this1,index) {
	return this1.b[index];
};
openfl_utils__$ByteArray_ByteArray_$Impl_$.set = function(this1,index,value) {
	this1.__resize(index + 1);
	this1.b[index] = value & 255;
	return value;
};
openfl_utils__$ByteArray_ByteArray_$Impl_$.fromArrayBuffer = function(buffer) {
	if(buffer == null) {
		return null;
	}
	return openfl_utils_ByteArrayData.fromBytes(haxe_io_Bytes.ofData(buffer));
};
openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytes = function(bytes) {
	if(bytes == null) {
		return null;
	}
	if(js_Boot.__instanceof(bytes,openfl_utils_ByteArrayData)) {
		return bytes;
	} else {
		return openfl_utils_ByteArrayData.fromBytes(bytes);
	}
};
openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytesData = function(bytesData) {
	if(bytesData == null) {
		return null;
	}
	return openfl_utils_ByteArrayData.fromBytes(haxe_io_Bytes.ofData(bytesData));
};
openfl_utils__$ByteArray_ByteArray_$Impl_$.fromFile = function(path) {
	return openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytes(lime_utils_Bytes.readFile(path));
};
openfl_utils__$ByteArray_ByteArray_$Impl_$.toArrayBuffer = function(byteArray) {
	return byteArray.b.bufferValue;
};
openfl_utils__$ByteArray_ByteArray_$Impl_$.toBytes = function(byteArray) {
	return byteArray;
};
openfl_utils__$ByteArray_ByteArray_$Impl_$.toBytesData = function(byteArray) {
	return byteArray.b.bufferValue;
};
openfl_utils__$ByteArray_ByteArray_$Impl_$.toLimeBytes = function(byteArray) {
	return new lime_utils_Bytes(openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(byteArray),byteArray.b.bufferValue);
};
openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length = function(this1) {
	return this1.length;
};
openfl_utils__$ByteArray_ByteArray_$Impl_$.set_length = function(this1,value) {
	if(value > 0) {
		this1.__resize(value);
	}
	this1.length = value;
	return value;
};
var openfl_utils__$CompressionAlgorithm_CompressionAlgorithm_$Impl_$ = {};
$hxClasses["openfl.utils._CompressionAlgorithm.CompressionAlgorithm_Impl_"] = openfl_utils__$CompressionAlgorithm_CompressionAlgorithm_$Impl_$;
openfl_utils__$CompressionAlgorithm_CompressionAlgorithm_$Impl_$.__name__ = ["openfl","utils","_CompressionAlgorithm","CompressionAlgorithm_Impl_"];
openfl_utils__$CompressionAlgorithm_CompressionAlgorithm_$Impl_$.fromString = function(value) {
	switch(value) {
	case "deflate":
		return 0;
	case "lzma":
		return 1;
	case "zlib":
		return 2;
	default:
		return null;
	}
};
openfl_utils__$CompressionAlgorithm_CompressionAlgorithm_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "deflate";
	case 1:
		return "lzma";
	case 2:
		return "zlib";
	default:
		return null;
	}
};
var openfl_utils__$Endian_Endian_$Impl_$ = {};
$hxClasses["openfl.utils._Endian.Endian_Impl_"] = openfl_utils__$Endian_Endian_$Impl_$;
openfl_utils__$Endian_Endian_$Impl_$.__name__ = ["openfl","utils","_Endian","Endian_Impl_"];
openfl_utils__$Endian_Endian_$Impl_$.fromString = function(value) {
	switch(value) {
	case "bigEndian":
		return 0;
	case "littleEndian":
		return 1;
	default:
		return null;
	}
};
openfl_utils__$Endian_Endian_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "bigEndian";
	case 1:
		return "littleEndian";
	default:
		return null;
	}
};
var openfl_utils__$Object_Object_$Impl_$ = {};
$hxClasses["openfl.utils._Object.Object_Impl_"] = openfl_utils__$Object_Object_$Impl_$;
openfl_utils__$Object_Object_$Impl_$.__name__ = ["openfl","utils","_Object","Object_Impl_"];
openfl_utils__$Object_Object_$Impl_$._new = function() {
	return { };
};
openfl_utils__$Object_Object_$Impl_$.hasOwnProperty = function(this1,name) {
	if(this1 != null) {
		return Object.prototype.hasOwnProperty.call(this1,name);
	} else {
		return false;
	}
};
openfl_utils__$Object_Object_$Impl_$.isPrototypeOf = function(this1,theClass) {
	var c = this1 == null ? null : js_Boot.getClass(this1);
	while(c != null) {
		if(c == theClass) {
			return true;
		}
		c = Type.getSuperClass(c);
	}
	return false;
};
openfl_utils__$Object_Object_$Impl_$.iterator = function(this1) {
	var fields = Reflect.fields(this1);
	if(fields == null) {
		fields = [];
	}
	return HxOverrides.iter(fields);
};
openfl_utils__$Object_Object_$Impl_$.propertyIsEnumerable = function(this1,name) {
	if(this1 != null && Object.prototype.hasOwnProperty.call(this1,name)) {
		return js_Boot.__instanceof(Reflect.field(this1,name),haxe_lang_Iterable);
	} else {
		return false;
	}
};
openfl_utils__$Object_Object_$Impl_$.toLocaleString = function(this1) {
	return Std.string(this1);
};
openfl_utils__$Object_Object_$Impl_$.toString = function(this1) {
	return Std.string(this1);
};
openfl_utils__$Object_Object_$Impl_$.valueOf = function(this1) {
	return this1;
};
openfl_utils__$Object_Object_$Impl_$.__get = function(this1,key) {
	return Reflect.field(this1,key);
};
openfl_utils__$Object_Object_$Impl_$.__set = function(this1,key,value) {
	this1[key] = value;
	return value;
};
var haxe_lang_Iterator = function() { };
$hxClasses["haxe.lang.Iterator"] = haxe_lang_Iterator;
haxe_lang_Iterator.__name__ = ["haxe","lang","Iterator"];
haxe_lang_Iterator.prototype = {
	hasNext: null
	,next: null
	,__class__: haxe_lang_Iterator
};
var haxe_lang_Iterable = function() { };
$hxClasses["haxe.lang.Iterable"] = haxe_lang_Iterable;
haxe_lang_Iterable.__name__ = ["haxe","lang","Iterable"];
haxe_lang_Iterable.prototype = {
	iterator: null
	,__class__: haxe_lang_Iterable
};
var openfl_utils_Timer = function(delay,repeatCount) {
	if(repeatCount == null) {
		repeatCount = 0;
	}
	if(isNaN(delay) || delay < 0) {
		throw new js__$Boot_HaxeError(new openfl_errors_Error("The delay specified is negative or not a finite number"));
	}
	openfl_events_EventDispatcher.call(this);
	this.__delay = delay;
	this.set_repeatCount(repeatCount);
	this.running = false;
	this.currentCount = 0;
};
$hxClasses["openfl.utils.Timer"] = openfl_utils_Timer;
openfl_utils_Timer.__name__ = ["openfl","utils","Timer"];
openfl_utils_Timer.__super__ = openfl_events_EventDispatcher;
openfl_utils_Timer.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	currentCount: null
	,repeatCount: null
	,running: null
	,__delay: null
	,__timer: null
	,__timerID: null
	,reset: function() {
		if(this.running) {
			this.stop();
		}
		this.currentCount = 0;
	}
	,start: function() {
		if(!this.running) {
			this.running = true;
			this.__timerID = window.setInterval($bind(this,this.timer_onTimer),this.__delay | 0);
		}
	}
	,stop: function() {
		this.running = false;
		if(this.__timerID != null) {
			window.clearInterval(this.__timerID);
			this.__timerID = null;
		}
	}
	,get_delay: function() {
		return this.__delay;
	}
	,set_delay: function(value) {
		this.__delay = value;
		if(this.running) {
			this.stop();
			this.start();
		}
		return this.__delay;
	}
	,set_repeatCount: function(v) {
		if(this.running && v != 0 && v <= this.currentCount) {
			this.stop();
		}
		this.repeatCount = v;
		return v;
	}
	,timer_onTimer: function() {
		this.currentCount++;
		if(this.repeatCount > 0 && this.currentCount >= this.repeatCount) {
			this.stop();
			this.dispatchEvent(new openfl_events_TimerEvent("timer"));
			this.dispatchEvent(new openfl_events_TimerEvent("timerComplete"));
		} else {
			this.dispatchEvent(new openfl_events_TimerEvent("timer"));
		}
	}
	,__class__: openfl_utils_Timer
	,__properties__: {set_repeatCount:"set_repeatCount",set_delay:"set_delay",get_delay:"get_delay"}
});
var returns_BotDecision = function(targetTeam,targetPos,abilityPos) {
	if(false == (targetPos >= 0 && targetPos <= 2 && abilityPos >= 0 && abilityPos <= 8)) {
		hxassert_Assert.throwAssertionFailureError(["Assertion failed: targetPos >= 0 && targetPos <= 2 && abilityPos >= 0 && abilityPos <= 8"],{ fileName : "BotDecision.hx", lineNumber : 19, className : "returns.BotDecision", methodName : "new"});
	}
	this.targetTeam = targetTeam;
	this.targetPos = targetPos;
	this.abilityPos = abilityPos;
};
$hxClasses["returns.BotDecision"] = returns_BotDecision;
returns_BotDecision.__name__ = ["returns","BotDecision"];
returns_BotDecision.prototype = {
	targetTeam: null
	,targetPos: null
	,abilityPos: null
	,__class__: returns_BotDecision
};
var returns_ChooseResult = $hxClasses["returns.ChooseResult"] = { __ename__ : ["returns","ChooseResult"], __constructs__ : ["Ok","Empty","Manacost","Cooldown"] };
returns_ChooseResult.Ok = ["Ok",0];
returns_ChooseResult.Ok.toString = $estr;
returns_ChooseResult.Ok.__enum__ = returns_ChooseResult;
returns_ChooseResult.Empty = ["Empty",1];
returns_ChooseResult.Empty.toString = $estr;
returns_ChooseResult.Empty.__enum__ = returns_ChooseResult;
returns_ChooseResult.Manacost = ["Manacost",2];
returns_ChooseResult.Manacost.toString = $estr;
returns_ChooseResult.Manacost.__enum__ = returns_ChooseResult;
returns_ChooseResult.Cooldown = ["Cooldown",3];
returns_ChooseResult.Cooldown.toString = $estr;
returns_ChooseResult.Cooldown.__enum__ = returns_ChooseResult;
returns_ChooseResult.__empty_constructs__ = [returns_ChooseResult.Ok,returns_ChooseResult.Empty,returns_ChooseResult.Manacost,returns_ChooseResult.Cooldown];
var returns_TargetResult = $hxClasses["returns.TargetResult"] = { __ename__ : ["returns","TargetResult"], __constructs__ : ["Ok","Invalid","Nonexistent","Dead"] };
returns_TargetResult.Ok = ["Ok",0];
returns_TargetResult.Ok.toString = $estr;
returns_TargetResult.Ok.__enum__ = returns_TargetResult;
returns_TargetResult.Invalid = ["Invalid",1];
returns_TargetResult.Invalid.toString = $estr;
returns_TargetResult.Invalid.__enum__ = returns_TargetResult;
returns_TargetResult.Nonexistent = ["Nonexistent",2];
returns_TargetResult.Nonexistent.toString = $estr;
returns_TargetResult.Nonexistent.__enum__ = returns_TargetResult;
returns_TargetResult.Dead = ["Dead",3];
returns_TargetResult.Dead.toString = $estr;
returns_TargetResult.Dead.__enum__ = returns_TargetResult;
returns_TargetResult.__empty_constructs__ = [returns_TargetResult.Ok,returns_TargetResult.Invalid,returns_TargetResult.Nonexistent,returns_TargetResult.Dead];
var returns_UseResult = $hxClasses["returns.UseResult"] = { __ename__ : ["returns","UseResult"], __constructs__ : ["Ok","Miss"] };
returns_UseResult.Ok = ["Ok",0];
returns_UseResult.Ok.toString = $estr;
returns_UseResult.Ok.__enum__ = returns_UseResult;
returns_UseResult.Miss = ["Miss",1];
returns_UseResult.Miss.toString = $estr;
returns_UseResult.Miss.__enum__ = returns_UseResult;
returns_UseResult.__empty_constructs__ = [returns_UseResult.Ok,returns_UseResult.Miss];
var utils_AbilityTarget = $hxClasses["utils.AbilityTarget"] = { __ename__ : ["utils","AbilityTarget"], __constructs__ : ["Self","Allied","Enemy","All"] };
utils_AbilityTarget.Self = ["Self",0];
utils_AbilityTarget.Self.toString = $estr;
utils_AbilityTarget.Self.__enum__ = utils_AbilityTarget;
utils_AbilityTarget.Allied = ["Allied",1];
utils_AbilityTarget.Allied.toString = $estr;
utils_AbilityTarget.Allied.__enum__ = utils_AbilityTarget;
utils_AbilityTarget.Enemy = ["Enemy",2];
utils_AbilityTarget.Enemy.toString = $estr;
utils_AbilityTarget.Enemy.__enum__ = utils_AbilityTarget;
utils_AbilityTarget.All = ["All",3];
utils_AbilityTarget.All.toString = $estr;
utils_AbilityTarget.All.__enum__ = utils_AbilityTarget;
utils_AbilityTarget.__empty_constructs__ = [utils_AbilityTarget.Self,utils_AbilityTarget.Allied,utils_AbilityTarget.Enemy,utils_AbilityTarget.All];
var utils_AbilityType = $hxClasses["utils.AbilityType"] = { __ename__ : ["utils","AbilityType"], __constructs__ : ["Kick","Bolt","Spell"] };
utils_AbilityType.Kick = ["Kick",0];
utils_AbilityType.Kick.toString = $estr;
utils_AbilityType.Kick.__enum__ = utils_AbilityType;
utils_AbilityType.Bolt = ["Bolt",1];
utils_AbilityType.Bolt.toString = $estr;
utils_AbilityType.Bolt.__enum__ = utils_AbilityType;
utils_AbilityType.Spell = ["Spell",2];
utils_AbilityType.Spell.toString = $estr;
utils_AbilityType.Spell.__enum__ = utils_AbilityType;
utils_AbilityType.__empty_constructs__ = [utils_AbilityType.Kick,utils_AbilityType.Bolt,utils_AbilityType.Spell];
var utils_BattleControllerUseMode = $hxClasses["utils.BattleControllerUseMode"] = { __ename__ : ["utils","BattleControllerUseMode"], __constructs__ : ["Begin","Continue"] };
utils_BattleControllerUseMode.Begin = ["Begin",0];
utils_BattleControllerUseMode.Begin.toString = $estr;
utils_BattleControllerUseMode.Begin.__enum__ = utils_BattleControllerUseMode;
utils_BattleControllerUseMode.Continue = ["Continue",1];
utils_BattleControllerUseMode.Continue.toString = $estr;
utils_BattleControllerUseMode.Continue.__enum__ = utils_BattleControllerUseMode;
utils_BattleControllerUseMode.__empty_constructs__ = [utils_BattleControllerUseMode.Begin,utils_BattleControllerUseMode.Continue];
var utils_BuffMode = $hxClasses["utils.BuffMode"] = { __ename__ : ["utils","BuffMode"], __constructs__ : ["Cast","OverTime","End"] };
utils_BuffMode.Cast = ["Cast",0];
utils_BuffMode.Cast.toString = $estr;
utils_BuffMode.Cast.__enum__ = utils_BuffMode;
utils_BuffMode.OverTime = ["OverTime",1];
utils_BuffMode.OverTime.toString = $estr;
utils_BuffMode.OverTime.__enum__ = utils_BuffMode;
utils_BuffMode.End = ["End",2];
utils_BuffMode.End.toString = $estr;
utils_BuffMode.End.__enum__ = utils_BuffMode;
utils_BuffMode.__empty_constructs__ = [utils_BuffMode.Cast,utils_BuffMode.OverTime,utils_BuffMode.End];
var utils_Countdown = function(startValue,keyValue) {
	this.value = startValue;
	this.keyValue = keyValue;
};
$hxClasses["utils.Countdown"] = utils_Countdown;
utils_Countdown.__name__ = ["utils","Countdown"];
utils_Countdown.prototype = {
	keyValue: null
	,value: null
	,__class__: utils_Countdown
};
var utils_DamageSource = $hxClasses["utils.DamageSource"] = { __ename__ : ["utils","DamageSource"], __constructs__ : ["Ability","Buff","God"] };
utils_DamageSource.Ability = ["Ability",0];
utils_DamageSource.Ability.toString = $estr;
utils_DamageSource.Ability.__enum__ = utils_DamageSource;
utils_DamageSource.Buff = ["Buff",1];
utils_DamageSource.Buff.toString = $estr;
utils_DamageSource.Buff.__enum__ = utils_DamageSource;
utils_DamageSource.God = ["God",2];
utils_DamageSource.God.toString = $estr;
utils_DamageSource.God.__enum__ = utils_DamageSource;
utils_DamageSource.__empty_constructs__ = [utils_DamageSource.Ability,utils_DamageSource.Buff,utils_DamageSource.God];
var utils_Element = $hxClasses["utils.Element"] = { __ename__ : ["utils","Element"], __constructs__ : ["Physical","Shadow","Lightning","Terra","Poison","Fire","Frost","Natura"] };
utils_Element.Physical = ["Physical",0];
utils_Element.Physical.toString = $estr;
utils_Element.Physical.__enum__ = utils_Element;
utils_Element.Shadow = ["Shadow",1];
utils_Element.Shadow.toString = $estr;
utils_Element.Shadow.__enum__ = utils_Element;
utils_Element.Lightning = ["Lightning",2];
utils_Element.Lightning.toString = $estr;
utils_Element.Lightning.__enum__ = utils_Element;
utils_Element.Terra = ["Terra",3];
utils_Element.Terra.toString = $estr;
utils_Element.Terra.__enum__ = utils_Element;
utils_Element.Poison = ["Poison",4];
utils_Element.Poison.toString = $estr;
utils_Element.Poison.__enum__ = utils_Element;
utils_Element.Fire = ["Fire",5];
utils_Element.Fire.toString = $estr;
utils_Element.Fire.__enum__ = utils_Element;
utils_Element.Frost = ["Frost",6];
utils_Element.Frost.toString = $estr;
utils_Element.Frost.__enum__ = utils_Element;
utils_Element.Natura = ["Natura",7];
utils_Element.Natura.toString = $estr;
utils_Element.Natura.__enum__ = utils_Element;
utils_Element.__empty_constructs__ = [utils_Element.Physical,utils_Element.Shadow,utils_Element.Lightning,utils_Element.Terra,utils_Element.Poison,utils_Element.Fire,utils_Element.Frost,utils_Element.Natura];
var utils_InputMode = $hxClasses["utils.InputMode"] = { __ename__ : ["utils","InputMode"], __constructs__ : ["Choosing","Targeting","None"] };
utils_InputMode.Choosing = ["Choosing",0];
utils_InputMode.Choosing.toString = $estr;
utils_InputMode.Choosing.__enum__ = utils_InputMode;
utils_InputMode.Targeting = ["Targeting",1];
utils_InputMode.Targeting.toString = $estr;
utils_InputMode.Targeting.__enum__ = utils_InputMode;
utils_InputMode.None = ["None",2];
utils_InputMode.None.toString = $estr;
utils_InputMode.None.__enum__ = utils_InputMode;
utils_InputMode.__empty_constructs__ = [utils_InputMode.Choosing,utils_InputMode.Targeting,utils_InputMode.None];
var utils_MathUtils = function() { };
$hxClasses["utils.MathUtils"] = utils_MathUtils;
utils_MathUtils.__name__ = ["utils","MathUtils"];
utils_MathUtils.inRange = function(number,leftBorder,rightBorder,leftIncluded,rightIncluded) {
	if(rightIncluded == null) {
		rightIncluded = true;
	}
	if(leftIncluded == null) {
		leftIncluded = true;
	}
	if(number >= leftBorder && number <= rightBorder) {
		if(leftIncluded || number != leftBorder) {
			if(rightIncluded || number != rightBorder) {
				return true;
			}
		}
	}
	return false;
};
utils_MathUtils.getDistance = function(point1,point2) {
	var x1 = point1.x;
	var x2 = point2.x;
	var y1 = point1.y;
	var y2 = point2.y;
	return Math.sqrt((x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2));
};
utils_MathUtils.randomInt = function(leftBorder,rightBorder) {
	return leftBorder + Math.round(Math.random() * (rightBorder - leftBorder));
};
var utils_Pool = function(startValue,maxValue,minValue) {
	if(minValue == null) {
		minValue = 0;
	}
	if(false == (maxValue >= minValue && startValue >= minValue && startValue <= maxValue)) {
		hxassert_Assert.throwAssertionFailureError(["Assertion failed: maxValue >= minValue && startValue >= minValue && startValue <= maxValue"],{ fileName : "Pool.hx", lineNumber : 28, className : "utils.Pool", methodName : "new"});
	}
	this.maxValue = maxValue;
	this.minValue = minValue;
	this.set_value(startValue);
};
$hxClasses["utils.Pool"] = utils_Pool;
utils_Pool.__name__ = ["utils","Pool"];
utils_Pool.prototype = {
	maxValue: null
	,minValue: null
	,value: null
	,set_value: function(v) {
		if(v < this.minValue) {
			this.value = this.minValue;
		} else if(v > this.maxValue) {
			this.value = this.maxValue;
		} else {
			this.value = v;
		}
		return this.value;
	}
	,__class__: utils_Pool
	,__properties__: {set_value:"set_value"}
};
var utils_Team = $hxClasses["utils.Team"] = { __ename__ : ["utils","Team"], __constructs__ : ["Left","Right"] };
utils_Team.Left = ["Left",0];
utils_Team.Left.toString = $estr;
utils_Team.Left.__enum__ = utils_Team;
utils_Team.Right = ["Right",1];
utils_Team.Right.toString = $estr;
utils_Team.Right.__enum__ = utils_Team;
utils_Team.__empty_constructs__ = [utils_Team.Left,utils_Team.Right];
var utils_UnitType = $hxClasses["utils.UnitType"] = { __ename__ : ["utils","UnitType"], __constructs__ : ["Self","Ally","Enemy"] };
utils_UnitType.Self = ["Self",0];
utils_UnitType.Self.toString = $estr;
utils_UnitType.Self.__enum__ = utils_UnitType;
utils_UnitType.Ally = ["Ally",1];
utils_UnitType.Ally.toString = $estr;
utils_UnitType.Ally.__enum__ = utils_UnitType;
utils_UnitType.Enemy = ["Enemy",2];
utils_UnitType.Enemy.toString = $estr;
utils_UnitType.Enemy.__enum__ = utils_UnitType;
utils_UnitType.__empty_constructs__ = [utils_UnitType.Self,utils_UnitType.Ally,utils_UnitType.Enemy];
var utils_Utils = function() { };
$hxClasses["utils.Utils"] = utils_Utils;
utils_Utils.__name__ = ["utils","Utils"];
utils_Utils.contains = function(point,field) {
	if(point.x >= field.x && point.x <= field.x + field.width && (point.y >= field.y && point.y <= field.y + field.height)) {
		return true;
	}
	return false;
};
utils_Utils.findWeakestUnit = function(array) {
	if(false == array.length > 0) {
		hxassert_Assert.throwAssertionFailureError(["Assertion failed: array.length > 0"],{ fileName : "Utils.hx", lineNumber : 22, className : "utils.Utils", methodName : "findWeakestUnit"});
	}
	var result = array[0];
	var _g = 0;
	while(_g < array.length) {
		var unit = array[_g];
		++_g;
		if(unit.hpPool.value < result.hpPool.value) {
			result = unit;
		}
	}
	return result;
};
function $iterator(o) { if( o instanceof Array ) return function() { return HxOverrides.iter(o); }; return typeof(o.iterator) == 'function' ? $bind(o,o.iterator) : o.iterator; }
var $_, $fid = 0;
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $fid++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = function(){ return f.method.apply(f.scope, arguments); }; f.scope = o; f.method = m; o.hx__closures__[m.__id__] = f; } return f; }
$hxClasses["Math"] = Math;
String.prototype.__class__ = $hxClasses["String"] = String;
String.__name__ = ["String"];
$hxClasses["Array"] = Array;
Array.__name__ = ["Array"];
Date.prototype.__class__ = $hxClasses["Date"] = Date;
Date.__name__ = ["Date"];
var Int = $hxClasses["Int"] = { __name__ : ["Int"]};
var Dynamic = $hxClasses["Dynamic"] = { __name__ : ["Dynamic"]};
var Float = $hxClasses["Float"] = Number;
Float.__name__ = ["Float"];
var Bool = $hxClasses["Bool"] = Boolean;
Bool.__ename__ = ["Bool"];
var Class = $hxClasses["Class"] = { __name__ : ["Class"]};
var Enum = { };
var __map_reserved = {}
var ArrayBuffer = $global.ArrayBuffer || js_html_compat_ArrayBuffer;
if(ArrayBuffer.prototype.slice == null) {
	ArrayBuffer.prototype.slice = js_html_compat_ArrayBuffer.sliceImpl;
}
var DataView = $global.DataView || js_html_compat_DataView;
var Float32Array = $global.Float32Array || js_html_compat_Float32Array._new;
var Uint8Array = $global.Uint8Array || js_html_compat_Uint8Array._new;
var this1 = new Uint32Array(256);
lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16 = this1;
var _g = 0;
while(_g < 256) {
	var i = _g++;
	lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[i] = Math.ceil(i * 257.00392156862745);
}
var this2 = new Uint8Array(510);
lime_math_color__$RGBA_RGBA_$Impl_$.__clamp = this2;
var _g1 = 0;
while(_g1 < 255) {
	var i1 = _g1++;
	lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[i1] = i1;
}
var _g11 = 255;
var _g2 = 511;
while(_g11 < _g2) {
	var i2 = _g11++;
	lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[i2] = 255;
}
lime_system_CFFI.available = false;
lime_system_CFFI.enabled = false;
lime_utils_Log.level = 3;
if(typeof console == "undefined") {
	console = {}
}
if(console.log == null) {
	console.log = function() {
	};
}
openfl_display_DisplayObject.__broadcastEvents = new haxe_ds_StringMap();
openfl_display_DisplayObject.__instanceCount = 0;
openfl_display_DisplayObject.__worldRenderDirty = 0;
openfl_display_DisplayObject.__worldTransformDirty = 0;
Xml.Element = 0;
Xml.PCData = 1;
Xml.CData = 2;
Xml.Comment = 3;
Xml.DocType = 4;
Xml.ProcessingInstruction = 5;
Xml.Document = 6;
format_SWF.instances = new haxe_ds_StringMap();
format_SWF.parseABC = false;
format_swf__$SWFData_SWFData_$Impl_$.FLOAT16_EXPONENT_BASE = 15;
format_swf__$SWFData_SWFData_$Impl_$.MIN_FLOAT_VALUE = Number.MIN_VALUE;
format_swf__$SWFData_SWFData_$Impl_$.MAX_FLOAT_VALUE = Number.MAX_VALUE;
format_swf_SWFTimelineContainer.TIMEOUT = 50;
format_swf_SWFTimelineContainer.AUTOBUILD_LAYERS = false;
format_swf_SWFTimelineContainer.EXTRACT_SOUND_STREAM = true;
format_swf_SWFRoot.FILE_LENGTH_POS = 4;
format_swf_SWFRoot.COMPRESSION_START_POS = 8;
format_swf_data_SWFShapeRecord.TYPE_UNKNOWN = 0;
format_swf_data_SWFShapeRecord.TYPE_END = 1;
format_swf_data_SWFShapeRecord.TYPE_STYLECHANGE = 2;
format_swf_data_SWFShapeRecord.TYPE_STRAIGHTEDGE = 3;
format_swf_data_SWFShapeRecord.TYPE_CURVEDEDGE = 4;
format_swf_data_actions_swf3_ActionStop.CODE = 7;
format_swf_data_consts_BitmapFormat.BIT_8 = 3;
format_swf_data_consts_BitmapFormat.BIT_15 = 4;
format_swf_data_consts_BitmapFormat.BIT_24 = 5;
format_swf_data_consts_BitmapType.JPEG = 1;
format_swf_data_consts_BitmapType.GIF89A = 2;
format_swf_data_consts_BitmapType.PNG = 3;
format_swf_data_consts_BlendMode.NORMAL_0 = 0;
format_swf_data_consts_BlendMode.NORMAL_1 = 1;
format_swf_data_consts_BlendMode.LAYER = 2;
format_swf_data_consts_BlendMode.MULTIPLY = 3;
format_swf_data_consts_BlendMode.SCREEN = 4;
format_swf_data_consts_BlendMode.LIGHTEN = 5;
format_swf_data_consts_BlendMode.DARKEN = 6;
format_swf_data_consts_BlendMode.DIFFERENCE = 7;
format_swf_data_consts_BlendMode.ADD = 8;
format_swf_data_consts_BlendMode.SUBTRACT = 9;
format_swf_data_consts_BlendMode.INVERT = 10;
format_swf_data_consts_BlendMode.ALPHA = 11;
format_swf_data_consts_BlendMode.ERASE = 12;
format_swf_data_consts_BlendMode.OVERLAY = 13;
format_swf_data_consts_BlendMode.HARDLIGHT = 14;
format_swf_data_consts_CSMTableHint.THIN = 0;
format_swf_data_consts_CSMTableHint.MEDIUM = 1;
format_swf_data_consts_CSMTableHint.THICK = 2;
format_swf_data_consts_GradientInterpolationMode.NORMAL = 0;
format_swf_data_consts_GradientInterpolationMode.LINEAR = 1;
format_swf_data_consts_GradientSpreadMode.PAD = 0;
format_swf_data_consts_GradientSpreadMode.REFLECT = 1;
format_swf_data_consts_GradientSpreadMode.REPEAT = 2;
format_swf_data_consts_LineCapsStyle.ROUND = 0;
format_swf_data_consts_LineCapsStyle.NO = 1;
format_swf_data_consts_LineCapsStyle.SQUARE = 2;
format_swf_data_consts_LineJointStyle.ROUND = 0;
format_swf_data_consts_LineJointStyle.BEVEL = 1;
format_swf_data_consts_LineJointStyle.MITER = 2;
format_swf_data_consts_SoundCompression.UNCOMPRESSED_NATIVE_ENDIAN = 0;
format_swf_data_consts_SoundCompression.ADPCM = 1;
format_swf_data_consts_SoundCompression.MP3 = 2;
format_swf_data_consts_SoundCompression.UNCOMPRESSED_LITTLE_ENDIAN = 3;
format_swf_data_consts_SoundCompression.NELLYMOSER_16_KHZ = 4;
format_swf_data_consts_SoundCompression.NELLYMOSER_8_KHZ = 5;
format_swf_data_consts_SoundCompression.NELLYMOSER = 6;
format_swf_data_consts_SoundCompression.SPEEX = 11;
format_swf_data_consts_SoundRate.KHZ_5 = 0;
format_swf_data_consts_SoundRate.KHZ_11 = 1;
format_swf_data_consts_SoundRate.KHZ_22 = 2;
format_swf_data_consts_SoundRate.KHZ_44 = 3;
format_swf_data_consts_SoundSize.BIT_8 = 0;
format_swf_data_consts_SoundSize.BIT_16 = 1;
format_swf_data_consts_SoundType.MONO = 0;
format_swf_data_consts_SoundType.STEREO = 1;
format_swf_data_consts_VideoCodecID.H263 = 2;
format_swf_data_consts_VideoCodecID.SCREEN = 3;
format_swf_data_consts_VideoCodecID.VP6 = 4;
format_swf_data_consts_VideoCodecID.VP6ALPHA = 5;
format_swf_data_consts_VideoCodecID.SCREENV2 = 6;
format_swf_data_consts_VideoDeblockingType.VIDEOPACKET = 0;
format_swf_data_consts_VideoDeblockingType.OFF = 1;
format_swf_data_consts_VideoDeblockingType.LEVEL1 = 2;
format_swf_data_consts_VideoDeblockingType.LEVEL2 = 3;
format_swf_data_consts_VideoDeblockingType.LEVEL3 = 4;
format_swf_data_consts_VideoDeblockingType.LEVEL4 = 5;
format_swf_data_etc_MPEGFrame.MPEGversion_1_0 = 0;
format_swf_data_etc_MPEGFrame.MPEGversion_2_0 = 1;
format_swf_data_etc_MPEGFrame.MPEGversion_2_5 = 2;
format_swf_data_etc_MPEGFrame.MPEG_LAYER_I = 0;
format_swf_data_etc_MPEGFrame.MPEG_LAYER_II = 1;
format_swf_data_etc_MPEGFrame.MPEG_LAYER_III = 2;
format_swf_data_etc_MPEGFrame.CHANNEL_MODE_STEREO = 0;
format_swf_data_etc_MPEGFrame.CHANNEL_MODE_JOINT_STEREO = 1;
format_swf_data_etc_MPEGFrame.CHANNEL_MODE_DUAL = 2;
format_swf_data_etc_MPEGFrame.CHANNEL_MODE_MONO = 3;
format_swf_data_etc_MPEGFrame.mpegBitrates = [[[0,32,96,128,160,192,224,256,288,320,352,384,416,448,-1],[0,32,48,56,64,80,96,112,128,160,192,224,256,320,384,-1],[0,32,40,48,56,64,80,96,112,128,160,192,224,256,320,-1]],[[0,32,48,56,64,80,96,112,128,144,160,176,192,224,256,-1],[0,8,16,24,32,40,48,56,64,80,96,112,128,144,160,-1],[0,8,16,24,32,40,48,56,64,80,96,112,128,144,160,-1]]];
format_swf_data_etc_MPEGFrame.mpegsamplingrates = [[44100,48000,32000],[22050,24000,16000],[11025,12000,8000]];
openfl_events_Event.ACTIVATE = "activate";
openfl_events_Event.ADDED = "added";
openfl_events_Event.ADDED_TO_STAGE = "addedToStage";
openfl_events_Event.CANCEL = "cancel";
openfl_events_Event.CHANGE = "change";
openfl_events_Event.CLEAR = "clear";
openfl_events_Event.CLOSE = "close";
openfl_events_Event.COMPLETE = "complete";
openfl_events_Event.CONNECT = "connect";
openfl_events_Event.CONTEXT3D_CREATE = "context3DCreate";
openfl_events_Event.COPY = "copy";
openfl_events_Event.CUT = "cut";
openfl_events_Event.DEACTIVATE = "deactivate";
openfl_events_Event.ENTER_FRAME = "enterFrame";
openfl_events_Event.EXIT_FRAME = "exitFrame";
openfl_events_Event.FRAME_CONSTRUCTED = "frameConstructed";
openfl_events_Event.FRAME_LABEL = "frameLabel";
openfl_events_Event.FULLSCREEN = "fullScreen";
openfl_events_Event.ID3 = "id3";
openfl_events_Event.INIT = "init";
openfl_events_Event.MOUSE_LEAVE = "mouseLeave";
openfl_events_Event.OPEN = "open";
openfl_events_Event.PASTE = "paste";
openfl_events_Event.REMOVED = "removed";
openfl_events_Event.REMOVED_FROM_STAGE = "removedFromStage";
openfl_events_Event.RENDER = "render";
openfl_events_Event.RESIZE = "resize";
openfl_events_Event.SCROLL = "scroll";
openfl_events_Event.SELECT = "select";
openfl_events_Event.SELECT_ALL = "selectAll";
openfl_events_Event.SOUND_COMPLETE = "soundComplete";
openfl_events_Event.TAB_CHILDREN_CHANGE = "tabChildrenChange";
openfl_events_Event.TAB_ENABLED_CHANGE = "tabEnabledChange";
openfl_events_Event.TAB_INDEX_CHANGE = "tabIndexChange";
openfl_events_Event.TEXTURE_READY = "textureReady";
openfl_events_Event.UNLOAD = "unload";
format_swf_events_SWFErrorEvent.ERROR = "error";
format_swf_events_SWFErrorEvent.REASON_EOF = "eof";
format_swf_events_SWFProgressEvent.PROGRESS = "progress";
format_swf_events_SWFProgressEvent.COMPLETE = "complete";
format_swf_events_SWFWarningEvent.WARN_OVERFLOW = "overflow";
format_swf_events_SWFWarningEvent.WARN_UNDERFLOW = "underflow";
openfl_text_TextField.__regexAlign = new EReg("align=(\"([^\"]+)\"|'([^']+)')","i");
openfl_text_TextField.__regexColor = new EReg("color=(\"#([^\"]+)\"|'#([^']+)')","i");
openfl_text_TextField.__regexBlockIndent = new EReg("blockindent=(\"([^\"]+)\"|'([^']+)')","i");
openfl_text_TextField.__regexBreakTag = new EReg("<br\\s*/?>","gi");
openfl_text_TextField.__regexEntities = [new EReg("&quot;","g"),new EReg("&apos;","g"),new EReg("&amp;","g"),new EReg("&lt;","g"),new EReg("&gt;","g")];
openfl_text_TextField.__regexFace = new EReg("face=(\"([^\"]+)\"|'([^']+)')","i");
openfl_text_TextField.__regexHTMLTag = new EReg("<.*?>","g");
openfl_text_TextField.__regexIndent = new EReg(" indent=(\"([^\"]+)\"|'([^']+)')","i");
openfl_text_TextField.__regexLeading = new EReg("leading=(\"([^\"]+)\"|'([^']+)')","i");
openfl_text_TextField.__regexLeftMargin = new EReg("leftmargin=(\"([^\"]+)\"|'([^']+)')","i");
openfl_text_TextField.__regexRightMargin = new EReg("rightmargin=(\"([^\"]+)\"|'([^']+)')","i");
openfl_text_TextField.__regexTabStops = new EReg("tabstops=(\"([^\"]+)\"|'([^']+)')","i");
openfl_text_TextField.__regexSize = new EReg("size=(\"([^\"]+)\"|'([^']+)')","i");
format_swf_instance_DynamicText.registeredFonts = new haxe_ds_IntMap();
format_swf_instance_SimpleButton.blendModes = [10,10,7,9,12,8,2,3,0,14,6,1,4,11,5];
format_swf_lite_SWFLite.instances = new haxe_ds_StringMap();
format_swf_tags_TagCSMTextSettings.TYPE = 74;
format_swf_tags_TagDebugID.TYPE = 63;
format_swf_tags_TagDefineBinaryData.TYPE = 87;
format_swf_tags_TagDefineBits.TYPE = 6;
format_swf_tags_TagDefineBitsJPEG2.TYPE = 21;
format_swf_tags_TagDefineBitsJPEG3.TYPE = 35;
format_swf_tags_TagDefineBitsJPEG4.TYPE = 90;
format_swf_tags_TagDefineBitsLossless.TYPE = 20;
format_swf_tags_TagDefineBitsLossless2.TYPE = 36;
format_swf_tags_TagDefineButton.TYPE = 7;
format_swf_tags_TagDefineButton.STATE_UP = "up";
format_swf_tags_TagDefineButton.STATE_OVER = "over";
format_swf_tags_TagDefineButton.STATE_DOWN = "down";
format_swf_tags_TagDefineButton.STATE_HIT = "hit";
format_swf_tags_TagDefineButton2.TYPE = 34;
format_swf_tags_TagDefineButtonCxform.TYPE = 23;
format_swf_tags_TagDefineButtonSound.TYPE = 17;
format_swf_tags_TagDefineEditText.TYPE = 37;
format_swf_tags_TagDefineFont.TYPE = 10;
format_swf_tags_TagDefineFont.unitDivisor = 1;
format_swf_tags_TagDefineFont2.TYPE = 48;
format_swf_tags_TagDefineFont3.TYPE = 75;
format_swf_tags_TagDefineFont3.unitDivisor = 20;
format_swf_tags_TagDefineFont4.TYPE = 91;
format_swf_tags_TagDefineFontAlignZones.TYPE = 73;
format_swf_tags_TagDefineFontInfo.TYPE = 13;
format_swf_tags_TagDefineFontInfo2.TYPE = 62;
format_swf_tags_TagDefineFontName.TYPE = 88;
format_swf_tags_TagDefineMorphShape.TYPE = 46;
format_swf_tags_TagDefineMorphShape2.TYPE = 84;
format_swf_tags_TagDefineScalingGrid.TYPE = 78;
format_swf_tags_TagDefineSceneAndFrameLabelData.TYPE = 86;
format_swf_tags_TagDefineShape.TYPE = 2;
format_swf_tags_TagDefineShape2.TYPE = 22;
format_swf_tags_TagDefineShape3.TYPE = 32;
format_swf_tags_TagDefineShape4.TYPE = 83;
format_swf_tags_TagDefineSound.TYPE = 14;
format_swf_tags_TagDefineSprite.TYPE = 39;
format_swf_tags_TagDefineText.TYPE = 11;
format_swf_tags_TagDefineText2.TYPE = 33;
format_swf_tags_TagDefineVideoStream.TYPE = 60;
format_swf_tags_TagDoABC.TYPE = 82;
format_swf_tags_TagDoABCDeprecated.TYPE = 72;
format_swf_tags_TagDoAction.TYPE = 12;
format_swf_tags_TagDoInitAction.TYPE = 59;
format_swf_tags_TagEnableDebugger.TYPE = 58;
format_swf_tags_TagEnableDebugger2.TYPE = 64;
format_swf_tags_TagEnableTelemetry.TYPE = 93;
format_swf_tags_TagEnd.TYPE = 0;
format_swf_tags_TagExportAssets.TYPE = 56;
format_swf_tags_TagFileAttributes.TYPE = 69;
format_swf_tags_TagFrameLabel.TYPE = 43;
format_swf_tags_TagImportAssets.TYPE = 57;
format_swf_tags_TagImportAssets2.TYPE = 71;
format_swf_tags_TagJPEGTables.TYPE = 8;
format_swf_tags_TagMetadata.TYPE = 77;
format_swf_tags_TagNameCharacter.TYPE = 40;
format_swf_tags_TagPlaceObject.TYPE = 4;
format_swf_tags_TagPlaceObject2.TYPE = 26;
format_swf_tags_TagPlaceObject3.TYPE = 70;
format_swf_tags_TagPlaceObject4.TYPE = 94;
format_swf_tags_TagProductInfo.TYPE = 41;
format_swf_tags_TagProtect.TYPE = 24;
format_swf_tags_TagRemoveObject.TYPE = 5;
format_swf_tags_TagRemoveObject2.TYPE = 28;
format_swf_tags_TagScriptLimits.TYPE = 65;
format_swf_tags_TagSetBackgroundColor.TYPE = 9;
format_swf_tags_TagSetTabIndex.TYPE = 66;
format_swf_tags_TagShowFrame.TYPE = 1;
format_swf_tags_TagSoundStreamBlock.TYPE = 19;
format_swf_tags_TagSoundStreamHead.TYPE = 18;
format_swf_tags_TagSoundStreamHead2.TYPE = 45;
format_swf_tags_TagStartSound.TYPE = 15;
format_swf_tags_TagStartSound2.TYPE = 89;
format_swf_tags_TagSymbolClass.TYPE = 76;
format_swf_tags_TagVideoFrame.TYPE = 61;
format_swf_tags_etc_TagSWFEncryptActions.TYPE = 253;
format_swf_tags_etc_TagSWFEncryptSignature.TYPE = 255;
format_swf_timeline_LayerStrip.TYPE_EMPTY = 0;
format_swf_timeline_LayerStrip.TYPE_SPACER = 1;
format_swf_timeline_LayerStrip.TYPE_STATIC = 2;
format_swf_timeline_LayerStrip.TYPE_MOTIONTWEEN = 3;
format_swf_timeline_LayerStrip.TYPE_SHAPETWEEN = 4;
format_swf_utils_StringUtils.i = 0;
format_swf_utils_StringUtils.SIGN_UNDEF = 0;
format_swf_utils_StringUtils.SIGN_POS = -1;
format_swf_utils_StringUtils.SIGN_NEG = 1;
haxe_Serializer.USE_CACHE = false;
haxe_Serializer.USE_ENUM_INDEX = false;
haxe_Serializer.BASE64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789%:";
haxe_Unserializer.DEFAULT_RESOLVER = new haxe__$Unserializer_DefaultResolver();
haxe_Unserializer.BASE64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789%:";
haxe_ds_ObjectMap.count = 0;
haxe_io_FPHelper.i64tmp = new haxe__$Int64__$_$_$Int64(0,0);
haxe_io_FPHelper.LN2 = 0.6931471805599453;
haxe_xml_Parser.escapes = (function($this) {
	var $r;
	var h = new haxe_ds_StringMap();
	if(__map_reserved["lt"] != null) {
		h.setReserved("lt","<");
	} else {
		h.h["lt"] = "<";
	}
	if(__map_reserved["gt"] != null) {
		h.setReserved("gt",">");
	} else {
		h.h["gt"] = ">";
	}
	if(__map_reserved["amp"] != null) {
		h.setReserved("amp","&");
	} else {
		h.h["amp"] = "&";
	}
	if(__map_reserved["quot"] != null) {
		h.setReserved("quot","\"");
	} else {
		h.h["quot"] = "\"";
	}
	if(__map_reserved["apos"] != null) {
		h.setReserved("apos","'");
	} else {
		h.h["apos"] = "'";
	}
	$r = h;
	return $r;
}(this));
hxassert_Assert._handlers = [];
js_Boot.__toStr = ({ }).toString;
js_html_compat_Float32Array.BYTES_PER_ELEMENT = 4;
js_html_compat_Uint8Array.BYTES_PER_ELEMENT = 1;
lime_Assets.cache = new lime_AssetCache();
lime_Assets.libraries = new haxe_ds_StringMap();
lime_Assets.onChange = new lime_app__$Event_$Void_$Void();
lime__$backend_html5_HTML5Window.windowID = 0;
lime_app_Preloader.audioBuffers = new haxe_ds_StringMap();
lime_app_Preloader.images = new haxe_ds_StringMap();
lime_app_Preloader.loaders = new haxe_ds_StringMap();
lime_audio_openal_AL.NONE = 0;
lime_audio_openal_AL.FALSE = 0;
lime_audio_openal_AL.TRUE = 1;
lime_audio_openal_AL.SOURCE_RELATIVE = 514;
lime_audio_openal_AL.CONE_INNER_ANGLE = 4097;
lime_audio_openal_AL.CONE_OUTER_ANGLE = 4098;
lime_audio_openal_AL.PITCH = 4099;
lime_audio_openal_AL.POSITION = 4100;
lime_audio_openal_AL.DIRECTION = 4101;
lime_audio_openal_AL.VELOCITY = 4102;
lime_audio_openal_AL.LOOPING = 4103;
lime_audio_openal_AL.BUFFER = 4105;
lime_audio_openal_AL.GAIN = 4106;
lime_audio_openal_AL.MIN_GAIN = 4109;
lime_audio_openal_AL.MAX_GAIN = 4110;
lime_audio_openal_AL.ORIENTATION = 4111;
lime_audio_openal_AL.SOURCE_STATE = 4112;
lime_audio_openal_AL.INITIAL = 4113;
lime_audio_openal_AL.PLAYING = 4114;
lime_audio_openal_AL.PAUSED = 4115;
lime_audio_openal_AL.STOPPED = 4116;
lime_audio_openal_AL.BUFFERS_QUEUED = 4117;
lime_audio_openal_AL.BUFFERS_PROCESSED = 4118;
lime_audio_openal_AL.REFERENCE_DISTANCE = 4128;
lime_audio_openal_AL.ROLLOFF_FACTOR = 4129;
lime_audio_openal_AL.CONE_OUTER_GAIN = 4130;
lime_audio_openal_AL.MAX_DISTANCE = 4131;
lime_audio_openal_AL.SEC_OFFSET = 4132;
lime_audio_openal_AL.SAMPLE_OFFSET = 4133;
lime_audio_openal_AL.BYTE_OFFSET = 4134;
lime_audio_openal_AL.SOURCE_TYPE = 4135;
lime_audio_openal_AL.STATIC = 4136;
lime_audio_openal_AL.STREAMING = 4137;
lime_audio_openal_AL.UNDETERMINED = 4144;
lime_audio_openal_AL.FORMAT_MONO8 = 4352;
lime_audio_openal_AL.FORMAT_MONO16 = 4353;
lime_audio_openal_AL.FORMAT_STEREO8 = 4354;
lime_audio_openal_AL.FORMAT_STEREO16 = 4355;
lime_audio_openal_AL.FREQUENCY = 8193;
lime_audio_openal_AL.BITS = 8194;
lime_audio_openal_AL.CHANNELS = 8195;
lime_audio_openal_AL.SIZE = 8196;
lime_audio_openal_AL.NO_ERROR = 0;
lime_audio_openal_AL.INVALID_NAME = 40961;
lime_audio_openal_AL.INVALID_ENUM = 40962;
lime_audio_openal_AL.INVALID_VALUE = 40963;
lime_audio_openal_AL.INVALID_OPERATION = 40964;
lime_audio_openal_AL.OUT_OF_MEMORY = 40965;
lime_audio_openal_AL.VENDOR = 45057;
lime_audio_openal_AL.VERSION = 45058;
lime_audio_openal_AL.RENDERER = 45059;
lime_audio_openal_AL.EXTENSIONS = 45060;
lime_audio_openal_AL.DOPPLER_FACTOR = 49152;
lime_audio_openal_AL.SPEED_OF_SOUND = 49155;
lime_audio_openal_AL.DOPPLER_VELOCITY = 49153;
lime_audio_openal_AL.DISTANCE_MODEL = 53248;
lime_audio_openal_AL.INVERSE_DISTANCE = 53249;
lime_audio_openal_AL.INVERSE_DISTANCE_CLAMPED = 53250;
lime_audio_openal_AL.LINEAR_DISTANCE = 53251;
lime_audio_openal_AL.LINEAR_DISTANCE_CLAMPED = 53252;
lime_audio_openal_AL.EXPONENT_DISTANCE = 53253;
lime_audio_openal_AL.EXPONENT_DISTANCE_CLAMPED = 53254;
lime_audio_openal_ALC.FALSE = 0;
lime_audio_openal_ALC.TRUE = 1;
lime_audio_openal_ALC.FREQUENCY = 4103;
lime_audio_openal_ALC.REFRESH = 4104;
lime_audio_openal_ALC.SYNC = 4105;
lime_audio_openal_ALC.MONO_SOURCES = 4112;
lime_audio_openal_ALC.STEREO_SOURCES = 4113;
lime_audio_openal_ALC.NO_ERROR = 0;
lime_audio_openal_ALC.INVALID_DEVICE = 40961;
lime_audio_openal_ALC.INVALID_CONTEXT = 40962;
lime_audio_openal_ALC.INVALID_ENUM = 40963;
lime_audio_openal_ALC.INVALID_VALUE = 40964;
lime_audio_openal_ALC.OUT_OF_MEMORY = 40965;
lime_audio_openal_ALC.ATTRIBUTES_SIZE = 4098;
lime_audio_openal_ALC.ALL_ATTRIBUTES = 4099;
lime_audio_openal_ALC.DEFAULT_DEVICE_SPECIFIER = 4100;
lime_audio_openal_ALC.DEVICE_SPECIFIER = 4101;
lime_audio_openal_ALC.EXTENSIONS = 4102;
lime_audio_openal_ALC.ENUMERATE_ALL_EXT = 1;
lime_audio_openal_ALC.DEFAULT_ALL_DEVICES_SPECIFIER = 4114;
lime_audio_openal_ALC.ALL_DEVICES_SPECIFIER = 4115;
lime_graphics_Image.__base64Chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
lime_graphics_cairo__$CairoFTFontFace_CairoFTFontFace_$Impl_$.FT_LOAD_FORCE_AUTOHINT = 32;
lime_graphics_opengl_ExtensionPackedDepthStencil.DEPTH24_STENCIL8_EXT = 35056;
lime_graphics_opengl_GL.DEPTH_BUFFER_BIT = 256;
lime_graphics_opengl_GL.STENCIL_BUFFER_BIT = 1024;
lime_graphics_opengl_GL.COLOR_BUFFER_BIT = 16384;
lime_graphics_opengl_GL.POINTS = 0;
lime_graphics_opengl_GL.LINES = 1;
lime_graphics_opengl_GL.LINE_LOOP = 2;
lime_graphics_opengl_GL.LINE_STRIP = 3;
lime_graphics_opengl_GL.TRIANGLES = 4;
lime_graphics_opengl_GL.TRIANGLE_STRIP = 5;
lime_graphics_opengl_GL.TRIANGLE_FAN = 6;
lime_graphics_opengl_GL.ZERO = 0;
lime_graphics_opengl_GL.ONE = 1;
lime_graphics_opengl_GL.SRC_COLOR = 768;
lime_graphics_opengl_GL.ONE_MINUS_SRC_COLOR = 769;
lime_graphics_opengl_GL.SRC_ALPHA = 770;
lime_graphics_opengl_GL.ONE_MINUS_SRC_ALPHA = 771;
lime_graphics_opengl_GL.DST_ALPHA = 772;
lime_graphics_opengl_GL.ONE_MINUS_DST_ALPHA = 773;
lime_graphics_opengl_GL.DST_COLOR = 774;
lime_graphics_opengl_GL.ONE_MINUS_DST_COLOR = 775;
lime_graphics_opengl_GL.SRC_ALPHA_SATURATE = 776;
lime_graphics_opengl_GL.FUNC_ADD = 32774;
lime_graphics_opengl_GL.BLEND_EQUATION = 32777;
lime_graphics_opengl_GL.BLEND_EQUATION_RGB = 32777;
lime_graphics_opengl_GL.BLEND_EQUATION_ALPHA = 34877;
lime_graphics_opengl_GL.FUNC_SUBTRACT = 32778;
lime_graphics_opengl_GL.FUNC_REVERSE_SUBTRACT = 32779;
lime_graphics_opengl_GL.BLEND_DST_RGB = 32968;
lime_graphics_opengl_GL.BLEND_SRC_RGB = 32969;
lime_graphics_opengl_GL.BLEND_DST_ALPHA = 32970;
lime_graphics_opengl_GL.BLEND_SRC_ALPHA = 32971;
lime_graphics_opengl_GL.CONSTANT_COLOR = 32769;
lime_graphics_opengl_GL.ONE_MINUS_CONSTANT_COLOR = 32770;
lime_graphics_opengl_GL.CONSTANT_ALPHA = 32771;
lime_graphics_opengl_GL.ONE_MINUS_CONSTANT_ALPHA = 32772;
lime_graphics_opengl_GL.BLEND_COLOR = 32773;
lime_graphics_opengl_GL.ARRAY_BUFFER = 34962;
lime_graphics_opengl_GL.ELEMENT_ARRAY_BUFFER = 34963;
lime_graphics_opengl_GL.ARRAY_BUFFER_BINDING = 34964;
lime_graphics_opengl_GL.ELEMENT_ARRAY_BUFFER_BINDING = 34965;
lime_graphics_opengl_GL.STREAM_DRAW = 35040;
lime_graphics_opengl_GL.STATIC_DRAW = 35044;
lime_graphics_opengl_GL.DYNAMIC_DRAW = 35048;
lime_graphics_opengl_GL.BUFFER_SIZE = 34660;
lime_graphics_opengl_GL.BUFFER_USAGE = 34661;
lime_graphics_opengl_GL.CURRENT_VERTEX_ATTRIB = 34342;
lime_graphics_opengl_GL.FRONT = 1028;
lime_graphics_opengl_GL.BACK = 1029;
lime_graphics_opengl_GL.FRONT_AND_BACK = 1032;
lime_graphics_opengl_GL.CULL_FACE = 2884;
lime_graphics_opengl_GL.BLEND = 3042;
lime_graphics_opengl_GL.DITHER = 3024;
lime_graphics_opengl_GL.STENCIL_TEST = 2960;
lime_graphics_opengl_GL.DEPTH_TEST = 2929;
lime_graphics_opengl_GL.SCISSOR_TEST = 3089;
lime_graphics_opengl_GL.POLYGON_OFFSET_FILL = 32823;
lime_graphics_opengl_GL.SAMPLE_ALPHA_TO_COVERAGE = 32926;
lime_graphics_opengl_GL.SAMPLE_COVERAGE = 32928;
lime_graphics_opengl_GL.NO_ERROR = 0;
lime_graphics_opengl_GL.INVALID_ENUM = 1280;
lime_graphics_opengl_GL.INVALID_VALUE = 1281;
lime_graphics_opengl_GL.INVALID_OPERATION = 1282;
lime_graphics_opengl_GL.OUT_OF_MEMORY = 1285;
lime_graphics_opengl_GL.CW = 2304;
lime_graphics_opengl_GL.CCW = 2305;
lime_graphics_opengl_GL.LINE_WIDTH = 2849;
lime_graphics_opengl_GL.ALIASED_POINT_SIZE_RANGE = 33901;
lime_graphics_opengl_GL.ALIASED_LINE_WIDTH_RANGE = 33902;
lime_graphics_opengl_GL.CULL_FACE_MODE = 2885;
lime_graphics_opengl_GL.FRONT_FACE = 2886;
lime_graphics_opengl_GL.DEPTH_RANGE = 2928;
lime_graphics_opengl_GL.DEPTH_WRITEMASK = 2930;
lime_graphics_opengl_GL.DEPTH_CLEAR_VALUE = 2931;
lime_graphics_opengl_GL.DEPTH_FUNC = 2932;
lime_graphics_opengl_GL.STENCIL_CLEAR_VALUE = 2961;
lime_graphics_opengl_GL.STENCIL_FUNC = 2962;
lime_graphics_opengl_GL.STENCIL_FAIL = 2964;
lime_graphics_opengl_GL.STENCIL_PASS_DEPTH_FAIL = 2965;
lime_graphics_opengl_GL.STENCIL_PASS_DEPTH_PASS = 2966;
lime_graphics_opengl_GL.STENCIL_REF = 2967;
lime_graphics_opengl_GL.STENCIL_VALUE_MASK = 2963;
lime_graphics_opengl_GL.STENCIL_WRITEMASK = 2968;
lime_graphics_opengl_GL.STENCIL_BACK_FUNC = 34816;
lime_graphics_opengl_GL.STENCIL_BACK_FAIL = 34817;
lime_graphics_opengl_GL.STENCIL_BACK_PASS_DEPTH_FAIL = 34818;
lime_graphics_opengl_GL.STENCIL_BACK_PASS_DEPTH_PASS = 34819;
lime_graphics_opengl_GL.STENCIL_BACK_REF = 36003;
lime_graphics_opengl_GL.STENCIL_BACK_VALUE_MASK = 36004;
lime_graphics_opengl_GL.STENCIL_BACK_WRITEMASK = 36005;
lime_graphics_opengl_GL.VIEWPORT = 2978;
lime_graphics_opengl_GL.SCISSOR_BOX = 3088;
lime_graphics_opengl_GL.COLOR_CLEAR_VALUE = 3106;
lime_graphics_opengl_GL.COLOR_WRITEMASK = 3107;
lime_graphics_opengl_GL.UNPACK_ALIGNMENT = 3317;
lime_graphics_opengl_GL.PACK_ALIGNMENT = 3333;
lime_graphics_opengl_GL.MAX_TEXTURE_SIZE = 3379;
lime_graphics_opengl_GL.MAX_VIEWPORT_DIMS = 3386;
lime_graphics_opengl_GL.SUBPIXEL_BITS = 3408;
lime_graphics_opengl_GL.RED_BITS = 3410;
lime_graphics_opengl_GL.GREEN_BITS = 3411;
lime_graphics_opengl_GL.BLUE_BITS = 3412;
lime_graphics_opengl_GL.ALPHA_BITS = 3413;
lime_graphics_opengl_GL.DEPTH_BITS = 3414;
lime_graphics_opengl_GL.STENCIL_BITS = 3415;
lime_graphics_opengl_GL.POLYGON_OFFSET_UNITS = 10752;
lime_graphics_opengl_GL.POLYGON_OFFSET_FACTOR = 32824;
lime_graphics_opengl_GL.TEXTURE_BINDING_2D = 32873;
lime_graphics_opengl_GL.SAMPLE_BUFFERS = 32936;
lime_graphics_opengl_GL.SAMPLES = 32937;
lime_graphics_opengl_GL.SAMPLE_COVERAGE_VALUE = 32938;
lime_graphics_opengl_GL.SAMPLE_COVERAGE_INVERT = 32939;
lime_graphics_opengl_GL.COMPRESSED_TEXTURE_FORMATS = 34467;
lime_graphics_opengl_GL.DONT_CARE = 4352;
lime_graphics_opengl_GL.FASTEST = 4353;
lime_graphics_opengl_GL.NICEST = 4354;
lime_graphics_opengl_GL.GENERATE_MIPMAP_HINT = 33170;
lime_graphics_opengl_GL.BYTE = 5120;
lime_graphics_opengl_GL.UNSIGNED_BYTE = 5121;
lime_graphics_opengl_GL.SHORT = 5122;
lime_graphics_opengl_GL.UNSIGNED_SHORT = 5123;
lime_graphics_opengl_GL.INT = 5124;
lime_graphics_opengl_GL.UNSIGNED_INT = 5125;
lime_graphics_opengl_GL.FLOAT = 5126;
lime_graphics_opengl_GL.DEPTH_COMPONENT = 6402;
lime_graphics_opengl_GL.ALPHA = 6406;
lime_graphics_opengl_GL.RGB = 6407;
lime_graphics_opengl_GL.RGBA = 6408;
lime_graphics_opengl_GL.BGR_EXT = 32992;
lime_graphics_opengl_GL.BGRA_EXT = 32993;
lime_graphics_opengl_GL.LUMINANCE = 6409;
lime_graphics_opengl_GL.LUMINANCE_ALPHA = 6410;
lime_graphics_opengl_GL.UNSIGNED_SHORT_4_4_4_4 = 32819;
lime_graphics_opengl_GL.UNSIGNED_SHORT_5_5_5_1 = 32820;
lime_graphics_opengl_GL.UNSIGNED_SHORT_5_6_5 = 33635;
lime_graphics_opengl_GL.FRAGMENT_SHADER = 35632;
lime_graphics_opengl_GL.VERTEX_SHADER = 35633;
lime_graphics_opengl_GL.MAX_VERTEX_ATTRIBS = 34921;
lime_graphics_opengl_GL.MAX_VERTEX_UNIFORM_VECTORS = 36347;
lime_graphics_opengl_GL.MAX_VARYING_VECTORS = 36348;
lime_graphics_opengl_GL.MAX_COMBINED_TEXTURE_IMAGE_UNITS = 35661;
lime_graphics_opengl_GL.MAX_VERTEX_TEXTURE_IMAGE_UNITS = 35660;
lime_graphics_opengl_GL.MAX_TEXTURE_IMAGE_UNITS = 34930;
lime_graphics_opengl_GL.MAX_FRAGMENT_UNIFORM_VECTORS = 36349;
lime_graphics_opengl_GL.SHADER_TYPE = 35663;
lime_graphics_opengl_GL.DELETE_STATUS = 35712;
lime_graphics_opengl_GL.LINK_STATUS = 35714;
lime_graphics_opengl_GL.VALIDATE_STATUS = 35715;
lime_graphics_opengl_GL.ATTACHED_SHADERS = 35717;
lime_graphics_opengl_GL.ACTIVE_UNIFORMS = 35718;
lime_graphics_opengl_GL.ACTIVE_ATTRIBUTES = 35721;
lime_graphics_opengl_GL.SHADING_LANGUAGE_VERSION = 35724;
lime_graphics_opengl_GL.CURRENT_PROGRAM = 35725;
lime_graphics_opengl_GL.NEVER = 512;
lime_graphics_opengl_GL.LESS = 513;
lime_graphics_opengl_GL.EQUAL = 514;
lime_graphics_opengl_GL.LEQUAL = 515;
lime_graphics_opengl_GL.GREATER = 516;
lime_graphics_opengl_GL.NOTEQUAL = 517;
lime_graphics_opengl_GL.GEQUAL = 518;
lime_graphics_opengl_GL.ALWAYS = 519;
lime_graphics_opengl_GL.KEEP = 7680;
lime_graphics_opengl_GL.REPLACE = 7681;
lime_graphics_opengl_GL.INCR = 7682;
lime_graphics_opengl_GL.DECR = 7683;
lime_graphics_opengl_GL.INVERT = 5386;
lime_graphics_opengl_GL.INCR_WRAP = 34055;
lime_graphics_opengl_GL.DECR_WRAP = 34056;
lime_graphics_opengl_GL.VENDOR = 7936;
lime_graphics_opengl_GL.RENDERER = 7937;
lime_graphics_opengl_GL.VERSION = 7938;
lime_graphics_opengl_GL.NEAREST = 9728;
lime_graphics_opengl_GL.LINEAR = 9729;
lime_graphics_opengl_GL.NEAREST_MIPMAP_NEAREST = 9984;
lime_graphics_opengl_GL.LINEAR_MIPMAP_NEAREST = 9985;
lime_graphics_opengl_GL.NEAREST_MIPMAP_LINEAR = 9986;
lime_graphics_opengl_GL.LINEAR_MIPMAP_LINEAR = 9987;
lime_graphics_opengl_GL.TEXTURE_MAG_FILTER = 10240;
lime_graphics_opengl_GL.TEXTURE_MIN_FILTER = 10241;
lime_graphics_opengl_GL.TEXTURE_WRAP_S = 10242;
lime_graphics_opengl_GL.TEXTURE_WRAP_T = 10243;
lime_graphics_opengl_GL.TEXTURE_2D = 3553;
lime_graphics_opengl_GL.TEXTURE = 5890;
lime_graphics_opengl_GL.TEXTURE_CUBE_MAP = 34067;
lime_graphics_opengl_GL.TEXTURE_BINDING_CUBE_MAP = 34068;
lime_graphics_opengl_GL.TEXTURE_CUBE_MAP_POSITIVE_X = 34069;
lime_graphics_opengl_GL.TEXTURE_CUBE_MAP_NEGATIVE_X = 34070;
lime_graphics_opengl_GL.TEXTURE_CUBE_MAP_POSITIVE_Y = 34071;
lime_graphics_opengl_GL.TEXTURE_CUBE_MAP_NEGATIVE_Y = 34072;
lime_graphics_opengl_GL.TEXTURE_CUBE_MAP_POSITIVE_Z = 34073;
lime_graphics_opengl_GL.TEXTURE_CUBE_MAP_NEGATIVE_Z = 34074;
lime_graphics_opengl_GL.MAX_CUBE_MAP_TEXTURE_SIZE = 34076;
lime_graphics_opengl_GL.TEXTURE0 = 33984;
lime_graphics_opengl_GL.TEXTURE1 = 33985;
lime_graphics_opengl_GL.TEXTURE2 = 33986;
lime_graphics_opengl_GL.TEXTURE3 = 33987;
lime_graphics_opengl_GL.TEXTURE4 = 33988;
lime_graphics_opengl_GL.TEXTURE5 = 33989;
lime_graphics_opengl_GL.TEXTURE6 = 33990;
lime_graphics_opengl_GL.TEXTURE7 = 33991;
lime_graphics_opengl_GL.TEXTURE8 = 33992;
lime_graphics_opengl_GL.TEXTURE9 = 33993;
lime_graphics_opengl_GL.TEXTURE10 = 33994;
lime_graphics_opengl_GL.TEXTURE11 = 33995;
lime_graphics_opengl_GL.TEXTURE12 = 33996;
lime_graphics_opengl_GL.TEXTURE13 = 33997;
lime_graphics_opengl_GL.TEXTURE14 = 33998;
lime_graphics_opengl_GL.TEXTURE15 = 33999;
lime_graphics_opengl_GL.TEXTURE16 = 34000;
lime_graphics_opengl_GL.TEXTURE17 = 34001;
lime_graphics_opengl_GL.TEXTURE18 = 34002;
lime_graphics_opengl_GL.TEXTURE19 = 34003;
lime_graphics_opengl_GL.TEXTURE20 = 34004;
lime_graphics_opengl_GL.TEXTURE21 = 34005;
lime_graphics_opengl_GL.TEXTURE22 = 34006;
lime_graphics_opengl_GL.TEXTURE23 = 34007;
lime_graphics_opengl_GL.TEXTURE24 = 34008;
lime_graphics_opengl_GL.TEXTURE25 = 34009;
lime_graphics_opengl_GL.TEXTURE26 = 34010;
lime_graphics_opengl_GL.TEXTURE27 = 34011;
lime_graphics_opengl_GL.TEXTURE28 = 34012;
lime_graphics_opengl_GL.TEXTURE29 = 34013;
lime_graphics_opengl_GL.TEXTURE30 = 34014;
lime_graphics_opengl_GL.TEXTURE31 = 34015;
lime_graphics_opengl_GL.ACTIVE_TEXTURE = 34016;
lime_graphics_opengl_GL.REPEAT = 10497;
lime_graphics_opengl_GL.CLAMP_TO_EDGE = 33071;
lime_graphics_opengl_GL.MIRRORED_REPEAT = 33648;
lime_graphics_opengl_GL.FLOAT_VEC2 = 35664;
lime_graphics_opengl_GL.FLOAT_VEC3 = 35665;
lime_graphics_opengl_GL.FLOAT_VEC4 = 35666;
lime_graphics_opengl_GL.INT_VEC2 = 35667;
lime_graphics_opengl_GL.INT_VEC3 = 35668;
lime_graphics_opengl_GL.INT_VEC4 = 35669;
lime_graphics_opengl_GL.BOOL = 35670;
lime_graphics_opengl_GL.BOOL_VEC2 = 35671;
lime_graphics_opengl_GL.BOOL_VEC3 = 35672;
lime_graphics_opengl_GL.BOOL_VEC4 = 35673;
lime_graphics_opengl_GL.FLOAT_MAT2 = 35674;
lime_graphics_opengl_GL.FLOAT_MAT3 = 35675;
lime_graphics_opengl_GL.FLOAT_MAT4 = 35676;
lime_graphics_opengl_GL.SAMPLER_2D = 35678;
lime_graphics_opengl_GL.SAMPLER_CUBE = 35680;
lime_graphics_opengl_GL.VERTEX_ATTRIB_ARRAY_ENABLED = 34338;
lime_graphics_opengl_GL.VERTEX_ATTRIB_ARRAY_SIZE = 34339;
lime_graphics_opengl_GL.VERTEX_ATTRIB_ARRAY_STRIDE = 34340;
lime_graphics_opengl_GL.VERTEX_ATTRIB_ARRAY_TYPE = 34341;
lime_graphics_opengl_GL.VERTEX_ATTRIB_ARRAY_NORMALIZED = 34922;
lime_graphics_opengl_GL.VERTEX_ATTRIB_ARRAY_POINTER = 34373;
lime_graphics_opengl_GL.VERTEX_ATTRIB_ARRAY_BUFFER_BINDING = 34975;
lime_graphics_opengl_GL.VERTEX_PROGRAM_POINT_SIZE = 34370;
lime_graphics_opengl_GL.POINT_SPRITE = 34913;
lime_graphics_opengl_GL.COMPILE_STATUS = 35713;
lime_graphics_opengl_GL.LOW_FLOAT = 36336;
lime_graphics_opengl_GL.MEDIUM_FLOAT = 36337;
lime_graphics_opengl_GL.HIGH_FLOAT = 36338;
lime_graphics_opengl_GL.LOW_INT = 36339;
lime_graphics_opengl_GL.MEDIUM_INT = 36340;
lime_graphics_opengl_GL.HIGH_INT = 36341;
lime_graphics_opengl_GL.FRAMEBUFFER = 36160;
lime_graphics_opengl_GL.RENDERBUFFER = 36161;
lime_graphics_opengl_GL.RGBA4 = 32854;
lime_graphics_opengl_GL.RGB5_A1 = 32855;
lime_graphics_opengl_GL.RGB565 = 36194;
lime_graphics_opengl_GL.DEPTH_COMPONENT16 = 33189;
lime_graphics_opengl_GL.STENCIL_INDEX = 6401;
lime_graphics_opengl_GL.STENCIL_INDEX8 = 36168;
lime_graphics_opengl_GL.DEPTH_STENCIL = 34041;
lime_graphics_opengl_GL.RENDERBUFFER_WIDTH = 36162;
lime_graphics_opengl_GL.RENDERBUFFER_HEIGHT = 36163;
lime_graphics_opengl_GL.RENDERBUFFER_INTERNAL_FORMAT = 36164;
lime_graphics_opengl_GL.RENDERBUFFER_RED_SIZE = 36176;
lime_graphics_opengl_GL.RENDERBUFFER_GREEN_SIZE = 36177;
lime_graphics_opengl_GL.RENDERBUFFER_BLUE_SIZE = 36178;
lime_graphics_opengl_GL.RENDERBUFFER_ALPHA_SIZE = 36179;
lime_graphics_opengl_GL.RENDERBUFFER_DEPTH_SIZE = 36180;
lime_graphics_opengl_GL.RENDERBUFFER_STENCIL_SIZE = 36181;
lime_graphics_opengl_GL.FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE = 36048;
lime_graphics_opengl_GL.FRAMEBUFFER_ATTACHMENT_OBJECT_NAME = 36049;
lime_graphics_opengl_GL.FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL = 36050;
lime_graphics_opengl_GL.FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE = 36051;
lime_graphics_opengl_GL.COLOR_ATTACHMENT0 = 36064;
lime_graphics_opengl_GL.DEPTH_ATTACHMENT = 36096;
lime_graphics_opengl_GL.STENCIL_ATTACHMENT = 36128;
lime_graphics_opengl_GL.DEPTH_STENCIL_ATTACHMENT = 33306;
lime_graphics_opengl_GL.NONE = 0;
lime_graphics_opengl_GL.FRAMEBUFFER_COMPLETE = 36053;
lime_graphics_opengl_GL.FRAMEBUFFER_INCOMPLETE_ATTACHMENT = 36054;
lime_graphics_opengl_GL.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT = 36055;
lime_graphics_opengl_GL.FRAMEBUFFER_INCOMPLETE_DIMENSIONS = 36057;
lime_graphics_opengl_GL.FRAMEBUFFER_UNSUPPORTED = 36061;
lime_graphics_opengl_GL.FRAMEBUFFER_BINDING = 36006;
lime_graphics_opengl_GL.RENDERBUFFER_BINDING = 36007;
lime_graphics_opengl_GL.MAX_RENDERBUFFER_SIZE = 34024;
lime_graphics_opengl_GL.INVALID_FRAMEBUFFER_OPERATION = 1286;
lime_graphics_opengl_GL.UNPACK_FLIP_Y_WEBGL = 37440;
lime_graphics_opengl_GL.UNPACK_PREMULTIPLY_ALPHA_WEBGL = 37441;
lime_graphics_opengl_GL.CONTEXT_LOST_WEBGL = 37442;
lime_graphics_opengl_GL.UNPACK_COLORSPACE_CONVERSION_WEBGL = 37443;
lime_graphics_opengl_GL.BROWSER_DEFAULT_WEBGL = 37444;
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__identity = [1.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0];
lime_math_Matrix3.__identity = new lime_math_Matrix3();
lime_math__$Matrix4_Matrix4_$Impl_$.__identity = [1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0];
lime_net_curl__$CURL_CURL_$Impl_$.GLOBAL_SSL = 1;
lime_net_curl__$CURL_CURL_$Impl_$.GLOBAL_WIN32 = 2;
lime_net_curl__$CURL_CURL_$Impl_$.GLOBAL_ALL = 3;
lime_net_curl__$CURL_CURL_$Impl_$.GLOBAL_NOTHING = 0;
lime_net_curl__$CURL_CURL_$Impl_$.GLOBAL_DEFAULT = 3;
lime_net_curl__$CURL_CURL_$Impl_$.GLOBAL_ACK_EINTR = 4;
lime_system_BackgroundWorker.MESSAGE_COMPLETE = "__COMPLETE__";
lime_system_BackgroundWorker.MESSAGE_ERROR = "__ERROR__";
lime_system_System.__directories = new haxe_ds_IntMap();
lime_text__$TextDirection_TextDirection_$Impl_$.INVALID = 0;
lime_text__$TextDirection_TextDirection_$Impl_$.LEFT_TO_RIGHT = 4;
lime_text__$TextDirection_TextDirection_$Impl_$.RIGHT_TO_LEFT = 5;
lime_text__$TextDirection_TextDirection_$Impl_$.TOP_TO_BOTTOM = 6;
lime_text__$TextDirection_TextDirection_$Impl_$.BOTTOM_TO_TOP = 7;
lime_text__$TextScript_TextScript_$Impl_$.COMMON = "Zyyy";
lime_text__$TextScript_TextScript_$Impl_$.INHERITED = "Zinh";
lime_text__$TextScript_TextScript_$Impl_$.UNKNOWN = "Zzzz";
lime_text__$TextScript_TextScript_$Impl_$.ARABIC = "Arab";
lime_text__$TextScript_TextScript_$Impl_$.ARMENIAN = "Armn";
lime_text__$TextScript_TextScript_$Impl_$.BENGALI = "Beng";
lime_text__$TextScript_TextScript_$Impl_$.CYRILLIC = "Cyrl";
lime_text__$TextScript_TextScript_$Impl_$.DEVANAGARI = "Deva";
lime_text__$TextScript_TextScript_$Impl_$.GEORGIAN = "Geor";
lime_text__$TextScript_TextScript_$Impl_$.GREEK = "Grek";
lime_text__$TextScript_TextScript_$Impl_$.GUJARATI = "Gujr";
lime_text__$TextScript_TextScript_$Impl_$.GURMUKHI = "Guru";
lime_text__$TextScript_TextScript_$Impl_$.HANGUL = "Hang";
lime_text__$TextScript_TextScript_$Impl_$.HAN = "Hani";
lime_text__$TextScript_TextScript_$Impl_$.HEBREW = "Hebr";
lime_text__$TextScript_TextScript_$Impl_$.HIRAGANA = "Hira";
lime_text__$TextScript_TextScript_$Impl_$.KANNADA = "Knda";
lime_text__$TextScript_TextScript_$Impl_$.KATAKANA = "Kana";
lime_text__$TextScript_TextScript_$Impl_$.LAO = "Laoo";
lime_text__$TextScript_TextScript_$Impl_$.LATIN = "Latn";
lime_text__$TextScript_TextScript_$Impl_$.MALAYALAM = "Mlym";
lime_text__$TextScript_TextScript_$Impl_$.ORIYA = "Orya";
lime_text__$TextScript_TextScript_$Impl_$.TAMIL = "Taml";
lime_text__$TextScript_TextScript_$Impl_$.TELUGA = "Telu";
lime_text__$TextScript_TextScript_$Impl_$.THAI = "Thai";
lime_text__$TextScript_TextScript_$Impl_$.TIBETAN = "Tibt";
lime_text__$TextScript_TextScript_$Impl_$.BOPOMOFO = "Bopo";
lime_text__$TextScript_TextScript_$Impl_$.BRAILLE = "Brai";
lime_text__$TextScript_TextScript_$Impl_$.CANADIAN_SYLLABICS = "Cans";
lime_text__$TextScript_TextScript_$Impl_$.CHEROKEE = "Cher";
lime_text__$TextScript_TextScript_$Impl_$.ETHIOPIC = "Ethi";
lime_text__$TextScript_TextScript_$Impl_$.KHMER = "Khmr";
lime_text__$TextScript_TextScript_$Impl_$.MONGOLIAN = "Mong";
lime_text__$TextScript_TextScript_$Impl_$.MYANMAR = "Mymr";
lime_text__$TextScript_TextScript_$Impl_$.OGHAM = "Ogam";
lime_text__$TextScript_TextScript_$Impl_$.RUNIC = "Runr";
lime_text__$TextScript_TextScript_$Impl_$.SINHALA = "Sinh";
lime_text__$TextScript_TextScript_$Impl_$.SYRIAC = "Syrc";
lime_text__$TextScript_TextScript_$Impl_$.THAANA = "Thaa";
lime_text__$TextScript_TextScript_$Impl_$.YI = "Yiii";
lime_text__$TextScript_TextScript_$Impl_$.DESERET = "Dsrt";
lime_text__$TextScript_TextScript_$Impl_$.GOTHIC = "Goth";
lime_text__$TextScript_TextScript_$Impl_$.OLD_ITALIC = "Ital";
lime_text__$TextScript_TextScript_$Impl_$.BUHID = "Buhd";
lime_text__$TextScript_TextScript_$Impl_$.HANUNOO = "Hano";
lime_text__$TextScript_TextScript_$Impl_$.TAGALOG = "Tglg";
lime_text__$TextScript_TextScript_$Impl_$.TAGBANWA = "Tagb";
lime_text__$TextScript_TextScript_$Impl_$.CYPRIOT = "Cprt";
lime_text__$TextScript_TextScript_$Impl_$.LIMBU = "Limb";
lime_text__$TextScript_TextScript_$Impl_$.LINEAR_B = "Linb";
lime_text__$TextScript_TextScript_$Impl_$.OSMANYA = "Osma";
lime_text__$TextScript_TextScript_$Impl_$.SHAVIAN = "Shaw";
lime_text__$TextScript_TextScript_$Impl_$.TAI_LE = "Tale";
lime_text__$TextScript_TextScript_$Impl_$.UGARITIC = "Ugar";
lime_text__$TextScript_TextScript_$Impl_$.BUGINESE = "Bugi";
lime_text__$TextScript_TextScript_$Impl_$.COPTIC = "Copt";
lime_text__$TextScript_TextScript_$Impl_$.GLAGOLITIC = "Glag";
lime_text__$TextScript_TextScript_$Impl_$.KHAROSHTHI = "Khar";
lime_text__$TextScript_TextScript_$Impl_$.NEW_TAI_LUE = "Talu";
lime_text__$TextScript_TextScript_$Impl_$.OLD_PERSIAN = "Xpeo";
lime_text__$TextScript_TextScript_$Impl_$.SYLOTI_NAGRI = "Sylo";
lime_text__$TextScript_TextScript_$Impl_$.TIFINAGH = "Tfng";
lime_text__$TextScript_TextScript_$Impl_$.BALINESE = "Bali";
lime_text__$TextScript_TextScript_$Impl_$.CUNEIFORM = "Xsux";
lime_text__$TextScript_TextScript_$Impl_$.NKO = "Nkoo";
lime_text__$TextScript_TextScript_$Impl_$.PHAGS_PA = "Phag";
lime_text__$TextScript_TextScript_$Impl_$.PHOENICIAN = "Phnx";
lime_text__$TextScript_TextScript_$Impl_$.CARIAN = "Cari";
lime_text__$TextScript_TextScript_$Impl_$.CHAM = "Cham";
lime_text__$TextScript_TextScript_$Impl_$.KAYAH_LI = "Kali";
lime_text__$TextScript_TextScript_$Impl_$.LEPCHA = "Lepc";
lime_text__$TextScript_TextScript_$Impl_$.LYCIAN = "Lyci";
lime_text__$TextScript_TextScript_$Impl_$.LYDIAN = "Lydi";
lime_text__$TextScript_TextScript_$Impl_$.OL_CHIKI = "Olck";
lime_text__$TextScript_TextScript_$Impl_$.REJANG = "Rjng";
lime_text__$TextScript_TextScript_$Impl_$.SAURASHTRA = "Saur";
lime_text__$TextScript_TextScript_$Impl_$.SUNDANESE = "Sund";
lime_text__$TextScript_TextScript_$Impl_$.VAI = "Vaii";
lime_text__$TextScript_TextScript_$Impl_$.AVESTAN = "Avst";
lime_text__$TextScript_TextScript_$Impl_$.BAMUM = "Bamu";
lime_text__$TextScript_TextScript_$Impl_$.EGYPTIAN_HIEROGLYPHS = "Egyp";
lime_text__$TextScript_TextScript_$Impl_$.IMPERIAL_ARAMAIC = "Armi";
lime_text__$TextScript_TextScript_$Impl_$.INSCRIPTIONAL_PAHLAVI = "Phli";
lime_text__$TextScript_TextScript_$Impl_$.INSCRIPTIONAL_PARTHIAN = "Prti";
lime_text__$TextScript_TextScript_$Impl_$.JAVANESE = "Java";
lime_text__$TextScript_TextScript_$Impl_$.KAITHI = "Kthi";
lime_text__$TextScript_TextScript_$Impl_$.LISU = "Lisu";
lime_text__$TextScript_TextScript_$Impl_$.MEETEI_MAYEK = "Mtei";
lime_text__$TextScript_TextScript_$Impl_$.OLD_SOUTH_ARABIAN = "Sarb";
lime_text__$TextScript_TextScript_$Impl_$.OLD_TURKIC = "Orkh";
lime_text__$TextScript_TextScript_$Impl_$.SAMARITAN = "Samr";
lime_text__$TextScript_TextScript_$Impl_$.TAI_THAM = "Lana";
lime_text__$TextScript_TextScript_$Impl_$.TAI_VIET = "Tavt";
lime_text__$TextScript_TextScript_$Impl_$.BATAK = "Batk";
lime_text__$TextScript_TextScript_$Impl_$.BRAHMI = "Brah";
lime_text__$TextScript_TextScript_$Impl_$.MANDAIC = "Mand";
lime_text__$TextScript_TextScript_$Impl_$.CHAKMA = "Cakm";
lime_text__$TextScript_TextScript_$Impl_$.MEROITIC_CURSIVE = "Merc";
lime_text__$TextScript_TextScript_$Impl_$.MEROITIC_HIEROGLYPHS = "Mero";
lime_text__$TextScript_TextScript_$Impl_$.MIAO = "Plrd";
lime_text__$TextScript_TextScript_$Impl_$.SHARADA = "Shrd";
lime_text__$TextScript_TextScript_$Impl_$.SORA_SOMPENG = "Sora";
lime_text__$TextScript_TextScript_$Impl_$.TAKRI = "Takr";
lime_text__$TextScript_TextScript_$Impl_$.BASSA_VAH = "Bass";
lime_text__$TextScript_TextScript_$Impl_$.CAUCASIAN_ALBANIAN = "Aghb";
lime_text__$TextScript_TextScript_$Impl_$.DUPLOYAN = "Dupl";
lime_text__$TextScript_TextScript_$Impl_$.ELBASAN = "Elba";
lime_text__$TextScript_TextScript_$Impl_$.GRANTHA = "Gran";
lime_text__$TextScript_TextScript_$Impl_$.KHOJKI = "Khoj";
lime_text__$TextScript_TextScript_$Impl_$.KHUDAWADI = "Sind";
lime_text__$TextScript_TextScript_$Impl_$.LINEAR_A = "Lina";
lime_text__$TextScript_TextScript_$Impl_$.MAHAJANI = "Mahj";
lime_text__$TextScript_TextScript_$Impl_$.MANICHAEAN = "Mani";
lime_text__$TextScript_TextScript_$Impl_$.MENDE_KIKAKUI = "Mend";
lime_text__$TextScript_TextScript_$Impl_$.MODI = "Modi";
lime_text__$TextScript_TextScript_$Impl_$.MRO = "Mroo";
lime_text__$TextScript_TextScript_$Impl_$.NABATAEAN = "Nbat";
lime_text__$TextScript_TextScript_$Impl_$.OLD_NORTH_ARABIAN = "Narb";
lime_text__$TextScript_TextScript_$Impl_$.OLD_PERMIC = "Perm";
lime_text__$TextScript_TextScript_$Impl_$.PAHAWH_HMONG = "Hmng";
lime_text__$TextScript_TextScript_$Impl_$.PALMYRENE = "Palm";
lime_text__$TextScript_TextScript_$Impl_$.PAU_CIN_HAU = "Pauc";
lime_text__$TextScript_TextScript_$Impl_$.PSALTER_PAHLAVI = "Phlp";
lime_text__$TextScript_TextScript_$Impl_$.SIDDHAM = "Sidd";
lime_text__$TextScript_TextScript_$Impl_$.TIRHUTA = "Tirh";
lime_text__$TextScript_TextScript_$Impl_$.WARANG_CITI = "Wara";
lime_ui_Gamepad.devices = new haxe_ds_IntMap();
lime_ui_Gamepad.onConnect = new lime_app__$Event_$lime_$ui_$Gamepad_$Void();
lime_ui__$GamepadAxis_GamepadAxis_$Impl_$.LEFT_X = 0;
lime_ui__$GamepadAxis_GamepadAxis_$Impl_$.LEFT_Y = 1;
lime_ui__$GamepadAxis_GamepadAxis_$Impl_$.RIGHT_X = 2;
lime_ui__$GamepadAxis_GamepadAxis_$Impl_$.RIGHT_Y = 3;
lime_ui__$GamepadAxis_GamepadAxis_$Impl_$.TRIGGER_LEFT = 4;
lime_ui__$GamepadAxis_GamepadAxis_$Impl_$.TRIGGER_RIGHT = 5;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.A = 0;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.B = 1;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.X = 2;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.Y = 3;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.BACK = 4;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.GUIDE = 5;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.START = 6;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.LEFT_STICK = 7;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.RIGHT_STICK = 8;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.LEFT_SHOULDER = 9;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.RIGHT_SHOULDER = 10;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.DPAD_UP = 11;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.DPAD_DOWN = 12;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.DPAD_LEFT = 13;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.DPAD_RIGHT = 14;
lime_ui_Joystick.devices = new haxe_ds_IntMap();
lime_ui_Joystick.onConnect = new lime_app__$Event_$lime_$ui_$Joystick_$Void();
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.CENTER = 0;
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.DOWN = 4;
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.LEFT = 8;
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.RIGHT = 2;
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.UP = 1;
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.DOWN_LEFT = 12;
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.DOWN_RIGHT = 6;
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.UP_LEFT = 9;
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.UP_RIGHT = 3;
lime_ui__$KeyCode_KeyCode_$Impl_$.UNKNOWN = 0;
lime_ui__$KeyCode_KeyCode_$Impl_$.BACKSPACE = 8;
lime_ui__$KeyCode_KeyCode_$Impl_$.TAB = 9;
lime_ui__$KeyCode_KeyCode_$Impl_$.RETURN = 13;
lime_ui__$KeyCode_KeyCode_$Impl_$.ESCAPE = 27;
lime_ui__$KeyCode_KeyCode_$Impl_$.SPACE = 32;
lime_ui__$KeyCode_KeyCode_$Impl_$.EXCLAMATION = 33;
lime_ui__$KeyCode_KeyCode_$Impl_$.QUOTE = 34;
lime_ui__$KeyCode_KeyCode_$Impl_$.HASH = 35;
lime_ui__$KeyCode_KeyCode_$Impl_$.DOLLAR = 36;
lime_ui__$KeyCode_KeyCode_$Impl_$.PERCENT = 37;
lime_ui__$KeyCode_KeyCode_$Impl_$.AMPERSAND = 38;
lime_ui__$KeyCode_KeyCode_$Impl_$.SINGLE_QUOTE = 39;
lime_ui__$KeyCode_KeyCode_$Impl_$.LEFT_PARENTHESIS = 40;
lime_ui__$KeyCode_KeyCode_$Impl_$.RIGHT_PARENTHESIS = 41;
lime_ui__$KeyCode_KeyCode_$Impl_$.ASTERISK = 42;
lime_ui__$KeyCode_KeyCode_$Impl_$.PLUS = 43;
lime_ui__$KeyCode_KeyCode_$Impl_$.COMMA = 44;
lime_ui__$KeyCode_KeyCode_$Impl_$.MINUS = 45;
lime_ui__$KeyCode_KeyCode_$Impl_$.PERIOD = 46;
lime_ui__$KeyCode_KeyCode_$Impl_$.SLASH = 47;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMBER_0 = 48;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMBER_1 = 49;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMBER_2 = 50;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMBER_3 = 51;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMBER_4 = 52;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMBER_5 = 53;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMBER_6 = 54;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMBER_7 = 55;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMBER_8 = 56;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMBER_9 = 57;
lime_ui__$KeyCode_KeyCode_$Impl_$.COLON = 58;
lime_ui__$KeyCode_KeyCode_$Impl_$.SEMICOLON = 59;
lime_ui__$KeyCode_KeyCode_$Impl_$.LESS_THAN = 60;
lime_ui__$KeyCode_KeyCode_$Impl_$.EQUALS = 61;
lime_ui__$KeyCode_KeyCode_$Impl_$.GREATER_THAN = 62;
lime_ui__$KeyCode_KeyCode_$Impl_$.QUESTION = 63;
lime_ui__$KeyCode_KeyCode_$Impl_$.AT = 64;
lime_ui__$KeyCode_KeyCode_$Impl_$.LEFT_BRACKET = 91;
lime_ui__$KeyCode_KeyCode_$Impl_$.BACKSLASH = 92;
lime_ui__$KeyCode_KeyCode_$Impl_$.RIGHT_BRACKET = 93;
lime_ui__$KeyCode_KeyCode_$Impl_$.CARET = 94;
lime_ui__$KeyCode_KeyCode_$Impl_$.UNDERSCORE = 95;
lime_ui__$KeyCode_KeyCode_$Impl_$.GRAVE = 96;
lime_ui__$KeyCode_KeyCode_$Impl_$.A = 97;
lime_ui__$KeyCode_KeyCode_$Impl_$.B = 98;
lime_ui__$KeyCode_KeyCode_$Impl_$.C = 99;
lime_ui__$KeyCode_KeyCode_$Impl_$.D = 100;
lime_ui__$KeyCode_KeyCode_$Impl_$.E = 101;
lime_ui__$KeyCode_KeyCode_$Impl_$.F = 102;
lime_ui__$KeyCode_KeyCode_$Impl_$.G = 103;
lime_ui__$KeyCode_KeyCode_$Impl_$.H = 104;
lime_ui__$KeyCode_KeyCode_$Impl_$.I = 105;
lime_ui__$KeyCode_KeyCode_$Impl_$.J = 106;
lime_ui__$KeyCode_KeyCode_$Impl_$.K = 107;
lime_ui__$KeyCode_KeyCode_$Impl_$.L = 108;
lime_ui__$KeyCode_KeyCode_$Impl_$.M = 109;
lime_ui__$KeyCode_KeyCode_$Impl_$.N = 110;
lime_ui__$KeyCode_KeyCode_$Impl_$.O = 111;
lime_ui__$KeyCode_KeyCode_$Impl_$.P = 112;
lime_ui__$KeyCode_KeyCode_$Impl_$.Q = 113;
lime_ui__$KeyCode_KeyCode_$Impl_$.R = 114;
lime_ui__$KeyCode_KeyCode_$Impl_$.S = 115;
lime_ui__$KeyCode_KeyCode_$Impl_$.T = 116;
lime_ui__$KeyCode_KeyCode_$Impl_$.U = 117;
lime_ui__$KeyCode_KeyCode_$Impl_$.V = 118;
lime_ui__$KeyCode_KeyCode_$Impl_$.W = 119;
lime_ui__$KeyCode_KeyCode_$Impl_$.X = 120;
lime_ui__$KeyCode_KeyCode_$Impl_$.Y = 121;
lime_ui__$KeyCode_KeyCode_$Impl_$.Z = 122;
lime_ui__$KeyCode_KeyCode_$Impl_$.DELETE = 127;
lime_ui__$KeyCode_KeyCode_$Impl_$.CAPS_LOCK = 1073741881;
lime_ui__$KeyCode_KeyCode_$Impl_$.F1 = 1073741882;
lime_ui__$KeyCode_KeyCode_$Impl_$.F2 = 1073741883;
lime_ui__$KeyCode_KeyCode_$Impl_$.F3 = 1073741884;
lime_ui__$KeyCode_KeyCode_$Impl_$.F4 = 1073741885;
lime_ui__$KeyCode_KeyCode_$Impl_$.F5 = 1073741886;
lime_ui__$KeyCode_KeyCode_$Impl_$.F6 = 1073741887;
lime_ui__$KeyCode_KeyCode_$Impl_$.F7 = 1073741888;
lime_ui__$KeyCode_KeyCode_$Impl_$.F8 = 1073741889;
lime_ui__$KeyCode_KeyCode_$Impl_$.F9 = 1073741890;
lime_ui__$KeyCode_KeyCode_$Impl_$.F10 = 1073741891;
lime_ui__$KeyCode_KeyCode_$Impl_$.F11 = 1073741892;
lime_ui__$KeyCode_KeyCode_$Impl_$.F12 = 1073741893;
lime_ui__$KeyCode_KeyCode_$Impl_$.PRINT_SCREEN = 1073741894;
lime_ui__$KeyCode_KeyCode_$Impl_$.SCROLL_LOCK = 1073741895;
lime_ui__$KeyCode_KeyCode_$Impl_$.PAUSE = 1073741896;
lime_ui__$KeyCode_KeyCode_$Impl_$.INSERT = 1073741897;
lime_ui__$KeyCode_KeyCode_$Impl_$.HOME = 1073741898;
lime_ui__$KeyCode_KeyCode_$Impl_$.PAGE_UP = 1073741899;
lime_ui__$KeyCode_KeyCode_$Impl_$.END = 1073741901;
lime_ui__$KeyCode_KeyCode_$Impl_$.PAGE_DOWN = 1073741902;
lime_ui__$KeyCode_KeyCode_$Impl_$.RIGHT = 1073741903;
lime_ui__$KeyCode_KeyCode_$Impl_$.LEFT = 1073741904;
lime_ui__$KeyCode_KeyCode_$Impl_$.DOWN = 1073741905;
lime_ui__$KeyCode_KeyCode_$Impl_$.UP = 1073741906;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUM_LOCK = 1073741907;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_DIVIDE = 1073741908;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_MULTIPLY = 1073741909;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_MINUS = 1073741910;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_PLUS = 1073741911;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_ENTER = 1073741912;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_1 = 1073741913;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_2 = 1073741914;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_3 = 1073741915;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_4 = 1073741916;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_5 = 1073741917;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_6 = 1073741918;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_7 = 1073741919;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_8 = 1073741920;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_9 = 1073741921;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_0 = 1073741922;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_PERIOD = 1073741923;
lime_ui__$KeyCode_KeyCode_$Impl_$.APPLICATION = 1073741925;
lime_ui__$KeyCode_KeyCode_$Impl_$.POWER = 1073741926;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_EQUALS = 1073741927;
lime_ui__$KeyCode_KeyCode_$Impl_$.F13 = 1073741928;
lime_ui__$KeyCode_KeyCode_$Impl_$.F14 = 1073741929;
lime_ui__$KeyCode_KeyCode_$Impl_$.F15 = 1073741930;
lime_ui__$KeyCode_KeyCode_$Impl_$.F16 = 1073741931;
lime_ui__$KeyCode_KeyCode_$Impl_$.F17 = 1073741932;
lime_ui__$KeyCode_KeyCode_$Impl_$.F18 = 1073741933;
lime_ui__$KeyCode_KeyCode_$Impl_$.F19 = 1073741934;
lime_ui__$KeyCode_KeyCode_$Impl_$.F20 = 1073741935;
lime_ui__$KeyCode_KeyCode_$Impl_$.F21 = 1073741936;
lime_ui__$KeyCode_KeyCode_$Impl_$.F22 = 1073741937;
lime_ui__$KeyCode_KeyCode_$Impl_$.F23 = 1073741938;
lime_ui__$KeyCode_KeyCode_$Impl_$.F24 = 1073741939;
lime_ui__$KeyCode_KeyCode_$Impl_$.EXECUTE = 1073741940;
lime_ui__$KeyCode_KeyCode_$Impl_$.HELP = 1073741941;
lime_ui__$KeyCode_KeyCode_$Impl_$.MENU = 1073741942;
lime_ui__$KeyCode_KeyCode_$Impl_$.SELECT = 1073741943;
lime_ui__$KeyCode_KeyCode_$Impl_$.STOP = 1073741944;
lime_ui__$KeyCode_KeyCode_$Impl_$.AGAIN = 1073741945;
lime_ui__$KeyCode_KeyCode_$Impl_$.UNDO = 1073741946;
lime_ui__$KeyCode_KeyCode_$Impl_$.CUT = 1073741947;
lime_ui__$KeyCode_KeyCode_$Impl_$.COPY = 1073741948;
lime_ui__$KeyCode_KeyCode_$Impl_$.PASTE = 1073741949;
lime_ui__$KeyCode_KeyCode_$Impl_$.FIND = 1073741950;
lime_ui__$KeyCode_KeyCode_$Impl_$.MUTE = 1073741951;
lime_ui__$KeyCode_KeyCode_$Impl_$.VOLUME_UP = 1073741952;
lime_ui__$KeyCode_KeyCode_$Impl_$.VOLUME_DOWN = 1073741953;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_COMMA = 1073741957;
lime_ui__$KeyCode_KeyCode_$Impl_$.ALT_ERASE = 1073741977;
lime_ui__$KeyCode_KeyCode_$Impl_$.SYSTEM_REQUEST = 1073741978;
lime_ui__$KeyCode_KeyCode_$Impl_$.CANCEL = 1073741979;
lime_ui__$KeyCode_KeyCode_$Impl_$.CLEAR = 1073741980;
lime_ui__$KeyCode_KeyCode_$Impl_$.PRIOR = 1073741981;
lime_ui__$KeyCode_KeyCode_$Impl_$.RETURN2 = 1073741982;
lime_ui__$KeyCode_KeyCode_$Impl_$.SEPARATOR = 1073741983;
lime_ui__$KeyCode_KeyCode_$Impl_$.OUT = 1073741984;
lime_ui__$KeyCode_KeyCode_$Impl_$.OPER = 1073741985;
lime_ui__$KeyCode_KeyCode_$Impl_$.CLEAR_AGAIN = 1073741986;
lime_ui__$KeyCode_KeyCode_$Impl_$.CRSEL = 1073741987;
lime_ui__$KeyCode_KeyCode_$Impl_$.EXSEL = 1073741988;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_00 = 1073742000;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_000 = 1073742001;
lime_ui__$KeyCode_KeyCode_$Impl_$.THOUSAND_SEPARATOR = 1073742002;
lime_ui__$KeyCode_KeyCode_$Impl_$.DECIMAL_SEPARATOR = 1073742003;
lime_ui__$KeyCode_KeyCode_$Impl_$.CURRENCY_UNIT = 1073742004;
lime_ui__$KeyCode_KeyCode_$Impl_$.CURRENCY_SUBUNIT = 1073742005;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_LEFT_PARENTHESIS = 1073742006;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_RIGHT_PARENTHESIS = 1073742007;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_LEFT_BRACE = 1073742008;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_RIGHT_BRACE = 1073742009;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_TAB = 1073742010;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_BACKSPACE = 1073742011;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_A = 1073742012;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_B = 1073742013;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_C = 1073742014;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_D = 1073742015;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_E = 1073742016;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_F = 1073742017;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_XOR = 1073742018;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_POWER = 1073742019;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_PERCENT = 1073742020;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_LESS_THAN = 1073742021;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_GREATER_THAN = 1073742022;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_AMPERSAND = 1073742023;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_DOUBLE_AMPERSAND = 1073742024;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_VERTICAL_BAR = 1073742025;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_DOUBLE_VERTICAL_BAR = 1073742026;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_COLON = 1073742027;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_HASH = 1073742028;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_SPACE = 1073742029;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_AT = 1073742030;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_EXCLAMATION = 1073742031;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_MEM_STORE = 1073742032;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_MEM_RECALL = 1073742033;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_MEM_CLEAR = 1073742034;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_MEM_ADD = 1073742035;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_MEM_SUBTRACT = 1073742036;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_MEM_MULTIPLY = 1073742037;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_MEM_DIVIDE = 1073742038;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_PLUS_MINUS = 1073742039;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_CLEAR = 1073742040;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_CLEAR_ENTRY = 1073742041;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_BINARY = 1073742042;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_OCTAL = 1073742043;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_DECIMAL = 1073742044;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_HEXADECIMAL = 1073742045;
lime_ui__$KeyCode_KeyCode_$Impl_$.LEFT_CTRL = 1073742048;
lime_ui__$KeyCode_KeyCode_$Impl_$.LEFT_SHIFT = 1073742049;
lime_ui__$KeyCode_KeyCode_$Impl_$.LEFT_ALT = 1073742050;
lime_ui__$KeyCode_KeyCode_$Impl_$.LEFT_META = 1073742051;
lime_ui__$KeyCode_KeyCode_$Impl_$.RIGHT_CTRL = 1073742052;
lime_ui__$KeyCode_KeyCode_$Impl_$.RIGHT_SHIFT = 1073742053;
lime_ui__$KeyCode_KeyCode_$Impl_$.RIGHT_ALT = 1073742054;
lime_ui__$KeyCode_KeyCode_$Impl_$.RIGHT_META = 1073742055;
lime_ui__$KeyCode_KeyCode_$Impl_$.MODE = 1073742081;
lime_ui__$KeyCode_KeyCode_$Impl_$.AUDIO_NEXT = 1073742082;
lime_ui__$KeyCode_KeyCode_$Impl_$.AUDIO_PREVIOUS = 1073742083;
lime_ui__$KeyCode_KeyCode_$Impl_$.AUDIO_STOP = 1073742084;
lime_ui__$KeyCode_KeyCode_$Impl_$.AUDIO_PLAY = 1073742085;
lime_ui__$KeyCode_KeyCode_$Impl_$.AUDIO_MUTE = 1073742086;
lime_ui__$KeyCode_KeyCode_$Impl_$.MEDIA_SELECT = 1073742087;
lime_ui__$KeyCode_KeyCode_$Impl_$.WWW = 1073742088;
lime_ui__$KeyCode_KeyCode_$Impl_$.MAIL = 1073742089;
lime_ui__$KeyCode_KeyCode_$Impl_$.CALCULATOR = 1073742090;
lime_ui__$KeyCode_KeyCode_$Impl_$.COMPUTER = 1073742091;
lime_ui__$KeyCode_KeyCode_$Impl_$.APP_CONTROL_SEARCH = 1073742092;
lime_ui__$KeyCode_KeyCode_$Impl_$.APP_CONTROL_HOME = 1073742093;
lime_ui__$KeyCode_KeyCode_$Impl_$.APP_CONTROL_BACK = 1073742094;
lime_ui__$KeyCode_KeyCode_$Impl_$.APP_CONTROL_FORWARD = 1073742095;
lime_ui__$KeyCode_KeyCode_$Impl_$.APP_CONTROL_STOP = 1073742096;
lime_ui__$KeyCode_KeyCode_$Impl_$.APP_CONTROL_REFRESH = 1073742097;
lime_ui__$KeyCode_KeyCode_$Impl_$.APP_CONTROL_BOOKMARKS = 1073742098;
lime_ui__$KeyCode_KeyCode_$Impl_$.BRIGHTNESS_DOWN = 1073742099;
lime_ui__$KeyCode_KeyCode_$Impl_$.BRIGHTNESS_UP = 1073742100;
lime_ui__$KeyCode_KeyCode_$Impl_$.DISPLAY_SWITCH = 1073742101;
lime_ui__$KeyCode_KeyCode_$Impl_$.BACKLIGHT_TOGGLE = 1073742102;
lime_ui__$KeyCode_KeyCode_$Impl_$.BACKLIGHT_DOWN = 1073742103;
lime_ui__$KeyCode_KeyCode_$Impl_$.BACKLIGHT_UP = 1073742104;
lime_ui__$KeyCode_KeyCode_$Impl_$.EJECT = 1073742105;
lime_ui__$KeyCode_KeyCode_$Impl_$.SLEEP = 1073742106;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.NONE = 0;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.LEFT_SHIFT = 1;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.RIGHT_SHIFT = 2;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.LEFT_CTRL = 64;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.RIGHT_CTRL = 128;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.LEFT_ALT = 256;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.RIGHT_ALT = 512;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.LEFT_META = 1024;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.RIGHT_META = 2048;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.NUM_LOCK = 4096;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.CAPS_LOCK = 8192;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.MODE = 16384;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.CTRL = 192;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.SHIFT = 3;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.ALT = 768;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.META = 3072;
lime_ui_Touch.onEnd = new lime_app__$Event_$lime_$ui_$Touch_$Void();
lime_ui_Touch.onMove = new lime_app__$Event_$lime_$ui_$Touch_$Void();
lime_ui_Touch.onStart = new lime_app__$Event_$lime_$ui_$Touch_$Void();
lime_utils_Bytes.cffi_lime_bytes_from_data_pointer = lime_system_CFFI.load("lime","lime_bytes_from_data_pointer",2,false);
lime_utils_Bytes.cffi_lime_bytes_get_data_pointer = lime_system_CFFI.load("lime","lime_bytes_get_data_pointer",1,false);
lime_utils_Bytes.cffi_lime_bytes_read_file = lime_system_CFFI.load("lime","lime_bytes_read_file",2,false);
lime_utils__$Float32Array_Float32Array_$Impl_$.BYTES_PER_ELEMENT = 4;
lime_utils__$Int16Array_Int16Array_$Impl_$.BYTES_PER_ELEMENT = 2;
lime_utils__$Int32Array_Int32Array_$Impl_$.BYTES_PER_ELEMENT = 4;
lime_utils__$Log_LogLevel_$Impl_$.NONE = 0;
lime_utils__$Log_LogLevel_$Impl_$.ERROR = 1;
lime_utils__$Log_LogLevel_$Impl_$.WARN = 2;
lime_utils__$Log_LogLevel_$Impl_$.INFO = 3;
lime_utils__$Log_LogLevel_$Impl_$.DEBUG = 4;
lime_utils__$Log_LogLevel_$Impl_$.VERBOSE = 5;
lime_utils__$UInt32Array_UInt32Array_$Impl_$.BYTES_PER_ELEMENT = 4;
lime_utils__$UInt8Array_UInt8Array_$Impl_$.BYTES_PER_ELEMENT = 1;
motion_actuators_SimpleActuator.actuators = [];
motion_actuators_SimpleActuator.actuatorsLength = 0;
motion_actuators_SimpleActuator.addedEvent = false;
motion_Actuate.defaultActuator = motion_actuators_SimpleActuator;
motion_Actuate.defaultEase = motion_easing_Expo.get_easeOut();
motion_Actuate.targetLibraries = new haxe_ds_ObjectMap();
openfl_Assets.cache = new openfl_AssetCache();
openfl_Assets.dispatcher = new openfl_events_EventDispatcher();
openfl_display_LoaderInfo.__rootURL = window.document.URL;
openfl_system_ApplicationDomain.currentDomain = new openfl_system_ApplicationDomain(null);
openfl_geom_Matrix.__identity = new openfl_geom_Matrix();
openfl_geom_Matrix.__matrix3 = new lime_math_Matrix3();
openfl_geom_Matrix.__temp = new openfl_geom_Matrix();
openfl_Lib.current = new openfl_display_MovieClip();
openfl_Lib.__sentWarnings = new haxe_ds_StringMap();
openfl__$internal_renderer_DrawCommandBuffer.empty = new openfl__$internal_renderer_DrawCommandBuffer();
openfl__$internal_renderer_cairo_CairoGraphics.SIN45 = 0.70710678118654752440084436210485;
openfl__$internal_renderer_cairo_CairoGraphics.TAN22 = 0.4142135623730950488016887242097;
openfl__$internal_renderer_cairo_CairoGraphics.fillCommands = new openfl__$internal_renderer_DrawCommandBuffer();
openfl__$internal_renderer_cairo_CairoGraphics.strokeCommands = new openfl__$internal_renderer_DrawCommandBuffer();
openfl__$internal_renderer_canvas_CanvasGraphics.SIN45 = 0.70710678118654752440084436210485;
openfl__$internal_renderer_canvas_CanvasGraphics.TAN22 = 0.4142135623730950488016887242097;
openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands = new openfl__$internal_renderer_DrawCommandBuffer();
openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands = new openfl__$internal_renderer_DrawCommandBuffer();
openfl__$internal_stage3D_Context3DStateCache.FLOATS_PER_REGISTER = 4;
openfl__$internal_stage3D_Context3DStateCache.MAX_NUM_REGISTERS = 1024;
openfl__$internal_stage3D_Context3DStateCache.disableCache = true;
openfl__$internal_stage3D_GLUtils.debug = false;
openfl__$internal_text_TextEngine.UTF8_TAB = 9;
openfl__$internal_text_TextEngine.UTF8_ENDLINE = 10;
openfl__$internal_text_TextEngine.UTF8_SPACE = 32;
openfl__$internal_text_TextEngine.UTF8_HYPHEN = 45;
openfl__$internal_text_TextEngine.__defaultFonts = new haxe_ds_StringMap();
openfl__$internal_utils_PerlinNoise.P = [151,160,137,91,90,15,131,13,201,95,96,53,194,233,7,225,140,36,103,30,69,142,8,99,37,240,21,10,23,190,6,148,247,120,234,75,0,26,197,62,94,252,219,203,117,35,11,32,57,177,33,88,237,149,56,87,174,20,125,136,171,168,68,175,74,165,71,134,139,48,27,166,77,146,158,231,83,111,229,122,60,211,133,230,220,105,92,41,55,46,245,40,244,102,143,54,65,25,63,161,1,216,80,73,209,76,132,187,208,89,18,169,200,196,135,130,116,188,159,86,164,100,109,198,173,186,3,64,52,217,226,250,124,123,5,202,38,147,118,126,255,82,85,212,207,206,59,227,47,16,58,17,182,189,28,42,223,183,170,213,119,248,152,2,44,154,163,70,221,153,101,155,167,43,172,9,129,22,39,253,19,98,108,110,79,113,224,232,178,185,112,104,218,246,97,228,251,34,242,193,238,210,144,12,191,179,162,241,81,51,145,235,249,14,239,107,49,192,214,31,181,199,106,157,184,84,204,176,115,121,50,45,127,4,150,254,138,236,205,93,222,114,67,29,24,72,243,141,128,195,78,66,215,61,156,180,151,160,137,91,90,15,131,13,201,95,96,53,194,233,7,225,140,36,103,30,69,142,8,99,37,240,21,10,23,190,6,148,247,120,234,75,0,26,197,62,94,252,219,203,117,35,11,32,57,177,33,88,237,149,56,87,174,20,125,136,171,168,68,175,74,165,71,134,139,48,27,166,77,146,158,231,83,111,229,122,60,211,133,230,220,105,92,41,55,46,245,40,244,102,143,54,65,25,63,161,1,216,80,73,209,76,132,187,208,89,18,169,200,196,135,130,116,188,159,86,164,100,109,198,173,186,3,64,52,217,226,250,124,123,5,202,38,147,118,126,255,82,85,212,207,206,59,227,47,16,58,17,182,189,28,42,223,183,170,213,119,248,152,2,44,154,163,70,221,153,101,155,167,43,172,9,129,22,39,253,19,98,108,110,79,113,224,232,178,185,112,104,218,246,97,228,251,34,242,193,238,210,144,12,191,179,162,241,81,51,145,235,249,14,239,107,49,192,214,31,181,199,106,157,184,84,204,176,115,121,50,45,127,4,150,254,138,236,205,93,222,114,67,29,24,72,243,141,128,195,78,66,215,61,156,180];
openfl_display__$BlendMode_BlendMode_$Impl_$.ADD = 0;
openfl_display__$BlendMode_BlendMode_$Impl_$.ALPHA = 1;
openfl_display__$BlendMode_BlendMode_$Impl_$.DARKEN = 2;
openfl_display__$BlendMode_BlendMode_$Impl_$.DIFFERENCE = 3;
openfl_display__$BlendMode_BlendMode_$Impl_$.ERASE = 4;
openfl_display__$BlendMode_BlendMode_$Impl_$.HARDLIGHT = 5;
openfl_display__$BlendMode_BlendMode_$Impl_$.INVERT = 6;
openfl_display__$BlendMode_BlendMode_$Impl_$.LAYER = 7;
openfl_display__$BlendMode_BlendMode_$Impl_$.LIGHTEN = 8;
openfl_display__$BlendMode_BlendMode_$Impl_$.MULTIPLY = 9;
openfl_display__$BlendMode_BlendMode_$Impl_$.NORMAL = 10;
openfl_display__$BlendMode_BlendMode_$Impl_$.OVERLAY = 11;
openfl_display__$BlendMode_BlendMode_$Impl_$.SCREEN = 12;
openfl_display__$BlendMode_BlendMode_$Impl_$.SHADER = 13;
openfl_display__$BlendMode_BlendMode_$Impl_$.SUBTRACT = 14;
openfl_display__$CapsStyle_CapsStyle_$Impl_$.NONE = 0;
openfl_display__$CapsStyle_CapsStyle_$Impl_$.ROUND = 1;
openfl_display__$CapsStyle_CapsStyle_$Impl_$.SQUARE = 2;
openfl_display__$GradientType_GradientType_$Impl_$.LINEAR = 0;
openfl_display__$GradientType_GradientType_$Impl_$.RADIAL = 1;
openfl_display__$GraphicsPathWinding_GraphicsPathWinding_$Impl_$.EVEN_ODD = 0;
openfl_display__$GraphicsPathWinding_GraphicsPathWinding_$Impl_$.NON_ZERO = 1;
openfl_display__$InterpolationMethod_InterpolationMethod_$Impl_$.LINEAR_RGB = 0;
openfl_display__$InterpolationMethod_InterpolationMethod_$Impl_$.RGB = 1;
openfl_display__$JointStyle_JointStyle_$Impl_$.BEVEL = 0;
openfl_display__$JointStyle_JointStyle_$Impl_$.MITER = 1;
openfl_display__$JointStyle_JointStyle_$Impl_$.ROUND = 2;
openfl_display__$LineScaleMode_LineScaleMode_$Impl_$.HORIZONTAL = 0;
openfl_display__$LineScaleMode_LineScaleMode_$Impl_$.NONE = 1;
openfl_display__$LineScaleMode_LineScaleMode_$Impl_$.NORMAL = 2;
openfl_display__$LineScaleMode_LineScaleMode_$Impl_$.VERTICAL = 3;
openfl_display_OpenGLView.CONTEXT_LOST = "glcontextlost";
openfl_display_OpenGLView.CONTEXT_RESTORED = "glcontextrestored";
openfl_display__$PixelSnapping_PixelSnapping_$Impl_$.ALWAYS = 0;
openfl_display__$PixelSnapping_PixelSnapping_$Impl_$.AUTO = 1;
openfl_display__$PixelSnapping_PixelSnapping_$Impl_$.NEVER = 2;
openfl_display__$ShaderParameterType_ShaderParameterType_$Impl_$.BOOL = 0;
openfl_display__$ShaderParameterType_ShaderParameterType_$Impl_$.BOOL2 = 1;
openfl_display__$ShaderParameterType_ShaderParameterType_$Impl_$.BOOL3 = 2;
openfl_display__$ShaderParameterType_ShaderParameterType_$Impl_$.BOOL4 = 3;
openfl_display__$ShaderParameterType_ShaderParameterType_$Impl_$.FLOAT = 4;
openfl_display__$ShaderParameterType_ShaderParameterType_$Impl_$.FLOAT2 = 5;
openfl_display__$ShaderParameterType_ShaderParameterType_$Impl_$.FLOAT3 = 6;
openfl_display__$ShaderParameterType_ShaderParameterType_$Impl_$.FLOAT4 = 7;
openfl_display__$ShaderParameterType_ShaderParameterType_$Impl_$.INT = 8;
openfl_display__$ShaderParameterType_ShaderParameterType_$Impl_$.INT2 = 9;
openfl_display__$ShaderParameterType_ShaderParameterType_$Impl_$.INT3 = 10;
openfl_display__$ShaderParameterType_ShaderParameterType_$Impl_$.INT4 = 11;
openfl_display__$ShaderParameterType_ShaderParameterType_$Impl_$.MATRIX2X2 = 12;
openfl_display__$ShaderParameterType_ShaderParameterType_$Impl_$.MATRIX2X3 = 13;
openfl_display__$ShaderParameterType_ShaderParameterType_$Impl_$.MATRIX2X4 = 14;
openfl_display__$ShaderParameterType_ShaderParameterType_$Impl_$.MATRIX3X2 = 15;
openfl_display__$ShaderParameterType_ShaderParameterType_$Impl_$.MATRIX3X3 = 16;
openfl_display__$ShaderParameterType_ShaderParameterType_$Impl_$.MATRIX3X4 = 17;
openfl_display__$ShaderParameterType_ShaderParameterType_$Impl_$.MATRIX4X2 = 18;
openfl_display__$ShaderParameterType_ShaderParameterType_$Impl_$.MATRIX4X3 = 19;
openfl_display__$ShaderParameterType_ShaderParameterType_$Impl_$.MATRIX4X4 = 20;
openfl_display__$ShaderPrecision_ShaderPrecision_$Impl_$.FAST = 0;
openfl_display__$ShaderPrecision_ShaderPrecision_$Impl_$.FULL = 1;
openfl_display__$SpreadMethod_SpreadMethod_$Impl_$.PAD = 0;
openfl_display__$SpreadMethod_SpreadMethod_$Impl_$.REFLECT = 1;
openfl_display__$SpreadMethod_SpreadMethod_$Impl_$.REPEAT = 2;
openfl_display__$StageAlign_StageAlign_$Impl_$.BOTTOM = 0;
openfl_display__$StageAlign_StageAlign_$Impl_$.BOTTOM_LEFT = 1;
openfl_display__$StageAlign_StageAlign_$Impl_$.BOTTOM_RIGHT = 2;
openfl_display__$StageAlign_StageAlign_$Impl_$.LEFT = 3;
openfl_display__$StageAlign_StageAlign_$Impl_$.RIGHT = 4;
openfl_display__$StageAlign_StageAlign_$Impl_$.TOP = 5;
openfl_display__$StageAlign_StageAlign_$Impl_$.TOP_LEFT = 6;
openfl_display__$StageAlign_StageAlign_$Impl_$.TOP_RIGHT = 7;
openfl_display__$StageDisplayState_StageDisplayState_$Impl_$.FULL_SCREEN = 0;
openfl_display__$StageDisplayState_StageDisplayState_$Impl_$.FULL_SCREEN_INTERACTIVE = 1;
openfl_display__$StageDisplayState_StageDisplayState_$Impl_$.NORMAL = 2;
openfl_display__$StageQuality_StageQuality_$Impl_$.BEST = 0;
openfl_display__$StageQuality_StageQuality_$Impl_$.HIGH = 1;
openfl_display__$StageQuality_StageQuality_$Impl_$.LOW = 2;
openfl_display__$StageQuality_StageQuality_$Impl_$.MEDIUM = 3;
openfl_display__$StageScaleMode_StageScaleMode_$Impl_$.EXACT_FIT = 0;
openfl_display__$StageScaleMode_StageScaleMode_$Impl_$.NO_BORDER = 1;
openfl_display__$StageScaleMode_StageScaleMode_$Impl_$.NO_SCALE = 2;
openfl_display__$StageScaleMode_StageScaleMode_$Impl_$.SHOW_ALL = 3;
openfl_display__$TriangleCulling_TriangleCulling_$Impl_$.NEGATIVE = 0;
openfl_display__$TriangleCulling_TriangleCulling_$Impl_$.NONE = 1;
openfl_display__$TriangleCulling_TriangleCulling_$Impl_$.POSITIVE = 2;
openfl_display3D_Context3D.supportsVideoTexture = true;
openfl_display3D_Context3D.MAX_SAMPLERS = 8;
openfl_display3D_Context3D.MAX_ATTRIBUTES = 16;
openfl_display3D_Context3D.MAX_PROGRAM_REGISTERS = 128;
openfl_display3D_Context3D.__stateCache = new openfl__$internal_stage3D_Context3DStateCache();
openfl_display3D__$Context3D_Context3DTelemetry_$Impl_$.DRAW_CALLS = 0;
openfl_display3D__$Context3D_Context3DTelemetry_$Impl_$.COUNT_INDEX_BUFFER = 1;
openfl_display3D__$Context3D_Context3DTelemetry_$Impl_$.COUNT_VERTEX_BUFFER = 2;
openfl_display3D__$Context3D_Context3DTelemetry_$Impl_$.COUNT_TEXTURE = 3;
openfl_display3D__$Context3D_Context3DTelemetry_$Impl_$.COUNT_TEXTURE_COMPRESSED = 4;
openfl_display3D__$Context3D_Context3DTelemetry_$Impl_$.COUNT_PROGRAM = 5;
openfl_display3D__$Context3D_Context3DTelemetry_$Impl_$.MEM_INDEX_BUFFER = 6;
openfl_display3D__$Context3D_Context3DTelemetry_$Impl_$.MEM_VERTEX_BUFFER = 7;
openfl_display3D__$Context3D_Context3DTelemetry_$Impl_$.MEM_TEXTURE = 8;
openfl_display3D__$Context3D_Context3DTelemetry_$Impl_$.MEM_TEXTURE_COMPRESSED = 9;
openfl_display3D__$Context3D_Context3DTelemetry_$Impl_$.MEM_PROGRAM = 10;
openfl_display3D__$Context3D_Context3DTelemetry_$Impl_$.$length = 11;
openfl_display3D__$Context3DBlendFactor_Context3DBlendFactor_$Impl_$.DESTINATION_ALPHA = 0;
openfl_display3D__$Context3DBlendFactor_Context3DBlendFactor_$Impl_$.DESTINATION_COLOR = 1;
openfl_display3D__$Context3DBlendFactor_Context3DBlendFactor_$Impl_$.ONE = 2;
openfl_display3D__$Context3DBlendFactor_Context3DBlendFactor_$Impl_$.ONE_MINUS_DESTINATION_ALPHA = 3;
openfl_display3D__$Context3DBlendFactor_Context3DBlendFactor_$Impl_$.ONE_MINUS_DESTINATION_COLOR = 4;
openfl_display3D__$Context3DBlendFactor_Context3DBlendFactor_$Impl_$.ONE_MINUS_SOURCE_ALPHA = 5;
openfl_display3D__$Context3DBlendFactor_Context3DBlendFactor_$Impl_$.ONE_MINUS_SOURCE_COLOR = 6;
openfl_display3D__$Context3DBlendFactor_Context3DBlendFactor_$Impl_$.SOURCE_ALPHA = 7;
openfl_display3D__$Context3DBlendFactor_Context3DBlendFactor_$Impl_$.SOURCE_COLOR = 8;
openfl_display3D__$Context3DBlendFactor_Context3DBlendFactor_$Impl_$.ZERO = 9;
openfl_display3D__$Context3DBufferUsage_Context3DBufferUsage_$Impl_$.DYNAMIC_DRAW = 0;
openfl_display3D__$Context3DBufferUsage_Context3DBufferUsage_$Impl_$.STATIC_DRAW = 1;
openfl_display3D__$Context3DCompareMode_Context3DCompareMode_$Impl_$.ALWAYS = 0;
openfl_display3D__$Context3DCompareMode_Context3DCompareMode_$Impl_$.EQUAL = 1;
openfl_display3D__$Context3DCompareMode_Context3DCompareMode_$Impl_$.GREATER = 2;
openfl_display3D__$Context3DCompareMode_Context3DCompareMode_$Impl_$.GREATER_EQUAL = 3;
openfl_display3D__$Context3DCompareMode_Context3DCompareMode_$Impl_$.LESS = 4;
openfl_display3D__$Context3DCompareMode_Context3DCompareMode_$Impl_$.LESS_EQUAL = 5;
openfl_display3D__$Context3DCompareMode_Context3DCompareMode_$Impl_$.NEVER = 6;
openfl_display3D__$Context3DCompareMode_Context3DCompareMode_$Impl_$.NOT_EQUAL = 7;
openfl_display3D__$Context3DMipFilter_Context3DMipFilter_$Impl_$.MIPLINEAR = 0;
openfl_display3D__$Context3DMipFilter_Context3DMipFilter_$Impl_$.MIPNEAREST = 1;
openfl_display3D__$Context3DMipFilter_Context3DMipFilter_$Impl_$.MIPNONE = 2;
openfl_display3D__$Context3DProfile_Context3DProfile_$Impl_$.BASELINE = 0;
openfl_display3D__$Context3DProfile_Context3DProfile_$Impl_$.BASELINE_CONSTRAINED = 1;
openfl_display3D__$Context3DProfile_Context3DProfile_$Impl_$.BASELINE_EXTENDED = 2;
openfl_display3D__$Context3DProfile_Context3DProfile_$Impl_$.STANDARD = 3;
openfl_display3D__$Context3DProfile_Context3DProfile_$Impl_$.STANDARD_CONSTRAINED = 4;
openfl_display3D__$Context3DProgramType_Context3DProgramType_$Impl_$.FRAGMENT = 0;
openfl_display3D__$Context3DProgramType_Context3DProgramType_$Impl_$.VERTEX = 1;
openfl_display3D__$Context3DRenderMode_Context3DRenderMode_$Impl_$.AUTO = 0;
openfl_display3D__$Context3DRenderMode_Context3DRenderMode_$Impl_$.SOFTWARE = 1;
openfl_display3D__$Context3DStencilAction_Context3DStencilAction_$Impl_$.DECREMENT_SATURATE = 0;
openfl_display3D__$Context3DStencilAction_Context3DStencilAction_$Impl_$.DECREMENT_WRAP = 1;
openfl_display3D__$Context3DStencilAction_Context3DStencilAction_$Impl_$.INCREMENT_SATURATE = 2;
openfl_display3D__$Context3DStencilAction_Context3DStencilAction_$Impl_$.INCREMENT_WRAP = 3;
openfl_display3D__$Context3DStencilAction_Context3DStencilAction_$Impl_$.INVERT = 4;
openfl_display3D__$Context3DStencilAction_Context3DStencilAction_$Impl_$.KEEP = 5;
openfl_display3D__$Context3DStencilAction_Context3DStencilAction_$Impl_$.SET = 6;
openfl_display3D__$Context3DStencilAction_Context3DStencilAction_$Impl_$.ZERO = 7;
openfl_display3D__$Context3DTextureFilter_Context3DTextureFilter_$Impl_$.ANISOTROPIC16X = 0;
openfl_display3D__$Context3DTextureFilter_Context3DTextureFilter_$Impl_$.ANISOTROPIC2X = 1;
openfl_display3D__$Context3DTextureFilter_Context3DTextureFilter_$Impl_$.ANISOTROPIC4X = 2;
openfl_display3D__$Context3DTextureFilter_Context3DTextureFilter_$Impl_$.ANISOTROPIC8X = 3;
openfl_display3D__$Context3DTextureFilter_Context3DTextureFilter_$Impl_$.LINEAR = 4;
openfl_display3D__$Context3DTextureFilter_Context3DTextureFilter_$Impl_$.NEAREST = 5;
openfl_display3D__$Context3DTextureFormat_Context3DTextureFormat_$Impl_$.BGR_PACKED = 0;
openfl_display3D__$Context3DTextureFormat_Context3DTextureFormat_$Impl_$.BGRA = 1;
openfl_display3D__$Context3DTextureFormat_Context3DTextureFormat_$Impl_$.BGRA_PACKED = 2;
openfl_display3D__$Context3DTextureFormat_Context3DTextureFormat_$Impl_$.COMPRESSED = 3;
openfl_display3D__$Context3DTextureFormat_Context3DTextureFormat_$Impl_$.COMPRESSED_ALPHA = 4;
openfl_display3D__$Context3DTextureFormat_Context3DTextureFormat_$Impl_$.RGBA_HALF_FLOAT = 5;
openfl_display3D__$Context3DTriangleFace_Context3DTriangleFace_$Impl_$.BACK = 0;
openfl_display3D__$Context3DTriangleFace_Context3DTriangleFace_$Impl_$.FRONT = 1;
openfl_display3D__$Context3DTriangleFace_Context3DTriangleFace_$Impl_$.FRONT_AND_BACK = 2;
openfl_display3D__$Context3DTriangleFace_Context3DTriangleFace_$Impl_$.NONE = 3;
openfl_display3D__$Context3DVertexBufferFormat_Context3DVertexBufferFormat_$Impl_$.BYTES_4 = 0;
openfl_display3D__$Context3DVertexBufferFormat_Context3DVertexBufferFormat_$Impl_$.FLOAT_1 = 1;
openfl_display3D__$Context3DVertexBufferFormat_Context3DVertexBufferFormat_$Impl_$.FLOAT_2 = 2;
openfl_display3D__$Context3DVertexBufferFormat_Context3DVertexBufferFormat_$Impl_$.FLOAT_3 = 3;
openfl_display3D__$Context3DVertexBufferFormat_Context3DVertexBufferFormat_$Impl_$.FLOAT_4 = 4;
openfl_display3D__$Context3DWrapMode_Context3DWrapMode_$Impl_$.CLAMP = 0;
openfl_display3D__$Context3DWrapMode_Context3DWrapMode_$Impl_$.CLAMP_U_REPEAT_V = 1;
openfl_display3D__$Context3DWrapMode_Context3DWrapMode_$Impl_$.REPEAT = 2;
openfl_display3D__$Context3DWrapMode_Context3DWrapMode_$Impl_$.REPEAT_U_CLAMP_V = 3;
openfl_display3D_Program3D.verbose = lime_utils_Log.level == 5;
openfl_display3D_textures_Texture.__lowMemoryMode = false;
openfl_errors_Error.DEFAULT_TO_STRING = "Error";
openfl_events_ActivityEvent.ACTIVITY = "activity";
openfl_events_TextEvent.LINK = "link";
openfl_events_TextEvent.TEXT_INPUT = "textInput";
openfl_events_ErrorEvent.ERROR = "error";
openfl_events_FocusEvent.FOCUS_IN = "focusIn";
openfl_events_FocusEvent.FOCUS_OUT = "focusOut";
openfl_events_FocusEvent.KEY_FOCUS_CHANGE = "keyFocusChange";
openfl_events_FocusEvent.MOUSE_FOCUS_CHANGE = "mouseFocusChange";
openfl_events_FullScreenEvent.FULL_SCREEN = "fullScreen";
openfl_events_FullScreenEvent.FULL_SCREEN_INTERACTIVE_ACCEPTED = "fullScreenInteractiveAccepted";
openfl_events_GameInputEvent.DEVICE_ADDED = "deviceAdded";
openfl_events_GameInputEvent.DEVICE_REMOVED = "deviceRemoved";
openfl_events_GameInputEvent.DEVICE_UNUSABLE = "deviceUnusable";
openfl_events_HTTPStatusEvent.HTTP_RESPONSE_STATUS = "httpResponseStatus";
openfl_events_HTTPStatusEvent.HTTP_STATUS = "httpStatus";
openfl_events_IOErrorEvent.IO_ERROR = "ioError";
openfl_events_KeyboardEvent.KEY_DOWN = "keyDown";
openfl_events_KeyboardEvent.KEY_UP = "keyUp";
openfl_events_MouseEvent.CLICK = "click";
openfl_events_MouseEvent.DOUBLE_CLICK = "doubleClick";
openfl_events_MouseEvent.MIDDLE_CLICK = "middleClick";
openfl_events_MouseEvent.MIDDLE_MOUSE_DOWN = "middleMouseDown";
openfl_events_MouseEvent.MIDDLE_MOUSE_UP = "middleMouseUp";
openfl_events_MouseEvent.MOUSE_DOWN = "mouseDown";
openfl_events_MouseEvent.MOUSE_MOVE = "mouseMove";
openfl_events_MouseEvent.MOUSE_OUT = "mouseOut";
openfl_events_MouseEvent.MOUSE_OVER = "mouseOver";
openfl_events_MouseEvent.MOUSE_UP = "mouseUp";
openfl_events_MouseEvent.MOUSE_WHEEL = "mouseWheel";
openfl_events_MouseEvent.RIGHT_CLICK = "rightClick";
openfl_events_MouseEvent.RIGHT_MOUSE_DOWN = "rightMouseDown";
openfl_events_MouseEvent.RIGHT_MOUSE_UP = "rightMouseUp";
openfl_events_MouseEvent.ROLL_OUT = "rollOut";
openfl_events_MouseEvent.ROLL_OVER = "rollOver";
openfl_events_NetStatusEvent.NET_STATUS = "netStatus";
openfl_events_ProgressEvent.PROGRESS = "progress";
openfl_events_ProgressEvent.SOCKET_DATA = "socketData";
openfl_events_SecurityErrorEvent.SECURITY_ERROR = "securityError";
openfl_events_TimerEvent.TIMER = "timer";
openfl_events_TimerEvent.TIMER_COMPLETE = "timerComplete";
openfl_events_TouchEvent.TOUCH_BEGIN = "touchBegin";
openfl_events_TouchEvent.TOUCH_END = "touchEnd";
openfl_events_TouchEvent.TOUCH_MOVE = "touchMove";
openfl_events_TouchEvent.TOUCH_OUT = "touchOut";
openfl_events_TouchEvent.TOUCH_OVER = "touchOver";
openfl_events_TouchEvent.TOUCH_ROLL_OUT = "touchRollOut";
openfl_events_TouchEvent.TOUCH_ROLL_OVER = "touchRollOver";
openfl_events_TouchEvent.TOUCH_TAP = "touchTap";
openfl_filters__$BitmapFilterType_BitmapFilterType_$Impl_$.FULL = 0;
openfl_filters__$BitmapFilterType_BitmapFilterType_$Impl_$.INNER = 1;
openfl_filters__$BitmapFilterType_BitmapFilterType_$Impl_$.OUTER = 2;
openfl_filters_ColorMatrixFilter.__colorMatrixShader = new openfl_filters__$ColorMatrixFilter_ColorMatrixShader();
openfl_filters_ConvolutionFilter.__convolutionShader = new openfl_filters__$ConvolutionFilter_ConvolutionShader();
openfl_geom__$Orientation3D_Orientation3D_$Impl_$.AXIS_ANGLE = 0;
openfl_geom__$Orientation3D_Orientation3D_$Impl_$.EULER_ANGLES = 1;
openfl_geom__$Orientation3D_Orientation3D_$Impl_$.QUATERNION = 2;
openfl_geom_Point.__temp = new openfl_geom_Point();
openfl_geom_Rectangle.__temp = new openfl_geom_Rectangle();
openfl_media_SoundMixer.__soundChannels = [];
openfl_media_SoundMixer.__soundTransform = new openfl_media_SoundTransform();
openfl_net_NetConnection.CONNECT_SUCCESS = "connectSuccess";
openfl_net__$URLLoaderDataFormat_URLLoaderDataFormat_$Impl_$.BINARY = 0;
openfl_net__$URLLoaderDataFormat_URLLoaderDataFormat_$Impl_$.TEXT = 1;
openfl_net__$URLLoaderDataFormat_URLLoaderDataFormat_$Impl_$.VARIABLES = 2;
openfl_net__$URLRequestMethod_URLRequestMethod_$Impl_$.DELETE = 0;
openfl_net__$URLRequestMethod_URLRequestMethod_$Impl_$.GET = 1;
openfl_net__$URLRequestMethod_URLRequestMethod_$Impl_$.HEAD = 2;
openfl_net__$URLRequestMethod_URLRequestMethod_$Impl_$.OPTIONS = 3;
openfl_net__$URLRequestMethod_URLRequestMethod_$Impl_$.POST = 4;
openfl_net__$URLRequestMethod_URLRequestMethod_$Impl_$.PUT = 5;
openfl_system_SecurityDomain.currentDomain = new openfl_system_SecurityDomain();
openfl_text__$AntiAliasType_AntiAliasType_$Impl_$.ADVANCED = 0;
openfl_text__$AntiAliasType_AntiAliasType_$Impl_$.NORMAL = 1;
openfl_text_Font.__registeredFonts = [];
openfl_text__$FontStyle_FontStyle_$Impl_$.BOLD = 0;
openfl_text__$FontStyle_FontStyle_$Impl_$.BOLD_ITALIC = 1;
openfl_text__$FontStyle_FontStyle_$Impl_$.ITALIC = 2;
openfl_text__$FontStyle_FontStyle_$Impl_$.REGULAR = 3;
openfl_text__$FontType_FontType_$Impl_$.DEVICE = 0;
openfl_text__$FontType_FontType_$Impl_$.EMBEDDED = 1;
openfl_text__$FontType_FontType_$Impl_$.EMBEDDED_CFF = 2;
openfl_text__$GridFitType_GridFitType_$Impl_$.NONE = 0;
openfl_text__$GridFitType_GridFitType_$Impl_$.PIXEL = 1;
openfl_text__$GridFitType_GridFitType_$Impl_$.SUBPIXEL = 2;
openfl_text__$TextFieldAutoSize_TextFieldAutoSize_$Impl_$.CENTER = 0;
openfl_text__$TextFieldAutoSize_TextFieldAutoSize_$Impl_$.LEFT = 1;
openfl_text__$TextFieldAutoSize_TextFieldAutoSize_$Impl_$.NONE = 2;
openfl_text__$TextFieldAutoSize_TextFieldAutoSize_$Impl_$.RIGHT = 3;
openfl_text__$TextFieldType_TextFieldType_$Impl_$.DYNAMIC = 0;
openfl_text__$TextFieldType_TextFieldType_$Impl_$.INPUT = 1;
openfl_text__$TextFormatAlign_TextFormatAlign_$Impl_$.CENTER = 0;
openfl_text__$TextFormatAlign_TextFormatAlign_$Impl_$.END = 1;
openfl_text__$TextFormatAlign_TextFormatAlign_$Impl_$.JUSTIFY = 2;
openfl_text__$TextFormatAlign_TextFormatAlign_$Impl_$.LEFT = 3;
openfl_text__$TextFormatAlign_TextFormatAlign_$Impl_$.RIGHT = 4;
openfl_text__$TextFormatAlign_TextFormatAlign_$Impl_$.START = 5;
openfl_ui_GameInput.isSupported = true;
openfl_ui_GameInput.numDevices = 0;
openfl_ui_GameInput.__deviceList = [];
openfl_ui_GameInput.__devices = new haxe_ds_ObjectMap();
openfl_ui_GameInput.__instances = [];
openfl_ui_GameInputDevice.MAX_BUFFER_SIZE = 32000;
openfl_ui_Keyboard.NUMBER_0 = 48;
openfl_ui_Keyboard.NUMBER_1 = 49;
openfl_ui_Keyboard.NUMBER_2 = 50;
openfl_ui_Keyboard.NUMBER_3 = 51;
openfl_ui_Keyboard.NUMBER_4 = 52;
openfl_ui_Keyboard.NUMBER_5 = 53;
openfl_ui_Keyboard.NUMBER_6 = 54;
openfl_ui_Keyboard.NUMBER_7 = 55;
openfl_ui_Keyboard.NUMBER_8 = 56;
openfl_ui_Keyboard.NUMBER_9 = 57;
openfl_ui_Keyboard.A = 65;
openfl_ui_Keyboard.B = 66;
openfl_ui_Keyboard.C = 67;
openfl_ui_Keyboard.D = 68;
openfl_ui_Keyboard.E = 69;
openfl_ui_Keyboard.F = 70;
openfl_ui_Keyboard.G = 71;
openfl_ui_Keyboard.H = 72;
openfl_ui_Keyboard.I = 73;
openfl_ui_Keyboard.J = 74;
openfl_ui_Keyboard.K = 75;
openfl_ui_Keyboard.L = 76;
openfl_ui_Keyboard.M = 77;
openfl_ui_Keyboard.N = 78;
openfl_ui_Keyboard.O = 79;
openfl_ui_Keyboard.P = 80;
openfl_ui_Keyboard.Q = 81;
openfl_ui_Keyboard.R = 82;
openfl_ui_Keyboard.S = 83;
openfl_ui_Keyboard.T = 84;
openfl_ui_Keyboard.U = 85;
openfl_ui_Keyboard.V = 86;
openfl_ui_Keyboard.W = 87;
openfl_ui_Keyboard.X = 88;
openfl_ui_Keyboard.Y = 89;
openfl_ui_Keyboard.Z = 90;
openfl_ui_Keyboard.NUMPAD_0 = 96;
openfl_ui_Keyboard.NUMPAD_1 = 97;
openfl_ui_Keyboard.NUMPAD_2 = 98;
openfl_ui_Keyboard.NUMPAD_3 = 99;
openfl_ui_Keyboard.NUMPAD_4 = 100;
openfl_ui_Keyboard.NUMPAD_5 = 101;
openfl_ui_Keyboard.NUMPAD_6 = 102;
openfl_ui_Keyboard.NUMPAD_7 = 103;
openfl_ui_Keyboard.NUMPAD_8 = 104;
openfl_ui_Keyboard.NUMPAD_9 = 105;
openfl_ui_Keyboard.NUMPAD_MULTIPLY = 106;
openfl_ui_Keyboard.NUMPAD_ADD = 107;
openfl_ui_Keyboard.NUMPAD_ENTER = 108;
openfl_ui_Keyboard.NUMPAD_SUBTRACT = 109;
openfl_ui_Keyboard.NUMPAD_DECIMAL = 110;
openfl_ui_Keyboard.NUMPAD_DIVIDE = 111;
openfl_ui_Keyboard.F1 = 112;
openfl_ui_Keyboard.F2 = 113;
openfl_ui_Keyboard.F3 = 114;
openfl_ui_Keyboard.F4 = 115;
openfl_ui_Keyboard.F5 = 116;
openfl_ui_Keyboard.F6 = 117;
openfl_ui_Keyboard.F7 = 118;
openfl_ui_Keyboard.F8 = 119;
openfl_ui_Keyboard.F9 = 120;
openfl_ui_Keyboard.F10 = 121;
openfl_ui_Keyboard.F11 = 122;
openfl_ui_Keyboard.F12 = 123;
openfl_ui_Keyboard.F13 = 124;
openfl_ui_Keyboard.F14 = 125;
openfl_ui_Keyboard.F15 = 126;
openfl_ui_Keyboard.BACKSPACE = 8;
openfl_ui_Keyboard.TAB = 9;
openfl_ui_Keyboard.ALTERNATE = 18;
openfl_ui_Keyboard.ENTER = 13;
openfl_ui_Keyboard.COMMAND = 15;
openfl_ui_Keyboard.SHIFT = 16;
openfl_ui_Keyboard.CONTROL = 17;
openfl_ui_Keyboard.BREAK = 19;
openfl_ui_Keyboard.CAPS_LOCK = 20;
openfl_ui_Keyboard.NUMPAD = 21;
openfl_ui_Keyboard.ESCAPE = 27;
openfl_ui_Keyboard.SPACE = 32;
openfl_ui_Keyboard.PAGE_UP = 33;
openfl_ui_Keyboard.PAGE_DOWN = 34;
openfl_ui_Keyboard.END = 35;
openfl_ui_Keyboard.HOME = 36;
openfl_ui_Keyboard.LEFT = 37;
openfl_ui_Keyboard.RIGHT = 39;
openfl_ui_Keyboard.UP = 38;
openfl_ui_Keyboard.DOWN = 40;
openfl_ui_Keyboard.INSERT = 45;
openfl_ui_Keyboard.DELETE = 46;
openfl_ui_Keyboard.NUMLOCK = 144;
openfl_ui_Keyboard.SEMICOLON = 186;
openfl_ui_Keyboard.EQUAL = 187;
openfl_ui_Keyboard.COMMA = 188;
openfl_ui_Keyboard.MINUS = 189;
openfl_ui_Keyboard.PERIOD = 190;
openfl_ui_Keyboard.SLASH = 191;
openfl_ui_Keyboard.BACKQUOTE = 192;
openfl_ui_Keyboard.LEFTBRACKET = 219;
openfl_ui_Keyboard.BACKSLASH = 220;
openfl_ui_Keyboard.RIGHTBRACKET = 221;
openfl_ui_Keyboard.QUOTE = 222;
openfl_ui_Mouse.supportsCursor = true;
openfl_ui_Mouse.supportsNativeCursor = true;
openfl_ui_Mouse.__cursor = "auto";
openfl_utils__$CompressionAlgorithm_CompressionAlgorithm_$Impl_$.DEFLATE = 0;
openfl_utils__$CompressionAlgorithm_CompressionAlgorithm_$Impl_$.LZMA = 1;
openfl_utils__$CompressionAlgorithm_CompressionAlgorithm_$Impl_$.ZLIB = 2;
openfl_utils__$Endian_Endian_$Impl_$.BIG_ENDIAN = 0;
openfl_utils__$Endian_Endian_$Impl_$.LITTLE_ENDIAN = 1;
ApplicationMain.main();
})(typeof exports != "undefined" ? exports : typeof window != "undefined" ? window : typeof self != "undefined" ? self : this, typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);
