// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_Linear
#include <Linear.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_8cfeffb7702d53f0_49_new,"Linear","new",0x21cc4d77,"Linear.new","Linear.hx",49,0x7afc4dd9)
HX_LOCAL_STACK_FRAME(_hx_pos_8cfeffb7702d53f0_28_apply,"Linear","apply",0xf29eb645,"Linear.apply","Linear.hx",28,0x7afc4dd9)
HX_LOCAL_STACK_FRAME(_hx_pos_8cfeffb7702d53f0_32_combine,"Linear","combine",0x0c607f16,"Linear.combine","Linear.hx",32,0x7afc4dd9)
HX_LOCAL_STACK_FRAME(_hx_pos_8cfeffb7702d53f0_38_detach,"Linear","detach",0x3886e89c,"Linear.detach","Linear.hx",38,0x7afc4dd9)
HX_LOCAL_STACK_FRAME(_hx_pos_8cfeffb7702d53f0_45_toString,"Linear","toString",0x92468035,"Linear.toString","Linear.hx",45,0x7afc4dd9)
HX_LOCAL_STACK_FRAME(_hx_pos_8cfeffb7702d53f0_14_combination,"Linear","combination",0x4a3f3de6,"Linear.combination","Linear.hx",14,0x7afc4dd9)

void Linear_obj::__construct(Float k,Float b){
            	HX_STACKFRAME(&_hx_pos_8cfeffb7702d53f0_49_new)
HXLINE(  50)		this->k = k;
HXLINE(  51)		this->b = b;
            	}

Dynamic Linear_obj::__CreateEmpty() { return new Linear_obj; }

void *Linear_obj::_hx_vtable = 0;

Dynamic Linear_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Linear_obj > _hx_result = new Linear_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool Linear_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x2134c605;
}

Float Linear_obj::apply(Float x){
            	HX_STACKFRAME(&_hx_pos_8cfeffb7702d53f0_28_apply)
HXDLIN(  28)		return ((this->k * x) + this->b);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Linear_obj,apply,return )

void Linear_obj::combine( ::Linear lin2){
            	HX_STACKFRAME(&_hx_pos_8cfeffb7702d53f0_32_combine)
HXLINE(  33)		 ::Linear _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN(  33)		_hx_tmp->k = (_hx_tmp->k * lin2->k);
HXLINE(  34)		 ::Linear _hx_tmp1 = hx::ObjectPtr<OBJ_>(this);
HXDLIN(  34)		_hx_tmp1->b = (_hx_tmp1->b + lin2->b);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Linear_obj,combine,(void))

void Linear_obj::detach( ::Linear lin2){
            	HX_STACKFRAME(&_hx_pos_8cfeffb7702d53f0_38_detach)
HXLINE(  39)		 ::Linear _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN(  39)		_hx_tmp->k = ((Float)_hx_tmp->k / (Float)lin2->k);
HXLINE(  40)		 ::Linear _hx_tmp1 = hx::ObjectPtr<OBJ_>(this);
HXDLIN(  40)		_hx_tmp1->b = (_hx_tmp1->b - lin2->b);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Linear_obj,detach,(void))

::String Linear_obj::toString(){
            	HX_STACKFRAME(&_hx_pos_8cfeffb7702d53f0_45_toString)
HXDLIN(  45)		return (((HX_("",00,00,00,00) + this->k) + HX_("x + ",3d,08,6a,4f)) + this->b);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Linear_obj,toString,return )

 ::Linear Linear_obj::combination(::Array< ::Dynamic> linears){
            	HX_GC_STACKFRAME(&_hx_pos_8cfeffb7702d53f0_14_combination)
HXLINE(  15)		 ::Linear result =  ::Linear_obj::__alloc( HX_CTX ,(int)1,(int)0);
HXLINE(  17)		{
HXLINE(  17)			int _g = (int)0;
HXDLIN(  17)			while((_g < linears->length)){
HXLINE(  17)				 ::Linear lin = linears->__get(_g).StaticCast<  ::Linear >();
HXDLIN(  17)				_g = (_g + (int)1);
HXLINE(  19)				 ::Linear result1 = result;
HXDLIN(  19)				result1->k = (result1->k * lin->k);
HXLINE(  20)				 ::Linear result2 = result;
HXDLIN(  20)				result2->b = (result2->b + lin->b);
            			}
            		}
HXLINE(  23)		return result;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Linear_obj,combination,return )


Linear_obj::Linear_obj()
{
}

hx::Val Linear_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"k") ) { return hx::Val( k ); }
		if (HX_FIELD_EQ(inName,"b") ) { return hx::Val( b ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"apply") ) { return hx::Val( apply_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"detach") ) { return hx::Val( detach_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"combine") ) { return hx::Val( combine_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"toString") ) { return hx::Val( toString_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool Linear_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 11:
		if (HX_FIELD_EQ(inName,"combination") ) { outValue = combination_dyn(); return true; }
	}
	return false;
}

hx::Val Linear_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"k") ) { k=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"b") ) { b=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Linear_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("k","\x6b","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("b","\x62","\x00","\x00","\x00"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Linear_obj_sMemberStorageInfo[] = {
	{hx::fsFloat,(int)offsetof(Linear_obj,k),HX_HCSTRING("k","\x6b","\x00","\x00","\x00")},
	{hx::fsFloat,(int)offsetof(Linear_obj,b),HX_HCSTRING("b","\x62","\x00","\x00","\x00")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Linear_obj_sStaticStorageInfo = 0;
#endif

static ::String Linear_obj_sMemberFields[] = {
	HX_HCSTRING("k","\x6b","\x00","\x00","\x00"),
	HX_HCSTRING("b","\x62","\x00","\x00","\x00"),
	HX_HCSTRING("apply","\x6e","\x85","\x3b","\x24"),
	HX_HCSTRING("combine","\x7f","\x2a","\x2e","\x7a"),
	HX_HCSTRING("detach","\x53","\x5d","\x1f","\x70"),
	HX_HCSTRING("toString","\xac","\xd0","\x6e","\x38"),
	::String(null()) };

static void Linear_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Linear_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Linear_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Linear_obj::__mClass,"__mClass");
};

#endif

hx::Class Linear_obj::__mClass;

static ::String Linear_obj_sStaticFields[] = {
	HX_HCSTRING("combination","\xcf","\x51","\xd1","\x1c"),
	::String(null())
};

void Linear_obj::__register()
{
	hx::Object *dummy = new Linear_obj;
	Linear_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("Linear","\x05","\xc6","\x34","\x21");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Linear_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Linear_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Linear_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Linear_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Linear_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Linear_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Linear_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Linear_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

