// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_hxassert_Assert
#include <hxassert/Assert.h>
#endif
#ifndef INCLUDED_hxassert_AssertionFailureError
#include <hxassert/AssertionFailureError.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_c3fd17f59bb0d0e5_45_on,"hxassert.Assert","on",0xb505a10f,"hxassert.Assert.on","hxassert/Assert.hx",45,0x755012df)
HX_LOCAL_STACK_FRAME(_hx_pos_c3fd17f59bb0d0e5_43_on,"hxassert.Assert","on",0xb505a10f,"hxassert.Assert.on","hxassert/Assert.hx",43,0x755012df)
HX_LOCAL_STACK_FRAME(_hx_pos_c3fd17f59bb0d0e5_92_fail,"hxassert.Assert","fail",0x347ed5ce,"hxassert.Assert.fail","hxassert/Assert.hx",92,0x755012df)
HX_LOCAL_STACK_FRAME(_hx_pos_c3fd17f59bb0d0e5_102_throwError,"hxassert.Assert","throwError",0xdc1424b2,"hxassert.Assert.throwError","hxassert/Assert.hx",102,0x755012df)
HX_LOCAL_STACK_FRAME(_hx_pos_c3fd17f59bb0d0e5_114_throwAssertionFailureError,"hxassert.Assert","throwAssertionFailureError",0x02e6f9ea,"hxassert.Assert.throwAssertionFailureError","hxassert/Assert.hx",114,0x755012df)
HX_LOCAL_STACK_FRAME(_hx_pos_c3fd17f59bb0d0e5_117_boot,"hxassert.Assert","boot",0x31e4a022,"hxassert.Assert.boot","hxassert/Assert.hx",117,0x755012df)
namespace hxassert{

void Assert_obj::__construct() { }

Dynamic Assert_obj::__CreateEmpty() { return new Assert_obj; }

void *Assert_obj::_hx_vtable = 0;

Dynamic Assert_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Assert_obj > _hx_result = new Assert_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Assert_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x53d6917c;
}

 ::Dynamic Assert_obj::on( ::Dynamic handler){
            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0, ::Dynamic,handler) HXARGC(0)
            		void _hx_run(){
            			HX_STACKFRAME(&_hx_pos_c3fd17f59bb0d0e5_45_on)
HXLINE(  45)			::hxassert::Assert_obj::_handlers->remove(handler);
            		}
            		HX_END_LOCAL_FUNC0((void))

            	HX_STACKFRAME(&_hx_pos_c3fd17f59bb0d0e5_43_on)
HXLINE(  44)		::hxassert::Assert_obj::_handlers->push(handler);
HXLINE(  45)		return  ::Dynamic(new _hx_Closure_0(handler));
            	}


void Assert_obj::fail(::String __o_reason, ::Dynamic position){
::String reason = __o_reason.Default(HX_HCSTRING("Assert.fail","\x66","\x6c","\x5f","\x13"));
            	HX_GC_STACKFRAME(&_hx_pos_c3fd17f59bb0d0e5_92_fail)
HXDLIN(  92)		::hxassert::Assert_obj::throwError( ::hxassert::AssertionFailureError_obj::__alloc( HX_CTX ,::Array_obj< ::String >::__new(1)->init(0,reason),position));
            	}


void Assert_obj::throwError( ::hxassert::AssertionFailureError error){
            	HX_STACKFRAME(&_hx_pos_c3fd17f59bb0d0e5_102_throwError)
HXLINE( 103)		{
HXLINE( 103)			int _g = (int)0;
HXDLIN( 103)			::Array< ::Dynamic> _g1 = ::hxassert::Assert_obj::_handlers;
HXDLIN( 103)			while((_g < _g1->length)){
HXLINE( 103)				 ::Dynamic handler = _g1->__get(_g);
HXDLIN( 103)				_g = (_g + (int)1);
HXLINE( 104)				handler(error);
            			}
            		}
HXLINE( 107)		if (!(error->recovered)) {
HXLINE( 108)			HX_STACK_DO_THROW(error);
            		}
            	}


void Assert_obj::throwAssertionFailureError(::Array< ::String > messages, ::Dynamic position){
            	HX_GC_STACKFRAME(&_hx_pos_c3fd17f59bb0d0e5_114_throwAssertionFailureError)
HXDLIN( 114)		::hxassert::Assert_obj::throwError( ::hxassert::AssertionFailureError_obj::__alloc( HX_CTX ,messages,position));
            	}


::Array< ::Dynamic> Assert_obj::_handlers;


Assert_obj::Assert_obj()
{
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *Assert_obj_sMemberStorageInfo = 0;
static hx::StaticInfo Assert_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*cpp::ArrayBase*/ ,(void *) &Assert_obj::_handlers,HX_HCSTRING("_handlers","\xc8","\x18","\xba","\x1c")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static void Assert_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Assert_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(Assert_obj::_handlers,"_handlers");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Assert_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Assert_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(Assert_obj::_handlers,"_handlers");
};

#endif

hx::Class Assert_obj::__mClass;

void Assert_obj::__register()
{
	hx::Object *dummy = new Assert_obj;
	Assert_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("hxassert.Assert","\x7e","\xca","\x80","\x53");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Assert_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< Assert_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Assert_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Assert_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Assert_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Assert_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_c3fd17f59bb0d0e5_117_boot)
HXDLIN( 117)		_handlers = ::Array_obj< ::Dynamic>::__new(0);
            	}
}

} // end namespace hxassert
