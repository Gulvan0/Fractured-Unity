// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_haxe_CallStack
#include <haxe/CallStack.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_StackItem
#include <haxe/StackItem.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_hxassert_AssertionFailureError
#include <hxassert/AssertionFailureError.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_5e3c32c5dd58ae2f_6_new,"hxassert.AssertionFailureError","new",0x763b7d3a,"hxassert.AssertionFailureError.new","hxassert/AssertionFailureError.hx",6,0x4666c277)
HX_LOCAL_STACK_FRAME(_hx_pos_5e3c32c5dd58ae2f_22_toString,"hxassert.AssertionFailureError","toString",0x89044d92,"hxassert.AssertionFailureError.toString","hxassert/AssertionFailureError.hx",22,0x4666c277)
HX_LOCAL_STACK_FRAME(_hx_pos_5e3c32c5dd58ae2f_26_getCallStackText,"hxassert.AssertionFailureError","getCallStackText",0x2579e407,"hxassert.AssertionFailureError.getCallStackText","hxassert/AssertionFailureError.hx",26,0x4666c277)
HX_LOCAL_STACK_FRAME(_hx_pos_5e3c32c5dd58ae2f_30_recovery,"hxassert.AssertionFailureError","recovery",0xfe1f7a3b,"hxassert.AssertionFailureError.recovery","hxassert/AssertionFailureError.hx",30,0x4666c277)
namespace hxassert{

void AssertionFailureError_obj::__construct(::Array< ::String > messages, ::Dynamic infos){
            	HX_STACKFRAME(&_hx_pos_5e3c32c5dd58ae2f_6_new)
HXLINE(  10)		this->recovered = false;
HXLINE(  16)		this->_messages = messages;
HXLINE(  17)		this->position = infos;
HXLINE(  18)		this->callstack = ::haxe::CallStack_obj::callStack();
            	}

Dynamic AssertionFailureError_obj::__CreateEmpty() { return new AssertionFailureError_obj; }

void *AssertionFailureError_obj::_hx_vtable = 0;

Dynamic AssertionFailureError_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< AssertionFailureError_obj > _hx_result = new AssertionFailureError_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool AssertionFailureError_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x689bdf0a;
}

::String AssertionFailureError_obj::toString(){
            	HX_STACKFRAME(&_hx_pos_5e3c32c5dd58ae2f_22_toString)
HXDLIN(  22)		return this->_messages->join(HX_("\n",0a,00,00,00));
            	}


HX_DEFINE_DYNAMIC_FUNC0(AssertionFailureError_obj,toString,return )

::String AssertionFailureError_obj::getCallStackText(){
            	HX_STACKFRAME(&_hx_pos_5e3c32c5dd58ae2f_26_getCallStackText)
HXDLIN(  26)		if (hx::IsNotNull( this->callstack )) {
HXDLIN(  26)			return ::haxe::CallStack_obj::toString(this->callstack);
            		}
            		else {
HXDLIN(  26)			return HX_("",00,00,00,00);
            		}
HXDLIN(  26)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(AssertionFailureError_obj,getCallStackText,return )

void AssertionFailureError_obj::recovery(){
            	HX_STACKFRAME(&_hx_pos_5e3c32c5dd58ae2f_30_recovery)
HXDLIN(  30)		this->recovered = true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(AssertionFailureError_obj,recovery,(void))


hx::ObjectPtr< AssertionFailureError_obj > AssertionFailureError_obj::__new(::Array< ::String > messages, ::Dynamic infos) {
	hx::ObjectPtr< AssertionFailureError_obj > __this = new AssertionFailureError_obj();
	__this->__construct(messages,infos);
	return __this;
}

hx::ObjectPtr< AssertionFailureError_obj > AssertionFailureError_obj::__alloc(hx::Ctx *_hx_ctx,::Array< ::String > messages, ::Dynamic infos) {
	AssertionFailureError_obj *__this = (AssertionFailureError_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(AssertionFailureError_obj), true, "hxassert.AssertionFailureError"));
	*(void **)__this = AssertionFailureError_obj::_hx_vtable;
	__this->__construct(messages,infos);
	return __this;
}

AssertionFailureError_obj::AssertionFailureError_obj()
{
}

void AssertionFailureError_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(AssertionFailureError);
	HX_MARK_MEMBER_NAME(callstack,"callstack");
	HX_MARK_MEMBER_NAME(position,"position");
	HX_MARK_MEMBER_NAME(recovered,"recovered");
	HX_MARK_MEMBER_NAME(_messages,"_messages");
	HX_MARK_MEMBER_NAME(_evaluations,"_evaluations");
	HX_MARK_END_CLASS();
}

void AssertionFailureError_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(callstack,"callstack");
	HX_VISIT_MEMBER_NAME(position,"position");
	HX_VISIT_MEMBER_NAME(recovered,"recovered");
	HX_VISIT_MEMBER_NAME(_messages,"_messages");
	HX_VISIT_MEMBER_NAME(_evaluations,"_evaluations");
}

hx::Val AssertionFailureError_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"position") ) { return hx::Val( position ); }
		if (HX_FIELD_EQ(inName,"toString") ) { return hx::Val( toString_dyn() ); }
		if (HX_FIELD_EQ(inName,"recovery") ) { return hx::Val( recovery_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"callstack") ) { return hx::Val( callstack ); }
		if (HX_FIELD_EQ(inName,"recovered") ) { return hx::Val( recovered ); }
		if (HX_FIELD_EQ(inName,"_messages") ) { return hx::Val( _messages ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"_evaluations") ) { return hx::Val( _evaluations ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"getCallStackText") ) { return hx::Val( getCallStackText_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val AssertionFailureError_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"position") ) { position=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"callstack") ) { callstack=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"recovered") ) { recovered=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_messages") ) { _messages=inValue.Cast< ::Array< ::String > >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"_evaluations") ) { _evaluations=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void AssertionFailureError_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("callstack","\xea","\x51","\x1d","\x7d"));
	outFields->push(HX_HCSTRING("position","\xa9","\xa0","\xfa","\xca"));
	outFields->push(HX_HCSTRING("recovered","\x03","\x9c","\x33","\x2b"));
	outFields->push(HX_HCSTRING("_messages","\x2b","\xd0","\x93","\x7c"));
	outFields->push(HX_HCSTRING("_evaluations","\x38","\xc0","\x02","\xc9"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo AssertionFailureError_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(AssertionFailureError_obj,callstack),HX_HCSTRING("callstack","\xea","\x51","\x1d","\x7d")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(AssertionFailureError_obj,position),HX_HCSTRING("position","\xa9","\xa0","\xfa","\xca")},
	{hx::fsBool,(int)offsetof(AssertionFailureError_obj,recovered),HX_HCSTRING("recovered","\x03","\x9c","\x33","\x2b")},
	{hx::fsObject /*Array< ::String >*/ ,(int)offsetof(AssertionFailureError_obj,_messages),HX_HCSTRING("_messages","\x2b","\xd0","\x93","\x7c")},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(int)offsetof(AssertionFailureError_obj,_evaluations),HX_HCSTRING("_evaluations","\x38","\xc0","\x02","\xc9")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *AssertionFailureError_obj_sStaticStorageInfo = 0;
#endif

static ::String AssertionFailureError_obj_sMemberFields[] = {
	HX_HCSTRING("callstack","\xea","\x51","\x1d","\x7d"),
	HX_HCSTRING("position","\xa9","\xa0","\xfa","\xca"),
	HX_HCSTRING("recovered","\x03","\x9c","\x33","\x2b"),
	HX_HCSTRING("_messages","\x2b","\xd0","\x93","\x7c"),
	HX_HCSTRING("_evaluations","\x38","\xc0","\x02","\xc9"),
	HX_HCSTRING("toString","\xac","\xd0","\x6e","\x38"),
	HX_HCSTRING("getCallStackText","\x21","\x11","\x24","\x44"),
	HX_HCSTRING("recovery","\x55","\xfd","\x89","\xad"),
	::String(null()) };

static void AssertionFailureError_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(AssertionFailureError_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void AssertionFailureError_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(AssertionFailureError_obj::__mClass,"__mClass");
};

#endif

hx::Class AssertionFailureError_obj::__mClass;

void AssertionFailureError_obj::__register()
{
	hx::Object *dummy = new AssertionFailureError_obj;
	AssertionFailureError_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("hxassert.AssertionFailureError","\x48","\x18","\xba","\xdf");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = AssertionFailureError_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(AssertionFailureError_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< AssertionFailureError_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = AssertionFailureError_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = AssertionFailureError_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = AssertionFailureError_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace hxassert
