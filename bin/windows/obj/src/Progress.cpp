// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_Progress
#include <Progress.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_86b0c476afc0fd4f_14_new,"Progress","new",0x5f92bf3f,"Progress.new","Progress.hx",14,0xca792d11)

void Progress_obj::__construct(int zone,int stage){
            	HX_STACKFRAME(&_hx_pos_86b0c476afc0fd4f_14_new)
HXLINE(  15)		this->zone = zone;
HXLINE(  16)		this->stage = stage;
            	}

Dynamic Progress_obj::__CreateEmpty() { return new Progress_obj; }

void *Progress_obj::_hx_vtable = 0;

Dynamic Progress_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Progress_obj > _hx_result = new Progress_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool Progress_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x5fdcb3cd;
}


Progress_obj::Progress_obj()
{
}

hx::Val Progress_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"zone") ) { return hx::Val( zone ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"stage") ) { return hx::Val( stage ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Progress_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"zone") ) { zone=inValue.Cast< int >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"stage") ) { stage=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Progress_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("zone","\x2c","\xa2","\xf8","\x50"));
	outFields->push(HX_HCSTRING("stage","\xbe","\x6a","\x0b","\x84"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Progress_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(Progress_obj,zone),HX_HCSTRING("zone","\x2c","\xa2","\xf8","\x50")},
	{hx::fsInt,(int)offsetof(Progress_obj,stage),HX_HCSTRING("stage","\xbe","\x6a","\x0b","\x84")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Progress_obj_sStaticStorageInfo = 0;
#endif

static ::String Progress_obj_sMemberFields[] = {
	HX_HCSTRING("zone","\x2c","\xa2","\xf8","\x50"),
	HX_HCSTRING("stage","\xbe","\x6a","\x0b","\x84"),
	::String(null()) };

static void Progress_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Progress_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Progress_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Progress_obj::__mClass,"__mClass");
};

#endif

hx::Class Progress_obj::__mClass;

void Progress_obj::__register()
{
	hx::Object *dummy = new Progress_obj;
	Progress_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("Progress","\xcd","\xb3","\xdc","\x5f");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Progress_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Progress_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Progress_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Progress_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Progress_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Progress_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

