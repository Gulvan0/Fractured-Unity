// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_ArcFlash
#include <ArcFlash.h>
#endif
#ifndef INCLUDED_Archghost
#include <Archghost.h>
#endif
#ifndef INCLUDED_Assets
#include <Assets.h>
#endif
#ifndef INCLUDED_BoltLg
#include <BoltLg.h>
#endif
#ifndef INCLUDED_Buff1
#include <Buff1.h>
#endif
#ifndef INCLUDED_Buff11
#include <Buff11.h>
#endif
#ifndef INCLUDED_Buff2
#include <Buff2.h>
#endif
#ifndef INCLUDED_Buff4
#include <Buff4.h>
#endif
#ifndef INCLUDED_Buff5
#include <Buff5.h>
#endif
#ifndef INCLUDED_Buff6
#include <Buff6.h>
#endif
#ifndef INCLUDED_Buff8
#include <Buff8.h>
#endif
#ifndef INCLUDED_Buff9
#include <Buff9.h>
#endif
#ifndef INCLUDED_Charge
#include <Charge.h>
#endif
#ifndef INCLUDED_Disrupt
#include <Disrupt.h>
#endif
#ifndef INCLUDED_EMPBlast
#include <EMPBlast.h>
#endif
#ifndef INCLUDED_ElectricalStorm
#include <ElectricalStorm.h>
#endif
#ifndef INCLUDED_Element
#include <Element.h>
#endif
#ifndef INCLUDED_Energize
#include <Energize.h>
#endif
#ifndef INCLUDED_Ghost
#include <Ghost.h>
#endif
#ifndef INCLUDED_Hero
#include <Hero.h>
#endif
#ifndef INCLUDED_HighVoltage
#include <HighVoltage.h>
#endif
#ifndef INCLUDED_Hugo
#include <Hugo.h>
#endif
#ifndef INCLUDED_ID
#include <ID.h>
#endif
#ifndef INCLUDED_Icarus
#include <Icarus.h>
#endif
#ifndef INCLUDED_LgBuff
#include <LgBuff.h>
#endif
#ifndef INCLUDED_LightningBolt
#include <LightningBolt.h>
#endif
#ifndef INCLUDED_LockedAbility
#include <LockedAbility.h>
#endif
#ifndef INCLUDED_NoAbility
#include <NoAbility.h>
#endif
#ifndef INCLUDED_NullZoneBG
#include <NullZoneBG.h>
#endif
#ifndef INCLUDED_NullZoneBGR
#include <NullZoneBGR.h>
#endif
#ifndef INCLUDED_PhBuff
#include <PhBuff.h>
#endif
#ifndef INCLUDED_ShockTherapy
#include <ShockTherapy.h>
#endif
#ifndef INCLUDED_SpellLg
#include <SpellLg.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_Strikeback
#include <Strikeback.h>
#endif
#ifndef INCLUDED_ThunderbirdSoul
#include <ThunderbirdSoul.h>
#endif
#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_VoltSnare
#include <VoltSnare.h>
#endif
#ifndef INCLUDED_Zealon
#include <Zealon.h>
#endif
#ifndef INCLUDED_Zone
#include <Zone.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_hxassert_Assert
#include <hxassert/Assert.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_MovieClip
#include <openfl/display/MovieClip.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_1c166cc4d85c92f2_18_getBattleAbility,"Assets","getBattleAbility",0x9db79d07,"Assets.getBattleAbility","Assets.hx",18,0x67c6cdfb)
HX_LOCAL_STACK_FRAME(_hx_pos_1c166cc4d85c92f2_50_getUnit,"Assets","getUnit",0x6fa6936f,"Assets.getUnit","Assets.hx",50,0x67c6cdfb)
HX_LOCAL_STACK_FRAME(_hx_pos_1c166cc4d85c92f2_65_getPlayer,"Assets","getPlayer",0x692a050c,"Assets.getPlayer","Assets.hx",65,0x67c6cdfb)
HX_LOCAL_STACK_FRAME(_hx_pos_1c166cc4d85c92f2_80_getBuffBox,"Assets","getBuffBox",0xc2fb6ded,"Assets.getBuffBox","Assets.hx",80,0x67c6cdfb)
HX_LOCAL_STACK_FRAME(_hx_pos_1c166cc4d85c92f2_93_getBuffMark,"Assets","getBuffMark",0xe03f75eb,"Assets.getBuffMark","Assets.hx",93,0x67c6cdfb)
HX_LOCAL_STACK_FRAME(_hx_pos_1c166cc4d85c92f2_119_getBattleBG,"Assets","getBattleBG",0x5dadd768,"Assets.getBattleBG","Assets.hx",119,0x67c6cdfb)
HX_LOCAL_STACK_FRAME(_hx_pos_1c166cc4d85c92f2_130_getRoamingBG,"Assets","getRoamingBG",0x538b57d3,"Assets.getRoamingBG","Assets.hx",130,0x67c6cdfb)
HX_LOCAL_STACK_FRAME(_hx_pos_1c166cc4d85c92f2_138_getSpellAnim,"Assets","getSpellAnim",0x3c24470e,"Assets.getSpellAnim","Assets.hx",138,0x67c6cdfb)
HX_LOCAL_STACK_FRAME(_hx_pos_1c166cc4d85c92f2_150_getBolt,"Assets","getBolt",0x63184a80,"Assets.getBolt","Assets.hx",150,0x67c6cdfb)
HX_LOCAL_STACK_FRAME(_hx_pos_1c166cc4d85c92f2_162_getSpell,"Assets","getSpell",0x1c9ca25d,"Assets.getSpell","Assets.hx",162,0x67c6cdfb)

void Assets_obj::__construct() { }

Dynamic Assets_obj::__CreateEmpty() { return new Assets_obj; }

void *Assets_obj::_hx_vtable = 0;

Dynamic Assets_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Assets_obj > _hx_result = new Assets_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Assets_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x3bbee6cf;
}

 ::openfl::display::MovieClip Assets_obj::getBattleAbility( ::ID id){
            	HX_GC_STACKFRAME(&_hx_pos_1c166cc4d85c92f2_18_getBattleAbility)
HXLINE(  19)		 ::openfl::display::MovieClip mc;
HXDLIN(  19)		switch((int)(_hx_getEnumValueIndex(id))){
            			case (int)0: {
HXLINE(  19)				mc =  ::LightningBolt_obj::__alloc( HX_CTX );
            			}
            			break;
            			case (int)1: {
HXLINE(  19)				mc =  ::Strikeback_obj::__alloc( HX_CTX );
            			}
            			break;
            			case (int)2: {
HXLINE(  19)				mc =  ::VoltSnare_obj::__alloc( HX_CTX );
            			}
            			break;
            			case (int)3: {
HXLINE(  19)				mc =  ::ShockTherapy_obj::__alloc( HX_CTX );
            			}
            			break;
            			case (int)4: {
HXLINE(  19)				mc =  ::ArcFlash_obj::__alloc( HX_CTX );
            			}
            			break;
            			case (int)5: {
HXLINE(  19)				mc =  ::Disrupt_obj::__alloc( HX_CTX );
            			}
            			break;
            			case (int)6: {
HXLINE(  19)				mc =  ::Energize_obj::__alloc( HX_CTX );
            			}
            			break;
            			case (int)7: {
HXLINE(  19)				mc =  ::ElectricalStorm_obj::__alloc( HX_CTX );
            			}
            			break;
            			case (int)8: {
HXLINE(  19)				mc =  ::EMPBlast_obj::__alloc( HX_CTX );
            			}
            			break;
            			case (int)9: {
HXLINE(  19)				mc =  ::ThunderbirdSoul_obj::__alloc( HX_CTX );
            			}
            			break;
            			case (int)10: {
HXLINE(  19)				mc =  ::Charge_obj::__alloc( HX_CTX );
            			}
            			break;
            			case (int)11: {
HXLINE(  19)				mc =  ::HighVoltage_obj::__alloc( HX_CTX );
            			}
            			break;
            			case (int)23: {
HXLINE(  19)				mc =  ::NoAbility_obj::__alloc( HX_CTX );
            			}
            			break;
            			case (int)24: {
HXLINE(  19)				mc =  ::LockedAbility_obj::__alloc( HX_CTX );
            			}
            			break;
            			default:{
HXLINE(  19)				mc = null();
            			}
            		}
HXLINE(  39)		if (hx::IsNull( mc )) {
HXLINE(  41)			::String _hx_tmp = (HX_("ERROR! No battle ability asset was found with such ID: ",6b,d8,8a,fe) + ::Std_obj::string(id));
HXDLIN(  41)			::hxassert::Assert_obj::fail(_hx_tmp,hx::SourceInfo(HX_("Assets.hx",fb,cd,c6,67),41,HX_("Assets",a3,bc,97,80),HX_("getBattleAbility",dc,04,52,97)));
HXLINE(  42)			return  ::openfl::display::MovieClip_obj::__alloc( HX_CTX );
            		}
            		else {
HXLINE(  45)			return mc;
            		}
HXLINE(  39)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Assets_obj,getBattleAbility,return )

 ::openfl::display::MovieClip Assets_obj::getUnit( ::ID id){
            	HX_GC_STACKFRAME(&_hx_pos_1c166cc4d85c92f2_50_getUnit)
HXDLIN(  50)		switch((int)(_hx_getEnumValueIndex(id))){
            			case (int)14: {
HXLINE(  55)				return  ::Ghost_obj::__alloc( HX_CTX );
            			}
            			break;
            			case (int)15: {
HXLINE(  57)				return  ::Archghost_obj::__alloc( HX_CTX );
            			}
            			break;
            			case (int)26: {
HXLINE(  53)				return  ::Hero_obj::__alloc( HX_CTX );
            			}
            			break;
            			default:{
HXLINE(  59)				HX_STACK_DO_THROW((HX_("ERROR! No battle unit asset was found with such ID: ",f1,c5,a2,6b) + ::Std_obj::string(id)));
            			}
            		}
HXLINE(  50)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Assets_obj,getUnit,return )

 ::openfl::display::MovieClip Assets_obj::getPlayer( ::Element element){
            	HX_GC_STACKFRAME(&_hx_pos_1c166cc4d85c92f2_65_getPlayer)
HXDLIN(  65)		switch((int)(_hx_getEnumValueIndex(element))){
            			case (int)2: {
HXLINE(  68)				return  ::Zealon_obj::__alloc( HX_CTX );
            			}
            			break;
            			case (int)3: {
HXLINE(  72)				return  ::Hugo_obj::__alloc( HX_CTX );
            			}
            			break;
            			case (int)5: {
HXLINE(  70)				return  ::Icarus_obj::__alloc( HX_CTX );
            			}
            			break;
            			default:{
HXLINE(  74)				HX_STACK_DO_THROW((HX_("ERROR! No player asset was found for element: ",ff,fc,8c,53) + ::Std_obj::string(element)));
            			}
            		}
HXLINE(  65)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Assets_obj,getPlayer,return )

 ::openfl::display::Sprite Assets_obj::getBuffBox( ::Element element){
            	HX_GC_STACKFRAME(&_hx_pos_1c166cc4d85c92f2_80_getBuffBox)
HXDLIN(  80)		switch((int)(_hx_getEnumValueIndex(element))){
            			case (int)0: {
HXLINE(  85)				return  ::PhBuff_obj::__alloc( HX_CTX );
            			}
            			break;
            			case (int)2: {
HXLINE(  83)				return  ::LgBuff_obj::__alloc( HX_CTX );
            			}
            			break;
            			default:{
HXLINE(  87)				return  ::PhBuff_obj::__alloc( HX_CTX );
            			}
            		}
HXLINE(  80)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Assets_obj,getBuffBox,return )

 ::openfl::display::Sprite Assets_obj::getBuffMark( ::ID id){
            	HX_GC_STACKFRAME(&_hx_pos_1c166cc4d85c92f2_93_getBuffMark)
HXDLIN(  93)		switch((int)(_hx_getEnumValueIndex(id))){
            			case (int)16: {
HXLINE(  98)				return  ::Buff11_obj::__alloc( HX_CTX );
            			}
            			break;
            			case (int)17: {
HXLINE( 102)				return  ::Buff6_obj::__alloc( HX_CTX );
            			}
            			break;
            			case (int)18: {
HXLINE( 100)				return  ::Buff1_obj::__alloc( HX_CTX );
            			}
            			break;
            			case (int)19: {
HXLINE(  96)				return  ::Buff2_obj::__alloc( HX_CTX );
            			}
            			break;
            			case (int)20: {
HXLINE( 104)				return  ::Buff9_obj::__alloc( HX_CTX );
            			}
            			break;
            			case (int)21: {
HXLINE( 108)				return  ::Buff8_obj::__alloc( HX_CTX );
            			}
            			break;
            			case (int)22: {
HXLINE( 106)				return  ::Buff5_obj::__alloc( HX_CTX );
            			}
            			break;
            			default:{
HXLINE( 110)				return  ::Buff4_obj::__alloc( HX_CTX );
            			}
            		}
HXLINE(  93)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Assets_obj,getBuffMark,return )

 ::openfl::display::MovieClip Assets_obj::getBattleBG( ::Zone zone){
            	HX_GC_STACKFRAME(&_hx_pos_1c166cc4d85c92f2_119_getBattleBG)
HXDLIN( 119)		return  ::NullZoneBG_obj::__alloc( HX_CTX );
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Assets_obj,getBattleBG,return )

 ::openfl::display::MovieClip Assets_obj::getRoamingBG( ::Zone zone){
            	HX_GC_STACKFRAME(&_hx_pos_1c166cc4d85c92f2_130_getRoamingBG)
HXDLIN( 130)		return  ::NullZoneBGR_obj::__alloc( HX_CTX );
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Assets_obj,getRoamingBG,return )

 ::openfl::display::MovieClip Assets_obj::getSpellAnim( ::Element element){
            	HX_GC_STACKFRAME(&_hx_pos_1c166cc4d85c92f2_138_getSpellAnim)
HXDLIN( 138)		if ((_hx_getEnumValueIndex(element) == (int)2)) {
HXLINE( 141)			return  ::SpellLg_obj::__alloc( HX_CTX );
            		}
            		else {
HXLINE( 143)			 ::Dynamic _hx_tmp = ::haxe::Log_obj::trace;
HXDLIN( 143)			::String _hx_tmp1 = (HX_("Warning! Incorrect ability id: ",cd,41,34,a7) + ::Std_obj::string(element));
HXDLIN( 143)			_hx_tmp(_hx_tmp1,hx::SourceInfo(HX_("Assets.hx",fb,cd,c6,67),143,HX_("Assets",a3,bc,97,80),HX_("getSpellAnim",63,e0,ee,c8)));
HXLINE( 144)			return  ::openfl::display::MovieClip_obj::__alloc( HX_CTX );
            		}
HXLINE( 138)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Assets_obj,getSpellAnim,return )

 ::openfl::display::MovieClip Assets_obj::getBolt( ::Element element){
            	HX_GC_STACKFRAME(&_hx_pos_1c166cc4d85c92f2_150_getBolt)
HXDLIN( 150)		if ((_hx_getEnumValueIndex(element) == (int)2)) {
HXLINE( 153)			return  ::BoltLg_obj::__alloc( HX_CTX );
            		}
            		else {
HXLINE( 155)			 ::Dynamic _hx_tmp = ::haxe::Log_obj::trace;
HXDLIN( 155)			::String _hx_tmp1 = (HX_("Warning! Incorrect element: ",4c,36,6d,93) + ::Type_obj::enumConstructor(element));
HXDLIN( 155)			_hx_tmp(_hx_tmp1,hx::SourceInfo(HX_("Assets.hx",fb,cd,c6,67),155,HX_("Assets",a3,bc,97,80),HX_("getBolt",4b,31,9e,13)));
HXLINE( 156)			return  ::LightningBolt_obj::__alloc( HX_CTX );
            		}
HXLINE( 150)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Assets_obj,getBolt,return )

 ::openfl::display::MovieClip Assets_obj::getSpell( ::Element element){
            	HX_GC_STACKFRAME(&_hx_pos_1c166cc4d85c92f2_162_getSpell)
HXLINE( 165)		 ::Dynamic _hx_tmp = ::haxe::Log_obj::trace;
HXDLIN( 165)		::String _hx_tmp1 = (HX_("Warning! Incorrect element: ",4c,36,6d,93) + ::Type_obj::enumConstructor(element));
HXDLIN( 165)		_hx_tmp(_hx_tmp1,hx::SourceInfo(HX_("Assets.hx",fb,cd,c6,67),165,HX_("Assets",a3,bc,97,80),HX_("getSpell",32,ad,40,e1)));
HXLINE( 166)		return  ::openfl::display::MovieClip_obj::__alloc( HX_CTX );
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Assets_obj,getSpell,return )


Assets_obj::Assets_obj()
{
}

bool Assets_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"getUnit") ) { outValue = getUnit_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getBolt") ) { outValue = getBolt_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"getSpell") ) { outValue = getSpell_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"getPlayer") ) { outValue = getPlayer_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"getBuffBox") ) { outValue = getBuffBox_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"getBuffMark") ) { outValue = getBuffMark_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getBattleBG") ) { outValue = getBattleBG_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"getRoamingBG") ) { outValue = getRoamingBG_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getSpellAnim") ) { outValue = getSpellAnim_dyn(); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"getBattleAbility") ) { outValue = getBattleAbility_dyn(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *Assets_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *Assets_obj_sStaticStorageInfo = 0;
#endif

static void Assets_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Assets_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Assets_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Assets_obj::__mClass,"__mClass");
};

#endif

hx::Class Assets_obj::__mClass;

static ::String Assets_obj_sStaticFields[] = {
	HX_HCSTRING("getBattleAbility","\xdc","\x04","\x52","\x97"),
	HX_HCSTRING("getUnit","\x3a","\x7a","\x2c","\x20"),
	HX_HCSTRING("getPlayer","\x97","\x74","\x0f","\xb4"),
	HX_HCSTRING("getBuffBox","\x02","\x98","\xd7","\x00"),
	HX_HCSTRING("getBuffMark","\x36","\x1e","\x08","\xc3"),
	HX_HCSTRING("getBattleBG","\xb3","\x7f","\x76","\x40"),
	HX_HCSTRING("getRoamingBG","\x28","\xf1","\x55","\xe0"),
	HX_HCSTRING("getSpellAnim","\x63","\xe0","\xee","\xc8"),
	HX_HCSTRING("getBolt","\x4b","\x31","\x9e","\x13"),
	HX_HCSTRING("getSpell","\x32","\xad","\x40","\xe1"),
	::String(null())
};

void Assets_obj::__register()
{
	hx::Object *dummy = new Assets_obj;
	Assets_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("Assets","\xa3","\xbc","\x97","\x80");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Assets_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Assets_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Assets_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< Assets_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Assets_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Assets_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Assets_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

