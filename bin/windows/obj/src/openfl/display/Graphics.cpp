// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_List
#include <List.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED__List_ListNode
#include <_List/ListNode.h>
#endif
#ifndef INCLUDED_lime__backend_native_NativeGLRenderContext
#include <lime/_backend/native/NativeGLRenderContext.h>
#endif
#ifndef INCLUDED_lime_graphics_cairo_Cairo
#include <lime/graphics/cairo/Cairo.h>
#endif
#ifndef INCLUDED_lime_graphics_opengl_GLObject
#include <lime/graphics/opengl/GLObject.h>
#endif
#ifndef INCLUDED_lime_utils_ArrayBufferView
#include <lime/utils/ArrayBufferView.h>
#endif
#ifndef INCLUDED_lime_utils_ObjectPool_openfl__internal_renderer_ShaderBuffer
#include <lime/utils/ObjectPool_openfl__internal_renderer_ShaderBuffer.h>
#endif
#ifndef INCLUDED_lime_utils_ObjectPool_openfl_geom_Matrix
#include <lime/utils/ObjectPool_openfl_geom_Matrix.h>
#endif
#ifndef INCLUDED_lime_utils_ObjectPool_openfl_geom_Rectangle
#include <lime/utils/ObjectPool_openfl_geom_Rectangle.h>
#endif
#ifndef INCLUDED_openfl__Vector_FloatVector
#include <openfl/_Vector/FloatVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_IVector
#include <openfl/_Vector/IVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_IntVector
#include <openfl/_Vector/IntVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_ObjectVector
#include <openfl/_Vector/ObjectVector.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_DrawCommandBuffer
#include <openfl/_internal/renderer/DrawCommandBuffer.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_DrawCommandReader
#include <openfl/_internal/renderer/DrawCommandReader.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_DrawCommandType
#include <openfl/_internal/renderer/DrawCommandType.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_ShaderBuffer
#include <openfl/_internal/renderer/ShaderBuffer.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_cairo_CairoGraphics
#include <openfl/_internal/renderer/cairo/CairoGraphics.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_Graphics
#include <openfl/display/Graphics.h>
#endif
#ifndef INCLUDED_openfl_display_GraphicsBitmapFill
#include <openfl/display/GraphicsBitmapFill.h>
#endif
#ifndef INCLUDED_openfl_display_GraphicsDataType
#include <openfl/display/GraphicsDataType.h>
#endif
#ifndef INCLUDED_openfl_display_GraphicsEndFill
#include <openfl/display/GraphicsEndFill.h>
#endif
#ifndef INCLUDED_openfl_display_GraphicsFillType
#include <openfl/display/GraphicsFillType.h>
#endif
#ifndef INCLUDED_openfl_display_GraphicsGradientFill
#include <openfl/display/GraphicsGradientFill.h>
#endif
#ifndef INCLUDED_openfl_display_GraphicsPath
#include <openfl/display/GraphicsPath.h>
#endif
#ifndef INCLUDED_openfl_display_GraphicsQuadPath
#include <openfl/display/GraphicsQuadPath.h>
#endif
#ifndef INCLUDED_openfl_display_GraphicsShader
#include <openfl/display/GraphicsShader.h>
#endif
#ifndef INCLUDED_openfl_display_GraphicsShaderFill
#include <openfl/display/GraphicsShaderFill.h>
#endif
#ifndef INCLUDED_openfl_display_GraphicsSolidFill
#include <openfl/display/GraphicsSolidFill.h>
#endif
#ifndef INCLUDED_openfl_display_GraphicsStroke
#include <openfl/display/GraphicsStroke.h>
#endif
#ifndef INCLUDED_openfl_display_GraphicsTrianglePath
#include <openfl/display/GraphicsTrianglePath.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_IGraphicsData
#include <openfl/display/IGraphicsData.h>
#endif
#ifndef INCLUDED_openfl_display_IGraphicsFill
#include <openfl/display/IGraphicsFill.h>
#endif
#ifndef INCLUDED_openfl_display_IGraphicsPath
#include <openfl/display/IGraphicsPath.h>
#endif
#ifndef INCLUDED_openfl_display_IGraphicsStroke
#include <openfl/display/IGraphicsStroke.h>
#endif
#ifndef INCLUDED_openfl_display_Shader
#include <openfl/display/Shader.h>
#endif
#ifndef INCLUDED_openfl_errors_ArgumentError
#include <openfl/errors/ArgumentError.h>
#endif
#ifndef INCLUDED_openfl_errors_Error
#include <openfl/errors/Error.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_geom_Matrix
#include <openfl/geom/Matrix.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_043516e11ce5c7d5_90_new,"openfl.display.Graphics","new",0x7fd846a7,"openfl.display.Graphics.new","openfl/display/Graphics.hx",90,0x8d299ce7)
HX_DEFINE_STACK_FRAME(_hx_pos_043516e11ce5c7d5_47_new,"openfl.display.Graphics","new",0x7fd846a7,"openfl.display.Graphics.new","openfl/display/Graphics.hx",47,0x8d299ce7)
HX_LOCAL_STACK_FRAME(_hx_pos_043516e11ce5c7d5_107_beginBitmapFill,"openfl.display.Graphics","beginBitmapFill",0x31c80e62,"openfl.display.Graphics.beginBitmapFill","openfl/display/Graphics.hx",107,0x8d299ce7)
HX_LOCAL_STACK_FRAME(_hx_pos_043516e11ce5c7d5_116_beginFill,"openfl.display.Graphics","beginFill",0xf44a92d3,"openfl.display.Graphics.beginFill","openfl/display/Graphics.hx",116,0x8d299ce7)
HX_LOCAL_STACK_FRAME(_hx_pos_043516e11ce5c7d5_125_beginGradientFill,"openfl.display.Graphics","beginGradientFill",0x99f380e3,"openfl.display.Graphics.beginGradientFill","openfl/display/Graphics.hx",125,0x8d299ce7)
HX_LOCAL_STACK_FRAME(_hx_pos_043516e11ce5c7d5_173_beginShaderFill,"openfl.display.Graphics","beginShaderFill",0x2f039098,"openfl.display.Graphics.beginShaderFill","openfl/display/Graphics.hx",173,0x8d299ce7)
HX_LOCAL_STACK_FRAME(_hx_pos_043516e11ce5c7d5_186_clear,"openfl.display.Graphics","clear",0x0a9f4794,"openfl.display.Graphics.clear","openfl/display/Graphics.hx",186,0x8d299ce7)
HX_LOCAL_STACK_FRAME(_hx_pos_043516e11ce5c7d5_217_copyFrom,"openfl.display.Graphics","copyFrom",0x0a477418,"openfl.display.Graphics.copyFrom","openfl/display/Graphics.hx",217,0x8d299ce7)
HX_LOCAL_STACK_FRAME(_hx_pos_043516e11ce5c7d5_231_cubicCurveTo,"openfl.display.Graphics","cubicCurveTo",0x467410b9,"openfl.display.Graphics.cubicCurveTo","openfl/display/Graphics.hx",231,0x8d299ce7)
HX_LOCAL_STACK_FRAME(_hx_pos_043516e11ce5c7d5_308_curveTo,"openfl.display.Graphics","curveTo",0x89f305d1,"openfl.display.Graphics.curveTo","openfl/display/Graphics.hx",308,0x8d299ce7)
HX_LOCAL_STACK_FRAME(_hx_pos_043516e11ce5c7d5_350_drawCircle,"openfl.display.Graphics","drawCircle",0xee64ddcd,"openfl.display.Graphics.drawCircle","openfl/display/Graphics.hx",350,0x8d299ce7)
HX_LOCAL_STACK_FRAME(_hx_pos_043516e11ce5c7d5_364_drawEllipse,"openfl.display.Graphics","drawEllipse",0xbfad1a81,"openfl.display.Graphics.drawEllipse","openfl/display/Graphics.hx",364,0x8d299ce7)
HX_LOCAL_STACK_FRAME(_hx_pos_043516e11ce5c7d5_378_drawGraphicsData,"openfl.display.Graphics","drawGraphicsData",0x60ea9412,"openfl.display.Graphics.drawGraphicsData","openfl/display/Graphics.hx",378,0x8d299ce7)
HX_LOCAL_STACK_FRAME(_hx_pos_043516e11ce5c7d5_482_drawPath,"openfl.display.Graphics","drawPath",0xa0a1f822,"openfl.display.Graphics.drawPath","openfl/display/Graphics.hx",482,0x8d299ce7)
HX_LOCAL_STACK_FRAME(_hx_pos_043516e11ce5c7d5_534_drawQuads,"openfl.display.Graphics","drawQuads",0x8da790af,"openfl.display.Graphics.drawQuads","openfl/display/Graphics.hx",534,0x8d299ce7)
HX_LOCAL_STACK_FRAME(_hx_pos_043516e11ce5c7d5_631_drawRect,"openfl.display.Graphics","drawRect",0xa1f75fa1,"openfl.display.Graphics.drawRect","openfl/display/Graphics.hx",631,0x8d299ce7)
HX_LOCAL_STACK_FRAME(_hx_pos_043516e11ce5c7d5_648_drawRoundRect,"openfl.display.Graphics","drawRoundRect",0xb24e78f5,"openfl.display.Graphics.drawRoundRect","openfl/display/Graphics.hx",648,0x8d299ce7)
HX_LOCAL_STACK_FRAME(_hx_pos_043516e11ce5c7d5_665_drawRoundRectComplex,"openfl.display.Graphics","drawRoundRectComplex",0x06fa4dbb,"openfl.display.Graphics.drawRoundRectComplex","openfl/display/Graphics.hx",665,0x8d299ce7)
HX_LOCAL_STACK_FRAME(_hx_pos_043516e11ce5c7d5_713_drawTriangles,"openfl.display.Graphics","drawTriangles",0xae0bf90e,"openfl.display.Graphics.drawTriangles","openfl/display/Graphics.hx",713,0x8d299ce7)
HX_LOCAL_STACK_FRAME(_hx_pos_043516e11ce5c7d5_776_endFill,"openfl.display.Graphics","endFill",0xe14b2dc5,"openfl.display.Graphics.endFill","openfl/display/Graphics.hx",776,0x8d299ce7)
HX_LOCAL_STACK_FRAME(_hx_pos_043516e11ce5c7d5_783_lineBitmapStyle,"openfl.display.Graphics","lineBitmapStyle",0x0ce183f5,"openfl.display.Graphics.lineBitmapStyle","openfl/display/Graphics.hx",783,0x8d299ce7)
HX_LOCAL_STACK_FRAME(_hx_pos_043516e11ce5c7d5_790_lineGradientStyle,"openfl.display.Graphics","lineGradientStyle",0x2de26914,"openfl.display.Graphics.lineGradientStyle","openfl/display/Graphics.hx",790,0x8d299ce7)
HX_LOCAL_STACK_FRAME(_hx_pos_043516e11ce5c7d5_795_lineStyle,"openfl.display.Graphics","lineStyle",0x32cd8e24,"openfl.display.Graphics.lineStyle","openfl/display/Graphics.hx",795,0x8d299ce7)
HX_LOCAL_STACK_FRAME(_hx_pos_043516e11ce5c7d5_818_lineTo,"openfl.display.Graphics","lineTo",0x25b7b6a8,"openfl.display.Graphics.lineTo","openfl/display/Graphics.hx",818,0x8d299ce7)
HX_LOCAL_STACK_FRAME(_hx_pos_043516e11ce5c7d5_844_moveTo,"openfl.display.Graphics","moveTo",0x05c44305,"openfl.display.Graphics.moveTo","openfl/display/Graphics.hx",844,0x8d299ce7)
HX_LOCAL_STACK_FRAME(_hx_pos_043516e11ce5c7d5_854_readGraphicsData,"openfl.display.Graphics","readGraphicsData",0x877c6664,"openfl.display.Graphics.readGraphicsData","openfl/display/Graphics.hx",854,0x8d299ce7)
HX_LOCAL_STACK_FRAME(_hx_pos_043516e11ce5c7d5_863___calculateBezierCubicPoint,"openfl.display.Graphics","__calculateBezierCubicPoint",0xb6679552,"openfl.display.Graphics.__calculateBezierCubicPoint","openfl/display/Graphics.hx",863,0x8d299ce7)
HX_LOCAL_STACK_FRAME(_hx_pos_043516e11ce5c7d5_871___calculateBezierQuadPoint,"openfl.display.Graphics","__calculateBezierQuadPoint",0x2414b8dd,"openfl.display.Graphics.__calculateBezierQuadPoint","openfl/display/Graphics.hx",871,0x8d299ce7)
HX_LOCAL_STACK_FRAME(_hx_pos_043516e11ce5c7d5_879___cleanup,"openfl.display.Graphics","__cleanup",0x9445428b,"openfl.display.Graphics.__cleanup","openfl/display/Graphics.hx",879,0x8d299ce7)
HX_LOCAL_STACK_FRAME(_hx_pos_043516e11ce5c7d5_900___getBounds,"openfl.display.Graphics","__getBounds",0x7b7eedd2,"openfl.display.Graphics.__getBounds","openfl/display/Graphics.hx",900,0x8d299ce7)
HX_LOCAL_STACK_FRAME(_hx_pos_043516e11ce5c7d5_912___hitTest,"openfl.display.Graphics","__hitTest",0xcb8296ac,"openfl.display.Graphics.__hitTest","openfl/display/Graphics.hx",912,0x8d299ce7)
HX_LOCAL_STACK_FRAME(_hx_pos_043516e11ce5c7d5_940___inflateBounds,"openfl.display.Graphics","__inflateBounds",0x7eaeb403,"openfl.display.Graphics.__inflateBounds","openfl/display/Graphics.hx",940,0x8d299ce7)
HX_LOCAL_STACK_FRAME(_hx_pos_043516e11ce5c7d5_981___readGraphicsData,"openfl.display.Graphics","__readGraphicsData",0xf8dcc1c4,"openfl.display.Graphics.__readGraphicsData","openfl/display/Graphics.hx",981,0x8d299ce7)
HX_LOCAL_STACK_FRAME(_hx_pos_043516e11ce5c7d5_1118___update,"openfl.display.Graphics","__update",0x711b5982,"openfl.display.Graphics.__update","openfl/display/Graphics.hx",1118,0x8d299ce7)
HX_LOCAL_STACK_FRAME(_hx_pos_043516e11ce5c7d5_1258_set___dirty,"openfl.display.Graphics","set___dirty",0x3f74a55c,"openfl.display.Graphics.set___dirty","openfl/display/Graphics.hx",1258,0x8d299ce7)
HX_LOCAL_STACK_FRAME(_hx_pos_043516e11ce5c7d5_50_boot,"openfl.display.Graphics","boot",0x557e8c0b,"openfl.display.Graphics.boot","openfl/display/Graphics.hx",50,0x8d299ce7)
HX_LOCAL_STACK_FRAME(_hx_pos_043516e11ce5c7d5_51_boot,"openfl.display.Graphics","boot",0x557e8c0b,"openfl.display.Graphics.boot","openfl/display/Graphics.hx",51,0x8d299ce7)
namespace openfl{
namespace display{

void Graphics_obj::__construct( ::openfl::display::DisplayObject owner){
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(0)
            		 ::openfl::_internal::renderer::ShaderBuffer _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_043516e11ce5c7d5_90_new)
HXLINE(  90)			return  ::openfl::_internal::renderer::ShaderBuffer_obj::__alloc( HX_CTX );
            		}
            		HX_END_LOCAL_FUNC0(return)

            	HX_GC_STACKFRAME(&_hx_pos_043516e11ce5c7d5_47_new)
HXLINE(  59)		this->_hx___dirty = true;
HXLINE(  87)		this->_hx___owner = owner;
HXLINE(  89)		this->_hx___commands =  ::openfl::_internal::renderer::DrawCommandBuffer_obj::__alloc( HX_CTX );
HXLINE(  90)		this->_hx___shaderBufferPool =  ::lime::utils::ObjectPool_openfl__internal_renderer_ShaderBuffer_obj::__alloc( HX_CTX , ::Dynamic(new _hx_Closure_0()),null(),null());
HXLINE(  91)		this->_hx___strokePadding = (int)0;
HXLINE(  92)		this->_hx___positionX = (int)0;
HXLINE(  93)		this->_hx___positionY = (int)0;
HXLINE(  94)		this->_hx___renderTransform =  ::openfl::geom::Matrix_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
HXLINE(  95)		this->_hx___usedShaderBuffers =  ::List_obj::__alloc( HX_CTX );
HXLINE(  96)		this->_hx___worldTransform =  ::openfl::geom::Matrix_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
HXLINE(  97)		this->_hx___width = (int)0;
HXLINE(  98)		this->_hx___height = (int)0;
            	}

Dynamic Graphics_obj::__CreateEmpty() { return new Graphics_obj; }

void *Graphics_obj::_hx_vtable = 0;

Dynamic Graphics_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Graphics_obj > _hx_result = new Graphics_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool Graphics_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x6b098f39;
}

void Graphics_obj::beginBitmapFill( ::openfl::display::BitmapData bitmap, ::openfl::geom::Matrix matrix,hx::Null< bool >  __o_repeat,hx::Null< bool >  __o_smooth){
bool repeat = __o_repeat.Default(true);
bool smooth = __o_smooth.Default(false);
            	HX_STACKFRAME(&_hx_pos_043516e11ce5c7d5_107_beginBitmapFill)
HXLINE( 109)		 ::openfl::_internal::renderer::DrawCommandBuffer _hx_tmp = this->_hx___commands;
HXDLIN( 109)		 ::openfl::geom::Matrix _hx_tmp1;
HXDLIN( 109)		if (hx::IsNotNull( matrix )) {
HXLINE( 109)			_hx_tmp1 = matrix->clone();
            		}
            		else {
HXLINE( 109)			_hx_tmp1 = null();
            		}
HXDLIN( 109)		_hx_tmp->beginBitmapFill(bitmap,_hx_tmp1,repeat,smooth);
HXLINE( 111)		this->_hx___visible = true;
            	}


HX_DEFINE_DYNAMIC_FUNC4(Graphics_obj,beginBitmapFill,(void))

void Graphics_obj::beginFill(hx::Null< int >  __o_color,hx::Null< Float >  __o_alpha){
int color = __o_color.Default(0);
Float alpha = __o_alpha.Default(1);
            	HX_STACKFRAME(&_hx_pos_043516e11ce5c7d5_116_beginFill)
HXLINE( 118)		 ::openfl::_internal::renderer::DrawCommandBuffer _hx_tmp = this->_hx___commands;
HXDLIN( 118)		_hx_tmp->beginFill(((int)color & (int)(int)16777215),alpha);
HXLINE( 120)		if ((alpha > (int)0)) {
HXLINE( 120)			this->_hx___visible = true;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(Graphics_obj,beginFill,(void))

void Graphics_obj::beginGradientFill( ::Dynamic type,::Array< int > colors,::Array< Float > alphas,::Array< int > ratios, ::openfl::geom::Matrix matrix, ::Dynamic __o_spreadMethod, ::Dynamic __o_interpolationMethod,hx::Null< Float >  __o_focalPointRatio){
 ::Dynamic spreadMethod = __o_spreadMethod.Default(0);
 ::Dynamic interpolationMethod = __o_interpolationMethod.Default(1);
Float focalPointRatio = __o_focalPointRatio.Default(0);
            	HX_STACKFRAME(&_hx_pos_043516e11ce5c7d5_125_beginGradientFill)
HXLINE( 127)		bool _hx_tmp;
HXDLIN( 127)		if (hx::IsNotNull( colors )) {
HXLINE( 127)			_hx_tmp = (colors->length == (int)0);
            		}
            		else {
HXLINE( 127)			_hx_tmp = true;
            		}
HXDLIN( 127)		if (_hx_tmp) {
HXLINE( 127)			return;
            		}
HXLINE( 129)		if (hx::IsNull( alphas )) {
HXLINE( 131)			alphas = ::Array_obj< Float >::__new(0);
HXLINE( 133)			{
HXLINE( 133)				int _g1 = (int)0;
HXDLIN( 133)				int _g = colors->length;
HXDLIN( 133)				while((_g1 < _g)){
HXLINE( 133)					_g1 = (_g1 + (int)1);
HXDLIN( 133)					int i = (_g1 - (int)1);
HXLINE( 135)					alphas->push((int)1);
            				}
            			}
            		}
HXLINE( 141)		if (hx::IsNull( ratios )) {
HXLINE( 143)			ratios = ::Array_obj< int >::__new(0);
HXLINE( 145)			{
HXLINE( 145)				int _g11 = (int)0;
HXDLIN( 145)				int _g2 = colors->length;
HXDLIN( 145)				while((_g11 < _g2)){
HXLINE( 145)					_g11 = (_g11 + (int)1);
HXDLIN( 145)					int i1 = (_g11 - (int)1);
HXLINE( 147)					ratios->push(::Math_obj::ceil((((Float)i1 / (Float)colors->length) * (int)255)));
            				}
            			}
            		}
HXLINE( 153)		bool _hx_tmp1;
HXDLIN( 153)		if ((alphas->length >= colors->length)) {
HXLINE( 153)			_hx_tmp1 = (ratios->length < colors->length);
            		}
            		else {
HXLINE( 153)			_hx_tmp1 = true;
            		}
HXDLIN( 153)		if (_hx_tmp1) {
HXLINE( 153)			return;
            		}
HXLINE( 155)		this->_hx___commands->beginGradientFill(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio);
HXLINE( 157)		{
HXLINE( 157)			int _g3 = (int)0;
HXDLIN( 157)			while((_g3 < alphas->length)){
HXLINE( 157)				Float alpha = alphas->__get(_g3);
HXDLIN( 157)				_g3 = (_g3 + (int)1);
HXLINE( 159)				if ((alpha > (int)0)) {
HXLINE( 161)					this->_hx___visible = true;
HXLINE( 162)					goto _hx_goto_6;
            				}
            			}
            			_hx_goto_6:;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC8(Graphics_obj,beginGradientFill,(void))

void Graphics_obj::beginShaderFill( ::openfl::display::Shader shader, ::openfl::geom::Matrix matrix){
            	HX_STACKFRAME(&_hx_pos_043516e11ce5c7d5_173_beginShaderFill)
HXDLIN( 173)		if (hx::IsNotNull( shader )) {
HXLINE( 175)			 ::openfl::_internal::renderer::ShaderBuffer shaderBuffer = this->_hx___shaderBufferPool->get();
HXLINE( 176)			this->_hx___usedShaderBuffers->add(shaderBuffer);
HXLINE( 177)			shaderBuffer->update(( ( ::openfl::display::GraphicsShader)(shader) ));
HXLINE( 179)			this->_hx___commands->beginShaderFill(shaderBuffer);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(Graphics_obj,beginShaderFill,(void))

void Graphics_obj::clear(){
            	HX_STACKFRAME(&_hx_pos_043516e11ce5c7d5_186_clear)
HXLINE( 188)		{
HXLINE( 188)			 ::_List::ListNode _g_head = this->_hx___usedShaderBuffers->h;
HXDLIN( 188)			while(hx::IsNotNull( _g_head )){
HXLINE( 188)				 ::openfl::_internal::renderer::ShaderBuffer val = ( ( ::openfl::_internal::renderer::ShaderBuffer)(_g_head->item) );
HXDLIN( 188)				_g_head = _g_head->next;
HXDLIN( 188)				 ::openfl::_internal::renderer::ShaderBuffer shaderBuffer = val;
HXLINE( 190)				this->_hx___shaderBufferPool->release(shaderBuffer);
            			}
            		}
HXLINE( 194)		this->_hx___usedShaderBuffers->clear();
HXLINE( 195)		this->_hx___commands->clear();
HXLINE( 196)		this->_hx___strokePadding = (int)0;
HXLINE( 198)		if (hx::IsNotNull( this->_hx___bounds )) {
HXLINE( 200)			this->set___dirty(true);
HXLINE( 201)			this->_hx___transformDirty = true;
HXLINE( 202)			this->_hx___bounds = null();
            		}
HXLINE( 206)		this->_hx___visible = false;
HXLINE( 207)		this->_hx___positionX = (int)0;
HXLINE( 208)		this->_hx___positionY = (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Graphics_obj,clear,(void))

void Graphics_obj::copyFrom( ::openfl::display::Graphics sourceGraphics){
            	HX_STACKFRAME(&_hx_pos_043516e11ce5c7d5_217_copyFrom)
HXLINE( 219)		 ::openfl::geom::Rectangle _hx_tmp;
HXDLIN( 219)		if (hx::IsNotNull( sourceGraphics->_hx___bounds )) {
HXLINE( 219)			_hx_tmp = sourceGraphics->_hx___bounds->clone();
            		}
            		else {
HXLINE( 219)			_hx_tmp = null();
            		}
HXDLIN( 219)		this->_hx___bounds = _hx_tmp;
HXLINE( 220)		this->_hx___commands = sourceGraphics->_hx___commands->copy();
HXLINE( 221)		this->set___dirty(true);
HXLINE( 222)		this->_hx___strokePadding = sourceGraphics->_hx___strokePadding;
HXLINE( 223)		this->_hx___positionX = sourceGraphics->_hx___positionX;
HXLINE( 224)		this->_hx___positionY = sourceGraphics->_hx___positionY;
HXLINE( 225)		this->_hx___transformDirty = true;
HXLINE( 226)		this->_hx___visible = sourceGraphics->_hx___visible;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Graphics_obj,copyFrom,(void))

void Graphics_obj::cubicCurveTo(Float controlX1,Float controlY1,Float controlX2,Float controlY2,Float anchorX,Float anchorY){
            	HX_STACKFRAME(&_hx_pos_043516e11ce5c7d5_231_cubicCurveTo)
HXLINE( 233)		Float _hx_tmp = (this->_hx___positionX - this->_hx___strokePadding);
HXDLIN( 233)		this->_hx___inflateBounds(_hx_tmp,(this->_hx___positionY - this->_hx___strokePadding));
HXLINE( 234)		Float _hx_tmp1 = (this->_hx___positionX + this->_hx___strokePadding);
HXDLIN( 234)		this->_hx___inflateBounds(_hx_tmp1,(this->_hx___positionY + this->_hx___strokePadding));
HXLINE( 236)		Float ix1;
HXDLIN( 236)		Float iy1;
HXDLIN( 236)		Float ix2;
HXDLIN( 236)		Float iy2;
HXLINE( 238)		ix1 = anchorX;
HXLINE( 239)		ix2 = anchorX;
HXLINE( 241)		bool _hx_tmp2;
HXDLIN( 241)		bool _hx_tmp3;
HXDLIN( 241)		bool _hx_tmp4;
HXDLIN( 241)		if ((controlX1 < anchorX)) {
HXLINE( 241)			_hx_tmp4 = (controlX1 > this->_hx___positionX);
            		}
            		else {
HXLINE( 241)			_hx_tmp4 = false;
            		}
HXDLIN( 241)		if (!(_hx_tmp4)) {
HXLINE( 241)			if ((controlX1 > anchorX)) {
HXLINE( 241)				_hx_tmp3 = (controlX1 < this->_hx___positionX);
            			}
            			else {
HXLINE( 241)				_hx_tmp3 = false;
            			}
            		}
            		else {
HXLINE( 241)			_hx_tmp3 = true;
            		}
HXDLIN( 241)		if (_hx_tmp3) {
HXLINE( 241)			bool _hx_tmp5;
HXDLIN( 241)			if ((controlX2 < anchorX)) {
HXLINE( 241)				_hx_tmp5 = (controlX2 > this->_hx___positionX);
            			}
            			else {
HXLINE( 241)				_hx_tmp5 = false;
            			}
HXDLIN( 241)			if (!(_hx_tmp5)) {
HXLINE( 241)				if ((controlX2 > anchorX)) {
HXLINE( 241)					_hx_tmp2 = (controlX2 < this->_hx___positionX);
            				}
            				else {
HXLINE( 241)					_hx_tmp2 = false;
            				}
            			}
            			else {
HXLINE( 241)				_hx_tmp2 = true;
            			}
            		}
            		else {
HXLINE( 241)			_hx_tmp2 = false;
            		}
HXDLIN( 241)		if (!(_hx_tmp2)) {
HXLINE( 243)			Float u = ((int)2 * this->_hx___positionX);
HXDLIN( 243)			Float u1 = (u - ((int)4 * controlX1));
HXDLIN( 243)			Float u2 = (u1 + ((int)2 * controlX2));
HXLINE( 244)			Float v = (controlX1 - this->_hx___positionX);
HXLINE( 245)			Float w = -(this->_hx___positionX);
HXDLIN( 245)			Float w1 = ((w + ((int)3 * controlX1)) + anchorX);
HXDLIN( 245)			Float w2 = (w1 - ((int)3 * controlX2));
HXLINE( 247)			Float t1 = (-(u2) + ::Math_obj::sqrt(((u2 * u2) - (((int)4 * v) * w2))));
HXDLIN( 247)			Float t11 = ((Float)t1 / (Float)((int)2 * w2));
HXLINE( 248)			Float t2 = (-(u2) - ::Math_obj::sqrt(((u2 * u2) - (((int)4 * v) * w2))));
HXDLIN( 248)			Float t21 = ((Float)t2 / (Float)((int)2 * w2));
HXLINE( 250)			bool _hx_tmp6;
HXDLIN( 250)			if ((t11 > (int)0)) {
HXLINE( 250)				_hx_tmp6 = (t11 < (int)1);
            			}
            			else {
HXLINE( 250)				_hx_tmp6 = false;
            			}
HXDLIN( 250)			if (_hx_tmp6) {
HXLINE( 252)				ix1 = this->_hx___calculateBezierCubicPoint(t11,this->_hx___positionX,controlX1,controlX2,anchorX);
            			}
HXLINE( 256)			bool _hx_tmp7;
HXDLIN( 256)			if ((t21 > (int)0)) {
HXLINE( 256)				_hx_tmp7 = (t21 < (int)1);
            			}
            			else {
HXLINE( 256)				_hx_tmp7 = false;
            			}
HXDLIN( 256)			if (_hx_tmp7) {
HXLINE( 258)				ix2 = this->_hx___calculateBezierCubicPoint(t21,this->_hx___positionX,controlX1,controlX2,anchorX);
            			}
            		}
HXLINE( 264)		iy1 = anchorY;
HXLINE( 265)		iy2 = anchorY;
HXLINE( 267)		bool _hx_tmp8;
HXDLIN( 267)		bool _hx_tmp9;
HXDLIN( 267)		bool _hx_tmp10;
HXDLIN( 267)		if ((controlY1 < anchorY)) {
HXLINE( 267)			_hx_tmp10 = (controlY1 > this->_hx___positionX);
            		}
            		else {
HXLINE( 267)			_hx_tmp10 = false;
            		}
HXDLIN( 267)		if (!(_hx_tmp10)) {
HXLINE( 267)			if ((controlY1 > anchorY)) {
HXLINE( 267)				_hx_tmp9 = (controlY1 < this->_hx___positionX);
            			}
            			else {
HXLINE( 267)				_hx_tmp9 = false;
            			}
            		}
            		else {
HXLINE( 267)			_hx_tmp9 = true;
            		}
HXDLIN( 267)		if (_hx_tmp9) {
HXLINE( 267)			bool _hx_tmp11;
HXDLIN( 267)			if ((controlY2 < anchorY)) {
HXLINE( 267)				_hx_tmp11 = (controlY2 > this->_hx___positionX);
            			}
            			else {
HXLINE( 267)				_hx_tmp11 = false;
            			}
HXDLIN( 267)			if (!(_hx_tmp11)) {
HXLINE( 267)				if ((controlY2 > anchorY)) {
HXLINE( 267)					_hx_tmp8 = (controlY2 < this->_hx___positionX);
            				}
            				else {
HXLINE( 267)					_hx_tmp8 = false;
            				}
            			}
            			else {
HXLINE( 267)				_hx_tmp8 = true;
            			}
            		}
            		else {
HXLINE( 267)			_hx_tmp8 = false;
            		}
HXDLIN( 267)		if (!(_hx_tmp8)) {
HXLINE( 269)			Float u3 = ((int)2 * this->_hx___positionX);
HXDLIN( 269)			Float u4 = (u3 - ((int)4 * controlY1));
HXDLIN( 269)			Float u5 = (u4 + ((int)2 * controlY2));
HXLINE( 270)			Float v1 = (controlY1 - this->_hx___positionX);
HXLINE( 271)			Float w3 = -(this->_hx___positionX);
HXDLIN( 271)			Float w4 = ((w3 + ((int)3 * controlY1)) + anchorY);
HXDLIN( 271)			Float w5 = (w4 - ((int)3 * controlY2));
HXLINE( 273)			Float t12 = (-(u5) + ::Math_obj::sqrt(((u5 * u5) - (((int)4 * v1) * w5))));
HXDLIN( 273)			Float t13 = ((Float)t12 / (Float)((int)2 * w5));
HXLINE( 274)			Float t22 = (-(u5) - ::Math_obj::sqrt(((u5 * u5) - (((int)4 * v1) * w5))));
HXDLIN( 274)			Float t23 = ((Float)t22 / (Float)((int)2 * w5));
HXLINE( 276)			bool _hx_tmp12;
HXDLIN( 276)			if ((t13 > (int)0)) {
HXLINE( 276)				_hx_tmp12 = (t13 < (int)1);
            			}
            			else {
HXLINE( 276)				_hx_tmp12 = false;
            			}
HXDLIN( 276)			if (_hx_tmp12) {
HXLINE( 278)				iy1 = this->_hx___calculateBezierCubicPoint(t13,this->_hx___positionX,controlY1,controlY2,anchorY);
            			}
HXLINE( 282)			bool _hx_tmp13;
HXDLIN( 282)			if ((t23 > (int)0)) {
HXLINE( 282)				_hx_tmp13 = (t23 < (int)1);
            			}
            			else {
HXLINE( 282)				_hx_tmp13 = false;
            			}
HXDLIN( 282)			if (_hx_tmp13) {
HXLINE( 284)				iy2 = this->_hx___calculateBezierCubicPoint(t23,this->_hx___positionX,controlY1,controlY2,anchorY);
            			}
            		}
HXLINE( 290)		Float _hx_tmp14 = (ix1 - this->_hx___strokePadding);
HXDLIN( 290)		this->_hx___inflateBounds(_hx_tmp14,(iy1 - this->_hx___strokePadding));
HXLINE( 291)		Float _hx_tmp15 = (ix1 + this->_hx___strokePadding);
HXDLIN( 291)		this->_hx___inflateBounds(_hx_tmp15,(iy1 + this->_hx___strokePadding));
HXLINE( 292)		Float _hx_tmp16 = (ix2 - this->_hx___strokePadding);
HXDLIN( 292)		this->_hx___inflateBounds(_hx_tmp16,(iy2 - this->_hx___strokePadding));
HXLINE( 293)		Float _hx_tmp17 = (ix2 + this->_hx___strokePadding);
HXDLIN( 293)		this->_hx___inflateBounds(_hx_tmp17,(iy2 + this->_hx___strokePadding));
HXLINE( 295)		this->_hx___positionX = anchorX;
HXLINE( 296)		this->_hx___positionY = anchorY;
HXLINE( 298)		Float _hx_tmp18 = (this->_hx___positionX - this->_hx___strokePadding);
HXDLIN( 298)		this->_hx___inflateBounds(_hx_tmp18,(this->_hx___positionY - this->_hx___strokePadding));
HXLINE( 299)		Float _hx_tmp19 = (this->_hx___positionX + this->_hx___strokePadding);
HXDLIN( 299)		this->_hx___inflateBounds(_hx_tmp19,(this->_hx___positionY + this->_hx___strokePadding));
HXLINE( 301)		this->_hx___commands->cubicCurveTo(controlX1,controlY1,controlX2,controlY2,anchorX,anchorY);
HXLINE( 303)		this->set___dirty(true);
            	}


HX_DEFINE_DYNAMIC_FUNC6(Graphics_obj,cubicCurveTo,(void))

void Graphics_obj::curveTo(Float controlX,Float controlY,Float anchorX,Float anchorY){
            	HX_STACKFRAME(&_hx_pos_043516e11ce5c7d5_308_curveTo)
HXLINE( 310)		Float _hx_tmp = (this->_hx___positionX - this->_hx___strokePadding);
HXDLIN( 310)		this->_hx___inflateBounds(_hx_tmp,(this->_hx___positionY - this->_hx___strokePadding));
HXLINE( 311)		Float _hx_tmp1 = (this->_hx___positionX + this->_hx___strokePadding);
HXDLIN( 311)		this->_hx___inflateBounds(_hx_tmp1,(this->_hx___positionY + this->_hx___strokePadding));
HXLINE( 313)		Float ix;
HXDLIN( 313)		Float iy;
HXLINE( 315)		bool _hx_tmp2;
HXDLIN( 315)		bool _hx_tmp3;
HXDLIN( 315)		if ((controlX < anchorX)) {
HXLINE( 315)			_hx_tmp3 = (controlX > this->_hx___positionX);
            		}
            		else {
HXLINE( 315)			_hx_tmp3 = false;
            		}
HXDLIN( 315)		if (!(_hx_tmp3)) {
HXLINE( 315)			if ((controlX > anchorX)) {
HXLINE( 315)				_hx_tmp2 = (controlX < this->_hx___positionX);
            			}
            			else {
HXLINE( 315)				_hx_tmp2 = false;
            			}
            		}
            		else {
HXLINE( 315)			_hx_tmp2 = true;
            		}
HXDLIN( 315)		if (_hx_tmp2) {
HXLINE( 317)			ix = anchorX;
            		}
            		else {
HXLINE( 321)			Float tx = (this->_hx___positionX - controlX);
HXDLIN( 321)			Float tx1 = this->_hx___positionX;
HXDLIN( 321)			Float tx2 = ((Float)tx / (Float)((tx1 - ((int)2 * controlX)) + anchorX));
HXLINE( 322)			ix = this->_hx___calculateBezierQuadPoint(tx2,this->_hx___positionX,controlX,anchorX);
            		}
HXLINE( 326)		bool _hx_tmp4;
HXDLIN( 326)		bool _hx_tmp5;
HXDLIN( 326)		if ((controlY < anchorY)) {
HXLINE( 326)			_hx_tmp5 = (controlY > this->_hx___positionY);
            		}
            		else {
HXLINE( 326)			_hx_tmp5 = false;
            		}
HXDLIN( 326)		if (!(_hx_tmp5)) {
HXLINE( 326)			if ((controlY > anchorY)) {
HXLINE( 326)				_hx_tmp4 = (controlY < this->_hx___positionY);
            			}
            			else {
HXLINE( 326)				_hx_tmp4 = false;
            			}
            		}
            		else {
HXLINE( 326)			_hx_tmp4 = true;
            		}
HXDLIN( 326)		if (_hx_tmp4) {
HXLINE( 328)			iy = anchorY;
            		}
            		else {
HXLINE( 332)			Float ty = (this->_hx___positionY - controlY);
HXDLIN( 332)			Float ty1 = this->_hx___positionY;
HXDLIN( 332)			Float ty2 = ((Float)ty / (Float)((ty1 - ((int)2 * controlY)) + anchorY));
HXLINE( 333)			iy = this->_hx___calculateBezierQuadPoint(ty2,this->_hx___positionY,controlY,anchorY);
            		}
HXLINE( 337)		Float _hx_tmp6 = (ix - this->_hx___strokePadding);
HXDLIN( 337)		this->_hx___inflateBounds(_hx_tmp6,(iy - this->_hx___strokePadding));
HXLINE( 338)		Float _hx_tmp7 = (ix + this->_hx___strokePadding);
HXDLIN( 338)		this->_hx___inflateBounds(_hx_tmp7,(iy + this->_hx___strokePadding));
HXLINE( 340)		this->_hx___positionX = anchorX;
HXLINE( 341)		this->_hx___positionY = anchorY;
HXLINE( 343)		this->_hx___commands->curveTo(controlX,controlY,anchorX,anchorY);
HXLINE( 345)		this->set___dirty(true);
            	}


HX_DEFINE_DYNAMIC_FUNC4(Graphics_obj,curveTo,(void))

void Graphics_obj::drawCircle(Float x,Float y,Float radius){
            	HX_STACKFRAME(&_hx_pos_043516e11ce5c7d5_350_drawCircle)
HXLINE( 352)		if ((radius <= (int)0)) {
HXLINE( 352)			return;
            		}
HXLINE( 354)		Float _hx_tmp = ((x - radius) - this->_hx___strokePadding);
HXDLIN( 354)		this->_hx___inflateBounds(_hx_tmp,((y - radius) - this->_hx___strokePadding));
HXLINE( 355)		Float _hx_tmp1 = ((x + radius) + this->_hx___strokePadding);
HXDLIN( 355)		this->_hx___inflateBounds(_hx_tmp1,((y + radius) + this->_hx___strokePadding));
HXLINE( 357)		this->_hx___commands->drawCircle(x,y,radius);
HXLINE( 359)		this->set___dirty(true);
            	}


HX_DEFINE_DYNAMIC_FUNC3(Graphics_obj,drawCircle,(void))

void Graphics_obj::drawEllipse(Float x,Float y,Float width,Float height){
            	HX_STACKFRAME(&_hx_pos_043516e11ce5c7d5_364_drawEllipse)
HXLINE( 366)		bool _hx_tmp;
HXDLIN( 366)		if (!((width <= (int)0))) {
HXLINE( 366)			_hx_tmp = (height <= (int)0);
            		}
            		else {
HXLINE( 366)			_hx_tmp = true;
            		}
HXDLIN( 366)		if (_hx_tmp) {
HXLINE( 366)			return;
            		}
HXLINE( 368)		Float _hx_tmp1 = (x - this->_hx___strokePadding);
HXDLIN( 368)		this->_hx___inflateBounds(_hx_tmp1,(y - this->_hx___strokePadding));
HXLINE( 369)		Float _hx_tmp2 = ((x + width) + this->_hx___strokePadding);
HXDLIN( 369)		this->_hx___inflateBounds(_hx_tmp2,((y + height) + this->_hx___strokePadding));
HXLINE( 371)		this->_hx___commands->drawEllipse(x,y,width,height);
HXLINE( 373)		this->set___dirty(true);
            	}


HX_DEFINE_DYNAMIC_FUNC4(Graphics_obj,drawEllipse,(void))

void Graphics_obj::drawGraphicsData( ::openfl::_Vector::ObjectVector graphicsData){
            	HX_STACKFRAME(&_hx_pos_043516e11ce5c7d5_378_drawGraphicsData)
HXLINE( 380)		 ::openfl::display::GraphicsSolidFill fill;
HXLINE( 381)		 ::openfl::display::GraphicsBitmapFill bitmapFill;
HXLINE( 382)		 ::openfl::display::GraphicsGradientFill gradientFill;
HXLINE( 383)		 ::openfl::display::GraphicsShaderFill shaderFill;
HXLINE( 384)		 ::openfl::display::GraphicsStroke stroke;
HXLINE( 385)		 ::openfl::display::GraphicsPath path;
HXLINE( 386)		 ::openfl::display::GraphicsTrianglePath trianglePath;
HXLINE( 387)		 ::openfl::display::GraphicsQuadPath quadPath;
HXLINE( 389)		{
HXLINE( 389)			int _g = (int)0;
HXDLIN( 389)			while((_g < graphicsData->get_length())){
HXLINE( 389)				::Dynamic graphics = graphicsData->get(_g);
HXDLIN( 389)				_g = (_g + (int)1);
HXLINE( 391)				{
HXLINE( 391)					 ::openfl::display::GraphicsDataType _g1 = graphics->__Field(HX_("__graphicsDataType",0f,5d,4d,46),hx::paccDynamic);
HXDLIN( 391)					 ::openfl::display::GraphicsDataType _hx_switch_0 = _g1;
            					if (  (_hx_switch_0==::openfl::display::GraphicsDataType_obj::STROKE_dyn()) ){
HXLINE( 415)						stroke = ( ( ::openfl::display::GraphicsStroke)(graphics) );
HXLINE( 417)						if (hx::IsNotNull( stroke->fill )) {
HXLINE( 419)							 ::Dynamic thickness = stroke->thickness;
HXLINE( 421)							if (::Math_obj::isNaN(thickness)) {
HXLINE( 423)								thickness = null();
            							}
HXLINE( 427)							{
HXLINE( 427)								 ::openfl::display::GraphicsFillType _g11 = stroke->fill->__Field(HX_("__graphicsFillType",e8,75,eb,27),hx::paccDynamic);
HXDLIN( 427)								 ::openfl::display::GraphicsFillType _hx_switch_1 = _g11;
            								if (  (_hx_switch_1==::openfl::display::GraphicsFillType_obj::SOLID_FILL_dyn()) ){
HXLINE( 431)									fill = ( ( ::openfl::display::GraphicsSolidFill)(stroke->fill) );
HXLINE( 432)									this->lineStyle(thickness,fill->color,fill->alpha,stroke->pixelHinting,stroke->scaleMode,stroke->caps,stroke->joints,stroke->miterLimit);
HXLINE( 429)									goto _hx_goto_18;
            								}
            								if (  (_hx_switch_1==::openfl::display::GraphicsFillType_obj::GRADIENT_FILL_dyn()) ){
HXLINE( 442)									gradientFill = ( ( ::openfl::display::GraphicsGradientFill)(stroke->fill) );
HXLINE( 443)									this->lineStyle(thickness,(int)0,(int)1,stroke->pixelHinting,stroke->scaleMode,stroke->caps,stroke->joints,stroke->miterLimit);
HXLINE( 444)									this->lineGradientStyle(gradientFill->type,gradientFill->colors,gradientFill->alphas,gradientFill->ratios,gradientFill->matrix,gradientFill->spreadMethod,gradientFill->interpolationMethod,gradientFill->focalPointRatio);
HXLINE( 440)									goto _hx_goto_18;
            								}
            								if (  (_hx_switch_1==::openfl::display::GraphicsFillType_obj::BITMAP_FILL_dyn()) ){
HXLINE( 436)									bitmapFill = ( ( ::openfl::display::GraphicsBitmapFill)(stroke->fill) );
HXLINE( 437)									this->lineStyle(thickness,(int)0,(int)1,stroke->pixelHinting,stroke->scaleMode,stroke->caps,stroke->joints,stroke->miterLimit);
HXLINE( 438)									this->lineBitmapStyle(bitmapFill->bitmapData,bitmapFill->matrix,bitmapFill->repeat,bitmapFill->smooth);
HXLINE( 434)									goto _hx_goto_18;
            								}
            								/* default */{
            								}
            								_hx_goto_18:;
            							}
            						}
            						else {
HXLINE( 452)							this->lineStyle(null(),null(),null(),null(),null(),null(),null(),null());
            						}
HXLINE( 413)						goto _hx_goto_17;
            					}
            					if (  (_hx_switch_0==::openfl::display::GraphicsDataType_obj::SOLID_dyn()) ){
HXLINE( 395)						fill = ( ( ::openfl::display::GraphicsSolidFill)(graphics) );
HXLINE( 396)						this->beginFill(fill->color,fill->alpha);
HXLINE( 393)						goto _hx_goto_17;
            					}
            					if (  (_hx_switch_0==::openfl::display::GraphicsDataType_obj::GRADIENT_dyn()) ){
HXLINE( 405)						gradientFill = ( ( ::openfl::display::GraphicsGradientFill)(graphics) );
HXLINE( 406)						this->beginGradientFill(gradientFill->type,gradientFill->colors,gradientFill->alphas,gradientFill->ratios,gradientFill->matrix,gradientFill->spreadMethod,gradientFill->interpolationMethod,gradientFill->focalPointRatio);
HXLINE( 403)						goto _hx_goto_17;
            					}
            					if (  (_hx_switch_0==::openfl::display::GraphicsDataType_obj::PATH_dyn()) ){
HXLINE( 458)						path = ( ( ::openfl::display::GraphicsPath)(graphics) );
HXLINE( 459)						this->drawPath(path->commands,path->data,path->winding);
HXLINE( 456)						goto _hx_goto_17;
            					}
            					if (  (_hx_switch_0==::openfl::display::GraphicsDataType_obj::BITMAP_dyn()) ){
HXLINE( 400)						bitmapFill = ( ( ::openfl::display::GraphicsBitmapFill)(graphics) );
HXLINE( 401)						this->beginBitmapFill(bitmapFill->bitmapData,bitmapFill->matrix,bitmapFill->repeat,bitmapFill->smooth);
HXLINE( 398)						goto _hx_goto_17;
            					}
            					if (  (_hx_switch_0==::openfl::display::GraphicsDataType_obj::END_dyn()) ){
HXLINE( 468)						this->endFill();
HXDLIN( 468)						goto _hx_goto_17;
            					}
            					if (  (_hx_switch_0==::openfl::display::GraphicsDataType_obj::QUAD_PATH_dyn()) ){
HXLINE( 472)						quadPath = ( ( ::openfl::display::GraphicsQuadPath)(graphics) );
HXLINE( 473)						this->drawQuads(quadPath->rects,quadPath->indices,quadPath->transforms);
HXLINE( 470)						goto _hx_goto_17;
            					}
            					if (  (_hx_switch_0==::openfl::display::GraphicsDataType_obj::TRIANGLE_PATH_dyn()) ){
HXLINE( 463)						trianglePath = ( ( ::openfl::display::GraphicsTrianglePath)(graphics) );
HXLINE( 464)						this->drawTriangles(trianglePath->vertices,trianglePath->indices,trianglePath->uvtData,trianglePath->culling);
HXLINE( 461)						goto _hx_goto_17;
            					}
            					if (  (_hx_switch_0==::openfl::display::GraphicsDataType_obj::SHADER_dyn()) ){
HXLINE( 410)						shaderFill = ( ( ::openfl::display::GraphicsShaderFill)(graphics) );
HXLINE( 411)						this->beginShaderFill(shaderFill->shader,shaderFill->matrix);
HXLINE( 408)						goto _hx_goto_17;
            					}
            					_hx_goto_17:;
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Graphics_obj,drawGraphicsData,(void))

void Graphics_obj::drawPath( ::openfl::_Vector::IntVector commands, ::openfl::_Vector::FloatVector data, ::Dynamic __o_winding){
 ::Dynamic winding = __o_winding.Default(0);
            	HX_STACKFRAME(&_hx_pos_043516e11ce5c7d5_482_drawPath)
HXLINE( 484)		int dataIndex = (int)0;
HXLINE( 486)		if (hx::IsEq( winding,(int)1 )) {
HXLINE( 486)			this->_hx___commands->windingNonZero();
            		}
HXLINE( 488)		{
HXLINE( 488)			int _g = (int)0;
HXDLIN( 488)			while((_g < commands->get_length())){
HXLINE( 488)				int command = commands->get(_g);
HXDLIN( 488)				_g = (_g + (int)1);
HXLINE( 490)				switch((int)(command)){
            					case (int)1: {
HXLINE( 494)						Float _hx_tmp = data->get(dataIndex);
HXDLIN( 494)						this->moveTo(_hx_tmp,data->get((dataIndex + (int)1)));
HXLINE( 495)						dataIndex = (dataIndex + (int)2);
            					}
            					break;
            					case (int)2: {
HXLINE( 499)						Float _hx_tmp1 = data->get(dataIndex);
HXDLIN( 499)						this->lineTo(_hx_tmp1,data->get((dataIndex + (int)1)));
HXLINE( 500)						dataIndex = (dataIndex + (int)2);
            					}
            					break;
            					case (int)3: {
HXLINE( 514)						Float _hx_tmp2 = data->get(dataIndex);
HXDLIN( 514)						Float _hx_tmp3 = data->get((dataIndex + (int)1));
HXDLIN( 514)						Float _hx_tmp4 = data->get((dataIndex + (int)2));
HXDLIN( 514)						this->curveTo(_hx_tmp2,_hx_tmp3,_hx_tmp4,data->get((dataIndex + (int)3)));
HXLINE( 515)						dataIndex = (dataIndex + (int)4);
            					}
            					break;
            					case (int)4: {
HXLINE( 504)						Float _hx_tmp5 = data->get((dataIndex + (int)2));
HXDLIN( 504)						this->moveTo(_hx_tmp5,data->get((dataIndex + (int)3)));
HXDLIN( 504)						goto _hx_goto_20;
            					}
            					break;
            					case (int)5: {
HXLINE( 509)						Float _hx_tmp6 = data->get((dataIndex + (int)2));
HXDLIN( 509)						this->lineTo(_hx_tmp6,data->get((dataIndex + (int)3)));
HXDLIN( 509)						goto _hx_goto_20;
            					}
            					break;
            					case (int)6: {
HXLINE( 519)						Float _hx_tmp7 = data->get(dataIndex);
HXDLIN( 519)						Float _hx_tmp8 = data->get((dataIndex + (int)1));
HXDLIN( 519)						Float _hx_tmp9 = data->get((dataIndex + (int)2));
HXDLIN( 519)						Float _hx_tmp10 = data->get((dataIndex + (int)3));
HXDLIN( 519)						Float _hx_tmp11 = data->get((dataIndex + (int)4));
HXDLIN( 519)						this->cubicCurveTo(_hx_tmp7,_hx_tmp8,_hx_tmp9,_hx_tmp10,_hx_tmp11,data->get((dataIndex + (int)5)));
HXLINE( 520)						dataIndex = (dataIndex + (int)6);
            					}
            					break;
            					default:{
            					}
            				}
            			}
            			_hx_goto_20:;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(Graphics_obj,drawPath,(void))

void Graphics_obj::drawQuads( ::openfl::_Vector::FloatVector rects, ::openfl::_Vector::IntVector indices, ::openfl::_Vector::FloatVector transforms){
            	HX_STACKFRAME(&_hx_pos_043516e11ce5c7d5_534_drawQuads)
HXLINE( 536)		if (hx::IsNull( rects )) {
HXLINE( 536)			return;
            		}
HXLINE( 538)		bool hasIndices = hx::IsNotNull( indices );
HXLINE( 539)		bool transformABCD = false;
HXDLIN( 539)		bool transformXY = false;
HXLINE( 541)		int length;
HXDLIN( 541)		if (hasIndices) {
HXLINE( 541)			length = indices->get_length();
            		}
            		else {
HXLINE( 541)			length = ::Math_obj::floor(((Float)rects->get_length() / (Float)(int)4));
            		}
HXLINE( 542)		if ((length == (int)0)) {
HXLINE( 542)			return;
            		}
HXLINE( 544)		if (hx::IsNotNull( transforms )) {
HXLINE( 546)			int _hx_tmp = transforms->get_length();
HXDLIN( 546)			if ((_hx_tmp >= (length * (int)6))) {
HXLINE( 548)				transformABCD = true;
HXLINE( 549)				transformXY = true;
            			}
            			else {
HXLINE( 551)				int _hx_tmp1 = transforms->get_length();
HXDLIN( 551)				if ((_hx_tmp1 >= (length * (int)4))) {
HXLINE( 553)					transformABCD = true;
            				}
            				else {
HXLINE( 555)					int _hx_tmp2 = transforms->get_length();
HXDLIN( 555)					if ((_hx_tmp2 >= (length * (int)2))) {
HXLINE( 557)						transformXY = true;
            					}
            				}
            			}
            		}
HXLINE( 563)		 ::openfl::geom::Rectangle tileRect = ::openfl::geom::Rectangle_obj::_hx___pool->get();
HXLINE( 564)		 ::openfl::geom::Matrix tileTransform = ::openfl::geom::Matrix_obj::_hx___pool->get();
HXLINE( 566)		Float minX = ::Math_obj::POSITIVE_INFINITY;
HXLINE( 567)		Float minY = ::Math_obj::POSITIVE_INFINITY;
HXLINE( 568)		Float maxX = ::Math_obj::NEGATIVE_INFINITY;
HXLINE( 569)		Float maxY = ::Math_obj::NEGATIVE_INFINITY;
HXLINE( 571)		int ri;
HXDLIN( 571)		int ti;
HXLINE( 573)		{
HXLINE( 573)			int _g1 = (int)0;
HXDLIN( 573)			int _g = length;
HXDLIN( 573)			while((_g1 < _g)){
HXLINE( 573)				_g1 = (_g1 + (int)1);
HXDLIN( 573)				int i = (_g1 - (int)1);
HXLINE( 575)				if (hasIndices) {
HXLINE( 575)					ri = (indices->get(i) * (int)4);
            				}
            				else {
HXLINE( 575)					ri = (i * (int)4);
            				}
HXLINE( 576)				if ((ri < (int)0)) {
HXLINE( 576)					continue;
            				}
HXLINE( 577)				Float _hx_tmp3 = rects->get(ri);
HXDLIN( 577)				Float _hx_tmp4 = rects->get((ri + (int)1));
HXDLIN( 577)				Float _hx_tmp5 = rects->get((ri + (int)2));
HXDLIN( 577)				tileRect->setTo(_hx_tmp3,_hx_tmp4,_hx_tmp5,rects->get((ri + (int)3)));
HXLINE( 579)				bool _hx_tmp6;
HXDLIN( 579)				if (!((tileRect->width <= (int)0))) {
HXLINE( 579)					_hx_tmp6 = (tileRect->height <= (int)0);
            				}
            				else {
HXLINE( 579)					_hx_tmp6 = true;
            				}
HXDLIN( 579)				if (_hx_tmp6) {
HXLINE( 581)					continue;
            				}
HXLINE( 585)				bool _hx_tmp7;
HXDLIN( 585)				if (transformABCD) {
HXLINE( 585)					_hx_tmp7 = transformXY;
            				}
            				else {
HXLINE( 585)					_hx_tmp7 = false;
            				}
HXDLIN( 585)				if (_hx_tmp7) {
HXLINE( 587)					ti = (i * (int)6);
HXLINE( 588)					Float _hx_tmp8 = transforms->get(ti);
HXDLIN( 588)					Float _hx_tmp9 = transforms->get((ti + (int)1));
HXDLIN( 588)					Float _hx_tmp10 = transforms->get((ti + (int)2));
HXDLIN( 588)					Float _hx_tmp11 = transforms->get((ti + (int)3));
HXDLIN( 588)					Float _hx_tmp12 = transforms->get((ti + (int)4));
HXDLIN( 588)					tileTransform->setTo(_hx_tmp8,_hx_tmp9,_hx_tmp10,_hx_tmp11,_hx_tmp12,transforms->get((ti + (int)5)));
            				}
            				else {
HXLINE( 590)					if (transformABCD) {
HXLINE( 592)						ti = (i * (int)4);
HXLINE( 593)						Float _hx_tmp13 = transforms->get(ti);
HXDLIN( 593)						Float _hx_tmp14 = transforms->get((ti + (int)1));
HXDLIN( 593)						Float _hx_tmp15 = transforms->get((ti + (int)2));
HXDLIN( 593)						tileTransform->setTo(_hx_tmp13,_hx_tmp14,_hx_tmp15,transforms->get((ti + (int)3)),tileRect->x,tileRect->y);
            					}
            					else {
HXLINE( 595)						if (transformXY) {
HXLINE( 597)							ti = (i * (int)2);
HXLINE( 598)							tileTransform->tx = transforms->get(ti);
HXLINE( 599)							tileTransform->ty = transforms->get((ti + (int)1));
            						}
            						else {
HXLINE( 603)							tileTransform->tx = tileRect->x;
HXLINE( 604)							tileTransform->ty = tileRect->y;
            						}
            					}
            				}
HXLINE( 608)				tileRect->_hx___transform(tileRect,tileTransform);
HXLINE( 610)				if ((minX > tileRect->x)) {
HXLINE( 610)					minX = tileRect->x;
            				}
HXLINE( 611)				if ((minY > tileRect->y)) {
HXLINE( 611)					minY = tileRect->y;
            				}
HXLINE( 612)				if ((maxX < tileRect->get_right())) {
HXLINE( 612)					maxX = tileRect->get_right();
            				}
HXLINE( 613)				if ((maxY < tileRect->get_bottom())) {
HXLINE( 613)					maxY = tileRect->get_bottom();
            				}
            			}
            		}
HXLINE( 617)		this->_hx___inflateBounds(minX,minY);
HXLINE( 618)		this->_hx___inflateBounds(maxX,maxY);
HXLINE( 620)		this->_hx___commands->drawQuads(rects,indices,transforms);
HXLINE( 622)		this->set___dirty(true);
HXLINE( 623)		this->_hx___visible = true;
HXLINE( 625)		::openfl::geom::Rectangle_obj::_hx___pool->release(tileRect);
HXLINE( 626)		::openfl::geom::Matrix_obj::_hx___pool->release(tileTransform);
            	}


HX_DEFINE_DYNAMIC_FUNC3(Graphics_obj,drawQuads,(void))

void Graphics_obj::drawRect(Float x,Float y,Float width,Float height){
            	HX_STACKFRAME(&_hx_pos_043516e11ce5c7d5_631_drawRect)
HXLINE( 633)		bool _hx_tmp;
HXDLIN( 633)		if ((width == (int)0)) {
HXLINE( 633)			_hx_tmp = (height == (int)0);
            		}
            		else {
HXLINE( 633)			_hx_tmp = false;
            		}
HXDLIN( 633)		if (_hx_tmp) {
HXLINE( 633)			return;
            		}
HXLINE( 635)		int xSign;
HXDLIN( 635)		if ((width < (int)0)) {
HXLINE( 635)			xSign = (int)-1;
            		}
            		else {
HXLINE( 635)			xSign = (int)1;
            		}
HXLINE( 636)		int ySign;
HXDLIN( 636)		if ((height < (int)0)) {
HXLINE( 636)			ySign = (int)-1;
            		}
            		else {
HXLINE( 636)			ySign = (int)1;
            		}
HXLINE( 638)		Float _hx_tmp1 = (x - (this->_hx___strokePadding * xSign));
HXDLIN( 638)		this->_hx___inflateBounds(_hx_tmp1,(y - (this->_hx___strokePadding * ySign)));
HXLINE( 639)		Float _hx_tmp2 = ((x + width) + (this->_hx___strokePadding * xSign));
HXDLIN( 639)		this->_hx___inflateBounds(_hx_tmp2,((y + height) + (this->_hx___strokePadding * ySign)));
HXLINE( 641)		this->_hx___commands->drawRect(x,y,width,height);
HXLINE( 643)		this->set___dirty(true);
            	}


HX_DEFINE_DYNAMIC_FUNC4(Graphics_obj,drawRect,(void))

void Graphics_obj::drawRoundRect(Float x,Float y,Float width,Float height,Float ellipseWidth, ::Dynamic ellipseHeight){
            	HX_STACKFRAME(&_hx_pos_043516e11ce5c7d5_648_drawRoundRect)
HXLINE( 650)		bool _hx_tmp;
HXDLIN( 650)		if ((width == (int)0)) {
HXLINE( 650)			_hx_tmp = (height == (int)0);
            		}
            		else {
HXLINE( 650)			_hx_tmp = false;
            		}
HXDLIN( 650)		if (_hx_tmp) {
HXLINE( 650)			return;
            		}
HXLINE( 652)		int xSign;
HXDLIN( 652)		if ((width < (int)0)) {
HXLINE( 652)			xSign = (int)-1;
            		}
            		else {
HXLINE( 652)			xSign = (int)1;
            		}
HXLINE( 653)		int ySign;
HXDLIN( 653)		if ((height < (int)0)) {
HXLINE( 653)			ySign = (int)-1;
            		}
            		else {
HXLINE( 653)			ySign = (int)1;
            		}
HXLINE( 655)		Float _hx_tmp1 = (x - (this->_hx___strokePadding * xSign));
HXDLIN( 655)		this->_hx___inflateBounds(_hx_tmp1,(y - (this->_hx___strokePadding * ySign)));
HXLINE( 656)		Float _hx_tmp2 = ((x + width) + (this->_hx___strokePadding * xSign));
HXDLIN( 656)		this->_hx___inflateBounds(_hx_tmp2,((y + height) + (this->_hx___strokePadding * ySign)));
HXLINE( 658)		this->_hx___commands->drawRoundRect(x,y,width,height,ellipseWidth,ellipseHeight);
HXLINE( 660)		this->set___dirty(true);
            	}


HX_DEFINE_DYNAMIC_FUNC6(Graphics_obj,drawRoundRect,(void))

void Graphics_obj::drawRoundRectComplex(Float x,Float y,Float width,Float height,Float topLeftRadius,Float topRightRadius,Float bottomLeftRadius,Float bottomRightRadius){
            	HX_STACKFRAME(&_hx_pos_043516e11ce5c7d5_665_drawRoundRectComplex)
HXLINE( 667)		bool _hx_tmp;
HXDLIN( 667)		if (!((width <= (int)0))) {
HXLINE( 667)			_hx_tmp = (height <= (int)0);
            		}
            		else {
HXLINE( 667)			_hx_tmp = true;
            		}
HXDLIN( 667)		if (_hx_tmp) {
HXLINE( 667)			return;
            		}
HXLINE( 669)		Float _hx_tmp1 = (x - this->_hx___strokePadding);
HXDLIN( 669)		this->_hx___inflateBounds(_hx_tmp1,(y - this->_hx___strokePadding));
HXLINE( 670)		Float _hx_tmp2 = ((x + width) + this->_hx___strokePadding);
HXDLIN( 670)		this->_hx___inflateBounds(_hx_tmp2,((y + height) + this->_hx___strokePadding));
HXLINE( 672)		Float xw = (x + width);
HXLINE( 673)		Float yh = (y + height);
HXLINE( 674)		Float minSize;
HXDLIN( 674)		if ((width < height)) {
HXLINE( 674)			minSize = (width * (int)2);
            		}
            		else {
HXLINE( 674)			minSize = (height * (int)2);
            		}
HXLINE( 675)		if ((topLeftRadius < minSize)) {
HXLINE( 675)			topLeftRadius = topLeftRadius;
            		}
            		else {
HXLINE( 675)			topLeftRadius = minSize;
            		}
HXLINE( 676)		if ((topRightRadius < minSize)) {
HXLINE( 676)			topRightRadius = topRightRadius;
            		}
            		else {
HXLINE( 676)			topRightRadius = minSize;
            		}
HXLINE( 677)		if ((bottomLeftRadius < minSize)) {
HXLINE( 677)			bottomLeftRadius = bottomLeftRadius;
            		}
            		else {
HXLINE( 677)			bottomLeftRadius = minSize;
            		}
HXLINE( 678)		if ((bottomRightRadius < minSize)) {
HXLINE( 678)			bottomRightRadius = bottomRightRadius;
            		}
            		else {
HXLINE( 678)			bottomRightRadius = minSize;
            		}
HXLINE( 680)		Float anchor = ((int)1 - ::Math_obj::sin(((int)45 * ((Float)::Math_obj::PI / (Float)(int)180))));
HXLINE( 681)		Float control = ((int)1 - ::Math_obj::tan((((Float)22.5) * ((Float)::Math_obj::PI / (Float)(int)180))));
HXLINE( 683)		Float a = (bottomRightRadius * anchor);
HXLINE( 684)		Float s = (bottomRightRadius * control);
HXLINE( 685)		this->moveTo(xw,(yh - bottomRightRadius));
HXLINE( 686)		this->curveTo(xw,(yh - s),(xw - a),(yh - a));
HXLINE( 687)		this->curveTo((xw - s),yh,(xw - bottomRightRadius),yh);
HXLINE( 689)		a = (bottomLeftRadius * anchor);
HXLINE( 690)		s = (bottomLeftRadius * control);
HXLINE( 691)		this->lineTo((x + bottomLeftRadius),yh);
HXLINE( 692)		this->curveTo((x + s),yh,(x + a),(yh - a));
HXLINE( 693)		this->curveTo(x,(yh - s),x,(yh - bottomLeftRadius));
HXLINE( 695)		a = (topLeftRadius * anchor);
HXLINE( 696)		s = (topLeftRadius * control);
HXLINE( 697)		this->lineTo(x,(y + topLeftRadius));
HXLINE( 698)		this->curveTo(x,(y + s),(x + a),(y + a));
HXLINE( 699)		this->curveTo((x + s),y,(x + topLeftRadius),y);
HXLINE( 701)		a = (topRightRadius * anchor);
HXLINE( 702)		s = (topRightRadius * control);
HXLINE( 703)		this->lineTo((xw - topRightRadius),y);
HXLINE( 704)		this->curveTo((xw - s),y,(xw - a),(y + a));
HXLINE( 705)		this->curveTo(xw,(y + s),xw,(y + topRightRadius));
HXLINE( 706)		this->lineTo(xw,(yh - bottomRightRadius));
HXLINE( 708)		this->set___dirty(true);
            	}


HX_DEFINE_DYNAMIC_FUNC8(Graphics_obj,drawRoundRectComplex,(void))

void Graphics_obj::drawTriangles( ::openfl::_Vector::FloatVector vertices, ::openfl::_Vector::IntVector indices, ::openfl::_Vector::FloatVector uvtData, ::Dynamic __o_culling){
 ::Dynamic culling = __o_culling.Default(1);
            	HX_GC_STACKFRAME(&_hx_pos_043516e11ce5c7d5_713_drawTriangles)
HXLINE( 715)		bool _hx_tmp;
HXDLIN( 715)		if (hx::IsNotNull( vertices )) {
HXLINE( 715)			_hx_tmp = (vertices->get_length() == (int)0);
            		}
            		else {
HXLINE( 715)			_hx_tmp = true;
            		}
HXDLIN( 715)		if (_hx_tmp) {
HXLINE( 715)			return;
            		}
HXLINE( 717)		int vertLength = ::Std_obj::_hx_int(((Float)vertices->get_length() / (Float)(int)2));
HXLINE( 719)		if (hx::IsNull( indices )) {
HXLINE( 723)			if ((hx::Mod(vertLength,(int)3) != (int)0)) {
HXLINE( 725)				HX_STACK_DO_THROW( ::openfl::errors::ArgumentError_obj::__alloc( HX_CTX ,HX_("Not enough vertices to close a triangle.",fe,c6,58,0d)));
            			}
HXLINE( 729)			int length = null();
HXDLIN( 729)			bool fixed = null();
HXDLIN( 729)			indices =  ::openfl::_Vector::IntVector_obj::__alloc( HX_CTX ,length,fixed,null());
HXLINE( 731)			{
HXLINE( 731)				int _g1 = (int)0;
HXDLIN( 731)				int _g = vertLength;
HXDLIN( 731)				while((_g1 < _g)){
HXLINE( 731)					_g1 = (_g1 + (int)1);
HXDLIN( 731)					int i = (_g1 - (int)1);
HXLINE( 733)					indices->push(i);
            				}
            			}
            		}
HXLINE( 739)		if (hx::IsNull( culling )) {
HXLINE( 741)			culling = (int)1;
            		}
HXLINE( 745)		Float x;
HXDLIN( 745)		Float y;
HXLINE( 746)		Float minX = ::Math_obj::POSITIVE_INFINITY;
HXLINE( 747)		Float minY = ::Math_obj::POSITIVE_INFINITY;
HXLINE( 748)		Float maxX = ::Math_obj::NEGATIVE_INFINITY;
HXLINE( 749)		Float maxY = ::Math_obj::NEGATIVE_INFINITY;
HXLINE( 751)		{
HXLINE( 751)			int _g11 = (int)0;
HXDLIN( 751)			int _g2 = vertLength;
HXDLIN( 751)			while((_g11 < _g2)){
HXLINE( 751)				_g11 = (_g11 + (int)1);
HXDLIN( 751)				int i1 = (_g11 - (int)1);
HXLINE( 753)				x = vertices->get((i1 * (int)2));
HXLINE( 754)				y = vertices->get(((i1 * (int)2) + (int)1));
HXLINE( 756)				if ((minX > x)) {
HXLINE( 756)					minX = x;
            				}
HXLINE( 757)				if ((minY > y)) {
HXLINE( 757)					minY = y;
            				}
HXLINE( 758)				if ((maxX < x)) {
HXLINE( 758)					maxX = x;
            				}
HXLINE( 759)				if ((maxY < y)) {
HXLINE( 759)					maxY = y;
            				}
            			}
            		}
HXLINE( 763)		this->_hx___inflateBounds(minX,minY);
HXLINE( 764)		this->_hx___inflateBounds(maxX,maxY);
HXLINE( 766)		this->_hx___commands->drawTriangles(vertices,indices,uvtData,culling);
HXLINE( 768)		this->set___dirty(true);
HXLINE( 769)		this->_hx___visible = true;
            	}


HX_DEFINE_DYNAMIC_FUNC4(Graphics_obj,drawTriangles,(void))

void Graphics_obj::endFill(){
            	HX_STACKFRAME(&_hx_pos_043516e11ce5c7d5_776_endFill)
HXDLIN( 776)		this->_hx___commands->endFill();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Graphics_obj,endFill,(void))

void Graphics_obj::lineBitmapStyle( ::openfl::display::BitmapData bitmap, ::openfl::geom::Matrix matrix,hx::Null< bool >  __o_repeat,hx::Null< bool >  __o_smooth){
bool repeat = __o_repeat.Default(true);
bool smooth = __o_smooth.Default(false);
            	HX_STACKFRAME(&_hx_pos_043516e11ce5c7d5_783_lineBitmapStyle)
HXDLIN( 783)		 ::openfl::_internal::renderer::DrawCommandBuffer _hx_tmp = this->_hx___commands;
HXDLIN( 783)		 ::openfl::geom::Matrix _hx_tmp1;
HXDLIN( 783)		if (hx::IsNotNull( matrix )) {
HXDLIN( 783)			_hx_tmp1 = matrix->clone();
            		}
            		else {
HXDLIN( 783)			_hx_tmp1 = null();
            		}
HXDLIN( 783)		_hx_tmp->lineBitmapStyle(bitmap,_hx_tmp1,repeat,smooth);
            	}


HX_DEFINE_DYNAMIC_FUNC4(Graphics_obj,lineBitmapStyle,(void))

void Graphics_obj::lineGradientStyle( ::Dynamic type,::Array< int > colors,::Array< Float > alphas,::Array< int > ratios, ::openfl::geom::Matrix matrix, ::Dynamic __o_spreadMethod, ::Dynamic __o_interpolationMethod,hx::Null< Float >  __o_focalPointRatio){
 ::Dynamic spreadMethod = __o_spreadMethod.Default(0);
 ::Dynamic interpolationMethod = __o_interpolationMethod.Default(1);
Float focalPointRatio = __o_focalPointRatio.Default(0);
            	HX_STACKFRAME(&_hx_pos_043516e11ce5c7d5_790_lineGradientStyle)
HXDLIN( 790)		this->_hx___commands->lineGradientStyle(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio);
            	}


HX_DEFINE_DYNAMIC_FUNC8(Graphics_obj,lineGradientStyle,(void))

void Graphics_obj::lineStyle( ::Dynamic thickness,hx::Null< int >  __o_color,hx::Null< Float >  __o_alpha,hx::Null< bool >  __o_pixelHinting, ::Dynamic __o_scaleMode, ::Dynamic caps, ::Dynamic joints,hx::Null< Float >  __o_miterLimit){
int color = __o_color.Default(0);
Float alpha = __o_alpha.Default(1);
bool pixelHinting = __o_pixelHinting.Default(false);
 ::Dynamic scaleMode = __o_scaleMode.Default(2);
Float miterLimit = __o_miterLimit.Default(3);
            	HX_STACKFRAME(&_hx_pos_043516e11ce5c7d5_795_lineStyle)
HXLINE( 797)		if (hx::IsNotNull( thickness )) {
HXLINE( 799)			if (hx::IsEq( joints,(int)1 )) {
HXLINE( 801)				if (hx::IsGreater( thickness,this->_hx___strokePadding )) {
HXLINE( 801)					this->_hx___strokePadding = thickness;
            				}
            			}
            			else {
HXLINE( 805)				if ((((Float)thickness / (Float)(int)2) > this->_hx___strokePadding)) {
HXLINE( 805)					this->_hx___strokePadding = ((Float)thickness / (Float)(int)2);
            				}
            			}
            		}
HXLINE( 811)		this->_hx___commands->lineStyle(thickness,color,alpha,pixelHinting,scaleMode,caps,joints,miterLimit);
HXLINE( 813)		if (hx::IsNotNull( thickness )) {
HXLINE( 813)			this->_hx___visible = true;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC8(Graphics_obj,lineStyle,(void))

void Graphics_obj::lineTo(Float x,Float y){
            	HX_STACKFRAME(&_hx_pos_043516e11ce5c7d5_818_lineTo)
HXLINE( 820)		bool _hx_tmp;
HXDLIN( 820)		if (!(!(::Math_obj::isFinite(x)))) {
HXLINE( 820)			_hx_tmp = !(::Math_obj::isFinite(y));
            		}
            		else {
HXLINE( 820)			_hx_tmp = true;
            		}
HXDLIN( 820)		if (_hx_tmp) {
HXLINE( 822)			return;
            		}
HXLINE( 828)		Float _hx_tmp1 = (this->_hx___positionX - this->_hx___strokePadding);
HXDLIN( 828)		this->_hx___inflateBounds(_hx_tmp1,(this->_hx___positionY - this->_hx___strokePadding));
HXLINE( 829)		Float _hx_tmp2 = (this->_hx___positionX + this->_hx___strokePadding);
HXDLIN( 829)		this->_hx___inflateBounds(_hx_tmp2,(this->_hx___positionY + this->_hx___strokePadding));
HXLINE( 831)		this->_hx___positionX = x;
HXLINE( 832)		this->_hx___positionY = y;
HXLINE( 834)		Float _hx_tmp3 = (this->_hx___positionX - this->_hx___strokePadding);
HXDLIN( 834)		this->_hx___inflateBounds(_hx_tmp3,(this->_hx___positionY - this->_hx___strokePadding));
HXLINE( 835)		Float _hx_tmp4 = this->_hx___positionX;
HXDLIN( 835)		Float _hx_tmp5 = (_hx_tmp4 + (this->_hx___strokePadding * (int)2));
HXDLIN( 835)		this->_hx___inflateBounds(_hx_tmp5,(this->_hx___positionY + this->_hx___strokePadding));
HXLINE( 837)		this->_hx___commands->lineTo(x,y);
HXLINE( 839)		this->set___dirty(true);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Graphics_obj,lineTo,(void))

void Graphics_obj::moveTo(Float x,Float y){
            	HX_STACKFRAME(&_hx_pos_043516e11ce5c7d5_844_moveTo)
HXLINE( 846)		this->_hx___positionX = x;
HXLINE( 847)		this->_hx___positionY = y;
HXLINE( 849)		this->_hx___commands->moveTo(x,y);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Graphics_obj,moveTo,(void))

 ::openfl::_Vector::ObjectVector Graphics_obj::readGraphicsData(hx::Null< bool >  __o_recurse){
bool recurse = __o_recurse.Default(true);
            	HX_GC_STACKFRAME(&_hx_pos_043516e11ce5c7d5_854_readGraphicsData)
HXLINE( 856)		int length = null();
HXDLIN( 856)		bool fixed = null();
HXDLIN( 856)		 ::openfl::_Vector::ObjectVector graphicsData =  ::openfl::_Vector::ObjectVector_obj::__alloc( HX_CTX ,length,fixed,null(),true);
HXLINE( 857)		this->_hx___owner->_hx___readGraphicsData(graphicsData,recurse);
HXLINE( 858)		return graphicsData;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Graphics_obj,readGraphicsData,return )

Float Graphics_obj::_hx___calculateBezierCubicPoint(Float t,Float p1,Float p2,Float p3,Float p4){
            	HX_STACKFRAME(&_hx_pos_043516e11ce5c7d5_863___calculateBezierCubicPoint)
HXLINE( 865)		Float iT = ((int)1 - t);
HXLINE( 866)		return ((((p1 * ((iT * iT) * iT)) + ((((int)3 * p2) * t) * (iT * iT))) + ((((int)3 * p3) * iT) * (t * t))) + (p4 * ((t * t) * t)));
            	}


HX_DEFINE_DYNAMIC_FUNC5(Graphics_obj,_hx___calculateBezierCubicPoint,return )

Float Graphics_obj::_hx___calculateBezierQuadPoint(Float t,Float p1,Float p2,Float p3){
            	HX_STACKFRAME(&_hx_pos_043516e11ce5c7d5_871___calculateBezierQuadPoint)
HXLINE( 873)		Float iT = ((int)1 - t);
HXLINE( 874)		return ((((iT * iT) * p1) + ((((int)2 * iT) * t) * p2)) + ((t * t) * p3));
            	}


HX_DEFINE_DYNAMIC_FUNC4(Graphics_obj,_hx___calculateBezierQuadPoint,return )

void Graphics_obj::_hx___cleanup(){
            	HX_STACKFRAME(&_hx_pos_043516e11ce5c7d5_879___cleanup)
HXLINE( 881)		if (hx::IsNotNull( this->_hx___bounds )) {
HXLINE( 883)			this->set___dirty(true);
HXLINE( 884)			this->_hx___transformDirty = true;
            		}
HXLINE( 888)		this->_hx___bitmap = null();
HXLINE( 894)		this->_hx___cairo = null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Graphics_obj,_hx___cleanup,(void))

void Graphics_obj::_hx___getBounds( ::openfl::geom::Rectangle rect, ::openfl::geom::Matrix matrix){
            	HX_STACKFRAME(&_hx_pos_043516e11ce5c7d5_900___getBounds)
HXLINE( 902)		if (hx::IsNull( this->_hx___bounds )) {
HXLINE( 902)			return;
            		}
HXLINE( 904)		 ::openfl::geom::Rectangle bounds = ::openfl::geom::Rectangle_obj::_hx___pool->get();
HXLINE( 905)		this->_hx___bounds->_hx___transform(bounds,matrix);
HXLINE( 906)		rect->_hx___expand(bounds->x,bounds->y,bounds->width,bounds->height);
HXLINE( 907)		::openfl::geom::Rectangle_obj::_hx___pool->release(bounds);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Graphics_obj,_hx___getBounds,(void))

bool Graphics_obj::_hx___hitTest(Float x,Float y,bool shapeFlag, ::openfl::geom::Matrix matrix){
            	HX_STACKFRAME(&_hx_pos_043516e11ce5c7d5_912___hitTest)
HXLINE( 914)		if (hx::IsNull( this->_hx___bounds )) {
HXLINE( 914)			return false;
            		}
HXLINE( 916)		Float norm = (matrix->a * matrix->d);
HXDLIN( 916)		Float norm1 = (norm - (matrix->b * matrix->c));
HXDLIN( 916)		Float px;
HXDLIN( 916)		if ((norm1 == (int)0)) {
HXLINE( 916)			px = -(matrix->tx);
            		}
            		else {
HXLINE( 916)			Float matrix1 = matrix->c;
HXDLIN( 916)			Float px1 = (matrix1 * (matrix->ty - y));
HXDLIN( 916)			Float matrix2 = matrix->d;
HXDLIN( 916)			px = (((Float)((Float)1.0) / (Float)norm1) * (px1 + (matrix2 * (x - matrix->tx))));
            		}
HXLINE( 917)		Float norm2 = (matrix->a * matrix->d);
HXDLIN( 917)		Float norm3 = (norm2 - (matrix->b * matrix->c));
HXDLIN( 917)		Float py;
HXDLIN( 917)		if ((norm3 == (int)0)) {
HXLINE( 917)			py = -(matrix->ty);
            		}
            		else {
HXLINE( 917)			Float matrix3 = matrix->a;
HXDLIN( 917)			Float py1 = (matrix3 * (y - matrix->ty));
HXDLIN( 917)			Float matrix4 = matrix->b;
HXDLIN( 917)			py = (((Float)((Float)1.0) / (Float)norm3) * (py1 + (matrix4 * (matrix->tx - x))));
            		}
HXLINE( 919)		bool _hx_tmp;
HXDLIN( 919)		bool _hx_tmp1;
HXDLIN( 919)		if ((px > this->_hx___bounds->x)) {
HXLINE( 919)			_hx_tmp1 = (py > this->_hx___bounds->y);
            		}
            		else {
HXLINE( 919)			_hx_tmp1 = false;
            		}
HXDLIN( 919)		if (_hx_tmp1) {
HXLINE( 919)			_hx_tmp = this->_hx___bounds->contains(px,py);
            		}
            		else {
HXLINE( 919)			_hx_tmp = false;
            		}
HXDLIN( 919)		if (_hx_tmp) {
HXLINE( 921)			if (shapeFlag) {
HXLINE( 926)				return ::openfl::_internal::renderer::cairo::CairoGraphics_obj::hitTest(hx::ObjectPtr<OBJ_>(this),px,py);
            			}
HXLINE( 931)			return true;
            		}
HXLINE( 935)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC4(Graphics_obj,_hx___hitTest,return )

void Graphics_obj::_hx___inflateBounds(Float x,Float y){
            	HX_GC_STACKFRAME(&_hx_pos_043516e11ce5c7d5_940___inflateBounds)
HXLINE( 942)		if (hx::IsNull( this->_hx___bounds )) {
HXLINE( 944)			this->_hx___bounds =  ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,x,y,(int)0,(int)0);
HXLINE( 945)			this->_hx___transformDirty = true;
HXLINE( 946)			return;
            		}
HXLINE( 950)		if ((x < this->_hx___bounds->x)) {
HXLINE( 952)			 ::openfl::geom::Rectangle _hx_tmp = this->_hx___bounds;
HXDLIN( 952)			_hx_tmp->width = (_hx_tmp->width + (this->_hx___bounds->x - x));
HXLINE( 953)			this->_hx___bounds->x = x;
HXLINE( 954)			this->_hx___transformDirty = true;
            		}
HXLINE( 958)		if ((y < this->_hx___bounds->y)) {
HXLINE( 960)			 ::openfl::geom::Rectangle _hx_tmp1 = this->_hx___bounds;
HXDLIN( 960)			_hx_tmp1->height = (_hx_tmp1->height + (this->_hx___bounds->y - y));
HXLINE( 961)			this->_hx___bounds->y = y;
HXLINE( 962)			this->_hx___transformDirty = true;
            		}
HXLINE( 966)		if ((x > (this->_hx___bounds->x + this->_hx___bounds->width))) {
HXLINE( 968)			this->_hx___bounds->width = (x - this->_hx___bounds->x);
            		}
HXLINE( 972)		if ((y > (this->_hx___bounds->y + this->_hx___bounds->height))) {
HXLINE( 974)			this->_hx___bounds->height = (y - this->_hx___bounds->y);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(Graphics_obj,_hx___inflateBounds,(void))

void Graphics_obj::_hx___readGraphicsData( ::openfl::_Vector::ObjectVector graphicsData){
            	HX_GC_STACKFRAME(&_hx_pos_043516e11ce5c7d5_981___readGraphicsData)
HXLINE( 983)		 ::openfl::_internal::renderer::DrawCommandReader data =  ::openfl::_internal::renderer::DrawCommandReader_obj::__alloc( HX_CTX ,this->_hx___commands);
HXLINE( 984)		 ::openfl::display::GraphicsPath path = null();
HXDLIN( 984)		 ::openfl::display::GraphicsStroke stroke;
HXLINE( 986)		{
HXLINE( 986)			int _g = (int)0;
HXDLIN( 986)			::Array< ::Dynamic> _g1 = this->_hx___commands->types;
HXDLIN( 986)			while((_g < _g1->length)){
HXLINE( 986)				 ::openfl::_internal::renderer::DrawCommandType type = _g1->__get(_g).StaticCast<  ::openfl::_internal::renderer::DrawCommandType >();
HXDLIN( 986)				_g = (_g + (int)1);
HXLINE( 988)				switch((int)(_hx_getEnumValueIndex(type))){
            					case (int)4: case (int)5: case (int)6: case (int)7: case (int)9: case (int)10: case (int)17: case (int)18: {
HXLINE( 992)						if (hx::IsNull( path )) {
HXLINE( 994)							path =  ::openfl::display::GraphicsPath_obj::__alloc( HX_CTX ,null(),null(),null());
            						}
            					}
            					break;
            					default:{
HXLINE(1000)						if (hx::IsNotNull( path )) {
HXLINE(1002)							graphicsData->push(path);
HXLINE(1003)							path = null();
            						}
            					}
            				}
HXLINE(1009)				switch((int)(_hx_getEnumValueIndex(type))){
            					case (int)0: {
HXLINE(1084)						{
HXLINE(1084)							 ::openfl::_internal::renderer::DrawCommandType _g2 = data->prev;
HXDLIN(1084)							switch((int)(_hx_getEnumValueIndex(_g2))){
            								case (int)0: {
HXLINE(1084)									 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN(1084)									data1->oPos = (data1->oPos + (int)2);
HXDLIN(1084)									 ::openfl::_internal::renderer::DrawCommandReader data2 = data;
HXDLIN(1084)									data2->bPos = (data2->bPos + (int)2);
            								}
            								break;
            								case (int)1: {
HXLINE(1084)									 ::openfl::_internal::renderer::DrawCommandReader data3 = data;
HXDLIN(1084)									data3->iPos = (data3->iPos + (int)1);
HXDLIN(1084)									 ::openfl::_internal::renderer::DrawCommandReader data4 = data;
HXDLIN(1084)									data4->fPos = (data4->fPos + (int)1);
            								}
            								break;
            								case (int)2: {
HXLINE(1084)									 ::openfl::_internal::renderer::DrawCommandReader data5 = data;
HXDLIN(1084)									data5->oPos = (data5->oPos + (int)4);
HXDLIN(1084)									 ::openfl::_internal::renderer::DrawCommandReader data6 = data;
HXDLIN(1084)									data6->iiPos = (data6->iiPos + (int)2);
HXDLIN(1084)									 ::openfl::_internal::renderer::DrawCommandReader data7 = data;
HXDLIN(1084)									data7->ffPos = (data7->ffPos + (int)1);
HXDLIN(1084)									 ::openfl::_internal::renderer::DrawCommandReader data8 = data;
HXDLIN(1084)									data8->fPos = (data8->fPos + (int)1);
            								}
            								break;
            								case (int)3: {
HXLINE(1084)									 ::openfl::_internal::renderer::DrawCommandReader data9 = data;
HXDLIN(1084)									data9->oPos = (data9->oPos + (int)1);
            								}
            								break;
            								case (int)4: {
HXLINE(1084)									 ::openfl::_internal::renderer::DrawCommandReader data10 = data;
HXDLIN(1084)									data10->fPos = (data10->fPos + (int)6);
            								}
            								break;
            								case (int)5: {
HXLINE(1084)									 ::openfl::_internal::renderer::DrawCommandReader data11 = data;
HXDLIN(1084)									data11->fPos = (data11->fPos + (int)4);
            								}
            								break;
            								case (int)6: {
HXLINE(1084)									 ::openfl::_internal::renderer::DrawCommandReader data12 = data;
HXDLIN(1084)									data12->fPos = (data12->fPos + (int)3);
            								}
            								break;
            								case (int)7: {
HXLINE(1084)									 ::openfl::_internal::renderer::DrawCommandReader data13 = data;
HXDLIN(1084)									data13->fPos = (data13->fPos + (int)4);
            								}
            								break;
            								case (int)8: {
HXLINE(1084)									 ::openfl::_internal::renderer::DrawCommandReader data14 = data;
HXDLIN(1084)									data14->oPos = (data14->oPos + (int)3);
            								}
            								break;
            								case (int)9: {
HXLINE(1084)									 ::openfl::_internal::renderer::DrawCommandReader data15 = data;
HXDLIN(1084)									data15->fPos = (data15->fPos + (int)4);
            								}
            								break;
            								case (int)10: {
HXLINE(1084)									 ::openfl::_internal::renderer::DrawCommandReader data16 = data;
HXDLIN(1084)									data16->fPos = (data16->fPos + (int)5);
HXDLIN(1084)									 ::openfl::_internal::renderer::DrawCommandReader data17 = data;
HXDLIN(1084)									data17->oPos = (data17->oPos + (int)1);
            								}
            								break;
            								case (int)12: {
HXLINE(1084)									 ::openfl::_internal::renderer::DrawCommandReader data18 = data;
HXDLIN(1084)									data18->oPos = (data18->oPos + (int)4);
            								}
            								break;
            								case (int)13: {
            								}
            								break;
            								case (int)14: {
HXLINE(1084)									 ::openfl::_internal::renderer::DrawCommandReader data19 = data;
HXDLIN(1084)									data19->oPos = (data19->oPos + (int)2);
HXDLIN(1084)									 ::openfl::_internal::renderer::DrawCommandReader data20 = data;
HXDLIN(1084)									data20->bPos = (data20->bPos + (int)2);
            								}
            								break;
            								case (int)15: {
HXLINE(1084)									 ::openfl::_internal::renderer::DrawCommandReader data21 = data;
HXDLIN(1084)									data21->oPos = (data21->oPos + (int)4);
HXDLIN(1084)									 ::openfl::_internal::renderer::DrawCommandReader data22 = data;
HXDLIN(1084)									data22->iiPos = (data22->iiPos + (int)2);
HXDLIN(1084)									 ::openfl::_internal::renderer::DrawCommandReader data23 = data;
HXDLIN(1084)									data23->ffPos = (data23->ffPos + (int)1);
HXDLIN(1084)									 ::openfl::_internal::renderer::DrawCommandReader data24 = data;
HXDLIN(1084)									data24->fPos = (data24->fPos + (int)1);
            								}
            								break;
            								case (int)16: {
HXLINE(1084)									 ::openfl::_internal::renderer::DrawCommandReader data25 = data;
HXDLIN(1084)									data25->oPos = (data25->oPos + (int)4);
HXDLIN(1084)									 ::openfl::_internal::renderer::DrawCommandReader data26 = data;
HXDLIN(1084)									data26->iPos = (data26->iPos + (int)1);
HXDLIN(1084)									 ::openfl::_internal::renderer::DrawCommandReader data27 = data;
HXDLIN(1084)									data27->fPos = (data27->fPos + (int)2);
HXDLIN(1084)									 ::openfl::_internal::renderer::DrawCommandReader data28 = data;
HXDLIN(1084)									data28->bPos = (data28->bPos + (int)1);
            								}
            								break;
            								case (int)17: {
HXLINE(1084)									 ::openfl::_internal::renderer::DrawCommandReader data29 = data;
HXDLIN(1084)									data29->fPos = (data29->fPos + (int)2);
            								}
            								break;
            								case (int)18: {
HXLINE(1084)									 ::openfl::_internal::renderer::DrawCommandReader data30 = data;
HXDLIN(1084)									data30->fPos = (data30->fPos + (int)2);
            								}
            								break;
            								case (int)19: {
HXLINE(1084)									 ::openfl::_internal::renderer::DrawCommandReader data31 = data;
HXDLIN(1084)									data31->oPos = (data31->oPos + (int)1);
            								}
            								break;
            								case (int)20: case (int)21: {
            								}
            								break;
            								default:{
            								}
            							}
            						}
HXLINE(1084)						data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::BEGIN_BITMAP_FILL_dyn();
HXDLIN(1084)						 ::openfl::_internal::renderer::DrawCommandReader this1 = data;
HXDLIN(1084)						 ::openfl::_internal::renderer::DrawCommandReader c = this1;
HXLINE(1085)						{
HXLINE(1085)							 ::openfl::display::BitmapData c1 = ( ( ::openfl::display::BitmapData)(c->buffer->o->__get(c->oPos)) );
HXDLIN(1085)							::cpp::VirtualArray c2 = c->buffer->o;
HXDLIN(1085)							 ::openfl::geom::Matrix c3 = ( ( ::openfl::geom::Matrix)(c2->__get((c->oPos + (int)1))) );
HXDLIN(1085)							bool c4 = c->buffer->b->__get(c->bPos);
HXDLIN(1085)							::Array< bool > c5 = c->buffer->b;
HXDLIN(1085)							graphicsData->push( ::openfl::display::GraphicsBitmapFill_obj::__alloc( HX_CTX ,c1,c3,c4,c5->__get((c->bPos + (int)1))));
            						}
            					}
            					break;
            					case (int)1: {
HXLINE(1089)						{
HXLINE(1089)							 ::openfl::_internal::renderer::DrawCommandType _g3 = data->prev;
HXDLIN(1089)							switch((int)(_hx_getEnumValueIndex(_g3))){
            								case (int)0: {
HXLINE(1089)									 ::openfl::_internal::renderer::DrawCommandReader data32 = data;
HXDLIN(1089)									data32->oPos = (data32->oPos + (int)2);
HXDLIN(1089)									 ::openfl::_internal::renderer::DrawCommandReader data33 = data;
HXDLIN(1089)									data33->bPos = (data33->bPos + (int)2);
            								}
            								break;
            								case (int)1: {
HXLINE(1089)									 ::openfl::_internal::renderer::DrawCommandReader data34 = data;
HXDLIN(1089)									data34->iPos = (data34->iPos + (int)1);
HXDLIN(1089)									 ::openfl::_internal::renderer::DrawCommandReader data35 = data;
HXDLIN(1089)									data35->fPos = (data35->fPos + (int)1);
            								}
            								break;
            								case (int)2: {
HXLINE(1089)									 ::openfl::_internal::renderer::DrawCommandReader data36 = data;
HXDLIN(1089)									data36->oPos = (data36->oPos + (int)4);
HXDLIN(1089)									 ::openfl::_internal::renderer::DrawCommandReader data37 = data;
HXDLIN(1089)									data37->iiPos = (data37->iiPos + (int)2);
HXDLIN(1089)									 ::openfl::_internal::renderer::DrawCommandReader data38 = data;
HXDLIN(1089)									data38->ffPos = (data38->ffPos + (int)1);
HXDLIN(1089)									 ::openfl::_internal::renderer::DrawCommandReader data39 = data;
HXDLIN(1089)									data39->fPos = (data39->fPos + (int)1);
            								}
            								break;
            								case (int)3: {
HXLINE(1089)									 ::openfl::_internal::renderer::DrawCommandReader data40 = data;
HXDLIN(1089)									data40->oPos = (data40->oPos + (int)1);
            								}
            								break;
            								case (int)4: {
HXLINE(1089)									 ::openfl::_internal::renderer::DrawCommandReader data41 = data;
HXDLIN(1089)									data41->fPos = (data41->fPos + (int)6);
            								}
            								break;
            								case (int)5: {
HXLINE(1089)									 ::openfl::_internal::renderer::DrawCommandReader data42 = data;
HXDLIN(1089)									data42->fPos = (data42->fPos + (int)4);
            								}
            								break;
            								case (int)6: {
HXLINE(1089)									 ::openfl::_internal::renderer::DrawCommandReader data43 = data;
HXDLIN(1089)									data43->fPos = (data43->fPos + (int)3);
            								}
            								break;
            								case (int)7: {
HXLINE(1089)									 ::openfl::_internal::renderer::DrawCommandReader data44 = data;
HXDLIN(1089)									data44->fPos = (data44->fPos + (int)4);
            								}
            								break;
            								case (int)8: {
HXLINE(1089)									 ::openfl::_internal::renderer::DrawCommandReader data45 = data;
HXDLIN(1089)									data45->oPos = (data45->oPos + (int)3);
            								}
            								break;
            								case (int)9: {
HXLINE(1089)									 ::openfl::_internal::renderer::DrawCommandReader data46 = data;
HXDLIN(1089)									data46->fPos = (data46->fPos + (int)4);
            								}
            								break;
            								case (int)10: {
HXLINE(1089)									 ::openfl::_internal::renderer::DrawCommandReader data47 = data;
HXDLIN(1089)									data47->fPos = (data47->fPos + (int)5);
HXDLIN(1089)									 ::openfl::_internal::renderer::DrawCommandReader data48 = data;
HXDLIN(1089)									data48->oPos = (data48->oPos + (int)1);
            								}
            								break;
            								case (int)12: {
HXLINE(1089)									 ::openfl::_internal::renderer::DrawCommandReader data49 = data;
HXDLIN(1089)									data49->oPos = (data49->oPos + (int)4);
            								}
            								break;
            								case (int)13: {
            								}
            								break;
            								case (int)14: {
HXLINE(1089)									 ::openfl::_internal::renderer::DrawCommandReader data50 = data;
HXDLIN(1089)									data50->oPos = (data50->oPos + (int)2);
HXDLIN(1089)									 ::openfl::_internal::renderer::DrawCommandReader data51 = data;
HXDLIN(1089)									data51->bPos = (data51->bPos + (int)2);
            								}
            								break;
            								case (int)15: {
HXLINE(1089)									 ::openfl::_internal::renderer::DrawCommandReader data52 = data;
HXDLIN(1089)									data52->oPos = (data52->oPos + (int)4);
HXDLIN(1089)									 ::openfl::_internal::renderer::DrawCommandReader data53 = data;
HXDLIN(1089)									data53->iiPos = (data53->iiPos + (int)2);
HXDLIN(1089)									 ::openfl::_internal::renderer::DrawCommandReader data54 = data;
HXDLIN(1089)									data54->ffPos = (data54->ffPos + (int)1);
HXDLIN(1089)									 ::openfl::_internal::renderer::DrawCommandReader data55 = data;
HXDLIN(1089)									data55->fPos = (data55->fPos + (int)1);
            								}
            								break;
            								case (int)16: {
HXLINE(1089)									 ::openfl::_internal::renderer::DrawCommandReader data56 = data;
HXDLIN(1089)									data56->oPos = (data56->oPos + (int)4);
HXDLIN(1089)									 ::openfl::_internal::renderer::DrawCommandReader data57 = data;
HXDLIN(1089)									data57->iPos = (data57->iPos + (int)1);
HXDLIN(1089)									 ::openfl::_internal::renderer::DrawCommandReader data58 = data;
HXDLIN(1089)									data58->fPos = (data58->fPos + (int)2);
HXDLIN(1089)									 ::openfl::_internal::renderer::DrawCommandReader data59 = data;
HXDLIN(1089)									data59->bPos = (data59->bPos + (int)1);
            								}
            								break;
            								case (int)17: {
HXLINE(1089)									 ::openfl::_internal::renderer::DrawCommandReader data60 = data;
HXDLIN(1089)									data60->fPos = (data60->fPos + (int)2);
            								}
            								break;
            								case (int)18: {
HXLINE(1089)									 ::openfl::_internal::renderer::DrawCommandReader data61 = data;
HXDLIN(1089)									data61->fPos = (data61->fPos + (int)2);
            								}
            								break;
            								case (int)19: {
HXLINE(1089)									 ::openfl::_internal::renderer::DrawCommandReader data62 = data;
HXDLIN(1089)									data62->oPos = (data62->oPos + (int)1);
            								}
            								break;
            								case (int)20: case (int)21: {
            								}
            								break;
            								default:{
            								}
            							}
            						}
HXLINE(1089)						data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::BEGIN_FILL_dyn();
HXDLIN(1089)						 ::openfl::_internal::renderer::DrawCommandReader this2 = data;
HXDLIN(1089)						 ::openfl::_internal::renderer::DrawCommandReader c6 = this2;
HXLINE(1090)						graphicsData->push( ::openfl::display::GraphicsSolidFill_obj::__alloc( HX_CTX ,c6->buffer->i->__get(c6->iPos),(int)1));
            					}
            					break;
            					case (int)2: {
HXLINE(1094)						{
HXLINE(1094)							 ::openfl::_internal::renderer::DrawCommandType _g4 = data->prev;
HXDLIN(1094)							switch((int)(_hx_getEnumValueIndex(_g4))){
            								case (int)0: {
HXLINE(1094)									 ::openfl::_internal::renderer::DrawCommandReader data63 = data;
HXDLIN(1094)									data63->oPos = (data63->oPos + (int)2);
HXDLIN(1094)									 ::openfl::_internal::renderer::DrawCommandReader data64 = data;
HXDLIN(1094)									data64->bPos = (data64->bPos + (int)2);
            								}
            								break;
            								case (int)1: {
HXLINE(1094)									 ::openfl::_internal::renderer::DrawCommandReader data65 = data;
HXDLIN(1094)									data65->iPos = (data65->iPos + (int)1);
HXDLIN(1094)									 ::openfl::_internal::renderer::DrawCommandReader data66 = data;
HXDLIN(1094)									data66->fPos = (data66->fPos + (int)1);
            								}
            								break;
            								case (int)2: {
HXLINE(1094)									 ::openfl::_internal::renderer::DrawCommandReader data67 = data;
HXDLIN(1094)									data67->oPos = (data67->oPos + (int)4);
HXDLIN(1094)									 ::openfl::_internal::renderer::DrawCommandReader data68 = data;
HXDLIN(1094)									data68->iiPos = (data68->iiPos + (int)2);
HXDLIN(1094)									 ::openfl::_internal::renderer::DrawCommandReader data69 = data;
HXDLIN(1094)									data69->ffPos = (data69->ffPos + (int)1);
HXDLIN(1094)									 ::openfl::_internal::renderer::DrawCommandReader data70 = data;
HXDLIN(1094)									data70->fPos = (data70->fPos + (int)1);
            								}
            								break;
            								case (int)3: {
HXLINE(1094)									 ::openfl::_internal::renderer::DrawCommandReader data71 = data;
HXDLIN(1094)									data71->oPos = (data71->oPos + (int)1);
            								}
            								break;
            								case (int)4: {
HXLINE(1094)									 ::openfl::_internal::renderer::DrawCommandReader data72 = data;
HXDLIN(1094)									data72->fPos = (data72->fPos + (int)6);
            								}
            								break;
            								case (int)5: {
HXLINE(1094)									 ::openfl::_internal::renderer::DrawCommandReader data73 = data;
HXDLIN(1094)									data73->fPos = (data73->fPos + (int)4);
            								}
            								break;
            								case (int)6: {
HXLINE(1094)									 ::openfl::_internal::renderer::DrawCommandReader data74 = data;
HXDLIN(1094)									data74->fPos = (data74->fPos + (int)3);
            								}
            								break;
            								case (int)7: {
HXLINE(1094)									 ::openfl::_internal::renderer::DrawCommandReader data75 = data;
HXDLIN(1094)									data75->fPos = (data75->fPos + (int)4);
            								}
            								break;
            								case (int)8: {
HXLINE(1094)									 ::openfl::_internal::renderer::DrawCommandReader data76 = data;
HXDLIN(1094)									data76->oPos = (data76->oPos + (int)3);
            								}
            								break;
            								case (int)9: {
HXLINE(1094)									 ::openfl::_internal::renderer::DrawCommandReader data77 = data;
HXDLIN(1094)									data77->fPos = (data77->fPos + (int)4);
            								}
            								break;
            								case (int)10: {
HXLINE(1094)									 ::openfl::_internal::renderer::DrawCommandReader data78 = data;
HXDLIN(1094)									data78->fPos = (data78->fPos + (int)5);
HXDLIN(1094)									 ::openfl::_internal::renderer::DrawCommandReader data79 = data;
HXDLIN(1094)									data79->oPos = (data79->oPos + (int)1);
            								}
            								break;
            								case (int)12: {
HXLINE(1094)									 ::openfl::_internal::renderer::DrawCommandReader data80 = data;
HXDLIN(1094)									data80->oPos = (data80->oPos + (int)4);
            								}
            								break;
            								case (int)13: {
            								}
            								break;
            								case (int)14: {
HXLINE(1094)									 ::openfl::_internal::renderer::DrawCommandReader data81 = data;
HXDLIN(1094)									data81->oPos = (data81->oPos + (int)2);
HXDLIN(1094)									 ::openfl::_internal::renderer::DrawCommandReader data82 = data;
HXDLIN(1094)									data82->bPos = (data82->bPos + (int)2);
            								}
            								break;
            								case (int)15: {
HXLINE(1094)									 ::openfl::_internal::renderer::DrawCommandReader data83 = data;
HXDLIN(1094)									data83->oPos = (data83->oPos + (int)4);
HXDLIN(1094)									 ::openfl::_internal::renderer::DrawCommandReader data84 = data;
HXDLIN(1094)									data84->iiPos = (data84->iiPos + (int)2);
HXDLIN(1094)									 ::openfl::_internal::renderer::DrawCommandReader data85 = data;
HXDLIN(1094)									data85->ffPos = (data85->ffPos + (int)1);
HXDLIN(1094)									 ::openfl::_internal::renderer::DrawCommandReader data86 = data;
HXDLIN(1094)									data86->fPos = (data86->fPos + (int)1);
            								}
            								break;
            								case (int)16: {
HXLINE(1094)									 ::openfl::_internal::renderer::DrawCommandReader data87 = data;
HXDLIN(1094)									data87->oPos = (data87->oPos + (int)4);
HXDLIN(1094)									 ::openfl::_internal::renderer::DrawCommandReader data88 = data;
HXDLIN(1094)									data88->iPos = (data88->iPos + (int)1);
HXDLIN(1094)									 ::openfl::_internal::renderer::DrawCommandReader data89 = data;
HXDLIN(1094)									data89->fPos = (data89->fPos + (int)2);
HXDLIN(1094)									 ::openfl::_internal::renderer::DrawCommandReader data90 = data;
HXDLIN(1094)									data90->bPos = (data90->bPos + (int)1);
            								}
            								break;
            								case (int)17: {
HXLINE(1094)									 ::openfl::_internal::renderer::DrawCommandReader data91 = data;
HXDLIN(1094)									data91->fPos = (data91->fPos + (int)2);
            								}
            								break;
            								case (int)18: {
HXLINE(1094)									 ::openfl::_internal::renderer::DrawCommandReader data92 = data;
HXDLIN(1094)									data92->fPos = (data92->fPos + (int)2);
            								}
            								break;
            								case (int)19: {
HXLINE(1094)									 ::openfl::_internal::renderer::DrawCommandReader data93 = data;
HXDLIN(1094)									data93->oPos = (data93->oPos + (int)1);
            								}
            								break;
            								case (int)20: case (int)21: {
            								}
            								break;
            								default:{
            								}
            							}
            						}
HXLINE(1094)						data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::BEGIN_GRADIENT_FILL_dyn();
HXDLIN(1094)						 ::openfl::_internal::renderer::DrawCommandReader this3 = data;
HXDLIN(1094)						 ::openfl::_internal::renderer::DrawCommandReader c7 = this3;
HXLINE(1095)						{
HXLINE(1095)							::Array< ::Dynamic> c8 = c7->buffer->ii;
HXDLIN(1095)							::cpp::VirtualArray c9 = c7->buffer->o;
HXDLIN(1095)							::cpp::VirtualArray c10 = c7->buffer->o;
HXDLIN(1095)							::cpp::VirtualArray c11 = c7->buffer->o;
HXDLIN(1095)							graphicsData->push( ::openfl::display::GraphicsGradientFill_obj::__alloc( HX_CTX ,c7->buffer->o->__get(c7->oPos),c7->buffer->ii->__get(c7->iiPos).StaticCast< ::Array< int > >(),c7->buffer->ff->__get(c7->ffPos).StaticCast< ::Array< Float > >(),c8->__get((c7->iiPos + (int)1)).StaticCast< ::Array< int > >(),( ( ::openfl::geom::Matrix)(c9->__get((c7->oPos + (int)1))) ),c10->__get((c7->oPos + (int)2)),c11->__get((c7->oPos + (int)3)),c7->buffer->f->__get(c7->fPos)));
            						}
            					}
            					break;
            					case (int)3: {
            					}
            					break;
            					case (int)4: {
HXLINE(1013)						{
HXLINE(1013)							 ::openfl::_internal::renderer::DrawCommandType _g5 = data->prev;
HXDLIN(1013)							switch((int)(_hx_getEnumValueIndex(_g5))){
            								case (int)0: {
HXLINE(1013)									 ::openfl::_internal::renderer::DrawCommandReader data94 = data;
HXDLIN(1013)									data94->oPos = (data94->oPos + (int)2);
HXDLIN(1013)									 ::openfl::_internal::renderer::DrawCommandReader data95 = data;
HXDLIN(1013)									data95->bPos = (data95->bPos + (int)2);
            								}
            								break;
            								case (int)1: {
HXLINE(1013)									 ::openfl::_internal::renderer::DrawCommandReader data96 = data;
HXDLIN(1013)									data96->iPos = (data96->iPos + (int)1);
HXDLIN(1013)									 ::openfl::_internal::renderer::DrawCommandReader data97 = data;
HXDLIN(1013)									data97->fPos = (data97->fPos + (int)1);
            								}
            								break;
            								case (int)2: {
HXLINE(1013)									 ::openfl::_internal::renderer::DrawCommandReader data98 = data;
HXDLIN(1013)									data98->oPos = (data98->oPos + (int)4);
HXDLIN(1013)									 ::openfl::_internal::renderer::DrawCommandReader data99 = data;
HXDLIN(1013)									data99->iiPos = (data99->iiPos + (int)2);
HXDLIN(1013)									 ::openfl::_internal::renderer::DrawCommandReader data100 = data;
HXDLIN(1013)									data100->ffPos = (data100->ffPos + (int)1);
HXDLIN(1013)									 ::openfl::_internal::renderer::DrawCommandReader data101 = data;
HXDLIN(1013)									data101->fPos = (data101->fPos + (int)1);
            								}
            								break;
            								case (int)3: {
HXLINE(1013)									 ::openfl::_internal::renderer::DrawCommandReader data102 = data;
HXDLIN(1013)									data102->oPos = (data102->oPos + (int)1);
            								}
            								break;
            								case (int)4: {
HXLINE(1013)									 ::openfl::_internal::renderer::DrawCommandReader data103 = data;
HXDLIN(1013)									data103->fPos = (data103->fPos + (int)6);
            								}
            								break;
            								case (int)5: {
HXLINE(1013)									 ::openfl::_internal::renderer::DrawCommandReader data104 = data;
HXDLIN(1013)									data104->fPos = (data104->fPos + (int)4);
            								}
            								break;
            								case (int)6: {
HXLINE(1013)									 ::openfl::_internal::renderer::DrawCommandReader data105 = data;
HXDLIN(1013)									data105->fPos = (data105->fPos + (int)3);
            								}
            								break;
            								case (int)7: {
HXLINE(1013)									 ::openfl::_internal::renderer::DrawCommandReader data106 = data;
HXDLIN(1013)									data106->fPos = (data106->fPos + (int)4);
            								}
            								break;
            								case (int)8: {
HXLINE(1013)									 ::openfl::_internal::renderer::DrawCommandReader data107 = data;
HXDLIN(1013)									data107->oPos = (data107->oPos + (int)3);
            								}
            								break;
            								case (int)9: {
HXLINE(1013)									 ::openfl::_internal::renderer::DrawCommandReader data108 = data;
HXDLIN(1013)									data108->fPos = (data108->fPos + (int)4);
            								}
            								break;
            								case (int)10: {
HXLINE(1013)									 ::openfl::_internal::renderer::DrawCommandReader data109 = data;
HXDLIN(1013)									data109->fPos = (data109->fPos + (int)5);
HXDLIN(1013)									 ::openfl::_internal::renderer::DrawCommandReader data110 = data;
HXDLIN(1013)									data110->oPos = (data110->oPos + (int)1);
            								}
            								break;
            								case (int)12: {
HXLINE(1013)									 ::openfl::_internal::renderer::DrawCommandReader data111 = data;
HXDLIN(1013)									data111->oPos = (data111->oPos + (int)4);
            								}
            								break;
            								case (int)13: {
            								}
            								break;
            								case (int)14: {
HXLINE(1013)									 ::openfl::_internal::renderer::DrawCommandReader data112 = data;
HXDLIN(1013)									data112->oPos = (data112->oPos + (int)2);
HXDLIN(1013)									 ::openfl::_internal::renderer::DrawCommandReader data113 = data;
HXDLIN(1013)									data113->bPos = (data113->bPos + (int)2);
            								}
            								break;
            								case (int)15: {
HXLINE(1013)									 ::openfl::_internal::renderer::DrawCommandReader data114 = data;
HXDLIN(1013)									data114->oPos = (data114->oPos + (int)4);
HXDLIN(1013)									 ::openfl::_internal::renderer::DrawCommandReader data115 = data;
HXDLIN(1013)									data115->iiPos = (data115->iiPos + (int)2);
HXDLIN(1013)									 ::openfl::_internal::renderer::DrawCommandReader data116 = data;
HXDLIN(1013)									data116->ffPos = (data116->ffPos + (int)1);
HXDLIN(1013)									 ::openfl::_internal::renderer::DrawCommandReader data117 = data;
HXDLIN(1013)									data117->fPos = (data117->fPos + (int)1);
            								}
            								break;
            								case (int)16: {
HXLINE(1013)									 ::openfl::_internal::renderer::DrawCommandReader data118 = data;
HXDLIN(1013)									data118->oPos = (data118->oPos + (int)4);
HXDLIN(1013)									 ::openfl::_internal::renderer::DrawCommandReader data119 = data;
HXDLIN(1013)									data119->iPos = (data119->iPos + (int)1);
HXDLIN(1013)									 ::openfl::_internal::renderer::DrawCommandReader data120 = data;
HXDLIN(1013)									data120->fPos = (data120->fPos + (int)2);
HXDLIN(1013)									 ::openfl::_internal::renderer::DrawCommandReader data121 = data;
HXDLIN(1013)									data121->bPos = (data121->bPos + (int)1);
            								}
            								break;
            								case (int)17: {
HXLINE(1013)									 ::openfl::_internal::renderer::DrawCommandReader data122 = data;
HXDLIN(1013)									data122->fPos = (data122->fPos + (int)2);
            								}
            								break;
            								case (int)18: {
HXLINE(1013)									 ::openfl::_internal::renderer::DrawCommandReader data123 = data;
HXDLIN(1013)									data123->fPos = (data123->fPos + (int)2);
            								}
            								break;
            								case (int)19: {
HXLINE(1013)									 ::openfl::_internal::renderer::DrawCommandReader data124 = data;
HXDLIN(1013)									data124->oPos = (data124->oPos + (int)1);
            								}
            								break;
            								case (int)20: case (int)21: {
            								}
            								break;
            								default:{
            								}
            							}
            						}
HXLINE(1013)						data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::CUBIC_CURVE_TO_dyn();
HXDLIN(1013)						 ::openfl::_internal::renderer::DrawCommandReader this4 = data;
HXDLIN(1013)						 ::openfl::_internal::renderer::DrawCommandReader c12 = this4;
HXLINE(1014)						Float c13 = c12->buffer->f->__get(c12->fPos);
HXDLIN(1014)						::Array< Float > c14 = c12->buffer->f;
HXDLIN(1014)						Float c15 = c14->__get((c12->fPos + (int)1));
HXDLIN(1014)						::Array< Float > c16 = c12->buffer->f;
HXDLIN(1014)						Float c17 = c16->__get((c12->fPos + (int)2));
HXDLIN(1014)						::Array< Float > c18 = c12->buffer->f;
HXDLIN(1014)						Float c19 = c18->__get((c12->fPos + (int)3));
HXDLIN(1014)						::Array< Float > c20 = c12->buffer->f;
HXDLIN(1014)						Float c21 = c20->__get((c12->fPos + (int)4));
HXDLIN(1014)						::Array< Float > c22 = c12->buffer->f;
HXDLIN(1014)						path->cubicCurveTo(c13,c15,c17,c19,c21,c22->__get((c12->fPos + (int)5)));
            					}
            					break;
            					case (int)5: {
HXLINE(1018)						{
HXLINE(1018)							 ::openfl::_internal::renderer::DrawCommandType _g6 = data->prev;
HXDLIN(1018)							switch((int)(_hx_getEnumValueIndex(_g6))){
            								case (int)0: {
HXLINE(1018)									 ::openfl::_internal::renderer::DrawCommandReader data125 = data;
HXDLIN(1018)									data125->oPos = (data125->oPos + (int)2);
HXDLIN(1018)									 ::openfl::_internal::renderer::DrawCommandReader data126 = data;
HXDLIN(1018)									data126->bPos = (data126->bPos + (int)2);
            								}
            								break;
            								case (int)1: {
HXLINE(1018)									 ::openfl::_internal::renderer::DrawCommandReader data127 = data;
HXDLIN(1018)									data127->iPos = (data127->iPos + (int)1);
HXDLIN(1018)									 ::openfl::_internal::renderer::DrawCommandReader data128 = data;
HXDLIN(1018)									data128->fPos = (data128->fPos + (int)1);
            								}
            								break;
            								case (int)2: {
HXLINE(1018)									 ::openfl::_internal::renderer::DrawCommandReader data129 = data;
HXDLIN(1018)									data129->oPos = (data129->oPos + (int)4);
HXDLIN(1018)									 ::openfl::_internal::renderer::DrawCommandReader data130 = data;
HXDLIN(1018)									data130->iiPos = (data130->iiPos + (int)2);
HXDLIN(1018)									 ::openfl::_internal::renderer::DrawCommandReader data131 = data;
HXDLIN(1018)									data131->ffPos = (data131->ffPos + (int)1);
HXDLIN(1018)									 ::openfl::_internal::renderer::DrawCommandReader data132 = data;
HXDLIN(1018)									data132->fPos = (data132->fPos + (int)1);
            								}
            								break;
            								case (int)3: {
HXLINE(1018)									 ::openfl::_internal::renderer::DrawCommandReader data133 = data;
HXDLIN(1018)									data133->oPos = (data133->oPos + (int)1);
            								}
            								break;
            								case (int)4: {
HXLINE(1018)									 ::openfl::_internal::renderer::DrawCommandReader data134 = data;
HXDLIN(1018)									data134->fPos = (data134->fPos + (int)6);
            								}
            								break;
            								case (int)5: {
HXLINE(1018)									 ::openfl::_internal::renderer::DrawCommandReader data135 = data;
HXDLIN(1018)									data135->fPos = (data135->fPos + (int)4);
            								}
            								break;
            								case (int)6: {
HXLINE(1018)									 ::openfl::_internal::renderer::DrawCommandReader data136 = data;
HXDLIN(1018)									data136->fPos = (data136->fPos + (int)3);
            								}
            								break;
            								case (int)7: {
HXLINE(1018)									 ::openfl::_internal::renderer::DrawCommandReader data137 = data;
HXDLIN(1018)									data137->fPos = (data137->fPos + (int)4);
            								}
            								break;
            								case (int)8: {
HXLINE(1018)									 ::openfl::_internal::renderer::DrawCommandReader data138 = data;
HXDLIN(1018)									data138->oPos = (data138->oPos + (int)3);
            								}
            								break;
            								case (int)9: {
HXLINE(1018)									 ::openfl::_internal::renderer::DrawCommandReader data139 = data;
HXDLIN(1018)									data139->fPos = (data139->fPos + (int)4);
            								}
            								break;
            								case (int)10: {
HXLINE(1018)									 ::openfl::_internal::renderer::DrawCommandReader data140 = data;
HXDLIN(1018)									data140->fPos = (data140->fPos + (int)5);
HXDLIN(1018)									 ::openfl::_internal::renderer::DrawCommandReader data141 = data;
HXDLIN(1018)									data141->oPos = (data141->oPos + (int)1);
            								}
            								break;
            								case (int)12: {
HXLINE(1018)									 ::openfl::_internal::renderer::DrawCommandReader data142 = data;
HXDLIN(1018)									data142->oPos = (data142->oPos + (int)4);
            								}
            								break;
            								case (int)13: {
            								}
            								break;
            								case (int)14: {
HXLINE(1018)									 ::openfl::_internal::renderer::DrawCommandReader data143 = data;
HXDLIN(1018)									data143->oPos = (data143->oPos + (int)2);
HXDLIN(1018)									 ::openfl::_internal::renderer::DrawCommandReader data144 = data;
HXDLIN(1018)									data144->bPos = (data144->bPos + (int)2);
            								}
            								break;
            								case (int)15: {
HXLINE(1018)									 ::openfl::_internal::renderer::DrawCommandReader data145 = data;
HXDLIN(1018)									data145->oPos = (data145->oPos + (int)4);
HXDLIN(1018)									 ::openfl::_internal::renderer::DrawCommandReader data146 = data;
HXDLIN(1018)									data146->iiPos = (data146->iiPos + (int)2);
HXDLIN(1018)									 ::openfl::_internal::renderer::DrawCommandReader data147 = data;
HXDLIN(1018)									data147->ffPos = (data147->ffPos + (int)1);
HXDLIN(1018)									 ::openfl::_internal::renderer::DrawCommandReader data148 = data;
HXDLIN(1018)									data148->fPos = (data148->fPos + (int)1);
            								}
            								break;
            								case (int)16: {
HXLINE(1018)									 ::openfl::_internal::renderer::DrawCommandReader data149 = data;
HXDLIN(1018)									data149->oPos = (data149->oPos + (int)4);
HXDLIN(1018)									 ::openfl::_internal::renderer::DrawCommandReader data150 = data;
HXDLIN(1018)									data150->iPos = (data150->iPos + (int)1);
HXDLIN(1018)									 ::openfl::_internal::renderer::DrawCommandReader data151 = data;
HXDLIN(1018)									data151->fPos = (data151->fPos + (int)2);
HXDLIN(1018)									 ::openfl::_internal::renderer::DrawCommandReader data152 = data;
HXDLIN(1018)									data152->bPos = (data152->bPos + (int)1);
            								}
            								break;
            								case (int)17: {
HXLINE(1018)									 ::openfl::_internal::renderer::DrawCommandReader data153 = data;
HXDLIN(1018)									data153->fPos = (data153->fPos + (int)2);
            								}
            								break;
            								case (int)18: {
HXLINE(1018)									 ::openfl::_internal::renderer::DrawCommandReader data154 = data;
HXDLIN(1018)									data154->fPos = (data154->fPos + (int)2);
            								}
            								break;
            								case (int)19: {
HXLINE(1018)									 ::openfl::_internal::renderer::DrawCommandReader data155 = data;
HXDLIN(1018)									data155->oPos = (data155->oPos + (int)1);
            								}
            								break;
            								case (int)20: case (int)21: {
            								}
            								break;
            								default:{
            								}
            							}
            						}
HXLINE(1018)						data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::CURVE_TO_dyn();
HXDLIN(1018)						 ::openfl::_internal::renderer::DrawCommandReader this5 = data;
HXDLIN(1018)						 ::openfl::_internal::renderer::DrawCommandReader c23 = this5;
HXLINE(1019)						Float c24 = c23->buffer->f->__get(c23->fPos);
HXDLIN(1019)						::Array< Float > c25 = c23->buffer->f;
HXDLIN(1019)						Float c26 = c25->__get((c23->fPos + (int)1));
HXDLIN(1019)						::Array< Float > c27 = c23->buffer->f;
HXDLIN(1019)						Float c28 = c27->__get((c23->fPos + (int)2));
HXDLIN(1019)						::Array< Float > c29 = c23->buffer->f;
HXDLIN(1019)						path->curveTo(c24,c26,c28,c29->__get((c23->fPos + (int)3)));
            					}
            					break;
            					case (int)6: {
HXLINE(1033)						{
HXLINE(1033)							 ::openfl::_internal::renderer::DrawCommandType _g7 = data->prev;
HXDLIN(1033)							switch((int)(_hx_getEnumValueIndex(_g7))){
            								case (int)0: {
HXLINE(1033)									 ::openfl::_internal::renderer::DrawCommandReader data156 = data;
HXDLIN(1033)									data156->oPos = (data156->oPos + (int)2);
HXDLIN(1033)									 ::openfl::_internal::renderer::DrawCommandReader data157 = data;
HXDLIN(1033)									data157->bPos = (data157->bPos + (int)2);
            								}
            								break;
            								case (int)1: {
HXLINE(1033)									 ::openfl::_internal::renderer::DrawCommandReader data158 = data;
HXDLIN(1033)									data158->iPos = (data158->iPos + (int)1);
HXDLIN(1033)									 ::openfl::_internal::renderer::DrawCommandReader data159 = data;
HXDLIN(1033)									data159->fPos = (data159->fPos + (int)1);
            								}
            								break;
            								case (int)2: {
HXLINE(1033)									 ::openfl::_internal::renderer::DrawCommandReader data160 = data;
HXDLIN(1033)									data160->oPos = (data160->oPos + (int)4);
HXDLIN(1033)									 ::openfl::_internal::renderer::DrawCommandReader data161 = data;
HXDLIN(1033)									data161->iiPos = (data161->iiPos + (int)2);
HXDLIN(1033)									 ::openfl::_internal::renderer::DrawCommandReader data162 = data;
HXDLIN(1033)									data162->ffPos = (data162->ffPos + (int)1);
HXDLIN(1033)									 ::openfl::_internal::renderer::DrawCommandReader data163 = data;
HXDLIN(1033)									data163->fPos = (data163->fPos + (int)1);
            								}
            								break;
            								case (int)3: {
HXLINE(1033)									 ::openfl::_internal::renderer::DrawCommandReader data164 = data;
HXDLIN(1033)									data164->oPos = (data164->oPos + (int)1);
            								}
            								break;
            								case (int)4: {
HXLINE(1033)									 ::openfl::_internal::renderer::DrawCommandReader data165 = data;
HXDLIN(1033)									data165->fPos = (data165->fPos + (int)6);
            								}
            								break;
            								case (int)5: {
HXLINE(1033)									 ::openfl::_internal::renderer::DrawCommandReader data166 = data;
HXDLIN(1033)									data166->fPos = (data166->fPos + (int)4);
            								}
            								break;
            								case (int)6: {
HXLINE(1033)									 ::openfl::_internal::renderer::DrawCommandReader data167 = data;
HXDLIN(1033)									data167->fPos = (data167->fPos + (int)3);
            								}
            								break;
            								case (int)7: {
HXLINE(1033)									 ::openfl::_internal::renderer::DrawCommandReader data168 = data;
HXDLIN(1033)									data168->fPos = (data168->fPos + (int)4);
            								}
            								break;
            								case (int)8: {
HXLINE(1033)									 ::openfl::_internal::renderer::DrawCommandReader data169 = data;
HXDLIN(1033)									data169->oPos = (data169->oPos + (int)3);
            								}
            								break;
            								case (int)9: {
HXLINE(1033)									 ::openfl::_internal::renderer::DrawCommandReader data170 = data;
HXDLIN(1033)									data170->fPos = (data170->fPos + (int)4);
            								}
            								break;
            								case (int)10: {
HXLINE(1033)									 ::openfl::_internal::renderer::DrawCommandReader data171 = data;
HXDLIN(1033)									data171->fPos = (data171->fPos + (int)5);
HXDLIN(1033)									 ::openfl::_internal::renderer::DrawCommandReader data172 = data;
HXDLIN(1033)									data172->oPos = (data172->oPos + (int)1);
            								}
            								break;
            								case (int)12: {
HXLINE(1033)									 ::openfl::_internal::renderer::DrawCommandReader data173 = data;
HXDLIN(1033)									data173->oPos = (data173->oPos + (int)4);
            								}
            								break;
            								case (int)13: {
            								}
            								break;
            								case (int)14: {
HXLINE(1033)									 ::openfl::_internal::renderer::DrawCommandReader data174 = data;
HXDLIN(1033)									data174->oPos = (data174->oPos + (int)2);
HXDLIN(1033)									 ::openfl::_internal::renderer::DrawCommandReader data175 = data;
HXDLIN(1033)									data175->bPos = (data175->bPos + (int)2);
            								}
            								break;
            								case (int)15: {
HXLINE(1033)									 ::openfl::_internal::renderer::DrawCommandReader data176 = data;
HXDLIN(1033)									data176->oPos = (data176->oPos + (int)4);
HXDLIN(1033)									 ::openfl::_internal::renderer::DrawCommandReader data177 = data;
HXDLIN(1033)									data177->iiPos = (data177->iiPos + (int)2);
HXDLIN(1033)									 ::openfl::_internal::renderer::DrawCommandReader data178 = data;
HXDLIN(1033)									data178->ffPos = (data178->ffPos + (int)1);
HXDLIN(1033)									 ::openfl::_internal::renderer::DrawCommandReader data179 = data;
HXDLIN(1033)									data179->fPos = (data179->fPos + (int)1);
            								}
            								break;
            								case (int)16: {
HXLINE(1033)									 ::openfl::_internal::renderer::DrawCommandReader data180 = data;
HXDLIN(1033)									data180->oPos = (data180->oPos + (int)4);
HXDLIN(1033)									 ::openfl::_internal::renderer::DrawCommandReader data181 = data;
HXDLIN(1033)									data181->iPos = (data181->iPos + (int)1);
HXDLIN(1033)									 ::openfl::_internal::renderer::DrawCommandReader data182 = data;
HXDLIN(1033)									data182->fPos = (data182->fPos + (int)2);
HXDLIN(1033)									 ::openfl::_internal::renderer::DrawCommandReader data183 = data;
HXDLIN(1033)									data183->bPos = (data183->bPos + (int)1);
            								}
            								break;
            								case (int)17: {
HXLINE(1033)									 ::openfl::_internal::renderer::DrawCommandReader data184 = data;
HXDLIN(1033)									data184->fPos = (data184->fPos + (int)2);
            								}
            								break;
            								case (int)18: {
HXLINE(1033)									 ::openfl::_internal::renderer::DrawCommandReader data185 = data;
HXDLIN(1033)									data185->fPos = (data185->fPos + (int)2);
            								}
            								break;
            								case (int)19: {
HXLINE(1033)									 ::openfl::_internal::renderer::DrawCommandReader data186 = data;
HXDLIN(1033)									data186->oPos = (data186->oPos + (int)1);
            								}
            								break;
            								case (int)20: case (int)21: {
            								}
            								break;
            								default:{
            								}
            							}
            						}
HXLINE(1033)						data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::DRAW_CIRCLE_dyn();
HXDLIN(1033)						 ::openfl::_internal::renderer::DrawCommandReader this6 = data;
HXDLIN(1033)						 ::openfl::_internal::renderer::DrawCommandReader c30 = this6;
HXLINE(1034)						Float c31 = c30->buffer->f->__get(c30->fPos);
HXDLIN(1034)						::Array< Float > c32 = c30->buffer->f;
HXDLIN(1034)						Float c33 = c32->__get((c30->fPos + (int)1));
HXDLIN(1034)						::Array< Float > c34 = c30->buffer->f;
HXDLIN(1034)						path->_hx___drawCircle(c31,c33,c34->__get((c30->fPos + (int)2)));
            					}
            					break;
            					case (int)7: {
HXLINE(1038)						{
HXLINE(1038)							 ::openfl::_internal::renderer::DrawCommandType _g8 = data->prev;
HXDLIN(1038)							switch((int)(_hx_getEnumValueIndex(_g8))){
            								case (int)0: {
HXLINE(1038)									 ::openfl::_internal::renderer::DrawCommandReader data187 = data;
HXDLIN(1038)									data187->oPos = (data187->oPos + (int)2);
HXDLIN(1038)									 ::openfl::_internal::renderer::DrawCommandReader data188 = data;
HXDLIN(1038)									data188->bPos = (data188->bPos + (int)2);
            								}
            								break;
            								case (int)1: {
HXLINE(1038)									 ::openfl::_internal::renderer::DrawCommandReader data189 = data;
HXDLIN(1038)									data189->iPos = (data189->iPos + (int)1);
HXDLIN(1038)									 ::openfl::_internal::renderer::DrawCommandReader data190 = data;
HXDLIN(1038)									data190->fPos = (data190->fPos + (int)1);
            								}
            								break;
            								case (int)2: {
HXLINE(1038)									 ::openfl::_internal::renderer::DrawCommandReader data191 = data;
HXDLIN(1038)									data191->oPos = (data191->oPos + (int)4);
HXDLIN(1038)									 ::openfl::_internal::renderer::DrawCommandReader data192 = data;
HXDLIN(1038)									data192->iiPos = (data192->iiPos + (int)2);
HXDLIN(1038)									 ::openfl::_internal::renderer::DrawCommandReader data193 = data;
HXDLIN(1038)									data193->ffPos = (data193->ffPos + (int)1);
HXDLIN(1038)									 ::openfl::_internal::renderer::DrawCommandReader data194 = data;
HXDLIN(1038)									data194->fPos = (data194->fPos + (int)1);
            								}
            								break;
            								case (int)3: {
HXLINE(1038)									 ::openfl::_internal::renderer::DrawCommandReader data195 = data;
HXDLIN(1038)									data195->oPos = (data195->oPos + (int)1);
            								}
            								break;
            								case (int)4: {
HXLINE(1038)									 ::openfl::_internal::renderer::DrawCommandReader data196 = data;
HXDLIN(1038)									data196->fPos = (data196->fPos + (int)6);
            								}
            								break;
            								case (int)5: {
HXLINE(1038)									 ::openfl::_internal::renderer::DrawCommandReader data197 = data;
HXDLIN(1038)									data197->fPos = (data197->fPos + (int)4);
            								}
            								break;
            								case (int)6: {
HXLINE(1038)									 ::openfl::_internal::renderer::DrawCommandReader data198 = data;
HXDLIN(1038)									data198->fPos = (data198->fPos + (int)3);
            								}
            								break;
            								case (int)7: {
HXLINE(1038)									 ::openfl::_internal::renderer::DrawCommandReader data199 = data;
HXDLIN(1038)									data199->fPos = (data199->fPos + (int)4);
            								}
            								break;
            								case (int)8: {
HXLINE(1038)									 ::openfl::_internal::renderer::DrawCommandReader data200 = data;
HXDLIN(1038)									data200->oPos = (data200->oPos + (int)3);
            								}
            								break;
            								case (int)9: {
HXLINE(1038)									 ::openfl::_internal::renderer::DrawCommandReader data201 = data;
HXDLIN(1038)									data201->fPos = (data201->fPos + (int)4);
            								}
            								break;
            								case (int)10: {
HXLINE(1038)									 ::openfl::_internal::renderer::DrawCommandReader data202 = data;
HXDLIN(1038)									data202->fPos = (data202->fPos + (int)5);
HXDLIN(1038)									 ::openfl::_internal::renderer::DrawCommandReader data203 = data;
HXDLIN(1038)									data203->oPos = (data203->oPos + (int)1);
            								}
            								break;
            								case (int)12: {
HXLINE(1038)									 ::openfl::_internal::renderer::DrawCommandReader data204 = data;
HXDLIN(1038)									data204->oPos = (data204->oPos + (int)4);
            								}
            								break;
            								case (int)13: {
            								}
            								break;
            								case (int)14: {
HXLINE(1038)									 ::openfl::_internal::renderer::DrawCommandReader data205 = data;
HXDLIN(1038)									data205->oPos = (data205->oPos + (int)2);
HXDLIN(1038)									 ::openfl::_internal::renderer::DrawCommandReader data206 = data;
HXDLIN(1038)									data206->bPos = (data206->bPos + (int)2);
            								}
            								break;
            								case (int)15: {
HXLINE(1038)									 ::openfl::_internal::renderer::DrawCommandReader data207 = data;
HXDLIN(1038)									data207->oPos = (data207->oPos + (int)4);
HXDLIN(1038)									 ::openfl::_internal::renderer::DrawCommandReader data208 = data;
HXDLIN(1038)									data208->iiPos = (data208->iiPos + (int)2);
HXDLIN(1038)									 ::openfl::_internal::renderer::DrawCommandReader data209 = data;
HXDLIN(1038)									data209->ffPos = (data209->ffPos + (int)1);
HXDLIN(1038)									 ::openfl::_internal::renderer::DrawCommandReader data210 = data;
HXDLIN(1038)									data210->fPos = (data210->fPos + (int)1);
            								}
            								break;
            								case (int)16: {
HXLINE(1038)									 ::openfl::_internal::renderer::DrawCommandReader data211 = data;
HXDLIN(1038)									data211->oPos = (data211->oPos + (int)4);
HXDLIN(1038)									 ::openfl::_internal::renderer::DrawCommandReader data212 = data;
HXDLIN(1038)									data212->iPos = (data212->iPos + (int)1);
HXDLIN(1038)									 ::openfl::_internal::renderer::DrawCommandReader data213 = data;
HXDLIN(1038)									data213->fPos = (data213->fPos + (int)2);
HXDLIN(1038)									 ::openfl::_internal::renderer::DrawCommandReader data214 = data;
HXDLIN(1038)									data214->bPos = (data214->bPos + (int)1);
            								}
            								break;
            								case (int)17: {
HXLINE(1038)									 ::openfl::_internal::renderer::DrawCommandReader data215 = data;
HXDLIN(1038)									data215->fPos = (data215->fPos + (int)2);
            								}
            								break;
            								case (int)18: {
HXLINE(1038)									 ::openfl::_internal::renderer::DrawCommandReader data216 = data;
HXDLIN(1038)									data216->fPos = (data216->fPos + (int)2);
            								}
            								break;
            								case (int)19: {
HXLINE(1038)									 ::openfl::_internal::renderer::DrawCommandReader data217 = data;
HXDLIN(1038)									data217->oPos = (data217->oPos + (int)1);
            								}
            								break;
            								case (int)20: case (int)21: {
            								}
            								break;
            								default:{
            								}
            							}
            						}
HXLINE(1038)						data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::DRAW_ELLIPSE_dyn();
HXDLIN(1038)						 ::openfl::_internal::renderer::DrawCommandReader this7 = data;
HXDLIN(1038)						 ::openfl::_internal::renderer::DrawCommandReader c35 = this7;
HXLINE(1039)						Float c36 = c35->buffer->f->__get(c35->fPos);
HXDLIN(1039)						::Array< Float > c37 = c35->buffer->f;
HXDLIN(1039)						Float c38 = c37->__get((c35->fPos + (int)1));
HXDLIN(1039)						::Array< Float > c39 = c35->buffer->f;
HXDLIN(1039)						Float c40 = c39->__get((c35->fPos + (int)2));
HXDLIN(1039)						::Array< Float > c41 = c35->buffer->f;
HXDLIN(1039)						path->_hx___drawEllipse(c36,c38,c40,c41->__get((c35->fPos + (int)3)));
            					}
            					break;
            					case (int)9: {
HXLINE(1043)						{
HXLINE(1043)							 ::openfl::_internal::renderer::DrawCommandType _g9 = data->prev;
HXDLIN(1043)							switch((int)(_hx_getEnumValueIndex(_g9))){
            								case (int)0: {
HXLINE(1043)									 ::openfl::_internal::renderer::DrawCommandReader data218 = data;
HXDLIN(1043)									data218->oPos = (data218->oPos + (int)2);
HXDLIN(1043)									 ::openfl::_internal::renderer::DrawCommandReader data219 = data;
HXDLIN(1043)									data219->bPos = (data219->bPos + (int)2);
            								}
            								break;
            								case (int)1: {
HXLINE(1043)									 ::openfl::_internal::renderer::DrawCommandReader data220 = data;
HXDLIN(1043)									data220->iPos = (data220->iPos + (int)1);
HXDLIN(1043)									 ::openfl::_internal::renderer::DrawCommandReader data221 = data;
HXDLIN(1043)									data221->fPos = (data221->fPos + (int)1);
            								}
            								break;
            								case (int)2: {
HXLINE(1043)									 ::openfl::_internal::renderer::DrawCommandReader data222 = data;
HXDLIN(1043)									data222->oPos = (data222->oPos + (int)4);
HXDLIN(1043)									 ::openfl::_internal::renderer::DrawCommandReader data223 = data;
HXDLIN(1043)									data223->iiPos = (data223->iiPos + (int)2);
HXDLIN(1043)									 ::openfl::_internal::renderer::DrawCommandReader data224 = data;
HXDLIN(1043)									data224->ffPos = (data224->ffPos + (int)1);
HXDLIN(1043)									 ::openfl::_internal::renderer::DrawCommandReader data225 = data;
HXDLIN(1043)									data225->fPos = (data225->fPos + (int)1);
            								}
            								break;
            								case (int)3: {
HXLINE(1043)									 ::openfl::_internal::renderer::DrawCommandReader data226 = data;
HXDLIN(1043)									data226->oPos = (data226->oPos + (int)1);
            								}
            								break;
            								case (int)4: {
HXLINE(1043)									 ::openfl::_internal::renderer::DrawCommandReader data227 = data;
HXDLIN(1043)									data227->fPos = (data227->fPos + (int)6);
            								}
            								break;
            								case (int)5: {
HXLINE(1043)									 ::openfl::_internal::renderer::DrawCommandReader data228 = data;
HXDLIN(1043)									data228->fPos = (data228->fPos + (int)4);
            								}
            								break;
            								case (int)6: {
HXLINE(1043)									 ::openfl::_internal::renderer::DrawCommandReader data229 = data;
HXDLIN(1043)									data229->fPos = (data229->fPos + (int)3);
            								}
            								break;
            								case (int)7: {
HXLINE(1043)									 ::openfl::_internal::renderer::DrawCommandReader data230 = data;
HXDLIN(1043)									data230->fPos = (data230->fPos + (int)4);
            								}
            								break;
            								case (int)8: {
HXLINE(1043)									 ::openfl::_internal::renderer::DrawCommandReader data231 = data;
HXDLIN(1043)									data231->oPos = (data231->oPos + (int)3);
            								}
            								break;
            								case (int)9: {
HXLINE(1043)									 ::openfl::_internal::renderer::DrawCommandReader data232 = data;
HXDLIN(1043)									data232->fPos = (data232->fPos + (int)4);
            								}
            								break;
            								case (int)10: {
HXLINE(1043)									 ::openfl::_internal::renderer::DrawCommandReader data233 = data;
HXDLIN(1043)									data233->fPos = (data233->fPos + (int)5);
HXDLIN(1043)									 ::openfl::_internal::renderer::DrawCommandReader data234 = data;
HXDLIN(1043)									data234->oPos = (data234->oPos + (int)1);
            								}
            								break;
            								case (int)12: {
HXLINE(1043)									 ::openfl::_internal::renderer::DrawCommandReader data235 = data;
HXDLIN(1043)									data235->oPos = (data235->oPos + (int)4);
            								}
            								break;
            								case (int)13: {
            								}
            								break;
            								case (int)14: {
HXLINE(1043)									 ::openfl::_internal::renderer::DrawCommandReader data236 = data;
HXDLIN(1043)									data236->oPos = (data236->oPos + (int)2);
HXDLIN(1043)									 ::openfl::_internal::renderer::DrawCommandReader data237 = data;
HXDLIN(1043)									data237->bPos = (data237->bPos + (int)2);
            								}
            								break;
            								case (int)15: {
HXLINE(1043)									 ::openfl::_internal::renderer::DrawCommandReader data238 = data;
HXDLIN(1043)									data238->oPos = (data238->oPos + (int)4);
HXDLIN(1043)									 ::openfl::_internal::renderer::DrawCommandReader data239 = data;
HXDLIN(1043)									data239->iiPos = (data239->iiPos + (int)2);
HXDLIN(1043)									 ::openfl::_internal::renderer::DrawCommandReader data240 = data;
HXDLIN(1043)									data240->ffPos = (data240->ffPos + (int)1);
HXDLIN(1043)									 ::openfl::_internal::renderer::DrawCommandReader data241 = data;
HXDLIN(1043)									data241->fPos = (data241->fPos + (int)1);
            								}
            								break;
            								case (int)16: {
HXLINE(1043)									 ::openfl::_internal::renderer::DrawCommandReader data242 = data;
HXDLIN(1043)									data242->oPos = (data242->oPos + (int)4);
HXDLIN(1043)									 ::openfl::_internal::renderer::DrawCommandReader data243 = data;
HXDLIN(1043)									data243->iPos = (data243->iPos + (int)1);
HXDLIN(1043)									 ::openfl::_internal::renderer::DrawCommandReader data244 = data;
HXDLIN(1043)									data244->fPos = (data244->fPos + (int)2);
HXDLIN(1043)									 ::openfl::_internal::renderer::DrawCommandReader data245 = data;
HXDLIN(1043)									data245->bPos = (data245->bPos + (int)1);
            								}
            								break;
            								case (int)17: {
HXLINE(1043)									 ::openfl::_internal::renderer::DrawCommandReader data246 = data;
HXDLIN(1043)									data246->fPos = (data246->fPos + (int)2);
            								}
            								break;
            								case (int)18: {
HXLINE(1043)									 ::openfl::_internal::renderer::DrawCommandReader data247 = data;
HXDLIN(1043)									data247->fPos = (data247->fPos + (int)2);
            								}
            								break;
            								case (int)19: {
HXLINE(1043)									 ::openfl::_internal::renderer::DrawCommandReader data248 = data;
HXDLIN(1043)									data248->oPos = (data248->oPos + (int)1);
            								}
            								break;
            								case (int)20: case (int)21: {
            								}
            								break;
            								default:{
            								}
            							}
            						}
HXLINE(1043)						data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::DRAW_RECT_dyn();
HXDLIN(1043)						 ::openfl::_internal::renderer::DrawCommandReader this8 = data;
HXDLIN(1043)						 ::openfl::_internal::renderer::DrawCommandReader c42 = this8;
HXLINE(1044)						Float c43 = c42->buffer->f->__get(c42->fPos);
HXDLIN(1044)						::Array< Float > c44 = c42->buffer->f;
HXDLIN(1044)						Float c45 = c44->__get((c42->fPos + (int)1));
HXDLIN(1044)						::Array< Float > c46 = c42->buffer->f;
HXDLIN(1044)						Float c47 = c46->__get((c42->fPos + (int)2));
HXDLIN(1044)						::Array< Float > c48 = c42->buffer->f;
HXDLIN(1044)						path->_hx___drawRect(c43,c45,c47,c48->__get((c42->fPos + (int)3)));
            					}
            					break;
            					case (int)10: {
HXLINE(1048)						{
HXLINE(1048)							 ::openfl::_internal::renderer::DrawCommandType _g10 = data->prev;
HXDLIN(1048)							switch((int)(_hx_getEnumValueIndex(_g10))){
            								case (int)0: {
HXLINE(1048)									 ::openfl::_internal::renderer::DrawCommandReader data249 = data;
HXDLIN(1048)									data249->oPos = (data249->oPos + (int)2);
HXDLIN(1048)									 ::openfl::_internal::renderer::DrawCommandReader data250 = data;
HXDLIN(1048)									data250->bPos = (data250->bPos + (int)2);
            								}
            								break;
            								case (int)1: {
HXLINE(1048)									 ::openfl::_internal::renderer::DrawCommandReader data251 = data;
HXDLIN(1048)									data251->iPos = (data251->iPos + (int)1);
HXDLIN(1048)									 ::openfl::_internal::renderer::DrawCommandReader data252 = data;
HXDLIN(1048)									data252->fPos = (data252->fPos + (int)1);
            								}
            								break;
            								case (int)2: {
HXLINE(1048)									 ::openfl::_internal::renderer::DrawCommandReader data253 = data;
HXDLIN(1048)									data253->oPos = (data253->oPos + (int)4);
HXDLIN(1048)									 ::openfl::_internal::renderer::DrawCommandReader data254 = data;
HXDLIN(1048)									data254->iiPos = (data254->iiPos + (int)2);
HXDLIN(1048)									 ::openfl::_internal::renderer::DrawCommandReader data255 = data;
HXDLIN(1048)									data255->ffPos = (data255->ffPos + (int)1);
HXDLIN(1048)									 ::openfl::_internal::renderer::DrawCommandReader data256 = data;
HXDLIN(1048)									data256->fPos = (data256->fPos + (int)1);
            								}
            								break;
            								case (int)3: {
HXLINE(1048)									 ::openfl::_internal::renderer::DrawCommandReader data257 = data;
HXDLIN(1048)									data257->oPos = (data257->oPos + (int)1);
            								}
            								break;
            								case (int)4: {
HXLINE(1048)									 ::openfl::_internal::renderer::DrawCommandReader data258 = data;
HXDLIN(1048)									data258->fPos = (data258->fPos + (int)6);
            								}
            								break;
            								case (int)5: {
HXLINE(1048)									 ::openfl::_internal::renderer::DrawCommandReader data259 = data;
HXDLIN(1048)									data259->fPos = (data259->fPos + (int)4);
            								}
            								break;
            								case (int)6: {
HXLINE(1048)									 ::openfl::_internal::renderer::DrawCommandReader data260 = data;
HXDLIN(1048)									data260->fPos = (data260->fPos + (int)3);
            								}
            								break;
            								case (int)7: {
HXLINE(1048)									 ::openfl::_internal::renderer::DrawCommandReader data261 = data;
HXDLIN(1048)									data261->fPos = (data261->fPos + (int)4);
            								}
            								break;
            								case (int)8: {
HXLINE(1048)									 ::openfl::_internal::renderer::DrawCommandReader data262 = data;
HXDLIN(1048)									data262->oPos = (data262->oPos + (int)3);
            								}
            								break;
            								case (int)9: {
HXLINE(1048)									 ::openfl::_internal::renderer::DrawCommandReader data263 = data;
HXDLIN(1048)									data263->fPos = (data263->fPos + (int)4);
            								}
            								break;
            								case (int)10: {
HXLINE(1048)									 ::openfl::_internal::renderer::DrawCommandReader data264 = data;
HXDLIN(1048)									data264->fPos = (data264->fPos + (int)5);
HXDLIN(1048)									 ::openfl::_internal::renderer::DrawCommandReader data265 = data;
HXDLIN(1048)									data265->oPos = (data265->oPos + (int)1);
            								}
            								break;
            								case (int)12: {
HXLINE(1048)									 ::openfl::_internal::renderer::DrawCommandReader data266 = data;
HXDLIN(1048)									data266->oPos = (data266->oPos + (int)4);
            								}
            								break;
            								case (int)13: {
            								}
            								break;
            								case (int)14: {
HXLINE(1048)									 ::openfl::_internal::renderer::DrawCommandReader data267 = data;
HXDLIN(1048)									data267->oPos = (data267->oPos + (int)2);
HXDLIN(1048)									 ::openfl::_internal::renderer::DrawCommandReader data268 = data;
HXDLIN(1048)									data268->bPos = (data268->bPos + (int)2);
            								}
            								break;
            								case (int)15: {
HXLINE(1048)									 ::openfl::_internal::renderer::DrawCommandReader data269 = data;
HXDLIN(1048)									data269->oPos = (data269->oPos + (int)4);
HXDLIN(1048)									 ::openfl::_internal::renderer::DrawCommandReader data270 = data;
HXDLIN(1048)									data270->iiPos = (data270->iiPos + (int)2);
HXDLIN(1048)									 ::openfl::_internal::renderer::DrawCommandReader data271 = data;
HXDLIN(1048)									data271->ffPos = (data271->ffPos + (int)1);
HXDLIN(1048)									 ::openfl::_internal::renderer::DrawCommandReader data272 = data;
HXDLIN(1048)									data272->fPos = (data272->fPos + (int)1);
            								}
            								break;
            								case (int)16: {
HXLINE(1048)									 ::openfl::_internal::renderer::DrawCommandReader data273 = data;
HXDLIN(1048)									data273->oPos = (data273->oPos + (int)4);
HXDLIN(1048)									 ::openfl::_internal::renderer::DrawCommandReader data274 = data;
HXDLIN(1048)									data274->iPos = (data274->iPos + (int)1);
HXDLIN(1048)									 ::openfl::_internal::renderer::DrawCommandReader data275 = data;
HXDLIN(1048)									data275->fPos = (data275->fPos + (int)2);
HXDLIN(1048)									 ::openfl::_internal::renderer::DrawCommandReader data276 = data;
HXDLIN(1048)									data276->bPos = (data276->bPos + (int)1);
            								}
            								break;
            								case (int)17: {
HXLINE(1048)									 ::openfl::_internal::renderer::DrawCommandReader data277 = data;
HXDLIN(1048)									data277->fPos = (data277->fPos + (int)2);
            								}
            								break;
            								case (int)18: {
HXLINE(1048)									 ::openfl::_internal::renderer::DrawCommandReader data278 = data;
HXDLIN(1048)									data278->fPos = (data278->fPos + (int)2);
            								}
            								break;
            								case (int)19: {
HXLINE(1048)									 ::openfl::_internal::renderer::DrawCommandReader data279 = data;
HXDLIN(1048)									data279->oPos = (data279->oPos + (int)1);
            								}
            								break;
            								case (int)20: case (int)21: {
            								}
            								break;
            								default:{
            								}
            							}
            						}
HXLINE(1048)						data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::DRAW_ROUND_RECT_dyn();
HXDLIN(1048)						 ::openfl::_internal::renderer::DrawCommandReader this9 = data;
HXDLIN(1048)						 ::openfl::_internal::renderer::DrawCommandReader c49 = this9;
HXLINE(1049)						Float c50 = c49->buffer->f->__get(c49->fPos);
HXDLIN(1049)						::Array< Float > c51 = c49->buffer->f;
HXDLIN(1049)						Float c52 = c51->__get((c49->fPos + (int)1));
HXDLIN(1049)						::Array< Float > c53 = c49->buffer->f;
HXDLIN(1049)						Float c54 = c53->__get((c49->fPos + (int)2));
HXDLIN(1049)						::Array< Float > c55 = c49->buffer->f;
HXDLIN(1049)						Float c56 = c55->__get((c49->fPos + (int)3));
HXDLIN(1049)						::Array< Float > c57 = c49->buffer->f;
HXDLIN(1049)						Float _hx_tmp;
HXDLIN(1049)						if (hx::IsNotNull( c49->buffer->o->__get(c49->oPos) )) {
HXLINE(1049)							_hx_tmp = ( (Float)(c49->buffer->o->__get(c49->oPos)) );
            						}
            						else {
HXLINE(1049)							::Array< Float > c58 = c49->buffer->f;
HXDLIN(1049)							_hx_tmp = c58->__get((c49->fPos + (int)4));
            						}
HXDLIN(1049)						path->_hx___drawRoundRect(c50,c52,c54,c56,c57->__get((c49->fPos + (int)4)),_hx_tmp);
            					}
            					break;
            					case (int)13: {
HXLINE(1079)						{
HXLINE(1079)							{
HXLINE(1079)								 ::openfl::_internal::renderer::DrawCommandType _g11 = data->prev;
HXDLIN(1079)								switch((int)(_hx_getEnumValueIndex(_g11))){
            									case (int)0: {
HXLINE(1079)										 ::openfl::_internal::renderer::DrawCommandReader data280 = data;
HXDLIN(1079)										data280->oPos = (data280->oPos + (int)2);
HXDLIN(1079)										 ::openfl::_internal::renderer::DrawCommandReader data281 = data;
HXDLIN(1079)										data281->bPos = (data281->bPos + (int)2);
            									}
            									break;
            									case (int)1: {
HXLINE(1079)										 ::openfl::_internal::renderer::DrawCommandReader data282 = data;
HXDLIN(1079)										data282->iPos = (data282->iPos + (int)1);
HXDLIN(1079)										 ::openfl::_internal::renderer::DrawCommandReader data283 = data;
HXDLIN(1079)										data283->fPos = (data283->fPos + (int)1);
            									}
            									break;
            									case (int)2: {
HXLINE(1079)										 ::openfl::_internal::renderer::DrawCommandReader data284 = data;
HXDLIN(1079)										data284->oPos = (data284->oPos + (int)4);
HXDLIN(1079)										 ::openfl::_internal::renderer::DrawCommandReader data285 = data;
HXDLIN(1079)										data285->iiPos = (data285->iiPos + (int)2);
HXDLIN(1079)										 ::openfl::_internal::renderer::DrawCommandReader data286 = data;
HXDLIN(1079)										data286->ffPos = (data286->ffPos + (int)1);
HXDLIN(1079)										 ::openfl::_internal::renderer::DrawCommandReader data287 = data;
HXDLIN(1079)										data287->fPos = (data287->fPos + (int)1);
            									}
            									break;
            									case (int)3: {
HXLINE(1079)										 ::openfl::_internal::renderer::DrawCommandReader data288 = data;
HXDLIN(1079)										data288->oPos = (data288->oPos + (int)1);
            									}
            									break;
            									case (int)4: {
HXLINE(1079)										 ::openfl::_internal::renderer::DrawCommandReader data289 = data;
HXDLIN(1079)										data289->fPos = (data289->fPos + (int)6);
            									}
            									break;
            									case (int)5: {
HXLINE(1079)										 ::openfl::_internal::renderer::DrawCommandReader data290 = data;
HXDLIN(1079)										data290->fPos = (data290->fPos + (int)4);
            									}
            									break;
            									case (int)6: {
HXLINE(1079)										 ::openfl::_internal::renderer::DrawCommandReader data291 = data;
HXDLIN(1079)										data291->fPos = (data291->fPos + (int)3);
            									}
            									break;
            									case (int)7: {
HXLINE(1079)										 ::openfl::_internal::renderer::DrawCommandReader data292 = data;
HXDLIN(1079)										data292->fPos = (data292->fPos + (int)4);
            									}
            									break;
            									case (int)8: {
HXLINE(1079)										 ::openfl::_internal::renderer::DrawCommandReader data293 = data;
HXDLIN(1079)										data293->oPos = (data293->oPos + (int)3);
            									}
            									break;
            									case (int)9: {
HXLINE(1079)										 ::openfl::_internal::renderer::DrawCommandReader data294 = data;
HXDLIN(1079)										data294->fPos = (data294->fPos + (int)4);
            									}
            									break;
            									case (int)10: {
HXLINE(1079)										 ::openfl::_internal::renderer::DrawCommandReader data295 = data;
HXDLIN(1079)										data295->fPos = (data295->fPos + (int)5);
HXDLIN(1079)										 ::openfl::_internal::renderer::DrawCommandReader data296 = data;
HXDLIN(1079)										data296->oPos = (data296->oPos + (int)1);
            									}
            									break;
            									case (int)12: {
HXLINE(1079)										 ::openfl::_internal::renderer::DrawCommandReader data297 = data;
HXDLIN(1079)										data297->oPos = (data297->oPos + (int)4);
            									}
            									break;
            									case (int)13: {
            									}
            									break;
            									case (int)14: {
HXLINE(1079)										 ::openfl::_internal::renderer::DrawCommandReader data298 = data;
HXDLIN(1079)										data298->oPos = (data298->oPos + (int)2);
HXDLIN(1079)										 ::openfl::_internal::renderer::DrawCommandReader data299 = data;
HXDLIN(1079)										data299->bPos = (data299->bPos + (int)2);
            									}
            									break;
            									case (int)15: {
HXLINE(1079)										 ::openfl::_internal::renderer::DrawCommandReader data300 = data;
HXDLIN(1079)										data300->oPos = (data300->oPos + (int)4);
HXDLIN(1079)										 ::openfl::_internal::renderer::DrawCommandReader data301 = data;
HXDLIN(1079)										data301->iiPos = (data301->iiPos + (int)2);
HXDLIN(1079)										 ::openfl::_internal::renderer::DrawCommandReader data302 = data;
HXDLIN(1079)										data302->ffPos = (data302->ffPos + (int)1);
HXDLIN(1079)										 ::openfl::_internal::renderer::DrawCommandReader data303 = data;
HXDLIN(1079)										data303->fPos = (data303->fPos + (int)1);
            									}
            									break;
            									case (int)16: {
HXLINE(1079)										 ::openfl::_internal::renderer::DrawCommandReader data304 = data;
HXDLIN(1079)										data304->oPos = (data304->oPos + (int)4);
HXDLIN(1079)										 ::openfl::_internal::renderer::DrawCommandReader data305 = data;
HXDLIN(1079)										data305->iPos = (data305->iPos + (int)1);
HXDLIN(1079)										 ::openfl::_internal::renderer::DrawCommandReader data306 = data;
HXDLIN(1079)										data306->fPos = (data306->fPos + (int)2);
HXDLIN(1079)										 ::openfl::_internal::renderer::DrawCommandReader data307 = data;
HXDLIN(1079)										data307->bPos = (data307->bPos + (int)1);
            									}
            									break;
            									case (int)17: {
HXLINE(1079)										 ::openfl::_internal::renderer::DrawCommandReader data308 = data;
HXDLIN(1079)										data308->fPos = (data308->fPos + (int)2);
            									}
            									break;
            									case (int)18: {
HXLINE(1079)										 ::openfl::_internal::renderer::DrawCommandReader data309 = data;
HXDLIN(1079)										data309->fPos = (data309->fPos + (int)2);
            									}
            									break;
            									case (int)19: {
HXLINE(1079)										 ::openfl::_internal::renderer::DrawCommandReader data310 = data;
HXDLIN(1079)										data310->oPos = (data310->oPos + (int)1);
            									}
            									break;
            									case (int)20: case (int)21: {
            									}
            									break;
            									default:{
            									}
            								}
            							}
HXLINE(1079)							data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::END_FILL_dyn();
HXDLIN(1079)							 ::openfl::_internal::renderer::DrawCommandReader this10 = data;
            						}
HXLINE(1080)						graphicsData->push( ::openfl::display::GraphicsEndFill_obj::__alloc( HX_CTX ));
            					}
            					break;
            					case (int)14: {
HXLINE(1064)						{
HXLINE(1064)							 ::openfl::_internal::renderer::DrawCommandType _g12 = data->prev;
HXDLIN(1064)							switch((int)(_hx_getEnumValueIndex(_g12))){
            								case (int)0: {
HXLINE(1064)									 ::openfl::_internal::renderer::DrawCommandReader data311 = data;
HXDLIN(1064)									data311->oPos = (data311->oPos + (int)2);
HXDLIN(1064)									 ::openfl::_internal::renderer::DrawCommandReader data312 = data;
HXDLIN(1064)									data312->bPos = (data312->bPos + (int)2);
            								}
            								break;
            								case (int)1: {
HXLINE(1064)									 ::openfl::_internal::renderer::DrawCommandReader data313 = data;
HXDLIN(1064)									data313->iPos = (data313->iPos + (int)1);
HXDLIN(1064)									 ::openfl::_internal::renderer::DrawCommandReader data314 = data;
HXDLIN(1064)									data314->fPos = (data314->fPos + (int)1);
            								}
            								break;
            								case (int)2: {
HXLINE(1064)									 ::openfl::_internal::renderer::DrawCommandReader data315 = data;
HXDLIN(1064)									data315->oPos = (data315->oPos + (int)4);
HXDLIN(1064)									 ::openfl::_internal::renderer::DrawCommandReader data316 = data;
HXDLIN(1064)									data316->iiPos = (data316->iiPos + (int)2);
HXDLIN(1064)									 ::openfl::_internal::renderer::DrawCommandReader data317 = data;
HXDLIN(1064)									data317->ffPos = (data317->ffPos + (int)1);
HXDLIN(1064)									 ::openfl::_internal::renderer::DrawCommandReader data318 = data;
HXDLIN(1064)									data318->fPos = (data318->fPos + (int)1);
            								}
            								break;
            								case (int)3: {
HXLINE(1064)									 ::openfl::_internal::renderer::DrawCommandReader data319 = data;
HXDLIN(1064)									data319->oPos = (data319->oPos + (int)1);
            								}
            								break;
            								case (int)4: {
HXLINE(1064)									 ::openfl::_internal::renderer::DrawCommandReader data320 = data;
HXDLIN(1064)									data320->fPos = (data320->fPos + (int)6);
            								}
            								break;
            								case (int)5: {
HXLINE(1064)									 ::openfl::_internal::renderer::DrawCommandReader data321 = data;
HXDLIN(1064)									data321->fPos = (data321->fPos + (int)4);
            								}
            								break;
            								case (int)6: {
HXLINE(1064)									 ::openfl::_internal::renderer::DrawCommandReader data322 = data;
HXDLIN(1064)									data322->fPos = (data322->fPos + (int)3);
            								}
            								break;
            								case (int)7: {
HXLINE(1064)									 ::openfl::_internal::renderer::DrawCommandReader data323 = data;
HXDLIN(1064)									data323->fPos = (data323->fPos + (int)4);
            								}
            								break;
            								case (int)8: {
HXLINE(1064)									 ::openfl::_internal::renderer::DrawCommandReader data324 = data;
HXDLIN(1064)									data324->oPos = (data324->oPos + (int)3);
            								}
            								break;
            								case (int)9: {
HXLINE(1064)									 ::openfl::_internal::renderer::DrawCommandReader data325 = data;
HXDLIN(1064)									data325->fPos = (data325->fPos + (int)4);
            								}
            								break;
            								case (int)10: {
HXLINE(1064)									 ::openfl::_internal::renderer::DrawCommandReader data326 = data;
HXDLIN(1064)									data326->fPos = (data326->fPos + (int)5);
HXDLIN(1064)									 ::openfl::_internal::renderer::DrawCommandReader data327 = data;
HXDLIN(1064)									data327->oPos = (data327->oPos + (int)1);
            								}
            								break;
            								case (int)12: {
HXLINE(1064)									 ::openfl::_internal::renderer::DrawCommandReader data328 = data;
HXDLIN(1064)									data328->oPos = (data328->oPos + (int)4);
            								}
            								break;
            								case (int)13: {
            								}
            								break;
            								case (int)14: {
HXLINE(1064)									 ::openfl::_internal::renderer::DrawCommandReader data329 = data;
HXDLIN(1064)									data329->oPos = (data329->oPos + (int)2);
HXDLIN(1064)									 ::openfl::_internal::renderer::DrawCommandReader data330 = data;
HXDLIN(1064)									data330->bPos = (data330->bPos + (int)2);
            								}
            								break;
            								case (int)15: {
HXLINE(1064)									 ::openfl::_internal::renderer::DrawCommandReader data331 = data;
HXDLIN(1064)									data331->oPos = (data331->oPos + (int)4);
HXDLIN(1064)									 ::openfl::_internal::renderer::DrawCommandReader data332 = data;
HXDLIN(1064)									data332->iiPos = (data332->iiPos + (int)2);
HXDLIN(1064)									 ::openfl::_internal::renderer::DrawCommandReader data333 = data;
HXDLIN(1064)									data333->ffPos = (data333->ffPos + (int)1);
HXDLIN(1064)									 ::openfl::_internal::renderer::DrawCommandReader data334 = data;
HXDLIN(1064)									data334->fPos = (data334->fPos + (int)1);
            								}
            								break;
            								case (int)16: {
HXLINE(1064)									 ::openfl::_internal::renderer::DrawCommandReader data335 = data;
HXDLIN(1064)									data335->oPos = (data335->oPos + (int)4);
HXDLIN(1064)									 ::openfl::_internal::renderer::DrawCommandReader data336 = data;
HXDLIN(1064)									data336->iPos = (data336->iPos + (int)1);
HXDLIN(1064)									 ::openfl::_internal::renderer::DrawCommandReader data337 = data;
HXDLIN(1064)									data337->fPos = (data337->fPos + (int)2);
HXDLIN(1064)									 ::openfl::_internal::renderer::DrawCommandReader data338 = data;
HXDLIN(1064)									data338->bPos = (data338->bPos + (int)1);
            								}
            								break;
            								case (int)17: {
HXLINE(1064)									 ::openfl::_internal::renderer::DrawCommandReader data339 = data;
HXDLIN(1064)									data339->fPos = (data339->fPos + (int)2);
            								}
            								break;
            								case (int)18: {
HXLINE(1064)									 ::openfl::_internal::renderer::DrawCommandReader data340 = data;
HXDLIN(1064)									data340->fPos = (data340->fPos + (int)2);
            								}
            								break;
            								case (int)19: {
HXLINE(1064)									 ::openfl::_internal::renderer::DrawCommandReader data341 = data;
HXDLIN(1064)									data341->oPos = (data341->oPos + (int)1);
            								}
            								break;
            								case (int)20: case (int)21: {
            								}
            								break;
            								default:{
            								}
            							}
            						}
HXLINE(1064)						data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::LINE_BITMAP_STYLE_dyn();
HXDLIN(1064)						 ::openfl::_internal::renderer::DrawCommandReader this11 = data;
HXDLIN(1064)						 ::openfl::_internal::renderer::DrawCommandReader c59 = this11;
HXLINE(1065)						path = null();
            					}
            					break;
            					case (int)15: {
HXLINE(1055)						{
HXLINE(1055)							 ::openfl::_internal::renderer::DrawCommandType _g13 = data->prev;
HXDLIN(1055)							switch((int)(_hx_getEnumValueIndex(_g13))){
            								case (int)0: {
HXLINE(1055)									 ::openfl::_internal::renderer::DrawCommandReader data342 = data;
HXDLIN(1055)									data342->oPos = (data342->oPos + (int)2);
HXDLIN(1055)									 ::openfl::_internal::renderer::DrawCommandReader data343 = data;
HXDLIN(1055)									data343->bPos = (data343->bPos + (int)2);
            								}
            								break;
            								case (int)1: {
HXLINE(1055)									 ::openfl::_internal::renderer::DrawCommandReader data344 = data;
HXDLIN(1055)									data344->iPos = (data344->iPos + (int)1);
HXDLIN(1055)									 ::openfl::_internal::renderer::DrawCommandReader data345 = data;
HXDLIN(1055)									data345->fPos = (data345->fPos + (int)1);
            								}
            								break;
            								case (int)2: {
HXLINE(1055)									 ::openfl::_internal::renderer::DrawCommandReader data346 = data;
HXDLIN(1055)									data346->oPos = (data346->oPos + (int)4);
HXDLIN(1055)									 ::openfl::_internal::renderer::DrawCommandReader data347 = data;
HXDLIN(1055)									data347->iiPos = (data347->iiPos + (int)2);
HXDLIN(1055)									 ::openfl::_internal::renderer::DrawCommandReader data348 = data;
HXDLIN(1055)									data348->ffPos = (data348->ffPos + (int)1);
HXDLIN(1055)									 ::openfl::_internal::renderer::DrawCommandReader data349 = data;
HXDLIN(1055)									data349->fPos = (data349->fPos + (int)1);
            								}
            								break;
            								case (int)3: {
HXLINE(1055)									 ::openfl::_internal::renderer::DrawCommandReader data350 = data;
HXDLIN(1055)									data350->oPos = (data350->oPos + (int)1);
            								}
            								break;
            								case (int)4: {
HXLINE(1055)									 ::openfl::_internal::renderer::DrawCommandReader data351 = data;
HXDLIN(1055)									data351->fPos = (data351->fPos + (int)6);
            								}
            								break;
            								case (int)5: {
HXLINE(1055)									 ::openfl::_internal::renderer::DrawCommandReader data352 = data;
HXDLIN(1055)									data352->fPos = (data352->fPos + (int)4);
            								}
            								break;
            								case (int)6: {
HXLINE(1055)									 ::openfl::_internal::renderer::DrawCommandReader data353 = data;
HXDLIN(1055)									data353->fPos = (data353->fPos + (int)3);
            								}
            								break;
            								case (int)7: {
HXLINE(1055)									 ::openfl::_internal::renderer::DrawCommandReader data354 = data;
HXDLIN(1055)									data354->fPos = (data354->fPos + (int)4);
            								}
            								break;
            								case (int)8: {
HXLINE(1055)									 ::openfl::_internal::renderer::DrawCommandReader data355 = data;
HXDLIN(1055)									data355->oPos = (data355->oPos + (int)3);
            								}
            								break;
            								case (int)9: {
HXLINE(1055)									 ::openfl::_internal::renderer::DrawCommandReader data356 = data;
HXDLIN(1055)									data356->fPos = (data356->fPos + (int)4);
            								}
            								break;
            								case (int)10: {
HXLINE(1055)									 ::openfl::_internal::renderer::DrawCommandReader data357 = data;
HXDLIN(1055)									data357->fPos = (data357->fPos + (int)5);
HXDLIN(1055)									 ::openfl::_internal::renderer::DrawCommandReader data358 = data;
HXDLIN(1055)									data358->oPos = (data358->oPos + (int)1);
            								}
            								break;
            								case (int)12: {
HXLINE(1055)									 ::openfl::_internal::renderer::DrawCommandReader data359 = data;
HXDLIN(1055)									data359->oPos = (data359->oPos + (int)4);
            								}
            								break;
            								case (int)13: {
            								}
            								break;
            								case (int)14: {
HXLINE(1055)									 ::openfl::_internal::renderer::DrawCommandReader data360 = data;
HXDLIN(1055)									data360->oPos = (data360->oPos + (int)2);
HXDLIN(1055)									 ::openfl::_internal::renderer::DrawCommandReader data361 = data;
HXDLIN(1055)									data361->bPos = (data361->bPos + (int)2);
            								}
            								break;
            								case (int)15: {
HXLINE(1055)									 ::openfl::_internal::renderer::DrawCommandReader data362 = data;
HXDLIN(1055)									data362->oPos = (data362->oPos + (int)4);
HXDLIN(1055)									 ::openfl::_internal::renderer::DrawCommandReader data363 = data;
HXDLIN(1055)									data363->iiPos = (data363->iiPos + (int)2);
HXDLIN(1055)									 ::openfl::_internal::renderer::DrawCommandReader data364 = data;
HXDLIN(1055)									data364->ffPos = (data364->ffPos + (int)1);
HXDLIN(1055)									 ::openfl::_internal::renderer::DrawCommandReader data365 = data;
HXDLIN(1055)									data365->fPos = (data365->fPos + (int)1);
            								}
            								break;
            								case (int)16: {
HXLINE(1055)									 ::openfl::_internal::renderer::DrawCommandReader data366 = data;
HXDLIN(1055)									data366->oPos = (data366->oPos + (int)4);
HXDLIN(1055)									 ::openfl::_internal::renderer::DrawCommandReader data367 = data;
HXDLIN(1055)									data367->iPos = (data367->iPos + (int)1);
HXDLIN(1055)									 ::openfl::_internal::renderer::DrawCommandReader data368 = data;
HXDLIN(1055)									data368->fPos = (data368->fPos + (int)2);
HXDLIN(1055)									 ::openfl::_internal::renderer::DrawCommandReader data369 = data;
HXDLIN(1055)									data369->bPos = (data369->bPos + (int)1);
            								}
            								break;
            								case (int)17: {
HXLINE(1055)									 ::openfl::_internal::renderer::DrawCommandReader data370 = data;
HXDLIN(1055)									data370->fPos = (data370->fPos + (int)2);
            								}
            								break;
            								case (int)18: {
HXLINE(1055)									 ::openfl::_internal::renderer::DrawCommandReader data371 = data;
HXDLIN(1055)									data371->fPos = (data371->fPos + (int)2);
            								}
            								break;
            								case (int)19: {
HXLINE(1055)									 ::openfl::_internal::renderer::DrawCommandReader data372 = data;
HXDLIN(1055)									data372->oPos = (data372->oPos + (int)1);
            								}
            								break;
            								case (int)20: case (int)21: {
            								}
            								break;
            								default:{
            								}
            							}
            						}
HXLINE(1055)						data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::LINE_GRADIENT_STYLE_dyn();
HXDLIN(1055)						 ::openfl::_internal::renderer::DrawCommandReader this12 = data;
HXDLIN(1055)						 ::openfl::_internal::renderer::DrawCommandReader c60 = this12;
            					}
            					break;
            					case (int)16: {
HXLINE(1072)						{
HXLINE(1072)							 ::openfl::_internal::renderer::DrawCommandType _g14 = data->prev;
HXDLIN(1072)							switch((int)(_hx_getEnumValueIndex(_g14))){
            								case (int)0: {
HXLINE(1072)									 ::openfl::_internal::renderer::DrawCommandReader data373 = data;
HXDLIN(1072)									data373->oPos = (data373->oPos + (int)2);
HXDLIN(1072)									 ::openfl::_internal::renderer::DrawCommandReader data374 = data;
HXDLIN(1072)									data374->bPos = (data374->bPos + (int)2);
            								}
            								break;
            								case (int)1: {
HXLINE(1072)									 ::openfl::_internal::renderer::DrawCommandReader data375 = data;
HXDLIN(1072)									data375->iPos = (data375->iPos + (int)1);
HXDLIN(1072)									 ::openfl::_internal::renderer::DrawCommandReader data376 = data;
HXDLIN(1072)									data376->fPos = (data376->fPos + (int)1);
            								}
            								break;
            								case (int)2: {
HXLINE(1072)									 ::openfl::_internal::renderer::DrawCommandReader data377 = data;
HXDLIN(1072)									data377->oPos = (data377->oPos + (int)4);
HXDLIN(1072)									 ::openfl::_internal::renderer::DrawCommandReader data378 = data;
HXDLIN(1072)									data378->iiPos = (data378->iiPos + (int)2);
HXDLIN(1072)									 ::openfl::_internal::renderer::DrawCommandReader data379 = data;
HXDLIN(1072)									data379->ffPos = (data379->ffPos + (int)1);
HXDLIN(1072)									 ::openfl::_internal::renderer::DrawCommandReader data380 = data;
HXDLIN(1072)									data380->fPos = (data380->fPos + (int)1);
            								}
            								break;
            								case (int)3: {
HXLINE(1072)									 ::openfl::_internal::renderer::DrawCommandReader data381 = data;
HXDLIN(1072)									data381->oPos = (data381->oPos + (int)1);
            								}
            								break;
            								case (int)4: {
HXLINE(1072)									 ::openfl::_internal::renderer::DrawCommandReader data382 = data;
HXDLIN(1072)									data382->fPos = (data382->fPos + (int)6);
            								}
            								break;
            								case (int)5: {
HXLINE(1072)									 ::openfl::_internal::renderer::DrawCommandReader data383 = data;
HXDLIN(1072)									data383->fPos = (data383->fPos + (int)4);
            								}
            								break;
            								case (int)6: {
HXLINE(1072)									 ::openfl::_internal::renderer::DrawCommandReader data384 = data;
HXDLIN(1072)									data384->fPos = (data384->fPos + (int)3);
            								}
            								break;
            								case (int)7: {
HXLINE(1072)									 ::openfl::_internal::renderer::DrawCommandReader data385 = data;
HXDLIN(1072)									data385->fPos = (data385->fPos + (int)4);
            								}
            								break;
            								case (int)8: {
HXLINE(1072)									 ::openfl::_internal::renderer::DrawCommandReader data386 = data;
HXDLIN(1072)									data386->oPos = (data386->oPos + (int)3);
            								}
            								break;
            								case (int)9: {
HXLINE(1072)									 ::openfl::_internal::renderer::DrawCommandReader data387 = data;
HXDLIN(1072)									data387->fPos = (data387->fPos + (int)4);
            								}
            								break;
            								case (int)10: {
HXLINE(1072)									 ::openfl::_internal::renderer::DrawCommandReader data388 = data;
HXDLIN(1072)									data388->fPos = (data388->fPos + (int)5);
HXDLIN(1072)									 ::openfl::_internal::renderer::DrawCommandReader data389 = data;
HXDLIN(1072)									data389->oPos = (data389->oPos + (int)1);
            								}
            								break;
            								case (int)12: {
HXLINE(1072)									 ::openfl::_internal::renderer::DrawCommandReader data390 = data;
HXDLIN(1072)									data390->oPos = (data390->oPos + (int)4);
            								}
            								break;
            								case (int)13: {
            								}
            								break;
            								case (int)14: {
HXLINE(1072)									 ::openfl::_internal::renderer::DrawCommandReader data391 = data;
HXDLIN(1072)									data391->oPos = (data391->oPos + (int)2);
HXDLIN(1072)									 ::openfl::_internal::renderer::DrawCommandReader data392 = data;
HXDLIN(1072)									data392->bPos = (data392->bPos + (int)2);
            								}
            								break;
            								case (int)15: {
HXLINE(1072)									 ::openfl::_internal::renderer::DrawCommandReader data393 = data;
HXDLIN(1072)									data393->oPos = (data393->oPos + (int)4);
HXDLIN(1072)									 ::openfl::_internal::renderer::DrawCommandReader data394 = data;
HXDLIN(1072)									data394->iiPos = (data394->iiPos + (int)2);
HXDLIN(1072)									 ::openfl::_internal::renderer::DrawCommandReader data395 = data;
HXDLIN(1072)									data395->ffPos = (data395->ffPos + (int)1);
HXDLIN(1072)									 ::openfl::_internal::renderer::DrawCommandReader data396 = data;
HXDLIN(1072)									data396->fPos = (data396->fPos + (int)1);
            								}
            								break;
            								case (int)16: {
HXLINE(1072)									 ::openfl::_internal::renderer::DrawCommandReader data397 = data;
HXDLIN(1072)									data397->oPos = (data397->oPos + (int)4);
HXDLIN(1072)									 ::openfl::_internal::renderer::DrawCommandReader data398 = data;
HXDLIN(1072)									data398->iPos = (data398->iPos + (int)1);
HXDLIN(1072)									 ::openfl::_internal::renderer::DrawCommandReader data399 = data;
HXDLIN(1072)									data399->fPos = (data399->fPos + (int)2);
HXDLIN(1072)									 ::openfl::_internal::renderer::DrawCommandReader data400 = data;
HXDLIN(1072)									data400->bPos = (data400->bPos + (int)1);
            								}
            								break;
            								case (int)17: {
HXLINE(1072)									 ::openfl::_internal::renderer::DrawCommandReader data401 = data;
HXDLIN(1072)									data401->fPos = (data401->fPos + (int)2);
            								}
            								break;
            								case (int)18: {
HXLINE(1072)									 ::openfl::_internal::renderer::DrawCommandReader data402 = data;
HXDLIN(1072)									data402->fPos = (data402->fPos + (int)2);
            								}
            								break;
            								case (int)19: {
HXLINE(1072)									 ::openfl::_internal::renderer::DrawCommandReader data403 = data;
HXDLIN(1072)									data403->oPos = (data403->oPos + (int)1);
            								}
            								break;
            								case (int)20: case (int)21: {
            								}
            								break;
            								default:{
            								}
            							}
            						}
HXLINE(1072)						data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::LINE_STYLE_dyn();
HXDLIN(1072)						 ::openfl::_internal::renderer::DrawCommandReader this13 = data;
HXDLIN(1072)						 ::openfl::_internal::renderer::DrawCommandReader c61 = this13;
HXLINE(1073)						::cpp::VirtualArray c62 = c61->buffer->o;
HXDLIN(1073)						::cpp::VirtualArray c63 = c61->buffer->o;
HXDLIN(1073)						::cpp::VirtualArray c64 = c61->buffer->o;
HXDLIN(1073)						::Array< Float > c65 = c61->buffer->f;
HXDLIN(1073)						stroke =  ::openfl::display::GraphicsStroke_obj::__alloc( HX_CTX ,c61->buffer->o->__get(c61->oPos),c61->buffer->b->__get(c61->bPos),c62->__get((c61->oPos + (int)1)),c63->__get((c61->oPos + (int)2)),c64->__get((c61->oPos + (int)3)),c65->__get((c61->fPos + (int)1)),null());
HXLINE(1074)						stroke->fill =  ::openfl::display::GraphicsSolidFill_obj::__alloc( HX_CTX ,c61->buffer->i->__get(c61->iPos),c61->buffer->f->__get(c61->fPos));
HXLINE(1075)						graphicsData->push(stroke);
            					}
            					break;
            					case (int)17: {
HXLINE(1023)						{
HXLINE(1023)							 ::openfl::_internal::renderer::DrawCommandType _g15 = data->prev;
HXDLIN(1023)							switch((int)(_hx_getEnumValueIndex(_g15))){
            								case (int)0: {
HXLINE(1023)									 ::openfl::_internal::renderer::DrawCommandReader data404 = data;
HXDLIN(1023)									data404->oPos = (data404->oPos + (int)2);
HXDLIN(1023)									 ::openfl::_internal::renderer::DrawCommandReader data405 = data;
HXDLIN(1023)									data405->bPos = (data405->bPos + (int)2);
            								}
            								break;
            								case (int)1: {
HXLINE(1023)									 ::openfl::_internal::renderer::DrawCommandReader data406 = data;
HXDLIN(1023)									data406->iPos = (data406->iPos + (int)1);
HXDLIN(1023)									 ::openfl::_internal::renderer::DrawCommandReader data407 = data;
HXDLIN(1023)									data407->fPos = (data407->fPos + (int)1);
            								}
            								break;
            								case (int)2: {
HXLINE(1023)									 ::openfl::_internal::renderer::DrawCommandReader data408 = data;
HXDLIN(1023)									data408->oPos = (data408->oPos + (int)4);
HXDLIN(1023)									 ::openfl::_internal::renderer::DrawCommandReader data409 = data;
HXDLIN(1023)									data409->iiPos = (data409->iiPos + (int)2);
HXDLIN(1023)									 ::openfl::_internal::renderer::DrawCommandReader data410 = data;
HXDLIN(1023)									data410->ffPos = (data410->ffPos + (int)1);
HXDLIN(1023)									 ::openfl::_internal::renderer::DrawCommandReader data411 = data;
HXDLIN(1023)									data411->fPos = (data411->fPos + (int)1);
            								}
            								break;
            								case (int)3: {
HXLINE(1023)									 ::openfl::_internal::renderer::DrawCommandReader data412 = data;
HXDLIN(1023)									data412->oPos = (data412->oPos + (int)1);
            								}
            								break;
            								case (int)4: {
HXLINE(1023)									 ::openfl::_internal::renderer::DrawCommandReader data413 = data;
HXDLIN(1023)									data413->fPos = (data413->fPos + (int)6);
            								}
            								break;
            								case (int)5: {
HXLINE(1023)									 ::openfl::_internal::renderer::DrawCommandReader data414 = data;
HXDLIN(1023)									data414->fPos = (data414->fPos + (int)4);
            								}
            								break;
            								case (int)6: {
HXLINE(1023)									 ::openfl::_internal::renderer::DrawCommandReader data415 = data;
HXDLIN(1023)									data415->fPos = (data415->fPos + (int)3);
            								}
            								break;
            								case (int)7: {
HXLINE(1023)									 ::openfl::_internal::renderer::DrawCommandReader data416 = data;
HXDLIN(1023)									data416->fPos = (data416->fPos + (int)4);
            								}
            								break;
            								case (int)8: {
HXLINE(1023)									 ::openfl::_internal::renderer::DrawCommandReader data417 = data;
HXDLIN(1023)									data417->oPos = (data417->oPos + (int)3);
            								}
            								break;
            								case (int)9: {
HXLINE(1023)									 ::openfl::_internal::renderer::DrawCommandReader data418 = data;
HXDLIN(1023)									data418->fPos = (data418->fPos + (int)4);
            								}
            								break;
            								case (int)10: {
HXLINE(1023)									 ::openfl::_internal::renderer::DrawCommandReader data419 = data;
HXDLIN(1023)									data419->fPos = (data419->fPos + (int)5);
HXDLIN(1023)									 ::openfl::_internal::renderer::DrawCommandReader data420 = data;
HXDLIN(1023)									data420->oPos = (data420->oPos + (int)1);
            								}
            								break;
            								case (int)12: {
HXLINE(1023)									 ::openfl::_internal::renderer::DrawCommandReader data421 = data;
HXDLIN(1023)									data421->oPos = (data421->oPos + (int)4);
            								}
            								break;
            								case (int)13: {
            								}
            								break;
            								case (int)14: {
HXLINE(1023)									 ::openfl::_internal::renderer::DrawCommandReader data422 = data;
HXDLIN(1023)									data422->oPos = (data422->oPos + (int)2);
HXDLIN(1023)									 ::openfl::_internal::renderer::DrawCommandReader data423 = data;
HXDLIN(1023)									data423->bPos = (data423->bPos + (int)2);
            								}
            								break;
            								case (int)15: {
HXLINE(1023)									 ::openfl::_internal::renderer::DrawCommandReader data424 = data;
HXDLIN(1023)									data424->oPos = (data424->oPos + (int)4);
HXDLIN(1023)									 ::openfl::_internal::renderer::DrawCommandReader data425 = data;
HXDLIN(1023)									data425->iiPos = (data425->iiPos + (int)2);
HXDLIN(1023)									 ::openfl::_internal::renderer::DrawCommandReader data426 = data;
HXDLIN(1023)									data426->ffPos = (data426->ffPos + (int)1);
HXDLIN(1023)									 ::openfl::_internal::renderer::DrawCommandReader data427 = data;
HXDLIN(1023)									data427->fPos = (data427->fPos + (int)1);
            								}
            								break;
            								case (int)16: {
HXLINE(1023)									 ::openfl::_internal::renderer::DrawCommandReader data428 = data;
HXDLIN(1023)									data428->oPos = (data428->oPos + (int)4);
HXDLIN(1023)									 ::openfl::_internal::renderer::DrawCommandReader data429 = data;
HXDLIN(1023)									data429->iPos = (data429->iPos + (int)1);
HXDLIN(1023)									 ::openfl::_internal::renderer::DrawCommandReader data430 = data;
HXDLIN(1023)									data430->fPos = (data430->fPos + (int)2);
HXDLIN(1023)									 ::openfl::_internal::renderer::DrawCommandReader data431 = data;
HXDLIN(1023)									data431->bPos = (data431->bPos + (int)1);
            								}
            								break;
            								case (int)17: {
HXLINE(1023)									 ::openfl::_internal::renderer::DrawCommandReader data432 = data;
HXDLIN(1023)									data432->fPos = (data432->fPos + (int)2);
            								}
            								break;
            								case (int)18: {
HXLINE(1023)									 ::openfl::_internal::renderer::DrawCommandReader data433 = data;
HXDLIN(1023)									data433->fPos = (data433->fPos + (int)2);
            								}
            								break;
            								case (int)19: {
HXLINE(1023)									 ::openfl::_internal::renderer::DrawCommandReader data434 = data;
HXDLIN(1023)									data434->oPos = (data434->oPos + (int)1);
            								}
            								break;
            								case (int)20: case (int)21: {
            								}
            								break;
            								default:{
            								}
            							}
            						}
HXLINE(1023)						data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::LINE_TO_dyn();
HXDLIN(1023)						 ::openfl::_internal::renderer::DrawCommandReader this14 = data;
HXDLIN(1023)						 ::openfl::_internal::renderer::DrawCommandReader c66 = this14;
HXLINE(1024)						Float c67 = c66->buffer->f->__get(c66->fPos);
HXDLIN(1024)						::Array< Float > c68 = c66->buffer->f;
HXDLIN(1024)						path->lineTo(c67,c68->__get((c66->fPos + (int)1)));
            					}
            					break;
            					case (int)18: {
HXLINE(1028)						{
HXLINE(1028)							 ::openfl::_internal::renderer::DrawCommandType _g16 = data->prev;
HXDLIN(1028)							switch((int)(_hx_getEnumValueIndex(_g16))){
            								case (int)0: {
HXLINE(1028)									 ::openfl::_internal::renderer::DrawCommandReader data435 = data;
HXDLIN(1028)									data435->oPos = (data435->oPos + (int)2);
HXDLIN(1028)									 ::openfl::_internal::renderer::DrawCommandReader data436 = data;
HXDLIN(1028)									data436->bPos = (data436->bPos + (int)2);
            								}
            								break;
            								case (int)1: {
HXLINE(1028)									 ::openfl::_internal::renderer::DrawCommandReader data437 = data;
HXDLIN(1028)									data437->iPos = (data437->iPos + (int)1);
HXDLIN(1028)									 ::openfl::_internal::renderer::DrawCommandReader data438 = data;
HXDLIN(1028)									data438->fPos = (data438->fPos + (int)1);
            								}
            								break;
            								case (int)2: {
HXLINE(1028)									 ::openfl::_internal::renderer::DrawCommandReader data439 = data;
HXDLIN(1028)									data439->oPos = (data439->oPos + (int)4);
HXDLIN(1028)									 ::openfl::_internal::renderer::DrawCommandReader data440 = data;
HXDLIN(1028)									data440->iiPos = (data440->iiPos + (int)2);
HXDLIN(1028)									 ::openfl::_internal::renderer::DrawCommandReader data441 = data;
HXDLIN(1028)									data441->ffPos = (data441->ffPos + (int)1);
HXDLIN(1028)									 ::openfl::_internal::renderer::DrawCommandReader data442 = data;
HXDLIN(1028)									data442->fPos = (data442->fPos + (int)1);
            								}
            								break;
            								case (int)3: {
HXLINE(1028)									 ::openfl::_internal::renderer::DrawCommandReader data443 = data;
HXDLIN(1028)									data443->oPos = (data443->oPos + (int)1);
            								}
            								break;
            								case (int)4: {
HXLINE(1028)									 ::openfl::_internal::renderer::DrawCommandReader data444 = data;
HXDLIN(1028)									data444->fPos = (data444->fPos + (int)6);
            								}
            								break;
            								case (int)5: {
HXLINE(1028)									 ::openfl::_internal::renderer::DrawCommandReader data445 = data;
HXDLIN(1028)									data445->fPos = (data445->fPos + (int)4);
            								}
            								break;
            								case (int)6: {
HXLINE(1028)									 ::openfl::_internal::renderer::DrawCommandReader data446 = data;
HXDLIN(1028)									data446->fPos = (data446->fPos + (int)3);
            								}
            								break;
            								case (int)7: {
HXLINE(1028)									 ::openfl::_internal::renderer::DrawCommandReader data447 = data;
HXDLIN(1028)									data447->fPos = (data447->fPos + (int)4);
            								}
            								break;
            								case (int)8: {
HXLINE(1028)									 ::openfl::_internal::renderer::DrawCommandReader data448 = data;
HXDLIN(1028)									data448->oPos = (data448->oPos + (int)3);
            								}
            								break;
            								case (int)9: {
HXLINE(1028)									 ::openfl::_internal::renderer::DrawCommandReader data449 = data;
HXDLIN(1028)									data449->fPos = (data449->fPos + (int)4);
            								}
            								break;
            								case (int)10: {
HXLINE(1028)									 ::openfl::_internal::renderer::DrawCommandReader data450 = data;
HXDLIN(1028)									data450->fPos = (data450->fPos + (int)5);
HXDLIN(1028)									 ::openfl::_internal::renderer::DrawCommandReader data451 = data;
HXDLIN(1028)									data451->oPos = (data451->oPos + (int)1);
            								}
            								break;
            								case (int)12: {
HXLINE(1028)									 ::openfl::_internal::renderer::DrawCommandReader data452 = data;
HXDLIN(1028)									data452->oPos = (data452->oPos + (int)4);
            								}
            								break;
            								case (int)13: {
            								}
            								break;
            								case (int)14: {
HXLINE(1028)									 ::openfl::_internal::renderer::DrawCommandReader data453 = data;
HXDLIN(1028)									data453->oPos = (data453->oPos + (int)2);
HXDLIN(1028)									 ::openfl::_internal::renderer::DrawCommandReader data454 = data;
HXDLIN(1028)									data454->bPos = (data454->bPos + (int)2);
            								}
            								break;
            								case (int)15: {
HXLINE(1028)									 ::openfl::_internal::renderer::DrawCommandReader data455 = data;
HXDLIN(1028)									data455->oPos = (data455->oPos + (int)4);
HXDLIN(1028)									 ::openfl::_internal::renderer::DrawCommandReader data456 = data;
HXDLIN(1028)									data456->iiPos = (data456->iiPos + (int)2);
HXDLIN(1028)									 ::openfl::_internal::renderer::DrawCommandReader data457 = data;
HXDLIN(1028)									data457->ffPos = (data457->ffPos + (int)1);
HXDLIN(1028)									 ::openfl::_internal::renderer::DrawCommandReader data458 = data;
HXDLIN(1028)									data458->fPos = (data458->fPos + (int)1);
            								}
            								break;
            								case (int)16: {
HXLINE(1028)									 ::openfl::_internal::renderer::DrawCommandReader data459 = data;
HXDLIN(1028)									data459->oPos = (data459->oPos + (int)4);
HXDLIN(1028)									 ::openfl::_internal::renderer::DrawCommandReader data460 = data;
HXDLIN(1028)									data460->iPos = (data460->iPos + (int)1);
HXDLIN(1028)									 ::openfl::_internal::renderer::DrawCommandReader data461 = data;
HXDLIN(1028)									data461->fPos = (data461->fPos + (int)2);
HXDLIN(1028)									 ::openfl::_internal::renderer::DrawCommandReader data462 = data;
HXDLIN(1028)									data462->bPos = (data462->bPos + (int)1);
            								}
            								break;
            								case (int)17: {
HXLINE(1028)									 ::openfl::_internal::renderer::DrawCommandReader data463 = data;
HXDLIN(1028)									data463->fPos = (data463->fPos + (int)2);
            								}
            								break;
            								case (int)18: {
HXLINE(1028)									 ::openfl::_internal::renderer::DrawCommandReader data464 = data;
HXDLIN(1028)									data464->fPos = (data464->fPos + (int)2);
            								}
            								break;
            								case (int)19: {
HXLINE(1028)									 ::openfl::_internal::renderer::DrawCommandReader data465 = data;
HXDLIN(1028)									data465->oPos = (data465->oPos + (int)1);
            								}
            								break;
            								case (int)20: case (int)21: {
            								}
            								break;
            								default:{
            								}
            							}
            						}
HXLINE(1028)						data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::MOVE_TO_dyn();
HXDLIN(1028)						 ::openfl::_internal::renderer::DrawCommandReader this15 = data;
HXDLIN(1028)						 ::openfl::_internal::renderer::DrawCommandReader c69 = this15;
HXLINE(1029)						Float c70 = c69->buffer->f->__get(c69->fPos);
HXDLIN(1029)						::Array< Float > c71 = c69->buffer->f;
HXDLIN(1029)						path->moveTo(c70,c71->__get((c69->fPos + (int)1)));
            					}
            					break;
            					default:{
HXLINE(1103)						{
HXLINE(1103)							 ::openfl::_internal::renderer::DrawCommandType _g17 = data->prev;
HXDLIN(1103)							switch((int)(_hx_getEnumValueIndex(_g17))){
            								case (int)0: {
HXLINE(1103)									 ::openfl::_internal::renderer::DrawCommandReader data466 = data;
HXDLIN(1103)									data466->oPos = (data466->oPos + (int)2);
HXDLIN(1103)									 ::openfl::_internal::renderer::DrawCommandReader data467 = data;
HXDLIN(1103)									data467->bPos = (data467->bPos + (int)2);
            								}
            								break;
            								case (int)1: {
HXLINE(1103)									 ::openfl::_internal::renderer::DrawCommandReader data468 = data;
HXDLIN(1103)									data468->iPos = (data468->iPos + (int)1);
HXDLIN(1103)									 ::openfl::_internal::renderer::DrawCommandReader data469 = data;
HXDLIN(1103)									data469->fPos = (data469->fPos + (int)1);
            								}
            								break;
            								case (int)2: {
HXLINE(1103)									 ::openfl::_internal::renderer::DrawCommandReader data470 = data;
HXDLIN(1103)									data470->oPos = (data470->oPos + (int)4);
HXDLIN(1103)									 ::openfl::_internal::renderer::DrawCommandReader data471 = data;
HXDLIN(1103)									data471->iiPos = (data471->iiPos + (int)2);
HXDLIN(1103)									 ::openfl::_internal::renderer::DrawCommandReader data472 = data;
HXDLIN(1103)									data472->ffPos = (data472->ffPos + (int)1);
HXDLIN(1103)									 ::openfl::_internal::renderer::DrawCommandReader data473 = data;
HXDLIN(1103)									data473->fPos = (data473->fPos + (int)1);
            								}
            								break;
            								case (int)3: {
HXLINE(1103)									 ::openfl::_internal::renderer::DrawCommandReader data474 = data;
HXDLIN(1103)									data474->oPos = (data474->oPos + (int)1);
            								}
            								break;
            								case (int)4: {
HXLINE(1103)									 ::openfl::_internal::renderer::DrawCommandReader data475 = data;
HXDLIN(1103)									data475->fPos = (data475->fPos + (int)6);
            								}
            								break;
            								case (int)5: {
HXLINE(1103)									 ::openfl::_internal::renderer::DrawCommandReader data476 = data;
HXDLIN(1103)									data476->fPos = (data476->fPos + (int)4);
            								}
            								break;
            								case (int)6: {
HXLINE(1103)									 ::openfl::_internal::renderer::DrawCommandReader data477 = data;
HXDLIN(1103)									data477->fPos = (data477->fPos + (int)3);
            								}
            								break;
            								case (int)7: {
HXLINE(1103)									 ::openfl::_internal::renderer::DrawCommandReader data478 = data;
HXDLIN(1103)									data478->fPos = (data478->fPos + (int)4);
            								}
            								break;
            								case (int)8: {
HXLINE(1103)									 ::openfl::_internal::renderer::DrawCommandReader data479 = data;
HXDLIN(1103)									data479->oPos = (data479->oPos + (int)3);
            								}
            								break;
            								case (int)9: {
HXLINE(1103)									 ::openfl::_internal::renderer::DrawCommandReader data480 = data;
HXDLIN(1103)									data480->fPos = (data480->fPos + (int)4);
            								}
            								break;
            								case (int)10: {
HXLINE(1103)									 ::openfl::_internal::renderer::DrawCommandReader data481 = data;
HXDLIN(1103)									data481->fPos = (data481->fPos + (int)5);
HXDLIN(1103)									 ::openfl::_internal::renderer::DrawCommandReader data482 = data;
HXDLIN(1103)									data482->oPos = (data482->oPos + (int)1);
            								}
            								break;
            								case (int)12: {
HXLINE(1103)									 ::openfl::_internal::renderer::DrawCommandReader data483 = data;
HXDLIN(1103)									data483->oPos = (data483->oPos + (int)4);
            								}
            								break;
            								case (int)13: {
            								}
            								break;
            								case (int)14: {
HXLINE(1103)									 ::openfl::_internal::renderer::DrawCommandReader data484 = data;
HXDLIN(1103)									data484->oPos = (data484->oPos + (int)2);
HXDLIN(1103)									 ::openfl::_internal::renderer::DrawCommandReader data485 = data;
HXDLIN(1103)									data485->bPos = (data485->bPos + (int)2);
            								}
            								break;
            								case (int)15: {
HXLINE(1103)									 ::openfl::_internal::renderer::DrawCommandReader data486 = data;
HXDLIN(1103)									data486->oPos = (data486->oPos + (int)4);
HXDLIN(1103)									 ::openfl::_internal::renderer::DrawCommandReader data487 = data;
HXDLIN(1103)									data487->iiPos = (data487->iiPos + (int)2);
HXDLIN(1103)									 ::openfl::_internal::renderer::DrawCommandReader data488 = data;
HXDLIN(1103)									data488->ffPos = (data488->ffPos + (int)1);
HXDLIN(1103)									 ::openfl::_internal::renderer::DrawCommandReader data489 = data;
HXDLIN(1103)									data489->fPos = (data489->fPos + (int)1);
            								}
            								break;
            								case (int)16: {
HXLINE(1103)									 ::openfl::_internal::renderer::DrawCommandReader data490 = data;
HXDLIN(1103)									data490->oPos = (data490->oPos + (int)4);
HXDLIN(1103)									 ::openfl::_internal::renderer::DrawCommandReader data491 = data;
HXDLIN(1103)									data491->iPos = (data491->iPos + (int)1);
HXDLIN(1103)									 ::openfl::_internal::renderer::DrawCommandReader data492 = data;
HXDLIN(1103)									data492->fPos = (data492->fPos + (int)2);
HXDLIN(1103)									 ::openfl::_internal::renderer::DrawCommandReader data493 = data;
HXDLIN(1103)									data493->bPos = (data493->bPos + (int)1);
            								}
            								break;
            								case (int)17: {
HXLINE(1103)									 ::openfl::_internal::renderer::DrawCommandReader data494 = data;
HXDLIN(1103)									data494->fPos = (data494->fPos + (int)2);
            								}
            								break;
            								case (int)18: {
HXLINE(1103)									 ::openfl::_internal::renderer::DrawCommandReader data495 = data;
HXDLIN(1103)									data495->fPos = (data495->fPos + (int)2);
            								}
            								break;
            								case (int)19: {
HXLINE(1103)									 ::openfl::_internal::renderer::DrawCommandReader data496 = data;
HXDLIN(1103)									data496->oPos = (data496->oPos + (int)1);
            								}
            								break;
            								case (int)20: case (int)21: {
            								}
            								break;
            								default:{
            								}
            							}
            						}
HXLINE(1103)						data->prev = type;
            					}
            				}
            			}
            		}
HXLINE(1109)		if (hx::IsNotNull( path )) {
HXLINE(1111)			graphicsData->push(path);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Graphics_obj,_hx___readGraphicsData,(void))

void Graphics_obj::_hx___update( ::openfl::geom::Matrix displayMatrix){
            	HX_STACKFRAME(&_hx_pos_043516e11ce5c7d5_1118___update)
HXLINE(1120)		bool _hx_tmp;
HXDLIN(1120)		bool _hx_tmp1;
HXDLIN(1120)		if (hx::IsNotNull( this->_hx___bounds )) {
HXLINE(1120)			_hx_tmp1 = (this->_hx___bounds->width <= (int)0);
            		}
            		else {
HXLINE(1120)			_hx_tmp1 = true;
            		}
HXDLIN(1120)		if (!(_hx_tmp1)) {
HXLINE(1120)			_hx_tmp = (this->_hx___bounds->height <= (int)0);
            		}
            		else {
HXLINE(1120)			_hx_tmp = true;
            		}
HXDLIN(1120)		if (_hx_tmp) {
HXLINE(1120)			return;
            		}
HXLINE(1122)		 ::openfl::geom::Matrix parentTransform = this->_hx___owner->_hx___renderTransform;
HXLINE(1123)		Float scaleX = ((Float)1.0);
HXDLIN(1123)		Float scaleY = ((Float)1.0);
HXLINE(1125)		if (hx::IsNotNull( parentTransform )) {
HXLINE(1127)			if ((parentTransform->b == (int)0)) {
HXLINE(1129)				scaleX = ::Math_obj::abs(parentTransform->a);
            			}
            			else {
HXLINE(1133)				Float scaleX1 = (parentTransform->a * parentTransform->a);
HXDLIN(1133)				scaleX = ::Math_obj::sqrt((scaleX1 + (parentTransform->b * parentTransform->b)));
            			}
HXLINE(1137)			if ((parentTransform->c == (int)0)) {
HXLINE(1139)				scaleY = ::Math_obj::abs(parentTransform->d);
            			}
            			else {
HXLINE(1143)				Float scaleY1 = (parentTransform->c * parentTransform->c);
HXDLIN(1143)				scaleY = ::Math_obj::sqrt((scaleY1 + (parentTransform->d * parentTransform->d)));
            			}
            		}
            		else {
HXLINE(1149)			return;
            		}
HXLINE(1153)		if (hx::IsNotNull( displayMatrix )) {
HXLINE(1155)			if ((displayMatrix->b == (int)0)) {
HXLINE(1157)				scaleX = (scaleX * displayMatrix->a);
            			}
            			else {
HXLINE(1161)				Float scaleX2 = (displayMatrix->a * displayMatrix->a);
HXDLIN(1161)				scaleX = (scaleX * ::Math_obj::sqrt((scaleX2 + (displayMatrix->b * displayMatrix->b))));
            			}
HXLINE(1165)			if ((displayMatrix->c == (int)0)) {
HXLINE(1167)				scaleY = (scaleY * displayMatrix->d);
            			}
            			else {
HXLINE(1171)				Float scaleY2 = (displayMatrix->c * displayMatrix->c);
HXDLIN(1171)				scaleY = (scaleY * ::Math_obj::sqrt((scaleY2 + (displayMatrix->d * displayMatrix->d))));
            			}
            		}
HXLINE(1182)		Float width = (this->_hx___bounds->width * scaleX);
HXLINE(1183)		Float height = (this->_hx___bounds->height * scaleY);
HXLINE(1185)		bool _hx_tmp2;
HXDLIN(1185)		if (!((width < (int)1))) {
HXLINE(1185)			_hx_tmp2 = (height < (int)1);
            		}
            		else {
HXLINE(1185)			_hx_tmp2 = true;
            		}
HXDLIN(1185)		if (_hx_tmp2) {
HXLINE(1187)			bool _hx_tmp3;
HXDLIN(1187)			if ((this->_hx___width < (int)1)) {
HXLINE(1187)				_hx_tmp3 = (this->_hx___height >= (int)1);
            			}
            			else {
HXLINE(1187)				_hx_tmp3 = true;
            			}
HXDLIN(1187)			if (_hx_tmp3) {
HXLINE(1187)				this->set___dirty(true);
            			}
HXLINE(1188)			this->_hx___width = (int)0;
HXLINE(1189)			this->_hx___height = (int)0;
HXLINE(1190)			return;
            		}
HXLINE(1194)		bool _hx_tmp4;
HXDLIN(1194)		if (hx::IsNotNull( ::openfl::display::Graphics_obj::maxTextureWidth )) {
HXLINE(1194)			_hx_tmp4 = hx::IsGreater( width,::openfl::display::Graphics_obj::maxTextureWidth );
            		}
            		else {
HXLINE(1194)			_hx_tmp4 = false;
            		}
HXDLIN(1194)		if (_hx_tmp4) {
HXLINE(1196)			width = ::openfl::display::Graphics_obj::maxTextureWidth;
HXLINE(1197)			scaleX = ((Float)::openfl::display::Graphics_obj::maxTextureWidth / (Float)this->_hx___bounds->width);
            		}
HXLINE(1201)		bool _hx_tmp5;
HXDLIN(1201)		if (hx::IsNotNull( ::openfl::display::Graphics_obj::maxTextureWidth )) {
HXLINE(1201)			_hx_tmp5 = hx::IsGreater( height,::openfl::display::Graphics_obj::maxTextureHeight );
            		}
            		else {
HXLINE(1201)			_hx_tmp5 = false;
            		}
HXDLIN(1201)		if (_hx_tmp5) {
HXLINE(1203)			height = ::openfl::display::Graphics_obj::maxTextureHeight;
HXLINE(1204)			scaleY = ((Float)::openfl::display::Graphics_obj::maxTextureHeight / (Float)this->_hx___bounds->height);
            		}
HXLINE(1208)		this->_hx___renderTransform->a = ((Float)width / (Float)this->_hx___bounds->width);
HXLINE(1209)		this->_hx___renderTransform->d = ((Float)height / (Float)this->_hx___bounds->height);
HXLINE(1210)		Float inverseA = ((Float)(int)1 / (Float)this->_hx___renderTransform->a);
HXLINE(1211)		Float inverseD = ((Float)(int)1 / (Float)this->_hx___renderTransform->d);
HXLINE(1214)		this->_hx___worldTransform->a = (inverseA * parentTransform->a);
HXLINE(1215)		this->_hx___worldTransform->b = (inverseA * parentTransform->b);
HXLINE(1216)		this->_hx___worldTransform->c = (inverseD * parentTransform->c);
HXLINE(1217)		this->_hx___worldTransform->d = (inverseD * parentTransform->d);
HXLINE(1219)		Float x = this->_hx___bounds->x;
HXLINE(1220)		Float y = this->_hx___bounds->y;
HXLINE(1221)		Float tx = (x * parentTransform->a);
HXDLIN(1221)		Float tx1 = ((tx + (y * parentTransform->c)) + parentTransform->tx);
HXLINE(1222)		Float ty = (x * parentTransform->b);
HXDLIN(1222)		Float ty1 = ((ty + (y * parentTransform->d)) + parentTransform->ty);
HXLINE(1225)		this->_hx___worldTransform->tx = ::Math_obj::ffloor(tx1);
HXLINE(1226)		this->_hx___worldTransform->ty = ::Math_obj::ffloor(ty1);
HXLINE(1229)		 ::openfl::geom::Matrix _this = this->_hx___worldTransform;
HXDLIN(1229)		Float norm = (_this->a * _this->d);
HXDLIN(1229)		Float norm1 = (norm - (_this->b * _this->c));
HXDLIN(1229)		Float _hx_tmp6;
HXDLIN(1229)		if ((norm1 == (int)0)) {
HXLINE(1229)			_hx_tmp6 = -(_this->tx);
            		}
            		else {
HXLINE(1229)			Float _this1 = _this->c;
HXDLIN(1229)			Float _hx_tmp7 = (_this1 * (_this->ty - ty1));
HXDLIN(1229)			Float _this2 = _this->d;
HXDLIN(1229)			_hx_tmp6 = (((Float)((Float)1.0) / (Float)norm1) * (_hx_tmp7 + (_this2 * (tx1 - _this->tx))));
            		}
HXDLIN(1229)		this->_hx___renderTransform->tx = _hx_tmp6;
HXLINE(1230)		 ::openfl::geom::Matrix _this3 = this->_hx___worldTransform;
HXDLIN(1230)		Float norm2 = (_this3->a * _this3->d);
HXDLIN(1230)		Float norm3 = (norm2 - (_this3->b * _this3->c));
HXDLIN(1230)		Float _hx_tmp8;
HXDLIN(1230)		if ((norm3 == (int)0)) {
HXLINE(1230)			_hx_tmp8 = -(_this3->ty);
            		}
            		else {
HXLINE(1230)			Float _this4 = _this3->a;
HXDLIN(1230)			Float _hx_tmp9 = (_this4 * (ty1 - _this3->ty));
HXDLIN(1230)			Float _this5 = _this3->b;
HXDLIN(1230)			_hx_tmp8 = (((Float)((Float)1.0) / (Float)norm3) * (_hx_tmp9 + (_this5 * (_this3->tx - tx1))));
            		}
HXDLIN(1230)		this->_hx___renderTransform->ty = _hx_tmp8;
HXLINE(1233)		int newWidth = ::Math_obj::ceil((width + this->_hx___renderTransform->tx));
HXLINE(1234)		int newHeight = ::Math_obj::ceil((height + this->_hx___renderTransform->ty));
HXLINE(1237)		bool _hx_tmp10;
HXDLIN(1237)		if ((newWidth == this->_hx___width)) {
HXLINE(1237)			_hx_tmp10 = (newHeight != this->_hx___height);
            		}
            		else {
HXLINE(1237)			_hx_tmp10 = true;
            		}
HXDLIN(1237)		if (_hx_tmp10) {
HXLINE(1240)			this->set___dirty(true);
            		}
HXLINE(1245)		this->_hx___width = newWidth;
HXLINE(1246)		this->_hx___height = newHeight;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Graphics_obj,_hx___update,(void))

bool Graphics_obj::set___dirty(bool value){
            	HX_STACKFRAME(&_hx_pos_043516e11ce5c7d5_1258_set___dirty)
HXLINE(1260)		bool _hx_tmp;
HXDLIN(1260)		if (value) {
HXLINE(1260)			_hx_tmp = hx::IsNotNull( this->_hx___owner );
            		}
            		else {
HXLINE(1260)			_hx_tmp = false;
            		}
HXDLIN(1260)		if (_hx_tmp) {
HXLINE(1262)			 ::openfl::display::DisplayObject _this = this->_hx___owner;
HXDLIN(1262)			if (!(_this->_hx___renderDirty)) {
HXLINE(1262)				_this->_hx___renderDirty = true;
HXDLIN(1262)				_this->_hx___setParentRenderDirty();
            			}
            		}
HXLINE(1266)		return (this->_hx___dirty = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Graphics_obj,set___dirty,return )

 ::Dynamic Graphics_obj::maxTextureHeight;

 ::Dynamic Graphics_obj::maxTextureWidth;


hx::ObjectPtr< Graphics_obj > Graphics_obj::__new( ::openfl::display::DisplayObject owner) {
	hx::ObjectPtr< Graphics_obj > __this = new Graphics_obj();
	__this->__construct(owner);
	return __this;
}

hx::ObjectPtr< Graphics_obj > Graphics_obj::__alloc(hx::Ctx *_hx_ctx, ::openfl::display::DisplayObject owner) {
	Graphics_obj *__this = (Graphics_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Graphics_obj), true, "openfl.display.Graphics"));
	*(void **)__this = Graphics_obj::_hx_vtable;
	__this->__construct(owner);
	return __this;
}

Graphics_obj::Graphics_obj()
{
}

void Graphics_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Graphics);
	HX_MARK_MEMBER_NAME(_hx___bounds,"__bounds");
	HX_MARK_MEMBER_NAME(_hx___buffer,"__buffer");
	HX_MARK_MEMBER_NAME(_hx___bufferContext,"__bufferContext");
	HX_MARK_MEMBER_NAME(_hx___bufferData,"__bufferData");
	HX_MARK_MEMBER_NAME(_hx___bufferLength,"__bufferLength");
	HX_MARK_MEMBER_NAME(_hx___commands,"__commands");
	HX_MARK_MEMBER_NAME(_hx___dirty,"__dirty");
	HX_MARK_MEMBER_NAME(_hx___height,"__height");
	HX_MARK_MEMBER_NAME(_hx___managed,"__managed");
	HX_MARK_MEMBER_NAME(_hx___positionX,"__positionX");
	HX_MARK_MEMBER_NAME(_hx___positionY,"__positionY");
	HX_MARK_MEMBER_NAME(_hx___renderTransform,"__renderTransform");
	HX_MARK_MEMBER_NAME(_hx___shaderBufferPool,"__shaderBufferPool");
	HX_MARK_MEMBER_NAME(_hx___strokePadding,"__strokePadding");
	HX_MARK_MEMBER_NAME(_hx___transformDirty,"__transformDirty");
	HX_MARK_MEMBER_NAME(_hx___usedShaderBuffers,"__usedShaderBuffers");
	HX_MARK_MEMBER_NAME(_hx___visible,"__visible");
	HX_MARK_MEMBER_NAME(_hx___owner,"__owner");
	HX_MARK_MEMBER_NAME(_hx___width,"__width");
	HX_MARK_MEMBER_NAME(_hx___worldTransform,"__worldTransform");
	HX_MARK_MEMBER_NAME(_hx___cairo,"__cairo");
	HX_MARK_MEMBER_NAME(_hx___bitmap,"__bitmap");
	HX_MARK_END_CLASS();
}

void Graphics_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(_hx___bounds,"__bounds");
	HX_VISIT_MEMBER_NAME(_hx___buffer,"__buffer");
	HX_VISIT_MEMBER_NAME(_hx___bufferContext,"__bufferContext");
	HX_VISIT_MEMBER_NAME(_hx___bufferData,"__bufferData");
	HX_VISIT_MEMBER_NAME(_hx___bufferLength,"__bufferLength");
	HX_VISIT_MEMBER_NAME(_hx___commands,"__commands");
	HX_VISIT_MEMBER_NAME(_hx___dirty,"__dirty");
	HX_VISIT_MEMBER_NAME(_hx___height,"__height");
	HX_VISIT_MEMBER_NAME(_hx___managed,"__managed");
	HX_VISIT_MEMBER_NAME(_hx___positionX,"__positionX");
	HX_VISIT_MEMBER_NAME(_hx___positionY,"__positionY");
	HX_VISIT_MEMBER_NAME(_hx___renderTransform,"__renderTransform");
	HX_VISIT_MEMBER_NAME(_hx___shaderBufferPool,"__shaderBufferPool");
	HX_VISIT_MEMBER_NAME(_hx___strokePadding,"__strokePadding");
	HX_VISIT_MEMBER_NAME(_hx___transformDirty,"__transformDirty");
	HX_VISIT_MEMBER_NAME(_hx___usedShaderBuffers,"__usedShaderBuffers");
	HX_VISIT_MEMBER_NAME(_hx___visible,"__visible");
	HX_VISIT_MEMBER_NAME(_hx___owner,"__owner");
	HX_VISIT_MEMBER_NAME(_hx___width,"__width");
	HX_VISIT_MEMBER_NAME(_hx___worldTransform,"__worldTransform");
	HX_VISIT_MEMBER_NAME(_hx___cairo,"__cairo");
	HX_VISIT_MEMBER_NAME(_hx___bitmap,"__bitmap");
}

hx::Val Graphics_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"clear") ) { return hx::Val( clear_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"lineTo") ) { return hx::Val( lineTo_dyn() ); }
		if (HX_FIELD_EQ(inName,"moveTo") ) { return hx::Val( moveTo_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"__dirty") ) { return hx::Val( _hx___dirty ); }
		if (HX_FIELD_EQ(inName,"__owner") ) { return hx::Val( _hx___owner ); }
		if (HX_FIELD_EQ(inName,"__width") ) { return hx::Val( _hx___width ); }
		if (HX_FIELD_EQ(inName,"__cairo") ) { return hx::Val( _hx___cairo ); }
		if (HX_FIELD_EQ(inName,"curveTo") ) { return hx::Val( curveTo_dyn() ); }
		if (HX_FIELD_EQ(inName,"endFill") ) { return hx::Val( endFill_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"__bounds") ) { return hx::Val( _hx___bounds ); }
		if (HX_FIELD_EQ(inName,"__buffer") ) { return hx::Val( _hx___buffer ); }
		if (HX_FIELD_EQ(inName,"__height") ) { return hx::Val( _hx___height ); }
		if (HX_FIELD_EQ(inName,"__bitmap") ) { return hx::Val( _hx___bitmap ); }
		if (HX_FIELD_EQ(inName,"copyFrom") ) { return hx::Val( copyFrom_dyn() ); }
		if (HX_FIELD_EQ(inName,"drawPath") ) { return hx::Val( drawPath_dyn() ); }
		if (HX_FIELD_EQ(inName,"drawRect") ) { return hx::Val( drawRect_dyn() ); }
		if (HX_FIELD_EQ(inName,"__update") ) { return hx::Val( _hx___update_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"__managed") ) { return hx::Val( _hx___managed ); }
		if (HX_FIELD_EQ(inName,"__visible") ) { return hx::Val( _hx___visible ); }
		if (HX_FIELD_EQ(inName,"beginFill") ) { return hx::Val( beginFill_dyn() ); }
		if (HX_FIELD_EQ(inName,"drawQuads") ) { return hx::Val( drawQuads_dyn() ); }
		if (HX_FIELD_EQ(inName,"lineStyle") ) { return hx::Val( lineStyle_dyn() ); }
		if (HX_FIELD_EQ(inName,"__cleanup") ) { return hx::Val( _hx___cleanup_dyn() ); }
		if (HX_FIELD_EQ(inName,"__hitTest") ) { return hx::Val( _hx___hitTest_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"__commands") ) { return hx::Val( _hx___commands ); }
		if (HX_FIELD_EQ(inName,"drawCircle") ) { return hx::Val( drawCircle_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"__positionX") ) { return hx::Val( _hx___positionX ); }
		if (HX_FIELD_EQ(inName,"__positionY") ) { return hx::Val( _hx___positionY ); }
		if (HX_FIELD_EQ(inName,"drawEllipse") ) { return hx::Val( drawEllipse_dyn() ); }
		if (HX_FIELD_EQ(inName,"__getBounds") ) { return hx::Val( _hx___getBounds_dyn() ); }
		if (HX_FIELD_EQ(inName,"set___dirty") ) { return hx::Val( set___dirty_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"__bufferData") ) { return hx::Val( _hx___bufferData ); }
		if (HX_FIELD_EQ(inName,"cubicCurveTo") ) { return hx::Val( cubicCurveTo_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"drawRoundRect") ) { return hx::Val( drawRoundRect_dyn() ); }
		if (HX_FIELD_EQ(inName,"drawTriangles") ) { return hx::Val( drawTriangles_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"__bufferLength") ) { return hx::Val( _hx___bufferLength ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"__bufferContext") ) { return hx::Val( _hx___bufferContext ); }
		if (HX_FIELD_EQ(inName,"__strokePadding") ) { return hx::Val( _hx___strokePadding ); }
		if (HX_FIELD_EQ(inName,"beginBitmapFill") ) { return hx::Val( beginBitmapFill_dyn() ); }
		if (HX_FIELD_EQ(inName,"beginShaderFill") ) { return hx::Val( beginShaderFill_dyn() ); }
		if (HX_FIELD_EQ(inName,"lineBitmapStyle") ) { return hx::Val( lineBitmapStyle_dyn() ); }
		if (HX_FIELD_EQ(inName,"__inflateBounds") ) { return hx::Val( _hx___inflateBounds_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"__transformDirty") ) { return hx::Val( _hx___transformDirty ); }
		if (HX_FIELD_EQ(inName,"__worldTransform") ) { return hx::Val( _hx___worldTransform ); }
		if (HX_FIELD_EQ(inName,"drawGraphicsData") ) { return hx::Val( drawGraphicsData_dyn() ); }
		if (HX_FIELD_EQ(inName,"readGraphicsData") ) { return hx::Val( readGraphicsData_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"__renderTransform") ) { return hx::Val( _hx___renderTransform ); }
		if (HX_FIELD_EQ(inName,"beginGradientFill") ) { return hx::Val( beginGradientFill_dyn() ); }
		if (HX_FIELD_EQ(inName,"lineGradientStyle") ) { return hx::Val( lineGradientStyle_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"__shaderBufferPool") ) { return hx::Val( _hx___shaderBufferPool ); }
		if (HX_FIELD_EQ(inName,"__readGraphicsData") ) { return hx::Val( _hx___readGraphicsData_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"__usedShaderBuffers") ) { return hx::Val( _hx___usedShaderBuffers ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"drawRoundRectComplex") ) { return hx::Val( drawRoundRectComplex_dyn() ); }
		break;
	case 26:
		if (HX_FIELD_EQ(inName,"__calculateBezierQuadPoint") ) { return hx::Val( _hx___calculateBezierQuadPoint_dyn() ); }
		break;
	case 27:
		if (HX_FIELD_EQ(inName,"__calculateBezierCubicPoint") ) { return hx::Val( _hx___calculateBezierCubicPoint_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool Graphics_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 15:
		if (HX_FIELD_EQ(inName,"maxTextureWidth") ) { outValue = ( maxTextureWidth ); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"maxTextureHeight") ) { outValue = ( maxTextureHeight ); return true; }
	}
	return false;
}

hx::Val Graphics_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"__dirty") ) { if (inCallProp == hx::paccAlways) return hx::Val( set___dirty(inValue.Cast< bool >()) );_hx___dirty=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__owner") ) { _hx___owner=inValue.Cast<  ::openfl::display::DisplayObject >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__width") ) { _hx___width=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__cairo") ) { _hx___cairo=inValue.Cast<  ::lime::graphics::cairo::Cairo >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"__bounds") ) { _hx___bounds=inValue.Cast<  ::openfl::geom::Rectangle >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__buffer") ) { _hx___buffer=inValue.Cast<  ::lime::graphics::opengl::GLObject >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__height") ) { _hx___height=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__bitmap") ) { _hx___bitmap=inValue.Cast<  ::openfl::display::BitmapData >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"__managed") ) { _hx___managed=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__visible") ) { _hx___visible=inValue.Cast< bool >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"__commands") ) { _hx___commands=inValue.Cast<  ::openfl::_internal::renderer::DrawCommandBuffer >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"__positionX") ) { _hx___positionX=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__positionY") ) { _hx___positionY=inValue.Cast< Float >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"__bufferData") ) { _hx___bufferData=inValue.Cast<  ::lime::utils::ArrayBufferView >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"__bufferLength") ) { _hx___bufferLength=inValue.Cast< int >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"__bufferContext") ) { _hx___bufferContext=inValue.Cast<  ::lime::_backend::native::NativeGLRenderContext >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__strokePadding") ) { _hx___strokePadding=inValue.Cast< Float >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"__transformDirty") ) { _hx___transformDirty=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__worldTransform") ) { _hx___worldTransform=inValue.Cast<  ::openfl::geom::Matrix >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"__renderTransform") ) { _hx___renderTransform=inValue.Cast<  ::openfl::geom::Matrix >(); return inValue; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"__shaderBufferPool") ) { _hx___shaderBufferPool=inValue.Cast<  ::lime::utils::ObjectPool_openfl__internal_renderer_ShaderBuffer >(); return inValue; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"__usedShaderBuffers") ) { _hx___usedShaderBuffers=inValue.Cast<  ::List >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool Graphics_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 15:
		if (HX_FIELD_EQ(inName,"maxTextureWidth") ) { maxTextureWidth=ioValue.Cast<  ::Dynamic >(); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"maxTextureHeight") ) { maxTextureHeight=ioValue.Cast<  ::Dynamic >(); return true; }
	}
	return false;
}

void Graphics_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("__bounds","\x95","\xf1","\x4c","\x0e"));
	outFields->push(HX_HCSTRING("__buffer","\x20","\x28","\xc4","\x78"));
	outFields->push(HX_HCSTRING("__bufferContext","\xaf","\xd9","\xa7","\xd6"));
	outFields->push(HX_HCSTRING("__bufferData","\x6a","\x3a","\x07","\xcc"));
	outFields->push(HX_HCSTRING("__bufferLength","\x26","\x09","\x9d","\xc4"));
	outFields->push(HX_HCSTRING("__commands","\xe8","\x23","\x8e","\x61"));
	outFields->push(HX_HCSTRING("__dirty","\xf2","\xa8","\x2e","\x44"));
	outFields->push(HX_HCSTRING("__height","\x07","\x73","\x7b","\xaa"));
	outFields->push(HX_HCSTRING("__managed","\x3f","\xe3","\x0f","\x95"));
	outFields->push(HX_HCSTRING("__positionX","\x6f","\x3c","\x7e","\xfe"));
	outFields->push(HX_HCSTRING("__positionY","\x70","\x3c","\x7e","\xfe"));
	outFields->push(HX_HCSTRING("__renderTransform","\x16","\xb8","\x95","\xb1"));
	outFields->push(HX_HCSTRING("__shaderBufferPool","\xa1","\x80","\xf9","\x54"));
	outFields->push(HX_HCSTRING("__strokePadding","\xd9","\x6d","\xda","\xc4"));
	outFields->push(HX_HCSTRING("__transformDirty","\x26","\xf6","\x91","\x84"));
	outFields->push(HX_HCSTRING("__usedShaderBuffers","\x31","\xef","\x1d","\x4f"));
	outFields->push(HX_HCSTRING("__visible","\x52","\xc9","\x72","\x24"));
	outFields->push(HX_HCSTRING("__owner","\x13","\xf1","\xd4","\xa2"));
	outFields->push(HX_HCSTRING("__width","\xe6","\x0e","\xc1","\x34"));
	outFields->push(HX_HCSTRING("__worldTransform","\xda","\xa7","\xd8","\x9a"));
	outFields->push(HX_HCSTRING("__cairo","\x68","\x89","\x77","\xab"));
	outFields->push(HX_HCSTRING("__bitmap","\x0f","\x7b","\x3b","\x99"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Graphics_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::openfl::geom::Rectangle*/ ,(int)offsetof(Graphics_obj,_hx___bounds),HX_HCSTRING("__bounds","\x95","\xf1","\x4c","\x0e")},
	{hx::fsObject /*::lime::graphics::opengl::GLObject*/ ,(int)offsetof(Graphics_obj,_hx___buffer),HX_HCSTRING("__buffer","\x20","\x28","\xc4","\x78")},
	{hx::fsObject /*::lime::_backend::native::NativeGLRenderContext*/ ,(int)offsetof(Graphics_obj,_hx___bufferContext),HX_HCSTRING("__bufferContext","\xaf","\xd9","\xa7","\xd6")},
	{hx::fsObject /*::lime::utils::ArrayBufferView*/ ,(int)offsetof(Graphics_obj,_hx___bufferData),HX_HCSTRING("__bufferData","\x6a","\x3a","\x07","\xcc")},
	{hx::fsInt,(int)offsetof(Graphics_obj,_hx___bufferLength),HX_HCSTRING("__bufferLength","\x26","\x09","\x9d","\xc4")},
	{hx::fsObject /*::openfl::_internal::renderer::DrawCommandBuffer*/ ,(int)offsetof(Graphics_obj,_hx___commands),HX_HCSTRING("__commands","\xe8","\x23","\x8e","\x61")},
	{hx::fsBool,(int)offsetof(Graphics_obj,_hx___dirty),HX_HCSTRING("__dirty","\xf2","\xa8","\x2e","\x44")},
	{hx::fsInt,(int)offsetof(Graphics_obj,_hx___height),HX_HCSTRING("__height","\x07","\x73","\x7b","\xaa")},
	{hx::fsBool,(int)offsetof(Graphics_obj,_hx___managed),HX_HCSTRING("__managed","\x3f","\xe3","\x0f","\x95")},
	{hx::fsFloat,(int)offsetof(Graphics_obj,_hx___positionX),HX_HCSTRING("__positionX","\x6f","\x3c","\x7e","\xfe")},
	{hx::fsFloat,(int)offsetof(Graphics_obj,_hx___positionY),HX_HCSTRING("__positionY","\x70","\x3c","\x7e","\xfe")},
	{hx::fsObject /*::openfl::geom::Matrix*/ ,(int)offsetof(Graphics_obj,_hx___renderTransform),HX_HCSTRING("__renderTransform","\x16","\xb8","\x95","\xb1")},
	{hx::fsObject /*::lime::utils::ObjectPool_openfl__internal_renderer_ShaderBuffer*/ ,(int)offsetof(Graphics_obj,_hx___shaderBufferPool),HX_HCSTRING("__shaderBufferPool","\xa1","\x80","\xf9","\x54")},
	{hx::fsFloat,(int)offsetof(Graphics_obj,_hx___strokePadding),HX_HCSTRING("__strokePadding","\xd9","\x6d","\xda","\xc4")},
	{hx::fsBool,(int)offsetof(Graphics_obj,_hx___transformDirty),HX_HCSTRING("__transformDirty","\x26","\xf6","\x91","\x84")},
	{hx::fsObject /*::List*/ ,(int)offsetof(Graphics_obj,_hx___usedShaderBuffers),HX_HCSTRING("__usedShaderBuffers","\x31","\xef","\x1d","\x4f")},
	{hx::fsBool,(int)offsetof(Graphics_obj,_hx___visible),HX_HCSTRING("__visible","\x52","\xc9","\x72","\x24")},
	{hx::fsObject /*::openfl::display::DisplayObject*/ ,(int)offsetof(Graphics_obj,_hx___owner),HX_HCSTRING("__owner","\x13","\xf1","\xd4","\xa2")},
	{hx::fsInt,(int)offsetof(Graphics_obj,_hx___width),HX_HCSTRING("__width","\xe6","\x0e","\xc1","\x34")},
	{hx::fsObject /*::openfl::geom::Matrix*/ ,(int)offsetof(Graphics_obj,_hx___worldTransform),HX_HCSTRING("__worldTransform","\xda","\xa7","\xd8","\x9a")},
	{hx::fsObject /*::lime::graphics::cairo::Cairo*/ ,(int)offsetof(Graphics_obj,_hx___cairo),HX_HCSTRING("__cairo","\x68","\x89","\x77","\xab")},
	{hx::fsObject /*::openfl::display::BitmapData*/ ,(int)offsetof(Graphics_obj,_hx___bitmap),HX_HCSTRING("__bitmap","\x0f","\x7b","\x3b","\x99")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo Graphics_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*Dynamic*/ ,(void *) &Graphics_obj::maxTextureHeight,HX_HCSTRING("maxTextureHeight","\xde","\x49","\x6c","\x61")},
	{hx::fsObject /*Dynamic*/ ,(void *) &Graphics_obj::maxTextureWidth,HX_HCSTRING("maxTextureWidth","\xef","\x1f","\x1f","\x70")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String Graphics_obj_sMemberFields[] = {
	HX_HCSTRING("__bounds","\x95","\xf1","\x4c","\x0e"),
	HX_HCSTRING("__buffer","\x20","\x28","\xc4","\x78"),
	HX_HCSTRING("__bufferContext","\xaf","\xd9","\xa7","\xd6"),
	HX_HCSTRING("__bufferData","\x6a","\x3a","\x07","\xcc"),
	HX_HCSTRING("__bufferLength","\x26","\x09","\x9d","\xc4"),
	HX_HCSTRING("__commands","\xe8","\x23","\x8e","\x61"),
	HX_HCSTRING("__dirty","\xf2","\xa8","\x2e","\x44"),
	HX_HCSTRING("__height","\x07","\x73","\x7b","\xaa"),
	HX_HCSTRING("__managed","\x3f","\xe3","\x0f","\x95"),
	HX_HCSTRING("__positionX","\x6f","\x3c","\x7e","\xfe"),
	HX_HCSTRING("__positionY","\x70","\x3c","\x7e","\xfe"),
	HX_HCSTRING("__renderTransform","\x16","\xb8","\x95","\xb1"),
	HX_HCSTRING("__shaderBufferPool","\xa1","\x80","\xf9","\x54"),
	HX_HCSTRING("__strokePadding","\xd9","\x6d","\xda","\xc4"),
	HX_HCSTRING("__transformDirty","\x26","\xf6","\x91","\x84"),
	HX_HCSTRING("__usedShaderBuffers","\x31","\xef","\x1d","\x4f"),
	HX_HCSTRING("__visible","\x52","\xc9","\x72","\x24"),
	HX_HCSTRING("__owner","\x13","\xf1","\xd4","\xa2"),
	HX_HCSTRING("__width","\xe6","\x0e","\xc1","\x34"),
	HX_HCSTRING("__worldTransform","\xda","\xa7","\xd8","\x9a"),
	HX_HCSTRING("__cairo","\x68","\x89","\x77","\xab"),
	HX_HCSTRING("__bitmap","\x0f","\x7b","\x3b","\x99"),
	HX_HCSTRING("beginBitmapFill","\x9b","\xc9","\x07","\x6a"),
	HX_HCSTRING("beginFill","\x4c","\xad","\x95","\x8c"),
	HX_HCSTRING("beginGradientFill","\x5c","\x3c","\x03","\x2e"),
	HX_HCSTRING("beginShaderFill","\xd1","\x4b","\x43","\x67"),
	HX_HCSTRING("clear","\x8d","\x71","\x5b","\x48"),
	HX_HCSTRING("copyFrom","\xbf","\x0b","\x61","\xc8"),
	HX_HCSTRING("cubicCurveTo","\xe0","\x07","\x90","\x2e"),
	HX_HCSTRING("curveTo","\x0a","\x60","\x88","\xce"),
	HX_HCSTRING("drawCircle","\x34","\xed","\xd0","\x97"),
	HX_HCSTRING("drawEllipse","\x3a","\x85","\xce","\x54"),
	HX_HCSTRING("drawGraphicsData","\xb9","\xaa","\x6e","\x60"),
	HX_HCSTRING("drawPath","\xc9","\x8f","\xbb","\x5e"),
	HX_HCSTRING("drawQuads","\x28","\xab","\xf2","\x25"),
	HX_HCSTRING("drawRect","\x48","\xf7","\x10","\x60"),
	HX_HCSTRING("drawRoundRect","\xee","\xc3","\xaa","\xe2"),
	HX_HCSTRING("drawRoundRectComplex","\xe2","\x43","\x2c","\x11"),
	HX_HCSTRING("drawTriangles","\x07","\x44","\x68","\xde"),
	HX_HCSTRING("endFill","\xfe","\x87","\xe0","\x25"),
	HX_HCSTRING("lineBitmapStyle","\x2e","\x3f","\x21","\x45"),
	HX_HCSTRING("lineGradientStyle","\x8d","\x24","\xf2","\xc1"),
	HX_HCSTRING("lineStyle","\x9d","\xa8","\x18","\xcb"),
	HX_HCSTRING("lineTo","\x8f","\x46","\xa0","\xec"),
	HX_HCSTRING("moveTo","\xec","\xd2","\xac","\xcc"),
	HX_HCSTRING("readGraphicsData","\x0b","\x7d","\x00","\x87"),
	HX_HCSTRING("__calculateBezierCubicPoint","\x0b","\xc2","\xaf","\xf4"),
	HX_HCSTRING("__calculateBezierQuadPoint","\x44","\x46","\xe8","\x5e"),
	HX_HCSTRING("__cleanup","\x04","\x5d","\x90","\x2c"),
	HX_HCSTRING("__getBounds","\x8b","\x58","\xa0","\x10"),
	HX_HCSTRING("__hitTest","\x25","\xb1","\xcd","\x63"),
	HX_HCSTRING("__inflateBounds","\x3c","\x6f","\xee","\xb6"),
	HX_HCSTRING("__readGraphicsData","\x2b","\x10","\x91","\xf2"),
	HX_HCSTRING("__update","\x29","\xf1","\x34","\x2f"),
	HX_HCSTRING("set___dirty","\x15","\x10","\x96","\xd4"),
	::String(null()) };

static void Graphics_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Graphics_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(Graphics_obj::maxTextureHeight,"maxTextureHeight");
	HX_MARK_MEMBER_NAME(Graphics_obj::maxTextureWidth,"maxTextureWidth");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Graphics_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Graphics_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(Graphics_obj::maxTextureHeight,"maxTextureHeight");
	HX_VISIT_MEMBER_NAME(Graphics_obj::maxTextureWidth,"maxTextureWidth");
};

#endif

hx::Class Graphics_obj::__mClass;

static ::String Graphics_obj_sStaticFields[] = {
	HX_HCSTRING("maxTextureHeight","\xde","\x49","\x6c","\x61"),
	HX_HCSTRING("maxTextureWidth","\xef","\x1f","\x1f","\x70"),
	::String(null())
};

void Graphics_obj::__register()
{
	hx::Object *dummy = new Graphics_obj;
	Graphics_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("openfl.display.Graphics","\x35","\x67","\x20","\x87");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Graphics_obj::__GetStatic;
	__mClass->mSetStaticField = &Graphics_obj::__SetStatic;
	__mClass->mMarkFunc = Graphics_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Graphics_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Graphics_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Graphics_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Graphics_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Graphics_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Graphics_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Graphics_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_043516e11ce5c7d5_50_boot)
HXDLIN(  50)		maxTextureHeight = null();
            	}
{
            	HX_STACKFRAME(&_hx_pos_043516e11ce5c7d5_51_boot)
HXDLIN(  51)		maxTextureWidth = null();
            	}
}

} // end namespace openfl
} // end namespace display
