// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_lime__backend_native_NativeGLRenderContext
#include <lime/_backend/native/NativeGLRenderContext.h>
#endif
#ifndef INCLUDED_lime_utils_ArrayBufferView
#include <lime/utils/ArrayBufferView.h>
#endif
#ifndef INCLUDED_lime_utils__DataPointer_DataPointer_Impl_
#include <lime/utils/_DataPointer/DataPointer_Impl_.h>
#endif
#ifndef INCLUDED_openfl_display_ShaderParameter
#include <openfl/display/ShaderParameter.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_7714f6598ef03af2_35_new,"openfl.display.ShaderParameter","new",0x4699528c,"openfl.display.ShaderParameter.new","openfl/display/ShaderParameter.hx",35,0xc89f13e6)
HX_LOCAL_STACK_FRAME(_hx_pos_7714f6598ef03af2_42___disableGL,"openfl.display.ShaderParameter","__disableGL",0xa1f6c919,"openfl.display.ShaderParameter.__disableGL","openfl/display/ShaderParameter.hx",42,0xc89f13e6)
HX_LOCAL_STACK_FRAME(_hx_pos_7714f6598ef03af2_55___updateGL,"openfl.display.ShaderParameter","__updateGL",0xca2ce6e2,"openfl.display.ShaderParameter.__updateGL","openfl/display/ShaderParameter.hx",55,0xc89f13e6)
HX_LOCAL_STACK_FRAME(_hx_pos_7714f6598ef03af2_249___updateGLFromBuffer,"openfl.display.ShaderParameter","__updateGLFromBuffer",0x5c6cdb8c,"openfl.display.ShaderParameter.__updateGLFromBuffer","openfl/display/ShaderParameter.hx",249,0xc89f13e6)
namespace openfl{
namespace display{

void ShaderParameter_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_7714f6598ef03af2_35_new)
HXDLIN(  35)		this->index = (int)0;
            	}

Dynamic ShaderParameter_obj::__CreateEmpty() { return new ShaderParameter_obj; }

void *ShaderParameter_obj::_hx_vtable = 0;

Dynamic ShaderParameter_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ShaderParameter_obj > _hx_result = new ShaderParameter_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool ShaderParameter_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x4a93ecb2;
}

void ShaderParameter_obj::_hx___disableGL( ::lime::_backend::native::NativeGLRenderContext gl){
            	HX_STACKFRAME(&_hx_pos_7714f6598ef03af2_42___disableGL)
HXDLIN(  42)		if (!(this->_hx___isUniform)) {
HXLINE(  44)			int _g1 = (int)0;
HXDLIN(  44)			int _g = this->_hx___arrayLength;
HXDLIN(  44)			while((_g1 < _g)){
HXLINE(  44)				_g1 = (_g1 + (int)1);
HXDLIN(  44)				int i = (_g1 - (int)1);
HXLINE(  46)				gl->disableVertexAttribArray(( (int)((this->index + i)) ));
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(ShaderParameter_obj,_hx___disableGL,(void))

void ShaderParameter_obj::_hx___updateGL( ::lime::_backend::native::NativeGLRenderContext gl,::cpp::VirtualArray overrideValue){
            	HX_STACKFRAME(&_hx_pos_7714f6598ef03af2_55___updateGL)
HXLINE(  57)		::cpp::VirtualArray value;
HXDLIN(  57)		if (hx::IsNotNull( overrideValue )) {
HXLINE(  57)			value = overrideValue;
            		}
            		else {
HXLINE(  57)			value = this->value;
            		}
HXLINE(  59)		::Array< bool > boolValue;
HXDLIN(  59)		if (this->_hx___isBool) {
HXLINE(  59)			boolValue = value;
            		}
            		else {
HXLINE(  59)			boolValue = null();
            		}
HXLINE(  60)		::Array< Float > floatValue;
HXDLIN(  60)		if (this->_hx___isFloat) {
HXLINE(  60)			floatValue = value;
            		}
            		else {
HXLINE(  60)			floatValue = null();
            		}
HXLINE(  61)		::Array< int > intValue;
HXDLIN(  61)		if (this->_hx___isInt) {
HXLINE(  61)			intValue = value;
            		}
            		else {
HXLINE(  61)			intValue = null();
            		}
HXLINE(  63)		if (this->_hx___isUniform) {
HXLINE(  65)			bool _hx_tmp;
HXDLIN(  65)			if (hx::IsNotNull( value )) {
HXLINE(  65)				_hx_tmp = (value->get_length() >= this->__length);
            			}
            			else {
HXLINE(  65)				_hx_tmp = false;
            			}
HXDLIN(  65)			if (_hx_tmp) {
HXLINE(  67)				 ::Dynamic _g = this->type;
HXDLIN(  67)				 ::Dynamic _hx_switch_0 = _g;
            				if (  (_hx_switch_0==(int)0) ){
HXLINE(  69)					int _hx_tmp1;
HXDLIN(  69)					if (boolValue->__get((int)0)) {
HXLINE(  69)						_hx_tmp1 = (int)1;
            					}
            					else {
HXLINE(  69)						_hx_tmp1 = (int)0;
            					}
HXDLIN(  69)					gl->uniform1i(( (int)(this->index) ),_hx_tmp1);
HXDLIN(  69)					goto _hx_goto_3;
            				}
            				if (  (_hx_switch_0==(int)1) ){
HXLINE(  70)					int _hx_tmp2;
HXDLIN(  70)					if (boolValue->__get((int)0)) {
HXLINE(  70)						_hx_tmp2 = (int)1;
            					}
            					else {
HXLINE(  70)						_hx_tmp2 = (int)0;
            					}
HXDLIN(  70)					int _hx_tmp3;
HXDLIN(  70)					if (boolValue->__get((int)1)) {
HXLINE(  70)						_hx_tmp3 = (int)1;
            					}
            					else {
HXLINE(  70)						_hx_tmp3 = (int)0;
            					}
HXDLIN(  70)					gl->uniform2i(( (int)(this->index) ),_hx_tmp2,_hx_tmp3);
HXDLIN(  70)					goto _hx_goto_3;
            				}
            				if (  (_hx_switch_0==(int)2) ){
HXLINE(  71)					int _hx_tmp4;
HXDLIN(  71)					if (boolValue->__get((int)0)) {
HXLINE(  71)						_hx_tmp4 = (int)1;
            					}
            					else {
HXLINE(  71)						_hx_tmp4 = (int)0;
            					}
HXDLIN(  71)					int _hx_tmp5;
HXDLIN(  71)					if (boolValue->__get((int)1)) {
HXLINE(  71)						_hx_tmp5 = (int)1;
            					}
            					else {
HXLINE(  71)						_hx_tmp5 = (int)0;
            					}
HXDLIN(  71)					int _hx_tmp6;
HXDLIN(  71)					if (boolValue->__get((int)2)) {
HXLINE(  71)						_hx_tmp6 = (int)1;
            					}
            					else {
HXLINE(  71)						_hx_tmp6 = (int)0;
            					}
HXDLIN(  71)					gl->uniform3i(( (int)(this->index) ),_hx_tmp4,_hx_tmp5,_hx_tmp6);
HXDLIN(  71)					goto _hx_goto_3;
            				}
            				if (  (_hx_switch_0==(int)3) ){
HXLINE(  72)					int _hx_tmp7;
HXDLIN(  72)					if (boolValue->__get((int)0)) {
HXLINE(  72)						_hx_tmp7 = (int)1;
            					}
            					else {
HXLINE(  72)						_hx_tmp7 = (int)0;
            					}
HXDLIN(  72)					int _hx_tmp8;
HXDLIN(  72)					if (boolValue->__get((int)1)) {
HXLINE(  72)						_hx_tmp8 = (int)1;
            					}
            					else {
HXLINE(  72)						_hx_tmp8 = (int)0;
            					}
HXDLIN(  72)					int _hx_tmp9;
HXDLIN(  72)					if (boolValue->__get((int)2)) {
HXLINE(  72)						_hx_tmp9 = (int)1;
            					}
            					else {
HXLINE(  72)						_hx_tmp9 = (int)0;
            					}
HXDLIN(  72)					int _hx_tmp10;
HXDLIN(  72)					if (boolValue->__get((int)3)) {
HXLINE(  72)						_hx_tmp10 = (int)1;
            					}
            					else {
HXLINE(  72)						_hx_tmp10 = (int)0;
            					}
HXDLIN(  72)					gl->uniform4i(( (int)(this->index) ),_hx_tmp7,_hx_tmp8,_hx_tmp9,_hx_tmp10);
HXDLIN(  72)					goto _hx_goto_3;
            				}
            				if (  (_hx_switch_0==(int)4) ){
HXLINE(  73)					 ::Dynamic _hx_tmp11 = this->index;
HXDLIN(  73)					gl->uniform1f(( (int)(_hx_tmp11) ),floatValue->__get((int)0));
HXDLIN(  73)					goto _hx_goto_3;
            				}
            				if (  (_hx_switch_0==(int)5) ){
HXLINE(  74)					 ::Dynamic _hx_tmp12 = this->index;
HXDLIN(  74)					gl->uniform2f(( (int)(_hx_tmp12) ),floatValue->__get((int)0),floatValue->__get((int)1));
HXDLIN(  74)					goto _hx_goto_3;
            				}
            				if (  (_hx_switch_0==(int)6) ){
HXLINE(  75)					 ::Dynamic _hx_tmp13 = this->index;
HXDLIN(  75)					gl->uniform3f(( (int)(_hx_tmp13) ),floatValue->__get((int)0),floatValue->__get((int)1),floatValue->__get((int)2));
HXDLIN(  75)					goto _hx_goto_3;
            				}
            				if (  (_hx_switch_0==(int)7) ){
HXLINE(  76)					 ::Dynamic _hx_tmp14 = this->index;
HXDLIN(  76)					gl->uniform4f(( (int)(_hx_tmp14) ),floatValue->__get((int)0),floatValue->__get((int)1),floatValue->__get((int)2),floatValue->__get((int)3));
HXDLIN(  76)					goto _hx_goto_3;
            				}
            				if (  (_hx_switch_0==(int)8) ){
HXLINE( 104)					 ::Dynamic _hx_tmp15 = this->index;
HXDLIN( 104)					gl->uniform1i(( (int)(_hx_tmp15) ),intValue->__get((int)0));
HXDLIN( 104)					goto _hx_goto_3;
            				}
            				if (  (_hx_switch_0==(int)9) ){
HXLINE( 105)					 ::Dynamic _hx_tmp16 = this->index;
HXDLIN( 105)					gl->uniform2i(( (int)(_hx_tmp16) ),intValue->__get((int)0),intValue->__get((int)1));
HXDLIN( 105)					goto _hx_goto_3;
            				}
            				if (  (_hx_switch_0==(int)10) ){
HXLINE( 106)					 ::Dynamic _hx_tmp17 = this->index;
HXDLIN( 106)					gl->uniform3i(( (int)(_hx_tmp17) ),intValue->__get((int)0),intValue->__get((int)1),intValue->__get((int)2));
HXDLIN( 106)					goto _hx_goto_3;
            				}
            				if (  (_hx_switch_0==(int)11) ){
HXLINE( 107)					 ::Dynamic _hx_tmp18 = this->index;
HXDLIN( 107)					gl->uniform4i(( (int)(_hx_tmp18) ),intValue->__get((int)0),intValue->__get((int)1),intValue->__get((int)2),intValue->__get((int)3));
HXDLIN( 107)					goto _hx_goto_3;
            				}
            				if (  (_hx_switch_0==(int)12) ){
HXLINE(  79)					{
HXLINE(  79)						int _g1 = (int)0;
HXDLIN(  79)						while((_g1 < (int)4)){
HXLINE(  79)							_g1 = (_g1 + (int)1);
HXDLIN(  79)							int i = (_g1 - (int)1);
HXLINE(  80)							{
HXLINE(  80)								 ::lime::utils::ArrayBufferView this1 = this->_hx___uniformMatrix;
HXDLIN(  80)								Float val = floatValue->__get(i);
HXDLIN(  80)								{
HXLINE(  80)									int this2 = this1->byteOffset;
HXDLIN(  80)									::__hxcpp_memory_set_float(this1->buffer->b,(this2 + (i * (int)4)),val);
            								}
            							}
            						}
            					}
HXLINE(  82)					 ::Dynamic _hx_tmp19 = this->index;
HXDLIN(  82)					gl->uniformMatrix2fv(( (int)(_hx_tmp19) ),(int)1,false,::lime::utils::_DataPointer::DataPointer_Impl__obj::fromArrayBufferView(this->_hx___uniformMatrix));
HXLINE(  78)					goto _hx_goto_3;
            				}
            				if (  (_hx_switch_0==(int)16) ){
HXLINE(  89)					{
HXLINE(  89)						int _g2 = (int)0;
HXDLIN(  89)						while((_g2 < (int)9)){
HXLINE(  89)							_g2 = (_g2 + (int)1);
HXDLIN(  89)							int i1 = (_g2 - (int)1);
HXLINE(  90)							{
HXLINE(  90)								 ::lime::utils::ArrayBufferView this3 = this->_hx___uniformMatrix;
HXDLIN(  90)								Float val1 = floatValue->__get(i1);
HXDLIN(  90)								{
HXLINE(  90)									int this4 = this3->byteOffset;
HXDLIN(  90)									::__hxcpp_memory_set_float(this3->buffer->b,(this4 + (i1 * (int)4)),val1);
            								}
            							}
            						}
            					}
HXLINE(  92)					 ::Dynamic _hx_tmp20 = this->index;
HXDLIN(  92)					gl->uniformMatrix3fv(( (int)(_hx_tmp20) ),(int)1,false,::lime::utils::_DataPointer::DataPointer_Impl__obj::fromArrayBufferView(this->_hx___uniformMatrix));
HXLINE(  88)					goto _hx_goto_3;
            				}
            				if (  (_hx_switch_0==(int)20) ){
HXLINE(  99)					{
HXLINE(  99)						int _g3 = (int)0;
HXDLIN(  99)						while((_g3 < (int)16)){
HXLINE(  99)							_g3 = (_g3 + (int)1);
HXDLIN(  99)							int i2 = (_g3 - (int)1);
HXLINE( 100)							{
HXLINE( 100)								 ::lime::utils::ArrayBufferView this5 = this->_hx___uniformMatrix;
HXDLIN( 100)								Float val2 = floatValue->__get(i2);
HXDLIN( 100)								{
HXLINE( 100)									int this6 = this5->byteOffset;
HXDLIN( 100)									::__hxcpp_memory_set_float(this5->buffer->b,(this6 + (i2 * (int)4)),val2);
            								}
            							}
            						}
            					}
HXLINE( 102)					 ::Dynamic _hx_tmp21 = this->index;
HXDLIN( 102)					gl->uniformMatrix4fv(( (int)(_hx_tmp21) ),(int)1,false,::lime::utils::_DataPointer::DataPointer_Impl__obj::fromArrayBufferView(this->_hx___uniformMatrix));
HXLINE(  98)					goto _hx_goto_3;
            				}
            				/* default */{
            				}
            				_hx_goto_3:;
            			}
            			else {
HXLINE( 115)				 ::Dynamic _g4 = this->type;
HXDLIN( 115)				 ::Dynamic _hx_switch_1 = _g4;
            				if (  (_hx_switch_1==(int)1) ||  (_hx_switch_1==(int)9) ){
HXLINE( 118)					gl->uniform2i(( (int)(this->index) ),(int)0,(int)0);
HXDLIN( 118)					goto _hx_goto_7;
            				}
            				if (  (_hx_switch_1==(int)3) ||  (_hx_switch_1==(int)11) ){
HXLINE( 120)					gl->uniform4i(( (int)(this->index) ),(int)0,(int)0,(int)0,(int)0);
HXDLIN( 120)					goto _hx_goto_7;
            				}
            				if (  (_hx_switch_1==(int)4) ){
HXLINE( 121)					gl->uniform1f(( (int)(this->index) ),(int)0);
HXDLIN( 121)					goto _hx_goto_7;
            				}
            				if (  (_hx_switch_1==(int)5) ){
HXLINE( 122)					gl->uniform2f(( (int)(this->index) ),(int)0,(int)0);
HXDLIN( 122)					goto _hx_goto_7;
            				}
            				if (  (_hx_switch_1==(int)6) ){
HXLINE( 123)					gl->uniform3f(( (int)(this->index) ),(int)0,(int)0,(int)0);
HXDLIN( 123)					goto _hx_goto_7;
            				}
            				if (  (_hx_switch_1==(int)7) ){
HXLINE( 124)					gl->uniform4f(( (int)(this->index) ),(int)0,(int)0,(int)0,(int)0);
HXDLIN( 124)					goto _hx_goto_7;
            				}
            				if (  (_hx_switch_1==(int)0) ||  (_hx_switch_1==(int)8) ){
HXLINE( 117)					gl->uniform1i(( (int)(this->index) ),(int)0);
HXDLIN( 117)					goto _hx_goto_7;
            				}
            				if (  (_hx_switch_1==(int)2) ||  (_hx_switch_1==(int)10) ){
HXLINE( 119)					gl->uniform3i(( (int)(this->index) ),(int)0,(int)0,(int)0);
HXDLIN( 119)					goto _hx_goto_7;
            				}
            				if (  (_hx_switch_1==(int)12) ){
HXLINE( 127)					{
HXLINE( 127)						int _g5 = (int)0;
HXDLIN( 127)						while((_g5 < (int)4)){
HXLINE( 127)							_g5 = (_g5 + (int)1);
HXDLIN( 127)							int i3 = (_g5 - (int)1);
HXLINE( 128)							{
HXLINE( 128)								 ::lime::utils::ArrayBufferView this7 = this->_hx___uniformMatrix;
HXDLIN( 128)								{
HXLINE( 128)									int this8 = this7->byteOffset;
HXDLIN( 128)									::__hxcpp_memory_set_float(this7->buffer->b,(this8 + (i3 * (int)4)),(int)0);
            								}
            							}
            						}
            					}
HXLINE( 130)					 ::Dynamic _hx_tmp22 = this->index;
HXDLIN( 130)					gl->uniformMatrix2fv(( (int)(_hx_tmp22) ),(int)1,false,::lime::utils::_DataPointer::DataPointer_Impl__obj::fromArrayBufferView(this->_hx___uniformMatrix));
HXLINE( 126)					goto _hx_goto_7;
            				}
            				if (  (_hx_switch_1==(int)16) ){
HXLINE( 137)					{
HXLINE( 137)						int _g6 = (int)0;
HXDLIN( 137)						while((_g6 < (int)9)){
HXLINE( 137)							_g6 = (_g6 + (int)1);
HXDLIN( 137)							int i4 = (_g6 - (int)1);
HXLINE( 138)							{
HXLINE( 138)								 ::lime::utils::ArrayBufferView this9 = this->_hx___uniformMatrix;
HXDLIN( 138)								{
HXLINE( 138)									int this10 = this9->byteOffset;
HXDLIN( 138)									::__hxcpp_memory_set_float(this9->buffer->b,(this10 + (i4 * (int)4)),(int)0);
            								}
            							}
            						}
            					}
HXLINE( 140)					 ::Dynamic _hx_tmp23 = this->index;
HXDLIN( 140)					gl->uniformMatrix3fv(( (int)(_hx_tmp23) ),(int)1,false,::lime::utils::_DataPointer::DataPointer_Impl__obj::fromArrayBufferView(this->_hx___uniformMatrix));
HXLINE( 136)					goto _hx_goto_7;
            				}
            				if (  (_hx_switch_1==(int)20) ){
HXLINE( 147)					{
HXLINE( 147)						int _g7 = (int)0;
HXDLIN( 147)						while((_g7 < (int)16)){
HXLINE( 147)							_g7 = (_g7 + (int)1);
HXDLIN( 147)							int i5 = (_g7 - (int)1);
HXLINE( 148)							{
HXLINE( 148)								 ::lime::utils::ArrayBufferView this11 = this->_hx___uniformMatrix;
HXDLIN( 148)								{
HXLINE( 148)									int this12 = this11->byteOffset;
HXDLIN( 148)									::__hxcpp_memory_set_float(this11->buffer->b,(this12 + (i5 * (int)4)),(int)0);
            								}
            							}
            						}
            					}
HXLINE( 150)					 ::Dynamic _hx_tmp24 = this->index;
HXDLIN( 150)					gl->uniformMatrix4fv(( (int)(_hx_tmp24) ),(int)1,false,::lime::utils::_DataPointer::DataPointer_Impl__obj::fromArrayBufferView(this->_hx___uniformMatrix));
HXLINE( 146)					goto _hx_goto_7;
            				}
            				/* default */{
            				}
            				_hx_goto_7:;
            			}
            		}
            		else {
HXLINE( 160)			bool _hx_tmp25;
HXDLIN( 160)			if (!(this->_hx___useArray)) {
HXLINE( 160)				if (hx::IsNotNull( value )) {
HXLINE( 160)					_hx_tmp25 = (value->get_length() == this->__length);
            				}
            				else {
HXLINE( 160)					_hx_tmp25 = true;
            				}
            			}
            			else {
HXLINE( 160)				_hx_tmp25 = false;
            			}
HXDLIN( 160)			if (_hx_tmp25) {
HXLINE( 162)				{
HXLINE( 162)					int _g11 = (int)0;
HXDLIN( 162)					int _g8 = this->_hx___arrayLength;
HXDLIN( 162)					while((_g11 < _g8)){
HXLINE( 162)						_g11 = (_g11 + (int)1);
HXDLIN( 162)						int i6 = (_g11 - (int)1);
HXLINE( 164)						gl->disableVertexAttribArray(( (int)((this->index + i6)) ));
            					}
            				}
HXLINE( 168)				if (hx::IsNotNull( value )) {
HXLINE( 170)					 ::Dynamic _g9 = this->type;
HXDLIN( 170)					 ::Dynamic _hx_switch_2 = _g9;
            					if (  (_hx_switch_2==(int)0) ){
HXLINE( 172)						Float _hx_tmp26;
HXDLIN( 172)						if (boolValue->__get((int)0)) {
HXLINE( 172)							_hx_tmp26 = (int)1;
            						}
            						else {
HXLINE( 172)							_hx_tmp26 = (int)0;
            						}
HXDLIN( 172)						gl->vertexAttrib1f(( (int)(this->index) ),_hx_tmp26);
HXDLIN( 172)						goto _hx_goto_12;
            					}
            					if (  (_hx_switch_2==(int)1) ){
HXLINE( 173)						Float _hx_tmp27;
HXDLIN( 173)						if (boolValue->__get((int)0)) {
HXLINE( 173)							_hx_tmp27 = (int)1;
            						}
            						else {
HXLINE( 173)							_hx_tmp27 = (int)0;
            						}
HXDLIN( 173)						Float _hx_tmp28;
HXDLIN( 173)						if (boolValue->__get((int)1)) {
HXLINE( 173)							_hx_tmp28 = (int)1;
            						}
            						else {
HXLINE( 173)							_hx_tmp28 = (int)0;
            						}
HXDLIN( 173)						gl->vertexAttrib2f(( (int)(this->index) ),_hx_tmp27,_hx_tmp28);
HXDLIN( 173)						goto _hx_goto_12;
            					}
            					if (  (_hx_switch_2==(int)2) ){
HXLINE( 174)						Float _hx_tmp29;
HXDLIN( 174)						if (boolValue->__get((int)0)) {
HXLINE( 174)							_hx_tmp29 = (int)1;
            						}
            						else {
HXLINE( 174)							_hx_tmp29 = (int)0;
            						}
HXDLIN( 174)						Float _hx_tmp30;
HXDLIN( 174)						if (boolValue->__get((int)1)) {
HXLINE( 174)							_hx_tmp30 = (int)1;
            						}
            						else {
HXLINE( 174)							_hx_tmp30 = (int)0;
            						}
HXDLIN( 174)						Float _hx_tmp31;
HXDLIN( 174)						if (boolValue->__get((int)2)) {
HXLINE( 174)							_hx_tmp31 = (int)1;
            						}
            						else {
HXLINE( 174)							_hx_tmp31 = (int)0;
            						}
HXDLIN( 174)						gl->vertexAttrib3f(( (int)(this->index) ),_hx_tmp29,_hx_tmp30,_hx_tmp31);
HXDLIN( 174)						goto _hx_goto_12;
            					}
            					if (  (_hx_switch_2==(int)3) ){
HXLINE( 175)						Float _hx_tmp32;
HXDLIN( 175)						if (boolValue->__get((int)0)) {
HXLINE( 175)							_hx_tmp32 = (int)1;
            						}
            						else {
HXLINE( 175)							_hx_tmp32 = (int)0;
            						}
HXDLIN( 175)						Float _hx_tmp33;
HXDLIN( 175)						if (boolValue->__get((int)1)) {
HXLINE( 175)							_hx_tmp33 = (int)1;
            						}
            						else {
HXLINE( 175)							_hx_tmp33 = (int)0;
            						}
HXDLIN( 175)						Float _hx_tmp34;
HXDLIN( 175)						if (boolValue->__get((int)2)) {
HXLINE( 175)							_hx_tmp34 = (int)1;
            						}
            						else {
HXLINE( 175)							_hx_tmp34 = (int)0;
            						}
HXDLIN( 175)						Float _hx_tmp35;
HXDLIN( 175)						if (boolValue->__get((int)3)) {
HXLINE( 175)							_hx_tmp35 = (int)1;
            						}
            						else {
HXLINE( 175)							_hx_tmp35 = (int)0;
            						}
HXDLIN( 175)						gl->vertexAttrib4f(( (int)(this->index) ),_hx_tmp32,_hx_tmp33,_hx_tmp34,_hx_tmp35);
HXDLIN( 175)						goto _hx_goto_12;
            					}
            					if (  (_hx_switch_2==(int)4) ){
HXLINE( 176)						 ::Dynamic _hx_tmp36 = this->index;
HXDLIN( 176)						gl->vertexAttrib1f(( (int)(_hx_tmp36) ),floatValue->__get((int)0));
HXDLIN( 176)						goto _hx_goto_12;
            					}
            					if (  (_hx_switch_2==(int)5) ){
HXLINE( 177)						 ::Dynamic _hx_tmp37 = this->index;
HXDLIN( 177)						gl->vertexAttrib2f(( (int)(_hx_tmp37) ),floatValue->__get((int)0),floatValue->__get((int)1));
HXDLIN( 177)						goto _hx_goto_12;
            					}
            					if (  (_hx_switch_2==(int)6) ){
HXLINE( 178)						 ::Dynamic _hx_tmp38 = this->index;
HXDLIN( 178)						gl->vertexAttrib3f(( (int)(_hx_tmp38) ),floatValue->__get((int)0),floatValue->__get((int)1),floatValue->__get((int)2));
HXDLIN( 178)						goto _hx_goto_12;
            					}
            					if (  (_hx_switch_2==(int)7) ){
HXLINE( 179)						 ::Dynamic _hx_tmp39 = this->index;
HXDLIN( 179)						gl->vertexAttrib4f(( (int)(_hx_tmp39) ),floatValue->__get((int)0),floatValue->__get((int)1),floatValue->__get((int)2),floatValue->__get((int)3));
HXDLIN( 179)						goto _hx_goto_12;
            					}
            					if (  (_hx_switch_2==(int)8) ){
HXLINE( 196)						 ::Dynamic _hx_tmp40 = this->index;
HXDLIN( 196)						gl->vertexAttrib1f(( (int)(_hx_tmp40) ),intValue->__get((int)0));
HXDLIN( 196)						goto _hx_goto_12;
            					}
            					if (  (_hx_switch_2==(int)9) ){
HXLINE( 197)						 ::Dynamic _hx_tmp41 = this->index;
HXDLIN( 197)						gl->vertexAttrib2f(( (int)(_hx_tmp41) ),intValue->__get((int)0),intValue->__get((int)1));
HXDLIN( 197)						goto _hx_goto_12;
            					}
            					if (  (_hx_switch_2==(int)10) ){
HXLINE( 198)						 ::Dynamic _hx_tmp42 = this->index;
HXDLIN( 198)						gl->vertexAttrib3f(( (int)(_hx_tmp42) ),intValue->__get((int)0),intValue->__get((int)1),intValue->__get((int)2));
HXDLIN( 198)						goto _hx_goto_12;
            					}
            					if (  (_hx_switch_2==(int)11) ){
HXLINE( 199)						 ::Dynamic _hx_tmp43 = this->index;
HXDLIN( 199)						gl->vertexAttrib4f(( (int)(_hx_tmp43) ),intValue->__get((int)0),intValue->__get((int)1),intValue->__get((int)2),intValue->__get((int)3));
HXDLIN( 199)						goto _hx_goto_12;
            					}
            					if (  (_hx_switch_2==(int)12) ){
HXLINE( 182)						int _g10 = (int)0;
HXDLIN( 182)						while((_g10 < (int)2)){
HXLINE( 182)							_g10 = (_g10 + (int)1);
HXDLIN( 182)							int i7 = (_g10 - (int)1);
HXLINE( 183)							 ::Dynamic _hx_tmp44 = (this->index + i7);
HXDLIN( 183)							gl->vertexAttrib2f(( (int)(_hx_tmp44) ),floatValue->__get((i7 * (int)2)),floatValue->__get(((i7 * (int)2) + (int)1)));
            						}
HXLINE( 182)						goto _hx_goto_12;
            					}
            					if (  (_hx_switch_2==(int)16) ){
HXLINE( 187)						int _g12 = (int)0;
HXDLIN( 187)						while((_g12 < (int)3)){
HXLINE( 187)							_g12 = (_g12 + (int)1);
HXDLIN( 187)							int i8 = (_g12 - (int)1);
HXLINE( 188)							 ::Dynamic _hx_tmp45 = (this->index + i8);
HXDLIN( 188)							gl->vertexAttrib3f(( (int)(_hx_tmp45) ),floatValue->__get((i8 * (int)3)),floatValue->__get(((i8 * (int)3) + (int)1)),floatValue->__get(((i8 * (int)3) + (int)2)));
            						}
HXLINE( 187)						goto _hx_goto_12;
            					}
            					if (  (_hx_switch_2==(int)20) ){
HXLINE( 192)						int _g13 = (int)0;
HXDLIN( 192)						while((_g13 < (int)4)){
HXLINE( 192)							_g13 = (_g13 + (int)1);
HXDLIN( 192)							int i9 = (_g13 - (int)1);
HXLINE( 193)							 ::Dynamic _hx_tmp46 = (this->index + i9);
HXDLIN( 193)							gl->vertexAttrib4f(( (int)(_hx_tmp46) ),floatValue->__get((i9 * (int)4)),floatValue->__get(((i9 * (int)4) + (int)1)),floatValue->__get(((i9 * (int)4) + (int)2)),floatValue->__get(((i9 * (int)4) + (int)3)));
            						}
HXLINE( 192)						goto _hx_goto_12;
            					}
            					/* default */{
            					}
            					_hx_goto_12:;
            				}
            				else {
HXLINE( 206)					 ::Dynamic _g14 = this->type;
HXDLIN( 206)					 ::Dynamic _hx_switch_3 = _g14;
            					if (  (_hx_switch_3==(int)1) ||  (_hx_switch_3==(int)5) ||  (_hx_switch_3==(int)9) ){
HXLINE( 209)						gl->vertexAttrib2f(( (int)(this->index) ),(int)0,(int)0);
HXDLIN( 209)						goto _hx_goto_16;
            					}
            					if (  (_hx_switch_3==(int)3) ||  (_hx_switch_3==(int)7) ||  (_hx_switch_3==(int)11) ){
HXLINE( 211)						gl->vertexAttrib4f(( (int)(this->index) ),(int)0,(int)0,(int)0,(int)0);
HXDLIN( 211)						goto _hx_goto_16;
            					}
            					if (  (_hx_switch_3==(int)0) ||  (_hx_switch_3==(int)4) ||  (_hx_switch_3==(int)8) ){
HXLINE( 208)						gl->vertexAttrib1f(( (int)(this->index) ),(int)0);
HXDLIN( 208)						goto _hx_goto_16;
            					}
            					if (  (_hx_switch_3==(int)2) ||  (_hx_switch_3==(int)6) ||  (_hx_switch_3==(int)10) ){
HXLINE( 210)						gl->vertexAttrib3f(( (int)(this->index) ),(int)0,(int)0,(int)0);
HXDLIN( 210)						goto _hx_goto_16;
            					}
            					if (  (_hx_switch_3==(int)12) ){
HXLINE( 214)						int _g15 = (int)0;
HXDLIN( 214)						while((_g15 < (int)2)){
HXLINE( 214)							_g15 = (_g15 + (int)1);
HXDLIN( 214)							int i10 = (_g15 - (int)1);
HXLINE( 215)							gl->vertexAttrib2f(( (int)((this->index + i10)) ),(int)0,(int)0);
            						}
HXLINE( 214)						goto _hx_goto_16;
            					}
            					if (  (_hx_switch_3==(int)16) ){
HXLINE( 219)						int _g16 = (int)0;
HXDLIN( 219)						while((_g16 < (int)3)){
HXLINE( 219)							_g16 = (_g16 + (int)1);
HXDLIN( 219)							int i11 = (_g16 - (int)1);
HXLINE( 220)							gl->vertexAttrib3f(( (int)((this->index + i11)) ),(int)0,(int)0,(int)0);
            						}
HXLINE( 219)						goto _hx_goto_16;
            					}
            					if (  (_hx_switch_3==(int)20) ){
HXLINE( 224)						int _g17 = (int)0;
HXDLIN( 224)						while((_g17 < (int)4)){
HXLINE( 224)							_g17 = (_g17 + (int)1);
HXDLIN( 224)							int i12 = (_g17 - (int)1);
HXLINE( 225)							gl->vertexAttrib4f(( (int)((this->index + i12)) ),(int)0,(int)0,(int)0,(int)0);
            						}
HXLINE( 224)						goto _hx_goto_16;
            					}
            					/* default */{
            					}
            					_hx_goto_16:;
            				}
            			}
            			else {
HXLINE( 236)				int _g18 = (int)0;
HXDLIN( 236)				int _g19 = this->_hx___arrayLength;
HXDLIN( 236)				while((_g18 < _g19)){
HXLINE( 236)					_g18 = (_g18 + (int)1);
HXDLIN( 236)					int i13 = (_g18 - (int)1);
HXLINE( 237)					gl->enableVertexAttribArray(( (int)((this->index + i13)) ));
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(ShaderParameter_obj,_hx___updateGL,(void))

void ShaderParameter_obj::_hx___updateGLFromBuffer( ::lime::_backend::native::NativeGLRenderContext gl, ::lime::utils::ArrayBufferView buffer,int position,int length){
            	HX_STACKFRAME(&_hx_pos_7714f6598ef03af2_249___updateGLFromBuffer)
HXDLIN( 249)		if (this->_hx___isUniform) {
HXLINE( 251)			if ((length >= this->__length)) {
HXLINE( 253)				 ::Dynamic _g = this->type;
HXDLIN( 253)				 ::Dynamic _hx_switch_0 = _g;
            				if (  (_hx_switch_0==(int)1) ||  (_hx_switch_0==(int)9) ){
HXLINE( 256)					 ::Dynamic _hx_tmp = this->index;
HXDLIN( 256)					int buffer1 = buffer->byteOffset;
HXDLIN( 256)					int _hx_tmp1 = ::Std_obj::_hx_int(::__hxcpp_memory_get_float(buffer->buffer->b,(buffer1 + (position * (int)4))));
HXDLIN( 256)					int buffer2 = buffer->byteOffset;
HXDLIN( 256)					gl->uniform2i(( (int)(_hx_tmp) ),_hx_tmp1,::Std_obj::_hx_int(::__hxcpp_memory_get_float(buffer->buffer->b,(buffer2 + ((position + (int)1) * (int)4)))));
HXDLIN( 256)					goto _hx_goto_22;
            				}
            				if (  (_hx_switch_0==(int)3) ||  (_hx_switch_0==(int)11) ){
HXLINE( 258)					 ::Dynamic _hx_tmp2 = this->index;
HXDLIN( 258)					int buffer3 = buffer->byteOffset;
HXDLIN( 258)					int _hx_tmp3 = ::Std_obj::_hx_int(::__hxcpp_memory_get_float(buffer->buffer->b,(buffer3 + (position * (int)4))));
HXDLIN( 258)					int buffer4 = buffer->byteOffset;
HXDLIN( 258)					int _hx_tmp4 = ::Std_obj::_hx_int(::__hxcpp_memory_get_float(buffer->buffer->b,(buffer4 + ((position + (int)1) * (int)4))));
HXDLIN( 258)					int buffer5 = buffer->byteOffset;
HXDLIN( 258)					int _hx_tmp5 = ::Std_obj::_hx_int(::__hxcpp_memory_get_float(buffer->buffer->b,(buffer5 + ((position + (int)2) * (int)4))));
HXDLIN( 258)					int buffer6 = buffer->byteOffset;
HXDLIN( 258)					gl->uniform4i(( (int)(_hx_tmp2) ),_hx_tmp3,_hx_tmp4,_hx_tmp5,::Std_obj::_hx_int(::__hxcpp_memory_get_float(buffer->buffer->b,(buffer6 + ((position + (int)3) * (int)4)))));
HXDLIN( 258)					goto _hx_goto_22;
            				}
            				if (  (_hx_switch_0==(int)4) ){
HXLINE( 259)					 ::Dynamic _hx_tmp6 = this->index;
HXDLIN( 259)					int buffer7 = buffer->byteOffset;
HXDLIN( 259)					gl->uniform1f(( (int)(_hx_tmp6) ),::__hxcpp_memory_get_float(buffer->buffer->b,(buffer7 + (position * (int)4))));
HXDLIN( 259)					goto _hx_goto_22;
            				}
            				if (  (_hx_switch_0==(int)5) ){
HXLINE( 260)					 ::Dynamic _hx_tmp7 = this->index;
HXDLIN( 260)					int buffer8 = buffer->byteOffset;
HXDLIN( 260)					Float _hx_tmp8 = ::__hxcpp_memory_get_float(buffer->buffer->b,(buffer8 + (position * (int)4)));
HXDLIN( 260)					int buffer9 = buffer->byteOffset;
HXDLIN( 260)					gl->uniform2f(( (int)(_hx_tmp7) ),_hx_tmp8,::__hxcpp_memory_get_float(buffer->buffer->b,(buffer9 + ((position + (int)1) * (int)4))));
HXDLIN( 260)					goto _hx_goto_22;
            				}
            				if (  (_hx_switch_0==(int)6) ){
HXLINE( 261)					 ::Dynamic _hx_tmp9 = this->index;
HXDLIN( 261)					int buffer10 = buffer->byteOffset;
HXDLIN( 261)					Float _hx_tmp10 = ::__hxcpp_memory_get_float(buffer->buffer->b,(buffer10 + (position * (int)4)));
HXDLIN( 261)					int buffer11 = buffer->byteOffset;
HXDLIN( 261)					Float _hx_tmp11 = ::__hxcpp_memory_get_float(buffer->buffer->b,(buffer11 + ((position + (int)1) * (int)4)));
HXDLIN( 261)					int buffer12 = buffer->byteOffset;
HXDLIN( 261)					gl->uniform3f(( (int)(_hx_tmp9) ),_hx_tmp10,_hx_tmp11,::__hxcpp_memory_get_float(buffer->buffer->b,(buffer12 + ((position + (int)2) * (int)4))));
HXDLIN( 261)					goto _hx_goto_22;
            				}
            				if (  (_hx_switch_0==(int)7) ){
HXLINE( 262)					 ::Dynamic _hx_tmp12 = this->index;
HXDLIN( 262)					int buffer13 = buffer->byteOffset;
HXDLIN( 262)					Float _hx_tmp13 = ::__hxcpp_memory_get_float(buffer->buffer->b,(buffer13 + (position * (int)4)));
HXDLIN( 262)					int buffer14 = buffer->byteOffset;
HXDLIN( 262)					Float _hx_tmp14 = ::__hxcpp_memory_get_float(buffer->buffer->b,(buffer14 + ((position + (int)1) * (int)4)));
HXDLIN( 262)					int buffer15 = buffer->byteOffset;
HXDLIN( 262)					Float _hx_tmp15 = ::__hxcpp_memory_get_float(buffer->buffer->b,(buffer15 + ((position + (int)2) * (int)4)));
HXDLIN( 262)					int buffer16 = buffer->byteOffset;
HXDLIN( 262)					gl->uniform4f(( (int)(_hx_tmp12) ),_hx_tmp13,_hx_tmp14,_hx_tmp15,::__hxcpp_memory_get_float(buffer->buffer->b,(buffer16 + ((position + (int)3) * (int)4))));
HXDLIN( 262)					goto _hx_goto_22;
            				}
            				if (  (_hx_switch_0==(int)0) ||  (_hx_switch_0==(int)8) ){
HXLINE( 255)					 ::Dynamic _hx_tmp16 = this->index;
HXDLIN( 255)					int buffer17 = buffer->byteOffset;
HXDLIN( 255)					gl->uniform1i(( (int)(_hx_tmp16) ),::Std_obj::_hx_int(::__hxcpp_memory_get_float(buffer->buffer->b,(buffer17 + (position * (int)4)))));
HXDLIN( 255)					goto _hx_goto_22;
            				}
            				if (  (_hx_switch_0==(int)2) ||  (_hx_switch_0==(int)10) ){
HXLINE( 257)					 ::Dynamic _hx_tmp17 = this->index;
HXDLIN( 257)					int buffer18 = buffer->byteOffset;
HXDLIN( 257)					int _hx_tmp18 = ::Std_obj::_hx_int(::__hxcpp_memory_get_float(buffer->buffer->b,(buffer18 + (position * (int)4))));
HXDLIN( 257)					int buffer19 = buffer->byteOffset;
HXDLIN( 257)					int _hx_tmp19 = ::Std_obj::_hx_int(::__hxcpp_memory_get_float(buffer->buffer->b,(buffer19 + ((position + (int)1) * (int)4))));
HXDLIN( 257)					int buffer20 = buffer->byteOffset;
HXDLIN( 257)					gl->uniform3i(( (int)(_hx_tmp17) ),_hx_tmp18,_hx_tmp19,::Std_obj::_hx_int(::__hxcpp_memory_get_float(buffer->buffer->b,(buffer20 + ((position + (int)2) * (int)4)))));
HXDLIN( 257)					goto _hx_goto_22;
            				}
            				if (  (_hx_switch_0==(int)12) ){
HXLINE( 265)					{
HXLINE( 265)						int _g1 = (int)0;
HXDLIN( 265)						while((_g1 < (int)4)){
HXLINE( 265)							_g1 = (_g1 + (int)1);
HXDLIN( 265)							int i = (_g1 - (int)1);
HXLINE( 266)							{
HXLINE( 266)								 ::lime::utils::ArrayBufferView this1 = this->_hx___uniformMatrix;
HXDLIN( 266)								int buffer21 = buffer->byteOffset;
HXDLIN( 266)								Float val = ::__hxcpp_memory_get_float(buffer->buffer->b,(buffer21 + ((position + i) * (int)4)));
HXDLIN( 266)								{
HXLINE( 266)									int this2 = this1->byteOffset;
HXDLIN( 266)									::__hxcpp_memory_set_float(this1->buffer->b,(this2 + (i * (int)4)),val);
            								}
            							}
            						}
            					}
HXLINE( 268)					 ::Dynamic _hx_tmp20 = this->index;
HXDLIN( 268)					gl->uniformMatrix2fv(( (int)(_hx_tmp20) ),(int)1,false,::lime::utils::_DataPointer::DataPointer_Impl__obj::fromArrayBufferView(this->_hx___uniformMatrix));
HXLINE( 264)					goto _hx_goto_22;
            				}
            				if (  (_hx_switch_0==(int)16) ){
HXLINE( 275)					{
HXLINE( 275)						int _g2 = (int)0;
HXDLIN( 275)						while((_g2 < (int)9)){
HXLINE( 275)							_g2 = (_g2 + (int)1);
HXDLIN( 275)							int i1 = (_g2 - (int)1);
HXLINE( 276)							{
HXLINE( 276)								 ::lime::utils::ArrayBufferView this3 = this->_hx___uniformMatrix;
HXDLIN( 276)								int buffer22 = buffer->byteOffset;
HXDLIN( 276)								Float val1 = ::__hxcpp_memory_get_float(buffer->buffer->b,(buffer22 + ((position + i1) * (int)4)));
HXDLIN( 276)								{
HXLINE( 276)									int this4 = this3->byteOffset;
HXDLIN( 276)									::__hxcpp_memory_set_float(this3->buffer->b,(this4 + (i1 * (int)4)),val1);
            								}
            							}
            						}
            					}
HXLINE( 278)					 ::Dynamic _hx_tmp21 = this->index;
HXDLIN( 278)					gl->uniformMatrix3fv(( (int)(_hx_tmp21) ),(int)1,false,::lime::utils::_DataPointer::DataPointer_Impl__obj::fromArrayBufferView(this->_hx___uniformMatrix));
HXLINE( 274)					goto _hx_goto_22;
            				}
            				if (  (_hx_switch_0==(int)20) ){
HXLINE( 285)					{
HXLINE( 285)						int _g3 = (int)0;
HXDLIN( 285)						while((_g3 < (int)16)){
HXLINE( 285)							_g3 = (_g3 + (int)1);
HXDLIN( 285)							int i2 = (_g3 - (int)1);
HXLINE( 286)							{
HXLINE( 286)								 ::lime::utils::ArrayBufferView this5 = this->_hx___uniformMatrix;
HXDLIN( 286)								int buffer23 = buffer->byteOffset;
HXDLIN( 286)								Float val2 = ::__hxcpp_memory_get_float(buffer->buffer->b,(buffer23 + ((position + i2) * (int)4)));
HXDLIN( 286)								{
HXLINE( 286)									int this6 = this5->byteOffset;
HXDLIN( 286)									::__hxcpp_memory_set_float(this5->buffer->b,(this6 + (i2 * (int)4)),val2);
            								}
            							}
            						}
            					}
HXLINE( 288)					 ::Dynamic _hx_tmp22 = this->index;
HXDLIN( 288)					gl->uniformMatrix4fv(( (int)(_hx_tmp22) ),(int)1,false,::lime::utils::_DataPointer::DataPointer_Impl__obj::fromArrayBufferView(this->_hx___uniformMatrix));
HXLINE( 284)					goto _hx_goto_22;
            				}
            				/* default */{
            				}
            				_hx_goto_22:;
            			}
            		}
            		else {
HXLINE( 298)			bool _hx_tmp23;
HXDLIN( 298)			if (!(::StringTools_obj::startsWith(this->name,HX_("openfl_",cf,ba,42,40)))) {
HXLINE( 298)				if ((length != (int)0)) {
HXLINE( 298)					_hx_tmp23 = (length == this->__length);
            				}
            				else {
HXLINE( 298)					_hx_tmp23 = true;
            				}
            			}
            			else {
HXLINE( 298)				_hx_tmp23 = false;
            			}
HXDLIN( 298)			if (_hx_tmp23) {
HXLINE( 300)				{
HXLINE( 300)					int _g11 = (int)0;
HXDLIN( 300)					int _g4 = this->_hx___arrayLength;
HXDLIN( 300)					while((_g11 < _g4)){
HXLINE( 300)						_g11 = (_g11 + (int)1);
HXDLIN( 300)						int i3 = (_g11 - (int)1);
HXLINE( 302)						gl->disableVertexAttribArray(( (int)((this->index + i3)) ));
            					}
            				}
HXLINE( 306)				if ((length > (int)0)) {
HXLINE( 308)					 ::Dynamic _g5 = this->type;
HXDLIN( 308)					 ::Dynamic _hx_switch_1 = _g5;
            					if (  (_hx_switch_1==(int)1) ||  (_hx_switch_1==(int)5) ||  (_hx_switch_1==(int)9) ){
HXLINE( 311)						 ::Dynamic _hx_tmp24 = this->index;
HXDLIN( 311)						int buffer24 = buffer->byteOffset;
HXDLIN( 311)						Float _hx_tmp25 = ::__hxcpp_memory_get_float(buffer->buffer->b,(buffer24 + (position * (int)4)));
HXDLIN( 311)						int buffer25 = buffer->byteOffset;
HXDLIN( 311)						gl->vertexAttrib2f(( (int)(_hx_tmp24) ),_hx_tmp25,::__hxcpp_memory_get_float(buffer->buffer->b,(buffer25 + ((position + (int)1) * (int)4))));
HXDLIN( 311)						goto _hx_goto_27;
            					}
            					if (  (_hx_switch_1==(int)3) ||  (_hx_switch_1==(int)7) ||  (_hx_switch_1==(int)11) ){
HXLINE( 313)						 ::Dynamic _hx_tmp26 = this->index;
HXDLIN( 313)						int buffer26 = buffer->byteOffset;
HXDLIN( 313)						Float _hx_tmp27 = ::__hxcpp_memory_get_float(buffer->buffer->b,(buffer26 + (position * (int)4)));
HXDLIN( 313)						int buffer27 = buffer->byteOffset;
HXDLIN( 313)						Float _hx_tmp28 = ::__hxcpp_memory_get_float(buffer->buffer->b,(buffer27 + ((position + (int)1) * (int)4)));
HXDLIN( 313)						int buffer28 = buffer->byteOffset;
HXDLIN( 313)						Float _hx_tmp29 = ::__hxcpp_memory_get_float(buffer->buffer->b,(buffer28 + ((position + (int)2) * (int)4)));
HXDLIN( 313)						int buffer29 = buffer->byteOffset;
HXDLIN( 313)						gl->vertexAttrib4f(( (int)(_hx_tmp26) ),_hx_tmp27,_hx_tmp28,_hx_tmp29,::__hxcpp_memory_get_float(buffer->buffer->b,(buffer29 + ((position + (int)3) * (int)4))));
HXDLIN( 313)						goto _hx_goto_27;
            					}
            					if (  (_hx_switch_1==(int)0) ||  (_hx_switch_1==(int)4) ||  (_hx_switch_1==(int)8) ){
HXLINE( 310)						 ::Dynamic _hx_tmp30 = this->index;
HXDLIN( 310)						int buffer30 = buffer->byteOffset;
HXDLIN( 310)						gl->vertexAttrib1f(( (int)(_hx_tmp30) ),::__hxcpp_memory_get_float(buffer->buffer->b,(buffer30 + (position * (int)4))));
HXDLIN( 310)						goto _hx_goto_27;
            					}
            					if (  (_hx_switch_1==(int)2) ||  (_hx_switch_1==(int)6) ||  (_hx_switch_1==(int)10) ){
HXLINE( 312)						 ::Dynamic _hx_tmp31 = this->index;
HXDLIN( 312)						int buffer31 = buffer->byteOffset;
HXDLIN( 312)						Float _hx_tmp32 = ::__hxcpp_memory_get_float(buffer->buffer->b,(buffer31 + (position * (int)4)));
HXDLIN( 312)						int buffer32 = buffer->byteOffset;
HXDLIN( 312)						Float _hx_tmp33 = ::__hxcpp_memory_get_float(buffer->buffer->b,(buffer32 + ((position + (int)1) * (int)4)));
HXDLIN( 312)						int buffer33 = buffer->byteOffset;
HXDLIN( 312)						gl->vertexAttrib3f(( (int)(_hx_tmp31) ),_hx_tmp32,_hx_tmp33,::__hxcpp_memory_get_float(buffer->buffer->b,(buffer33 + ((position + (int)2) * (int)4))));
HXDLIN( 312)						goto _hx_goto_27;
            					}
            					if (  (_hx_switch_1==(int)12) ){
HXLINE( 316)						int _g6 = (int)0;
HXDLIN( 316)						while((_g6 < (int)2)){
HXLINE( 316)							_g6 = (_g6 + (int)1);
HXDLIN( 316)							int i4 = (_g6 - (int)1);
HXLINE( 317)							 ::Dynamic _hx_tmp34 = (this->index + i4);
HXDLIN( 317)							int buffer34 = buffer->byteOffset;
HXDLIN( 317)							Float _hx_tmp35 = ::__hxcpp_memory_get_float(buffer->buffer->b,(buffer34 + ((position + (i4 * (int)2)) * (int)4)));
HXDLIN( 317)							int buffer35 = buffer->byteOffset;
HXDLIN( 317)							gl->vertexAttrib2f(( (int)(_hx_tmp34) ),_hx_tmp35,::__hxcpp_memory_get_float(buffer->buffer->b,(buffer35 + (((position + (i4 * (int)2)) + (int)1) * (int)4))));
            						}
HXLINE( 316)						goto _hx_goto_27;
            					}
            					if (  (_hx_switch_1==(int)16) ){
HXLINE( 321)						int _g7 = (int)0;
HXDLIN( 321)						while((_g7 < (int)3)){
HXLINE( 321)							_g7 = (_g7 + (int)1);
HXDLIN( 321)							int i5 = (_g7 - (int)1);
HXLINE( 322)							 ::Dynamic _hx_tmp36 = (this->index + i5);
HXDLIN( 322)							int buffer36 = buffer->byteOffset;
HXDLIN( 322)							Float _hx_tmp37 = ::__hxcpp_memory_get_float(buffer->buffer->b,(buffer36 + ((position + (i5 * (int)3)) * (int)4)));
HXDLIN( 322)							int buffer37 = buffer->byteOffset;
HXDLIN( 322)							Float _hx_tmp38 = ::__hxcpp_memory_get_float(buffer->buffer->b,(buffer37 + (((position + (i5 * (int)3)) + (int)1) * (int)4)));
HXDLIN( 322)							int buffer38 = buffer->byteOffset;
HXDLIN( 322)							gl->vertexAttrib3f(( (int)(_hx_tmp36) ),_hx_tmp37,_hx_tmp38,::__hxcpp_memory_get_float(buffer->buffer->b,(buffer38 + (((position + (i5 * (int)3)) + (int)2) * (int)4))));
            						}
HXLINE( 321)						goto _hx_goto_27;
            					}
            					if (  (_hx_switch_1==(int)20) ){
HXLINE( 326)						int _g8 = (int)0;
HXDLIN( 326)						while((_g8 < (int)4)){
HXLINE( 326)							_g8 = (_g8 + (int)1);
HXDLIN( 326)							int i6 = (_g8 - (int)1);
HXLINE( 327)							 ::Dynamic _hx_tmp39 = (this->index + i6);
HXDLIN( 327)							int buffer39 = buffer->byteOffset;
HXDLIN( 327)							Float _hx_tmp40 = ::__hxcpp_memory_get_float(buffer->buffer->b,(buffer39 + ((position + (i6 * (int)4)) * (int)4)));
HXDLIN( 327)							int buffer40 = buffer->byteOffset;
HXDLIN( 327)							Float _hx_tmp41 = ::__hxcpp_memory_get_float(buffer->buffer->b,(buffer40 + (((position + (i6 * (int)4)) + (int)1) * (int)4)));
HXDLIN( 327)							int buffer41 = buffer->byteOffset;
HXDLIN( 327)							Float _hx_tmp42 = ::__hxcpp_memory_get_float(buffer->buffer->b,(buffer41 + (((position + (i6 * (int)4)) + (int)2) * (int)4)));
HXDLIN( 327)							int buffer42 = buffer->byteOffset;
HXDLIN( 327)							gl->vertexAttrib4f(( (int)(_hx_tmp39) ),_hx_tmp40,_hx_tmp41,_hx_tmp42,::__hxcpp_memory_get_float(buffer->buffer->b,(buffer42 + (((position + (i6 * (int)4)) + (int)3) * (int)4))));
            						}
HXLINE( 326)						goto _hx_goto_27;
            					}
            					/* default */{
            					}
            					_hx_goto_27:;
            				}
            				else {
HXLINE( 336)					 ::Dynamic _g9 = this->type;
HXDLIN( 336)					 ::Dynamic _hx_switch_2 = _g9;
            					if (  (_hx_switch_2==(int)1) ||  (_hx_switch_2==(int)5) ||  (_hx_switch_2==(int)9) ){
HXLINE( 339)						gl->vertexAttrib2f(( (int)(this->index) ),(int)0,(int)0);
HXDLIN( 339)						goto _hx_goto_31;
            					}
            					if (  (_hx_switch_2==(int)3) ||  (_hx_switch_2==(int)7) ||  (_hx_switch_2==(int)11) ){
HXLINE( 341)						gl->vertexAttrib4f(( (int)(this->index) ),(int)0,(int)0,(int)0,(int)0);
HXDLIN( 341)						goto _hx_goto_31;
            					}
            					if (  (_hx_switch_2==(int)0) ||  (_hx_switch_2==(int)4) ||  (_hx_switch_2==(int)8) ){
HXLINE( 338)						gl->vertexAttrib1f(( (int)(this->index) ),(int)0);
HXDLIN( 338)						goto _hx_goto_31;
            					}
            					if (  (_hx_switch_2==(int)2) ||  (_hx_switch_2==(int)6) ||  (_hx_switch_2==(int)10) ){
HXLINE( 340)						gl->vertexAttrib3f(( (int)(this->index) ),(int)0,(int)0,(int)0);
HXDLIN( 340)						goto _hx_goto_31;
            					}
            					if (  (_hx_switch_2==(int)12) ){
HXLINE( 344)						int _g10 = (int)0;
HXDLIN( 344)						while((_g10 < (int)2)){
HXLINE( 344)							_g10 = (_g10 + (int)1);
HXDLIN( 344)							int i7 = (_g10 - (int)1);
HXLINE( 345)							gl->vertexAttrib2f(( (int)((this->index + i7)) ),(int)0,(int)0);
            						}
HXLINE( 344)						goto _hx_goto_31;
            					}
            					if (  (_hx_switch_2==(int)16) ){
HXLINE( 349)						int _g12 = (int)0;
HXDLIN( 349)						while((_g12 < (int)3)){
HXLINE( 349)							_g12 = (_g12 + (int)1);
HXDLIN( 349)							int i8 = (_g12 - (int)1);
HXLINE( 350)							gl->vertexAttrib3f(( (int)((this->index + i8)) ),(int)0,(int)0,(int)0);
            						}
HXLINE( 349)						goto _hx_goto_31;
            					}
            					if (  (_hx_switch_2==(int)20) ){
HXLINE( 354)						int _g13 = (int)0;
HXDLIN( 354)						while((_g13 < (int)4)){
HXLINE( 354)							_g13 = (_g13 + (int)1);
HXDLIN( 354)							int i9 = (_g13 - (int)1);
HXLINE( 355)							gl->vertexAttrib4f(( (int)((this->index + i9)) ),(int)0,(int)0,(int)0,(int)0);
            						}
HXLINE( 354)						goto _hx_goto_31;
            					}
            					/* default */{
            					}
            					_hx_goto_31:;
            				}
            			}
            			else {
HXLINE( 366)				int type = gl->FLOAT;
HXLINE( 367)				if (this->_hx___isBool) {
HXLINE( 367)					type = gl->INT;
            				}
            				else {
HXLINE( 368)					if (this->_hx___isInt) {
HXLINE( 368)						type = gl->INT;
            					}
            				}
HXLINE( 370)				{
HXLINE( 370)					int _g14 = (int)0;
HXDLIN( 370)					int _g15 = this->_hx___arrayLength;
HXDLIN( 370)					while((_g14 < _g15)){
HXLINE( 370)						_g14 = (_g14 + (int)1);
HXDLIN( 370)						int i10 = (_g14 - (int)1);
HXLINE( 372)						gl->enableVertexAttribArray(( (int)((this->index + i10)) ));
            					}
            				}
HXLINE( 376)				if ((length > (int)0)) {
HXLINE( 378)					int _g16 = (int)0;
HXDLIN( 378)					int _g17 = this->_hx___arrayLength;
HXDLIN( 378)					while((_g16 < _g17)){
HXLINE( 378)						_g16 = (_g16 + (int)1);
HXDLIN( 378)						int i11 = (_g16 - (int)1);
HXLINE( 380)						 ::Dynamic _hx_tmp43 = (this->index + i11);
HXDLIN( 380)						int _hx_tmp44 = this->__length;
HXDLIN( 380)						int _hx_tmp45 = (this->__length * (int)4);
HXDLIN( 380)						gl->vertexAttribPointer(( (int)(_hx_tmp43) ),_hx_tmp44,type,false,_hx_tmp45,::lime::utils::_DataPointer::DataPointer_Impl__obj::fromInt(((position + (i11 * this->_hx___arrayLength)) * (int)4)));
            					}
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC4(ShaderParameter_obj,_hx___updateGLFromBuffer,(void))


hx::ObjectPtr< ShaderParameter_obj > ShaderParameter_obj::__new() {
	hx::ObjectPtr< ShaderParameter_obj > __this = new ShaderParameter_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< ShaderParameter_obj > ShaderParameter_obj::__alloc(hx::Ctx *_hx_ctx) {
	ShaderParameter_obj *__this = (ShaderParameter_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(ShaderParameter_obj), true, "openfl.display.ShaderParameter"));
	*(void **)__this = ShaderParameter_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

ShaderParameter_obj::ShaderParameter_obj()
{
}

void ShaderParameter_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ShaderParameter);
	HX_MARK_MEMBER_NAME(index,"index");
	HX_MARK_MEMBER_NAME(name,"name");
	HX_MARK_MEMBER_NAME(type,"type");
	HX_MARK_MEMBER_NAME(value,"value");
	HX_MARK_MEMBER_NAME(_hx___arrayLength,"__arrayLength");
	HX_MARK_MEMBER_NAME(_hx___isBool,"__isBool");
	HX_MARK_MEMBER_NAME(_hx___isFloat,"__isFloat");
	HX_MARK_MEMBER_NAME(_hx___isInt,"__isInt");
	HX_MARK_MEMBER_NAME(_hx___isUniform,"__isUniform");
	HX_MARK_MEMBER_NAME(__length,"__length");
	HX_MARK_MEMBER_NAME(_hx___uniformMatrix,"__uniformMatrix");
	HX_MARK_MEMBER_NAME(_hx___useArray,"__useArray");
	HX_MARK_END_CLASS();
}

void ShaderParameter_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(index,"index");
	HX_VISIT_MEMBER_NAME(name,"name");
	HX_VISIT_MEMBER_NAME(type,"type");
	HX_VISIT_MEMBER_NAME(value,"value");
	HX_VISIT_MEMBER_NAME(_hx___arrayLength,"__arrayLength");
	HX_VISIT_MEMBER_NAME(_hx___isBool,"__isBool");
	HX_VISIT_MEMBER_NAME(_hx___isFloat,"__isFloat");
	HX_VISIT_MEMBER_NAME(_hx___isInt,"__isInt");
	HX_VISIT_MEMBER_NAME(_hx___isUniform,"__isUniform");
	HX_VISIT_MEMBER_NAME(__length,"__length");
	HX_VISIT_MEMBER_NAME(_hx___uniformMatrix,"__uniformMatrix");
	HX_VISIT_MEMBER_NAME(_hx___useArray,"__useArray");
}

hx::Val ShaderParameter_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"name") ) { return hx::Val( name ); }
		if (HX_FIELD_EQ(inName,"type") ) { return hx::Val( type ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"index") ) { return hx::Val( index ); }
		if (HX_FIELD_EQ(inName,"value") ) { return hx::Val( value ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"__isInt") ) { return hx::Val( _hx___isInt ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"__isBool") ) { return hx::Val( _hx___isBool ); }
		if (HX_FIELD_EQ(inName,"__length") ) { return hx::Val( __length ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"__isFloat") ) { return hx::Val( _hx___isFloat ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"__useArray") ) { return hx::Val( _hx___useArray ); }
		if (HX_FIELD_EQ(inName,"__updateGL") ) { return hx::Val( _hx___updateGL_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"__isUniform") ) { return hx::Val( _hx___isUniform ); }
		if (HX_FIELD_EQ(inName,"__disableGL") ) { return hx::Val( _hx___disableGL_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"__arrayLength") ) { return hx::Val( _hx___arrayLength ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"__uniformMatrix") ) { return hx::Val( _hx___uniformMatrix ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"__updateGLFromBuffer") ) { return hx::Val( _hx___updateGLFromBuffer_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val ShaderParameter_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"name") ) { name=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"type") ) { type=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"index") ) { index=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"value") ) { value=inValue.Cast< ::cpp::VirtualArray >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"__isInt") ) { _hx___isInt=inValue.Cast< bool >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"__isBool") ) { _hx___isBool=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__length") ) { __length=inValue.Cast< int >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"__isFloat") ) { _hx___isFloat=inValue.Cast< bool >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"__useArray") ) { _hx___useArray=inValue.Cast< bool >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"__isUniform") ) { _hx___isUniform=inValue.Cast< bool >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"__arrayLength") ) { _hx___arrayLength=inValue.Cast< int >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"__uniformMatrix") ) { _hx___uniformMatrix=inValue.Cast<  ::lime::utils::ArrayBufferView >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void ShaderParameter_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("index","\x12","\x9b","\x14","\xbe"));
	outFields->push(HX_HCSTRING("name","\x4b","\x72","\xff","\x48"));
	outFields->push(HX_HCSTRING("type","\xba","\xf2","\x08","\x4d"));
	outFields->push(HX_HCSTRING("value","\x71","\x7f","\xb8","\x31"));
	outFields->push(HX_HCSTRING("__arrayLength","\x3f","\x70","\xc7","\xd4"));
	outFields->push(HX_HCSTRING("__isBool","\x54","\xb4","\xb1","\x06"));
	outFields->push(HX_HCSTRING("__isFloat","\x32","\xba","\x6a","\x20"));
	outFields->push(HX_HCSTRING("__isInt","\x05","\x90","\xac","\x2b"));
	outFields->push(HX_HCSTRING("__isUniform","\x4a","\x07","\x8f","\xe7"));
	outFields->push(HX_HCSTRING("__length","\x06","\x00","\x37","\x47"));
	outFields->push(HX_HCSTRING("__uniformMatrix","\x75","\x03","\xf6","\xb5"));
	outFields->push(HX_HCSTRING("__useArray","\xf2","\x42","\x33","\x90"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo ShaderParameter_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(ShaderParameter_obj,index),HX_HCSTRING("index","\x12","\x9b","\x14","\xbe")},
	{hx::fsString,(int)offsetof(ShaderParameter_obj,name),HX_HCSTRING("name","\x4b","\x72","\xff","\x48")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(ShaderParameter_obj,type),HX_HCSTRING("type","\xba","\xf2","\x08","\x4d")},
	{hx::fsObject /*cpp::ArrayBase*/ ,(int)offsetof(ShaderParameter_obj,value),HX_HCSTRING("value","\x71","\x7f","\xb8","\x31")},
	{hx::fsInt,(int)offsetof(ShaderParameter_obj,_hx___arrayLength),HX_HCSTRING("__arrayLength","\x3f","\x70","\xc7","\xd4")},
	{hx::fsBool,(int)offsetof(ShaderParameter_obj,_hx___isBool),HX_HCSTRING("__isBool","\x54","\xb4","\xb1","\x06")},
	{hx::fsBool,(int)offsetof(ShaderParameter_obj,_hx___isFloat),HX_HCSTRING("__isFloat","\x32","\xba","\x6a","\x20")},
	{hx::fsBool,(int)offsetof(ShaderParameter_obj,_hx___isInt),HX_HCSTRING("__isInt","\x05","\x90","\xac","\x2b")},
	{hx::fsBool,(int)offsetof(ShaderParameter_obj,_hx___isUniform),HX_HCSTRING("__isUniform","\x4a","\x07","\x8f","\xe7")},
	{hx::fsInt,(int)offsetof(ShaderParameter_obj,__length),HX_HCSTRING("__length","\x06","\x00","\x37","\x47")},
	{hx::fsObject /*::lime::utils::ArrayBufferView*/ ,(int)offsetof(ShaderParameter_obj,_hx___uniformMatrix),HX_HCSTRING("__uniformMatrix","\x75","\x03","\xf6","\xb5")},
	{hx::fsBool,(int)offsetof(ShaderParameter_obj,_hx___useArray),HX_HCSTRING("__useArray","\xf2","\x42","\x33","\x90")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *ShaderParameter_obj_sStaticStorageInfo = 0;
#endif

static ::String ShaderParameter_obj_sMemberFields[] = {
	HX_HCSTRING("index","\x12","\x9b","\x14","\xbe"),
	HX_HCSTRING("name","\x4b","\x72","\xff","\x48"),
	HX_HCSTRING("type","\xba","\xf2","\x08","\x4d"),
	HX_HCSTRING("value","\x71","\x7f","\xb8","\x31"),
	HX_HCSTRING("__arrayLength","\x3f","\x70","\xc7","\xd4"),
	HX_HCSTRING("__isBool","\x54","\xb4","\xb1","\x06"),
	HX_HCSTRING("__isFloat","\x32","\xba","\x6a","\x20"),
	HX_HCSTRING("__isInt","\x05","\x90","\xac","\x2b"),
	HX_HCSTRING("__isUniform","\x4a","\x07","\x8f","\xe7"),
	HX_HCSTRING("__length","\x06","\x00","\x37","\x47"),
	HX_HCSTRING("__uniformMatrix","\x75","\x03","\xf6","\xb5"),
	HX_HCSTRING("__useArray","\xf2","\x42","\x33","\x90"),
	HX_HCSTRING("__disableGL","\xed","\x3a","\xe1","\x35"),
	HX_HCSTRING("__updateGL","\x8e","\x8b","\x32","\x1b"),
	HX_HCSTRING("__updateGLFromBuffer","\x38","\x8f","\xd7","\x17"),
	::String(null()) };

static void ShaderParameter_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ShaderParameter_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ShaderParameter_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ShaderParameter_obj::__mClass,"__mClass");
};

#endif

hx::Class ShaderParameter_obj::__mClass;

void ShaderParameter_obj::__register()
{
	hx::Object *dummy = new ShaderParameter_obj;
	ShaderParameter_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("openfl.display.ShaderParameter","\x9a","\x5c","\xca","\xf1");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = ShaderParameter_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(ShaderParameter_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< ShaderParameter_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ShaderParameter_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ShaderParameter_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ShaderParameter_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace openfl
} // end namespace display
