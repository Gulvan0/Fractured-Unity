// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_openfl__Vector_FloatVector
#include <openfl/_Vector/FloatVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_IVector
#include <openfl/_Vector/IVector.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_DrawCommandBuffer
#include <openfl/_internal/renderer/DrawCommandBuffer.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_canvas_CanvasGraphics
#include <openfl/_internal/renderer/canvas/CanvasGraphics.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_CanvasRenderer
#include <openfl/display/CanvasRenderer.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectRenderer
#include <openfl/display/DisplayObjectRenderer.h>
#endif
#ifndef INCLUDED_openfl_display_Graphics
#include <openfl/display/Graphics.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_geom_Matrix
#include <openfl/geom/Matrix.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_ca7a636da47018f2_78_closePath,"openfl._internal.renderer.canvas.CanvasGraphics","closePath",0x0426588d,"openfl._internal.renderer.canvas.CanvasGraphics.closePath","openfl/_internal/renderer/canvas/CanvasGraphics.hx",78,0x0b9ff65e)
HX_LOCAL_STACK_FRAME(_hx_pos_ca7a636da47018f2_119_createBitmapFill,"openfl._internal.renderer.canvas.CanvasGraphics","createBitmapFill",0x2a5c3b1e,"openfl._internal.renderer.canvas.CanvasGraphics.createBitmapFill","openfl/_internal/renderer/canvas/CanvasGraphics.hx",119,0x0b9ff65e)
HX_LOCAL_STACK_FRAME(_hx_pos_ca7a636da47018f2_126_createGradientPattern,"openfl._internal.renderer.canvas.CanvasGraphics","createGradientPattern",0x6cf339b4,"openfl._internal.renderer.canvas.CanvasGraphics.createGradientPattern","openfl/_internal/renderer/canvas/CanvasGraphics.hx",126,0x0b9ff65e)
HX_LOCAL_STACK_FRAME(_hx_pos_ca7a636da47018f2_192_createTempPatternCanvas,"openfl._internal.renderer.canvas.CanvasGraphics","createTempPatternCanvas",0x07b48808,"openfl._internal.renderer.canvas.CanvasGraphics.createTempPatternCanvas","openfl/_internal/renderer/canvas/CanvasGraphics.hx",192,0x0b9ff65e)
HX_LOCAL_STACK_FRAME(_hx_pos_ca7a636da47018f2_218_drawRoundRect,"openfl._internal.renderer.canvas.CanvasGraphics","drawRoundRect",0x4e8f7efe,"openfl._internal.renderer.canvas.CanvasGraphics.drawRoundRect","openfl/_internal/renderer/canvas/CanvasGraphics.hx",218,0x0b9ff65e)
HX_LOCAL_STACK_FRAME(_hx_pos_ca7a636da47018f2_254_endFill,"openfl._internal.renderer.canvas.CanvasGraphics","endFill",0x3478970e,"openfl._internal.renderer.canvas.CanvasGraphics.endFill","openfl/_internal/renderer/canvas/CanvasGraphics.hx",254,0x0b9ff65e)
HX_LOCAL_STACK_FRAME(_hx_pos_ca7a636da47018f2_265_endStroke,"openfl._internal.renderer.canvas.CanvasGraphics","endStroke",0x411cf503,"openfl._internal.renderer.canvas.CanvasGraphics.endStroke","openfl/_internal/renderer/canvas/CanvasGraphics.hx",265,0x0b9ff65e)
HX_LOCAL_STACK_FRAME(_hx_pos_ca7a636da47018f2_520_hitTest,"openfl._internal.renderer.canvas.CanvasGraphics","hitTest",0xf1176f55,"openfl._internal.renderer.canvas.CanvasGraphics.hitTest","openfl/_internal/renderer/canvas/CanvasGraphics.hx",520,0x0b9ff65e)
HX_LOCAL_STACK_FRAME(_hx_pos_ca7a636da47018f2_527_isCCW,"openfl._internal.renderer.canvas.CanvasGraphics","isCCW",0xce74af1d,"openfl._internal.renderer.canvas.CanvasGraphics.isCCW","openfl/_internal/renderer/canvas/CanvasGraphics.hx",527,0x0b9ff65e)
HX_LOCAL_STACK_FRAME(_hx_pos_ca7a636da47018f2_532_normalizeUVT,"openfl._internal.renderer.canvas.CanvasGraphics","normalizeUVT",0x11b66056,"openfl._internal.renderer.canvas.CanvasGraphics.normalizeUVT","openfl/_internal/renderer/canvas/CanvasGraphics.hx",532,0x0b9ff65e)
HX_LOCAL_STACK_FRAME(_hx_pos_ca7a636da47018f2_581_playCommands,"openfl._internal.renderer.canvas.CanvasGraphics","playCommands",0x147605cc,"openfl._internal.renderer.canvas.CanvasGraphics.playCommands","openfl/_internal/renderer/canvas/CanvasGraphics.hx",581,0x0b9ff65e)
HX_LOCAL_STACK_FRAME(_hx_pos_ca7a636da47018f2_1245_render,"openfl._internal.renderer.canvas.CanvasGraphics","render",0x7dc3ee46,"openfl._internal.renderer.canvas.CanvasGraphics.render","openfl/_internal/renderer/canvas/CanvasGraphics.hx",1245,0x0b9ff65e)
HX_LOCAL_STACK_FRAME(_hx_pos_ca7a636da47018f2_1597_renderMask,"openfl._internal.renderer.canvas.CanvasGraphics","renderMask",0xfa8ef652,"openfl._internal.renderer.canvas.CanvasGraphics.renderMask","openfl/_internal/renderer/canvas/CanvasGraphics.hx",1597,0x0b9ff65e)
HX_LOCAL_STACK_FRAME(_hx_pos_ca7a636da47018f2_1710_setSmoothing,"openfl._internal.renderer.canvas.CanvasGraphics","setSmoothing",0x84b8ec62,"openfl._internal.renderer.canvas.CanvasGraphics.setSmoothing","openfl/_internal/renderer/canvas/CanvasGraphics.hx",1710,0x0b9ff65e)
HX_LOCAL_STACK_FRAME(_hx_pos_ca7a636da47018f2_43_boot,"openfl._internal.renderer.canvas.CanvasGraphics","boot",0x56fa6b22,"openfl._internal.renderer.canvas.CanvasGraphics.boot","openfl/_internal/renderer/canvas/CanvasGraphics.hx",43,0x0b9ff65e)
HX_LOCAL_STACK_FRAME(_hx_pos_ca7a636da47018f2_44_boot,"openfl._internal.renderer.canvas.CanvasGraphics","boot",0x56fa6b22,"openfl._internal.renderer.canvas.CanvasGraphics.boot","openfl/_internal/renderer/canvas/CanvasGraphics.hx",44,0x0b9ff65e)
HX_LOCAL_STACK_FRAME(_hx_pos_ca7a636da47018f2_51_boot,"openfl._internal.renderer.canvas.CanvasGraphics","boot",0x56fa6b22,"openfl._internal.renderer.canvas.CanvasGraphics.boot","openfl/_internal/renderer/canvas/CanvasGraphics.hx",51,0x0b9ff65e)
HX_LOCAL_STACK_FRAME(_hx_pos_ca7a636da47018f2_58_boot,"openfl._internal.renderer.canvas.CanvasGraphics","boot",0x56fa6b22,"openfl._internal.renderer.canvas.CanvasGraphics.boot","openfl/_internal/renderer/canvas/CanvasGraphics.hx",58,0x0b9ff65e)
namespace openfl{
namespace _internal{
namespace renderer{
namespace canvas{

void CanvasGraphics_obj::__construct() { }

Dynamic CanvasGraphics_obj::__CreateEmpty() { return new CanvasGraphics_obj; }

void *CanvasGraphics_obj::_hx_vtable = 0;

Dynamic CanvasGraphics_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< CanvasGraphics_obj > _hx_result = new CanvasGraphics_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool CanvasGraphics_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x0cfebe8a;
}

Float CanvasGraphics_obj::SIN45;

Float CanvasGraphics_obj::TAN22;

bool CanvasGraphics_obj::allowSmoothing;

 ::openfl::display::BitmapData CanvasGraphics_obj::bitmapFill;

 ::openfl::display::BitmapData CanvasGraphics_obj::bitmapStroke;

bool CanvasGraphics_obj::bitmapRepeat;

 ::openfl::geom::Rectangle CanvasGraphics_obj::bounds;

 ::openfl::_internal::renderer::DrawCommandBuffer CanvasGraphics_obj::fillCommands;

 ::openfl::display::Graphics CanvasGraphics_obj::graphics;

bool CanvasGraphics_obj::hasFill;

bool CanvasGraphics_obj::hasStroke;

bool CanvasGraphics_obj::hitTesting;

 ::openfl::geom::Matrix CanvasGraphics_obj::inversePendingMatrix;

 ::openfl::geom::Matrix CanvasGraphics_obj::pendingMatrix;

 ::openfl::_internal::renderer::DrawCommandBuffer CanvasGraphics_obj::strokeCommands;

 ::Dynamic CanvasGraphics_obj::windingRule;

void CanvasGraphics_obj::closePath(hx::Null< bool >  __o_strokeBefore){
bool strokeBefore = __o_strokeBefore.Default(false);
            	HX_STACKFRAME(&_hx_pos_ca7a636da47018f2_78_closePath)
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(CanvasGraphics_obj,closePath,(void))

 ::Dynamic CanvasGraphics_obj::createBitmapFill( ::openfl::display::BitmapData bitmap,bool bitmapRepeat,bool smooth){
            	HX_STACKFRAME(&_hx_pos_ca7a636da47018f2_119_createBitmapFill)
HXDLIN( 119)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(CanvasGraphics_obj,createBitmapFill,return )

void CanvasGraphics_obj::createGradientPattern( ::Dynamic type,::cpp::VirtualArray colors,::cpp::VirtualArray alphas,::cpp::VirtualArray ratios, ::openfl::geom::Matrix matrix, ::Dynamic spreadMethod, ::Dynamic interpolationMethod,Float focalPointRatio){
            	HX_STACKFRAME(&_hx_pos_ca7a636da47018f2_126_createGradientPattern)
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC8(CanvasGraphics_obj,createGradientPattern,(void))

void CanvasGraphics_obj::createTempPatternCanvas( ::openfl::display::BitmapData bitmap,bool repeat,int width,int height){
            	HX_STACKFRAME(&_hx_pos_ca7a636da47018f2_192_createTempPatternCanvas)
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(CanvasGraphics_obj,createTempPatternCanvas,(void))

void CanvasGraphics_obj::drawRoundRect(Float x,Float y,Float width,Float height,Float ellipseWidth, ::Dynamic ellipseHeight){
            	HX_STACKFRAME(&_hx_pos_ca7a636da47018f2_218_drawRoundRect)
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC6(CanvasGraphics_obj,drawRoundRect,(void))

void CanvasGraphics_obj::endFill(){
            	HX_STACKFRAME(&_hx_pos_ca7a636da47018f2_254_endFill)
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(CanvasGraphics_obj,endFill,(void))

void CanvasGraphics_obj::endStroke(){
            	HX_STACKFRAME(&_hx_pos_ca7a636da47018f2_265_endStroke)
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(CanvasGraphics_obj,endStroke,(void))

bool CanvasGraphics_obj::hitTest( ::openfl::display::Graphics graphics,Float x,Float y){
            	HX_STACKFRAME(&_hx_pos_ca7a636da47018f2_520_hitTest)
HXDLIN( 520)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(CanvasGraphics_obj,hitTest,return )

bool CanvasGraphics_obj::isCCW(Float x1,Float y1,Float x2,Float y2,Float x3,Float y3){
            	HX_STACKFRAME(&_hx_pos_ca7a636da47018f2_527_isCCW)
HXDLIN( 527)		return ((((x2 - x1) * (y3 - y1)) - ((y2 - y1) * (x3 - x1))) < (int)0);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC6(CanvasGraphics_obj,isCCW,return )

 ::Dynamic CanvasGraphics_obj::normalizeUVT( ::openfl::_Vector::FloatVector uvt,hx::Null< bool >  __o_skipT){
bool skipT = __o_skipT.Default(false);
            	HX_GC_STACKFRAME(&_hx_pos_ca7a636da47018f2_532_normalizeUVT)
HXLINE( 534)		Float max = ::Math_obj::NEGATIVE_INFINITY;
HXLINE( 535)		Float tmp = ::Math_obj::NEGATIVE_INFINITY;
HXLINE( 536)		int len = uvt->get_length();
HXLINE( 538)		{
HXLINE( 538)			int _g1 = (int)1;
HXDLIN( 538)			int _g = (len + (int)1);
HXDLIN( 538)			while((_g1 < _g)){
HXLINE( 538)				_g1 = (_g1 + (int)1);
HXDLIN( 538)				int t = (_g1 - (int)1);
HXLINE( 540)				bool _hx_tmp;
HXDLIN( 540)				if (skipT) {
HXLINE( 540)					_hx_tmp = (hx::Mod(t,(int)3) == (int)0);
            				}
            				else {
HXLINE( 540)					_hx_tmp = false;
            				}
HXDLIN( 540)				if (_hx_tmp) {
HXLINE( 542)					continue;
            				}
HXLINE( 546)				tmp = uvt->get((t - (int)1));
HXLINE( 548)				if ((max < tmp)) {
HXLINE( 550)					max = tmp;
            				}
            			}
            		}
HXLINE( 556)		if (!(skipT)) {
HXLINE( 558)			return  ::Dynamic(hx::Anon_obj::Create(2)
            				->setFixed(0,HX_("max",a4,0a,53,00),max)
            				->setFixed(1,HX_("uvt",f3,2e,59,00),uvt));
            		}
HXLINE( 562)		int length = null();
HXDLIN( 562)		bool fixed = null();
HXDLIN( 562)		 ::openfl::_Vector::FloatVector result =  ::openfl::_Vector::FloatVector_obj::__alloc( HX_CTX ,length,fixed,null(),true);
HXLINE( 564)		{
HXLINE( 564)			int _g11 = (int)1;
HXDLIN( 564)			int _g2 = (len + (int)1);
HXDLIN( 564)			while((_g11 < _g2)){
HXLINE( 564)				_g11 = (_g11 + (int)1);
HXDLIN( 564)				int t1 = (_g11 - (int)1);
HXLINE( 566)				bool _hx_tmp1;
HXDLIN( 566)				if (skipT) {
HXLINE( 566)					_hx_tmp1 = (hx::Mod(t1,(int)3) == (int)0);
            				}
            				else {
HXLINE( 566)					_hx_tmp1 = false;
            				}
HXDLIN( 566)				if (_hx_tmp1) {
HXLINE( 568)					continue;
            				}
HXLINE( 572)				result->push(uvt->get((t1 - (int)1)));
            			}
            		}
HXLINE( 576)		return  ::Dynamic(hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("max",a4,0a,53,00),max)
            			->setFixed(1,HX_("uvt",f3,2e,59,00),result));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(CanvasGraphics_obj,normalizeUVT,return )

void CanvasGraphics_obj::playCommands( ::openfl::_internal::renderer::DrawCommandBuffer commands,hx::Null< bool >  __o_stroke){
bool stroke = __o_stroke.Default(false);
            	HX_STACKFRAME(&_hx_pos_ca7a636da47018f2_581_playCommands)
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(CanvasGraphics_obj,playCommands,(void))

void CanvasGraphics_obj::render( ::openfl::display::Graphics graphics, ::openfl::display::CanvasRenderer renderer){
            	HX_STACKFRAME(&_hx_pos_ca7a636da47018f2_1245_render)
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(CanvasGraphics_obj,render,(void))

void CanvasGraphics_obj::renderMask( ::openfl::display::Graphics graphics, ::openfl::display::CanvasRenderer renderer){
            	HX_STACKFRAME(&_hx_pos_ca7a636da47018f2_1597_renderMask)
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(CanvasGraphics_obj,renderMask,(void))

void CanvasGraphics_obj::setSmoothing(bool smooth){
            	HX_STACKFRAME(&_hx_pos_ca7a636da47018f2_1710_setSmoothing)
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(CanvasGraphics_obj,setSmoothing,(void))


CanvasGraphics_obj::CanvasGraphics_obj()
{
}

bool CanvasGraphics_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"SIN45") ) { outValue = ( SIN45 ); return true; }
		if (HX_FIELD_EQ(inName,"TAN22") ) { outValue = ( TAN22 ); return true; }
		if (HX_FIELD_EQ(inName,"isCCW") ) { outValue = isCCW_dyn(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"bounds") ) { outValue = ( bounds ); return true; }
		if (HX_FIELD_EQ(inName,"render") ) { outValue = render_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"hasFill") ) { outValue = ( hasFill ); return true; }
		if (HX_FIELD_EQ(inName,"endFill") ) { outValue = endFill_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"hitTest") ) { outValue = hitTest_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"graphics") ) { outValue = ( graphics ); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"hasStroke") ) { outValue = ( hasStroke ); return true; }
		if (HX_FIELD_EQ(inName,"closePath") ) { outValue = closePath_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"endStroke") ) { outValue = endStroke_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"bitmapFill") ) { outValue = ( bitmapFill ); return true; }
		if (HX_FIELD_EQ(inName,"hitTesting") ) { outValue = ( hitTesting ); return true; }
		if (HX_FIELD_EQ(inName,"renderMask") ) { outValue = renderMask_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"windingRule") ) { outValue = ( windingRule ); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"bitmapStroke") ) { outValue = ( bitmapStroke ); return true; }
		if (HX_FIELD_EQ(inName,"bitmapRepeat") ) { outValue = ( bitmapRepeat ); return true; }
		if (HX_FIELD_EQ(inName,"fillCommands") ) { outValue = ( fillCommands ); return true; }
		if (HX_FIELD_EQ(inName,"normalizeUVT") ) { outValue = normalizeUVT_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"playCommands") ) { outValue = playCommands_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"setSmoothing") ) { outValue = setSmoothing_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"pendingMatrix") ) { outValue = ( pendingMatrix ); return true; }
		if (HX_FIELD_EQ(inName,"drawRoundRect") ) { outValue = drawRoundRect_dyn(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"allowSmoothing") ) { outValue = ( allowSmoothing ); return true; }
		if (HX_FIELD_EQ(inName,"strokeCommands") ) { outValue = ( strokeCommands ); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"createBitmapFill") ) { outValue = createBitmapFill_dyn(); return true; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"inversePendingMatrix") ) { outValue = ( inversePendingMatrix ); return true; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"createGradientPattern") ) { outValue = createGradientPattern_dyn(); return true; }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"createTempPatternCanvas") ) { outValue = createTempPatternCanvas_dyn(); return true; }
	}
	return false;
}

bool CanvasGraphics_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"SIN45") ) { SIN45=ioValue.Cast< Float >(); return true; }
		if (HX_FIELD_EQ(inName,"TAN22") ) { TAN22=ioValue.Cast< Float >(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"bounds") ) { bounds=ioValue.Cast<  ::openfl::geom::Rectangle >(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"hasFill") ) { hasFill=ioValue.Cast< bool >(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"graphics") ) { graphics=ioValue.Cast<  ::openfl::display::Graphics >(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"hasStroke") ) { hasStroke=ioValue.Cast< bool >(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"bitmapFill") ) { bitmapFill=ioValue.Cast<  ::openfl::display::BitmapData >(); return true; }
		if (HX_FIELD_EQ(inName,"hitTesting") ) { hitTesting=ioValue.Cast< bool >(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"windingRule") ) { windingRule=ioValue.Cast<  ::Dynamic >(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"bitmapStroke") ) { bitmapStroke=ioValue.Cast<  ::openfl::display::BitmapData >(); return true; }
		if (HX_FIELD_EQ(inName,"bitmapRepeat") ) { bitmapRepeat=ioValue.Cast< bool >(); return true; }
		if (HX_FIELD_EQ(inName,"fillCommands") ) { fillCommands=ioValue.Cast<  ::openfl::_internal::renderer::DrawCommandBuffer >(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"pendingMatrix") ) { pendingMatrix=ioValue.Cast<  ::openfl::geom::Matrix >(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"allowSmoothing") ) { allowSmoothing=ioValue.Cast< bool >(); return true; }
		if (HX_FIELD_EQ(inName,"strokeCommands") ) { strokeCommands=ioValue.Cast<  ::openfl::_internal::renderer::DrawCommandBuffer >(); return true; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"inversePendingMatrix") ) { inversePendingMatrix=ioValue.Cast<  ::openfl::geom::Matrix >(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *CanvasGraphics_obj_sMemberStorageInfo = 0;
static hx::StaticInfo CanvasGraphics_obj_sStaticStorageInfo[] = {
	{hx::fsFloat,(void *) &CanvasGraphics_obj::SIN45,HX_HCSTRING("SIN45","\x79","\x16","\xbe","\xfa")},
	{hx::fsFloat,(void *) &CanvasGraphics_obj::TAN22,HX_HCSTRING("TAN22","\x41","\xf4","\xda","\x88")},
	{hx::fsBool,(void *) &CanvasGraphics_obj::allowSmoothing,HX_HCSTRING("allowSmoothing","\xab","\xb7","\x66","\x68")},
	{hx::fsObject /*::openfl::display::BitmapData*/ ,(void *) &CanvasGraphics_obj::bitmapFill,HX_HCSTRING("bitmapFill","\x12","\x2e","\x19","\x35")},
	{hx::fsObject /*::openfl::display::BitmapData*/ ,(void *) &CanvasGraphics_obj::bitmapStroke,HX_HCSTRING("bitmapStroke","\x07","\x55","\x54","\x1c")},
	{hx::fsBool,(void *) &CanvasGraphics_obj::bitmapRepeat,HX_HCSTRING("bitmapRepeat","\xaa","\x38","\x9c","\x11")},
	{hx::fsObject /*::openfl::geom::Rectangle*/ ,(void *) &CanvasGraphics_obj::bounds,HX_HCSTRING("bounds","\x75","\x86","\x1d","\x66")},
	{hx::fsObject /*::openfl::_internal::renderer::DrawCommandBuffer*/ ,(void *) &CanvasGraphics_obj::fillCommands,HX_HCSTRING("fillCommands","\x6b","\xf6","\xc9","\xc2")},
	{hx::fsObject /*::openfl::display::Graphics*/ ,(void *) &CanvasGraphics_obj::graphics,HX_HCSTRING("graphics","\xcb","\xf8","\x67","\x12")},
	{hx::fsBool,(void *) &CanvasGraphics_obj::hasFill,HX_HCSTRING("hasFill","\xfd","\xee","\xff","\x12")},
	{hx::fsBool,(void *) &CanvasGraphics_obj::hasStroke,HX_HCSTRING("hasStroke","\xb2","\x66","\x1d","\x52")},
	{hx::fsBool,(void *) &CanvasGraphics_obj::hitTesting,HX_HCSTRING("hitTesting","\xbd","\x65","\x48","\x19")},
	{hx::fsObject /*::openfl::geom::Matrix*/ ,(void *) &CanvasGraphics_obj::inversePendingMatrix,HX_HCSTRING("inversePendingMatrix","\x28","\x14","\x8c","\xbb")},
	{hx::fsObject /*::openfl::geom::Matrix*/ ,(void *) &CanvasGraphics_obj::pendingMatrix,HX_HCSTRING("pendingMatrix","\xf8","\x9d","\x96","\xb5")},
	{hx::fsObject /*::openfl::_internal::renderer::DrawCommandBuffer*/ ,(void *) &CanvasGraphics_obj::strokeCommands,HX_HCSTRING("strokeCommands","\xa0","\x98","\x2a","\x67")},
	{hx::fsObject /*Dynamic*/ ,(void *) &CanvasGraphics_obj::windingRule,HX_HCSTRING("windingRule","\x36","\x83","\xc0","\x4f")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static void CanvasGraphics_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(CanvasGraphics_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(CanvasGraphics_obj::SIN45,"SIN45");
	HX_MARK_MEMBER_NAME(CanvasGraphics_obj::TAN22,"TAN22");
	HX_MARK_MEMBER_NAME(CanvasGraphics_obj::allowSmoothing,"allowSmoothing");
	HX_MARK_MEMBER_NAME(CanvasGraphics_obj::bitmapFill,"bitmapFill");
	HX_MARK_MEMBER_NAME(CanvasGraphics_obj::bitmapStroke,"bitmapStroke");
	HX_MARK_MEMBER_NAME(CanvasGraphics_obj::bitmapRepeat,"bitmapRepeat");
	HX_MARK_MEMBER_NAME(CanvasGraphics_obj::bounds,"bounds");
	HX_MARK_MEMBER_NAME(CanvasGraphics_obj::fillCommands,"fillCommands");
	HX_MARK_MEMBER_NAME(CanvasGraphics_obj::graphics,"graphics");
	HX_MARK_MEMBER_NAME(CanvasGraphics_obj::hasFill,"hasFill");
	HX_MARK_MEMBER_NAME(CanvasGraphics_obj::hasStroke,"hasStroke");
	HX_MARK_MEMBER_NAME(CanvasGraphics_obj::hitTesting,"hitTesting");
	HX_MARK_MEMBER_NAME(CanvasGraphics_obj::inversePendingMatrix,"inversePendingMatrix");
	HX_MARK_MEMBER_NAME(CanvasGraphics_obj::pendingMatrix,"pendingMatrix");
	HX_MARK_MEMBER_NAME(CanvasGraphics_obj::strokeCommands,"strokeCommands");
	HX_MARK_MEMBER_NAME(CanvasGraphics_obj::windingRule,"windingRule");
};

#ifdef HXCPP_VISIT_ALLOCS
static void CanvasGraphics_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(CanvasGraphics_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(CanvasGraphics_obj::SIN45,"SIN45");
	HX_VISIT_MEMBER_NAME(CanvasGraphics_obj::TAN22,"TAN22");
	HX_VISIT_MEMBER_NAME(CanvasGraphics_obj::allowSmoothing,"allowSmoothing");
	HX_VISIT_MEMBER_NAME(CanvasGraphics_obj::bitmapFill,"bitmapFill");
	HX_VISIT_MEMBER_NAME(CanvasGraphics_obj::bitmapStroke,"bitmapStroke");
	HX_VISIT_MEMBER_NAME(CanvasGraphics_obj::bitmapRepeat,"bitmapRepeat");
	HX_VISIT_MEMBER_NAME(CanvasGraphics_obj::bounds,"bounds");
	HX_VISIT_MEMBER_NAME(CanvasGraphics_obj::fillCommands,"fillCommands");
	HX_VISIT_MEMBER_NAME(CanvasGraphics_obj::graphics,"graphics");
	HX_VISIT_MEMBER_NAME(CanvasGraphics_obj::hasFill,"hasFill");
	HX_VISIT_MEMBER_NAME(CanvasGraphics_obj::hasStroke,"hasStroke");
	HX_VISIT_MEMBER_NAME(CanvasGraphics_obj::hitTesting,"hitTesting");
	HX_VISIT_MEMBER_NAME(CanvasGraphics_obj::inversePendingMatrix,"inversePendingMatrix");
	HX_VISIT_MEMBER_NAME(CanvasGraphics_obj::pendingMatrix,"pendingMatrix");
	HX_VISIT_MEMBER_NAME(CanvasGraphics_obj::strokeCommands,"strokeCommands");
	HX_VISIT_MEMBER_NAME(CanvasGraphics_obj::windingRule,"windingRule");
};

#endif

hx::Class CanvasGraphics_obj::__mClass;

static ::String CanvasGraphics_obj_sStaticFields[] = {
	HX_HCSTRING("SIN45","\x79","\x16","\xbe","\xfa"),
	HX_HCSTRING("TAN22","\x41","\xf4","\xda","\x88"),
	HX_HCSTRING("allowSmoothing","\xab","\xb7","\x66","\x68"),
	HX_HCSTRING("bitmapFill","\x12","\x2e","\x19","\x35"),
	HX_HCSTRING("bitmapStroke","\x07","\x55","\x54","\x1c"),
	HX_HCSTRING("bitmapRepeat","\xaa","\x38","\x9c","\x11"),
	HX_HCSTRING("bounds","\x75","\x86","\x1d","\x66"),
	HX_HCSTRING("fillCommands","\x6b","\xf6","\xc9","\xc2"),
	HX_HCSTRING("graphics","\xcb","\xf8","\x67","\x12"),
	HX_HCSTRING("hasFill","\xfd","\xee","\xff","\x12"),
	HX_HCSTRING("hasStroke","\xb2","\x66","\x1d","\x52"),
	HX_HCSTRING("hitTesting","\xbd","\x65","\x48","\x19"),
	HX_HCSTRING("inversePendingMatrix","\x28","\x14","\x8c","\xbb"),
	HX_HCSTRING("pendingMatrix","\xf8","\x9d","\x96","\xb5"),
	HX_HCSTRING("strokeCommands","\xa0","\x98","\x2a","\x67"),
	HX_HCSTRING("windingRule","\x36","\x83","\xc0","\x4f"),
	HX_HCSTRING("closePath","\x7d","\x65","\x20","\x14"),
	HX_HCSTRING("createBitmapFill","\x2e","\xac","\x46","\x6a"),
	HX_HCSTRING("createGradientPattern","\xa4","\xee","\x44","\xf6"),
	HX_HCSTRING("createTempPatternCanvas","\xf8","\x58","\x91","\xd0"),
	HX_HCSTRING("drawRoundRect","\xee","\xc3","\xaa","\xe2"),
	HX_HCSTRING("endFill","\xfe","\x87","\xe0","\x25"),
	HX_HCSTRING("endStroke","\xf3","\x01","\x17","\x51"),
	HX_HCSTRING("hitTest","\x45","\x60","\x7f","\xe2"),
	HX_HCSTRING("isCCW","\x0d","\x84","\x49","\xc1"),
	HX_HCSTRING("normalizeUVT","\x66","\x09","\x2f","\x47"),
	HX_HCSTRING("playCommands","\xdc","\xae","\xee","\x49"),
	HX_HCSTRING("render","\x56","\x6b","\x29","\x05"),
	HX_HCSTRING("renderMask","\x62","\x3b","\x60","\xe5"),
	HX_HCSTRING("setSmoothing","\x72","\x95","\x31","\xba"),
	::String(null())
};

void CanvasGraphics_obj::__register()
{
	hx::Object *dummy = new CanvasGraphics_obj;
	CanvasGraphics_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("openfl._internal.renderer.canvas.CanvasGraphics","\x7e","\xdf","\x3e","\x3c");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &CanvasGraphics_obj::__GetStatic;
	__mClass->mSetStaticField = &CanvasGraphics_obj::__SetStatic;
	__mClass->mMarkFunc = CanvasGraphics_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(CanvasGraphics_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< CanvasGraphics_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = CanvasGraphics_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = CanvasGraphics_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = CanvasGraphics_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void CanvasGraphics_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_ca7a636da47018f2_43_boot)
HXDLIN(  43)		SIN45 = ((Float)0.70710678118654752440084436210485);
            	}
{
            	HX_STACKFRAME(&_hx_pos_ca7a636da47018f2_44_boot)
HXDLIN(  44)		TAN22 = ((Float)0.4142135623730950488016887242097);
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_ca7a636da47018f2_51_boot)
HXDLIN(  51)		fillCommands =  ::openfl::_internal::renderer::DrawCommandBuffer_obj::__alloc( HX_CTX );
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_ca7a636da47018f2_58_boot)
HXDLIN(  58)		strokeCommands =  ::openfl::_internal::renderer::DrawCommandBuffer_obj::__alloc( HX_CTX );
            	}
}

} // end namespace openfl
} // end namespace _internal
} // end namespace renderer
} // end namespace canvas
