// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_Reflect
#include <Reflect.h>
#endif
#ifndef INCLUDED_openfl__Vector_FunctionVector
#include <openfl/_Vector/FunctionVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_IVector
#include <openfl/_Vector/IVector.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_f37013fa3e7b7067_965_new,"openfl._Vector.FunctionVector","new",0x9bdddf17,"openfl._Vector.FunctionVector.new","openfl/Vector.hx",965,0x4a01873c)
HX_LOCAL_STACK_FRAME(_hx_pos_f37013fa3e7b7067_983_concat,"openfl._Vector.FunctionVector","concat",0x3878c6bd,"openfl._Vector.FunctionVector.concat","openfl/Vector.hx",983,0x4a01873c)
HX_LOCAL_STACK_FRAME(_hx_pos_f37013fa3e7b7067_1008_copy,"openfl._Vector.FunctionVector","copy",0xbf078d1e,"openfl._Vector.FunctionVector.copy","openfl/Vector.hx",1008,0x4a01873c)
HX_LOCAL_STACK_FRAME(_hx_pos_f37013fa3e7b7067_1015_get,"openfl._Vector.FunctionVector","get",0x9bd88f4d,"openfl._Vector.FunctionVector.get","openfl/Vector.hx",1015,0x4a01873c)
HX_LOCAL_STACK_FRAME(_hx_pos_f37013fa3e7b7067_1028_indexOf,"openfl._Vector.FunctionVector","indexOf",0x03bc7f00,"openfl._Vector.FunctionVector.indexOf","openfl/Vector.hx",1028,0x4a01873c)
HX_LOCAL_STACK_FRAME(_hx_pos_f37013fa3e7b7067_1047_insertAt,"openfl._Vector.FunctionVector","insertAt",0x3cb1b675,"openfl._Vector.FunctionVector.insertAt","openfl/Vector.hx",1047,0x4a01873c)
HX_LOCAL_STACK_FRAME(_hx_pos_f37013fa3e7b7067_1058_iterator,"openfl._Vector.FunctionVector","iterator",0x0e2c83d7,"openfl._Vector.FunctionVector.iterator","openfl/Vector.hx",1058,0x4a01873c)
HX_LOCAL_STACK_FRAME(_hx_pos_f37013fa3e7b7067_1065_join,"openfl._Vector.FunctionVector","join",0xc3a80553,"openfl._Vector.FunctionVector.join","openfl/Vector.hx",1065,0x4a01873c)
HX_LOCAL_STACK_FRAME(_hx_pos_f37013fa3e7b7067_1070_lastIndexOf,"openfl._Vector.FunctionVector","lastIndexOf",0xc9451aca,"openfl._Vector.FunctionVector.lastIndexOf","openfl/Vector.hx",1070,0x4a01873c)
HX_LOCAL_STACK_FRAME(_hx_pos_f37013fa3e7b7067_1088_pop,"openfl._Vector.FunctionVector","pop",0x9bdf6c48,"openfl._Vector.FunctionVector.pop","openfl/Vector.hx",1088,0x4a01873c)
HX_LOCAL_STACK_FRAME(_hx_pos_f37013fa3e7b7067_1103_push,"openfl._Vector.FunctionVector","push",0xc7a3e343,"openfl._Vector.FunctionVector.push","openfl/Vector.hx",1103,0x4a01873c)
HX_LOCAL_STACK_FRAME(_hx_pos_f37013fa3e7b7067_1116_removeAt,"openfl._Vector.FunctionVector","removeAt",0x27ada840,"openfl._Vector.FunctionVector.removeAt","openfl/Vector.hx",1116,0x4a01873c)
HX_LOCAL_STACK_FRAME(_hx_pos_f37013fa3e7b7067_1129_reverse,"openfl._Vector.FunctionVector","reverse",0x3df96f59,"openfl._Vector.FunctionVector.reverse","openfl/Vector.hx",1129,0x4a01873c)
HX_LOCAL_STACK_FRAME(_hx_pos_f37013fa3e7b7067_1139_set,"openfl._Vector.FunctionVector","set",0x9be1aa59,"openfl._Vector.FunctionVector.set","openfl/Vector.hx",1139,0x4a01873c)
HX_LOCAL_STACK_FRAME(_hx_pos_f37013fa3e7b7067_1154_shift,"openfl._Vector.FunctionVector","shift",0x995756f9,"openfl._Vector.FunctionVector.shift","openfl/Vector.hx",1154,0x4a01873c)
HX_LOCAL_STACK_FRAME(_hx_pos_f37013fa3e7b7067_1169_slice,"openfl._Vector.FunctionVector","slice",0x9bfc2ec9,"openfl._Vector.FunctionVector.slice","openfl/Vector.hx",1169,0x4a01873c)
HX_LOCAL_STACK_FRAME(_hx_pos_f37013fa3e7b7067_1176_sort,"openfl._Vector.FunctionVector","sort",0xc99af8c7,"openfl._Vector.FunctionVector.sort","openfl/Vector.hx",1176,0x4a01873c)
HX_LOCAL_STACK_FRAME(_hx_pos_f37013fa3e7b7067_1183_splice,"openfl._Vector.FunctionVector","splice",0x30474325,"openfl._Vector.FunctionVector.splice","openfl/Vector.hx",1183,0x4a01873c)
HX_LOCAL_STACK_FRAME(_hx_pos_f37013fa3e7b7067_1190_toJSON,"openfl._Vector.FunctionVector","toJSON",0xecb206cc,"openfl._Vector.FunctionVector.toJSON","openfl/Vector.hx",1190,0x4a01873c)
HX_LOCAL_STACK_FRAME(_hx_pos_f37013fa3e7b7067_1197_toString,"openfl._Vector.FunctionVector","toString",0xb3010a95,"openfl._Vector.FunctionVector.toString","openfl/Vector.hx",1197,0x4a01873c)
HX_LOCAL_STACK_FRAME(_hx_pos_f37013fa3e7b7067_1204_unshift,"openfl._Vector.FunctionVector","unshift",0x9bb119c0,"openfl._Vector.FunctionVector.unshift","openfl/Vector.hx",1204,0x4a01873c)
HX_LOCAL_STACK_FRAME(_hx_pos_f37013fa3e7b7067_1222_get_length,"openfl._Vector.FunctionVector","get_length",0x7e924ad8,"openfl._Vector.FunctionVector.get_length","openfl/Vector.hx",1222,0x4a01873c)
HX_LOCAL_STACK_FRAME(_hx_pos_f37013fa3e7b7067_1227_set_length,"openfl._Vector.FunctionVector","set_length",0x820fe94c,"openfl._Vector.FunctionVector.set_length","openfl/Vector.hx",1227,0x4a01873c)
namespace openfl{
namespace _Vector{

void FunctionVector_obj::__construct( ::Dynamic length, ::Dynamic fixed,::cpp::VirtualArray array){
            	HX_STACKFRAME(&_hx_pos_f37013fa3e7b7067_965_new)
HXLINE( 967)		if (hx::IsNull( array )) {
HXLINE( 967)			array = ::cpp::VirtualArray_obj::__new();
            		}
HXLINE( 968)		this->_hx___array = array;
HXLINE( 970)		bool _hx_tmp;
HXDLIN( 970)		if (hx::IsNotNull( length )) {
HXLINE( 970)			_hx_tmp = hx::IsGreater( length,(int)0 );
            		}
            		else {
HXLINE( 970)			_hx_tmp = false;
            		}
HXDLIN( 970)		if (_hx_tmp) {
HXLINE( 972)			this->set_length(length);
            		}
HXLINE( 976)		this->fixed = hx::IsEq( fixed,true );
            	}

Dynamic FunctionVector_obj::__CreateEmpty() { return new FunctionVector_obj; }

void *FunctionVector_obj::_hx_vtable = 0;

Dynamic FunctionVector_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< FunctionVector_obj > _hx_result = new FunctionVector_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

bool FunctionVector_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x3899d30d;
}

static ::openfl::_Vector::IVector_obj _hx_openfl__Vector_FunctionVector__hx_openfl__Vector_IVector= {
	( int (hx::Object::*)(int))&::openfl::_Vector::FunctionVector_obj::set_length,
	( int (hx::Object::*)())&::openfl::_Vector::FunctionVector_obj::get_length,
	( ::Dynamic (hx::Object::*)(::Dynamic))&::openfl::_Vector::FunctionVector_obj::concat,
	( ::Dynamic (hx::Object::*)())&::openfl::_Vector::FunctionVector_obj::copy,
	(  ::Dynamic (hx::Object::*)(int))&::openfl::_Vector::FunctionVector_obj::get,
	( int (hx::Object::*)( ::Dynamic, ::Dynamic))&::openfl::_Vector::FunctionVector_obj::indexOf,
	( void (hx::Object::*)(int, ::Dynamic))&::openfl::_Vector::FunctionVector_obj::insertAt,
	(  ::Dynamic (hx::Object::*)())&::openfl::_Vector::FunctionVector_obj::iterator,
	( ::String (hx::Object::*)(::String))&::openfl::_Vector::FunctionVector_obj::join,
	( int (hx::Object::*)( ::Dynamic, ::Dynamic))&::openfl::_Vector::FunctionVector_obj::lastIndexOf,
	(  ::Dynamic (hx::Object::*)())&::openfl::_Vector::FunctionVector_obj::pop,
	( int (hx::Object::*)( ::Dynamic))&::openfl::_Vector::FunctionVector_obj::push,
	(  ::Dynamic (hx::Object::*)(int))&::openfl::_Vector::FunctionVector_obj::removeAt,
	( ::Dynamic (hx::Object::*)())&::openfl::_Vector::FunctionVector_obj::reverse,
	(  ::Dynamic (hx::Object::*)(int, ::Dynamic))&::openfl::_Vector::FunctionVector_obj::set,
	(  ::Dynamic (hx::Object::*)())&::openfl::_Vector::FunctionVector_obj::shift,
	( ::Dynamic (hx::Object::*)( ::Dynamic, ::Dynamic))&::openfl::_Vector::FunctionVector_obj::slice,
	( void (hx::Object::*)( ::Dynamic))&::openfl::_Vector::FunctionVector_obj::sort,
	( ::Dynamic (hx::Object::*)(int,int))&::openfl::_Vector::FunctionVector_obj::splice,
	( ::String (hx::Object::*)())&::openfl::_Vector::FunctionVector_obj::toString,
	( void (hx::Object::*)( ::Dynamic))&::openfl::_Vector::FunctionVector_obj::unshift,
};

void *FunctionVector_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0x45e7caba: return &_hx_openfl__Vector_FunctionVector__hx_openfl__Vector_IVector;
	}
	#ifdef HXCPP_SCRIPTABLE
	return super::_hx_getInterface(inHash);
	#else
	return 0;
	#endif
}

::Dynamic FunctionVector_obj::concat(::Dynamic a){
            	HX_GC_STACKFRAME(&_hx_pos_f37013fa3e7b7067_983_concat)
HXDLIN( 983)		if (hx::IsNull( a )) {
HXLINE( 985)			return  ::openfl::_Vector::FunctionVector_obj::__alloc( HX_CTX ,null(),null(),this->_hx___array->copy());
            		}
            		else {
HXLINE( 989)			 ::openfl::_Vector::FunctionVector other = ( ( ::openfl::_Vector::FunctionVector)(a) );
HXLINE( 991)			if ((other->_hx___array->get_length() > (int)0)) {
HXLINE( 993)				return  ::openfl::_Vector::FunctionVector_obj::__alloc( HX_CTX ,null(),null(),this->_hx___array->concat(other->_hx___array));
            			}
            			else {
HXLINE( 997)				return  ::openfl::_Vector::FunctionVector_obj::__alloc( HX_CTX ,null(),null(),this->_hx___array->copy());
            			}
            		}
HXLINE( 983)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(FunctionVector_obj,concat,return )

::Dynamic FunctionVector_obj::copy(){
            	HX_GC_STACKFRAME(&_hx_pos_f37013fa3e7b7067_1008_copy)
HXDLIN(1008)		bool _hx_tmp = this->fixed;
HXDLIN(1008)		return  ::openfl::_Vector::FunctionVector_obj::__alloc( HX_CTX ,null(),_hx_tmp,this->_hx___array->copy());
            	}


HX_DEFINE_DYNAMIC_FUNC0(FunctionVector_obj,copy,return )

 ::Dynamic FunctionVector_obj::get(int index){
            	HX_STACKFRAME(&_hx_pos_f37013fa3e7b7067_1015_get)
HXDLIN(1015)		if ((index >= this->_hx___array->get_length())) {
HXLINE(1017)			return null();
            		}
            		else {
HXLINE(1021)			return this->_hx___array->__get(index);
            		}
HXLINE(1015)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(FunctionVector_obj,get,return )

int FunctionVector_obj::indexOf( ::Dynamic x, ::Dynamic __o_from){
 ::Dynamic from = __o_from.Default(0);
            	HX_STACKFRAME(&_hx_pos_f37013fa3e7b7067_1028_indexOf)
HXLINE(1030)		{
HXLINE(1030)			int _g1 = from;
HXDLIN(1030)			int _g = this->_hx___array->get_length();
HXDLIN(1030)			while((_g1 < _g)){
HXLINE(1030)				_g1 = (_g1 + (int)1);
HXDLIN(1030)				int i = (_g1 - (int)1);
HXLINE(1032)				if (::Reflect_obj::compareMethods(this->_hx___array->__get(i),x)) {
HXLINE(1034)					return i;
            				}
            			}
            		}
HXLINE(1040)		return (int)-1;
            	}


HX_DEFINE_DYNAMIC_FUNC2(FunctionVector_obj,indexOf,return )

void FunctionVector_obj::insertAt(int index, ::Dynamic element){
            	HX_STACKFRAME(&_hx_pos_f37013fa3e7b7067_1047_insertAt)
HXDLIN(1047)		bool _hx_tmp;
HXDLIN(1047)		if (!(!(this->fixed))) {
HXDLIN(1047)			_hx_tmp = (index < this->_hx___array->get_length());
            		}
            		else {
HXDLIN(1047)			_hx_tmp = true;
            		}
HXDLIN(1047)		if (_hx_tmp) {
HXLINE(1049)			this->_hx___array->insert(index,element);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(FunctionVector_obj,insertAt,(void))

 ::Dynamic FunctionVector_obj::iterator(){
            	HX_STACKFRAME(&_hx_pos_f37013fa3e7b7067_1058_iterator)
HXDLIN(1058)		return this->_hx___array->iterator();
            	}


HX_DEFINE_DYNAMIC_FUNC0(FunctionVector_obj,iterator,return )

::String FunctionVector_obj::join(::String __o_sep){
::String sep = __o_sep.Default(HX_HCSTRING(",","\x2c","\x00","\x00","\x00"));
            	HX_STACKFRAME(&_hx_pos_f37013fa3e7b7067_1065_join)
HXDLIN(1065)		return this->_hx___array->join(sep);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FunctionVector_obj,join,return )

int FunctionVector_obj::lastIndexOf( ::Dynamic x, ::Dynamic from){
            	HX_STACKFRAME(&_hx_pos_f37013fa3e7b7067_1070_lastIndexOf)
HXLINE(1072)		 ::Dynamic i;
HXDLIN(1072)		bool i1;
HXDLIN(1072)		if (hx::IsNotNull( from )) {
HXLINE(1072)			i1 = hx::IsGreaterEq( from,this->_hx___array->get_length() );
            		}
            		else {
HXLINE(1072)			i1 = true;
            		}
HXDLIN(1072)		if (i1) {
HXLINE(1072)			i = (this->_hx___array->get_length() - (int)1);
            		}
            		else {
HXLINE(1072)			i = from;
            		}
HXLINE(1074)		while(hx::IsGreaterEq( i,(int)0 )){
HXLINE(1076)			if (::Reflect_obj::compareMethods(this->_hx___array->__get(i),x)) {
HXLINE(1076)				return i;
            			}
HXLINE(1077)			i = (i - (int)1);
            		}
HXLINE(1081)		return (int)-1;
            	}


HX_DEFINE_DYNAMIC_FUNC2(FunctionVector_obj,lastIndexOf,return )

 ::Dynamic FunctionVector_obj::pop(){
            	HX_STACKFRAME(&_hx_pos_f37013fa3e7b7067_1088_pop)
HXDLIN(1088)		if (!(this->fixed)) {
HXLINE(1090)			return this->_hx___array->pop();
            		}
            		else {
HXLINE(1094)			return null();
            		}
HXLINE(1088)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(FunctionVector_obj,pop,return )

int FunctionVector_obj::push( ::Dynamic x){
            	HX_STACKFRAME(&_hx_pos_f37013fa3e7b7067_1103_push)
HXDLIN(1103)		if (!(this->fixed)) {
HXLINE(1105)			return this->_hx___array->push(x);
            		}
            		else {
HXLINE(1109)			return this->_hx___array->get_length();
            		}
HXLINE(1103)		return (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FunctionVector_obj,push,return )

 ::Dynamic FunctionVector_obj::removeAt(int index){
            	HX_STACKFRAME(&_hx_pos_f37013fa3e7b7067_1116_removeAt)
HXLINE(1118)		bool _hx_tmp;
HXDLIN(1118)		if (!(!(this->fixed))) {
HXLINE(1118)			_hx_tmp = (index < this->_hx___array->get_length());
            		}
            		else {
HXLINE(1118)			_hx_tmp = true;
            		}
HXDLIN(1118)		if (_hx_tmp) {
HXLINE(1120)			return this->_hx___array->splice(index,(int)1)->__get((int)0);
            		}
HXLINE(1124)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(FunctionVector_obj,removeAt,return )

::Dynamic FunctionVector_obj::reverse(){
            	HX_STACKFRAME(&_hx_pos_f37013fa3e7b7067_1129_reverse)
HXLINE(1131)		this->_hx___array->reverse();
HXLINE(1132)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC0(FunctionVector_obj,reverse,return )

 ::Dynamic FunctionVector_obj::set(int index, ::Dynamic value){
            	HX_STACKFRAME(&_hx_pos_f37013fa3e7b7067_1139_set)
HXDLIN(1139)		bool _hx_tmp;
HXDLIN(1139)		if (!(!(this->fixed))) {
HXDLIN(1139)			_hx_tmp = (index < this->_hx___array->get_length());
            		}
            		else {
HXDLIN(1139)			_hx_tmp = true;
            		}
HXDLIN(1139)		if (_hx_tmp) {
HXLINE(1141)			return (this->_hx___array->set(index,value));
            		}
            		else {
HXLINE(1145)			return value;
            		}
HXLINE(1139)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC2(FunctionVector_obj,set,return )

 ::Dynamic FunctionVector_obj::shift(){
            	HX_STACKFRAME(&_hx_pos_f37013fa3e7b7067_1154_shift)
HXDLIN(1154)		if (!(this->fixed)) {
HXLINE(1156)			return this->_hx___array->shift();
            		}
            		else {
HXLINE(1160)			return null();
            		}
HXLINE(1154)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(FunctionVector_obj,shift,return )

::Dynamic FunctionVector_obj::slice( ::Dynamic __o_startIndex, ::Dynamic __o_endIndex){
 ::Dynamic startIndex = __o_startIndex.Default(0);
 ::Dynamic endIndex = __o_endIndex.Default(16777215);
            	HX_GC_STACKFRAME(&_hx_pos_f37013fa3e7b7067_1169_slice)
HXDLIN(1169)		return  ::openfl::_Vector::FunctionVector_obj::__alloc( HX_CTX ,null(),null(),this->_hx___array->slice(startIndex,endIndex));
            	}


HX_DEFINE_DYNAMIC_FUNC2(FunctionVector_obj,slice,return )

void FunctionVector_obj::sort( ::Dynamic f){
            	HX_STACKFRAME(&_hx_pos_f37013fa3e7b7067_1176_sort)
HXDLIN(1176)		this->_hx___array->sort(f);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FunctionVector_obj,sort,(void))

::Dynamic FunctionVector_obj::splice(int pos,int len){
            	HX_GC_STACKFRAME(&_hx_pos_f37013fa3e7b7067_1183_splice)
HXDLIN(1183)		return  ::openfl::_Vector::FunctionVector_obj::__alloc( HX_CTX ,null(),null(),this->_hx___array->splice(pos,len));
            	}


HX_DEFINE_DYNAMIC_FUNC2(FunctionVector_obj,splice,return )

::cpp::VirtualArray FunctionVector_obj::toJSON(){
            	HX_STACKFRAME(&_hx_pos_f37013fa3e7b7067_1190_toJSON)
HXDLIN(1190)		return this->_hx___array;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FunctionVector_obj,toJSON,return )

::String FunctionVector_obj::toString(){
            	HX_STACKFRAME(&_hx_pos_f37013fa3e7b7067_1197_toString)
HXDLIN(1197)		if (hx::IsNotNull( this->_hx___array )) {
HXDLIN(1197)			return this->_hx___array->toString();
            		}
            		else {
HXDLIN(1197)			return null();
            		}
HXDLIN(1197)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(FunctionVector_obj,toString,return )

void FunctionVector_obj::unshift( ::Dynamic x){
            	HX_STACKFRAME(&_hx_pos_f37013fa3e7b7067_1204_unshift)
HXDLIN(1204)		if (!(this->fixed)) {
HXLINE(1206)			this->_hx___array->unshift(x);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(FunctionVector_obj,unshift,(void))

int FunctionVector_obj::get_length(){
            	HX_STACKFRAME(&_hx_pos_f37013fa3e7b7067_1222_get_length)
HXDLIN(1222)		return this->_hx___array->get_length();
            	}


HX_DEFINE_DYNAMIC_FUNC0(FunctionVector_obj,get_length,return )

int FunctionVector_obj::set_length(int value){
            	HX_STACKFRAME(&_hx_pos_f37013fa3e7b7067_1227_set_length)
HXLINE(1229)		if (!(this->fixed)) {
HXLINE(1233)			_hx_array_set_size_exact(this->_hx___array,value);
            		}
HXLINE(1262)		return this->_hx___array->get_length();
            	}


HX_DEFINE_DYNAMIC_FUNC1(FunctionVector_obj,set_length,return )


hx::ObjectPtr< FunctionVector_obj > FunctionVector_obj::__new( ::Dynamic length, ::Dynamic fixed,::cpp::VirtualArray array) {
	hx::ObjectPtr< FunctionVector_obj > __this = new FunctionVector_obj();
	__this->__construct(length,fixed,array);
	return __this;
}

hx::ObjectPtr< FunctionVector_obj > FunctionVector_obj::__alloc(hx::Ctx *_hx_ctx, ::Dynamic length, ::Dynamic fixed,::cpp::VirtualArray array) {
	FunctionVector_obj *__this = (FunctionVector_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(FunctionVector_obj), true, "openfl._Vector.FunctionVector"));
	*(void **)__this = FunctionVector_obj::_hx_vtable;
	__this->__construct(length,fixed,array);
	return __this;
}

FunctionVector_obj::FunctionVector_obj()
{
}

void FunctionVector_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(FunctionVector);
	HX_MARK_MEMBER_NAME(fixed,"fixed");
	HX_MARK_MEMBER_NAME(_hx___array,"__array");
	HX_MARK_END_CLASS();
}

void FunctionVector_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(fixed,"fixed");
	HX_VISIT_MEMBER_NAME(_hx___array,"__array");
}

hx::Val FunctionVector_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"get") ) { return hx::Val( get_dyn() ); }
		if (HX_FIELD_EQ(inName,"pop") ) { return hx::Val( pop_dyn() ); }
		if (HX_FIELD_EQ(inName,"set") ) { return hx::Val( set_dyn() ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"copy") ) { return hx::Val( copy_dyn() ); }
		if (HX_FIELD_EQ(inName,"join") ) { return hx::Val( join_dyn() ); }
		if (HX_FIELD_EQ(inName,"push") ) { return hx::Val( push_dyn() ); }
		if (HX_FIELD_EQ(inName,"sort") ) { return hx::Val( sort_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"fixed") ) { return hx::Val( fixed ); }
		if (HX_FIELD_EQ(inName,"shift") ) { return hx::Val( shift_dyn() ); }
		if (HX_FIELD_EQ(inName,"slice") ) { return hx::Val( slice_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"length") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_length() ); }
		if (HX_FIELD_EQ(inName,"concat") ) { return hx::Val( concat_dyn() ); }
		if (HX_FIELD_EQ(inName,"splice") ) { return hx::Val( splice_dyn() ); }
		if (HX_FIELD_EQ(inName,"toJSON") ) { return hx::Val( toJSON_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"__array") ) { return hx::Val( _hx___array ); }
		if (HX_FIELD_EQ(inName,"indexOf") ) { return hx::Val( indexOf_dyn() ); }
		if (HX_FIELD_EQ(inName,"reverse") ) { return hx::Val( reverse_dyn() ); }
		if (HX_FIELD_EQ(inName,"unshift") ) { return hx::Val( unshift_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"insertAt") ) { return hx::Val( insertAt_dyn() ); }
		if (HX_FIELD_EQ(inName,"iterator") ) { return hx::Val( iterator_dyn() ); }
		if (HX_FIELD_EQ(inName,"removeAt") ) { return hx::Val( removeAt_dyn() ); }
		if (HX_FIELD_EQ(inName,"toString") ) { return hx::Val( toString_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"get_length") ) { return hx::Val( get_length_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_length") ) { return hx::Val( set_length_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"lastIndexOf") ) { return hx::Val( lastIndexOf_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val FunctionVector_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"fixed") ) { fixed=inValue.Cast< bool >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"length") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_length(inValue.Cast< int >()) ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"__array") ) { _hx___array=inValue.Cast< ::cpp::VirtualArray >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void FunctionVector_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("fixed","\x74","\xf9","\xa1","\x00"));
	outFields->push(HX_HCSTRING("length","\xe6","\x94","\x07","\x9f"));
	outFields->push(HX_HCSTRING("__array","\x79","\xc6","\xed","\x8f"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo FunctionVector_obj_sMemberStorageInfo[] = {
	{hx::fsBool,(int)offsetof(FunctionVector_obj,fixed),HX_HCSTRING("fixed","\x74","\xf9","\xa1","\x00")},
	{hx::fsObject /*cpp::ArrayBase*/ ,(int)offsetof(FunctionVector_obj,_hx___array),HX_HCSTRING("__array","\x79","\xc6","\xed","\x8f")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *FunctionVector_obj_sStaticStorageInfo = 0;
#endif

static ::String FunctionVector_obj_sMemberFields[] = {
	HX_HCSTRING("fixed","\x74","\xf9","\xa1","\x00"),
	HX_HCSTRING("__array","\x79","\xc6","\xed","\x8f"),
	HX_HCSTRING("concat","\x14","\x09","\xd0","\xc7"),
	HX_HCSTRING("copy","\xb5","\xbb","\xc4","\x41"),
	HX_HCSTRING("get","\x96","\x80","\x4e","\x00"),
	HX_HCSTRING("indexOf","\xc9","\x48","\xbf","\xe0"),
	HX_HCSTRING("insertAt","\x8c","\x7c","\x1f","\xc2"),
	HX_HCSTRING("iterator","\xee","\x49","\x9a","\x93"),
	HX_HCSTRING("join","\xea","\x33","\x65","\x46"),
	HX_HCSTRING("lastIndexOf","\x13","\xfd","\x6a","\x95"),
	HX_HCSTRING("pop","\x91","\x5d","\x55","\x00"),
	HX_HCSTRING("push","\xda","\x11","\x61","\x4a"),
	HX_HCSTRING("removeAt","\x57","\x6e","\x1b","\xad"),
	HX_HCSTRING("reverse","\x22","\x39","\xfc","\x1a"),
	HX_HCSTRING("set","\xa2","\x9b","\x57","\x00"),
	HX_HCSTRING("shift","\x82","\xec","\x22","\x7c"),
	HX_HCSTRING("slice","\x52","\xc4","\xc7","\x7e"),
	HX_HCSTRING("sort","\x5e","\x27","\x58","\x4c"),
	HX_HCSTRING("splice","\x7c","\x85","\x9e","\xbf"),
	HX_HCSTRING("toJSON","\x23","\x49","\x09","\x7c"),
	HX_HCSTRING("toString","\xac","\xd0","\x6e","\x38"),
	HX_HCSTRING("unshift","\x89","\xe3","\xb3","\x78"),
	HX_HCSTRING("get_length","\xaf","\x04","\x8f","\x8f"),
	HX_HCSTRING("set_length","\x23","\xa3","\x0c","\x93"),
	::String(null()) };

static void FunctionVector_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(FunctionVector_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void FunctionVector_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(FunctionVector_obj::__mClass,"__mClass");
};

#endif

hx::Class FunctionVector_obj::__mClass;

void FunctionVector_obj::__register()
{
	hx::Object *dummy = new FunctionVector_obj;
	FunctionVector_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("openfl._Vector.FunctionVector","\xa5","\x07","\x75","\x4f");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = FunctionVector_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(FunctionVector_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< FunctionVector_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = FunctionVector_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FunctionVector_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FunctionVector_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace openfl
} // end namespace _Vector
