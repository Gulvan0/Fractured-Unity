// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_lime_app_Future
#include <lime/app/Future.h>
#endif
#ifndef INCLUDED_lime_text_Font
#include <lime/text/Font.h>
#endif
#ifndef INCLUDED_openfl_text_Font
#include <openfl/text/Font.h>
#endif
#ifndef INCLUDED_openfl_utils_Assets
#include <openfl/utils/Assets.h>
#endif
#ifndef INCLUDED_openfl_utils_ByteArrayData
#include <openfl/utils/ByteArrayData.h>
#endif
#ifndef INCLUDED_openfl_utils_IDataInput
#include <openfl/utils/IDataInput.h>
#endif
#ifndef INCLUDED_openfl_utils_IDataOutput
#include <openfl/utils/IDataOutput.h>
#endif
#ifndef INCLUDED_openfl_utils__ByteArray_ByteArray_Impl_
#include <openfl/utils/_ByteArray/ByteArray_Impl_.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_bf5c0d6977753a1b_39_new,"openfl.text.Font","new",0xe13d5ce4,"openfl.text.Font.new","openfl/text/Font.hx",39,0x076bbaac)
HX_LOCAL_STACK_FRAME(_hx_pos_bf5c0d6977753a1b_143___fromLimeFont,"openfl.text.Font","__fromLimeFont",0x57c4282a,"openfl.text.Font.__fromLimeFont","openfl/text/Font.hx",143,0x076bbaac)
HX_LOCAL_STACK_FRAME(_hx_pos_bf5c0d6977753a1b_148___initialize,"openfl.text.Font","__initialize",0x3f396f6c,"openfl.text.Font.__initialize","openfl/text/Font.hx",148,0x076bbaac)
HX_LOCAL_STACK_FRAME(_hx_pos_bf5c0d6977753a1b_181_get_fontName,"openfl.text.Font","get_fontName",0x9a8206bf,"openfl.text.Font.get_fontName","openfl/text/Font.hx",181,0x076bbaac)
HX_LOCAL_STACK_FRAME(_hx_pos_bf5c0d6977753a1b_188_set_fontName,"openfl.text.Font","set_fontName",0xaf7b2a33,"openfl.text.Font.set_fontName","openfl/text/Font.hx",188,0x076bbaac)
HX_LOCAL_STACK_FRAME(_hx_pos_bf5c0d6977753a1b_46_enumerateFonts,"openfl.text.Font","enumerateFonts",0x792ac3fc,"openfl.text.Font.enumerateFonts","openfl/text/Font.hx",46,0x076bbaac)
HX_LOCAL_STACK_FRAME(_hx_pos_bf5c0d6977753a1b_51_fromBytes,"openfl.text.Font","fromBytes",0x95ccba25,"openfl.text.Font.fromBytes","openfl/text/Font.hx",51,0x076bbaac)
HX_LOCAL_STACK_FRAME(_hx_pos_bf5c0d6977753a1b_65_fromFile,"openfl.text.Font","fromFile",0x919e3202,"openfl.text.Font.fromFile","openfl/text/Font.hx",65,0x076bbaac)
HX_LOCAL_STACK_FRAME(_hx_pos_bf5c0d6977753a1b_81_loadFromBytes,"openfl.text.Font","loadFromBytes",0x88069d1f,"openfl.text.Font.loadFromBytes","openfl/text/Font.hx",81,0x076bbaac)
HX_LOCAL_STACK_FRAME(_hx_pos_bf5c0d6977753a1b_95_loadFromFile,"openfl.text.Font","loadFromFile",0x74db4c48,"openfl.text.Font.loadFromFile","openfl/text/Font.hx",95,0x076bbaac)
HX_LOCAL_STACK_FRAME(_hx_pos_bf5c0d6977753a1b_109_loadFromName,"openfl.text.Font","loadFromName",0x7a1ef017,"openfl.text.Font.loadFromName","openfl/text/Font.hx",109,0x076bbaac)
HX_LOCAL_STACK_FRAME(_hx_pos_bf5c0d6977753a1b_121_registerFont,"openfl.text.Font","registerFont",0xd99a60ce,"openfl.text.Font.registerFont","openfl/text/Font.hx",121,0x076bbaac)
HX_LOCAL_STACK_FRAME(_hx_pos_bf5c0d6977753a1b_22_boot,"openfl.text.Font","boot",0x2c8ceb2e,"openfl.text.Font.boot","openfl/text/Font.hx",22,0x076bbaac)
HX_LOCAL_STACK_FRAME(_hx_pos_bf5c0d6977753a1b_23_boot,"openfl.text.Font","boot",0x2c8ceb2e,"openfl.text.Font.boot","openfl/text/Font.hx",23,0x076bbaac)
namespace openfl{
namespace text{

void Font_obj::__construct(::String name){
            	HX_STACKFRAME(&_hx_pos_bf5c0d6977753a1b_39_new)
HXDLIN(  39)		super::__construct(name);
            	}

Dynamic Font_obj::__CreateEmpty() { return new Font_obj; }

void *Font_obj::_hx_vtable = 0;

Dynamic Font_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Font_obj > _hx_result = new Font_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool Font_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x6aed2e71) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x6aed2e71;
	} else {
		return inClassId==(int)0x7d07fbf0;
	}
}

void Font_obj::_hx___fromLimeFont( ::lime::text::Font font){
            	HX_STACKFRAME(&_hx_pos_bf5c0d6977753a1b_143___fromLimeFont)
HXDLIN( 143)		this->_hx___copyFrom(font);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Font_obj,_hx___fromLimeFont,(void))

bool Font_obj::_hx___initialize(){
            	HX_STACKFRAME(&_hx_pos_bf5c0d6977753a1b_148___initialize)
HXLINE( 151)		if (!(this->_hx___initialized)) {
HXLINE( 153)			if (hx::IsNotNull( this->src )) {
HXLINE( 155)				this->_hx___initialized = true;
            			}
            			else {
HXLINE( 157)				bool _hx_tmp;
HXDLIN( 157)				bool _hx_tmp1;
HXDLIN( 157)				if (hx::IsNull( this->src )) {
HXLINE( 157)					_hx_tmp1 = hx::IsNotNull( this->_hx___fontID );
            				}
            				else {
HXLINE( 157)					_hx_tmp1 = false;
            				}
HXDLIN( 157)				if (_hx_tmp1) {
HXLINE( 157)					_hx_tmp = ::openfl::utils::Assets_obj::isLocal(this->_hx___fontID,null(),null());
            				}
            				else {
HXLINE( 157)					_hx_tmp = false;
            				}
HXDLIN( 157)				if (_hx_tmp) {
HXLINE( 159)					this->_hx___fromBytes(::openfl::utils::_ByteArray::ByteArray_Impl__obj::toArrayBuffer(::openfl::utils::Assets_obj::getBytes(this->_hx___fontID)));
HXLINE( 160)					this->_hx___initialized = true;
            				}
            			}
            		}
HXLINE( 167)		return this->_hx___initialized;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Font_obj,_hx___initialize,return )

::String Font_obj::get_fontName(){
            	HX_STACKFRAME(&_hx_pos_bf5c0d6977753a1b_181_get_fontName)
HXDLIN( 181)		return this->name;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Font_obj,get_fontName,return )

::String Font_obj::set_fontName(::String value){
            	HX_STACKFRAME(&_hx_pos_bf5c0d6977753a1b_188_set_fontName)
HXDLIN( 188)		return (this->name = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Font_obj,set_fontName,return )

 ::haxe::ds::StringMap Font_obj::_hx___fontByName;

::Array< ::Dynamic> Font_obj::_hx___registeredFonts;

::Array< ::Dynamic> Font_obj::enumerateFonts(hx::Null< bool >  __o_enumerateDeviceFonts){
bool enumerateDeviceFonts = __o_enumerateDeviceFonts.Default(false);
            	HX_STACKFRAME(&_hx_pos_bf5c0d6977753a1b_46_enumerateFonts)
HXDLIN(  46)		return ::openfl::text::Font_obj::_hx___registeredFonts;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Font_obj,enumerateFonts,return )

 ::openfl::text::Font Font_obj::fromBytes( ::openfl::utils::ByteArrayData bytes){
            	HX_GC_STACKFRAME(&_hx_pos_bf5c0d6977753a1b_51_fromBytes)
HXLINE(  53)		 ::openfl::text::Font font =  ::openfl::text::Font_obj::__alloc( HX_CTX ,null());
HXLINE(  54)		font->_hx___fromBytes(::openfl::utils::_ByteArray::ByteArray_Impl__obj::toArrayBuffer(bytes));
HXLINE(  57)		if (hx::IsNotNull( font->src )) {
HXLINE(  57)			return font;
            		}
            		else {
HXLINE(  57)			return null();
            		}
HXDLIN(  57)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Font_obj,fromBytes,return )

 ::openfl::text::Font Font_obj::fromFile(::String path){
            	HX_GC_STACKFRAME(&_hx_pos_bf5c0d6977753a1b_65_fromFile)
HXLINE(  67)		 ::openfl::text::Font font =  ::openfl::text::Font_obj::__alloc( HX_CTX ,null());
HXLINE(  68)		font->_hx___fromFile(path);
HXLINE(  71)		if (hx::IsNotNull( font->src )) {
HXLINE(  71)			return font;
            		}
            		else {
HXLINE(  71)			return null();
            		}
HXDLIN(  71)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Font_obj,fromFile,return )

 ::lime::app::Future Font_obj::loadFromBytes( ::openfl::utils::ByteArrayData bytes){
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            		 ::lime::app::Future _hx_run( ::lime::text::Font limeFont){
            			HX_GC_STACKFRAME(&_hx_pos_bf5c0d6977753a1b_81_loadFromBytes)
HXLINE(  83)			 ::openfl::text::Font font =  ::openfl::text::Font_obj::__alloc( HX_CTX ,null());
HXLINE(  84)			font->_hx___fromLimeFont(limeFont);
HXLINE(  86)			return ::lime::app::Future_obj::withValue(font);
            		}
            		HX_END_LOCAL_FUNC1(return)

            	HX_STACKFRAME(&_hx_pos_bf5c0d6977753a1b_81_loadFromBytes)
HXDLIN(  81)		return ::lime::text::Font_obj::loadFromBytes(::openfl::utils::_ByteArray::ByteArray_Impl__obj::toArrayBuffer(bytes))->then( ::Dynamic(new _hx_Closure_0()));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Font_obj,loadFromBytes,return )

 ::lime::app::Future Font_obj::loadFromFile(::String path){
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            		 ::lime::app::Future _hx_run( ::lime::text::Font limeFont){
            			HX_GC_STACKFRAME(&_hx_pos_bf5c0d6977753a1b_95_loadFromFile)
HXLINE(  97)			 ::openfl::text::Font font =  ::openfl::text::Font_obj::__alloc( HX_CTX ,null());
HXLINE(  98)			font->_hx___fromLimeFont(limeFont);
HXLINE( 100)			return ::lime::app::Future_obj::withValue(font);
            		}
            		HX_END_LOCAL_FUNC1(return)

            	HX_STACKFRAME(&_hx_pos_bf5c0d6977753a1b_95_loadFromFile)
HXDLIN(  95)		return ::lime::text::Font_obj::loadFromFile(path)->then( ::Dynamic(new _hx_Closure_0()));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Font_obj,loadFromFile,return )

 ::lime::app::Future Font_obj::loadFromName(::String path){
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            		 ::lime::app::Future _hx_run( ::lime::text::Font limeFont){
            			HX_GC_STACKFRAME(&_hx_pos_bf5c0d6977753a1b_109_loadFromName)
HXLINE( 111)			 ::openfl::text::Font font =  ::openfl::text::Font_obj::__alloc( HX_CTX ,null());
HXLINE( 112)			font->_hx___fromLimeFont(limeFont);
HXLINE( 114)			return ::lime::app::Future_obj::withValue(font);
            		}
            		HX_END_LOCAL_FUNC1(return)

            	HX_STACKFRAME(&_hx_pos_bf5c0d6977753a1b_109_loadFromName)
HXDLIN( 109)		return ::lime::text::Font_obj::loadFromName(path)->then( ::Dynamic(new _hx_Closure_0()));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Font_obj,loadFromName,return )

void Font_obj::registerFont(hx::Class font){
            	HX_STACKFRAME(&_hx_pos_bf5c0d6977753a1b_121_registerFont)
HXLINE( 123)		 ::openfl::text::Font instance = hx::TCast<  ::openfl::text::Font >::cast(::Type_obj::createInstance(font,::cpp::VirtualArray_obj::__new(0)));
HXLINE( 125)		if (hx::IsNotNull( instance )) {
HXLINE( 133)			::openfl::text::Font_obj::_hx___registeredFonts->push(instance);
HXLINE( 134)			::openfl::text::Font_obj::_hx___fontByName->set(instance->name,instance);
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Font_obj,registerFont,(void))


hx::ObjectPtr< Font_obj > Font_obj::__new(::String name) {
	hx::ObjectPtr< Font_obj > __this = new Font_obj();
	__this->__construct(name);
	return __this;
}

hx::ObjectPtr< Font_obj > Font_obj::__alloc(hx::Ctx *_hx_ctx,::String name) {
	Font_obj *__this = (Font_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Font_obj), true, "openfl.text.Font"));
	*(void **)__this = Font_obj::_hx_vtable;
	__this->__construct(name);
	return __this;
}

Font_obj::Font_obj()
{
}

void Font_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Font);
	HX_MARK_MEMBER_NAME(fontStyle,"fontStyle");
	HX_MARK_MEMBER_NAME(fontType,"fontType");
	HX_MARK_MEMBER_NAME(_hx___initialized,"__initialized");
	 ::lime::text::Font_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Font_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(fontStyle,"fontStyle");
	HX_VISIT_MEMBER_NAME(fontType,"fontType");
	HX_VISIT_MEMBER_NAME(_hx___initialized,"__initialized");
	 ::lime::text::Font_obj::__Visit(HX_VISIT_ARG);
}

hx::Val Font_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"fontName") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_fontName() ); }
		if (HX_FIELD_EQ(inName,"fontType") ) { return hx::Val( fontType ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"fontStyle") ) { return hx::Val( fontStyle ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"__initialize") ) { return hx::Val( _hx___initialize_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_fontName") ) { return hx::Val( get_fontName_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_fontName") ) { return hx::Val( set_fontName_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"__initialized") ) { return hx::Val( _hx___initialized ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"__fromLimeFont") ) { return hx::Val( _hx___fromLimeFont_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool Font_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"fromFile") ) { outValue = fromFile_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"fromBytes") ) { outValue = fromBytes_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"__fontByName") ) { outValue = ( _hx___fontByName ); return true; }
		if (HX_FIELD_EQ(inName,"loadFromFile") ) { outValue = loadFromFile_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"loadFromName") ) { outValue = loadFromName_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"registerFont") ) { outValue = registerFont_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"loadFromBytes") ) { outValue = loadFromBytes_dyn(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"enumerateFonts") ) { outValue = enumerateFonts_dyn(); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"__registeredFonts") ) { outValue = ( _hx___registeredFonts ); return true; }
	}
	return false;
}

hx::Val Font_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"fontName") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_fontName(inValue.Cast< ::String >()) ); }
		if (HX_FIELD_EQ(inName,"fontType") ) { fontType=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"fontStyle") ) { fontStyle=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"__initialized") ) { _hx___initialized=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool Font_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 12:
		if (HX_FIELD_EQ(inName,"__fontByName") ) { _hx___fontByName=ioValue.Cast<  ::haxe::ds::StringMap >(); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"__registeredFonts") ) { _hx___registeredFonts=ioValue.Cast< ::Array< ::Dynamic> >(); return true; }
	}
	return false;
}

void Font_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("fontName","\xba","\x8f","\x7d","\xcb"));
	outFields->push(HX_HCSTRING("fontStyle","\xe2","\x48","\xf9","\x2f"));
	outFields->push(HX_HCSTRING("fontType","\x29","\x10","\x87","\xcf"));
	outFields->push(HX_HCSTRING("__initialized","\xf4","\x35","\x88","\x7f"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Font_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(Font_obj,fontStyle),HX_HCSTRING("fontStyle","\xe2","\x48","\xf9","\x2f")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(Font_obj,fontType),HX_HCSTRING("fontType","\x29","\x10","\x87","\xcf")},
	{hx::fsBool,(int)offsetof(Font_obj,_hx___initialized),HX_HCSTRING("__initialized","\xf4","\x35","\x88","\x7f")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo Font_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(void *) &Font_obj::_hx___fontByName,HX_HCSTRING("__fontByName","\x11","\x3e","\x35","\xfb")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(void *) &Font_obj::_hx___registeredFonts,HX_HCSTRING("__registeredFonts","\xc2","\x83","\x84","\x64")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String Font_obj_sMemberFields[] = {
	HX_HCSTRING("fontStyle","\xe2","\x48","\xf9","\x2f"),
	HX_HCSTRING("fontType","\x29","\x10","\x87","\xcf"),
	HX_HCSTRING("__initialized","\xf4","\x35","\x88","\x7f"),
	HX_HCSTRING("__fromLimeFont","\x2e","\xae","\x65","\xdb"),
	HX_HCSTRING("__initialize","\x70","\xac","\x4e","\x25"),
	HX_HCSTRING("get_fontName","\xc3","\x43","\x97","\x80"),
	HX_HCSTRING("set_fontName","\x37","\x67","\x90","\x95"),
	::String(null()) };

static void Font_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Font_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(Font_obj::_hx___fontByName,"__fontByName");
	HX_MARK_MEMBER_NAME(Font_obj::_hx___registeredFonts,"__registeredFonts");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Font_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Font_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(Font_obj::_hx___fontByName,"__fontByName");
	HX_VISIT_MEMBER_NAME(Font_obj::_hx___registeredFonts,"__registeredFonts");
};

#endif

hx::Class Font_obj::__mClass;

static ::String Font_obj_sStaticFields[] = {
	HX_HCSTRING("__fontByName","\x11","\x3e","\x35","\xfb"),
	HX_HCSTRING("__registeredFonts","\xc2","\x83","\x84","\x64"),
	HX_HCSTRING("enumerateFonts","\x00","\x4a","\xcc","\xfc"),
	HX_HCSTRING("fromBytes","\xa1","\xf2","\x20","\x72"),
	HX_HCSTRING("fromFile","\x06","\x9d","\x87","\xa1"),
	HX_HCSTRING("loadFromBytes","\x9b","\xc3","\x86","\xf4"),
	HX_HCSTRING("loadFromFile","\x4c","\x89","\xf0","\x5a"),
	HX_HCSTRING("loadFromName","\x1b","\x2d","\x34","\x60"),
	HX_HCSTRING("registerFont","\xd2","\x9d","\xaf","\xbf"),
	::String(null())
};

void Font_obj::__register()
{
	hx::Object *dummy = new Font_obj;
	Font_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("openfl.text.Font","\xf2","\x5a","\x54","\x21");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Font_obj::__GetStatic;
	__mClass->mSetStaticField = &Font_obj::__SetStatic;
	__mClass->mMarkFunc = Font_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Font_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Font_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Font_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Font_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Font_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Font_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Font_obj::__boot()
{
{
            	HX_GC_STACKFRAME(&_hx_pos_bf5c0d6977753a1b_22_boot)
HXDLIN(  22)		_hx___fontByName =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
            	}
{
            	HX_STACKFRAME(&_hx_pos_bf5c0d6977753a1b_23_boot)
HXDLIN(  23)		_hx___registeredFonts = ::Array_obj< ::Dynamic>::__new();
            	}
}

} // end namespace openfl
} // end namespace text
