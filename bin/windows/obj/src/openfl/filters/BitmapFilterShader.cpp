// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_openfl_display_Shader
#include <openfl/display/Shader.h>
#endif
#ifndef INCLUDED_openfl_display_ShaderInput_openfl_display_BitmapData
#include <openfl/display/ShaderInput_openfl_display_BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_ShaderParameter_Float
#include <openfl/display/ShaderParameter_Float.h>
#endif
#ifndef INCLUDED_openfl_filters_BitmapFilterShader
#include <openfl/filters/BitmapFilterShader.h>
#endif
#ifndef INCLUDED_openfl_utils_ByteArrayData
#include <openfl/utils/ByteArrayData.h>
#endif
#ifndef INCLUDED_openfl_utils_IDataInput
#include <openfl/utils/IDataInput.h>
#endif
#ifndef INCLUDED_openfl_utils_IDataOutput
#include <openfl/utils/IDataOutput.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_064cc14bbb4441a0_93_new,"openfl.filters.BitmapFilterShader","new",0xcb76b60f,"openfl.filters.BitmapFilterShader.new","openfl/filters/BitmapFilterShader.hx",93,0x7f5a8bff)
namespace openfl{
namespace filters{

void BitmapFilterShader_obj::__construct( ::openfl::utils::ByteArrayData code){
            	HX_STACKFRAME(&_hx_pos_064cc14bbb4441a0_93_new)
HXLINE( 202)		if (hx::IsNull( this->_hx___glFragmentSource )) {
HXLINE( 202)			this->_hx___glFragmentSource = HX_("varying vec2 openfl_TextureCoordv;\n\t\t\n\t\tuniform sampler2D openfl_Texture;\n\t\tuniform vec2 openfl_TextureSize;\n\t\t\n\t\tvoid main(void) {\n\t\t\t\n\t\t\tgl_FragColor = texture2D (openfl_Texture, openfl_TextureCoordv);\n\t\t\t\n\t\t}",04,9b,73,30);
            		}
HXLINE( 201)		if (hx::IsNull( this->_hx___glVertexSource )) {
HXLINE( 201)			this->_hx___glVertexSource = HX_("attribute vec4 openfl_Position;\n\t\tattribute vec2 openfl_TextureCoord;\n\t\t\n\t\tvarying vec2 openfl_TextureCoordv;\n\t\t\n\t\tuniform mat4 openfl_Matrix;\n\t\tuniform vec2 openfl_TextureSize;\n\t\t\n\t\tvoid main(void) {\n\t\t\t\n\t\t\topenfl_TextureCoordv = openfl_TextureCoord;\n\t\t\n\t\tgl_Position = openfl_Matrix * openfl_Position;\n\t\t\t\n\t\t}",70,21,c0,11);
            		}
HXLINE(  95)		super::__construct(code);
HXLINE(   1)		this->_hx___isGenerated = true;
HXDLIN(   1)		this->_hx___initGL();
            	}

Dynamic BitmapFilterShader_obj::__CreateEmpty() { return new BitmapFilterShader_obj; }

void *BitmapFilterShader_obj::_hx_vtable = 0;

Dynamic BitmapFilterShader_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< BitmapFilterShader_obj > _hx_result = new BitmapFilterShader_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool BitmapFilterShader_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x03978973) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x03978973;
	} else {
		return inClassId==(int)0x676ab1f7;
	}
}


hx::ObjectPtr< BitmapFilterShader_obj > BitmapFilterShader_obj::__new( ::openfl::utils::ByteArrayData code) {
	hx::ObjectPtr< BitmapFilterShader_obj > __this = new BitmapFilterShader_obj();
	__this->__construct(code);
	return __this;
}

hx::ObjectPtr< BitmapFilterShader_obj > BitmapFilterShader_obj::__alloc(hx::Ctx *_hx_ctx, ::openfl::utils::ByteArrayData code) {
	BitmapFilterShader_obj *__this = (BitmapFilterShader_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(BitmapFilterShader_obj), true, "openfl.filters.BitmapFilterShader"));
	*(void **)__this = BitmapFilterShader_obj::_hx_vtable;
	__this->__construct(code);
	return __this;
}

BitmapFilterShader_obj::BitmapFilterShader_obj()
{
}

void BitmapFilterShader_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(BitmapFilterShader);
	HX_MARK_MEMBER_NAME(openfl_Position,"openfl_Position");
	HX_MARK_MEMBER_NAME(openfl_TextureCoord,"openfl_TextureCoord");
	HX_MARK_MEMBER_NAME(openfl_Matrix,"openfl_Matrix");
	HX_MARK_MEMBER_NAME(openfl_TextureSize,"openfl_TextureSize");
	HX_MARK_MEMBER_NAME(openfl_Texture,"openfl_Texture");
	 ::openfl::display::Shader_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void BitmapFilterShader_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(openfl_Position,"openfl_Position");
	HX_VISIT_MEMBER_NAME(openfl_TextureCoord,"openfl_TextureCoord");
	HX_VISIT_MEMBER_NAME(openfl_Matrix,"openfl_Matrix");
	HX_VISIT_MEMBER_NAME(openfl_TextureSize,"openfl_TextureSize");
	HX_VISIT_MEMBER_NAME(openfl_Texture,"openfl_Texture");
	 ::openfl::display::Shader_obj::__Visit(HX_VISIT_ARG);
}

hx::Val BitmapFilterShader_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 13:
		if (HX_FIELD_EQ(inName,"openfl_Matrix") ) { return hx::Val( openfl_Matrix ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"openfl_Texture") ) { return hx::Val( openfl_Texture ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"openfl_Position") ) { return hx::Val( openfl_Position ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"openfl_TextureSize") ) { return hx::Val( openfl_TextureSize ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"openfl_TextureCoord") ) { return hx::Val( openfl_TextureCoord ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val BitmapFilterShader_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 13:
		if (HX_FIELD_EQ(inName,"openfl_Matrix") ) { openfl_Matrix=inValue.Cast<  ::openfl::display::ShaderParameter_Float >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"openfl_Texture") ) { openfl_Texture=inValue.Cast<  ::openfl::display::ShaderInput_openfl_display_BitmapData >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"openfl_Position") ) { openfl_Position=inValue.Cast<  ::openfl::display::ShaderParameter_Float >(); return inValue; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"openfl_TextureSize") ) { openfl_TextureSize=inValue.Cast<  ::openfl::display::ShaderParameter_Float >(); return inValue; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"openfl_TextureCoord") ) { openfl_TextureCoord=inValue.Cast<  ::openfl::display::ShaderParameter_Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void BitmapFilterShader_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("openfl_Position","\x98","\xfe","\x6c","\xee"));
	outFields->push(HX_HCSTRING("openfl_TextureCoord","\x49","\xe9","\x27","\xe8"));
	outFields->push(HX_HCSTRING("openfl_Matrix","\x70","\xea","\x41","\x06"));
	outFields->push(HX_HCSTRING("openfl_TextureSize","\xad","\x60","\x72","\x29"));
	outFields->push(HX_HCSTRING("openfl_Texture","\xcc","\xbd","\xe4","\x7e"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo BitmapFilterShader_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::openfl::display::ShaderParameter_Float*/ ,(int)offsetof(BitmapFilterShader_obj,openfl_Position),HX_HCSTRING("openfl_Position","\x98","\xfe","\x6c","\xee")},
	{hx::fsObject /*::openfl::display::ShaderParameter_Float*/ ,(int)offsetof(BitmapFilterShader_obj,openfl_TextureCoord),HX_HCSTRING("openfl_TextureCoord","\x49","\xe9","\x27","\xe8")},
	{hx::fsObject /*::openfl::display::ShaderParameter_Float*/ ,(int)offsetof(BitmapFilterShader_obj,openfl_Matrix),HX_HCSTRING("openfl_Matrix","\x70","\xea","\x41","\x06")},
	{hx::fsObject /*::openfl::display::ShaderParameter_Float*/ ,(int)offsetof(BitmapFilterShader_obj,openfl_TextureSize),HX_HCSTRING("openfl_TextureSize","\xad","\x60","\x72","\x29")},
	{hx::fsObject /*::openfl::display::ShaderInput_openfl_display_BitmapData*/ ,(int)offsetof(BitmapFilterShader_obj,openfl_Texture),HX_HCSTRING("openfl_Texture","\xcc","\xbd","\xe4","\x7e")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *BitmapFilterShader_obj_sStaticStorageInfo = 0;
#endif

static ::String BitmapFilterShader_obj_sMemberFields[] = {
	HX_HCSTRING("openfl_Position","\x98","\xfe","\x6c","\xee"),
	HX_HCSTRING("openfl_TextureCoord","\x49","\xe9","\x27","\xe8"),
	HX_HCSTRING("openfl_Matrix","\x70","\xea","\x41","\x06"),
	HX_HCSTRING("openfl_TextureSize","\xad","\x60","\x72","\x29"),
	HX_HCSTRING("openfl_Texture","\xcc","\xbd","\xe4","\x7e"),
	::String(null()) };

static void BitmapFilterShader_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(BitmapFilterShader_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void BitmapFilterShader_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(BitmapFilterShader_obj::__mClass,"__mClass");
};

#endif

hx::Class BitmapFilterShader_obj::__mClass;

void BitmapFilterShader_obj::__register()
{
	hx::Object *dummy = new BitmapFilterShader_obj;
	BitmapFilterShader_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("openfl.filters.BitmapFilterShader","\x9d","\x02","\x29","\x31");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = BitmapFilterShader_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(BitmapFilterShader_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< BitmapFilterShader_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = BitmapFilterShader_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = BitmapFilterShader_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = BitmapFilterShader_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace openfl
} // end namespace filters
