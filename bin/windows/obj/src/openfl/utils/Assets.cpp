// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_lime_app_Future
#include <lime/app/Future.h>
#endif
#ifndef INCLUDED_lime_app_Promise_openfl_display_BitmapData
#include <lime/app/Promise_openfl_display_BitmapData.h>
#endif
#ifndef INCLUDED_lime_app_Promise_openfl_display_MovieClip
#include <lime/app/Promise_openfl_display_MovieClip.h>
#endif
#ifndef INCLUDED_lime_app_Promise_openfl_media_Sound
#include <lime/app/Promise_openfl_media_Sound.h>
#endif
#ifndef INCLUDED_lime_app_Promise_openfl_text_Font
#include <lime/app/Promise_openfl_text_Font.h>
#endif
#ifndef INCLUDED_lime_app_Promise_openfl_utils_ByteArray
#include <lime/app/Promise_openfl_utils_ByteArray.h>
#endif
#ifndef INCLUDED_lime_app__Event_Void_Void
#include <lime/app/_Event_Void_Void.h>
#endif
#ifndef INCLUDED_lime_graphics_Image
#include <lime/graphics/Image.h>
#endif
#ifndef INCLUDED_lime_media_AudioBuffer
#include <lime/media/AudioBuffer.h>
#endif
#ifndef INCLUDED_lime_text_Font
#include <lime/text/Font.h>
#endif
#ifndef INCLUDED_lime_utils_AssetLibrary
#include <lime/utils/AssetLibrary.h>
#endif
#ifndef INCLUDED_lime_utils_Assets
#include <lime/utils/Assets.h>
#endif
#ifndef INCLUDED_lime_utils_Log
#include <lime/utils/Log.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_MovieClip
#include <openfl/display/MovieClip.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_media_Sound
#include <openfl/media/Sound.h>
#endif
#ifndef INCLUDED_openfl_text_Font
#include <openfl/text/Font.h>
#endif
#ifndef INCLUDED_openfl_utils_AssetCache
#include <openfl/utils/AssetCache.h>
#endif
#ifndef INCLUDED_openfl_utils_AssetLibrary
#include <openfl/utils/AssetLibrary.h>
#endif
#ifndef INCLUDED_openfl_utils_Assets
#include <openfl/utils/Assets.h>
#endif
#ifndef INCLUDED_openfl_utils_ByteArrayData
#include <openfl/utils/ByteArrayData.h>
#endif
#ifndef INCLUDED_openfl_utils_IAssetCache
#include <openfl/utils/IAssetCache.h>
#endif
#ifndef INCLUDED_openfl_utils_IDataInput
#include <openfl/utils/IDataInput.h>
#endif
#ifndef INCLUDED_openfl_utils_IDataOutput
#include <openfl/utils/IDataOutput.h>
#endif
#ifndef INCLUDED_openfl_utils__ByteArray_ByteArray_Impl_
#include <openfl/utils/_ByteArray/ByteArray_Impl_.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_4176bcd8576208c2_37_addEventListener,"openfl.utils.Assets","addEventListener",0xdf923d5d,"openfl.utils.Assets.addEventListener","openfl/utils/Assets.hx",37,0x4e64919e)
HX_LOCAL_STACK_FRAME(_hx_pos_4176bcd8576208c2_52_dispatchEvent,"openfl.utils.Assets","dispatchEvent",0xec96fb70,"openfl.utils.Assets.dispatchEvent","openfl/utils/Assets.hx",52,0x4e64919e)
HX_LOCAL_STACK_FRAME(_hx_pos_4176bcd8576208c2_59_exists,"openfl.utils.Assets","exists",0x4d6bbb6c,"openfl.utils.Assets.exists","openfl/utils/Assets.hx",59,0x4e64919e)
HX_LOCAL_STACK_FRAME(_hx_pos_4176bcd8576208c2_64_getBitmapData,"openfl.utils.Assets","getBitmapData",0xb665465f,"openfl.utils.Assets.getBitmapData","openfl/utils/Assets.hx",64,0x4e64919e)
HX_LOCAL_STACK_FRAME(_hx_pos_4176bcd8576208c2_109_getBytes,"openfl.utils.Assets","getBytes",0xdb493985,"openfl.utils.Assets.getBytes","openfl/utils/Assets.hx",109,0x4e64919e)
HX_LOCAL_STACK_FRAME(_hx_pos_4176bcd8576208c2_114_getFont,"openfl.utils.Assets","getFont",0x62e14df5,"openfl.utils.Assets.getFont","openfl/utils/Assets.hx",114,0x4e64919e)
HX_LOCAL_STACK_FRAME(_hx_pos_4176bcd8576208c2_154_getLibrary,"openfl.utils.Assets","getLibrary",0x10a35295,"openfl.utils.Assets.getLibrary","openfl/utils/Assets.hx",154,0x4e64919e)
HX_LOCAL_STACK_FRAME(_hx_pos_4176bcd8576208c2_159_getMovieClip,"openfl.utils.Assets","getMovieClip",0xfd23c8ba,"openfl.utils.Assets.getMovieClip","openfl/utils/Assets.hx",159,0x4e64919e)
HX_LOCAL_STACK_FRAME(_hx_pos_4176bcd8576208c2_209_getMusic,"openfl.utils.Assets","getMusic",0x2e0c01bf,"openfl.utils.Assets.getMusic","openfl/utils/Assets.hx",209,0x4e64919e)
HX_LOCAL_STACK_FRAME(_hx_pos_4176bcd8576208c2_216_getPath,"openfl.utils.Assets","getPath",0x6972d5cb,"openfl.utils.Assets.getPath","openfl/utils/Assets.hx",216,0x4e64919e)
HX_LOCAL_STACK_FRAME(_hx_pos_4176bcd8576208c2_221_getSound,"openfl.utils.Assets","getSound",0x9e7dbde9,"openfl.utils.Assets.getSound","openfl/utils/Assets.hx",221,0x4e64919e)
HX_LOCAL_STACK_FRAME(_hx_pos_4176bcd8576208c2_266_getText,"openfl.utils.Assets","getText",0x6c1abcd3,"openfl.utils.Assets.getText","openfl/utils/Assets.hx",266,0x4e64919e)
HX_LOCAL_STACK_FRAME(_hx_pos_4176bcd8576208c2_273_hasEventListener,"openfl.utils.Assets","hasEventListener",0xfb186084,"openfl.utils.Assets.hasEventListener","openfl/utils/Assets.hx",273,0x4e64919e)
HX_LOCAL_STACK_FRAME(_hx_pos_4176bcd8576208c2_280_hasLibrary,"openfl.utils.Assets","hasLibrary",0x4bf5b451,"openfl.utils.Assets.hasLibrary","openfl/utils/Assets.hx",280,0x4e64919e)
HX_LOCAL_STACK_FRAME(_hx_pos_4176bcd8576208c2_285_isLocal,"openfl.utils.Assets","isLocal",0x6214ad91,"openfl.utils.Assets.isLocal","openfl/utils/Assets.hx",285,0x4e64919e)
HX_LOCAL_STACK_FRAME(_hx_pos_4176bcd8576208c2_346_isValidBitmapData,"openfl.utils.Assets","isValidBitmapData",0x6121917b,"openfl.utils.Assets.isValidBitmapData","openfl/utils/Assets.hx",346,0x4e64919e)
HX_LOCAL_STACK_FRAME(_hx_pos_4176bcd8576208c2_362_isValidSound,"openfl.utils.Assets","isValidSound",0x76dd484d,"openfl.utils.Assets.isValidSound","openfl/utils/Assets.hx",362,0x4e64919e)
HX_LOCAL_STACK_FRAME(_hx_pos_4176bcd8576208c2_376_list,"openfl.utils.Assets","list",0xcc5935ee,"openfl.utils.Assets.list","openfl/utils/Assets.hx",376,0x4e64919e)
HX_LOCAL_STACK_FRAME(_hx_pos_4176bcd8576208c2_404_loadBitmapData,"openfl.utils.Assets","loadBitmapData",0x102d6d0f,"openfl.utils.Assets.loadBitmapData","openfl/utils/Assets.hx",404,0x4e64919e)
HX_LOCAL_STACK_FRAME(_hx_pos_4176bcd8576208c2_381_loadBitmapData,"openfl.utils.Assets","loadBitmapData",0x102d6d0f,"openfl.utils.Assets.loadBitmapData","openfl/utils/Assets.hx",381,0x4e64919e)
HX_LOCAL_STACK_FRAME(_hx_pos_4176bcd8576208c2_440_loadBytes,"openfl.utils.Assets","loadBytes",0x39d290d5,"openfl.utils.Assets.loadBytes","openfl/utils/Assets.hx",440,0x4e64919e)
HX_LOCAL_STACK_FRAME(_hx_pos_4176bcd8576208c2_441_loadBytes,"openfl.utils.Assets","loadBytes",0x39d290d5,"openfl.utils.Assets.loadBytes","openfl/utils/Assets.hx",441,0x4e64919e)
HX_LOCAL_STACK_FRAME(_hx_pos_4176bcd8576208c2_442_loadBytes,"openfl.utils.Assets","loadBytes",0x39d290d5,"openfl.utils.Assets.loadBytes","openfl/utils/Assets.hx",442,0x4e64919e)
HX_LOCAL_STACK_FRAME(_hx_pos_4176bcd8576208c2_435_loadBytes,"openfl.utils.Assets","loadBytes",0x39d290d5,"openfl.utils.Assets.loadBytes","openfl/utils/Assets.hx",435,0x4e64919e)
HX_LOCAL_STACK_FRAME(_hx_pos_4176bcd8576208c2_464_loadFont,"openfl.utils.Assets","loadFont",0x723a50a5,"openfl.utils.Assets.loadFont","openfl/utils/Assets.hx",464,0x4e64919e)
HX_LOCAL_STACK_FRAME(_hx_pos_4176bcd8576208c2_449_loadFont,"openfl.utils.Assets","loadFont",0x723a50a5,"openfl.utils.Assets.loadFont","openfl/utils/Assets.hx",449,0x4e64919e)
HX_LOCAL_STACK_FRAME(_hx_pos_4176bcd8576208c2_492_loadLibrary,"openfl.utils.Assets","loadLibrary",0x25ad1de5,"openfl.utils.Assets.loadLibrary","openfl/utils/Assets.hx",492,0x4e64919e)
HX_LOCAL_STACK_FRAME(_hx_pos_4176bcd8576208c2_529_loadMusic,"openfl.utils.Assets","loadMusic",0x8c95590f,"openfl.utils.Assets.loadMusic","openfl/utils/Assets.hx",529,0x4e64919e)
HX_LOCAL_STACK_FRAME(_hx_pos_4176bcd8576208c2_519_loadMusic,"openfl.utils.Assets","loadMusic",0x8c95590f,"openfl.utils.Assets.loadMusic","openfl/utils/Assets.hx",519,0x4e64919e)
HX_LOCAL_STACK_FRAME(_hx_pos_4176bcd8576208c2_564_loadMovieClip,"openfl.utils.Assets","loadMovieClip",0xc0b3080a,"openfl.utils.Assets.loadMovieClip","openfl/utils/Assets.hx",564,0x4e64919e)
HX_LOCAL_STACK_FRAME(_hx_pos_4176bcd8576208c2_612_loadSound,"openfl.utils.Assets","loadSound",0xfd071539,"openfl.utils.Assets.loadSound","openfl/utils/Assets.hx",612,0x4e64919e)
HX_LOCAL_STACK_FRAME(_hx_pos_4176bcd8576208c2_604_loadSound,"openfl.utils.Assets","loadSound",0xfd071539,"openfl.utils.Assets.loadSound","openfl/utils/Assets.hx",604,0x4e64919e)
HX_LOCAL_STACK_FRAME(_hx_pos_4176bcd8576208c2_640_loadText,"openfl.utils.Assets","loadText",0x7b73bf83,"openfl.utils.Assets.loadText","openfl/utils/Assets.hx",640,0x4e64919e)
HX_LOCAL_STACK_FRAME(_hx_pos_4176bcd8576208c2_655_registerLibrary,"openfl.utils.Assets","registerLibrary",0xb100bb48,"openfl.utils.Assets.registerLibrary","openfl/utils/Assets.hx",655,0x4e64919e)
HX_LOCAL_STACK_FRAME(_hx_pos_4176bcd8576208c2_662_removeEventListener,"openfl.utils.Assets","removeEventListener",0xbaaab03a,"openfl.utils.Assets.removeEventListener","openfl/utils/Assets.hx",662,0x4e64919e)
HX_LOCAL_STACK_FRAME(_hx_pos_4176bcd8576208c2_669_resolveClass,"openfl.utils.Assets","resolveClass",0x568fe73c,"openfl.utils.Assets.resolveClass","openfl/utils/Assets.hx",669,0x4e64919e)
HX_LOCAL_STACK_FRAME(_hx_pos_4176bcd8576208c2_674_resolveEnum,"openfl.utils.Assets","resolveEnum",0xf3f0c87d,"openfl.utils.Assets.resolveEnum","openfl/utils/Assets.hx",674,0x4e64919e)
HX_LOCAL_STACK_FRAME(_hx_pos_4176bcd8576208c2_695_unloadLibrary,"openfl.utils.Assets","unloadLibrary",0x577a902c,"openfl.utils.Assets.unloadLibrary","openfl/utils/Assets.hx",695,0x4e64919e)
HX_LOCAL_STACK_FRAME(_hx_pos_4176bcd8576208c2_709_LimeAssets_onChange,"openfl.utils.Assets","LimeAssets_onChange",0xfa955f26,"openfl.utils.Assets.LimeAssets_onChange","openfl/utils/Assets.hx",709,0x4e64919e)
HX_LOCAL_STACK_FRAME(_hx_pos_4176bcd8576208c2_32_boot,"openfl.utils.Assets","boot",0xc5c19dc2,"openfl.utils.Assets.boot","openfl/utils/Assets.hx",32,0x4e64919e)
HX_LOCAL_STACK_FRAME(_hx_pos_4176bcd8576208c2_34_boot,"openfl.utils.Assets","boot",0xc5c19dc2,"openfl.utils.Assets.boot","openfl/utils/Assets.hx",34,0x4e64919e)
namespace openfl{
namespace utils{

void Assets_obj::__construct() { }

Dynamic Assets_obj::__CreateEmpty() { return new Assets_obj; }

void *Assets_obj::_hx_vtable = 0;

Dynamic Assets_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Assets_obj > _hx_result = new Assets_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Assets_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x45768360;
}

::Dynamic Assets_obj::cache;

 ::openfl::events::EventDispatcher Assets_obj::dispatcher;

void Assets_obj::addEventListener(::String type, ::Dynamic listener,hx::Null< bool >  __o_useCapture,hx::Null< int >  __o_priority,hx::Null< bool >  __o_useWeakReference){
bool useCapture = __o_useCapture.Default(false);
int priority = __o_priority.Default(0);
bool useWeakReference = __o_useWeakReference.Default(false);
            	HX_STACKFRAME(&_hx_pos_4176bcd8576208c2_37_addEventListener)
HXLINE(  39)		if (!(::lime::utils::Assets_obj::onChange->has(::openfl::utils::Assets_obj::LimeAssets_onChange_dyn()))) {
HXLINE(  41)			::lime::utils::Assets_obj::onChange->add(::openfl::utils::Assets_obj::LimeAssets_onChange_dyn(),null(),null());
            		}
HXLINE(  45)		::openfl::utils::Assets_obj::dispatcher->addEventListener(type,listener,useCapture,priority,useWeakReference);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(Assets_obj,addEventListener,(void))

bool Assets_obj::dispatchEvent( ::openfl::events::Event event){
            	HX_STACKFRAME(&_hx_pos_4176bcd8576208c2_52_dispatchEvent)
HXDLIN(  52)		return ::openfl::utils::Assets_obj::dispatcher->dispatchEvent(event);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Assets_obj,dispatchEvent,return )

bool Assets_obj::exists(::String id,::String type){
            	HX_STACKFRAME(&_hx_pos_4176bcd8576208c2_59_exists)
HXDLIN(  59)		return ::lime::utils::Assets_obj::exists(id,type);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Assets_obj,exists,return )

 ::openfl::display::BitmapData Assets_obj::getBitmapData(::String id,hx::Null< bool >  __o_useCache){
bool useCache = __o_useCache.Default(true);
            	HX_STACKFRAME(&_hx_pos_4176bcd8576208c2_64_getBitmapData)
HXLINE(  68)		bool _hx_tmp;
HXDLIN(  68)		bool _hx_tmp1;
HXDLIN(  68)		if (useCache) {
HXLINE(  68)			_hx_tmp1 = ::openfl::utils::IAssetCache_obj::get_enabled(::openfl::utils::Assets_obj::cache);
            		}
            		else {
HXLINE(  68)			_hx_tmp1 = false;
            		}
HXDLIN(  68)		if (_hx_tmp1) {
HXLINE(  68)			_hx_tmp = ::openfl::utils::IAssetCache_obj::hasBitmapData(::openfl::utils::Assets_obj::cache,id);
            		}
            		else {
HXLINE(  68)			_hx_tmp = false;
            		}
HXDLIN(  68)		if (_hx_tmp) {
HXLINE(  70)			 ::openfl::display::BitmapData bitmapData = ::openfl::utils::IAssetCache_obj::getBitmapData(::openfl::utils::Assets_obj::cache,id);
HXLINE(  72)			if (::openfl::utils::Assets_obj::isValidBitmapData(bitmapData)) {
HXLINE(  74)				return bitmapData;
            			}
            		}
HXLINE(  80)		 ::lime::graphics::Image image = ::lime::utils::Assets_obj::getImage(id,false);
HXLINE(  82)		if (hx::IsNotNull( image )) {
HXLINE(  87)			 ::openfl::display::BitmapData bitmapData1 = ::openfl::display::BitmapData_obj::fromImage(image,null());
HXLINE(  90)			bool _hx_tmp2;
HXDLIN(  90)			if (useCache) {
HXLINE(  90)				_hx_tmp2 = ::openfl::utils::IAssetCache_obj::get_enabled(::openfl::utils::Assets_obj::cache);
            			}
            			else {
HXLINE(  90)				_hx_tmp2 = false;
            			}
HXDLIN(  90)			if (_hx_tmp2) {
HXLINE(  92)				::openfl::utils::IAssetCache_obj::setBitmapData(::openfl::utils::Assets_obj::cache,id,bitmapData1);
            			}
HXLINE(  96)			return bitmapData1;
            		}
HXLINE( 102)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Assets_obj,getBitmapData,return )

 ::openfl::utils::ByteArrayData Assets_obj::getBytes(::String id){
            	HX_STACKFRAME(&_hx_pos_4176bcd8576208c2_109_getBytes)
HXDLIN( 109)		return ::openfl::utils::_ByteArray::ByteArray_Impl__obj::fromBytes(::lime::utils::Assets_obj::getBytes(id));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Assets_obj,getBytes,return )

 ::openfl::text::Font Assets_obj::getFont(::String id,hx::Null< bool >  __o_useCache){
bool useCache = __o_useCache.Default(true);
            	HX_GC_STACKFRAME(&_hx_pos_4176bcd8576208c2_114_getFont)
HXLINE( 118)		bool _hx_tmp;
HXDLIN( 118)		bool _hx_tmp1;
HXDLIN( 118)		if (useCache) {
HXLINE( 118)			_hx_tmp1 = ::openfl::utils::IAssetCache_obj::get_enabled(::openfl::utils::Assets_obj::cache);
            		}
            		else {
HXLINE( 118)			_hx_tmp1 = false;
            		}
HXDLIN( 118)		if (_hx_tmp1) {
HXLINE( 118)			_hx_tmp = ::openfl::utils::IAssetCache_obj::hasFont(::openfl::utils::Assets_obj::cache,id);
            		}
            		else {
HXLINE( 118)			_hx_tmp = false;
            		}
HXDLIN( 118)		if (_hx_tmp) {
HXLINE( 120)			return ::openfl::utils::IAssetCache_obj::getFont(::openfl::utils::Assets_obj::cache,id);
            		}
HXLINE( 124)		 ::lime::text::Font limeFont = ::lime::utils::Assets_obj::getFont(id,false);
HXLINE( 126)		if (hx::IsNotNull( limeFont )) {
HXLINE( 131)			 ::openfl::text::Font font =  ::openfl::text::Font_obj::__alloc( HX_CTX ,null());
HXLINE( 132)			font->_hx___fromLimeFont(limeFont);
HXLINE( 135)			bool _hx_tmp2;
HXDLIN( 135)			if (useCache) {
HXLINE( 135)				_hx_tmp2 = ::openfl::utils::IAssetCache_obj::get_enabled(::openfl::utils::Assets_obj::cache);
            			}
            			else {
HXLINE( 135)				_hx_tmp2 = false;
            			}
HXDLIN( 135)			if (_hx_tmp2) {
HXLINE( 137)				::openfl::utils::IAssetCache_obj::setFont(::openfl::utils::Assets_obj::cache,id,font);
            			}
HXLINE( 141)			return font;
            		}
HXLINE( 147)		return  ::openfl::text::Font_obj::__alloc( HX_CTX ,null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Assets_obj,getFont,return )

 ::lime::utils::AssetLibrary Assets_obj::getLibrary(::String name){
            	HX_STACKFRAME(&_hx_pos_4176bcd8576208c2_154_getLibrary)
HXDLIN( 154)		return ::lime::utils::Assets_obj::getLibrary(name);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Assets_obj,getLibrary,return )

 ::openfl::display::MovieClip Assets_obj::getMovieClip(::String id){
            	HX_STACKFRAME(&_hx_pos_4176bcd8576208c2_159_getMovieClip)
HXLINE( 163)		::String libraryName = id.substring((int)0,id.indexOf(HX_(":",3a,00,00,00),null()));
HXLINE( 164)		::String symbolName = id.substr((id.indexOf(HX_(":",3a,00,00,00),null()) + (int)1),null());
HXLINE( 165)		 ::lime::utils::AssetLibrary limeLibrary = ::openfl::utils::Assets_obj::getLibrary(libraryName);
HXLINE( 167)		if (hx::IsNotNull( limeLibrary )) {
HXLINE( 169)			if (::Std_obj::is(limeLibrary,hx::ClassOf< ::openfl::utils::AssetLibrary >())) {
HXLINE( 171)				 ::openfl::utils::AssetLibrary library = ( ( ::openfl::utils::AssetLibrary)(limeLibrary) );
HXLINE( 173)				if (library->exists(symbolName,HX_("MOVIE_CLIP",1f,e1,aa,77))) {
HXLINE( 175)					if (library->isLocal(symbolName,HX_("MOVIE_CLIP",1f,e1,aa,77))) {
HXLINE( 177)						return library->getMovieClip(symbolName);
            					}
            					else {
HXLINE( 181)						::lime::utils::Log_obj::error(((HX_("MovieClip asset \"",52,88,7e,e3) + id) + HX_("\" exists, but only asynchronously",dc,ca,f2,dd)),hx::SourceInfo(HX_("Assets.hx",fb,cd,c6,67),181,HX_("openfl.utils.Assets",de,b0,04,7c),HX_("getMovieClip",2a,9f,71,27)));
HXLINE( 182)						return null();
            					}
            				}
            			}
HXLINE( 190)			::lime::utils::Log_obj::error(((HX_("There is no MovieClip asset with an ID of \"",d0,88,de,8c) + id) + HX_("\"",22,00,00,00)),hx::SourceInfo(HX_("Assets.hx",fb,cd,c6,67),190,HX_("openfl.utils.Assets",de,b0,04,7c),HX_("getMovieClip",2a,9f,71,27)));
            		}
            		else {
HXLINE( 194)			::lime::utils::Log_obj::error(((HX_("There is no asset library named \"",a1,83,5f,51) + libraryName) + HX_("\"",22,00,00,00)),hx::SourceInfo(HX_("Assets.hx",fb,cd,c6,67),194,HX_("openfl.utils.Assets",de,b0,04,7c),HX_("getMovieClip",2a,9f,71,27)));
            		}
HXLINE( 200)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Assets_obj,getMovieClip,return )

 ::openfl::media::Sound Assets_obj::getMusic(::String id,hx::Null< bool >  __o_useCache){
bool useCache = __o_useCache.Default(true);
            	HX_STACKFRAME(&_hx_pos_4176bcd8576208c2_209_getMusic)
HXDLIN( 209)		return ::openfl::utils::Assets_obj::getSound(id,useCache);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Assets_obj,getMusic,return )

::String Assets_obj::getPath(::String id){
            	HX_STACKFRAME(&_hx_pos_4176bcd8576208c2_216_getPath)
HXDLIN( 216)		return ::lime::utils::Assets_obj::getPath(id);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Assets_obj,getPath,return )

 ::openfl::media::Sound Assets_obj::getSound(::String id,hx::Null< bool >  __o_useCache){
bool useCache = __o_useCache.Default(true);
            	HX_STACKFRAME(&_hx_pos_4176bcd8576208c2_221_getSound)
HXLINE( 225)		bool _hx_tmp;
HXDLIN( 225)		bool _hx_tmp1;
HXDLIN( 225)		if (useCache) {
HXLINE( 225)			_hx_tmp1 = ::openfl::utils::IAssetCache_obj::get_enabled(::openfl::utils::Assets_obj::cache);
            		}
            		else {
HXLINE( 225)			_hx_tmp1 = false;
            		}
HXDLIN( 225)		if (_hx_tmp1) {
HXLINE( 225)			_hx_tmp = ::openfl::utils::IAssetCache_obj::hasSound(::openfl::utils::Assets_obj::cache,id);
            		}
            		else {
HXLINE( 225)			_hx_tmp = false;
            		}
HXDLIN( 225)		if (_hx_tmp) {
HXLINE( 227)			 ::openfl::media::Sound sound = ::openfl::utils::IAssetCache_obj::getSound(::openfl::utils::Assets_obj::cache,id);
HXLINE( 229)			if (::openfl::utils::Assets_obj::isValidSound(sound)) {
HXLINE( 231)				return sound;
            			}
            		}
HXLINE( 237)		 ::lime::media::AudioBuffer buffer = ::lime::utils::Assets_obj::getAudioBuffer(id,false);
HXLINE( 239)		if (hx::IsNotNull( buffer )) {
HXLINE( 244)			 ::openfl::media::Sound sound1 = ::openfl::media::Sound_obj::fromAudioBuffer(buffer);
HXLINE( 247)			bool _hx_tmp2;
HXDLIN( 247)			if (useCache) {
HXLINE( 247)				_hx_tmp2 = ::openfl::utils::IAssetCache_obj::get_enabled(::openfl::utils::Assets_obj::cache);
            			}
            			else {
HXLINE( 247)				_hx_tmp2 = false;
            			}
HXDLIN( 247)			if (_hx_tmp2) {
HXLINE( 249)				::openfl::utils::IAssetCache_obj::setSound(::openfl::utils::Assets_obj::cache,id,sound1);
            			}
HXLINE( 253)			return sound1;
            		}
HXLINE( 259)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Assets_obj,getSound,return )

::String Assets_obj::getText(::String id){
            	HX_STACKFRAME(&_hx_pos_4176bcd8576208c2_266_getText)
HXDLIN( 266)		return ::lime::utils::Assets_obj::getText(id);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Assets_obj,getText,return )

bool Assets_obj::hasEventListener(::String type){
            	HX_STACKFRAME(&_hx_pos_4176bcd8576208c2_273_hasEventListener)
HXDLIN( 273)		return ::openfl::utils::Assets_obj::dispatcher->hasEventListener(type);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Assets_obj,hasEventListener,return )

bool Assets_obj::hasLibrary(::String name){
            	HX_STACKFRAME(&_hx_pos_4176bcd8576208c2_280_hasLibrary)
HXDLIN( 280)		return ::lime::utils::Assets_obj::hasLibrary(name);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Assets_obj,hasLibrary,return )

bool Assets_obj::isLocal(::String id,::String type,hx::Null< bool >  __o_useCache){
bool useCache = __o_useCache.Default(true);
            	HX_STACKFRAME(&_hx_pos_4176bcd8576208c2_285_isLocal)
HXLINE( 289)		bool _hx_tmp;
HXDLIN( 289)		if (useCache) {
HXLINE( 289)			_hx_tmp = ::openfl::utils::IAssetCache_obj::get_enabled(::openfl::utils::Assets_obj::cache);
            		}
            		else {
HXLINE( 289)			_hx_tmp = false;
            		}
HXDLIN( 289)		if (_hx_tmp) {
HXLINE( 291)			bool _hx_tmp1;
HXDLIN( 291)			if ((type != HX_("IMAGE",3b,57,57,3b))) {
HXLINE( 291)				_hx_tmp1 = hx::IsNull( type );
            			}
            			else {
HXLINE( 291)				_hx_tmp1 = true;
            			}
HXDLIN( 291)			if (_hx_tmp1) {
HXLINE( 293)				if (::openfl::utils::IAssetCache_obj::hasBitmapData(::openfl::utils::Assets_obj::cache,id)) {
HXLINE( 293)					return true;
            				}
            			}
HXLINE( 297)			bool _hx_tmp2;
HXDLIN( 297)			if ((type != HX_("FONT",cf,25,81,2e))) {
HXLINE( 297)				_hx_tmp2 = hx::IsNull( type );
            			}
            			else {
HXLINE( 297)				_hx_tmp2 = true;
            			}
HXDLIN( 297)			if (_hx_tmp2) {
HXLINE( 299)				if (::openfl::utils::IAssetCache_obj::hasFont(::openfl::utils::Assets_obj::cache,id)) {
HXLINE( 299)					return true;
            				}
            			}
HXLINE( 303)			bool _hx_tmp3;
HXDLIN( 303)			bool _hx_tmp4;
HXDLIN( 303)			if ((type != HX_("SOUND",af,c4,ba,fe))) {
HXLINE( 303)				_hx_tmp4 = (type == HX_("MUSIC",85,08,49,8e));
            			}
            			else {
HXLINE( 303)				_hx_tmp4 = true;
            			}
HXDLIN( 303)			if (!(_hx_tmp4)) {
HXLINE( 303)				_hx_tmp3 = hx::IsNull( type );
            			}
            			else {
HXLINE( 303)				_hx_tmp3 = true;
            			}
HXDLIN( 303)			if (_hx_tmp3) {
HXLINE( 305)				if (::openfl::utils::IAssetCache_obj::hasSound(::openfl::utils::Assets_obj::cache,id)) {
HXLINE( 305)					return true;
            				}
            			}
            		}
HXLINE( 311)		::String libraryName = id.substring((int)0,id.indexOf(HX_(":",3a,00,00,00),null()));
HXLINE( 312)		::String symbolName = id.substr((id.indexOf(HX_(":",3a,00,00,00),null()) + (int)1),null());
HXLINE( 313)		 ::lime::utils::AssetLibrary library = ::openfl::utils::Assets_obj::getLibrary(libraryName);
HXLINE( 315)		if (hx::IsNotNull( library )) {
HXLINE( 317)			return library->isLocal(symbolName,type);
            		}
HXLINE( 323)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Assets_obj,isLocal,return )

bool Assets_obj::isValidBitmapData( ::openfl::display::BitmapData bitmapData){
            	HX_STACKFRAME(&_hx_pos_4176bcd8576208c2_346_isValidBitmapData)
HXDLIN( 346)		return ((bool)hx::IsNotNull( bitmapData ) && (bool)hx::IsNotNull( bitmapData->image ));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Assets_obj,isValidBitmapData,return )

bool Assets_obj::isValidSound( ::openfl::media::Sound sound){
            	HX_STACKFRAME(&_hx_pos_4176bcd8576208c2_362_isValidSound)
HXDLIN( 362)		return true;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Assets_obj,isValidSound,return )

::Array< ::String > Assets_obj::list(::String type){
            	HX_STACKFRAME(&_hx_pos_4176bcd8576208c2_376_list)
HXDLIN( 376)		return ::lime::utils::Assets_obj::list(type);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Assets_obj,list,return )

 ::lime::app::Future Assets_obj::loadBitmapData(::String id, ::Dynamic __o_useCache){
            		HX_BEGIN_LOCAL_FUNC_S3(hx::LocalFunc,_hx_Closure_0,::String,id, ::lime::app::Promise_openfl_display_BitmapData,promise, ::Dynamic,useCache) HXARGC(1)
            		void _hx_run( ::lime::graphics::Image image){
            			HX_GC_STACKFRAME(&_hx_pos_4176bcd8576208c2_404_loadBitmapData)
HXLINE( 404)			if (hx::IsNotNull( image )) {
HXLINE( 409)				 ::openfl::display::BitmapData bitmapData1 = ::openfl::display::BitmapData_obj::fromImage(image,null());
HXLINE( 412)				bool _hx_tmp2;
HXDLIN( 412)				if (useCache) {
HXLINE( 412)					_hx_tmp2 = ::openfl::utils::IAssetCache_obj::get_enabled(::openfl::utils::Assets_obj::cache);
            				}
            				else {
HXLINE( 412)					_hx_tmp2 = false;
            				}
HXDLIN( 412)				if (_hx_tmp2) {
HXLINE( 414)					::openfl::utils::IAssetCache_obj::setBitmapData(::openfl::utils::Assets_obj::cache,id,bitmapData1);
            				}
HXLINE( 418)				promise->complete(bitmapData1);
            			}
            			else {
HXLINE( 422)				promise->error(((HX_("[Assets] Could not load Image \"",f0,0b,f7,ed) + id) + HX_("\"",22,00,00,00)));
            			}
            		}
            		HX_END_LOCAL_FUNC1((void))

 ::Dynamic useCache = __o_useCache.Default(true);
            	HX_GC_STACKFRAME(&_hx_pos_4176bcd8576208c2_381_loadBitmapData)
HXLINE( 383)		if (hx::IsNull( useCache )) {
HXLINE( 383)			useCache = true;
            		}
HXLINE( 385)		 ::lime::app::Promise_openfl_display_BitmapData promise =  ::lime::app::Promise_openfl_display_BitmapData_obj::__alloc( HX_CTX );
HXLINE( 389)		bool _hx_tmp;
HXDLIN( 389)		bool _hx_tmp1;
HXDLIN( 389)		if (useCache) {
HXLINE( 389)			_hx_tmp1 = ::openfl::utils::IAssetCache_obj::get_enabled(::openfl::utils::Assets_obj::cache);
            		}
            		else {
HXLINE( 389)			_hx_tmp1 = false;
            		}
HXDLIN( 389)		if (_hx_tmp1) {
HXLINE( 389)			_hx_tmp = ::openfl::utils::IAssetCache_obj::hasBitmapData(::openfl::utils::Assets_obj::cache,id);
            		}
            		else {
HXLINE( 389)			_hx_tmp = false;
            		}
HXDLIN( 389)		if (_hx_tmp) {
HXLINE( 391)			 ::openfl::display::BitmapData bitmapData = ::openfl::utils::IAssetCache_obj::getBitmapData(::openfl::utils::Assets_obj::cache,id);
HXLINE( 393)			if (::openfl::utils::Assets_obj::isValidBitmapData(bitmapData)) {
HXLINE( 395)				promise->complete(bitmapData);
HXLINE( 396)				return promise->future;
            			}
            		}
HXLINE( 402)		::lime::utils::Assets_obj::loadImage(id,false)->onComplete( ::Dynamic(new _hx_Closure_0(id,promise,useCache)))->onError(promise->error_dyn())->onProgress(promise->progress_dyn());
HXLINE( 430)		return promise->future;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Assets_obj,loadBitmapData,return )

 ::lime::app::Future Assets_obj::loadBytes(::String id){
            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0, ::lime::app::Promise_openfl_utils_ByteArray,promise) HXARGC(1)
            		void _hx_run( ::haxe::io::Bytes bytes){
            			HX_GC_STACKFRAME(&_hx_pos_4176bcd8576208c2_440_loadBytes)
HXLINE( 440)			promise->complete(::openfl::utils::_ByteArray::ByteArray_Impl__obj::fromBytes(bytes));
            		}
            		HX_END_LOCAL_FUNC1((void))

            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_1, ::lime::app::Promise_openfl_utils_ByteArray,promise) HXARGC(2)
            		void _hx_run(int progress,int total){
            			HX_GC_STACKFRAME(&_hx_pos_4176bcd8576208c2_441_loadBytes)
HXLINE( 441)			promise->progress(progress,total);
            		}
            		HX_END_LOCAL_FUNC2((void))

            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_2, ::lime::app::Promise_openfl_utils_ByteArray,promise) HXARGC(1)
            		void _hx_run( ::Dynamic msg){
            			HX_GC_STACKFRAME(&_hx_pos_4176bcd8576208c2_442_loadBytes)
HXLINE( 442)			promise->error(msg);
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_GC_STACKFRAME(&_hx_pos_4176bcd8576208c2_435_loadBytes)
HXLINE( 437)		 ::lime::app::Promise_openfl_utils_ByteArray promise =  ::lime::app::Promise_openfl_utils_ByteArray_obj::__alloc( HX_CTX );
HXLINE( 438)		 ::lime::app::Future future = ::lime::utils::Assets_obj::loadBytes(id);
HXLINE( 440)		future->onComplete( ::Dynamic(new _hx_Closure_0(promise)));
HXLINE( 441)		future->onProgress( ::Dynamic(new _hx_Closure_1(promise)));
HXLINE( 442)		future->onError( ::Dynamic(new _hx_Closure_2(promise)));
HXLINE( 444)		return promise->future;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Assets_obj,loadBytes,return )

 ::lime::app::Future Assets_obj::loadFont(::String id, ::Dynamic __o_useCache){
            		HX_BEGIN_LOCAL_FUNC_S3(hx::LocalFunc,_hx_Closure_0,::String,id, ::lime::app::Promise_openfl_text_Font,promise, ::Dynamic,useCache) HXARGC(1)
            		void _hx_run( ::lime::text::Font limeFont){
            			HX_GC_STACKFRAME(&_hx_pos_4176bcd8576208c2_464_loadFont)
HXLINE( 469)			 ::openfl::text::Font font =  ::openfl::text::Font_obj::__alloc( HX_CTX ,null());
HXLINE( 470)			font->_hx___fromLimeFont(limeFont);
HXLINE( 473)			bool _hx_tmp3;
HXDLIN( 473)			if (useCache) {
HXLINE( 473)				_hx_tmp3 = ::openfl::utils::IAssetCache_obj::get_enabled(::openfl::utils::Assets_obj::cache);
            			}
            			else {
HXLINE( 473)				_hx_tmp3 = false;
            			}
HXDLIN( 473)			if (_hx_tmp3) {
HXLINE( 475)				::openfl::utils::IAssetCache_obj::setFont(::openfl::utils::Assets_obj::cache,id,font);
            			}
HXLINE( 479)			promise->complete(font);
            		}
            		HX_END_LOCAL_FUNC1((void))

 ::Dynamic useCache = __o_useCache.Default(true);
            	HX_GC_STACKFRAME(&_hx_pos_4176bcd8576208c2_449_loadFont)
HXLINE( 451)		if (hx::IsNull( useCache )) {
HXLINE( 451)			useCache = true;
            		}
HXLINE( 453)		 ::lime::app::Promise_openfl_text_Font promise =  ::lime::app::Promise_openfl_text_Font_obj::__alloc( HX_CTX );
HXLINE( 457)		bool _hx_tmp;
HXDLIN( 457)		bool _hx_tmp1;
HXDLIN( 457)		if (useCache) {
HXLINE( 457)			_hx_tmp1 = ::openfl::utils::IAssetCache_obj::get_enabled(::openfl::utils::Assets_obj::cache);
            		}
            		else {
HXLINE( 457)			_hx_tmp1 = false;
            		}
HXDLIN( 457)		if (_hx_tmp1) {
HXLINE( 457)			_hx_tmp = ::openfl::utils::IAssetCache_obj::hasFont(::openfl::utils::Assets_obj::cache,id);
            		}
            		else {
HXLINE( 457)			_hx_tmp = false;
            		}
HXDLIN( 457)		if (_hx_tmp) {
HXLINE( 459)			 ::openfl::text::Font _hx_tmp2 = ::openfl::utils::IAssetCache_obj::getFont(::openfl::utils::Assets_obj::cache,id);
HXDLIN( 459)			promise->complete(_hx_tmp2);
HXLINE( 460)			return promise->future;
            		}
HXLINE( 464)		::lime::utils::Assets_obj::loadFont(id,null())->onComplete( ::Dynamic(new _hx_Closure_0(id,promise,useCache)))->onError(promise->error_dyn())->onProgress(promise->progress_dyn());
HXLINE( 485)		return promise->future;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Assets_obj,loadFont,return )

 ::lime::app::Future Assets_obj::loadLibrary(::String name){
            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0,::String,name) HXARGC(1)
            		 ::lime::app::Future _hx_run( ::lime::utils::AssetLibrary library){
            			HX_GC_STACKFRAME(&_hx_pos_4176bcd8576208c2_492_loadLibrary)
HXLINE( 494)			 ::openfl::utils::AssetLibrary _library = null();
HXLINE( 496)			if (hx::IsNotNull( library )) {
HXLINE( 498)				if (::Std_obj::is(library,hx::ClassOf< ::openfl::utils::AssetLibrary >())) {
HXLINE( 500)					_library = ( ( ::openfl::utils::AssetLibrary)(library) );
            				}
            				else {
HXLINE( 504)					_library =  ::openfl::utils::AssetLibrary_obj::__alloc( HX_CTX );
HXLINE( 505)					_library->_hx___proxy = library;
HXLINE( 506)					::lime::utils::Assets_obj::registerLibrary(name,_library);
            				}
            			}
HXLINE( 512)			return ::lime::app::Future_obj::withValue(_library);
            		}
            		HX_END_LOCAL_FUNC1(return)

            	HX_STACKFRAME(&_hx_pos_4176bcd8576208c2_492_loadLibrary)
HXDLIN( 492)		return ::lime::utils::Assets_obj::loadLibrary(name)->then( ::Dynamic(new _hx_Closure_0(name)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Assets_obj,loadLibrary,return )

 ::lime::app::Future Assets_obj::loadMusic(::String id, ::Dynamic __o_useCache){
            		HX_BEGIN_LOCAL_FUNC_S3(hx::LocalFunc,_hx_Closure_0,::String,id, ::lime::app::Promise_openfl_media_Sound,promise, ::Dynamic,useCache) HXARGC(1)
            		void _hx_run( ::lime::media::AudioBuffer buffer){
            			HX_GC_STACKFRAME(&_hx_pos_4176bcd8576208c2_529_loadMusic)
HXLINE( 529)			if (hx::IsNotNull( buffer )) {
HXLINE( 534)				 ::openfl::media::Sound sound = ::openfl::media::Sound_obj::fromAudioBuffer(buffer);
HXLINE( 537)				bool _hx_tmp;
HXDLIN( 537)				if (useCache) {
HXLINE( 537)					_hx_tmp = ::openfl::utils::IAssetCache_obj::get_enabled(::openfl::utils::Assets_obj::cache);
            				}
            				else {
HXLINE( 537)					_hx_tmp = false;
            				}
HXDLIN( 537)				if (_hx_tmp) {
HXLINE( 539)					::openfl::utils::IAssetCache_obj::setSound(::openfl::utils::Assets_obj::cache,id,sound);
            				}
HXLINE( 543)				promise->complete(sound);
            			}
            			else {
HXLINE( 547)				promise->error(((HX_("[Assets] Could not load Sound \"",64,be,27,e3) + id) + HX_("\"",22,00,00,00)));
            			}
            		}
            		HX_END_LOCAL_FUNC1((void))

 ::Dynamic useCache = __o_useCache.Default(true);
            	HX_GC_STACKFRAME(&_hx_pos_4176bcd8576208c2_519_loadMusic)
HXLINE( 521)		if (hx::IsNull( useCache )) {
HXLINE( 521)			useCache = true;
            		}
HXLINE( 525)		 ::lime::app::Promise_openfl_media_Sound promise =  ::lime::app::Promise_openfl_media_Sound_obj::__alloc( HX_CTX );
HXLINE( 527)		::lime::utils::Assets_obj::loadAudioBuffer(id,useCache)->onComplete( ::Dynamic(new _hx_Closure_0(id,promise,useCache)))->onError(promise->error_dyn())->onProgress(promise->progress_dyn());
HXLINE( 552)		return promise->future;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Assets_obj,loadMusic,return )

 ::lime::app::Future Assets_obj::loadMovieClip(::String id){
            	HX_GC_STACKFRAME(&_hx_pos_4176bcd8576208c2_564_loadMovieClip)
HXLINE( 566)		 ::lime::app::Promise_openfl_display_MovieClip promise =  ::lime::app::Promise_openfl_display_MovieClip_obj::__alloc( HX_CTX );
HXLINE( 570)		::String libraryName = id.substring((int)0,id.indexOf(HX_(":",3a,00,00,00),null()));
HXLINE( 571)		::String symbolName = id.substr((id.indexOf(HX_(":",3a,00,00,00),null()) + (int)1),null());
HXLINE( 572)		 ::lime::utils::AssetLibrary limeLibrary = ::openfl::utils::Assets_obj::getLibrary(libraryName);
HXLINE( 574)		if (hx::IsNotNull( limeLibrary )) {
HXLINE( 576)			if (::Std_obj::is(limeLibrary,hx::ClassOf< ::openfl::utils::AssetLibrary >())) {
HXLINE( 578)				 ::openfl::utils::AssetLibrary library = ( ( ::openfl::utils::AssetLibrary)(limeLibrary) );
HXLINE( 580)				if (library->exists(symbolName,HX_("MOVIE_CLIP",1f,e1,aa,77))) {
HXLINE( 582)					promise->completeWith(library->loadMovieClip(symbolName));
HXLINE( 583)					return promise->future;
            				}
            			}
HXLINE( 589)			promise->error(((HX_("[Assets] There is no MovieClip asset with an ID of \"",8f,8e,f2,7d) + id) + HX_("\"",22,00,00,00)));
            		}
            		else {
HXLINE( 593)			promise->error(((HX_("[Assets] There is no asset library named \"",a0,b4,0a,cd) + libraryName) + HX_("\"",22,00,00,00)));
            		}
HXLINE( 599)		return promise->future;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Assets_obj,loadMovieClip,return )

 ::lime::app::Future Assets_obj::loadSound(::String id, ::Dynamic __o_useCache){
            		HX_BEGIN_LOCAL_FUNC_S3(hx::LocalFunc,_hx_Closure_0,::String,id, ::lime::app::Promise_openfl_media_Sound,promise, ::Dynamic,useCache) HXARGC(1)
            		void _hx_run( ::lime::media::AudioBuffer buffer){
            			HX_GC_STACKFRAME(&_hx_pos_4176bcd8576208c2_612_loadSound)
HXLINE( 612)			if (hx::IsNotNull( buffer )) {
HXLINE( 617)				 ::openfl::media::Sound sound = ::openfl::media::Sound_obj::fromAudioBuffer(buffer);
HXLINE( 620)				bool _hx_tmp;
HXDLIN( 620)				if (useCache) {
HXLINE( 620)					_hx_tmp = ::openfl::utils::IAssetCache_obj::get_enabled(::openfl::utils::Assets_obj::cache);
            				}
            				else {
HXLINE( 620)					_hx_tmp = false;
            				}
HXDLIN( 620)				if (_hx_tmp) {
HXLINE( 622)					::openfl::utils::IAssetCache_obj::setSound(::openfl::utils::Assets_obj::cache,id,sound);
            				}
HXLINE( 626)				promise->complete(sound);
            			}
            			else {
HXLINE( 630)				promise->error(((HX_("[Assets] Could not load Sound \"",64,be,27,e3) + id) + HX_("\"",22,00,00,00)));
            			}
            		}
            		HX_END_LOCAL_FUNC1((void))

 ::Dynamic useCache = __o_useCache.Default(true);
            	HX_GC_STACKFRAME(&_hx_pos_4176bcd8576208c2_604_loadSound)
HXLINE( 606)		if (hx::IsNull( useCache )) {
HXLINE( 606)			useCache = true;
            		}
HXLINE( 608)		 ::lime::app::Promise_openfl_media_Sound promise =  ::lime::app::Promise_openfl_media_Sound_obj::__alloc( HX_CTX );
HXLINE( 610)		::lime::utils::Assets_obj::loadAudioBuffer(id,useCache)->onComplete( ::Dynamic(new _hx_Closure_0(id,promise,useCache)))->onError(promise->error_dyn())->onProgress(promise->progress_dyn());
HXLINE( 635)		return promise->future;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Assets_obj,loadSound,return )

 ::lime::app::Future Assets_obj::loadText(::String id){
            	HX_STACKFRAME(&_hx_pos_4176bcd8576208c2_640_loadText)
HXLINE( 642)		 ::lime::app::Future future = ::lime::utils::Assets_obj::loadText(id);
HXLINE( 643)		return future;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Assets_obj,loadText,return )

void Assets_obj::registerLibrary(::String name, ::openfl::utils::AssetLibrary library){
            	HX_STACKFRAME(&_hx_pos_4176bcd8576208c2_655_registerLibrary)
HXDLIN( 655)		::lime::utils::Assets_obj::registerLibrary(name,library);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Assets_obj,registerLibrary,(void))

void Assets_obj::removeEventListener(::String type, ::Dynamic listener,hx::Null< bool >  __o_capture){
bool capture = __o_capture.Default(false);
            	HX_STACKFRAME(&_hx_pos_4176bcd8576208c2_662_removeEventListener)
HXDLIN( 662)		::openfl::utils::Assets_obj::dispatcher->removeEventListener(type,listener,capture);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Assets_obj,removeEventListener,(void))

hx::Class Assets_obj::resolveClass(::String name){
            	HX_STACKFRAME(&_hx_pos_4176bcd8576208c2_669_resolveClass)
HXDLIN( 669)		return ::Type_obj::resolveClass(name);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Assets_obj,resolveClass,return )

hx::Class Assets_obj::resolveEnum(::String name){
            	HX_STACKFRAME(&_hx_pos_4176bcd8576208c2_674_resolveEnum)
HXLINE( 676)		hx::Class value = ::Type_obj::resolveEnum(name);
HXLINE( 688)		return value;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Assets_obj,resolveEnum,return )

void Assets_obj::unloadLibrary(::String name){
            	HX_STACKFRAME(&_hx_pos_4176bcd8576208c2_695_unloadLibrary)
HXDLIN( 695)		::lime::utils::Assets_obj::unloadLibrary(name);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Assets_obj,unloadLibrary,(void))

void Assets_obj::LimeAssets_onChange(){
            	HX_GC_STACKFRAME(&_hx_pos_4176bcd8576208c2_709_LimeAssets_onChange)
HXDLIN( 709)		::openfl::utils::Assets_obj::dispatchEvent( ::openfl::events::Event_obj::__alloc( HX_CTX ,HX_("change",70,91,72,b7),null(),null()));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Assets_obj,LimeAssets_onChange,(void))


Assets_obj::Assets_obj()
{
}

bool Assets_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"list") ) { outValue = list_dyn(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"cache") ) { outValue = ( cache ); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"exists") ) { outValue = exists_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"getFont") ) { outValue = getFont_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getPath") ) { outValue = getPath_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getText") ) { outValue = getText_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"isLocal") ) { outValue = isLocal_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"getBytes") ) { outValue = getBytes_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getMusic") ) { outValue = getMusic_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getSound") ) { outValue = getSound_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"loadFont") ) { outValue = loadFont_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"loadText") ) { outValue = loadText_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"loadBytes") ) { outValue = loadBytes_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"loadMusic") ) { outValue = loadMusic_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"loadSound") ) { outValue = loadSound_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"dispatcher") ) { outValue = ( dispatcher ); return true; }
		if (HX_FIELD_EQ(inName,"getLibrary") ) { outValue = getLibrary_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"hasLibrary") ) { outValue = hasLibrary_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"loadLibrary") ) { outValue = loadLibrary_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"resolveEnum") ) { outValue = resolveEnum_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"getMovieClip") ) { outValue = getMovieClip_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"isValidSound") ) { outValue = isValidSound_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"resolveClass") ) { outValue = resolveClass_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"dispatchEvent") ) { outValue = dispatchEvent_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getBitmapData") ) { outValue = getBitmapData_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"loadMovieClip") ) { outValue = loadMovieClip_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"unloadLibrary") ) { outValue = unloadLibrary_dyn(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"loadBitmapData") ) { outValue = loadBitmapData_dyn(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"registerLibrary") ) { outValue = registerLibrary_dyn(); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"addEventListener") ) { outValue = addEventListener_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"hasEventListener") ) { outValue = hasEventListener_dyn(); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"isValidBitmapData") ) { outValue = isValidBitmapData_dyn(); return true; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"removeEventListener") ) { outValue = removeEventListener_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"LimeAssets_onChange") ) { outValue = LimeAssets_onChange_dyn(); return true; }
	}
	return false;
}

bool Assets_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"cache") ) { cache=ioValue.Cast< ::Dynamic >(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"dispatcher") ) { dispatcher=ioValue.Cast<  ::openfl::events::EventDispatcher >(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *Assets_obj_sMemberStorageInfo = 0;
static hx::StaticInfo Assets_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*::openfl::utils::IAssetCache*/ ,(void *) &Assets_obj::cache,HX_HCSTRING("cache","\x42","\x9a","\x14","\x41")},
	{hx::fsObject /*::openfl::events::EventDispatcher*/ ,(void *) &Assets_obj::dispatcher,HX_HCSTRING("dispatcher","\xa7","\xc9","\x00","\x5a")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static void Assets_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Assets_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(Assets_obj::cache,"cache");
	HX_MARK_MEMBER_NAME(Assets_obj::dispatcher,"dispatcher");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Assets_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Assets_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(Assets_obj::cache,"cache");
	HX_VISIT_MEMBER_NAME(Assets_obj::dispatcher,"dispatcher");
};

#endif

hx::Class Assets_obj::__mClass;

static ::String Assets_obj_sStaticFields[] = {
	HX_HCSTRING("cache","\x42","\x9a","\x14","\x41"),
	HX_HCSTRING("dispatcher","\xa7","\xc9","\x00","\x5a"),
	HX_HCSTRING("addEventListener","\xcd","\x0b","\x64","\xf1"),
	HX_HCSTRING("dispatchEvent","\x00","\xc7","\x64","\xc6"),
	HX_HCSTRING("exists","\xdc","\x1d","\xe0","\xbf"),
	HX_HCSTRING("getBitmapData","\xef","\x11","\x33","\x90"),
	HX_HCSTRING("getBytes","\xf5","\x17","\x6f","\x1d"),
	HX_HCSTRING("getFont","\x85","\x0d","\x43","\x16"),
	HX_HCSTRING("getLibrary","\x05","\xad","\xd1","\x8e"),
	HX_HCSTRING("getMovieClip","\x2a","\x9f","\x71","\x27"),
	HX_HCSTRING("getMusic","\x2f","\xe0","\x31","\x70"),
	HX_HCSTRING("getPath","\x5b","\x95","\xd4","\x1c"),
	HX_HCSTRING("getSound","\x59","\x9c","\xa3","\xe0"),
	HX_HCSTRING("getText","\x63","\x7c","\x7c","\x1f"),
	HX_HCSTRING("hasEventListener","\xf4","\x2e","\xea","\x0c"),
	HX_HCSTRING("hasLibrary","\xc1","\x0e","\x24","\xca"),
	HX_HCSTRING("isLocal","\x21","\x6d","\x76","\x15"),
	HX_HCSTRING("isValidBitmapData","\x0b","\x65","\xe4","\xe6"),
	HX_HCSTRING("isValidSound","\xbd","\x1e","\x2b","\xa1"),
	HX_HCSTRING("list","\x5e","\x1c","\xb3","\x47"),
	HX_HCSTRING("loadBitmapData","\x7f","\xbf","\x71","\xca"),
	HX_HCSTRING("loadBytes","\x65","\x54","\xcf","\xd8"),
	HX_HCSTRING("loadFont","\x15","\x2f","\x60","\xb4"),
	HX_HCSTRING("loadLibrary","\x75","\xe5","\x0d","\x10"),
	HX_HCSTRING("loadMusic","\x9f","\x1c","\x92","\x2b"),
	HX_HCSTRING("loadMovieClip","\x9a","\xd3","\x80","\x9a"),
	HX_HCSTRING("loadSound","\xc9","\xd8","\x03","\x9c"),
	HX_HCSTRING("loadText","\xf3","\x9d","\x99","\xbd"),
	HX_HCSTRING("registerLibrary","\xd8","\x8a","\x84","\xf2"),
	HX_HCSTRING("removeEventListener","\xca","\x87","\x75","\x55"),
	HX_HCSTRING("resolveClass","\xac","\xbd","\xdd","\x80"),
	HX_HCSTRING("resolveEnum","\x0d","\x90","\x51","\xde"),
	HX_HCSTRING("unloadLibrary","\xbc","\x5b","\x48","\x31"),
	HX_HCSTRING("LimeAssets_onChange","\xb6","\x36","\x60","\x95"),
	::String(null())
};

void Assets_obj::__register()
{
	hx::Object *dummy = new Assets_obj;
	Assets_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("openfl.utils.Assets","\xde","\xb0","\x04","\x7c");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Assets_obj::__GetStatic;
	__mClass->mSetStaticField = &Assets_obj::__SetStatic;
	__mClass->mMarkFunc = Assets_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Assets_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< Assets_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Assets_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Assets_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Assets_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Assets_obj::__boot()
{
{
            	HX_GC_STACKFRAME(&_hx_pos_4176bcd8576208c2_32_boot)
HXDLIN(  32)		cache =  ::openfl::utils::AssetCache_obj::__alloc( HX_CTX );
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_4176bcd8576208c2_34_boot)
HXDLIN(  34)		dispatcher =  ::openfl::events::EventDispatcher_obj::__alloc( HX_CTX ,null());
            	}
}

} // end namespace openfl
} // end namespace utils
