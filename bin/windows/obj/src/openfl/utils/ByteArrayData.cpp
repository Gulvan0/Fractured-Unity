// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_38344beec7696400
#define INCLUDED_38344beec7696400
#include "cpp/Int64.h"
#endif
#ifndef INCLUDED_haxe_Serializer
#include <haxe/Serializer.h>
#endif
#ifndef INCLUDED_haxe_Unserializer
#include <haxe/Unserializer.h>
#endif
#ifndef INCLUDED_haxe_format_JsonParser
#include <haxe/format/JsonParser.h>
#endif
#ifndef INCLUDED_haxe_format_JsonPrinter
#include <haxe/format/JsonPrinter.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_haxe_io_Error
#include <haxe/io/Error.h>
#endif
#ifndef INCLUDED_haxe_io_FPHelper
#include <haxe/io/FPHelper.h>
#endif
#ifndef INCLUDED_lime_system_Endian
#include <lime/system/Endian.h>
#endif
#ifndef INCLUDED_lime_system_System
#include <lime/system/System.h>
#endif
#ifndef INCLUDED_lime_utils_compress_Deflate
#include <lime/utils/compress/Deflate.h>
#endif
#ifndef INCLUDED_lime_utils_compress_LZMA
#include <lime/utils/compress/LZMA.h>
#endif
#ifndef INCLUDED_lime_utils_compress_Zlib
#include <lime/utils/compress/Zlib.h>
#endif
#ifndef INCLUDED_openfl_errors_EOFError
#include <openfl/errors/EOFError.h>
#endif
#ifndef INCLUDED_openfl_errors_Error
#include <openfl/errors/Error.h>
#endif
#ifndef INCLUDED_openfl_errors_IOError
#include <openfl/errors/IOError.h>
#endif
#ifndef INCLUDED_openfl_utils_ByteArrayData
#include <openfl/utils/ByteArrayData.h>
#endif
#ifndef INCLUDED_openfl_utils_IDataInput
#include <openfl/utils/IDataInput.h>
#endif
#ifndef INCLUDED_openfl_utils_IDataOutput
#include <openfl/utils/IDataOutput.h>
#endif
#ifndef INCLUDED_openfl_utils__ByteArray_ByteArray_Impl_
#include <openfl/utils/_ByteArray/ByteArray_Impl_.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_dd5cdbe7a8b93fcc_341_new,"openfl.utils.ByteArrayData","new",0x36383a32,"openfl.utils.ByteArrayData.new","openfl/utils/ByteArray.hx",341,0xaa5cee4a)
HX_LOCAL_STACK_FRAME(_hx_pos_dd5cdbe7a8b93fcc_388_clear,"openfl.utils.ByteArrayData","clear",0x0f8b73df,"openfl.utils.ByteArrayData.clear","openfl/utils/ByteArray.hx",388,0xaa5cee4a)
HX_LOCAL_STACK_FRAME(_hx_pos_dd5cdbe7a8b93fcc_396_compress,"openfl.utils.ByteArrayData","compress",0xe3300490,"openfl.utils.ByteArrayData.compress","openfl/utils/ByteArray.hx",396,0xaa5cee4a)
HX_LOCAL_STACK_FRAME(_hx_pos_dd5cdbe7a8b93fcc_441_deflate,"openfl.utils.ByteArrayData","deflate",0x97ecc63d,"openfl.utils.ByteArrayData.deflate","openfl/utils/ByteArray.hx",441,0xaa5cee4a)
HX_LOCAL_STACK_FRAME(_hx_pos_dd5cdbe7a8b93fcc_457_inflate,"openfl.utils.ByteArrayData","inflate",0x010e5759,"openfl.utils.ByteArrayData.inflate","openfl/utils/ByteArray.hx",457,0xaa5cee4a)
HX_LOCAL_STACK_FRAME(_hx_pos_dd5cdbe7a8b93fcc_464_readBoolean,"openfl.utils.ByteArrayData","readBoolean",0x98e809c4,"openfl.utils.ByteArrayData.readBoolean","openfl/utils/ByteArray.hx",464,0xaa5cee4a)
HX_LOCAL_STACK_FRAME(_hx_pos_dd5cdbe7a8b93fcc_478_readByte,"openfl.utils.ByteArrayData","readByte",0xc88bb66c,"openfl.utils.ByteArrayData.readByte","openfl/utils/ByteArray.hx",478,0xaa5cee4a)
HX_LOCAL_STACK_FRAME(_hx_pos_dd5cdbe7a8b93fcc_495_readBytes,"openfl.utils.ByteArrayData","readBytes",0xb1b3e887,"openfl.utils.ByteArrayData.readBytes","openfl/utils/ByteArray.hx",495,0xaa5cee4a)
HX_LOCAL_STACK_FRAME(_hx_pos_dd5cdbe7a8b93fcc_519_readDouble,"openfl.utils.ByteArrayData","readDouble",0xd7136375,"openfl.utils.ByteArrayData.readDouble","openfl/utils/ByteArray.hx",519,0xaa5cee4a)
HX_LOCAL_STACK_FRAME(_hx_pos_dd5cdbe7a8b93fcc_545_readFloat,"openfl.utils.ByteArrayData","readFloat",0xf6b2a5b8,"openfl.utils.ByteArrayData.readFloat","openfl/utils/ByteArray.hx",545,0xaa5cee4a)
HX_LOCAL_STACK_FRAME(_hx_pos_dd5cdbe7a8b93fcc_566_readInt,"openfl.utils.ByteArrayData","readInt",0xf7bc6e0b,"openfl.utils.ByteArrayData.readInt","openfl/utils/ByteArray.hx",566,0xaa5cee4a)
HX_LOCAL_STACK_FRAME(_hx_pos_dd5cdbe7a8b93fcc_588_readMultiByte,"openfl.utils.ByteArrayData","readMultiByte",0x011f243d,"openfl.utils.ByteArrayData.readMultiByte","openfl/utils/ByteArray.hx",588,0xaa5cee4a)
HX_LOCAL_STACK_FRAME(_hx_pos_dd5cdbe7a8b93fcc_595_readObject,"openfl.utils.ByteArrayData","readObject",0xb987b723,"openfl.utils.ByteArrayData.readObject","openfl/utils/ByteArray.hx",595,0xaa5cee4a)
HX_LOCAL_STACK_FRAME(_hx_pos_dd5cdbe7a8b93fcc_635_readShort,"openfl.utils.ByteArrayData","readShort",0x70436498,"openfl.utils.ByteArrayData.readShort","openfl/utils/ByteArray.hx",635,0xaa5cee4a)
HX_LOCAL_STACK_FRAME(_hx_pos_dd5cdbe7a8b93fcc_667_readUnsignedByte,"openfl.utils.ByteArrayData","readUnsignedByte",0x50ca6601,"openfl.utils.ByteArrayData.readUnsignedByte","openfl/utils/ByteArray.hx",667,0xaa5cee4a)
HX_LOCAL_STACK_FRAME(_hx_pos_dd5cdbe7a8b93fcc_681_readUnsignedInt,"openfl.utils.ByteArrayData","readUnsignedInt",0xac948816,"openfl.utils.ByteArrayData.readUnsignedInt","openfl/utils/ByteArray.hx",681,0xaa5cee4a)
HX_LOCAL_STACK_FRAME(_hx_pos_dd5cdbe7a8b93fcc_701_readUnsignedShort,"openfl.utils.ByteArrayData","readUnsignedShort",0x1ede5763,"openfl.utils.ByteArrayData.readUnsignedShort","openfl/utils/ByteArray.hx",701,0xaa5cee4a)
HX_LOCAL_STACK_FRAME(_hx_pos_dd5cdbe7a8b93fcc_719_readUTF,"openfl.utils.ByteArrayData","readUTF",0xf7c57243,"openfl.utils.ByteArrayData.readUTF","openfl/utils/ByteArray.hx",719,0xaa5cee4a)
HX_LOCAL_STACK_FRAME(_hx_pos_dd5cdbe7a8b93fcc_727_readUTFBytes,"openfl.utils.ByteArrayData","readUTFBytes",0x87ebf328,"openfl.utils.ByteArrayData.readUTFBytes","openfl/utils/ByteArray.hx",727,0xaa5cee4a)
HX_LOCAL_STACK_FRAME(_hx_pos_dd5cdbe7a8b93fcc_742_uncompress,"openfl.utils.ByteArrayData","uncompress",0xb44f8369,"openfl.utils.ByteArrayData.uncompress","openfl/utils/ByteArray.hx",742,0xaa5cee4a)
HX_LOCAL_STACK_FRAME(_hx_pos_dd5cdbe7a8b93fcc_788_writeBoolean,"openfl.utils.ByteArrayData","writeBoolean",0x790a5b77,"openfl.utils.ByteArrayData.writeBoolean","openfl/utils/ByteArray.hx",788,0xaa5cee4a)
HX_LOCAL_STACK_FRAME(_hx_pos_dd5cdbe7a8b93fcc_793_writeByte,"openfl.utils.ByteArrayData","writeByte",0x6d0ba6d9,"openfl.utils.ByteArrayData.writeByte","openfl/utils/ByteArray.hx",793,0xaa5cee4a)
HX_LOCAL_STACK_FRAME(_hx_pos_dd5cdbe7a8b93fcc_801_writeBytes,"openfl.utils.ByteArrayData","writeBytes",0xfd26577a,"openfl.utils.ByteArrayData.writeBytes","openfl/utils/ByteArray.hx",801,0xaa5cee4a)
HX_LOCAL_STACK_FRAME(_hx_pos_dd5cdbe7a8b93fcc_814_writeDouble,"openfl.utils.ByteArrayData","writeDouble",0x8fc20922,"openfl.utils.ByteArrayData.writeDouble","openfl/utils/ByteArray.hx",814,0xaa5cee4a)
HX_LOCAL_STACK_FRAME(_hx_pos_dd5cdbe7a8b93fcc_835_writeFloat,"openfl.utils.ByteArrayData","writeFloat",0x422514ab,"openfl.utils.ByteArrayData.writeFloat","openfl/utils/ByteArray.hx",835,0xaa5cee4a)
HX_LOCAL_STACK_FRAME(_hx_pos_dd5cdbe7a8b93fcc_851_writeInt,"openfl.utils.ByteArrayData","writeInt",0x83612a3e,"openfl.utils.ByteArrayData.writeInt","openfl/utils/ByteArray.hx",851,0xaa5cee4a)
HX_LOCAL_STACK_FRAME(_hx_pos_dd5cdbe7a8b93fcc_876_writeMultiByte,"openfl.utils.ByteArrayData","writeMultiByte",0xebbf88b0,"openfl.utils.ByteArrayData.writeMultiByte","openfl/utils/ByteArray.hx",876,0xaa5cee4a)
HX_LOCAL_STACK_FRAME(_hx_pos_dd5cdbe7a8b93fcc_883_writeObject,"openfl.utils.ByteArrayData","writeObject",0x72365cd0,"openfl.utils.ByteArrayData.writeObject","openfl/utils/ByteArray.hx",883,0xaa5cee4a)
HX_LOCAL_STACK_FRAME(_hx_pos_dd5cdbe7a8b93fcc_923_writeShort,"openfl.utils.ByteArrayData","writeShort",0xbbb5d38b,"openfl.utils.ByteArrayData.writeShort","openfl/utils/ByteArray.hx",923,0xaa5cee4a)
HX_LOCAL_STACK_FRAME(_hx_pos_dd5cdbe7a8b93fcc_944_writeUnsignedInt,"openfl.utils.ByteArrayData","writeUnsignedInt",0xcb6d2f49,"openfl.utils.ByteArrayData.writeUnsignedInt","openfl/utils/ByteArray.hx",944,0xaa5cee4a)
HX_LOCAL_STACK_FRAME(_hx_pos_dd5cdbe7a8b93fcc_949_writeUTF,"openfl.utils.ByteArrayData","writeUTF",0x836a2e76,"openfl.utils.ByteArrayData.writeUTF","openfl/utils/ByteArray.hx",949,0xaa5cee4a)
HX_LOCAL_STACK_FRAME(_hx_pos_dd5cdbe7a8b93fcc_959_writeUTFBytes,"openfl.utils.ByteArrayData","writeUTFBytes",0xc5d11e15,"openfl.utils.ByteArrayData.writeUTFBytes","openfl/utils/ByteArray.hx",959,0xaa5cee4a)
HX_LOCAL_STACK_FRAME(_hx_pos_dd5cdbe7a8b93fcc_967___fromBytes,"openfl.utils.ByteArrayData","__fromBytes",0x684ac753,"openfl.utils.ByteArrayData.__fromBytes","openfl/utils/ByteArray.hx",967,0xaa5cee4a)
HX_LOCAL_STACK_FRAME(_hx_pos_dd5cdbe7a8b93fcc_975___resize,"openfl.utils.ByteArrayData","__resize",0x101b8202,"openfl.utils.ByteArrayData.__resize","openfl/utils/ByteArray.hx",975,0xaa5cee4a)
HX_LOCAL_STACK_FRAME(_hx_pos_dd5cdbe7a8b93fcc_1006___setData,"openfl.utils.ByteArrayData","__setData",0xac6a7b1e,"openfl.utils.ByteArrayData.__setData","openfl/utils/ByteArray.hx",1006,0xaa5cee4a)
HX_LOCAL_STACK_FRAME(_hx_pos_dd5cdbe7a8b93fcc_1035_get_bytesAvailable,"openfl.utils.ByteArrayData","get_bytesAvailable",0x68329f15,"openfl.utils.ByteArrayData.get_bytesAvailable","openfl/utils/ByteArray.hx",1035,0xaa5cee4a)
HX_LOCAL_STACK_FRAME(_hx_pos_dd5cdbe7a8b93fcc_1042_get_endian,"openfl.utils.ByteArrayData","get_endian",0x95dc5cd2,"openfl.utils.ByteArrayData.get_endian","openfl/utils/ByteArray.hx",1042,0xaa5cee4a)
HX_LOCAL_STACK_FRAME(_hx_pos_dd5cdbe7a8b93fcc_1049_set_endian,"openfl.utils.ByteArrayData","set_endian",0x9959fb46,"openfl.utils.ByteArrayData.set_endian","openfl/utils/ByteArray.hx",1049,0xaa5cee4a)
HX_LOCAL_STACK_FRAME(_hx_pos_dd5cdbe7a8b93fcc_446_fromBytes,"openfl.utils.ByteArrayData","fromBytes",0x955585f3,"openfl.utils.ByteArrayData.fromBytes","openfl/utils/ByteArray.hx",446,0xaa5cee4a)
HX_LOCAL_STACK_FRAME(_hx_pos_dd5cdbe7a8b93fcc_317_boot,"openfl.utils.ByteArrayData","boot",0x3313b220,"openfl.utils.ByteArrayData.boot","openfl/utils/ByteArray.hx",317,0xaa5cee4a)
namespace openfl{
namespace utils{

void ByteArrayData_obj::__construct(hx::Null< int >  __o_length){
int length = __o_length.Default(0);
            	HX_STACKFRAME(&_hx_pos_dd5cdbe7a8b93fcc_341_new)
HXLINE( 343)		 ::haxe::io::Bytes bytes = ::haxe::io::Bytes_obj::alloc(length);
HXLINE( 346)		if ((length > (int)0)) {
HXLINE( 348)			bytes->fill((int)0,length,(int)0);
            		}
HXLINE( 358)		super::__construct(length,bytes->b);
HXLINE( 361)		this->__length = length;
HXLINE( 363)		if (hx::IsNull( ::openfl::utils::ByteArrayData_obj::_hx___defaultEndian )) {
HXLINE( 365)			if (hx::IsEq( ::lime::_hx_system::System_obj::get_endianness(),::lime::_hx_system::Endian_obj::_hx_LITTLE_ENDIAN_dyn() )) {
HXLINE( 367)				::openfl::utils::ByteArrayData_obj::_hx___defaultEndian = (int)1;
            			}
            			else {
HXLINE( 371)				::openfl::utils::ByteArrayData_obj::_hx___defaultEndian = (int)0;
            			}
            		}
HXLINE( 380)		this->_hx___endian = ::openfl::utils::ByteArrayData_obj::_hx___defaultEndian;
HXLINE( 383)		this->position = (int)0;
            	}

Dynamic ByteArrayData_obj::__CreateEmpty() { return new ByteArrayData_obj; }

void *ByteArrayData_obj::_hx_vtable = 0;

Dynamic ByteArrayData_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ByteArrayData_obj > _hx_result = new ByteArrayData_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool ByteArrayData_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x20f64c9a) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x20f64c9a;
	} else {
		return inClassId==(int)0x5b931193;
	}
}

static ::openfl::utils::IDataOutput_obj _hx_openfl_utils_ByteArrayData__hx_openfl_utils_IDataOutput= {
	(  ::Dynamic (hx::Object::*)( ::Dynamic))&::openfl::utils::ByteArrayData_obj::set_endian,
	(  ::Dynamic (hx::Object::*)())&::openfl::utils::ByteArrayData_obj::get_endian,
	( void (hx::Object::*)(bool))&::openfl::utils::ByteArrayData_obj::writeBoolean,
	( void (hx::Object::*)(int))&::openfl::utils::ByteArrayData_obj::writeByte,
	( void (hx::Object::*)( ::openfl::utils::ByteArrayData,hx::Null< int > ,hx::Null< int > ))&::openfl::utils::ByteArrayData_obj::writeBytes,
	( void (hx::Object::*)(Float))&::openfl::utils::ByteArrayData_obj::writeDouble,
	( void (hx::Object::*)(Float))&::openfl::utils::ByteArrayData_obj::writeFloat,
	( void (hx::Object::*)(int))&::openfl::utils::ByteArrayData_obj::writeInt,
	( void (hx::Object::*)(::String,::String))&::openfl::utils::ByteArrayData_obj::writeMultiByte,
	( void (hx::Object::*)(int))&::openfl::utils::ByteArrayData_obj::writeShort,
	( void (hx::Object::*)(::String))&::openfl::utils::ByteArrayData_obj::writeUTF,
	( void (hx::Object::*)(::String))&::openfl::utils::ByteArrayData_obj::writeUTFBytes,
	( void (hx::Object::*)(int))&::openfl::utils::ByteArrayData_obj::writeUnsignedInt,
};

static ::openfl::utils::IDataInput_obj _hx_openfl_utils_ByteArrayData__hx_openfl_utils_IDataInput= {
	(  ::Dynamic (hx::Object::*)( ::Dynamic))&::openfl::utils::ByteArrayData_obj::set_endian,
	(  ::Dynamic (hx::Object::*)())&::openfl::utils::ByteArrayData_obj::get_endian,
	( int (hx::Object::*)())&::openfl::utils::ByteArrayData_obj::get_bytesAvailable,
	( bool (hx::Object::*)())&::openfl::utils::ByteArrayData_obj::readBoolean,
	( int (hx::Object::*)())&::openfl::utils::ByteArrayData_obj::readByte,
	( void (hx::Object::*)( ::openfl::utils::ByteArrayData,hx::Null< int > ,hx::Null< int > ))&::openfl::utils::ByteArrayData_obj::readBytes,
	( Float (hx::Object::*)())&::openfl::utils::ByteArrayData_obj::readDouble,
	( Float (hx::Object::*)())&::openfl::utils::ByteArrayData_obj::readFloat,
	( int (hx::Object::*)())&::openfl::utils::ByteArrayData_obj::readInt,
	( ::String (hx::Object::*)(int,::String))&::openfl::utils::ByteArrayData_obj::readMultiByte,
	( int (hx::Object::*)())&::openfl::utils::ByteArrayData_obj::readShort,
	( int (hx::Object::*)())&::openfl::utils::ByteArrayData_obj::readUnsignedByte,
	( int (hx::Object::*)())&::openfl::utils::ByteArrayData_obj::readUnsignedInt,
	( int (hx::Object::*)())&::openfl::utils::ByteArrayData_obj::readUnsignedShort,
	( ::String (hx::Object::*)())&::openfl::utils::ByteArrayData_obj::readUTF,
	( ::String (hx::Object::*)(int))&::openfl::utils::ByteArrayData_obj::readUTFBytes,
};

void *ByteArrayData_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0x948d2d33: return &_hx_openfl_utils_ByteArrayData__hx_openfl_utils_IDataOutput;
		case (int)0xbeb9f218: return &_hx_openfl_utils_ByteArrayData__hx_openfl_utils_IDataInput;
	}
	return super::_hx_getInterface(inHash);
}

void ByteArrayData_obj::clear(){
            	HX_STACKFRAME(&_hx_pos_dd5cdbe7a8b93fcc_388_clear)
HXLINE( 390)		this->length = (int)0;
HXLINE( 391)		this->position = (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ByteArrayData_obj,clear,(void))

void ByteArrayData_obj::compress( ::Dynamic __o_algorithm){
 ::Dynamic algorithm = __o_algorithm.Default(2);
            	HX_STACKFRAME(&_hx_pos_dd5cdbe7a8b93fcc_396_compress)
HXLINE( 419)		 ::haxe::io::Bytes bytes;
HXDLIN( 419)		 ::Dynamic _hx_switch_0 = algorithm;
            		if (  (_hx_switch_0==(int)0) ){
HXLINE( 419)			bytes = ::lime::utils::compress::Deflate_obj::compress(hx::ObjectPtr<OBJ_>(this));
HXDLIN( 419)			goto _hx_goto_2;
            		}
            		if (  (_hx_switch_0==(int)1) ){
HXLINE( 419)			bytes = ::lime::utils::compress::LZMA_obj::compress(hx::ObjectPtr<OBJ_>(this));
HXDLIN( 419)			goto _hx_goto_2;
            		}
            		/* default */{
HXLINE( 419)			bytes = ::lime::utils::compress::Zlib_obj::compress(hx::ObjectPtr<OBJ_>(this));
            		}
            		_hx_goto_2:;
HXLINE( 427)		if (hx::IsNotNull( bytes )) {
HXLINE( 429)			{
HXLINE( 429)				this->b = bytes->b;
HXDLIN( 429)				this->__length = bytes->length;
            			}
HXLINE( 431)			this->length = this->__length;
HXLINE( 432)			this->position = this->length;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(ByteArrayData_obj,compress,(void))

void ByteArrayData_obj::deflate(){
            	HX_STACKFRAME(&_hx_pos_dd5cdbe7a8b93fcc_441_deflate)
HXDLIN( 441)		this->compress((int)0);
            	}


HX_DEFINE_DYNAMIC_FUNC0(ByteArrayData_obj,deflate,(void))

void ByteArrayData_obj::inflate(){
            	HX_STACKFRAME(&_hx_pos_dd5cdbe7a8b93fcc_457_inflate)
HXDLIN( 457)		this->uncompress((int)0);
            	}


HX_DEFINE_DYNAMIC_FUNC0(ByteArrayData_obj,inflate,(void))

bool ByteArrayData_obj::readBoolean(){
            	HX_GC_STACKFRAME(&_hx_pos_dd5cdbe7a8b93fcc_464_readBoolean)
HXDLIN( 464)		if ((this->position < this->length)) {
HXLINE( 466)			return (this->b->__get(this->position++) != (int)0);
            		}
            		else {
HXLINE( 470)			HX_STACK_DO_THROW( ::openfl::errors::EOFError_obj::__alloc( HX_CTX ));
            		}
HXLINE( 464)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ByteArrayData_obj,readBoolean,return )

int ByteArrayData_obj::readByte(){
            	HX_STACKFRAME(&_hx_pos_dd5cdbe7a8b93fcc_478_readByte)
HXLINE( 480)		int value = this->readUnsignedByte();
HXLINE( 482)		if ((((int)value & (int)(int)128) != (int)0)) {
HXLINE( 484)			return (value - (int)256);
            		}
            		else {
HXLINE( 488)			return value;
            		}
HXLINE( 482)		return (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ByteArrayData_obj,readByte,return )

void ByteArrayData_obj::readBytes( ::openfl::utils::ByteArrayData bytes,hx::Null< int >  __o_offset,hx::Null< int >  __o_length){
int offset = __o_offset.Default(0);
int length = __o_length.Default(0);
            	HX_GC_STACKFRAME(&_hx_pos_dd5cdbe7a8b93fcc_495_readBytes)
HXLINE( 497)		if ((length == (int)0)) {
HXLINE( 497)			length = (this->length - this->position);
            		}
HXLINE( 499)		if (((this->position + length) > this->length)) {
HXLINE( 501)			HX_STACK_DO_THROW( ::openfl::errors::EOFError_obj::__alloc( HX_CTX ));
            		}
HXLINE( 505)		int bytes1 = bytes->length;
HXDLIN( 505)		if ((bytes1 < (offset + length))) {
HXLINE( 507)			bytes->_hx___resize((offset + length));
            		}
HXLINE( 511)		bytes->blit(offset,hx::ObjectPtr<OBJ_>(this),this->position,length);
HXLINE( 512)		 ::openfl::utils::ByteArrayData _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 512)		_hx_tmp->position = (_hx_tmp->position + length);
            	}


HX_DEFINE_DYNAMIC_FUNC3(ByteArrayData_obj,readBytes,(void))

Float ByteArrayData_obj::readDouble(){
            	HX_GC_STACKFRAME(&_hx_pos_dd5cdbe7a8b93fcc_519_readDouble)
HXDLIN( 519)		if (hx::IsEq( this->_hx___endian,(int)1 )) {
HXLINE( 521)			if (((this->position + (int)8) > this->length)) {
HXLINE( 523)				HX_STACK_DO_THROW( ::openfl::errors::EOFError_obj::__alloc( HX_CTX ));
            			}
HXLINE( 528)			 ::openfl::utils::ByteArrayData _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 528)			_hx_tmp->position = (_hx_tmp->position + (int)8);
HXLINE( 529)			int pos = (this->position - (int)8);
HXDLIN( 529)			bool _hx_tmp1;
HXDLIN( 529)			if ((pos >= (int)0)) {
HXLINE( 529)				_hx_tmp1 = ((pos + (int)8) > this->length);
            			}
            			else {
HXLINE( 529)				_hx_tmp1 = true;
            			}
HXDLIN( 529)			if (_hx_tmp1) {
HXLINE( 529)				HX_STACK_DO_THROW(::haxe::io::Error_obj::OutsideBounds_dyn());
            			}
HXDLIN( 529)			return ::__hxcpp_memory_get_double(this->b,pos);
            		}
            		else {
HXLINE( 533)			int ch1 = this->readInt();
HXLINE( 534)			int ch2 = this->readInt();
HXLINE( 536)			return ::haxe::io::FPHelper_obj::i64ToDouble(ch2,ch1);
            		}
HXLINE( 519)		return ((Float)0.);
            	}


HX_DEFINE_DYNAMIC_FUNC0(ByteArrayData_obj,readDouble,return )

Float ByteArrayData_obj::readFloat(){
            	HX_GC_STACKFRAME(&_hx_pos_dd5cdbe7a8b93fcc_545_readFloat)
HXDLIN( 545)		if (hx::IsEq( this->_hx___endian,(int)1 )) {
HXLINE( 547)			if (((this->position + (int)4) > this->length)) {
HXLINE( 549)				HX_STACK_DO_THROW( ::openfl::errors::EOFError_obj::__alloc( HX_CTX ));
            			}
HXLINE( 554)			 ::openfl::utils::ByteArrayData _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 554)			_hx_tmp->position = (_hx_tmp->position + (int)4);
HXLINE( 555)			int pos = (this->position - (int)4);
HXDLIN( 555)			bool _hx_tmp1;
HXDLIN( 555)			if ((pos >= (int)0)) {
HXLINE( 555)				_hx_tmp1 = ((pos + (int)4) > this->length);
            			}
            			else {
HXLINE( 555)				_hx_tmp1 = true;
            			}
HXDLIN( 555)			if (_hx_tmp1) {
HXLINE( 555)				HX_STACK_DO_THROW(::haxe::io::Error_obj::OutsideBounds_dyn());
            			}
HXDLIN( 555)			return ::__hxcpp_memory_get_float(this->b,pos);
            		}
            		else {
HXLINE( 559)			return ::haxe::io::FPHelper_obj::i32ToFloat(this->readInt());
            		}
HXLINE( 545)		return ((Float)0.);
            	}


HX_DEFINE_DYNAMIC_FUNC0(ByteArrayData_obj,readFloat,return )

int ByteArrayData_obj::readInt(){
            	HX_STACKFRAME(&_hx_pos_dd5cdbe7a8b93fcc_566_readInt)
HXLINE( 568)		int ch1 = this->readUnsignedByte();
HXLINE( 569)		int ch2 = this->readUnsignedByte();
HXLINE( 570)		int ch3 = this->readUnsignedByte();
HXLINE( 571)		int ch4 = this->readUnsignedByte();
HXLINE( 573)		if (hx::IsEq( this->_hx___endian,(int)1 )) {
HXLINE( 575)			return ((int)((int)((int)((int)ch4 << (int)(int)24) | (int)((int)ch3 << (int)(int)16)) | (int)((int)ch2 << (int)(int)8)) | (int)ch1);
            		}
            		else {
HXLINE( 579)			return ((int)((int)((int)((int)ch1 << (int)(int)24) | (int)((int)ch2 << (int)(int)16)) | (int)((int)ch3 << (int)(int)8)) | (int)ch4);
            		}
HXLINE( 573)		return (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ByteArrayData_obj,readInt,return )

::String ByteArrayData_obj::readMultiByte(int length,::String charSet){
            	HX_STACKFRAME(&_hx_pos_dd5cdbe7a8b93fcc_588_readMultiByte)
HXDLIN( 588)		return this->readUTFBytes(length);
            	}


HX_DEFINE_DYNAMIC_FUNC2(ByteArrayData_obj,readMultiByte,return )

 ::Dynamic ByteArrayData_obj::readObject(){
            	HX_GC_STACKFRAME(&_hx_pos_dd5cdbe7a8b93fcc_595_readObject)
HXDLIN( 595)		int _g = this->objectEncoding;
HXDLIN( 595)		switch((int)(_g)){
            			case (int)10: {
HXLINE( 618)				::String data = this->readUTF();
HXLINE( 619)				return ::haxe::Unserializer_obj::run(data);
            			}
            			break;
            			case (int)12: {
HXLINE( 623)				::String data1 = this->readUTF();
HXLINE( 624)				return  ::haxe::format::JsonParser_obj::__alloc( HX_CTX ,data1)->parseRec();
            			}
            			break;
            			default:{
HXLINE( 628)				return null();
            			}
            		}
HXLINE( 595)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(ByteArrayData_obj,readObject,return )

int ByteArrayData_obj::readShort(){
            	HX_STACKFRAME(&_hx_pos_dd5cdbe7a8b93fcc_635_readShort)
HXLINE( 637)		int ch1 = this->readUnsignedByte();
HXLINE( 638)		int ch2 = this->readUnsignedByte();
HXLINE( 640)		int value;
HXLINE( 642)		if (hx::IsEq( this->_hx___endian,(int)1 )) {
HXLINE( 644)			value = ((int)((int)ch2 << (int)(int)8) | (int)ch1);
            		}
            		else {
HXLINE( 648)			value = ((int)((int)ch1 << (int)(int)8) | (int)ch2);
            		}
HXLINE( 652)		if ((((int)value & (int)(int)32768) != (int)0)) {
HXLINE( 654)			return (value - (int)65536);
            		}
            		else {
HXLINE( 658)			return value;
            		}
HXLINE( 652)		return (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ByteArrayData_obj,readShort,return )

int ByteArrayData_obj::readUnsignedByte(){
            	HX_GC_STACKFRAME(&_hx_pos_dd5cdbe7a8b93fcc_667_readUnsignedByte)
HXDLIN( 667)		if ((this->position < this->length)) {
HXLINE( 669)			return this->b->__get(this->position++);
            		}
            		else {
HXLINE( 673)			HX_STACK_DO_THROW( ::openfl::errors::EOFError_obj::__alloc( HX_CTX ));
            		}
HXLINE( 667)		return (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ByteArrayData_obj,readUnsignedByte,return )

int ByteArrayData_obj::readUnsignedInt(){
            	HX_STACKFRAME(&_hx_pos_dd5cdbe7a8b93fcc_681_readUnsignedInt)
HXLINE( 683)		int ch1 = this->readUnsignedByte();
HXLINE( 684)		int ch2 = this->readUnsignedByte();
HXLINE( 685)		int ch3 = this->readUnsignedByte();
HXLINE( 686)		int ch4 = this->readUnsignedByte();
HXLINE( 688)		if (hx::IsEq( this->_hx___endian,(int)1 )) {
HXLINE( 690)			return ((int)((int)((int)((int)ch4 << (int)(int)24) | (int)((int)ch3 << (int)(int)16)) | (int)((int)ch2 << (int)(int)8)) | (int)ch1);
            		}
            		else {
HXLINE( 694)			return ((int)((int)((int)((int)ch1 << (int)(int)24) | (int)((int)ch2 << (int)(int)16)) | (int)((int)ch3 << (int)(int)8)) | (int)ch4);
            		}
HXLINE( 688)		return (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ByteArrayData_obj,readUnsignedInt,return )

int ByteArrayData_obj::readUnsignedShort(){
            	HX_STACKFRAME(&_hx_pos_dd5cdbe7a8b93fcc_701_readUnsignedShort)
HXLINE( 703)		int ch1 = this->readUnsignedByte();
HXLINE( 704)		int ch2 = this->readUnsignedByte();
HXLINE( 706)		if (hx::IsEq( this->_hx___endian,(int)1 )) {
HXLINE( 708)			return (((int)ch2 << (int)(int)8) + ch1);
            		}
            		else {
HXLINE( 712)			return ((int)((int)ch1 << (int)(int)8) | (int)ch2);
            		}
HXLINE( 706)		return (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ByteArrayData_obj,readUnsignedShort,return )

::String ByteArrayData_obj::readUTF(){
            	HX_STACKFRAME(&_hx_pos_dd5cdbe7a8b93fcc_719_readUTF)
HXLINE( 721)		int bytesCount = this->readUnsignedShort();
HXLINE( 722)		return this->readUTFBytes(bytesCount);
            	}


HX_DEFINE_DYNAMIC_FUNC0(ByteArrayData_obj,readUTF,return )

::String ByteArrayData_obj::readUTFBytes(int length){
            	HX_GC_STACKFRAME(&_hx_pos_dd5cdbe7a8b93fcc_727_readUTFBytes)
HXLINE( 729)		if (((this->position + length) > this->length)) {
HXLINE( 731)			HX_STACK_DO_THROW( ::openfl::errors::EOFError_obj::__alloc( HX_CTX ));
            		}
HXLINE( 735)		 ::openfl::utils::ByteArrayData _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 735)		_hx_tmp->position = (_hx_tmp->position + length);
HXLINE( 737)		return this->getString((this->position - length),length);
            	}


HX_DEFINE_DYNAMIC_FUNC1(ByteArrayData_obj,readUTFBytes,return )

void ByteArrayData_obj::uncompress( ::Dynamic __o_algorithm){
 ::Dynamic algorithm = __o_algorithm.Default(2);
            	HX_STACKFRAME(&_hx_pos_dd5cdbe7a8b93fcc_742_uncompress)
HXLINE( 765)		 ::haxe::io::Bytes bytes;
HXDLIN( 765)		 ::Dynamic _hx_switch_0 = algorithm;
            		if (  (_hx_switch_0==(int)0) ){
HXLINE( 765)			bytes = ::lime::utils::compress::Deflate_obj::decompress(hx::ObjectPtr<OBJ_>(this));
HXDLIN( 765)			goto _hx_goto_20;
            		}
            		if (  (_hx_switch_0==(int)1) ){
HXLINE( 765)			bytes = ::lime::utils::compress::LZMA_obj::decompress(hx::ObjectPtr<OBJ_>(this));
HXDLIN( 765)			goto _hx_goto_20;
            		}
            		/* default */{
HXLINE( 765)			bytes = ::lime::utils::compress::Zlib_obj::decompress(hx::ObjectPtr<OBJ_>(this));
            		}
            		_hx_goto_20:;
HXLINE( 773)		if (hx::IsNotNull( bytes )) {
HXLINE( 775)			{
HXLINE( 775)				this->b = bytes->b;
HXDLIN( 775)				this->__length = bytes->length;
            			}
HXLINE( 777)			this->length = this->__length;
            		}
HXLINE( 781)		this->position = (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ByteArrayData_obj,uncompress,(void))

void ByteArrayData_obj::writeBoolean(bool value){
            	HX_STACKFRAME(&_hx_pos_dd5cdbe7a8b93fcc_788_writeBoolean)
HXDLIN( 788)		int _hx_tmp;
HXDLIN( 788)		if (value) {
HXDLIN( 788)			_hx_tmp = (int)1;
            		}
            		else {
HXDLIN( 788)			_hx_tmp = (int)0;
            		}
HXDLIN( 788)		this->writeByte(_hx_tmp);
            	}


HX_DEFINE_DYNAMIC_FUNC1(ByteArrayData_obj,writeBoolean,(void))

void ByteArrayData_obj::writeByte(int value){
            	HX_STACKFRAME(&_hx_pos_dd5cdbe7a8b93fcc_793_writeByte)
HXLINE( 795)		this->_hx___resize((this->position + (int)1));
HXLINE( 796)		{
HXLINE( 796)			::Array< unsigned char > _hx_tmp = this->b;
HXDLIN( 796)			_hx_tmp[this->position++] = ((int)value & (int)(int)255);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(ByteArrayData_obj,writeByte,(void))

void ByteArrayData_obj::writeBytes( ::openfl::utils::ByteArrayData bytes,hx::Null< int >  __o_offset,hx::Null< int >  __o_length){
int offset = __o_offset.Default(0);
int length = __o_length.Default(0);
            	HX_STACKFRAME(&_hx_pos_dd5cdbe7a8b93fcc_801_writeBytes)
HXLINE( 803)		if ((::openfl::utils::_ByteArray::ByteArray_Impl__obj::get_length(bytes) == (int)0)) {
HXLINE( 803)			return;
            		}
HXLINE( 804)		if ((length == (int)0)) {
HXLINE( 804)			length = (::openfl::utils::_ByteArray::ByteArray_Impl__obj::get_length(bytes) - offset);
            		}
HXLINE( 806)		this->_hx___resize((this->position + length));
HXLINE( 807)		this->blit(this->position,bytes,offset,length);
HXLINE( 809)		this->position = (this->position + length);
            	}


HX_DEFINE_DYNAMIC_FUNC3(ByteArrayData_obj,writeBytes,(void))

void ByteArrayData_obj::writeDouble(Float value){
            	HX_STACKFRAME(&_hx_pos_dd5cdbe7a8b93fcc_814_writeDouble)
HXLINE( 816)		 cpp::Int64Struct int64 = ::haxe::io::FPHelper_obj::doubleToI64(value);
HXLINE( 818)		if (hx::IsEq( this->_hx___endian,(int)1 )) {
HXLINE( 820)			this->writeInt(_hx_int64_low(int64));
HXLINE( 821)			this->writeInt(_hx_int64_high(int64));
            		}
            		else {
HXLINE( 825)			this->writeInt(_hx_int64_high(int64));
HXLINE( 826)			this->writeInt(_hx_int64_low(int64));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(ByteArrayData_obj,writeDouble,(void))

void ByteArrayData_obj::writeFloat(Float value){
            	HX_STACKFRAME(&_hx_pos_dd5cdbe7a8b93fcc_835_writeFloat)
HXDLIN( 835)		if (hx::IsEq( this->_hx___endian,(int)1 )) {
HXLINE( 837)			this->_hx___resize((this->position + (int)4));
HXLINE( 838)			this->setFloat(this->position,value);
HXLINE( 839)			 ::openfl::utils::ByteArrayData _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 839)			_hx_tmp->position = (_hx_tmp->position + (int)4);
            		}
            		else {
HXLINE( 843)			int _hx_int = ::haxe::io::FPHelper_obj::floatToI32(value);
HXLINE( 844)			this->writeInt(_hx_int);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(ByteArrayData_obj,writeFloat,(void))

void ByteArrayData_obj::writeInt(int value){
            	HX_STACKFRAME(&_hx_pos_dd5cdbe7a8b93fcc_851_writeInt)
HXLINE( 853)		this->_hx___resize((this->position + (int)4));
HXLINE( 855)		if (hx::IsEq( this->_hx___endian,(int)1 )) {
HXLINE( 857)			{
HXLINE( 857)				::Array< unsigned char > _hx_tmp = this->b;
HXDLIN( 857)				_hx_tmp[this->position++] = ((int)value & (int)(int)255);
            			}
HXLINE( 858)			{
HXLINE( 858)				::Array< unsigned char > _hx_tmp1 = this->b;
HXDLIN( 858)				_hx_tmp1[this->position++] = ((int)((int)value >> (int)(int)8) & (int)(int)255);
            			}
HXLINE( 859)			{
HXLINE( 859)				::Array< unsigned char > _hx_tmp2 = this->b;
HXDLIN( 859)				_hx_tmp2[this->position++] = ((int)((int)value >> (int)(int)16) & (int)(int)255);
            			}
HXLINE( 860)			{
HXLINE( 860)				::Array< unsigned char > _hx_tmp3 = this->b;
HXDLIN( 860)				_hx_tmp3[this->position++] = ((int)((int)value >> (int)(int)24) & (int)(int)255);
            			}
            		}
            		else {
HXLINE( 864)			{
HXLINE( 864)				::Array< unsigned char > _hx_tmp4 = this->b;
HXDLIN( 864)				_hx_tmp4[this->position++] = ((int)((int)value >> (int)(int)24) & (int)(int)255);
            			}
HXLINE( 865)			{
HXLINE( 865)				::Array< unsigned char > _hx_tmp5 = this->b;
HXDLIN( 865)				_hx_tmp5[this->position++] = ((int)((int)value >> (int)(int)16) & (int)(int)255);
            			}
HXLINE( 866)			{
HXLINE( 866)				::Array< unsigned char > _hx_tmp6 = this->b;
HXDLIN( 866)				_hx_tmp6[this->position++] = ((int)((int)value >> (int)(int)8) & (int)(int)255);
            			}
HXLINE( 867)			{
HXLINE( 867)				::Array< unsigned char > _hx_tmp7 = this->b;
HXDLIN( 867)				_hx_tmp7[this->position++] = ((int)value & (int)(int)255);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(ByteArrayData_obj,writeInt,(void))

void ByteArrayData_obj::writeMultiByte(::String value,::String charSet){
            	HX_STACKFRAME(&_hx_pos_dd5cdbe7a8b93fcc_876_writeMultiByte)
HXDLIN( 876)		this->writeUTFBytes(value);
            	}


HX_DEFINE_DYNAMIC_FUNC2(ByteArrayData_obj,writeMultiByte,(void))

void ByteArrayData_obj::writeObject( ::Dynamic object){
            	HX_STACKFRAME(&_hx_pos_dd5cdbe7a8b93fcc_883_writeObject)
HXDLIN( 883)		int _g = this->objectEncoding;
HXDLIN( 883)		switch((int)(_g)){
            			case (int)10: {
HXLINE( 906)				::String value = ::haxe::Serializer_obj::run(object);
HXLINE( 907)				this->writeUTF(value);
            			}
            			break;
            			case (int)12: {
HXLINE( 911)				::String value1 = ::haxe::format::JsonPrinter_obj::print(object,null(),null());
HXLINE( 912)				this->writeUTF(value1);
            			}
            			break;
            			default:{
HXLINE( 916)				return;
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(ByteArrayData_obj,writeObject,(void))

void ByteArrayData_obj::writeShort(int value){
            	HX_STACKFRAME(&_hx_pos_dd5cdbe7a8b93fcc_923_writeShort)
HXLINE( 925)		this->_hx___resize((this->position + (int)2));
HXLINE( 927)		if (hx::IsEq( this->_hx___endian,(int)1 )) {
HXLINE( 929)			this->b[this->position++] = value;
HXLINE( 930)			{
HXLINE( 930)				::Array< unsigned char > _hx_tmp = this->b;
HXDLIN( 930)				_hx_tmp[this->position++] = ((int)value >> (int)(int)8);
            			}
            		}
            		else {
HXLINE( 934)			{
HXLINE( 934)				::Array< unsigned char > _hx_tmp1 = this->b;
HXDLIN( 934)				_hx_tmp1[this->position++] = ((int)value >> (int)(int)8);
            			}
HXLINE( 935)			this->b[this->position++] = value;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(ByteArrayData_obj,writeShort,(void))

void ByteArrayData_obj::writeUnsignedInt(int value){
            	HX_STACKFRAME(&_hx_pos_dd5cdbe7a8b93fcc_944_writeUnsignedInt)
HXDLIN( 944)		this->writeInt(value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(ByteArrayData_obj,writeUnsignedInt,(void))

void ByteArrayData_obj::writeUTF(::String value){
            	HX_STACKFRAME(&_hx_pos_dd5cdbe7a8b93fcc_949_writeUTF)
HXLINE( 951)		 ::haxe::io::Bytes bytes = ::haxe::io::Bytes_obj::ofString(value);
HXLINE( 953)		this->writeShort(bytes->length);
HXLINE( 954)		this->writeBytes(::openfl::utils::_ByteArray::ByteArray_Impl__obj::fromArrayBuffer(bytes),null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(ByteArrayData_obj,writeUTF,(void))

void ByteArrayData_obj::writeUTFBytes(::String value){
            	HX_STACKFRAME(&_hx_pos_dd5cdbe7a8b93fcc_959_writeUTFBytes)
HXLINE( 961)		 ::haxe::io::Bytes bytes = ::haxe::io::Bytes_obj::ofString(value);
HXLINE( 962)		this->writeBytes(::openfl::utils::_ByteArray::ByteArray_Impl__obj::fromArrayBuffer(::haxe::io::Bytes_obj::ofString(value)),null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(ByteArrayData_obj,writeUTFBytes,(void))

void ByteArrayData_obj::_hx___fromBytes( ::haxe::io::Bytes bytes){
            	HX_STACKFRAME(&_hx_pos_dd5cdbe7a8b93fcc_967___fromBytes)
HXLINE( 969)		{
HXLINE( 969)			this->b = bytes->b;
HXDLIN( 969)			this->__length = bytes->length;
            		}
HXLINE( 970)		this->length = bytes->length;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ByteArrayData_obj,_hx___fromBytes,(void))

void ByteArrayData_obj::_hx___resize(int size){
            	HX_STACKFRAME(&_hx_pos_dd5cdbe7a8b93fcc_975___resize)
HXLINE( 977)		if ((size > this->__length)) {
HXLINE( 979)			 ::haxe::io::Bytes bytes = ::haxe::io::Bytes_obj::alloc(((int)((size + (int)1) * (int)3) >> (int)(int)1));
HXLINE( 981)			bytes->fill(this->length,size,(int)0);
HXLINE( 984)			if ((this->__length > (int)0)) {
HXLINE( 986)				int cacheLength = this->length;
HXLINE( 987)				this->length = this->__length;
HXLINE( 988)				bytes->blit((int)0,hx::ObjectPtr<OBJ_>(this),(int)0,this->__length);
HXLINE( 989)				this->length = cacheLength;
            			}
HXLINE( 993)			{
HXLINE( 993)				this->b = bytes->b;
HXDLIN( 993)				this->__length = bytes->length;
            			}
            		}
HXLINE( 997)		if ((this->length < size)) {
HXLINE( 999)			this->length = size;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(ByteArrayData_obj,_hx___resize,(void))

void ByteArrayData_obj::_hx___setData( ::haxe::io::Bytes bytes){
            	HX_STACKFRAME(&_hx_pos_dd5cdbe7a8b93fcc_1006___setData)
HXLINE(1014)		this->b = bytes->b;
HXLINE(1017)		this->__length = bytes->length;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ByteArrayData_obj,_hx___setData,(void))

int ByteArrayData_obj::get_bytesAvailable(){
            	HX_STACKFRAME(&_hx_pos_dd5cdbe7a8b93fcc_1035_get_bytesAvailable)
HXDLIN(1035)		return (this->length - this->position);
            	}


HX_DEFINE_DYNAMIC_FUNC0(ByteArrayData_obj,get_bytesAvailable,return )

 ::Dynamic ByteArrayData_obj::get_endian(){
            	HX_STACKFRAME(&_hx_pos_dd5cdbe7a8b93fcc_1042_get_endian)
HXDLIN(1042)		return this->_hx___endian;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ByteArrayData_obj,get_endian,return )

 ::Dynamic ByteArrayData_obj::set_endian( ::Dynamic value){
            	HX_STACKFRAME(&_hx_pos_dd5cdbe7a8b93fcc_1049_set_endian)
HXDLIN(1049)		return (this->_hx___endian = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(ByteArrayData_obj,set_endian,return )

 ::Dynamic ByteArrayData_obj::_hx___defaultEndian;

 ::openfl::utils::ByteArrayData ByteArrayData_obj::fromBytes( ::haxe::io::Bytes bytes){
            	HX_GC_STACKFRAME(&_hx_pos_dd5cdbe7a8b93fcc_446_fromBytes)
HXLINE( 448)		 ::openfl::utils::ByteArrayData result =  ::openfl::utils::ByteArrayData_obj::__alloc( HX_CTX ,null());
HXLINE( 449)		result->_hx___fromBytes(bytes);
HXLINE( 450)		return result;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ByteArrayData_obj,fromBytes,return )


hx::ObjectPtr< ByteArrayData_obj > ByteArrayData_obj::__new(hx::Null< int >  __o_length) {
	hx::ObjectPtr< ByteArrayData_obj > __this = new ByteArrayData_obj();
	__this->__construct(__o_length);
	return __this;
}

hx::ObjectPtr< ByteArrayData_obj > ByteArrayData_obj::__alloc(hx::Ctx *_hx_ctx,hx::Null< int >  __o_length) {
	ByteArrayData_obj *__this = (ByteArrayData_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(ByteArrayData_obj), true, "openfl.utils.ByteArrayData"));
	*(void **)__this = ByteArrayData_obj::_hx_vtable;
	__this->__construct(__o_length);
	return __this;
}

ByteArrayData_obj::ByteArrayData_obj()
{
}

void ByteArrayData_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ByteArrayData);
	HX_MARK_MEMBER_NAME(objectEncoding,"objectEncoding");
	HX_MARK_MEMBER_NAME(position,"position");
	HX_MARK_MEMBER_NAME(_hx___endian,"__endian");
	HX_MARK_MEMBER_NAME(__length,"__length");
	 ::haxe::io::Bytes_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void ByteArrayData_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(objectEncoding,"objectEncoding");
	HX_VISIT_MEMBER_NAME(position,"position");
	HX_VISIT_MEMBER_NAME(_hx___endian,"__endian");
	HX_VISIT_MEMBER_NAME(__length,"__length");
	 ::haxe::io::Bytes_obj::__Visit(HX_VISIT_ARG);
}

hx::Val ByteArrayData_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"clear") ) { return hx::Val( clear_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"endian") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_endian() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"deflate") ) { return hx::Val( deflate_dyn() ); }
		if (HX_FIELD_EQ(inName,"inflate") ) { return hx::Val( inflate_dyn() ); }
		if (HX_FIELD_EQ(inName,"readInt") ) { return hx::Val( readInt_dyn() ); }
		if (HX_FIELD_EQ(inName,"readUTF") ) { return hx::Val( readUTF_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"position") ) { return hx::Val( position ); }
		if (HX_FIELD_EQ(inName,"__endian") ) { return hx::Val( _hx___endian ); }
		if (HX_FIELD_EQ(inName,"__length") ) { return hx::Val( __length ); }
		if (HX_FIELD_EQ(inName,"compress") ) { return hx::Val( compress_dyn() ); }
		if (HX_FIELD_EQ(inName,"readByte") ) { return hx::Val( readByte_dyn() ); }
		if (HX_FIELD_EQ(inName,"writeInt") ) { return hx::Val( writeInt_dyn() ); }
		if (HX_FIELD_EQ(inName,"writeUTF") ) { return hx::Val( writeUTF_dyn() ); }
		if (HX_FIELD_EQ(inName,"__resize") ) { return hx::Val( _hx___resize_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"readBytes") ) { return hx::Val( readBytes_dyn() ); }
		if (HX_FIELD_EQ(inName,"readFloat") ) { return hx::Val( readFloat_dyn() ); }
		if (HX_FIELD_EQ(inName,"readShort") ) { return hx::Val( readShort_dyn() ); }
		if (HX_FIELD_EQ(inName,"writeByte") ) { return hx::Val( writeByte_dyn() ); }
		if (HX_FIELD_EQ(inName,"__setData") ) { return hx::Val( _hx___setData_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"readDouble") ) { return hx::Val( readDouble_dyn() ); }
		if (HX_FIELD_EQ(inName,"readObject") ) { return hx::Val( readObject_dyn() ); }
		if (HX_FIELD_EQ(inName,"uncompress") ) { return hx::Val( uncompress_dyn() ); }
		if (HX_FIELD_EQ(inName,"writeBytes") ) { return hx::Val( writeBytes_dyn() ); }
		if (HX_FIELD_EQ(inName,"writeFloat") ) { return hx::Val( writeFloat_dyn() ); }
		if (HX_FIELD_EQ(inName,"writeShort") ) { return hx::Val( writeShort_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_endian") ) { return hx::Val( get_endian_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_endian") ) { return hx::Val( set_endian_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"readBoolean") ) { return hx::Val( readBoolean_dyn() ); }
		if (HX_FIELD_EQ(inName,"writeDouble") ) { return hx::Val( writeDouble_dyn() ); }
		if (HX_FIELD_EQ(inName,"writeObject") ) { return hx::Val( writeObject_dyn() ); }
		if (HX_FIELD_EQ(inName,"__fromBytes") ) { return hx::Val( _hx___fromBytes_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"readUTFBytes") ) { return hx::Val( readUTFBytes_dyn() ); }
		if (HX_FIELD_EQ(inName,"writeBoolean") ) { return hx::Val( writeBoolean_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"readMultiByte") ) { return hx::Val( readMultiByte_dyn() ); }
		if (HX_FIELD_EQ(inName,"writeUTFBytes") ) { return hx::Val( writeUTFBytes_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"bytesAvailable") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_bytesAvailable() ); }
		if (HX_FIELD_EQ(inName,"objectEncoding") ) { return hx::Val( objectEncoding ); }
		if (HX_FIELD_EQ(inName,"writeMultiByte") ) { return hx::Val( writeMultiByte_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"readUnsignedInt") ) { return hx::Val( readUnsignedInt_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"readUnsignedByte") ) { return hx::Val( readUnsignedByte_dyn() ); }
		if (HX_FIELD_EQ(inName,"writeUnsignedInt") ) { return hx::Val( writeUnsignedInt_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"readUnsignedShort") ) { return hx::Val( readUnsignedShort_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"get_bytesAvailable") ) { return hx::Val( get_bytesAvailable_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool ByteArrayData_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"fromBytes") ) { outValue = fromBytes_dyn(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"__defaultEndian") ) { outValue = ( _hx___defaultEndian ); return true; }
	}
	return false;
}

hx::Val ByteArrayData_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"endian") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_endian(inValue.Cast<  ::Dynamic >()) ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"position") ) { position=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__endian") ) { _hx___endian=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__length") ) { __length=inValue.Cast< int >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"objectEncoding") ) { objectEncoding=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool ByteArrayData_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 15:
		if (HX_FIELD_EQ(inName,"__defaultEndian") ) { _hx___defaultEndian=ioValue.Cast<  ::Dynamic >(); return true; }
	}
	return false;
}

void ByteArrayData_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("bytesAvailable","\xde","\x4b","\x9d","\x9b"));
	outFields->push(HX_HCSTRING("endian","\x9b","\x98","\x88","\xfa"));
	outFields->push(HX_HCSTRING("objectEncoding","\xb2","\x1e","\x15","\x2a"));
	outFields->push(HX_HCSTRING("position","\xa9","\xa0","\xfa","\xca"));
	outFields->push(HX_HCSTRING("__endian","\xbb","\x03","\xb8","\xa2"));
	outFields->push(HX_HCSTRING("__length","\x06","\x00","\x37","\x47"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo ByteArrayData_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(ByteArrayData_obj,objectEncoding),HX_HCSTRING("objectEncoding","\xb2","\x1e","\x15","\x2a")},
	{hx::fsInt,(int)offsetof(ByteArrayData_obj,position),HX_HCSTRING("position","\xa9","\xa0","\xfa","\xca")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(ByteArrayData_obj,_hx___endian),HX_HCSTRING("__endian","\xbb","\x03","\xb8","\xa2")},
	{hx::fsInt,(int)offsetof(ByteArrayData_obj,__length),HX_HCSTRING("__length","\x06","\x00","\x37","\x47")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo ByteArrayData_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*Dynamic*/ ,(void *) &ByteArrayData_obj::_hx___defaultEndian,HX_HCSTRING("__defaultEndian","\x1c","\xa5","\xb3","\x7c")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String ByteArrayData_obj_sMemberFields[] = {
	HX_HCSTRING("objectEncoding","\xb2","\x1e","\x15","\x2a"),
	HX_HCSTRING("position","\xa9","\xa0","\xfa","\xca"),
	HX_HCSTRING("__endian","\xbb","\x03","\xb8","\xa2"),
	HX_HCSTRING("__length","\x06","\x00","\x37","\x47"),
	HX_HCSTRING("clear","\x8d","\x71","\x5b","\x48"),
	HX_HCSTRING("compress","\xa2","\x47","\xbf","\x83"),
	HX_HCSTRING("deflate","\x6b","\x0b","\xfa","\xa2"),
	HX_HCSTRING("inflate","\x87","\x9c","\x1b","\x0c"),
	HX_HCSTRING("readBoolean","\xf2","\x7d","\xea","\xd0"),
	HX_HCSTRING("readByte","\x7e","\xf9","\x1a","\x69"),
	HX_HCSTRING("readBytes","\x35","\x55","\x7f","\x8e"),
	HX_HCSTRING("readDouble","\x07","\x0f","\x47","\x2c"),
	HX_HCSTRING("readFloat","\x66","\x12","\x7e","\xd3"),
	HX_HCSTRING("readInt","\x39","\xb3","\xc9","\x02"),
	HX_HCSTRING("readMultiByte","\xeb","\x7f","\xc9","\x15"),
	HX_HCSTRING("readObject","\xb5","\x62","\xbb","\x0e"),
	HX_HCSTRING("readShort","\x46","\xd1","\x0e","\x4d"),
	HX_HCSTRING("readUnsignedByte","\x13","\x0b","\xce","\x9b"),
	HX_HCSTRING("readUnsignedInt","\x44","\xab","\x4f","\x05"),
	HX_HCSTRING("readUnsignedShort","\x11","\x22","\x0b","\x77"),
	HX_HCSTRING("readUTF","\x71","\xb7","\xd2","\x02"),
	HX_HCSTRING("readUTFBytes","\x3a","\x27","\x0f","\x52"),
	HX_HCSTRING("uncompress","\xfb","\x2e","\x83","\x09"),
	HX_HCSTRING("writeBoolean","\x89","\x8f","\x2d","\x43"),
	HX_HCSTRING("writeByte","\x87","\x13","\xd7","\x49"),
	HX_HCSTRING("writeBytes","\x0c","\x03","\x5a","\x52"),
	HX_HCSTRING("writeDouble","\x50","\x7d","\xc4","\xc7"),
	HX_HCSTRING("writeFloat","\x3d","\xc0","\x58","\x97"),
	HX_HCSTRING("writeInt","\x50","\x6d","\xf0","\x23"),
	HX_HCSTRING("writeMultiByte","\x42","\x65","\x25","\xec"),
	HX_HCSTRING("writeObject","\xfe","\xd0","\x38","\xaa"),
	HX_HCSTRING("writeShort","\x1d","\x7f","\xe9","\x10"),
	HX_HCSTRING("writeUnsignedInt","\x5b","\xd4","\x70","\x16"),
	HX_HCSTRING("writeUTF","\x88","\x71","\xf9","\x23"),
	HX_HCSTRING("writeUTFBytes","\xc3","\x79","\x7b","\xda"),
	HX_HCSTRING("__fromBytes","\x81","\x3b","\x4d","\xa0"),
	HX_HCSTRING("__resize","\x14","\xc5","\xaa","\xb0"),
	HX_HCSTRING("__setData","\xcc","\xe7","\x35","\x89"),
	HX_HCSTRING("get_bytesAvailable","\xa7","\x2c","\x37","\x37"),
	HX_HCSTRING("get_endian","\x64","\x08","\x10","\xeb"),
	HX_HCSTRING("set_endian","\xd8","\xa6","\x8d","\xee"),
	::String(null()) };

static void ByteArrayData_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ByteArrayData_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(ByteArrayData_obj::_hx___defaultEndian,"__defaultEndian");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ByteArrayData_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ByteArrayData_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(ByteArrayData_obj::_hx___defaultEndian,"__defaultEndian");
};

#endif

hx::Class ByteArrayData_obj::__mClass;

static ::String ByteArrayData_obj_sStaticFields[] = {
	HX_HCSTRING("__defaultEndian","\x1c","\xa5","\xb3","\x7c"),
	HX_HCSTRING("fromBytes","\xa1","\xf2","\x20","\x72"),
	::String(null())
};

void ByteArrayData_obj::__register()
{
	hx::Object *dummy = new ByteArrayData_obj;
	ByteArrayData_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("openfl.utils.ByteArrayData","\x40","\xf9","\x66","\x4c");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &ByteArrayData_obj::__GetStatic;
	__mClass->mSetStaticField = &ByteArrayData_obj::__SetStatic;
	__mClass->mMarkFunc = ByteArrayData_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(ByteArrayData_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(ByteArrayData_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< ByteArrayData_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ByteArrayData_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ByteArrayData_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ByteArrayData_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void ByteArrayData_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_dd5cdbe7a8b93fcc_317_boot)
HXDLIN( 317)		_hx___defaultEndian = null();
            	}
}

} // end namespace openfl
} // end namespace utils
