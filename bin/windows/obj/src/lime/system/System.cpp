// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_EReg
#include <EReg.h>
#endif
#ifndef INCLUDED_Reflect
#include <Reflect.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_Sys
#include <Sys.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_IntMap
#include <haxe/ds/IntMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_haxe_io_Input
#include <haxe/io/Input.h>
#endif
#ifndef INCLUDED_lime__backend_native_NativeCFFI
#include <lime/_backend/native/NativeCFFI.h>
#endif
#ifndef INCLUDED_lime_app_Application
#include <lime/app/Application.h>
#endif
#ifndef INCLUDED_lime_app_IModule
#include <lime/app/IModule.h>
#endif
#ifndef INCLUDED_lime_app_Module
#include <lime/app/Module.h>
#endif
#ifndef INCLUDED_lime_app__Event_Int_Void
#include <lime/app/_Event_Int_Void.h>
#endif
#ifndef INCLUDED_lime_math_Rectangle
#include <lime/math/Rectangle.h>
#endif
#ifndef INCLUDED_lime_system_CFFI
#include <lime/system/CFFI.h>
#endif
#ifndef INCLUDED_lime_system_Display
#include <lime/system/Display.h>
#endif
#ifndef INCLUDED_lime_system_DisplayMode
#include <lime/system/DisplayMode.h>
#endif
#ifndef INCLUDED_lime_system_Endian
#include <lime/system/Endian.h>
#endif
#ifndef INCLUDED_lime_system_System
#include <lime/system/System.h>
#endif
#ifndef INCLUDED_lime_utils_ArrayBufferView
#include <lime/utils/ArrayBufferView.h>
#endif
#ifndef INCLUDED_lime_utils_TAError
#include <lime/utils/TAError.h>
#endif
#ifndef INCLUDED_sys_io_Process
#include <sys/io/Process.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_f2b41f959dca9627_200_exit,"lime.system.System","exit",0x19210697,"lime.system.System.exit","lime/system/System.hx",200,0x6434b429)
HX_LOCAL_STACK_FRAME(_hx_pos_f2b41f959dca9627_225_getDisplay,"lime.system.System","getDisplay",0x2e892085,"lime.system.System.getDisplay","lime/system/System.hx",225,0x6434b429)
HX_LOCAL_STACK_FRAME(_hx_pos_f2b41f959dca9627_322_getTimer,"lime.system.System","getTimer",0xb1bf8f48,"lime.system.System.getTimer","lime/system/System.hx",322,0x6434b429)
HX_LOCAL_STACK_FRAME(_hx_pos_f2b41f959dca9627_338_load,"lime.system.System","load",0x1dbaa99f,"lime.system.System.load","lime/system/System.hx",338,0x6434b429)
HX_LOCAL_STACK_FRAME(_hx_pos_f2b41f959dca9627_348_openFile,"lime.system.System","openFile",0x26aa6b5f,"lime.system.System.openFile","lime/system/System.hx",348,0x6434b429)
HX_LOCAL_STACK_FRAME(_hx_pos_f2b41f959dca9627_388_openURL,"lime.system.System","openURL",0x0840dfec,"lime.system.System.openURL","lime/system/System.hx",388,0x6434b429)
HX_LOCAL_STACK_FRAME(_hx_pos_f2b41f959dca9627_418___copyMissingFields,"lime.system.System","__copyMissingFields",0x05666311,"lime.system.System.__copyMissingFields","lime/system/System.hx",418,0x6434b429)
HX_LOCAL_STACK_FRAME(_hx_pos_f2b41f959dca9627_439___getDirectory,"lime.system.System","__getDirectory",0xc98892d0,"lime.system.System.__getDirectory","lime/system/System.hx",439,0x6434b429)
HX_LOCAL_STACK_FRAME(_hx_pos_f2b41f959dca9627_519___parseArguments,"lime.system.System","__parseArguments",0xf4d0dcbc,"lime.system.System.__parseArguments","lime/system/System.hx",519,0x6434b429)
HX_LOCAL_STACK_FRAME(_hx_pos_f2b41f959dca9627_609___parseBool,"lime.system.System","__parseBool",0x34d2e084,"lime.system.System.__parseBool","lime/system/System.hx",609,0x6434b429)
HX_LOCAL_STACK_FRAME(_hx_pos_f2b41f959dca9627_614___registerEntryPoint,"lime.system.System","__registerEntryPoint",0x78d55f5a,"lime.system.System.__registerEntryPoint","lime/system/System.hx",614,0x6434b429)
HX_LOCAL_STACK_FRAME(_hx_pos_f2b41f959dca9627_634___runProcess,"lime.system.System","__runProcess",0x7e9f5dfd,"lime.system.System.__runProcess","lime/system/System.hx",634,0x6434b429)
HX_LOCAL_STACK_FRAME(_hx_pos_f2b41f959dca9627_663_get_allowScreenTimeout,"lime.system.System","get_allowScreenTimeout",0x287e314e,"lime.system.System.get_allowScreenTimeout","lime/system/System.hx",663,0x6434b429)
HX_LOCAL_STACK_FRAME(_hx_pos_f2b41f959dca9627_674_set_allowScreenTimeout,"lime.system.System","set_allowScreenTimeout",0x5c29adc2,"lime.system.System.set_allowScreenTimeout","lime/system/System.hx",674,0x6434b429)
HX_LOCAL_STACK_FRAME(_hx_pos_f2b41f959dca9627_682_get_applicationDirectory,"lime.system.System","get_applicationDirectory",0xf6955c7f,"lime.system.System.get_applicationDirectory","lime/system/System.hx",682,0x6434b429)
HX_LOCAL_STACK_FRAME(_hx_pos_f2b41f959dca9627_695_get_applicationStorageDirectory,"lime.system.System","get_applicationStorageDirectory",0x34818fe0,"lime.system.System.get_applicationStorageDirectory","lime/system/System.hx",695,0x6434b429)
HX_LOCAL_STACK_FRAME(_hx_pos_f2b41f959dca9627_708_get_deviceModel,"lime.system.System","get_deviceModel",0x3a3e2ff1,"lime.system.System.get_deviceModel","lime/system/System.hx",708,0x6434b429)
HX_LOCAL_STACK_FRAME(_hx_pos_f2b41f959dca9627_739_get_deviceVendor,"lime.system.System","get_deviceVendor",0x99fb9840,"lime.system.System.get_deviceVendor","lime/system/System.hx",739,0x6434b429)
HX_LOCAL_STACK_FRAME(_hx_pos_f2b41f959dca9627_763_get_desktopDirectory,"lime.system.System","get_desktopDirectory",0x483b2773,"lime.system.System.get_desktopDirectory","lime/system/System.hx",763,0x6434b429)
HX_LOCAL_STACK_FRAME(_hx_pos_f2b41f959dca9627_776_get_documentsDirectory,"lime.system.System","get_documentsDirectory",0x4a6a8557,"lime.system.System.get_documentsDirectory","lime/system/System.hx",776,0x6434b429)
HX_LOCAL_STACK_FRAME(_hx_pos_f2b41f959dca9627_789_get_endianness,"lime.system.System","get_endianness",0x4df50bb4,"lime.system.System.get_endianness","lime/system/System.hx",789,0x6434b429)
HX_LOCAL_STACK_FRAME(_hx_pos_f2b41f959dca9627_812_get_fontsDirectory,"lime.system.System","get_fontsDirectory",0x8242b40b,"lime.system.System.get_fontsDirectory","lime/system/System.hx",812,0x6434b429)
HX_LOCAL_STACK_FRAME(_hx_pos_f2b41f959dca9627_828_get_numDisplays,"lime.system.System","get_numDisplays",0x5056f915,"lime.system.System.get_numDisplays","lime/system/System.hx",828,0x6434b429)
HX_LOCAL_STACK_FRAME(_hx_pos_f2b41f959dca9627_836_get_platformLabel,"lime.system.System","get_platformLabel",0xc2bb267f,"lime.system.System.get_platformLabel","lime/system/System.hx",836,0x6434b429)
HX_LOCAL_STACK_FRAME(_hx_pos_f2b41f959dca9627_859_get_platformName,"lime.system.System","get_platformName",0x82c4f420,"lime.system.System.get_platformName","lime/system/System.hx",859,0x6434b429)
HX_LOCAL_STACK_FRAME(_hx_pos_f2b41f959dca9627_900_get_platformVersion,"lime.system.System","get_platformVersion",0xbd9d7863,"lime.system.System.get_platformVersion","lime/system/System.hx",900,0x6434b429)
HX_LOCAL_STACK_FRAME(_hx_pos_f2b41f959dca9627_927_get_userDirectory,"lime.system.System","get_userDirectory",0x2b5522e0,"lime.system.System.get_userDirectory","lime/system/System.hx",927,0x6434b429)
HX_LOCAL_STACK_FRAME(_hx_pos_f2b41f959dca9627_79_boot,"lime.system.System","boot",0x171e93ab,"lime.system.System.boot","lime/system/System.hx",79,0x6434b429)

#if defined(HX_WINDOWS)
extern "C" {
	_declspec(dllexport) unsigned long NvOptimusEnablement = 0x00000001;
	_declspec(dllexport) int AmdPowerXpressRequestHighPerformance = 1;
}
#endif

namespace lime{
namespace _hx_system{

void System_obj::__construct() { }

Dynamic System_obj::__CreateEmpty() { return new System_obj; }

void *System_obj::_hx_vtable = 0;

Dynamic System_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< System_obj > _hx_result = new System_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool System_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x36083f93;
}

bool System_obj::disableCFFI;

 ::haxe::ds::StringMap System_obj::_hx___applicationConfig;

::String System_obj::_hx___applicationDirectory;

 ::haxe::ds::StringMap System_obj::_hx___applicationEntryPoint;

::String System_obj::_hx___applicationStorageDirectory;

::String System_obj::_hx___desktopDirectory;

::String System_obj::_hx___deviceModel;

::String System_obj::_hx___deviceVendor;

 ::haxe::ds::IntMap System_obj::_hx___directories;

::String System_obj::_hx___documentsDirectory;

 ::lime::_hx_system::Endian System_obj::_hx___endianness;

::String System_obj::_hx___fontsDirectory;

::String System_obj::_hx___platformLabel;

::String System_obj::_hx___platformName;

::String System_obj::_hx___platformVersion;

::String System_obj::_hx___userDirectory;

void System_obj::exit(int code){
            	HX_STACKFRAME(&_hx_pos_f2b41f959dca9627_200_exit)
HXLINE( 203)		if (hx::IsNotNull( ::lime::app::Application_obj::current )) {
HXLINE( 205)			::lime::app::Application_obj::current->onExit->dispatch(code);
HXLINE( 207)			if (::lime::app::Application_obj::current->onExit->canceled) {
HXLINE( 209)				return;
            			}
            		}
HXLINE( 217)		::Sys_obj::exit(code);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(System_obj,exit,(void))

 ::lime::_hx_system::Display System_obj::getDisplay(int id){
            	HX_GC_STACKFRAME(&_hx_pos_f2b41f959dca9627_225_getDisplay)
HXLINE( 228)		 ::Dynamic displayInfo = ( ( ::Dynamic)(::lime::_backend::native::NativeCFFI_obj::cffi_lime_system_get_display(id)) );
HXLINE( 230)		if (hx::IsNotNull( displayInfo )) {
HXLINE( 232)			 ::lime::_hx_system::Display display =  ::lime::_hx_system::Display_obj::__alloc( HX_CTX );
HXLINE( 233)			display->id = id;
HXLINE( 234)			display->name = ( (::String)(displayInfo->__Field(HX_("name",4b,72,ff,48),hx::paccDynamic)) );
HXLINE( 235)			display->bounds =  ::lime::math::Rectangle_obj::__alloc( HX_CTX , ::Dynamic( ::Dynamic(displayInfo->__Field(HX_("bounds",75,86,1d,66),hx::paccDynamic))->__Field(HX_("x",78,00,00,00),hx::paccDynamic)), ::Dynamic( ::Dynamic(displayInfo->__Field(HX_("bounds",75,86,1d,66),hx::paccDynamic))->__Field(HX_("y",79,00,00,00),hx::paccDynamic)), ::Dynamic( ::Dynamic(displayInfo->__Field(HX_("bounds",75,86,1d,66),hx::paccDynamic))->__Field(HX_("width",06,b6,62,ca),hx::paccDynamic)), ::Dynamic( ::Dynamic(displayInfo->__Field(HX_("bounds",75,86,1d,66),hx::paccDynamic))->__Field(HX_("height",e7,07,4c,02),hx::paccDynamic)));
HXLINE( 249)			display->dpi = ( (Float)(displayInfo->__Field(HX_("dpi",5d,43,4c,00),hx::paccDynamic)) );
HXLINE( 252)			display->supportedModes = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 254)			 ::lime::_hx_system::DisplayMode displayMode;
HXLINE( 256)			{
HXLINE( 256)				int _g = (int)0;
HXDLIN( 256)				::cpp::VirtualArray _g1 = hx::TCast< ::cpp::VirtualArray >::cast( ::Dynamic(displayInfo->__Field(HX_("supportedModes",a2,a6,b8,b7),hx::paccDynamic)));
HXDLIN( 256)				while((_g < _g1->get_length())){
HXLINE( 256)					 ::Dynamic mode = _g1->__get(_g);
HXDLIN( 256)					_g = (_g + (int)1);
HXLINE( 258)					displayMode =  ::lime::_hx_system::DisplayMode_obj::__alloc( HX_CTX , ::Dynamic(mode->__Field(HX_("width",06,b6,62,ca),hx::paccDynamic)), ::Dynamic(mode->__Field(HX_("height",e7,07,4c,02),hx::paccDynamic)), ::Dynamic(mode->__Field(HX_("refreshRate",5b,e2,3f,40),hx::paccDynamic)), ::Dynamic(mode->__Field(HX_("pixelFormat",5d,72,1b,6f),hx::paccDynamic)));
HXLINE( 259)					display->supportedModes->push(displayMode);
            				}
            			}
HXLINE( 263)			 ::Dynamic mode1 = displayInfo->__Field(HX_("currentMode",3c,ac,f2,80),hx::paccDynamic);
HXLINE( 264)			 ::lime::_hx_system::DisplayMode currentMode =  ::lime::_hx_system::DisplayMode_obj::__alloc( HX_CTX , ::Dynamic(mode1->__Field(HX_("width",06,b6,62,ca),hx::paccDynamic)), ::Dynamic(mode1->__Field(HX_("height",e7,07,4c,02),hx::paccDynamic)), ::Dynamic(mode1->__Field(HX_("refreshRate",5b,e2,3f,40),hx::paccDynamic)), ::Dynamic(mode1->__Field(HX_("pixelFormat",5d,72,1b,6f),hx::paccDynamic)));
HXLINE( 266)			{
HXLINE( 266)				int _g2 = (int)0;
HXDLIN( 266)				::Array< ::Dynamic> _g11 = display->supportedModes;
HXDLIN( 266)				while((_g2 < _g11->length)){
HXLINE( 266)					 ::lime::_hx_system::DisplayMode mode2 = _g11->__get(_g2).StaticCast<  ::lime::_hx_system::DisplayMode >();
HXDLIN( 266)					_g2 = (_g2 + (int)1);
HXLINE( 268)					bool _hx_tmp;
HXDLIN( 268)					bool _hx_tmp1;
HXDLIN( 268)					bool _hx_tmp2;
HXDLIN( 268)					if ((currentMode->pixelFormat == mode2->pixelFormat)) {
HXLINE( 268)						_hx_tmp2 = (currentMode->width == mode2->width);
            					}
            					else {
HXLINE( 268)						_hx_tmp2 = false;
            					}
HXDLIN( 268)					if (_hx_tmp2) {
HXLINE( 268)						_hx_tmp1 = (currentMode->height == mode2->height);
            					}
            					else {
HXLINE( 268)						_hx_tmp1 = false;
            					}
HXDLIN( 268)					if (_hx_tmp1) {
HXLINE( 268)						_hx_tmp = (currentMode->refreshRate == mode2->refreshRate);
            					}
            					else {
HXLINE( 268)						_hx_tmp = false;
            					}
HXDLIN( 268)					if (_hx_tmp) {
HXLINE( 270)						currentMode = mode2;
HXLINE( 271)						goto _hx_goto_2;
            					}
            				}
            				_hx_goto_2:;
            			}
HXLINE( 277)			display->currentMode = currentMode;
HXLINE( 279)			return display;
            		}
HXLINE( 310)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(System_obj,getDisplay,return )

int System_obj::getTimer(){
            	HX_STACKFRAME(&_hx_pos_f2b41f959dca9627_322_getTimer)
HXDLIN( 322)		return ::lime::_backend::native::NativeCFFI_obj::cffi_lime_system_get_timer();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(System_obj,getTimer,return )

 ::Dynamic System_obj::load(::String library,::String method,hx::Null< int >  __o_args,hx::Null< bool >  __o_lazy){
int args = __o_args.Default(0);
bool lazy = __o_lazy.Default(false);
            	HX_STACKFRAME(&_hx_pos_f2b41f959dca9627_338_load)
HXDLIN( 338)		return ::lime::_hx_system::CFFI_obj::load(library,method,args,lazy);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(System_obj,load,return )

void System_obj::openFile(::String path){
            	HX_STACKFRAME(&_hx_pos_f2b41f959dca9627_348_openFile)
HXDLIN( 348)		if (hx::IsNotNull( path )) {
HXLINE( 352)			::Sys_obj::command(HX_("start",62,74,0b,84),::Array_obj< ::String >::__new(2)->init(0,HX_("",00,00,00,00))->init(1,path));
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(System_obj,openFile,(void))

void System_obj::openURL(::String url,::String __o_target){
::String target = __o_target.Default(HX_HCSTRING("_blank","\x95","\x26","\xd9","\xb0"));
            	HX_STACKFRAME(&_hx_pos_f2b41f959dca9627_388_openURL)
HXDLIN( 388)		if (hx::IsNotNull( url )) {
HXLINE( 392)			::lime::_hx_system::System_obj::openFile(url);
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(System_obj,openURL,(void))

void System_obj::_hx___copyMissingFields( ::Dynamic target, ::Dynamic source){
            	HX_STACKFRAME(&_hx_pos_f2b41f959dca9627_418___copyMissingFields)
HXLINE( 420)		bool _hx_tmp;
HXDLIN( 420)		if (hx::IsNotNull( source )) {
HXLINE( 420)			_hx_tmp = hx::IsNull( target );
            		}
            		else {
HXLINE( 420)			_hx_tmp = true;
            		}
HXDLIN( 420)		if (_hx_tmp) {
HXLINE( 420)			return;
            		}
HXLINE( 422)		{
HXLINE( 422)			int _g = (int)0;
HXDLIN( 422)			::Array< ::String > _g1 = ::Reflect_obj::fields(source);
HXDLIN( 422)			while((_g < _g1->length)){
HXLINE( 422)				::String field = _g1->__get(_g);
HXDLIN( 422)				_g = (_g + (int)1);
HXLINE( 424)				if (!(::Reflect_obj::hasField(target,field))) {
HXLINE( 426)					::Reflect_obj::setField(target,field,::Reflect_obj::field(source,field));
            				}
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(System_obj,_hx___copyMissingFields,(void))

::String System_obj::_hx___getDirectory(int type){
            	HX_STACKFRAME(&_hx_pos_f2b41f959dca9627_439___getDirectory)
HXDLIN( 439)		if (::lime::_hx_system::System_obj::_hx___directories->exists(type)) {
HXLINE( 441)			return ( (::String)(::lime::_hx_system::System_obj::_hx___directories->get(type)) );
            		}
            		else {
HXLINE( 445)			::String path;
HXLINE( 447)			if ((type == (int)1)) {
HXLINE( 449)				::String company = HX_("MyCompany",11,c3,2e,cc);
HXLINE( 450)				::String file = HX_("MyApplication",24,d3,d1,1c);
HXLINE( 452)				bool _hx_tmp;
HXDLIN( 452)				if (hx::IsNotNull( ::lime::app::Application_obj::current )) {
HXLINE( 452)					_hx_tmp = hx::IsNotNull( ::lime::app::Application_obj::current->config );
            				}
            				else {
HXLINE( 452)					_hx_tmp = false;
            				}
HXDLIN( 452)				if (_hx_tmp) {
HXLINE( 454)					if (hx::IsNotNull( ( (::String)(::lime::app::Application_obj::current->config->__Field(HX_("company",3d,15,69,83),hx::paccDynamic)) ) )) {
HXLINE( 456)						company = ( (::String)(::lime::app::Application_obj::current->config->__Field(HX_("company",3d,15,69,83),hx::paccDynamic)) );
            					}
HXLINE( 460)					if (hx::IsNotNull( ( (::String)(::lime::app::Application_obj::current->config->__Field(HX_("file",7c,ce,bb,43),hx::paccDynamic)) ) )) {
HXLINE( 462)						file = ( (::String)(::lime::app::Application_obj::current->config->__Field(HX_("file",7c,ce,bb,43),hx::paccDynamic)) );
            					}
            				}
HXLINE( 468)				path = ( ( ::Dynamic)(::lime::_backend::native::NativeCFFI_obj::cffi_lime_system_get_directory(type,company,file)) );
            			}
            			else {
HXLINE( 472)				path = ( ( ::Dynamic)(::lime::_backend::native::NativeCFFI_obj::cffi_lime_system_get_directory(type,null(),null())) );
            			}
HXLINE( 477)			::String seperator = HX_("\\",5c,00,00,00);
HXLINE( 482)			bool _hx_tmp1;
HXDLIN( 482)			bool _hx_tmp2;
HXDLIN( 482)			if (hx::IsNotNull( path )) {
HXLINE( 482)				_hx_tmp2 = (path.length > (int)0);
            			}
            			else {
HXLINE( 482)				_hx_tmp2 = false;
            			}
HXDLIN( 482)			if (_hx_tmp2) {
HXLINE( 482)				_hx_tmp1 = !(::StringTools_obj::endsWith(path,seperator));
            			}
            			else {
HXLINE( 482)				_hx_tmp1 = false;
            			}
HXDLIN( 482)			if (_hx_tmp1) {
HXLINE( 484)				path = (path + seperator);
            			}
HXLINE( 488)			::lime::_hx_system::System_obj::_hx___directories->set(type,path);
HXLINE( 489)			return path;
            		}
HXLINE( 439)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(System_obj,_hx___getDirectory,return )

void System_obj::_hx___parseArguments( ::Dynamic config){
            	HX_GC_STACKFRAME(&_hx_pos_f2b41f959dca9627_519___parseArguments)
HXLINE( 523)		::Array< ::String > arguments = ::Sys_obj::args();
HXLINE( 524)		 ::EReg stripQuotes =  ::EReg_obj::__alloc( HX_CTX ,HX_("^['\"](.*)['\"]$",13,22,1b,37),HX_("",00,00,00,00));
HXLINE( 525)		int equals;
HXDLIN( 525)		::String argValue;
HXDLIN( 525)		 ::haxe::ds::StringMap parameters = null();
HXLINE( 526)		::String windowParamPrefix = HX_("--window-",dd,62,c2,0a);
HXLINE( 528)		if (hx::IsNotNull( arguments )) {
HXLINE( 530)			int _g = (int)0;
HXDLIN( 530)			while((_g < arguments->length)){
HXLINE( 530)				::String argument = arguments->__get(_g);
HXDLIN( 530)				_g = (_g + (int)1);
HXLINE( 532)				equals = argument.indexOf(HX_("=",3d,00,00,00),null());
HXLINE( 534)				if ((equals > (int)0)) {
HXLINE( 536)					argValue = argument.substr((equals + (int)1),null());
HXLINE( 538)					if (stripQuotes->match(argValue)) {
HXLINE( 539)						argValue = stripQuotes->matched((int)1);
            					}
HXLINE( 542)					if (hx::IsNull( parameters )) {
HXLINE( 542)						parameters =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
            					}
HXLINE( 543)					parameters->set(argument.substr((int)0,equals),argValue);
            				}
            			}
            		}
HXLINE( 551)		if (hx::IsNotNull( parameters )) {
HXLINE( 553)			int _g1 = (int)0;
HXDLIN( 553)			::Array< ::Dynamic> _g11 = ( (::Array< ::Dynamic>)(config->__Field(HX_("windows",83,de,74,e8),hx::paccDynamic)) );
HXDLIN( 553)			while((_g1 < _g11->length)){
HXLINE( 553)				 ::Dynamic windowConfig = _g11->__get(_g1);
HXDLIN( 553)				_g1 = (_g1 + (int)1);
HXLINE( 555)				if (hx::IsNull(  ::Dynamic(windowConfig->__Field(HX_("parameters",aa,be,7e,51),hx::paccDynamic)) )) {
HXLINE( 555)					windowConfig->__SetField(HX_("parameters",aa,be,7e,51), ::Dynamic(hx::Anon_obj::Create(0)),hx::paccDynamic);
            				}
HXLINE( 557)				{
HXLINE( 557)					 ::Dynamic parameter = parameters->keys();
HXDLIN( 557)					while(( (bool)(parameter->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE( 557)						::String parameter1 = ( (::String)(parameter->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE( 559)						argValue = ( (::String)(parameters->get(parameter1)) );
HXLINE( 561)						if (::StringTools_obj::startsWith(parameter1,windowParamPrefix)) {
HXLINE( 563)							::String _g2 = parameter1.substr(windowParamPrefix.length,null());
HXDLIN( 563)							::String _hx_switch_0 = _g2;
            							if (  (_hx_switch_0==HX_("allow-high-dpi",36,e5,66,be)) ){
HXLINE( 565)								windowConfig->__SetField(HX_("allowHighDPI",92,07,a2,b4),(argValue == HX_("true",4e,a7,03,4d)),hx::paccDynamic);
HXDLIN( 565)								goto _hx_goto_14;
            							}
            							if (  (_hx_switch_0==HX_("always-on-top",25,b6,1e,79)) ){
HXLINE( 566)								windowConfig->__SetField(HX_("alwaysOnTop",67,4d,53,16),(argValue == HX_("true",4e,a7,03,4d)),hx::paccDynamic);
HXDLIN( 566)								goto _hx_goto_14;
            							}
            							if (  (_hx_switch_0==HX_("antialiasing",f4,16,b3,48)) ){
HXLINE( 567)								windowConfig->__SetField(HX_("antialiasing",f4,16,b3,48),::Std_obj::parseInt(argValue),hx::paccDynamic);
HXDLIN( 567)								goto _hx_goto_14;
            							}
            							if (  (_hx_switch_0==HX_("background",ee,93,1d,26)) ){
HXLINE( 568)								 ::Dynamic _hx_tmp;
HXDLIN( 568)								bool _hx_tmp1;
HXDLIN( 568)								if ((argValue != HX_("",00,00,00,00))) {
HXLINE( 568)									_hx_tmp1 = (argValue == HX_("null",87,9e,0e,49));
            								}
            								else {
HXLINE( 568)									_hx_tmp1 = true;
            								}
HXDLIN( 568)								if (_hx_tmp1) {
HXLINE( 568)									_hx_tmp = null();
            								}
            								else {
HXLINE( 568)									_hx_tmp = ::Std_obj::parseInt(argValue);
            								}
HXDLIN( 568)								windowConfig->__SetField(HX_("background",ee,93,1d,26),_hx_tmp,hx::paccDynamic);
HXDLIN( 568)								goto _hx_goto_14;
            							}
            							if (  (_hx_switch_0==HX_("borderless",45,46,71,17)) ){
HXLINE( 569)								windowConfig->__SetField(HX_("borderless",45,46,71,17),(argValue == HX_("true",4e,a7,03,4d)),hx::paccDynamic);
HXDLIN( 569)								goto _hx_goto_14;
            							}
            							if (  (_hx_switch_0==HX_("colorDepth",a0,08,96,fb)) ){
HXLINE( 570)								windowConfig->__SetField(HX_("colorDepth",a0,08,96,fb),::Std_obj::parseInt(argValue),hx::paccDynamic);
HXDLIN( 570)								goto _hx_goto_14;
            							}
            							if (  (_hx_switch_0==HX_("depthBuffer",63,46,9e,52)) ){
HXLINE( 571)								windowConfig->__SetField(HX_("depthBuffer",63,46,9e,52),(argValue == HX_("true",4e,a7,03,4d)),hx::paccDynamic);
HXDLIN( 571)								goto _hx_goto_14;
            							}
            							if (  (_hx_switch_0==HX_("display",42,2a,4a,bb)) ){
HXLINE( 572)								windowConfig->__SetField(HX_("display",42,2a,4a,bb),::Std_obj::parseInt(argValue),hx::paccDynamic);
HXDLIN( 572)								goto _hx_goto_14;
            							}
            							if (  (_hx_switch_0==HX_("fullscreen",3b,3a,b4,f9)) ){
HXLINE( 573)								windowConfig->__SetField(HX_("fullscreen",3b,3a,b4,f9),(argValue == HX_("true",4e,a7,03,4d)),hx::paccDynamic);
HXDLIN( 573)								goto _hx_goto_14;
            							}
            							if (  (_hx_switch_0==HX_("hardware",a8,e2,d3,75)) ){
HXLINE( 574)								windowConfig->__SetField(HX_("hardware",a8,e2,d3,75),(argValue == HX_("true",4e,a7,03,4d)),hx::paccDynamic);
HXDLIN( 574)								goto _hx_goto_14;
            							}
            							if (  (_hx_switch_0==HX_("height",e7,07,4c,02)) ){
HXLINE( 575)								windowConfig->__SetField(HX_("height",e7,07,4c,02),::Std_obj::parseInt(argValue),hx::paccDynamic);
HXDLIN( 575)								goto _hx_goto_14;
            							}
            							if (  (_hx_switch_0==HX_("hidden",6a,ff,95,4c)) ){
HXLINE( 576)								windowConfig->__SetField(HX_("hidden",6a,ff,95,4c),(argValue == HX_("true",4e,a7,03,4d)),hx::paccDynamic);
HXDLIN( 576)								goto _hx_goto_14;
            							}
            							if (  (_hx_switch_0==HX_("maximized",18,0e,e1,fe)) ){
HXLINE( 577)								windowConfig->__SetField(HX_("maximized",18,0e,e1,fe),(argValue == HX_("true",4e,a7,03,4d)),hx::paccDynamic);
HXDLIN( 577)								goto _hx_goto_14;
            							}
            							if (  (_hx_switch_0==HX_("minimized",86,fb,9d,28)) ){
HXLINE( 578)								windowConfig->__SetField(HX_("minimized",86,fb,9d,28),(argValue == HX_("true",4e,a7,03,4d)),hx::paccDynamic);
HXDLIN( 578)								goto _hx_goto_14;
            							}
            							if (  (_hx_switch_0==HX_("renderer",43,c5,db,b2)) ){
HXLINE( 579)								windowConfig->__SetField(HX_("renderer",43,c5,db,b2),argValue,hx::paccDynamic);
HXDLIN( 579)								goto _hx_goto_14;
            							}
            							if (  (_hx_switch_0==HX_("resizable",6b,37,50,a9)) ){
HXLINE( 580)								windowConfig->__SetField(HX_("resizable",6b,37,50,a9),(argValue == HX_("true",4e,a7,03,4d)),hx::paccDynamic);
HXDLIN( 580)								goto _hx_goto_14;
            							}
            							if (  (_hx_switch_0==HX_("stencilBuffer",1c,94,39,31)) ){
HXLINE( 581)								windowConfig->__SetField(HX_("stencilBuffer",1c,94,39,31),(argValue == HX_("true",4e,a7,03,4d)),hx::paccDynamic);
HXDLIN( 581)								goto _hx_goto_14;
            							}
            							if (  (_hx_switch_0==HX_("vsync",d1,2d,a8,3d)) ){
HXLINE( 583)								windowConfig->__SetField(HX_("vsync",d1,2d,a8,3d),(argValue == HX_("true",4e,a7,03,4d)),hx::paccDynamic);
HXDLIN( 583)								goto _hx_goto_14;
            							}
            							if (  (_hx_switch_0==HX_("width",06,b6,62,ca)) ){
HXLINE( 584)								windowConfig->__SetField(HX_("width",06,b6,62,ca),::Std_obj::parseInt(argValue),hx::paccDynamic);
HXDLIN( 584)								goto _hx_goto_14;
            							}
            							if (  (_hx_switch_0==HX_("x",78,00,00,00)) ){
HXLINE( 585)								windowConfig->__SetField(HX_("x",78,00,00,00),::Std_obj::parseInt(argValue),hx::paccDynamic);
HXDLIN( 585)								goto _hx_goto_14;
            							}
            							if (  (_hx_switch_0==HX_("y",79,00,00,00)) ){
HXLINE( 586)								windowConfig->__SetField(HX_("y",79,00,00,00),::Std_obj::parseInt(argValue),hx::paccDynamic);
HXDLIN( 586)								goto _hx_goto_14;
            							}
            							/* default */{
            							}
            							_hx_goto_14:;
            						}
            						else {
HXLINE( 591)							if (!(::Reflect_obj::hasField( ::Dynamic(windowConfig->__Field(HX_("parameters",aa,be,7e,51),hx::paccDynamic)),parameter1))) {
HXLINE( 593)								::Reflect_obj::setField( ::Dynamic(windowConfig->__Field(HX_("parameters",aa,be,7e,51),hx::paccDynamic)),parameter1,argValue);
            							}
            						}
            					}
            				}
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(System_obj,_hx___parseArguments,(void))

bool System_obj::_hx___parseBool(::String value){
            	HX_STACKFRAME(&_hx_pos_f2b41f959dca9627_609___parseBool)
HXDLIN( 609)		return (value == HX_("true",4e,a7,03,4d));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(System_obj,_hx___parseBool,return )

void System_obj::_hx___registerEntryPoint(::String projectName, ::Dynamic entryPoint, ::Dynamic config){
            	HX_GC_STACKFRAME(&_hx_pos_f2b41f959dca9627_614___registerEntryPoint)
HXLINE( 616)		if (hx::IsNull( ::lime::_hx_system::System_obj::_hx___applicationConfig )) {
HXLINE( 618)			::lime::_hx_system::System_obj::_hx___applicationConfig =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
            		}
HXLINE( 622)		if (hx::IsNull( ::lime::_hx_system::System_obj::_hx___applicationEntryPoint )) {
HXLINE( 624)			::lime::_hx_system::System_obj::_hx___applicationEntryPoint =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
            		}
HXLINE( 628)		::lime::_hx_system::System_obj::_hx___applicationEntryPoint->set(projectName,entryPoint);
HXLINE( 629)		::lime::_hx_system::System_obj::_hx___applicationConfig->set(projectName,config);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(System_obj,_hx___registerEntryPoint,(void))

::String System_obj::_hx___runProcess(::String command,::Array< ::String > args){
            	HX_GC_STACKFRAME(&_hx_pos_f2b41f959dca9627_634___runProcess)
HXLINE( 637)		try {
            			HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 639)			if (hx::IsNull( args )) {
HXLINE( 639)				args = ::Array_obj< ::String >::__new(0);
            			}
HXLINE( 641)			 ::sys::io::Process process =  ::sys::io::Process_obj::__alloc( HX_CTX ,command,args);
HXLINE( 642)			::String value = ::StringTools_obj::trim(process->_hx_stdout->readLine().toString());
HXLINE( 643)			process->close();
HXLINE( 644)			return value;
            		}
            		catch( ::Dynamic _hx_e){
            			if (_hx_e.IsClass<  ::Dynamic >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::Dynamic e = _hx_e;
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
HXLINE( 648)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(System_obj,_hx___runProcess,return )

bool System_obj::get_allowScreenTimeout(){
            	HX_STACKFRAME(&_hx_pos_f2b41f959dca9627_663_get_allowScreenTimeout)
HXDLIN( 663)		return ::lime::_backend::native::NativeCFFI_obj::cffi_lime_system_get_allow_screen_timeout();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(System_obj,get_allowScreenTimeout,return )

bool System_obj::set_allowScreenTimeout(bool value){
            	HX_STACKFRAME(&_hx_pos_f2b41f959dca9627_674_set_allowScreenTimeout)
HXDLIN( 674)		return ::lime::_backend::native::NativeCFFI_obj::cffi_lime_system_set_allow_screen_timeout(value);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(System_obj,set_allowScreenTimeout,return )

::String System_obj::get_applicationDirectory(){
            	HX_STACKFRAME(&_hx_pos_f2b41f959dca9627_682_get_applicationDirectory)
HXLINE( 684)		if (hx::IsNull( ::lime::_hx_system::System_obj::_hx___applicationDirectory )) {
HXLINE( 686)			::lime::_hx_system::System_obj::_hx___applicationDirectory = ::lime::_hx_system::System_obj::_hx___getDirectory((int)0);
            		}
HXLINE( 690)		return ::lime::_hx_system::System_obj::_hx___applicationDirectory;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(System_obj,get_applicationDirectory,return )

::String System_obj::get_applicationStorageDirectory(){
            	HX_STACKFRAME(&_hx_pos_f2b41f959dca9627_695_get_applicationStorageDirectory)
HXLINE( 697)		if (hx::IsNull( ::lime::_hx_system::System_obj::_hx___applicationStorageDirectory )) {
HXLINE( 699)			::lime::_hx_system::System_obj::_hx___applicationStorageDirectory = ::lime::_hx_system::System_obj::_hx___getDirectory((int)1);
            		}
HXLINE( 703)		return ::lime::_hx_system::System_obj::_hx___applicationStorageDirectory;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(System_obj,get_applicationStorageDirectory,return )

::String System_obj::get_deviceModel(){
            	HX_STACKFRAME(&_hx_pos_f2b41f959dca9627_708_get_deviceModel)
HXLINE( 710)		if (hx::IsNull( ::lime::_hx_system::System_obj::_hx___deviceModel )) {
HXLINE( 713)			::lime::_hx_system::System_obj::_hx___deviceModel = ( ( ::Dynamic)(::lime::_backend::native::NativeCFFI_obj::cffi_lime_system_get_device_model()) );
            		}
HXLINE( 734)		return ::lime::_hx_system::System_obj::_hx___deviceModel;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(System_obj,get_deviceModel,return )

::String System_obj::get_deviceVendor(){
            	HX_STACKFRAME(&_hx_pos_f2b41f959dca9627_739_get_deviceVendor)
HXLINE( 741)		if (hx::IsNull( ::lime::_hx_system::System_obj::_hx___deviceVendor )) {
HXLINE( 744)			::lime::_hx_system::System_obj::_hx___deviceVendor = ( ( ::Dynamic)(::lime::_backend::native::NativeCFFI_obj::cffi_lime_system_get_device_vendor()) );
            		}
HXLINE( 758)		return ::lime::_hx_system::System_obj::_hx___deviceVendor;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(System_obj,get_deviceVendor,return )

::String System_obj::get_desktopDirectory(){
            	HX_STACKFRAME(&_hx_pos_f2b41f959dca9627_763_get_desktopDirectory)
HXLINE( 765)		if (hx::IsNull( ::lime::_hx_system::System_obj::_hx___desktopDirectory )) {
HXLINE( 767)			::lime::_hx_system::System_obj::_hx___desktopDirectory = ::lime::_hx_system::System_obj::_hx___getDirectory((int)2);
            		}
HXLINE( 771)		return ::lime::_hx_system::System_obj::_hx___desktopDirectory;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(System_obj,get_desktopDirectory,return )

::String System_obj::get_documentsDirectory(){
            	HX_STACKFRAME(&_hx_pos_f2b41f959dca9627_776_get_documentsDirectory)
HXLINE( 778)		if (hx::IsNull( ::lime::_hx_system::System_obj::_hx___documentsDirectory )) {
HXLINE( 780)			::lime::_hx_system::System_obj::_hx___documentsDirectory = ::lime::_hx_system::System_obj::_hx___getDirectory((int)3);
            		}
HXLINE( 784)		return ::lime::_hx_system::System_obj::_hx___documentsDirectory;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(System_obj,get_documentsDirectory,return )

 ::lime::_hx_system::Endian System_obj::get_endianness(){
            	HX_GC_STACKFRAME(&_hx_pos_f2b41f959dca9627_789_get_endianness)
HXLINE( 791)		if (hx::IsNull( ::lime::_hx_system::System_obj::_hx___endianness )) {
HXLINE( 796)			 ::haxe::io::Bytes this1 = ::haxe::io::Bytes_obj::alloc((int)2);
HXDLIN( 796)			 ::haxe::io::Bytes arrayBuffer = this1;
HXLINE( 797)			 ::lime::utils::ArrayBufferView this2;
HXDLIN( 797)			if (hx::IsNotNull( arrayBuffer )) {
HXLINE( 797)				 ::lime::utils::ArrayBufferView _this =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,(int)0,(int)4);
HXDLIN( 797)				int in_byteOffset = (int)0;
HXDLIN( 797)				if ((in_byteOffset < (int)0)) {
HXLINE( 797)					HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            				}
HXDLIN( 797)				if ((hx::Mod(in_byteOffset,_this->bytesPerElement) != (int)0)) {
HXLINE( 797)					HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            				}
HXDLIN( 797)				int bufferByteLength = arrayBuffer->length;
HXDLIN( 797)				int elementSize = _this->bytesPerElement;
HXDLIN( 797)				int newByteLength = bufferByteLength;
HXDLIN( 797)				{
HXLINE( 797)					newByteLength = (bufferByteLength - in_byteOffset);
HXDLIN( 797)					if ((hx::Mod(bufferByteLength,_this->bytesPerElement) != (int)0)) {
HXLINE( 797)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 797)					if ((newByteLength < (int)0)) {
HXLINE( 797)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
            				}
HXDLIN( 797)				_this->buffer = arrayBuffer;
HXDLIN( 797)				_this->byteOffset = in_byteOffset;
HXDLIN( 797)				_this->byteLength = newByteLength;
HXDLIN( 797)				_this->length = ::Std_obj::_hx_int(((Float)newByteLength / (Float)_this->bytesPerElement));
HXDLIN( 797)				this2 = _this;
            			}
            			else {
HXLINE( 797)				HX_STACK_DO_THROW(HX_("Invalid constructor arguments for UInt8Array",6b,44,d5,85));
            			}
HXDLIN( 797)			 ::lime::utils::ArrayBufferView uint8Array = this2;
HXLINE( 798)			 ::lime::utils::ArrayBufferView this3;
HXDLIN( 798)			if (hx::IsNotNull( arrayBuffer )) {
HXLINE( 798)				 ::lime::utils::ArrayBufferView _this1 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,(int)0,(int)6);
HXDLIN( 798)				int in_byteOffset1 = (int)0;
HXDLIN( 798)				if ((in_byteOffset1 < (int)0)) {
HXLINE( 798)					HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            				}
HXDLIN( 798)				if ((hx::Mod(in_byteOffset1,_this1->bytesPerElement) != (int)0)) {
HXLINE( 798)					HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            				}
HXDLIN( 798)				int bufferByteLength1 = arrayBuffer->length;
HXDLIN( 798)				int elementSize1 = _this1->bytesPerElement;
HXDLIN( 798)				int newByteLength1 = bufferByteLength1;
HXDLIN( 798)				{
HXLINE( 798)					newByteLength1 = (bufferByteLength1 - in_byteOffset1);
HXDLIN( 798)					if ((hx::Mod(bufferByteLength1,_this1->bytesPerElement) != (int)0)) {
HXLINE( 798)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 798)					if ((newByteLength1 < (int)0)) {
HXLINE( 798)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
            				}
HXDLIN( 798)				_this1->buffer = arrayBuffer;
HXDLIN( 798)				_this1->byteOffset = in_byteOffset1;
HXDLIN( 798)				_this1->byteLength = newByteLength1;
HXDLIN( 798)				_this1->length = ::Std_obj::_hx_int(((Float)newByteLength1 / (Float)_this1->bytesPerElement));
HXDLIN( 798)				this3 = _this1;
            			}
            			else {
HXLINE( 798)				HX_STACK_DO_THROW(HX_("Invalid constructor arguments for UInt16Array",0a,c7,2d,d5));
            			}
HXDLIN( 798)			 ::lime::utils::ArrayBufferView uint16array = this3;
HXLINE( 799)			::__hxcpp_memory_set_byte(uint8Array->buffer->b,uint8Array->byteOffset,(int)170);
HXLINE( 800)			::__hxcpp_memory_set_byte(uint8Array->buffer->b,(uint8Array->byteOffset + (int)1),(int)187);
HXLINE( 801)			if ((((int)::__hxcpp_memory_get_ui16(uint16array->buffer->b,uint16array->byteOffset) & (int)(int)65535) == (int)43707)) {
HXLINE( 801)				::lime::_hx_system::System_obj::_hx___endianness = ::lime::_hx_system::Endian_obj::_hx_BIG_ENDIAN_dyn();
            			}
            			else {
HXLINE( 802)				::lime::_hx_system::System_obj::_hx___endianness = ::lime::_hx_system::Endian_obj::_hx_LITTLE_ENDIAN_dyn();
            			}
            		}
HXLINE( 807)		return ::lime::_hx_system::System_obj::_hx___endianness;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(System_obj,get_endianness,return )

::String System_obj::get_fontsDirectory(){
            	HX_STACKFRAME(&_hx_pos_f2b41f959dca9627_812_get_fontsDirectory)
HXLINE( 814)		if (hx::IsNull( ::lime::_hx_system::System_obj::_hx___fontsDirectory )) {
HXLINE( 816)			::lime::_hx_system::System_obj::_hx___fontsDirectory = ::lime::_hx_system::System_obj::_hx___getDirectory((int)4);
            		}
HXLINE( 820)		return ::lime::_hx_system::System_obj::_hx___fontsDirectory;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(System_obj,get_fontsDirectory,return )

int System_obj::get_numDisplays(){
            	HX_STACKFRAME(&_hx_pos_f2b41f959dca9627_828_get_numDisplays)
HXDLIN( 828)		return ::lime::_backend::native::NativeCFFI_obj::cffi_lime_system_get_num_displays();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(System_obj,get_numDisplays,return )

::String System_obj::get_platformLabel(){
            	HX_STACKFRAME(&_hx_pos_f2b41f959dca9627_836_get_platformLabel)
HXLINE( 838)		if (hx::IsNull( ::lime::_hx_system::System_obj::_hx___platformLabel )) {
HXLINE( 841)			::String label = ( ( ::Dynamic)(::lime::_backend::native::NativeCFFI_obj::cffi_lime_system_get_platform_label()) );
HXLINE( 842)			if (hx::IsNotNull( label )) {
HXLINE( 842)				::lime::_hx_system::System_obj::_hx___platformLabel = ::StringTools_obj::trim(label);
            			}
            		}
HXLINE( 854)		return ::lime::_hx_system::System_obj::_hx___platformLabel;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(System_obj,get_platformLabel,return )

::String System_obj::get_platformName(){
            	HX_STACKFRAME(&_hx_pos_f2b41f959dca9627_859_get_platformName)
HXLINE( 861)		if (hx::IsNull( ::lime::_hx_system::System_obj::_hx___platformName )) {
HXLINE( 864)			::lime::_hx_system::System_obj::_hx___platformName = HX_("Windows",63,06,c6,b5);
            		}
HXLINE( 895)		return ::lime::_hx_system::System_obj::_hx___platformName;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(System_obj,get_platformName,return )

::String System_obj::get_platformVersion(){
            	HX_STACKFRAME(&_hx_pos_f2b41f959dca9627_900_get_platformVersion)
HXLINE( 902)		if (hx::IsNull( ::lime::_hx_system::System_obj::_hx___platformVersion )) {
HXLINE( 905)			::lime::_hx_system::System_obj::_hx___platformVersion = ( ( ::Dynamic)(::lime::_backend::native::NativeCFFI_obj::cffi_lime_system_get_platform_version()) );
            		}
HXLINE( 922)		return ::lime::_hx_system::System_obj::_hx___platformVersion;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(System_obj,get_platformVersion,return )

::String System_obj::get_userDirectory(){
            	HX_STACKFRAME(&_hx_pos_f2b41f959dca9627_927_get_userDirectory)
HXLINE( 929)		if (hx::IsNull( ::lime::_hx_system::System_obj::_hx___userDirectory )) {
HXLINE( 931)			::lime::_hx_system::System_obj::_hx___userDirectory = ::lime::_hx_system::System_obj::_hx___getDirectory((int)5);
            		}
HXLINE( 935)		return ::lime::_hx_system::System_obj::_hx___userDirectory;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(System_obj,get_userDirectory,return )


System_obj::System_obj()
{
}

bool System_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"exit") ) { outValue = exit_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"load") ) { outValue = load_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"openURL") ) { outValue = openURL_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"getTimer") ) { outValue = getTimer_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"openFile") ) { outValue = openFile_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"endianness") ) { if (inCallProp == hx::paccAlways) { outValue = ( get_endianness() ); return true; } }
		if (HX_FIELD_EQ(inName,"getDisplay") ) { outValue = getDisplay_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"deviceModel") ) { if (inCallProp == hx::paccAlways) { outValue = ( get_deviceModel() ); return true; } }
		if (HX_FIELD_EQ(inName,"disableCFFI") ) { outValue = ( disableCFFI ); return true; }
		if (HX_FIELD_EQ(inName,"numDisplays") ) { if (inCallProp == hx::paccAlways) { outValue = ( get_numDisplays() ); return true; } }
		if (HX_FIELD_EQ(inName,"__parseBool") ) { outValue = _hx___parseBool_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"deviceVendor") ) { if (inCallProp == hx::paccAlways) { outValue = ( get_deviceVendor() ); return true; } }
		if (HX_FIELD_EQ(inName,"platformName") ) { if (inCallProp == hx::paccAlways) { outValue = ( get_platformName() ); return true; } }
		if (HX_FIELD_EQ(inName,"__endianness") ) { outValue = ( _hx___endianness ); return true; }
		if (HX_FIELD_EQ(inName,"__runProcess") ) { outValue = _hx___runProcess_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"platformLabel") ) { if (inCallProp == hx::paccAlways) { outValue = ( get_platformLabel() ); return true; } }
		if (HX_FIELD_EQ(inName,"userDirectory") ) { if (inCallProp == hx::paccAlways) { outValue = ( get_userDirectory() ); return true; } }
		if (HX_FIELD_EQ(inName,"__deviceModel") ) { outValue = ( _hx___deviceModel ); return true; }
		if (HX_FIELD_EQ(inName,"__directories") ) { outValue = ( _hx___directories ); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"fontsDirectory") ) { if (inCallProp == hx::paccAlways) { outValue = ( get_fontsDirectory() ); return true; } }
		if (HX_FIELD_EQ(inName,"__deviceVendor") ) { outValue = ( _hx___deviceVendor ); return true; }
		if (HX_FIELD_EQ(inName,"__platformName") ) { outValue = ( _hx___platformName ); return true; }
		if (HX_FIELD_EQ(inName,"__getDirectory") ) { outValue = _hx___getDirectory_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_endianness") ) { outValue = get_endianness_dyn(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"platformVersion") ) { if (inCallProp == hx::paccAlways) { outValue = ( get_platformVersion() ); return true; } }
		if (HX_FIELD_EQ(inName,"__platformLabel") ) { outValue = ( _hx___platformLabel ); return true; }
		if (HX_FIELD_EQ(inName,"__userDirectory") ) { outValue = ( _hx___userDirectory ); return true; }
		if (HX_FIELD_EQ(inName,"get_deviceModel") ) { outValue = get_deviceModel_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_numDisplays") ) { outValue = get_numDisplays_dyn(); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"desktopDirectory") ) { if (inCallProp == hx::paccAlways) { outValue = ( get_desktopDirectory() ); return true; } }
		if (HX_FIELD_EQ(inName,"__fontsDirectory") ) { outValue = ( _hx___fontsDirectory ); return true; }
		if (HX_FIELD_EQ(inName,"__parseArguments") ) { outValue = _hx___parseArguments_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_deviceVendor") ) { outValue = get_deviceVendor_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_platformName") ) { outValue = get_platformName_dyn(); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"__platformVersion") ) { outValue = ( _hx___platformVersion ); return true; }
		if (HX_FIELD_EQ(inName,"get_platformLabel") ) { outValue = get_platformLabel_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_userDirectory") ) { outValue = get_userDirectory_dyn(); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"allowScreenTimeout") ) { if (inCallProp == hx::paccAlways) { outValue = ( get_allowScreenTimeout() ); return true; } }
		if (HX_FIELD_EQ(inName,"documentsDirectory") ) { if (inCallProp == hx::paccAlways) { outValue = ( get_documentsDirectory() ); return true; } }
		if (HX_FIELD_EQ(inName,"__desktopDirectory") ) { outValue = ( _hx___desktopDirectory ); return true; }
		if (HX_FIELD_EQ(inName,"get_fontsDirectory") ) { outValue = get_fontsDirectory_dyn(); return true; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"__applicationConfig") ) { outValue = ( _hx___applicationConfig ); return true; }
		if (HX_FIELD_EQ(inName,"__copyMissingFields") ) { outValue = _hx___copyMissingFields_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_platformVersion") ) { outValue = get_platformVersion_dyn(); return true; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"applicationDirectory") ) { if (inCallProp == hx::paccAlways) { outValue = ( get_applicationDirectory() ); return true; } }
		if (HX_FIELD_EQ(inName,"__documentsDirectory") ) { outValue = ( _hx___documentsDirectory ); return true; }
		if (HX_FIELD_EQ(inName,"__registerEntryPoint") ) { outValue = _hx___registerEntryPoint_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_desktopDirectory") ) { outValue = get_desktopDirectory_dyn(); return true; }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"__applicationDirectory") ) { outValue = ( _hx___applicationDirectory ); return true; }
		if (HX_FIELD_EQ(inName,"get_allowScreenTimeout") ) { outValue = get_allowScreenTimeout_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"set_allowScreenTimeout") ) { outValue = set_allowScreenTimeout_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_documentsDirectory") ) { outValue = get_documentsDirectory_dyn(); return true; }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"__applicationEntryPoint") ) { outValue = ( _hx___applicationEntryPoint ); return true; }
		break;
	case 24:
		if (HX_FIELD_EQ(inName,"get_applicationDirectory") ) { outValue = get_applicationDirectory_dyn(); return true; }
		break;
	case 27:
		if (HX_FIELD_EQ(inName,"applicationStorageDirectory") ) { if (inCallProp == hx::paccAlways) { outValue = ( get_applicationStorageDirectory() ); return true; } }
		break;
	case 29:
		if (HX_FIELD_EQ(inName,"__applicationStorageDirectory") ) { outValue = ( _hx___applicationStorageDirectory ); return true; }
		break;
	case 31:
		if (HX_FIELD_EQ(inName,"get_applicationStorageDirectory") ) { outValue = get_applicationStorageDirectory_dyn(); return true; }
	}
	return false;
}

bool System_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 11:
		if (HX_FIELD_EQ(inName,"disableCFFI") ) { disableCFFI=ioValue.Cast< bool >(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"__endianness") ) { _hx___endianness=ioValue.Cast<  ::lime::_hx_system::Endian >(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"__deviceModel") ) { _hx___deviceModel=ioValue.Cast< ::String >(); return true; }
		if (HX_FIELD_EQ(inName,"__directories") ) { _hx___directories=ioValue.Cast<  ::haxe::ds::IntMap >(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"__deviceVendor") ) { _hx___deviceVendor=ioValue.Cast< ::String >(); return true; }
		if (HX_FIELD_EQ(inName,"__platformName") ) { _hx___platformName=ioValue.Cast< ::String >(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"__platformLabel") ) { _hx___platformLabel=ioValue.Cast< ::String >(); return true; }
		if (HX_FIELD_EQ(inName,"__userDirectory") ) { _hx___userDirectory=ioValue.Cast< ::String >(); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"__fontsDirectory") ) { _hx___fontsDirectory=ioValue.Cast< ::String >(); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"__platformVersion") ) { _hx___platformVersion=ioValue.Cast< ::String >(); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"allowScreenTimeout") ) { if (inCallProp == hx::paccAlways)  ioValue = ( set_allowScreenTimeout(ioValue.Cast< bool >()) ); }
		if (HX_FIELD_EQ(inName,"__desktopDirectory") ) { _hx___desktopDirectory=ioValue.Cast< ::String >(); return true; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"__applicationConfig") ) { _hx___applicationConfig=ioValue.Cast<  ::haxe::ds::StringMap >(); return true; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"__documentsDirectory") ) { _hx___documentsDirectory=ioValue.Cast< ::String >(); return true; }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"__applicationDirectory") ) { _hx___applicationDirectory=ioValue.Cast< ::String >(); return true; }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"__applicationEntryPoint") ) { _hx___applicationEntryPoint=ioValue.Cast<  ::haxe::ds::StringMap >(); return true; }
		break;
	case 29:
		if (HX_FIELD_EQ(inName,"__applicationStorageDirectory") ) { _hx___applicationStorageDirectory=ioValue.Cast< ::String >(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *System_obj_sMemberStorageInfo = 0;
static hx::StaticInfo System_obj_sStaticStorageInfo[] = {
	{hx::fsBool,(void *) &System_obj::disableCFFI,HX_HCSTRING("disableCFFI","\x8e","\x24","\xb6","\x11")},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(void *) &System_obj::_hx___applicationConfig,HX_HCSTRING("__applicationConfig","\x12","\xfb","\x1c","\xf1")},
	{hx::fsString,(void *) &System_obj::_hx___applicationDirectory,HX_HCSTRING("__applicationDirectory","\x1d","\xe0","\x19","\xed")},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(void *) &System_obj::_hx___applicationEntryPoint,HX_HCSTRING("__applicationEntryPoint","\xce","\xda","\xed","\x08")},
	{hx::fsString,(void *) &System_obj::_hx___applicationStorageDirectory,HX_HCSTRING("__applicationStorageDirectory","\x02","\xdc","\x05","\xf4")},
	{hx::fsString,(void *) &System_obj::_hx___desktopDirectory,HX_HCSTRING("__desktopDirectory","\x11","\x04","\xd2","\x1a")},
	{hx::fsString,(void *) &System_obj::_hx___deviceModel,HX_HCSTRING("__deviceModel","\x13","\x98","\x10","\x44")},
	{hx::fsString,(void *) &System_obj::_hx___deviceVendor,HX_HCSTRING("__deviceVendor","\xde","\x4d","\x44","\x28")},
	{hx::fsObject /*::haxe::ds::IntMap*/ ,(void *) &System_obj::_hx___directories,HX_HCSTRING("__directories","\xeb","\x9c","\xa4","\xa9")},
	{hx::fsString,(void *) &System_obj::_hx___documentsDirectory,HX_HCSTRING("__documentsDirectory","\x75","\x45","\xe8","\x15")},
	{hx::fsObject /*::lime::_hx_system::Endian*/ ,(void *) &System_obj::_hx___endianness,HX_HCSTRING("__endianness","\xd2","\x7d","\x66","\x87")},
	{hx::fsString,(void *) &System_obj::_hx___fontsDirectory,HX_HCSTRING("__fontsDirectory","\x29","\x8d","\x5a","\xbc")},
	{hx::fsString,(void *) &System_obj::_hx___platformLabel,HX_HCSTRING("__platformLabel","\x21","\x5b","\x11","\xb4")},
	{hx::fsString,(void *) &System_obj::_hx___platformName,HX_HCSTRING("__platformName","\xbe","\xa9","\x0d","\x11")},
	{hx::fsString,(void *) &System_obj::_hx___platformVersion,HX_HCSTRING("__platformVersion","\x85","\x99","\x63","\x58")},
	{hx::fsString,(void *) &System_obj::_hx___userDirectory,HX_HCSTRING("__userDirectory","\x82","\x57","\xab","\x1c")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static void System_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(System_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(System_obj::disableCFFI,"disableCFFI");
	HX_MARK_MEMBER_NAME(System_obj::_hx___applicationConfig,"__applicationConfig");
	HX_MARK_MEMBER_NAME(System_obj::_hx___applicationDirectory,"__applicationDirectory");
	HX_MARK_MEMBER_NAME(System_obj::_hx___applicationEntryPoint,"__applicationEntryPoint");
	HX_MARK_MEMBER_NAME(System_obj::_hx___applicationStorageDirectory,"__applicationStorageDirectory");
	HX_MARK_MEMBER_NAME(System_obj::_hx___desktopDirectory,"__desktopDirectory");
	HX_MARK_MEMBER_NAME(System_obj::_hx___deviceModel,"__deviceModel");
	HX_MARK_MEMBER_NAME(System_obj::_hx___deviceVendor,"__deviceVendor");
	HX_MARK_MEMBER_NAME(System_obj::_hx___directories,"__directories");
	HX_MARK_MEMBER_NAME(System_obj::_hx___documentsDirectory,"__documentsDirectory");
	HX_MARK_MEMBER_NAME(System_obj::_hx___endianness,"__endianness");
	HX_MARK_MEMBER_NAME(System_obj::_hx___fontsDirectory,"__fontsDirectory");
	HX_MARK_MEMBER_NAME(System_obj::_hx___platformLabel,"__platformLabel");
	HX_MARK_MEMBER_NAME(System_obj::_hx___platformName,"__platformName");
	HX_MARK_MEMBER_NAME(System_obj::_hx___platformVersion,"__platformVersion");
	HX_MARK_MEMBER_NAME(System_obj::_hx___userDirectory,"__userDirectory");
};

#ifdef HXCPP_VISIT_ALLOCS
static void System_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(System_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(System_obj::disableCFFI,"disableCFFI");
	HX_VISIT_MEMBER_NAME(System_obj::_hx___applicationConfig,"__applicationConfig");
	HX_VISIT_MEMBER_NAME(System_obj::_hx___applicationDirectory,"__applicationDirectory");
	HX_VISIT_MEMBER_NAME(System_obj::_hx___applicationEntryPoint,"__applicationEntryPoint");
	HX_VISIT_MEMBER_NAME(System_obj::_hx___applicationStorageDirectory,"__applicationStorageDirectory");
	HX_VISIT_MEMBER_NAME(System_obj::_hx___desktopDirectory,"__desktopDirectory");
	HX_VISIT_MEMBER_NAME(System_obj::_hx___deviceModel,"__deviceModel");
	HX_VISIT_MEMBER_NAME(System_obj::_hx___deviceVendor,"__deviceVendor");
	HX_VISIT_MEMBER_NAME(System_obj::_hx___directories,"__directories");
	HX_VISIT_MEMBER_NAME(System_obj::_hx___documentsDirectory,"__documentsDirectory");
	HX_VISIT_MEMBER_NAME(System_obj::_hx___endianness,"__endianness");
	HX_VISIT_MEMBER_NAME(System_obj::_hx___fontsDirectory,"__fontsDirectory");
	HX_VISIT_MEMBER_NAME(System_obj::_hx___platformLabel,"__platformLabel");
	HX_VISIT_MEMBER_NAME(System_obj::_hx___platformName,"__platformName");
	HX_VISIT_MEMBER_NAME(System_obj::_hx___platformVersion,"__platformVersion");
	HX_VISIT_MEMBER_NAME(System_obj::_hx___userDirectory,"__userDirectory");
};

#endif

hx::Class System_obj::__mClass;

static ::String System_obj_sStaticFields[] = {
	HX_HCSTRING("disableCFFI","\x8e","\x24","\xb6","\x11"),
	HX_HCSTRING("__applicationConfig","\x12","\xfb","\x1c","\xf1"),
	HX_HCSTRING("__applicationDirectory","\x1d","\xe0","\x19","\xed"),
	HX_HCSTRING("__applicationEntryPoint","\xce","\xda","\xed","\x08"),
	HX_HCSTRING("__applicationStorageDirectory","\x02","\xdc","\x05","\xf4"),
	HX_HCSTRING("__desktopDirectory","\x11","\x04","\xd2","\x1a"),
	HX_HCSTRING("__deviceModel","\x13","\x98","\x10","\x44"),
	HX_HCSTRING("__deviceVendor","\xde","\x4d","\x44","\x28"),
	HX_HCSTRING("__directories","\xeb","\x9c","\xa4","\xa9"),
	HX_HCSTRING("__documentsDirectory","\x75","\x45","\xe8","\x15"),
	HX_HCSTRING("__endianness","\xd2","\x7d","\x66","\x87"),
	HX_HCSTRING("__fontsDirectory","\x29","\x8d","\x5a","\xbc"),
	HX_HCSTRING("__platformLabel","\x21","\x5b","\x11","\xb4"),
	HX_HCSTRING("__platformName","\xbe","\xa9","\x0d","\x11"),
	HX_HCSTRING("__platformVersion","\x85","\x99","\x63","\x58"),
	HX_HCSTRING("__userDirectory","\x82","\x57","\xab","\x1c"),
	HX_HCSTRING("exit","\x1e","\xf7","\x1d","\x43"),
	HX_HCSTRING("getDisplay","\x4c","\xb0","\xab","\x0a"),
	HX_HCSTRING("getTimer","\x4f","\xcf","\x0c","\x70"),
	HX_HCSTRING("load","\x26","\x9a","\xb7","\x47"),
	HX_HCSTRING("openFile","\x66","\xab","\xf7","\xe4"),
	HX_HCSTRING("openURL","\xc5","\xbd","\x35","\x40"),
	HX_HCSTRING("__copyMissingFields","\x6a","\x22","\xdd","\xa7"),
	HX_HCSTRING("__getDirectory","\x17","\x12","\x5c","\x40"),
	HX_HCSTRING("__parseArguments","\xc3","\xfb","\xf7","\x66"),
	HX_HCSTRING("__parseBool","\xdd","\x1e","\xee","\xf6"),
	HX_HCSTRING("__registerEntryPoint","\xe1","\x0d","\x46","\xfe"),
	HX_HCSTRING("__runProcess","\x84","\xad","\x5a","\x94"),
	HX_HCSTRING("get_allowScreenTimeout","\x95","\xcf","\x5c","\x6e"),
	HX_HCSTRING("set_allowScreenTimeout","\x09","\x4c","\x08","\xa2"),
	HX_HCSTRING("get_applicationDirectory","\x86","\x5a","\x0d","\x68"),
	HX_HCSTRING("get_applicationStorageDirectory","\xb9","\x70","\x86","\x8d"),
	HX_HCSTRING("get_deviceModel","\xca","\x0e","\x7a","\xbc"),
	HX_HCSTRING("get_deviceVendor","\x47","\xb7","\x22","\x0c"),
	HX_HCSTRING("get_desktopDirectory","\xfa","\xd5","\xab","\xcd"),
	HX_HCSTRING("get_documentsDirectory","\x9e","\x23","\x49","\x90"),
	HX_HCSTRING("get_endianness","\xfb","\x8a","\xc8","\xc4"),
	HX_HCSTRING("get_fontsDirectory","\xd2","\xe2","\xb4","\x23"),
	HX_HCSTRING("get_numDisplays","\xee","\xd7","\x92","\xd2"),
	HX_HCSTRING("get_platformLabel","\x98","\x2d","\xcf","\x32"),
	HX_HCSTRING("get_platformName","\x27","\x13","\xec","\xf4"),
	HX_HCSTRING("get_platformVersion","\xbc","\x37","\x14","\x60"),
	HX_HCSTRING("get_userDirectory","\xf9","\x29","\x69","\x9b"),
	::String(null())
};

void System_obj::__register()
{
	hx::Object *dummy = new System_obj;
	System_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("lime.system.System","\x95","\x83","\xbd","\xac");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &System_obj::__GetStatic;
	__mClass->mSetStaticField = &System_obj::__SetStatic;
	__mClass->mMarkFunc = System_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(System_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< System_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = System_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = System_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = System_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void System_obj::__boot()
{
{
            	HX_GC_STACKFRAME(&_hx_pos_f2b41f959dca9627_79_boot)
HXDLIN(  79)		_hx___directories =  ::haxe::ds::IntMap_obj::__alloc( HX_CTX );
            	}
}

} // end namespace lime
} // end namespace system
