// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Reflect
#include <Reflect.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_lime_app_Future
#include <lime/app/Future.h>
#endif
#ifndef INCLUDED_lime_app_Promise_lime_utils_AssetLibrary
#include <lime/app/Promise_lime_utils_AssetLibrary.h>
#endif
#ifndef INCLUDED_lime_app__Event_Void_Void
#include <lime/app/_Event_Void_Void.h>
#endif
#ifndef INCLUDED_lime_graphics_Image
#include <lime/graphics/Image.h>
#endif
#ifndef INCLUDED_lime_media_AudioBuffer
#include <lime/media/AudioBuffer.h>
#endif
#ifndef INCLUDED_lime_net__HTTPRequest_AbstractHTTPRequest
#include <lime/net/_HTTPRequest/AbstractHTTPRequest.h>
#endif
#ifndef INCLUDED_lime_net__HTTPRequest_String
#include <lime/net/_HTTPRequest_String.h>
#endif
#ifndef INCLUDED_lime_net__IHTTPRequest
#include <lime/net/_IHTTPRequest.h>
#endif
#ifndef INCLUDED_lime_text_Font
#include <lime/text/Font.h>
#endif
#ifndef INCLUDED_lime_utils_AssetLibrary
#include <lime/utils/AssetLibrary.h>
#endif
#ifndef INCLUDED_lime_utils_AssetManifest
#include <lime/utils/AssetManifest.h>
#endif
#ifndef INCLUDED_lime_utils_Log
#include <lime/utils/Log.h>
#endif
#ifndef INCLUDED_lime_utils__Bytes_Bytes_Impl_
#include <lime/utils/_Bytes/Bytes_Impl_.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_302b88cc6233d9fb_27_new,"lime.utils.AssetLibrary","new",0x53ac9a93,"lime.utils.AssetLibrary.new","lime/utils/AssetLibrary.hx",27,0x8b4b8bbb)
HX_LOCAL_STACK_FRAME(_hx_pos_302b88cc6233d9fb_60_exists,"lime.utils.AssetLibrary","exists",0xba577589,"lime.utils.AssetLibrary.exists","lime/utils/AssetLibrary.hx",60,0x8b4b8bbb)
HX_LOCAL_STACK_FRAME(_hx_pos_302b88cc6233d9fb_156_getAsset,"lime.utils.AssetLibrary","getAsset",0x8eced667,"lime.utils.AssetLibrary.getAsset","lime/utils/AssetLibrary.hx",156,0x8b4b8bbb)
HX_LOCAL_STACK_FRAME(_hx_pos_302b88cc6233d9fb_174_getAudioBuffer,"lime.utils.AssetLibrary","getAudioBuffer",0x882d8e2d,"lime.utils.AssetLibrary.getAudioBuffer","lime/utils/AssetLibrary.hx",174,0x8b4b8bbb)
HX_LOCAL_STACK_FRAME(_hx_pos_302b88cc6233d9fb_203_getBytes,"lime.utils.AssetLibrary","getBytes",0x262d74e2,"lime.utils.AssetLibrary.getBytes","lime/utils/AssetLibrary.hx",203,0x8b4b8bbb)
HX_LOCAL_STACK_FRAME(_hx_pos_302b88cc6233d9fb_253_getFont,"lime.utils.AssetLibrary","getFont",0x44386d38,"lime.utils.AssetLibrary.getFont","lime/utils/AssetLibrary.hx",253,0x8b4b8bbb)
HX_LOCAL_STACK_FRAME(_hx_pos_302b88cc6233d9fb_284_getImage,"lime.utils.AssetLibrary","getImage",0x25fe8bd2,"lime.utils.AssetLibrary.getImage","lime/utils/AssetLibrary.hx",284,0x8b4b8bbb)
HX_LOCAL_STACK_FRAME(_hx_pos_302b88cc6233d9fb_311_getPath,"lime.utils.AssetLibrary","getPath",0x4ac9f50e,"lime.utils.AssetLibrary.getPath","lime/utils/AssetLibrary.hx",311,0x8b4b8bbb)
HX_LOCAL_STACK_FRAME(_hx_pos_302b88cc6233d9fb_330_getText,"lime.utils.AssetLibrary","getText",0x4d71dc16,"lime.utils.AssetLibrary.getText","lime/utils/AssetLibrary.hx",330,0x8b4b8bbb)
HX_LOCAL_STACK_FRAME(_hx_pos_302b88cc6233d9fb_357_isLocal,"lime.utils.AssetLibrary","isLocal",0x436bccd4,"lime.utils.AssetLibrary.isLocal","lime/utils/AssetLibrary.hx",357,0x8b4b8bbb)
HX_LOCAL_STACK_FRAME(_hx_pos_302b88cc6233d9fb_394_list,"lime.utils.AssetLibrary","list",0xe20b3ecb,"lime.utils.AssetLibrary.list","lime/utils/AssetLibrary.hx",394,0x8b4b8bbb)
HX_LOCAL_STACK_FRAME(_hx_pos_302b88cc6233d9fb_416_loadAsset,"lime.utils.AssetLibrary","loadAsset",0xdf43a85d,"lime.utils.AssetLibrary.loadAsset","lime/utils/AssetLibrary.hx",416,0x8b4b8bbb)
HX_LOCAL_STACK_FRAME(_hx_pos_302b88cc6233d9fb_432_load,"lime.utils.AssetLibrary","load",0xe20fbc93,"lime.utils.AssetLibrary.load","lime/utils/AssetLibrary.hx",432,0x8b4b8bbb)
HX_LOCAL_STACK_FRAME(_hx_pos_302b88cc6233d9fb_461_load,"lime.utils.AssetLibrary","load",0xe20fbc93,"lime.utils.AssetLibrary.load","lime/utils/AssetLibrary.hx",461,0x8b4b8bbb)
HX_LOCAL_STACK_FRAME(_hx_pos_302b88cc6233d9fb_462_load,"lime.utils.AssetLibrary","load",0xe20fbc93,"lime.utils.AssetLibrary.load","lime/utils/AssetLibrary.hx",462,0x8b4b8bbb)
HX_LOCAL_STACK_FRAME(_hx_pos_302b88cc6233d9fb_463_load,"lime.utils.AssetLibrary","load",0xe20fbc93,"lime.utils.AssetLibrary.load","lime/utils/AssetLibrary.hx",463,0x8b4b8bbb)
HX_LOCAL_STACK_FRAME(_hx_pos_302b88cc6233d9fb_470_load,"lime.utils.AssetLibrary","load",0xe20fbc93,"lime.utils.AssetLibrary.load","lime/utils/AssetLibrary.hx",470,0x8b4b8bbb)
HX_LOCAL_STACK_FRAME(_hx_pos_302b88cc6233d9fb_471_load,"lime.utils.AssetLibrary","load",0xe20fbc93,"lime.utils.AssetLibrary.load","lime/utils/AssetLibrary.hx",471,0x8b4b8bbb)
HX_LOCAL_STACK_FRAME(_hx_pos_302b88cc6233d9fb_472_load,"lime.utils.AssetLibrary","load",0xe20fbc93,"lime.utils.AssetLibrary.load","lime/utils/AssetLibrary.hx",472,0x8b4b8bbb)
HX_LOCAL_STACK_FRAME(_hx_pos_302b88cc6233d9fb_479_load,"lime.utils.AssetLibrary","load",0xe20fbc93,"lime.utils.AssetLibrary.load","lime/utils/AssetLibrary.hx",479,0x8b4b8bbb)
HX_LOCAL_STACK_FRAME(_hx_pos_302b88cc6233d9fb_480_load,"lime.utils.AssetLibrary","load",0xe20fbc93,"lime.utils.AssetLibrary.load","lime/utils/AssetLibrary.hx",480,0x8b4b8bbb)
HX_LOCAL_STACK_FRAME(_hx_pos_302b88cc6233d9fb_481_load,"lime.utils.AssetLibrary","load",0xe20fbc93,"lime.utils.AssetLibrary.load","lime/utils/AssetLibrary.hx",481,0x8b4b8bbb)
HX_LOCAL_STACK_FRAME(_hx_pos_302b88cc6233d9fb_488_load,"lime.utils.AssetLibrary","load",0xe20fbc93,"lime.utils.AssetLibrary.load","lime/utils/AssetLibrary.hx",488,0x8b4b8bbb)
HX_LOCAL_STACK_FRAME(_hx_pos_302b88cc6233d9fb_489_load,"lime.utils.AssetLibrary","load",0xe20fbc93,"lime.utils.AssetLibrary.load","lime/utils/AssetLibrary.hx",489,0x8b4b8bbb)
HX_LOCAL_STACK_FRAME(_hx_pos_302b88cc6233d9fb_490_load,"lime.utils.AssetLibrary","load",0xe20fbc93,"lime.utils.AssetLibrary.load","lime/utils/AssetLibrary.hx",490,0x8b4b8bbb)
HX_LOCAL_STACK_FRAME(_hx_pos_302b88cc6233d9fb_497_load,"lime.utils.AssetLibrary","load",0xe20fbc93,"lime.utils.AssetLibrary.load","lime/utils/AssetLibrary.hx",497,0x8b4b8bbb)
HX_LOCAL_STACK_FRAME(_hx_pos_302b88cc6233d9fb_498_load,"lime.utils.AssetLibrary","load",0xe20fbc93,"lime.utils.AssetLibrary.load","lime/utils/AssetLibrary.hx",498,0x8b4b8bbb)
HX_LOCAL_STACK_FRAME(_hx_pos_302b88cc6233d9fb_499_load,"lime.utils.AssetLibrary","load",0xe20fbc93,"lime.utils.AssetLibrary.load","lime/utils/AssetLibrary.hx",499,0x8b4b8bbb)
HX_LOCAL_STACK_FRAME(_hx_pos_302b88cc6233d9fb_518_loadAudioBuffer,"lime.utils.AssetLibrary","loadAudioBuffer",0xa3353ca3,"lime.utils.AssetLibrary.loadAudioBuffer","lime/utils/AssetLibrary.hx",518,0x8b4b8bbb)
HX_LOCAL_STACK_FRAME(_hx_pos_302b88cc6233d9fb_545_loadBytes,"lime.utils.AssetLibrary","loadBytes",0x76a246d8,"lime.utils.AssetLibrary.loadBytes","lime/utils/AssetLibrary.hx",545,0x8b4b8bbb)
HX_LOCAL_STACK_FRAME(_hx_pos_302b88cc6233d9fb_568_loadFont,"lime.utils.AssetLibrary","loadFont",0xbd1e8c02,"lime.utils.AssetLibrary.loadFont","lime/utils/AssetLibrary.hx",568,0x8b4b8bbb)
HX_LOCAL_STACK_FRAME(_hx_pos_302b88cc6233d9fb_636_loadImage,"lime.utils.AssetLibrary","loadImage",0x76735dc8,"lime.utils.AssetLibrary.loadImage","lime/utils/AssetLibrary.hx",636,0x8b4b8bbb)
HX_LOCAL_STACK_FRAME(_hx_pos_302b88cc6233d9fb_655_loadText,"lime.utils.AssetLibrary","loadText",0xc657fae0,"lime.utils.AssetLibrary.loadText","lime/utils/AssetLibrary.hx",655,0x8b4b8bbb)
HX_LOCAL_STACK_FRAME(_hx_pos_302b88cc6233d9fb_685_unload,"lime.utils.AssetLibrary","unload",0x6003f8ac,"lime.utils.AssetLibrary.unload","lime/utils/AssetLibrary.hx",685,0x8b4b8bbb)
HX_LOCAL_STACK_FRAME(_hx_pos_302b88cc6233d9fb_692___assetLoaded,"lime.utils.AssetLibrary","__assetLoaded",0x549222e8,"lime.utils.AssetLibrary.__assetLoaded","lime/utils/AssetLibrary.hx",692,0x8b4b8bbb)
HX_LOCAL_STACK_FRAME(_hx_pos_302b88cc6233d9fb_755___cacheBreak,"lime.utils.AssetLibrary","__cacheBreak",0xc74bddaa,"lime.utils.AssetLibrary.__cacheBreak","lime/utils/AssetLibrary.hx",755,0x8b4b8bbb)
HX_LOCAL_STACK_FRAME(_hx_pos_302b88cc6233d9fb_760___fromManifest,"lime.utils.AssetLibrary","__fromManifest",0xf24ba706,"lime.utils.AssetLibrary.__fromManifest","lime/utils/AssetLibrary.hx",760,0x8b4b8bbb)
HX_LOCAL_STACK_FRAME(_hx_pos_302b88cc6233d9fb_845_loadAudioBuffer_onComplete,"lime.utils.AssetLibrary","loadAudioBuffer_onComplete",0xd987b254,"lime.utils.AssetLibrary.loadAudioBuffer_onComplete","lime/utils/AssetLibrary.hx",845,0x8b4b8bbb)
HX_LOCAL_STACK_FRAME(_hx_pos_302b88cc6233d9fb_895_loadAudioBuffer_onError,"lime.utils.AssetLibrary","loadAudioBuffer_onError",0x87a6db4d,"lime.utils.AssetLibrary.loadAudioBuffer_onError","lime/utils/AssetLibrary.hx",895,0x8b4b8bbb)
HX_LOCAL_STACK_FRAME(_hx_pos_302b88cc6233d9fb_902_loadBytes_onComplete,"lime.utils.AssetLibrary","loadBytes_onComplete",0xaa249a3f,"lime.utils.AssetLibrary.loadBytes_onComplete","lime/utils/AssetLibrary.hx",902,0x8b4b8bbb)
HX_LOCAL_STACK_FRAME(_hx_pos_302b88cc6233d9fb_910_loadFont_onComplete,"lime.utils.AssetLibrary","loadFont_onComplete",0x9f1c7155,"lime.utils.AssetLibrary.loadFont_onComplete","lime/utils/AssetLibrary.hx",910,0x8b4b8bbb)
HX_LOCAL_STACK_FRAME(_hx_pos_302b88cc6233d9fb_918_loadImage_onComplete,"lime.utils.AssetLibrary","loadImage_onComplete",0xa0d6094f,"lime.utils.AssetLibrary.loadImage_onComplete","lime/utils/AssetLibrary.hx",918,0x8b4b8bbb)
HX_LOCAL_STACK_FRAME(_hx_pos_302b88cc6233d9fb_926_loadText_onComplete,"lime.utils.AssetLibrary","loadText_onComplete",0xe39ed337,"lime.utils.AssetLibrary.loadText_onComplete","lime/utils/AssetLibrary.hx",926,0x8b4b8bbb)
HX_LOCAL_STACK_FRAME(_hx_pos_302b88cc6233d9fb_936_load_onError,"lime.utils.AssetLibrary","load_onError",0xb5eacb3d,"lime.utils.AssetLibrary.load_onError","lime/utils/AssetLibrary.hx",936,0x8b4b8bbb)
HX_LOCAL_STACK_FRAME(_hx_pos_302b88cc6233d9fb_952_load_onProgress,"lime.utils.AssetLibrary","load_onProgress",0x56294f58,"lime.utils.AssetLibrary.load_onProgress","lime/utils/AssetLibrary.hx",952,0x8b4b8bbb)
HX_LOCAL_STACK_FRAME(_hx_pos_302b88cc6233d9fb_108_fromBytes,"lime.utils.AssetLibrary","fromBytes",0x0ff3e514,"lime.utils.AssetLibrary.fromBytes","lime/utils/AssetLibrary.hx",108,0x8b4b8bbb)
HX_LOCAL_STACK_FRAME(_hx_pos_302b88cc6233d9fb_115_fromFile,"lime.utils.AssetLibrary","fromFile",0xaa45f9f3,"lime.utils.AssetLibrary.fromFile","lime/utils/AssetLibrary.hx",115,0x8b4b8bbb)
HX_LOCAL_STACK_FRAME(_hx_pos_302b88cc6233d9fb_120_fromManifest,"lime.utils.AssetLibrary","fromManifest",0x0354aea6,"lime.utils.AssetLibrary.fromManifest","lime/utils/AssetLibrary.hx",120,0x8b4b8bbb)
HX_LOCAL_STACK_FRAME(_hx_pos_302b88cc6233d9fb_599_loadFromBytes,"lime.utils.AssetLibrary","loadFromBytes",0x12cf6b8e,"lime.utils.AssetLibrary.loadFromBytes","lime/utils/AssetLibrary.hx",599,0x8b4b8bbb)
HX_LOCAL_STACK_FRAME(_hx_pos_302b88cc6233d9fb_597_loadFromBytes,"lime.utils.AssetLibrary","loadFromBytes",0x12cf6b8e,"lime.utils.AssetLibrary.loadFromBytes","lime/utils/AssetLibrary.hx",597,0x8b4b8bbb)
HX_LOCAL_STACK_FRAME(_hx_pos_302b88cc6233d9fb_610_loadFromFile,"lime.utils.AssetLibrary","loadFromFile",0xee0460b9,"lime.utils.AssetLibrary.loadFromFile","lime/utils/AssetLibrary.hx",610,0x8b4b8bbb)
HX_LOCAL_STACK_FRAME(_hx_pos_302b88cc6233d9fb_608_loadFromFile,"lime.utils.AssetLibrary","loadFromFile",0xee0460b9,"lime.utils.AssetLibrary.loadFromFile","lime/utils/AssetLibrary.hx",608,0x8b4b8bbb)
HX_LOCAL_STACK_FRAME(_hx_pos_302b88cc6233d9fb_617_loadFromManifest,"lime.utils.AssetLibrary","loadFromManifest",0xde94f06c,"lime.utils.AssetLibrary.loadFromManifest","lime/utils/AssetLibrary.hx",617,0x8b4b8bbb)
namespace lime{
namespace utils{

void AssetLibrary_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_302b88cc6233d9fb_27_new)
HXLINE(  49)		this->types =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE(  48)		this->sizes =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE(  46)		this->preload =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE(  45)		this->paths =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE(  44)		this->pathGroups =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE(  42)		this->classTypes =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE(  41)		this->cachedText =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE(  40)		this->cachedImages =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE(  39)		this->cachedFonts =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE(  38)		this->cachedBytes =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE(  37)		this->cachedAudioBuffers =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE(  30)		this->onChange =  ::lime::app::_Event_Void_Void_obj::__alloc( HX_CTX );
HXLINE(  54)		this->bytesLoaded = (int)0;
HXLINE(  55)		this->bytesTotal = (int)0;
            	}

Dynamic AssetLibrary_obj::__CreateEmpty() { return new AssetLibrary_obj; }

void *AssetLibrary_obj::_hx_vtable = 0;

Dynamic AssetLibrary_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< AssetLibrary_obj > _hx_result = new AssetLibrary_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool AssetLibrary_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x425552e3;
}

bool AssetLibrary_obj::exists(::String id,::String type){
            	HX_STACKFRAME(&_hx_pos_302b88cc6233d9fb_60_exists)
HXLINE(  62)		::String requestedType;
HXDLIN(  62)		if (hx::IsNotNull( type )) {
HXLINE(  62)			requestedType = type;
            		}
            		else {
HXLINE(  62)			requestedType = null();
            		}
HXLINE(  63)		::String assetType = ( (::String)(this->types->get(id)) );
HXLINE(  65)		if (hx::IsNotNull( assetType )) {
HXLINE(  67)			bool _hx_tmp;
HXDLIN(  67)			if ((assetType != requestedType)) {
HXLINE(  67)				bool _hx_tmp1;
HXDLIN(  67)				if ((requestedType != HX_("SOUND",af,c4,ba,fe))) {
HXLINE(  67)					_hx_tmp1 = (requestedType == HX_("MUSIC",85,08,49,8e));
            				}
            				else {
HXLINE(  67)					_hx_tmp1 = true;
            				}
HXDLIN(  67)				if (_hx_tmp1) {
HXLINE(  67)					if ((assetType != HX_("MUSIC",85,08,49,8e))) {
HXLINE(  67)						_hx_tmp = (assetType == HX_("SOUND",af,c4,ba,fe));
            					}
            					else {
HXLINE(  67)						_hx_tmp = true;
            					}
            				}
            				else {
HXLINE(  67)					_hx_tmp = false;
            				}
            			}
            			else {
HXLINE(  67)				_hx_tmp = true;
            			}
HXDLIN(  67)			if (_hx_tmp) {
HXLINE(  69)				return true;
            			}
HXLINE(  91)			bool _hx_tmp2;
HXDLIN(  91)			bool _hx_tmp3;
HXDLIN(  91)			if ((requestedType != HX_("BINARY",01,68,8e,9f))) {
HXLINE(  91)				_hx_tmp3 = hx::IsNull( requestedType );
            			}
            			else {
HXLINE(  91)				_hx_tmp3 = true;
            			}
HXDLIN(  91)			if (!(_hx_tmp3)) {
HXLINE(  91)				if ((assetType == HX_("BINARY",01,68,8e,9f))) {
HXLINE(  91)					_hx_tmp2 = (requestedType == HX_("TEXT",ad,94,ba,37));
            				}
            				else {
HXLINE(  91)					_hx_tmp2 = false;
            				}
            			}
            			else {
HXLINE(  91)				_hx_tmp2 = true;
            			}
HXDLIN(  91)			if (_hx_tmp2) {
HXLINE(  93)				return true;
            			}
            		}
HXLINE( 101)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC2(AssetLibrary_obj,exists,return )

 ::Dynamic AssetLibrary_obj::getAsset(::String id,::String type){
            	HX_STACKFRAME(&_hx_pos_302b88cc6233d9fb_156_getAsset)
HXDLIN( 156)		::String _hx_switch_0 = type;
            		if (  (_hx_switch_0==HX_("BINARY",01,68,8e,9f)) ){
HXLINE( 158)			return this->getBytes(id);
HXDLIN( 158)			goto _hx_goto_2;
            		}
            		if (  (_hx_switch_0==HX_("FONT",cf,25,81,2e)) ){
HXLINE( 159)			return this->getFont(id);
HXDLIN( 159)			goto _hx_goto_2;
            		}
            		if (  (_hx_switch_0==HX_("IMAGE",3b,57,57,3b)) ){
HXLINE( 160)			return this->getImage(id);
HXDLIN( 160)			goto _hx_goto_2;
            		}
            		if (  (_hx_switch_0==HX_("MUSIC",85,08,49,8e)) ||  (_hx_switch_0==HX_("SOUND",af,c4,ba,fe)) ){
HXLINE( 161)			return this->getAudioBuffer(id);
HXDLIN( 161)			goto _hx_goto_2;
            		}
            		if (  (_hx_switch_0==HX_("TEMPLATE",3a,78,cd,05)) ){
HXLINE( 164)			HX_STACK_DO_THROW((HX_("Not sure how to get template: ",a1,19,8c,ad) + id));
HXDLIN( 164)			goto _hx_goto_2;
            		}
            		if (  (_hx_switch_0==HX_("TEXT",ad,94,ba,37)) ){
HXLINE( 162)			return this->getText(id);
HXDLIN( 162)			goto _hx_goto_2;
            		}
            		/* default */{
HXLINE( 165)			HX_STACK_DO_THROW((HX_("Unknown asset type: ",86,5e,db,f9) + type));
            		}
            		_hx_goto_2:;
HXLINE( 156)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC2(AssetLibrary_obj,getAsset,return )

 ::lime::media::AudioBuffer AssetLibrary_obj::getAudioBuffer(::String id){
            	HX_STACKFRAME(&_hx_pos_302b88cc6233d9fb_174_getAudioBuffer)
HXDLIN( 174)		if (this->cachedAudioBuffers->exists(id)) {
HXLINE( 176)			return this->cachedAudioBuffers->get(id).StaticCast<  ::lime::media::AudioBuffer >();
            		}
            		else {
HXLINE( 178)			if (this->classTypes->exists(id)) {
HXLINE( 188)				return ::lime::media::AudioBuffer_obj::fromBytes(hx::TCast<  ::haxe::io::Bytes >::cast(::Type_obj::createInstance(this->classTypes->get(id).StaticCast< hx::Class >(),::cpp::VirtualArray_obj::__new(0))));
            			}
            			else {
HXLINE( 194)				return ::lime::media::AudioBuffer_obj::fromFile(( (::String)(this->paths->get(id)) ));
            			}
            		}
HXLINE( 174)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(AssetLibrary_obj,getAudioBuffer,return )

 ::haxe::io::Bytes AssetLibrary_obj::getBytes(::String id){
            	HX_STACKFRAME(&_hx_pos_302b88cc6233d9fb_203_getBytes)
HXDLIN( 203)		if (this->cachedBytes->exists(id)) {
HXLINE( 205)			return this->cachedBytes->get(id).StaticCast<  ::haxe::io::Bytes >();
            		}
            		else {
HXLINE( 207)			if (this->cachedText->exists(id)) {
HXLINE( 209)				 ::haxe::io::Bytes bytes = ::lime::utils::_Bytes::Bytes_Impl__obj::ofString(( (::String)(this->cachedText->get(id)) ));
HXLINE( 210)				this->cachedBytes->set(id,bytes);
HXLINE( 211)				return bytes;
            			}
            			else {
HXLINE( 213)				if (this->classTypes->exists(id)) {
HXLINE( 238)					return hx::TCast<  ::haxe::io::Bytes >::cast(::Type_obj::createInstance(this->classTypes->get(id).StaticCast< hx::Class >(),::cpp::VirtualArray_obj::__new(0)));
            				}
            				else {
HXLINE( 244)					return ::lime::utils::_Bytes::Bytes_Impl__obj::fromFile(( (::String)(this->paths->get(id)) ));
            				}
            			}
            		}
HXLINE( 203)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(AssetLibrary_obj,getBytes,return )

 ::lime::text::Font AssetLibrary_obj::getFont(::String id){
            	HX_STACKFRAME(&_hx_pos_302b88cc6233d9fb_253_getFont)
HXDLIN( 253)		if (this->cachedFonts->exists(id)) {
HXLINE( 255)			return this->cachedFonts->get(id).StaticCast<  ::lime::text::Font >();
            		}
            		else {
HXLINE( 257)			if (this->classTypes->exists(id)) {
HXLINE( 269)				return hx::TCast<  ::lime::text::Font >::cast(::Type_obj::createInstance(this->classTypes->get(id).StaticCast< hx::Class >(),::cpp::VirtualArray_obj::__new(0)));
            			}
            			else {
HXLINE( 275)				return ::lime::text::Font_obj::fromFile(( (::String)(this->paths->get(id)) ));
            			}
            		}
HXLINE( 253)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(AssetLibrary_obj,getFont,return )

 ::lime::graphics::Image AssetLibrary_obj::getImage(::String id){
            	HX_STACKFRAME(&_hx_pos_302b88cc6233d9fb_284_getImage)
HXDLIN( 284)		if (this->cachedImages->exists(id)) {
HXLINE( 286)			return this->cachedImages->get(id).StaticCast<  ::lime::graphics::Image >();
            		}
            		else {
HXLINE( 288)			if (this->classTypes->exists(id)) {
HXLINE( 296)				return hx::TCast<  ::lime::graphics::Image >::cast(::Type_obj::createInstance(this->classTypes->get(id).StaticCast< hx::Class >(),::cpp::VirtualArray_obj::__new(0)));
            			}
            			else {
HXLINE( 302)				return ::lime::graphics::Image_obj::fromFile(( (::String)(this->paths->get(id)) ));
            			}
            		}
HXLINE( 284)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(AssetLibrary_obj,getImage,return )

::String AssetLibrary_obj::getPath(::String id){
            	HX_STACKFRAME(&_hx_pos_302b88cc6233d9fb_311_getPath)
HXDLIN( 311)		if (this->paths->exists(id)) {
HXLINE( 313)			return ( (::String)(this->paths->get(id)) );
            		}
            		else {
HXLINE( 315)			if (this->pathGroups->exists(id)) {
HXLINE( 317)				return ( (::String)(this->pathGroups->get(id)->__GetItem((int)0)) );
            			}
            			else {
HXLINE( 321)				return null();
            			}
            		}
HXLINE( 311)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(AssetLibrary_obj,getPath,return )

::String AssetLibrary_obj::getText(::String id){
            	HX_STACKFRAME(&_hx_pos_302b88cc6233d9fb_330_getText)
HXDLIN( 330)		if (this->cachedText->exists(id)) {
HXLINE( 332)			return ( (::String)(this->cachedText->get(id)) );
            		}
            		else {
HXLINE( 336)			 ::haxe::io::Bytes bytes = this->getBytes(id);
HXLINE( 338)			if (hx::IsNull( bytes )) {
HXLINE( 340)				return null();
            			}
            			else {
HXLINE( 344)				return bytes->getString((int)0,bytes->length);
            			}
            		}
HXLINE( 330)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(AssetLibrary_obj,getText,return )

bool AssetLibrary_obj::isLocal(::String id,::String type){
            	HX_STACKFRAME(&_hx_pos_302b88cc6233d9fb_357_isLocal)
HXDLIN( 357)		return true;
            	}


HX_DEFINE_DYNAMIC_FUNC2(AssetLibrary_obj,isLocal,return )

::Array< ::String > AssetLibrary_obj::list(::String type){
            	HX_STACKFRAME(&_hx_pos_302b88cc6233d9fb_394_list)
HXLINE( 396)		::String requestedType;
HXDLIN( 396)		if (hx::IsNotNull( type )) {
HXLINE( 396)			requestedType = type;
            		}
            		else {
HXLINE( 396)			requestedType = null();
            		}
HXLINE( 397)		::Array< ::String > items = ::Array_obj< ::String >::__new(0);
HXLINE( 399)		{
HXLINE( 399)			 ::Dynamic id = this->types->keys();
HXDLIN( 399)			while(( (bool)(id->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE( 399)				::String id1 = ( (::String)(id->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE( 401)				bool _hx_tmp;
HXDLIN( 401)				if (hx::IsNotNull( requestedType )) {
HXLINE( 401)					_hx_tmp = this->exists(id1,type);
            				}
            				else {
HXLINE( 401)					_hx_tmp = true;
            				}
HXDLIN( 401)				if (_hx_tmp) {
HXLINE( 403)					items->push(id1);
            				}
            			}
            		}
HXLINE( 409)		return items;
            	}


HX_DEFINE_DYNAMIC_FUNC1(AssetLibrary_obj,list,return )

 ::lime::app::Future AssetLibrary_obj::loadAsset(::String id,::String type){
            	HX_STACKFRAME(&_hx_pos_302b88cc6233d9fb_416_loadAsset)
HXDLIN( 416)		::String _hx_switch_0 = type;
            		if (  (_hx_switch_0==HX_("BINARY",01,68,8e,9f)) ){
HXLINE( 418)			return this->loadBytes(id);
HXDLIN( 418)			goto _hx_goto_13;
            		}
            		if (  (_hx_switch_0==HX_("FONT",cf,25,81,2e)) ){
HXLINE( 419)			return this->loadFont(id);
HXDLIN( 419)			goto _hx_goto_13;
            		}
            		if (  (_hx_switch_0==HX_("IMAGE",3b,57,57,3b)) ){
HXLINE( 420)			return this->loadImage(id);
HXDLIN( 420)			goto _hx_goto_13;
            		}
            		if (  (_hx_switch_0==HX_("MUSIC",85,08,49,8e)) ||  (_hx_switch_0==HX_("SOUND",af,c4,ba,fe)) ){
HXLINE( 421)			return this->loadAudioBuffer(id);
HXDLIN( 421)			goto _hx_goto_13;
            		}
            		if (  (_hx_switch_0==HX_("TEMPLATE",3a,78,cd,05)) ){
HXLINE( 424)			HX_STACK_DO_THROW((HX_("Not sure how to load template: ",43,70,39,d8) + id));
HXDLIN( 424)			goto _hx_goto_13;
            		}
            		if (  (_hx_switch_0==HX_("TEXT",ad,94,ba,37)) ){
HXLINE( 422)			return this->loadText(id);
HXDLIN( 422)			goto _hx_goto_13;
            		}
            		/* default */{
HXLINE( 425)			HX_STACK_DO_THROW((HX_("Unknown asset type: ",86,5e,db,f9) + type));
            		}
            		_hx_goto_13:;
HXLINE( 416)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC2(AssetLibrary_obj,loadAsset,return )

 ::lime::app::Future AssetLibrary_obj::load(){
            	HX_GC_STACKFRAME(&_hx_pos_302b88cc6233d9fb_432_load)
HXLINE( 434)		if (this->loaded) {
HXLINE( 436)			return ::lime::app::Future_obj::withValue(hx::ObjectPtr<OBJ_>(this));
            		}
HXLINE( 440)		if (hx::IsNull( this->promise )) {
HXLINE( 442)			this->promise =  ::lime::app::Promise_lime_utils_AssetLibrary_obj::__alloc( HX_CTX );
HXLINE( 443)			this->bytesLoadedCache =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE( 445)			this->assetsLoaded = (int)0;
HXLINE( 446)			this->assetsTotal = (int)1;
HXLINE( 448)			{
HXLINE( 448)				 ::Dynamic id = this->preload->keys();
HXDLIN( 448)				while(( (bool)(id->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE( 448)					::String id1 = ( (::String)(id->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE( 450)					if (!(( (bool)(this->preload->get(id1)) ))) {
HXLINE( 450)						continue;
            					}
HXLINE( 452)					::String _hx_tmp = ((((HX_("Preloading asset: ",4f,4a,58,bd) + id1) + HX_(" [",3b,1c,00,00)) + ( (::String)(this->types->get(id1)) )) + HX_("]",5d,00,00,00));
HXDLIN( 452)					::lime::utils::Log_obj::verbose(_hx_tmp,hx::SourceInfo(HX_("AssetLibrary.hx",93,ac,ef,b3),452,HX_("lime.utils.AssetLibrary",21,55,e9,fc),HX_("load",26,9a,b7,47)));
HXLINE( 454)					{
HXLINE( 454)						::String _g = ( (::String)(::haxe::IMap_obj::get(this->types,id1)) );
HXDLIN( 454)						if (hx::IsNotNull( _g )) {
HXLINE( 454)							::String _hx_switch_0 = _g;
            							if (  (_hx_switch_0==HX_("BINARY",01,68,8e,9f)) ){
            								HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_0, ::Dynamic,f,::String,id2) HXARGC(2)
            								void _hx_run(int a1,int a2){
            									HX_GC_STACKFRAME(&_hx_pos_302b88cc6233d9fb_461_load)
HXLINE( 461)									f(id2,a1,a2);
            								}
            								HX_END_LOCAL_FUNC2((void))

            								HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_1,::String,id3, ::Dynamic,f1) HXARGC(1)
            								void _hx_run( ::Dynamic a11){
            									HX_GC_STACKFRAME(&_hx_pos_302b88cc6233d9fb_462_load)
HXLINE( 462)									f1(id3,a11);
            								}
            								HX_END_LOCAL_FUNC1((void))

            								HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_2,::String,id4, ::Dynamic,f2) HXARGC(1)
            								void _hx_run( ::haxe::io::Bytes a12){
            									HX_GC_STACKFRAME(&_hx_pos_302b88cc6233d9fb_463_load)
HXLINE( 463)									f2(id4,a12);
            								}
            								HX_END_LOCAL_FUNC1((void))

HXLINE( 458)								this->assetsTotal++;
HXLINE( 460)								 ::lime::app::Future future = this->loadBytes(id1);
HXLINE( 461)								 ::Dynamic f = this->load_onProgress_dyn();
HXDLIN( 461)								::String id2 = id1;
HXDLIN( 461)								future->onProgress( ::Dynamic(new _hx_Closure_0(f,id2)));
HXLINE( 462)								 ::Dynamic f1 = this->load_onError_dyn();
HXDLIN( 462)								::String id3 = id1;
HXDLIN( 462)								future->onError( ::Dynamic(new _hx_Closure_1(id3,f1)));
HXLINE( 463)								 ::Dynamic f2 = this->loadBytes_onComplete_dyn();
HXDLIN( 463)								::String id4 = id1;
HXDLIN( 463)								future->onComplete( ::Dynamic(new _hx_Closure_2(id4,f2)));
HXLINE( 456)								goto _hx_goto_16;
            							}
            							if (  (_hx_switch_0==HX_("FONT",cf,25,81,2e)) ){
            								HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_3, ::Dynamic,f3,::String,id5) HXARGC(2)
            								void _hx_run(int a13,int a21){
            									HX_GC_STACKFRAME(&_hx_pos_302b88cc6233d9fb_470_load)
HXLINE( 470)									f3(id5,a13,a21);
            								}
            								HX_END_LOCAL_FUNC2((void))

            								HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_4,::String,id6, ::Dynamic,f4) HXARGC(1)
            								void _hx_run( ::Dynamic a14){
            									HX_GC_STACKFRAME(&_hx_pos_302b88cc6233d9fb_471_load)
HXLINE( 471)									f4(id6,a14);
            								}
            								HX_END_LOCAL_FUNC1((void))

            								HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_5, ::Dynamic,f5,::String,id7) HXARGC(1)
            								void _hx_run( ::lime::text::Font a15){
            									HX_GC_STACKFRAME(&_hx_pos_302b88cc6233d9fb_472_load)
HXLINE( 472)									f5(id7,a15);
            								}
            								HX_END_LOCAL_FUNC1((void))

HXLINE( 467)								this->assetsTotal++;
HXLINE( 469)								 ::lime::app::Future future1 = this->loadFont(id1);
HXLINE( 470)								 ::Dynamic f3 = this->load_onProgress_dyn();
HXDLIN( 470)								::String id5 = id1;
HXDLIN( 470)								future1->onProgress( ::Dynamic(new _hx_Closure_3(f3,id5)));
HXLINE( 471)								 ::Dynamic f4 = this->load_onError_dyn();
HXDLIN( 471)								::String id6 = id1;
HXDLIN( 471)								future1->onError( ::Dynamic(new _hx_Closure_4(id6,f4)));
HXLINE( 472)								 ::Dynamic f5 = this->loadFont_onComplete_dyn();
HXDLIN( 472)								::String id7 = id1;
HXDLIN( 472)								future1->onComplete( ::Dynamic(new _hx_Closure_5(f5,id7)));
HXLINE( 465)								goto _hx_goto_16;
            							}
            							if (  (_hx_switch_0==HX_("IMAGE",3b,57,57,3b)) ){
            								HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_6, ::Dynamic,f6,::String,id8) HXARGC(2)
            								void _hx_run(int a16,int a22){
            									HX_GC_STACKFRAME(&_hx_pos_302b88cc6233d9fb_479_load)
HXLINE( 479)									f6(id8,a16,a22);
            								}
            								HX_END_LOCAL_FUNC2((void))

            								HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_7, ::Dynamic,f7,::String,id9) HXARGC(1)
            								void _hx_run( ::Dynamic a17){
            									HX_GC_STACKFRAME(&_hx_pos_302b88cc6233d9fb_480_load)
HXLINE( 480)									f7(id9,a17);
            								}
            								HX_END_LOCAL_FUNC1((void))

            								HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_8,::String,id10, ::Dynamic,f8) HXARGC(1)
            								void _hx_run( ::lime::graphics::Image a18){
            									HX_GC_STACKFRAME(&_hx_pos_302b88cc6233d9fb_481_load)
HXLINE( 481)									f8(id10,a18);
            								}
            								HX_END_LOCAL_FUNC1((void))

HXLINE( 476)								this->assetsTotal++;
HXLINE( 478)								 ::lime::app::Future future2 = this->loadImage(id1);
HXLINE( 479)								 ::Dynamic f6 = this->load_onProgress_dyn();
HXDLIN( 479)								::String id8 = id1;
HXDLIN( 479)								future2->onProgress( ::Dynamic(new _hx_Closure_6(f6,id8)));
HXLINE( 480)								 ::Dynamic f7 = this->load_onError_dyn();
HXDLIN( 480)								::String id9 = id1;
HXDLIN( 480)								future2->onError( ::Dynamic(new _hx_Closure_7(f7,id9)));
HXLINE( 481)								 ::Dynamic f8 = this->loadImage_onComplete_dyn();
HXDLIN( 481)								::String id10 = id1;
HXDLIN( 481)								future2->onComplete( ::Dynamic(new _hx_Closure_8(id10,f8)));
HXLINE( 474)								goto _hx_goto_16;
            							}
            							if (  (_hx_switch_0==HX_("MUSIC",85,08,49,8e)) ||  (_hx_switch_0==HX_("SOUND",af,c4,ba,fe)) ){
            								HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_9,::String,id11, ::Dynamic,f9) HXARGC(2)
            								void _hx_run(int a19,int a23){
            									HX_GC_STACKFRAME(&_hx_pos_302b88cc6233d9fb_488_load)
HXLINE( 488)									f9(id11,a19,a23);
            								}
            								HX_END_LOCAL_FUNC2((void))

            								HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_10, ::Dynamic,f10,::String,id12) HXARGC(1)
            								void _hx_run( ::Dynamic a110){
            									HX_GC_STACKFRAME(&_hx_pos_302b88cc6233d9fb_489_load)
HXLINE( 489)									f10(id12,a110);
            								}
            								HX_END_LOCAL_FUNC1((void))

            								HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_11,::String,id13, ::Dynamic,f11) HXARGC(1)
            								void _hx_run( ::lime::media::AudioBuffer a111){
            									HX_GC_STACKFRAME(&_hx_pos_302b88cc6233d9fb_490_load)
HXLINE( 490)									f11(id13,a111);
            								}
            								HX_END_LOCAL_FUNC1((void))

HXLINE( 485)								this->assetsTotal++;
HXLINE( 487)								 ::lime::app::Future future3 = this->loadAudioBuffer(id1);
HXLINE( 488)								 ::Dynamic f9 = this->load_onProgress_dyn();
HXDLIN( 488)								::String id11 = id1;
HXDLIN( 488)								future3->onProgress( ::Dynamic(new _hx_Closure_9(id11,f9)));
HXLINE( 489)								 ::Dynamic f10 = this->loadAudioBuffer_onError_dyn();
HXDLIN( 489)								::String id12 = id1;
HXDLIN( 489)								future3->onError( ::Dynamic(new _hx_Closure_10(f10,id12)));
HXLINE( 490)								 ::Dynamic f11 = this->loadAudioBuffer_onComplete_dyn();
HXDLIN( 490)								::String id13 = id1;
HXDLIN( 490)								future3->onComplete( ::Dynamic(new _hx_Closure_11(id13,f11)));
HXLINE( 483)								goto _hx_goto_16;
            							}
            							if (  (_hx_switch_0==HX_("TEXT",ad,94,ba,37)) ){
            								HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_12,::String,id14, ::Dynamic,f12) HXARGC(2)
            								void _hx_run(int a112,int a24){
            									HX_GC_STACKFRAME(&_hx_pos_302b88cc6233d9fb_497_load)
HXLINE( 497)									f12(id14,a112,a24);
            								}
            								HX_END_LOCAL_FUNC2((void))

            								HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_13,::String,id15, ::Dynamic,f13) HXARGC(1)
            								void _hx_run( ::Dynamic a113){
            									HX_GC_STACKFRAME(&_hx_pos_302b88cc6233d9fb_498_load)
HXLINE( 498)									f13(id15,a113);
            								}
            								HX_END_LOCAL_FUNC1((void))

            								HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_14,::String,id16, ::Dynamic,f14) HXARGC(1)
            								void _hx_run(::String a114){
            									HX_GC_STACKFRAME(&_hx_pos_302b88cc6233d9fb_499_load)
HXLINE( 499)									f14(id16,a114);
            								}
            								HX_END_LOCAL_FUNC1((void))

HXLINE( 494)								this->assetsTotal++;
HXLINE( 496)								 ::lime::app::Future future4 = this->loadText(id1);
HXLINE( 497)								 ::Dynamic f12 = this->load_onProgress_dyn();
HXDLIN( 497)								::String id14 = id1;
HXDLIN( 497)								future4->onProgress( ::Dynamic(new _hx_Closure_12(id14,f12)));
HXLINE( 498)								 ::Dynamic f13 = this->load_onError_dyn();
HXDLIN( 498)								::String id15 = id1;
HXDLIN( 498)								future4->onError( ::Dynamic(new _hx_Closure_13(id15,f13)));
HXLINE( 499)								 ::Dynamic f14 = this->loadText_onComplete_dyn();
HXDLIN( 499)								::String id16 = id1;
HXDLIN( 499)								future4->onComplete( ::Dynamic(new _hx_Closure_14(id16,f14)));
HXLINE( 492)								goto _hx_goto_16;
            							}
            							/* default */{
            							}
            							_hx_goto_16:;
            						}
            					}
            				}
            			}
HXLINE( 507)			this->_hx___assetLoaded(null());
            		}
HXLINE( 511)		return this->promise->future;
            	}


HX_DEFINE_DYNAMIC_FUNC0(AssetLibrary_obj,load,return )

 ::lime::app::Future AssetLibrary_obj::loadAudioBuffer(::String id){
            	HX_STACKFRAME(&_hx_pos_302b88cc6233d9fb_518_loadAudioBuffer)
HXDLIN( 518)		if (this->cachedAudioBuffers->exists(id)) {
HXLINE( 520)			return ::lime::app::Future_obj::withValue(this->cachedAudioBuffers->get(id).StaticCast<  ::lime::media::AudioBuffer >());
            		}
            		else {
HXLINE( 522)			if (this->classTypes->exists(id)) {
HXLINE( 524)				return ::lime::app::Future_obj::withValue(::Type_obj::createInstance(this->classTypes->get(id).StaticCast< hx::Class >(),::cpp::VirtualArray_obj::__new(0)));
            			}
            			else {
HXLINE( 528)				if (this->pathGroups->exists(id)) {
HXLINE( 530)					return ::lime::media::AudioBuffer_obj::loadFromFiles(( (::Array< ::String >)(this->pathGroups->get(id)) ));
            				}
            				else {
HXLINE( 534)					return ::lime::media::AudioBuffer_obj::loadFromFile(( (::String)(this->paths->get(id)) ));
            				}
            			}
            		}
HXLINE( 518)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(AssetLibrary_obj,loadAudioBuffer,return )

 ::lime::app::Future AssetLibrary_obj::loadBytes(::String id){
            	HX_STACKFRAME(&_hx_pos_302b88cc6233d9fb_545_loadBytes)
HXDLIN( 545)		if (this->cachedBytes->exists(id)) {
HXLINE( 547)			return ::lime::app::Future_obj::withValue(this->cachedBytes->get(id).StaticCast<  ::haxe::io::Bytes >());
            		}
            		else {
HXLINE( 549)			if (this->classTypes->exists(id)) {
HXLINE( 554)				return ::lime::app::Future_obj::withValue(::Type_obj::createInstance(this->classTypes->get(id).StaticCast< hx::Class >(),::cpp::VirtualArray_obj::__new(0)));
            			}
            			else {
HXLINE( 559)				return ::lime::utils::_Bytes::Bytes_Impl__obj::loadFromFile(( (::String)(this->paths->get(id)) ));
            			}
            		}
HXLINE( 545)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(AssetLibrary_obj,loadBytes,return )

 ::lime::app::Future AssetLibrary_obj::loadFont(::String id){
            	HX_STACKFRAME(&_hx_pos_302b88cc6233d9fb_568_loadFont)
HXDLIN( 568)		if (this->cachedFonts->exists(id)) {
HXLINE( 570)			return ::lime::app::Future_obj::withValue(this->cachedFonts->get(id).StaticCast<  ::lime::text::Font >());
            		}
            		else {
HXLINE( 572)			if (this->classTypes->exists(id)) {
HXLINE( 574)				 ::lime::text::Font font = ( ( ::lime::text::Font)(::Type_obj::createInstance(this->classTypes->get(id).StaticCast< hx::Class >(),::cpp::VirtualArray_obj::__new(0))) );
HXLINE( 579)				return ::lime::app::Future_obj::withValue(font);
            			}
            			else {
HXLINE( 587)				return ::lime::text::Font_obj::loadFromFile(( (::String)(this->paths->get(id)) ));
            			}
            		}
HXLINE( 568)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(AssetLibrary_obj,loadFont,return )

 ::lime::app::Future AssetLibrary_obj::loadImage(::String id){
            	HX_STACKFRAME(&_hx_pos_302b88cc6233d9fb_636_loadImage)
HXDLIN( 636)		if (this->cachedImages->exists(id)) {
HXLINE( 638)			return ::lime::app::Future_obj::withValue(this->cachedImages->get(id).StaticCast<  ::lime::graphics::Image >());
            		}
            		else {
HXLINE( 640)			if (this->classTypes->exists(id)) {
HXLINE( 642)				return ::lime::app::Future_obj::withValue(::Type_obj::createInstance(this->classTypes->get(id).StaticCast< hx::Class >(),::cpp::VirtualArray_obj::__new(0)));
            			}
            			else {
HXLINE( 646)				return ::lime::graphics::Image_obj::loadFromFile(( (::String)(this->paths->get(id)) ));
            			}
            		}
HXLINE( 636)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(AssetLibrary_obj,loadImage,return )

 ::lime::app::Future AssetLibrary_obj::loadText(::String id){
            	HX_GC_STACKFRAME(&_hx_pos_302b88cc6233d9fb_655_loadText)
HXDLIN( 655)		if (this->cachedText->exists(id)) {
HXLINE( 657)			return ::lime::app::Future_obj::withValue(this->cachedText->get(id));
            		}
            		else {
HXLINE( 659)			bool _hx_tmp;
HXDLIN( 659)			if (!(this->cachedBytes->exists(id))) {
HXLINE( 659)				_hx_tmp = this->classTypes->exists(id);
            			}
            			else {
HXLINE( 659)				_hx_tmp = true;
            			}
HXDLIN( 659)			if (_hx_tmp) {
HXLINE( 661)				 ::haxe::io::Bytes bytes = this->getBytes(id);
HXLINE( 663)				if (hx::IsNull( bytes )) {
HXLINE( 665)					return ::lime::app::Future_obj::withValue(null());
            				}
            				else {
HXLINE( 669)					::String text = bytes->getString((int)0,bytes->length);
HXLINE( 670)					this->cachedText->set(id,text);
HXLINE( 671)					return ::lime::app::Future_obj::withValue(text);
            				}
            			}
            			else {
HXLINE( 677)				 ::lime::net::_HTTPRequest_String request =  ::lime::net::_HTTPRequest_String_obj::__alloc( HX_CTX ,null());
HXLINE( 678)				return request->load(( (::String)(this->paths->get(id)) ));
            			}
            		}
HXLINE( 655)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(AssetLibrary_obj,loadText,return )

void AssetLibrary_obj::unload(){
            	HX_STACKFRAME(&_hx_pos_302b88cc6233d9fb_685_unload)
            	}


HX_DEFINE_DYNAMIC_FUNC0(AssetLibrary_obj,unload,(void))

void AssetLibrary_obj::_hx___assetLoaded(::String id){
            	HX_STACKFRAME(&_hx_pos_302b88cc6233d9fb_692___assetLoaded)
HXLINE( 694)		this->assetsLoaded++;
HXLINE( 696)		if (hx::IsNotNull( id )) {
HXLINE( 698)			::String _hx_tmp = ((((HX_("Loaded asset: ",9b,25,2e,eb) + id) + HX_(" [",3b,1c,00,00)) + ( (::String)(this->types->get(id)) )) + HX_("] (",a5,ad,46,00));
HXDLIN( 698)			::String _hx_tmp1 = ((_hx_tmp + (this->assetsLoaded - (int)1)) + HX_("/",2f,00,00,00));
HXDLIN( 698)			::lime::utils::Log_obj::verbose(((_hx_tmp1 + (this->assetsTotal - (int)1)) + HX_(")",29,00,00,00)),hx::SourceInfo(HX_("AssetLibrary.hx",93,ac,ef,b3),698,HX_("lime.utils.AssetLibrary",21,55,e9,fc),HX_("__assetLoaded",f5,7a,49,36)));
            		}
HXLINE( 702)		if (hx::IsNotNull( id )) {
HXLINE( 704)			 ::Dynamic size = this->sizes->get(id);
HXLINE( 706)			if (!(this->bytesLoadedCache->exists(id))) {
HXLINE( 708)				 ::lime::utils::AssetLibrary _hx_tmp2 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 708)				_hx_tmp2->bytesLoaded = (_hx_tmp2->bytesLoaded + size);
            			}
            			else {
HXLINE( 712)				 ::Dynamic cache = this->bytesLoadedCache->get(id);
HXLINE( 714)				if (hx::IsLess( cache,size )) {
HXLINE( 716)					 ::lime::utils::AssetLibrary _hx_tmp3 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 716)					_hx_tmp3->bytesLoaded = (_hx_tmp3->bytesLoaded + (size - cache));
            				}
            			}
HXLINE( 722)			this->bytesLoadedCache->set(id,size);
            		}
HXLINE( 726)		if ((this->assetsLoaded < this->assetsTotal)) {
HXLINE( 728)			this->promise->progress(this->bytesLoaded,this->bytesTotal);
            		}
            		else {
HXLINE( 732)			this->loaded = true;
HXLINE( 733)			this->promise->progress(this->bytesTotal,this->bytesTotal);
HXLINE( 734)			this->promise->complete(hx::ObjectPtr<OBJ_>(this));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(AssetLibrary_obj,_hx___assetLoaded,(void))

::String AssetLibrary_obj::_hx___cacheBreak(::String path){
            	HX_STACKFRAME(&_hx_pos_302b88cc6233d9fb_755___cacheBreak)
HXDLIN( 755)		return path;
            	}


HX_DEFINE_DYNAMIC_FUNC1(AssetLibrary_obj,_hx___cacheBreak,return )

void AssetLibrary_obj::_hx___fromManifest( ::lime::utils::AssetManifest manifest){
            	HX_STACKFRAME(&_hx_pos_302b88cc6233d9fb_760___fromManifest)
HXLINE( 762)		bool hasSize = (manifest->version >= (int)2);
HXLINE( 763)		int size;
HXDLIN( 763)		::String id;
HXDLIN( 763)		::Array< ::String > pathGroup;
HXDLIN( 763)		hx::Class classRef;
HXLINE( 765)		::String basePath = manifest->rootPath;
HXLINE( 766)		if (hx::IsNull( basePath )) {
HXLINE( 766)			basePath = HX_("",00,00,00,00);
            		}
HXLINE( 767)		if ((basePath != HX_("",00,00,00,00))) {
HXLINE( 767)			basePath = (basePath + HX_("/",2f,00,00,00));
            		}
HXLINE( 769)		{
HXLINE( 769)			int _g = (int)0;
HXDLIN( 769)			::cpp::VirtualArray _g1 = manifest->assets;
HXDLIN( 769)			while((_g < _g1->get_length())){
HXLINE( 769)				 ::Dynamic asset = _g1->__get(_g);
HXDLIN( 769)				_g = (_g + (int)1);
HXLINE( 771)				if (hasSize) {
HXLINE( 771)					size = ( (int)(asset->__Field(HX_("size",c1,a0,53,4c),hx::paccDynamic)) );
            				}
            				else {
HXLINE( 771)					size = (int)100;
            				}
HXLINE( 772)				id = ( (::String)(asset->__Field(HX_("id",db,5b,00,00),hx::paccDynamic)) );
HXLINE( 774)				if (::Reflect_obj::hasField(asset,HX_("path",a5,e5,51,4a))) {
HXLINE( 776)					::Dynamic this1 = this->paths;
HXDLIN( 776)					( ( ::haxe::ds::StringMap)(this1) )->set(id,this->_hx___cacheBreak((basePath + ::Std_obj::string(::Reflect_obj::field(asset,HX_("path",a5,e5,51,4a))))));
            				}
HXLINE( 780)				if (::Reflect_obj::hasField(asset,HX_("pathGroup",5a,a7,b4,8f))) {
HXLINE( 782)					pathGroup = ( (::Array< ::String >)(::Reflect_obj::field(asset,HX_("pathGroup",5a,a7,b4,8f))) );
HXLINE( 784)					{
HXLINE( 784)						int _g3 = (int)0;
HXDLIN( 784)						int _g2 = pathGroup->length;
HXDLIN( 784)						while((_g3 < _g2)){
HXLINE( 784)							_g3 = (_g3 + (int)1);
HXDLIN( 784)							int i = (_g3 - (int)1);
HXLINE( 786)							pathGroup[i] = this->_hx___cacheBreak((basePath + pathGroup->__get(i)));
            						}
            					}
HXLINE( 790)					this->pathGroups->set(id,pathGroup);
            				}
HXLINE( 794)				this->sizes->set(id,size);
HXLINE( 795)				this->types->set(id,( (::String)(asset->__Field(HX_("type",ba,f2,08,4d),hx::paccDynamic)) ));
HXLINE( 797)				if (::Reflect_obj::hasField(asset,HX_("preload",c9,47,43,35))) {
HXLINE( 799)					::Dynamic this2 = this->preload;
HXDLIN( 799)					( ( ::haxe::ds::StringMap)(this2) )->set(id,( (bool)(::Reflect_obj::field(asset,HX_("preload",c9,47,43,35))) ));
            				}
HXLINE( 803)				if (::Reflect_obj::hasField(asset,HX_("className",a3,92,3d,dc))) {
HXLINE( 805)					classRef = ::Type_obj::resolveClass(( (::String)(::Reflect_obj::field(asset,HX_("className",a3,92,3d,dc))) ));
HXLINE( 815)					this->classTypes->set(id,classRef);
            				}
            			}
            		}
HXLINE( 821)		this->bytesTotal = (int)0;
HXLINE( 823)		{
HXLINE( 823)			int _g4 = (int)0;
HXDLIN( 823)			::cpp::VirtualArray _g11 = manifest->assets;
HXDLIN( 823)			while((_g4 < _g11->get_length())){
HXLINE( 823)				 ::Dynamic asset1 = _g11->__get(_g4);
HXDLIN( 823)				_g4 = (_g4 + (int)1);
HXLINE( 825)				id = ( (::String)(asset1->__Field(HX_("id",db,5b,00,00),hx::paccDynamic)) );
HXLINE( 827)				bool _hx_tmp;
HXDLIN( 827)				if (this->preload->exists(id)) {
HXLINE( 827)					_hx_tmp = ( (bool)(this->preload->get(id)) );
            				}
            				else {
HXLINE( 827)					_hx_tmp = false;
            				}
HXDLIN( 827)				if (_hx_tmp) {
HXLINE( 829)					 ::lime::utils::AssetLibrary _hx_tmp1 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 829)					int _hx_tmp2 = _hx_tmp1->bytesTotal;
HXDLIN( 829)					_hx_tmp1->bytesTotal = (_hx_tmp2 + this->sizes->get(id));
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(AssetLibrary_obj,_hx___fromManifest,(void))

void AssetLibrary_obj::loadAudioBuffer_onComplete(::String id, ::lime::media::AudioBuffer audioBuffer){
            	HX_STACKFRAME(&_hx_pos_302b88cc6233d9fb_845_loadAudioBuffer_onComplete)
HXLINE( 847)		this->cachedAudioBuffers->set(id,audioBuffer);
HXLINE( 849)		if (this->pathGroups->exists(id)) {
HXLINE( 851)			::Array< ::String > pathGroup = ( (::Array< ::String >)(this->pathGroups->get(id)) );
HXLINE( 853)			{
HXLINE( 853)				 ::Dynamic otherID = this->pathGroups->keys();
HXDLIN( 853)				while(( (bool)(otherID->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE( 853)					::String otherID1 = ( (::String)(otherID->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE( 855)					if ((otherID1 == id)) {
HXLINE( 855)						continue;
            					}
HXLINE( 857)					{
HXLINE( 857)						int _g = (int)0;
HXDLIN( 857)						while((_g < pathGroup->length)){
HXLINE( 857)							::String path = pathGroup->__get(_g);
HXDLIN( 857)							_g = (_g + (int)1);
HXLINE( 859)							if ((( (::Array< ::String >)(this->pathGroups->get(otherID1)) )->indexOf(path,null()) > (int)-1)) {
HXLINE( 861)								this->cachedAudioBuffers->set(otherID1,audioBuffer);
HXLINE( 862)								goto _hx_goto_46;
            							}
            						}
            						_hx_goto_46:;
            					}
            				}
            			}
            		}
HXLINE( 872)		this->_hx___assetLoaded(id);
            	}


HX_DEFINE_DYNAMIC_FUNC2(AssetLibrary_obj,loadAudioBuffer_onComplete,(void))

void AssetLibrary_obj::loadAudioBuffer_onError(::String id, ::Dynamic message){
            	HX_STACKFRAME(&_hx_pos_302b88cc6233d9fb_895_loadAudioBuffer_onError)
HXDLIN( 895)		this->load_onError(id,message);
            	}


HX_DEFINE_DYNAMIC_FUNC2(AssetLibrary_obj,loadAudioBuffer_onError,(void))

void AssetLibrary_obj::loadBytes_onComplete(::String id, ::haxe::io::Bytes bytes){
            	HX_STACKFRAME(&_hx_pos_302b88cc6233d9fb_902_loadBytes_onComplete)
HXLINE( 904)		this->cachedBytes->set(id,bytes);
HXLINE( 905)		this->_hx___assetLoaded(id);
            	}


HX_DEFINE_DYNAMIC_FUNC2(AssetLibrary_obj,loadBytes_onComplete,(void))

void AssetLibrary_obj::loadFont_onComplete(::String id, ::lime::text::Font font){
            	HX_STACKFRAME(&_hx_pos_302b88cc6233d9fb_910_loadFont_onComplete)
HXLINE( 912)		this->cachedFonts->set(id,font);
HXLINE( 913)		this->_hx___assetLoaded(id);
            	}


HX_DEFINE_DYNAMIC_FUNC2(AssetLibrary_obj,loadFont_onComplete,(void))

void AssetLibrary_obj::loadImage_onComplete(::String id, ::lime::graphics::Image image){
            	HX_STACKFRAME(&_hx_pos_302b88cc6233d9fb_918_loadImage_onComplete)
HXLINE( 920)		this->cachedImages->set(id,image);
HXLINE( 921)		this->_hx___assetLoaded(id);
            	}


HX_DEFINE_DYNAMIC_FUNC2(AssetLibrary_obj,loadImage_onComplete,(void))

void AssetLibrary_obj::loadText_onComplete(::String id,::String text){
            	HX_STACKFRAME(&_hx_pos_302b88cc6233d9fb_926_loadText_onComplete)
HXLINE( 928)		this->cachedText->set(id,text);
HXLINE( 929)		this->_hx___assetLoaded(id);
            	}


HX_DEFINE_DYNAMIC_FUNC2(AssetLibrary_obj,loadText_onComplete,(void))

void AssetLibrary_obj::load_onError(::String id, ::Dynamic message){
            	HX_STACKFRAME(&_hx_pos_302b88cc6233d9fb_936_load_onError)
HXDLIN( 936)		bool _hx_tmp;
HXDLIN( 936)		if (hx::IsNotNull( message )) {
HXDLIN( 936)			_hx_tmp = hx::IsNotEq( message,HX_("",00,00,00,00) );
            		}
            		else {
HXDLIN( 936)			_hx_tmp = false;
            		}
HXDLIN( 936)		if (_hx_tmp) {
HXLINE( 938)			 ::lime::app::Promise_lime_utils_AssetLibrary _hx_tmp1 = this->promise;
HXDLIN( 938)			_hx_tmp1->error((((HX_("Error loading asset \"",d6,ff,4d,83) + id) + HX_("\": ",48,ff,19,00)) + ::Std_obj::string(message)));
            		}
            		else {
HXLINE( 942)			 ::lime::app::Promise_lime_utils_AssetLibrary _hx_tmp2 = this->promise;
HXDLIN( 942)			_hx_tmp2->error(((HX_("Error loading asset \"",d6,ff,4d,83) + id) + HX_("\"",22,00,00,00)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(AssetLibrary_obj,load_onError,(void))

void AssetLibrary_obj::load_onProgress(::String id,int bytesLoaded,int bytesTotal){
            	HX_STACKFRAME(&_hx_pos_302b88cc6233d9fb_952_load_onProgress)
HXDLIN( 952)		if ((bytesLoaded > (int)0)) {
HXLINE( 954)			 ::Dynamic size = this->sizes->get(id);
HXLINE( 955)			Float percent;
HXLINE( 957)			if ((bytesTotal > (int)0)) {
HXLINE( 961)				percent = ((Float)bytesLoaded / (Float)bytesTotal);
HXLINE( 962)				if ((percent > (int)1)) {
HXLINE( 962)					percent = (int)1;
            				}
HXLINE( 963)				bytesLoaded = ::Math_obj::floor((percent * size));
            			}
            			else {
HXLINE( 965)				if (hx::IsGreater( bytesLoaded,size )) {
HXLINE( 967)					bytesLoaded = size;
            				}
            			}
HXLINE( 971)			if (this->bytesLoadedCache->exists(id)) {
HXLINE( 973)				 ::Dynamic cache = this->bytesLoadedCache->get(id);
HXLINE( 975)				if (hx::IsNotEq( bytesLoaded,cache )) {
HXLINE( 977)					 ::lime::utils::AssetLibrary _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 977)					_hx_tmp->bytesLoaded = (_hx_tmp->bytesLoaded + (bytesLoaded - cache));
            				}
            			}
            			else {
HXLINE( 983)				 ::lime::utils::AssetLibrary _hx_tmp1 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 983)				_hx_tmp1->bytesLoaded = (_hx_tmp1->bytesLoaded + bytesLoaded);
            			}
HXLINE( 987)			this->bytesLoadedCache->set(id,bytesLoaded);
HXLINE( 988)			this->promise->progress(this->bytesLoaded,this->bytesTotal);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(AssetLibrary_obj,load_onProgress,(void))

 ::lime::utils::AssetLibrary AssetLibrary_obj::fromBytes( ::haxe::io::Bytes bytes,::String rootPath){
            	HX_STACKFRAME(&_hx_pos_302b88cc6233d9fb_108_fromBytes)
HXDLIN( 108)		return ::lime::utils::AssetLibrary_obj::fromManifest(::lime::utils::AssetManifest_obj::fromBytes(bytes,rootPath));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(AssetLibrary_obj,fromBytes,return )

 ::lime::utils::AssetLibrary AssetLibrary_obj::fromFile(::String path,::String rootPath){
            	HX_STACKFRAME(&_hx_pos_302b88cc6233d9fb_115_fromFile)
HXDLIN( 115)		return ::lime::utils::AssetLibrary_obj::fromManifest(::lime::utils::AssetManifest_obj::fromFile(path,rootPath));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(AssetLibrary_obj,fromFile,return )

 ::lime::utils::AssetLibrary AssetLibrary_obj::fromManifest( ::lime::utils::AssetManifest manifest){
            	HX_GC_STACKFRAME(&_hx_pos_302b88cc6233d9fb_120_fromManifest)
HXLINE( 122)		if (hx::IsNull( manifest )) {
HXLINE( 122)			return null();
            		}
HXLINE( 124)		 ::lime::utils::AssetLibrary library = null();
HXLINE( 126)		if (hx::IsNull( manifest->libraryType )) {
HXLINE( 128)			library =  ::lime::utils::AssetLibrary_obj::__alloc( HX_CTX );
            		}
            		else {
HXLINE( 132)			hx::Class libraryClass = ::Type_obj::resolveClass(manifest->libraryType);
HXLINE( 134)			if (hx::IsNotNull( libraryClass )) {
HXLINE( 136)				library = ( ( ::lime::utils::AssetLibrary)(::Type_obj::createInstance(libraryClass,manifest->libraryArgs)) );
            			}
            			else {
HXLINE( 140)				::lime::utils::Log_obj::warn((HX_("Could not find library type: ",a0,88,a8,78) + manifest->libraryType),hx::SourceInfo(HX_("AssetLibrary.hx",93,ac,ef,b3),140,HX_("lime.utils.AssetLibrary",21,55,e9,fc),HX_("fromManifest",39,d7,40,70)));
HXLINE( 141)				return null();
            			}
            		}
HXLINE( 147)		library->_hx___fromManifest(manifest);
HXLINE( 149)		return library;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(AssetLibrary_obj,fromManifest,return )

 ::lime::app::Future AssetLibrary_obj::loadFromBytes( ::haxe::io::Bytes bytes,::String rootPath){
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            		 ::lime::app::Future _hx_run( ::lime::utils::AssetManifest manifest){
            			HX_STACKFRAME(&_hx_pos_302b88cc6233d9fb_599_loadFromBytes)
HXLINE( 599)			return ::lime::utils::AssetLibrary_obj::loadFromManifest(manifest);
            		}
            		HX_END_LOCAL_FUNC1(return)

            	HX_STACKFRAME(&_hx_pos_302b88cc6233d9fb_597_loadFromBytes)
HXDLIN( 597)		return ::lime::utils::AssetManifest_obj::loadFromBytes(bytes,rootPath)->then( ::Dynamic(new _hx_Closure_0()));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(AssetLibrary_obj,loadFromBytes,return )

 ::lime::app::Future AssetLibrary_obj::loadFromFile(::String path,::String rootPath){
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            		 ::lime::app::Future _hx_run( ::lime::utils::AssetManifest manifest){
            			HX_STACKFRAME(&_hx_pos_302b88cc6233d9fb_610_loadFromFile)
HXLINE( 610)			return ::lime::utils::AssetLibrary_obj::loadFromManifest(manifest);
            		}
            		HX_END_LOCAL_FUNC1(return)

            	HX_STACKFRAME(&_hx_pos_302b88cc6233d9fb_608_loadFromFile)
HXDLIN( 608)		return ::lime::utils::AssetManifest_obj::loadFromFile(path,rootPath)->then( ::Dynamic(new _hx_Closure_0()));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(AssetLibrary_obj,loadFromFile,return )

 ::lime::app::Future AssetLibrary_obj::loadFromManifest( ::lime::utils::AssetManifest manifest){
            	HX_STACKFRAME(&_hx_pos_302b88cc6233d9fb_617_loadFromManifest)
HXLINE( 619)		 ::lime::utils::AssetLibrary library = ::lime::utils::AssetLibrary_obj::fromManifest(manifest);
HXLINE( 621)		if (hx::IsNotNull( library )) {
HXLINE( 623)			return library->load();
            		}
            		else {
HXLINE( 627)			return ::lime::app::Future_obj::withError(HX_("Could not load asset manifest",cd,c6,09,7f));
            		}
HXLINE( 621)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(AssetLibrary_obj,loadFromManifest,return )


hx::ObjectPtr< AssetLibrary_obj > AssetLibrary_obj::__new() {
	hx::ObjectPtr< AssetLibrary_obj > __this = new AssetLibrary_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< AssetLibrary_obj > AssetLibrary_obj::__alloc(hx::Ctx *_hx_ctx) {
	AssetLibrary_obj *__this = (AssetLibrary_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(AssetLibrary_obj), true, "lime.utils.AssetLibrary"));
	*(void **)__this = AssetLibrary_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

AssetLibrary_obj::AssetLibrary_obj()
{
}

void AssetLibrary_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(AssetLibrary);
	HX_MARK_MEMBER_NAME(onChange,"onChange");
	HX_MARK_MEMBER_NAME(assetsLoaded,"assetsLoaded");
	HX_MARK_MEMBER_NAME(assetsTotal,"assetsTotal");
	HX_MARK_MEMBER_NAME(bytesLoaded,"bytesLoaded");
	HX_MARK_MEMBER_NAME(bytesLoadedCache,"bytesLoadedCache");
	HX_MARK_MEMBER_NAME(bytesTotal,"bytesTotal");
	HX_MARK_MEMBER_NAME(cachedAudioBuffers,"cachedAudioBuffers");
	HX_MARK_MEMBER_NAME(cachedBytes,"cachedBytes");
	HX_MARK_MEMBER_NAME(cachedFonts,"cachedFonts");
	HX_MARK_MEMBER_NAME(cachedImages,"cachedImages");
	HX_MARK_MEMBER_NAME(cachedText,"cachedText");
	HX_MARK_MEMBER_NAME(classTypes,"classTypes");
	HX_MARK_MEMBER_NAME(loaded,"loaded");
	HX_MARK_MEMBER_NAME(pathGroups,"pathGroups");
	HX_MARK_MEMBER_NAME(paths,"paths");
	HX_MARK_MEMBER_NAME(preload,"preload");
	HX_MARK_MEMBER_NAME(promise,"promise");
	HX_MARK_MEMBER_NAME(sizes,"sizes");
	HX_MARK_MEMBER_NAME(types,"types");
	HX_MARK_END_CLASS();
}

void AssetLibrary_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(onChange,"onChange");
	HX_VISIT_MEMBER_NAME(assetsLoaded,"assetsLoaded");
	HX_VISIT_MEMBER_NAME(assetsTotal,"assetsTotal");
	HX_VISIT_MEMBER_NAME(bytesLoaded,"bytesLoaded");
	HX_VISIT_MEMBER_NAME(bytesLoadedCache,"bytesLoadedCache");
	HX_VISIT_MEMBER_NAME(bytesTotal,"bytesTotal");
	HX_VISIT_MEMBER_NAME(cachedAudioBuffers,"cachedAudioBuffers");
	HX_VISIT_MEMBER_NAME(cachedBytes,"cachedBytes");
	HX_VISIT_MEMBER_NAME(cachedFonts,"cachedFonts");
	HX_VISIT_MEMBER_NAME(cachedImages,"cachedImages");
	HX_VISIT_MEMBER_NAME(cachedText,"cachedText");
	HX_VISIT_MEMBER_NAME(classTypes,"classTypes");
	HX_VISIT_MEMBER_NAME(loaded,"loaded");
	HX_VISIT_MEMBER_NAME(pathGroups,"pathGroups");
	HX_VISIT_MEMBER_NAME(paths,"paths");
	HX_VISIT_MEMBER_NAME(preload,"preload");
	HX_VISIT_MEMBER_NAME(promise,"promise");
	HX_VISIT_MEMBER_NAME(sizes,"sizes");
	HX_VISIT_MEMBER_NAME(types,"types");
}

hx::Val AssetLibrary_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"list") ) { return hx::Val( list_dyn() ); }
		if (HX_FIELD_EQ(inName,"load") ) { return hx::Val( load_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"paths") ) { return hx::Val( paths ); }
		if (HX_FIELD_EQ(inName,"sizes") ) { return hx::Val( sizes ); }
		if (HX_FIELD_EQ(inName,"types") ) { return hx::Val( types ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"loaded") ) { return hx::Val( loaded ); }
		if (HX_FIELD_EQ(inName,"exists") ) { return hx::Val( exists_dyn() ); }
		if (HX_FIELD_EQ(inName,"unload") ) { return hx::Val( unload_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"preload") ) { return hx::Val( preload ); }
		if (HX_FIELD_EQ(inName,"promise") ) { return hx::Val( promise ); }
		if (HX_FIELD_EQ(inName,"getFont") ) { return hx::Val( getFont_dyn() ); }
		if (HX_FIELD_EQ(inName,"getPath") ) { return hx::Val( getPath_dyn() ); }
		if (HX_FIELD_EQ(inName,"getText") ) { return hx::Val( getText_dyn() ); }
		if (HX_FIELD_EQ(inName,"isLocal") ) { return hx::Val( isLocal_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"onChange") ) { return hx::Val( onChange ); }
		if (HX_FIELD_EQ(inName,"getAsset") ) { return hx::Val( getAsset_dyn() ); }
		if (HX_FIELD_EQ(inName,"getBytes") ) { return hx::Val( getBytes_dyn() ); }
		if (HX_FIELD_EQ(inName,"getImage") ) { return hx::Val( getImage_dyn() ); }
		if (HX_FIELD_EQ(inName,"loadFont") ) { return hx::Val( loadFont_dyn() ); }
		if (HX_FIELD_EQ(inName,"loadText") ) { return hx::Val( loadText_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"loadAsset") ) { return hx::Val( loadAsset_dyn() ); }
		if (HX_FIELD_EQ(inName,"loadBytes") ) { return hx::Val( loadBytes_dyn() ); }
		if (HX_FIELD_EQ(inName,"loadImage") ) { return hx::Val( loadImage_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"bytesTotal") ) { return hx::Val( bytesTotal ); }
		if (HX_FIELD_EQ(inName,"cachedText") ) { return hx::Val( cachedText ); }
		if (HX_FIELD_EQ(inName,"classTypes") ) { return hx::Val( classTypes ); }
		if (HX_FIELD_EQ(inName,"pathGroups") ) { return hx::Val( pathGroups ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"assetsTotal") ) { return hx::Val( assetsTotal ); }
		if (HX_FIELD_EQ(inName,"bytesLoaded") ) { return hx::Val( bytesLoaded ); }
		if (HX_FIELD_EQ(inName,"cachedBytes") ) { return hx::Val( cachedBytes ); }
		if (HX_FIELD_EQ(inName,"cachedFonts") ) { return hx::Val( cachedFonts ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"assetsLoaded") ) { return hx::Val( assetsLoaded ); }
		if (HX_FIELD_EQ(inName,"cachedImages") ) { return hx::Val( cachedImages ); }
		if (HX_FIELD_EQ(inName,"__cacheBreak") ) { return hx::Val( _hx___cacheBreak_dyn() ); }
		if (HX_FIELD_EQ(inName,"load_onError") ) { return hx::Val( load_onError_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"__assetLoaded") ) { return hx::Val( _hx___assetLoaded_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"getAudioBuffer") ) { return hx::Val( getAudioBuffer_dyn() ); }
		if (HX_FIELD_EQ(inName,"__fromManifest") ) { return hx::Val( _hx___fromManifest_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"loadAudioBuffer") ) { return hx::Val( loadAudioBuffer_dyn() ); }
		if (HX_FIELD_EQ(inName,"load_onProgress") ) { return hx::Val( load_onProgress_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"bytesLoadedCache") ) { return hx::Val( bytesLoadedCache ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"cachedAudioBuffers") ) { return hx::Val( cachedAudioBuffers ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"loadFont_onComplete") ) { return hx::Val( loadFont_onComplete_dyn() ); }
		if (HX_FIELD_EQ(inName,"loadText_onComplete") ) { return hx::Val( loadText_onComplete_dyn() ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"loadBytes_onComplete") ) { return hx::Val( loadBytes_onComplete_dyn() ); }
		if (HX_FIELD_EQ(inName,"loadImage_onComplete") ) { return hx::Val( loadImage_onComplete_dyn() ); }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"loadAudioBuffer_onError") ) { return hx::Val( loadAudioBuffer_onError_dyn() ); }
		break;
	case 26:
		if (HX_FIELD_EQ(inName,"loadAudioBuffer_onComplete") ) { return hx::Val( loadAudioBuffer_onComplete_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool AssetLibrary_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"fromFile") ) { outValue = fromFile_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"fromBytes") ) { outValue = fromBytes_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"fromManifest") ) { outValue = fromManifest_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"loadFromFile") ) { outValue = loadFromFile_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"loadFromBytes") ) { outValue = loadFromBytes_dyn(); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"loadFromManifest") ) { outValue = loadFromManifest_dyn(); return true; }
	}
	return false;
}

hx::Val AssetLibrary_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"paths") ) { paths=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"sizes") ) { sizes=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"types") ) { types=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"loaded") ) { loaded=inValue.Cast< bool >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"preload") ) { preload=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"promise") ) { promise=inValue.Cast<  ::lime::app::Promise_lime_utils_AssetLibrary >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"onChange") ) { onChange=inValue.Cast<  ::lime::app::_Event_Void_Void >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"bytesTotal") ) { bytesTotal=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"cachedText") ) { cachedText=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"classTypes") ) { classTypes=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"pathGroups") ) { pathGroups=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"assetsTotal") ) { assetsTotal=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"bytesLoaded") ) { bytesLoaded=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"cachedBytes") ) { cachedBytes=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"cachedFonts") ) { cachedFonts=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"assetsLoaded") ) { assetsLoaded=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"cachedImages") ) { cachedImages=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"bytesLoadedCache") ) { bytesLoadedCache=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"cachedAudioBuffers") ) { cachedAudioBuffers=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void AssetLibrary_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("onChange","\xef","\x87","\x1f","\x97"));
	outFields->push(HX_HCSTRING("assetsLoaded","\xe8","\xc8","\x28","\x8e"));
	outFields->push(HX_HCSTRING("assetsTotal","\x41","\xc0","\x37","\x03"));
	outFields->push(HX_HCSTRING("bytesLoaded","\xd0","\x66","\xca","\x99"));
	outFields->push(HX_HCSTRING("bytesLoadedCache","\x52","\xf1","\x40","\x0f"));
	outFields->push(HX_HCSTRING("bytesTotal","\x59","\x57","\xda","\x45"));
	outFields->push(HX_HCSTRING("cachedAudioBuffers","\x3f","\xb0","\x91","\xdb"));
	outFields->push(HX_HCSTRING("cachedBytes","\x29","\x45","\x82","\x36"));
	outFields->push(HX_HCSTRING("cachedFonts","\x82","\xf4","\x7b","\x7d"));
	outFields->push(HX_HCSTRING("cachedImages","\x3a","\x3a","\x9d","\x52"));
	outFields->push(HX_HCSTRING("cachedText","\xaf","\xf1","\x6f","\x7b"));
	outFields->push(HX_HCSTRING("classTypes","\x21","\x9d","\xe9","\x5d"));
	outFields->push(HX_HCSTRING("loaded","\x05","\x48","\x6f","\x58"));
	outFields->push(HX_HCSTRING("pathGroups","\xd9","\xc7","\x5d","\x2e"));
	outFields->push(HX_HCSTRING("paths","\x2e","\x0b","\x57","\xbd"));
	outFields->push(HX_HCSTRING("preload","\xc9","\x47","\x43","\x35"));
	outFields->push(HX_HCSTRING("promise","\x9b","\xcd","\xe9","\xf7"));
	outFields->push(HX_HCSTRING("sizes","\x92","\x08","\xd9","\x7c"));
	outFields->push(HX_HCSTRING("types","\x79","\x70","\xcb","\x1a"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo AssetLibrary_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::lime::app::_Event_Void_Void*/ ,(int)offsetof(AssetLibrary_obj,onChange),HX_HCSTRING("onChange","\xef","\x87","\x1f","\x97")},
	{hx::fsInt,(int)offsetof(AssetLibrary_obj,assetsLoaded),HX_HCSTRING("assetsLoaded","\xe8","\xc8","\x28","\x8e")},
	{hx::fsInt,(int)offsetof(AssetLibrary_obj,assetsTotal),HX_HCSTRING("assetsTotal","\x41","\xc0","\x37","\x03")},
	{hx::fsInt,(int)offsetof(AssetLibrary_obj,bytesLoaded),HX_HCSTRING("bytesLoaded","\xd0","\x66","\xca","\x99")},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(int)offsetof(AssetLibrary_obj,bytesLoadedCache),HX_HCSTRING("bytesLoadedCache","\x52","\xf1","\x40","\x0f")},
	{hx::fsInt,(int)offsetof(AssetLibrary_obj,bytesTotal),HX_HCSTRING("bytesTotal","\x59","\x57","\xda","\x45")},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(int)offsetof(AssetLibrary_obj,cachedAudioBuffers),HX_HCSTRING("cachedAudioBuffers","\x3f","\xb0","\x91","\xdb")},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(int)offsetof(AssetLibrary_obj,cachedBytes),HX_HCSTRING("cachedBytes","\x29","\x45","\x82","\x36")},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(int)offsetof(AssetLibrary_obj,cachedFonts),HX_HCSTRING("cachedFonts","\x82","\xf4","\x7b","\x7d")},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(int)offsetof(AssetLibrary_obj,cachedImages),HX_HCSTRING("cachedImages","\x3a","\x3a","\x9d","\x52")},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(int)offsetof(AssetLibrary_obj,cachedText),HX_HCSTRING("cachedText","\xaf","\xf1","\x6f","\x7b")},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(int)offsetof(AssetLibrary_obj,classTypes),HX_HCSTRING("classTypes","\x21","\x9d","\xe9","\x5d")},
	{hx::fsBool,(int)offsetof(AssetLibrary_obj,loaded),HX_HCSTRING("loaded","\x05","\x48","\x6f","\x58")},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(int)offsetof(AssetLibrary_obj,pathGroups),HX_HCSTRING("pathGroups","\xd9","\xc7","\x5d","\x2e")},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(int)offsetof(AssetLibrary_obj,paths),HX_HCSTRING("paths","\x2e","\x0b","\x57","\xbd")},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(int)offsetof(AssetLibrary_obj,preload),HX_HCSTRING("preload","\xc9","\x47","\x43","\x35")},
	{hx::fsObject /*::lime::app::Promise_lime_utils_AssetLibrary*/ ,(int)offsetof(AssetLibrary_obj,promise),HX_HCSTRING("promise","\x9b","\xcd","\xe9","\xf7")},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(int)offsetof(AssetLibrary_obj,sizes),HX_HCSTRING("sizes","\x92","\x08","\xd9","\x7c")},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(int)offsetof(AssetLibrary_obj,types),HX_HCSTRING("types","\x79","\x70","\xcb","\x1a")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *AssetLibrary_obj_sStaticStorageInfo = 0;
#endif

static ::String AssetLibrary_obj_sMemberFields[] = {
	HX_HCSTRING("onChange","\xef","\x87","\x1f","\x97"),
	HX_HCSTRING("assetsLoaded","\xe8","\xc8","\x28","\x8e"),
	HX_HCSTRING("assetsTotal","\x41","\xc0","\x37","\x03"),
	HX_HCSTRING("bytesLoaded","\xd0","\x66","\xca","\x99"),
	HX_HCSTRING("bytesLoadedCache","\x52","\xf1","\x40","\x0f"),
	HX_HCSTRING("bytesTotal","\x59","\x57","\xda","\x45"),
	HX_HCSTRING("cachedAudioBuffers","\x3f","\xb0","\x91","\xdb"),
	HX_HCSTRING("cachedBytes","\x29","\x45","\x82","\x36"),
	HX_HCSTRING("cachedFonts","\x82","\xf4","\x7b","\x7d"),
	HX_HCSTRING("cachedImages","\x3a","\x3a","\x9d","\x52"),
	HX_HCSTRING("cachedText","\xaf","\xf1","\x6f","\x7b"),
	HX_HCSTRING("classTypes","\x21","\x9d","\xe9","\x5d"),
	HX_HCSTRING("loaded","\x05","\x48","\x6f","\x58"),
	HX_HCSTRING("pathGroups","\xd9","\xc7","\x5d","\x2e"),
	HX_HCSTRING("paths","\x2e","\x0b","\x57","\xbd"),
	HX_HCSTRING("preload","\xc9","\x47","\x43","\x35"),
	HX_HCSTRING("promise","\x9b","\xcd","\xe9","\xf7"),
	HX_HCSTRING("sizes","\x92","\x08","\xd9","\x7c"),
	HX_HCSTRING("types","\x79","\x70","\xcb","\x1a"),
	HX_HCSTRING("exists","\xdc","\x1d","\xe0","\xbf"),
	HX_HCSTRING("getAsset","\x7a","\x79","\x10","\x86"),
	HX_HCSTRING("getAudioBuffer","\x80","\x41","\xe3","\x26"),
	HX_HCSTRING("getBytes","\xf5","\x17","\x6f","\x1d"),
	HX_HCSTRING("getFont","\x85","\x0d","\x43","\x16"),
	HX_HCSTRING("getImage","\xe5","\x2e","\x40","\x1d"),
	HX_HCSTRING("getPath","\x5b","\x95","\xd4","\x1c"),
	HX_HCSTRING("getText","\x63","\x7c","\x7c","\x1f"),
	HX_HCSTRING("isLocal","\x21","\x6d","\x76","\x15"),
	HX_HCSTRING("list","\x5e","\x1c","\xb3","\x47"),
	HX_HCSTRING("loadAsset","\xea","\xb5","\x70","\x41"),
	HX_HCSTRING("load","\x26","\x9a","\xb7","\x47"),
	HX_HCSTRING("loadAudioBuffer","\xf0","\x71","\x7c","\xe3"),
	HX_HCSTRING("loadBytes","\x65","\x54","\xcf","\xd8"),
	HX_HCSTRING("loadFont","\x15","\x2f","\x60","\xb4"),
	HX_HCSTRING("loadImage","\x55","\x6b","\xa0","\xd8"),
	HX_HCSTRING("loadText","\xf3","\x9d","\x99","\xbd"),
	HX_HCSTRING("unload","\xff","\xa0","\x8c","\x65"),
	HX_HCSTRING("__assetLoaded","\xf5","\x7a","\x49","\x36"),
	HX_HCSTRING("__cacheBreak","\x3d","\x06","\x38","\x34"),
	HX_HCSTRING("__fromManifest","\x59","\x5a","\x01","\x91"),
	HX_HCSTRING("loadAudioBuffer_onComplete","\x27","\x96","\xe6","\x68"),
	HX_HCSTRING("loadAudioBuffer_onError","\x9a","\xa5","\x47","\x54"),
	HX_HCSTRING("loadBytes_onComplete","\xd2","\x0d","\x18","\xbc"),
	HX_HCSTRING("loadFont_onComplete","\x22","\xd1","\x7c","\xa1"),
	HX_HCSTRING("loadImage_onComplete","\xe2","\x7c","\xc9","\xb2"),
	HX_HCSTRING("loadText_onComplete","\x04","\x33","\xff","\xe5"),
	HX_HCSTRING("load_onError","\xd0","\xf3","\xd6","\x22"),
	HX_HCSTRING("load_onProgress","\xa5","\x84","\x70","\x96"),
	::String(null()) };

static void AssetLibrary_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(AssetLibrary_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void AssetLibrary_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(AssetLibrary_obj::__mClass,"__mClass");
};

#endif

hx::Class AssetLibrary_obj::__mClass;

static ::String AssetLibrary_obj_sStaticFields[] = {
	HX_HCSTRING("fromBytes","\xa1","\xf2","\x20","\x72"),
	HX_HCSTRING("fromFile","\x06","\x9d","\x87","\xa1"),
	HX_HCSTRING("fromManifest","\x39","\xd7","\x40","\x70"),
	HX_HCSTRING("loadFromBytes","\x9b","\xc3","\x86","\xf4"),
	HX_HCSTRING("loadFromFile","\x4c","\x89","\xf0","\x5a"),
	HX_HCSTRING("loadFromManifest","\x7f","\x5e","\x9c","\xdc"),
	::String(null())
};

void AssetLibrary_obj::__register()
{
	hx::Object *dummy = new AssetLibrary_obj;
	AssetLibrary_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("lime.utils.AssetLibrary","\x21","\x55","\xe9","\xfc");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &AssetLibrary_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = AssetLibrary_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(AssetLibrary_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(AssetLibrary_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< AssetLibrary_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = AssetLibrary_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = AssetLibrary_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = AssetLibrary_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace lime
} // end namespace utils
