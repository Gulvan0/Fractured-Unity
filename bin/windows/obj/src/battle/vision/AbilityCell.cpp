// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Assets
#include <Assets.h>
#endif
#ifndef INCLUDED_ID
#include <ID.h>
#endif
#ifndef INCLUDED_MathUtils
#include <MathUtils.h>
#endif
#ifndef INCLUDED_SSprite
#include <SSprite.h>
#endif
#ifndef INCLUDED_battle_struct_Countdown
#include <battle/struct/Countdown.h>
#endif
#ifndef INCLUDED_battle_vision_AbilityCell
#include <battle/vision/AbilityCell.h>
#endif
#ifndef INCLUDED_graphic_Fonts
#include <graphic/Fonts.h>
#endif
#ifndef INCLUDED_hxassert_Assert
#include <hxassert/Assert.h>
#endif
#ifndef INCLUDED_lime_text__UTF8String_UTF8String_Impl_
#include <lime/text/_UTF8String/UTF8String_Impl_.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_Graphics
#include <openfl/display/Graphics.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_MovieClip
#include <openfl/display/MovieClip.h>
#endif
#ifndef INCLUDED_openfl_display_Shape
#include <openfl/display/Shape.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_filters_BitmapFilter
#include <openfl/filters/BitmapFilter.h>
#endif
#ifndef INCLUDED_openfl_filters_DropShadowFilter
#include <openfl/filters/DropShadowFilter.h>
#endif
#ifndef INCLUDED_openfl_filters_GlowFilter
#include <openfl/filters/GlowFilter.h>
#endif
#ifndef INCLUDED_openfl_geom_Point
#include <openfl/geom/Point.h>
#endif
#ifndef INCLUDED_openfl_text_TextField
#include <openfl/text/TextField.h>
#endif
#ifndef INCLUDED_openfl_text_TextFormat
#include <openfl/text/TextFormat.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_d9cfa635af54f7ed_69_new,"battle.vision.AbilityCell","new",0xab02d72e,"battle.vision.AbilityCell.new","battle/vision/AbilityCell.hx",69,0x605e9222)
HX_LOCAL_STACK_FRAME(_hx_pos_d9cfa635af54f7ed_33_decrementCooldown,"battle.vision.AbilityCell","decrementCooldown",0x96cedc2c,"battle.vision.AbilityCell.decrementCooldown","battle/vision/AbilityCell.hx",33,0x605e9222)
HX_LOCAL_STACK_FRAME(_hx_pos_d9cfa635af54f7ed_50_changeCooldown,"battle.vision.AbilityCell","changeCooldown",0x3d2a792d,"battle.vision.AbilityCell.changeCooldown","battle/vision/AbilityCell.hx",50,0x605e9222)
static const ::String _hx_array_data_3fe8683c_7[] = {
	HX_("Assertion failed: value <= cd.keyValue",d0,43,93,de),
};
HX_LOCAL_STACK_FRAME(_hx_pos_d9cfa635af54f7ed_65_updateCooldown,"battle.vision.AbilityCell","updateCooldown",0x19192ec6,"battle.vision.AbilityCell.updateCooldown","battle/vision/AbilityCell.hx",65,0x605e9222)
HX_LOCAL_STACK_FRAME(_hx_pos_d9cfa635af54f7ed_89_setCDText,"battle.vision.AbilityCell","setCDText",0xa30bae5e,"battle.vision.AbilityCell.setCDText","battle/vision/AbilityCell.hx",89,0x605e9222)
HX_LOCAL_STACK_FRAME(_hx_pos_d9cfa635af54f7ed_103_setManaText,"battle.vision.AbilityCell","setManaText",0x31d7d364,"battle.vision.AbilityCell.setManaText","battle/vision/AbilityCell.hx",103,0x605e9222)
HX_LOCAL_STACK_FRAME(_hx_pos_d9cfa635af54f7ed_117_setButtonText,"battle.vision.AbilityCell","setButtonText",0xbd554e4f,"battle.vision.AbilityCell.setButtonText","battle/vision/AbilityCell.hx",117,0x605e9222)
HX_LOCAL_STACK_FRAME(_hx_pos_d9cfa635af54f7ed_131_drawSegments,"battle.vision.AbilityCell","drawSegments",0xa64728f6,"battle.vision.AbilityCell.drawSegments","battle/vision/AbilityCell.hx",131,0x605e9222)
HX_LOCAL_STACK_FRAME(_hx_pos_d9cfa635af54f7ed_173_iconVertices,"battle.vision.AbilityCell","iconVertices",0x9780b404,"battle.vision.AbilityCell.iconVertices","battle/vision/AbilityCell.hx",173,0x605e9222)
HX_LOCAL_STACK_FRAME(_hx_pos_d9cfa635af54f7ed_190_drawSeg,"battle.vision.AbilityCell","drawSeg",0x2e0d07bf,"battle.vision.AbilityCell.drawSeg","battle/vision/AbilityCell.hx",190,0x605e9222)
namespace battle{
namespace vision{

void AbilityCell_obj::__construct( ::ID id,int cooldown,int delay,int manacost,::String button){
            	HX_GC_STACKFRAME(&_hx_pos_d9cfa635af54f7ed_69_new)
HXLINE(  70)		super::__construct();
HXLINE(  71)		this->cd =  ::battle::_hx_struct::Countdown_obj::__alloc( HX_CTX ,delay,cooldown);
HXLINE(  72)		this->icon = ::Assets_obj::getBattleAbility(id);
HXLINE(  73)		this->setManaText(manacost);
HXLINE(  74)		this->setButtonText(button);
HXLINE(  75)		this->cdSegments = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  76)		this->drawSegments(cooldown);
HXLINE(  77)		this->setCDText();
HXLINE(  78)		this->changeCooldown(delay);
HXLINE(  80)		this->add(this->icon,(int)0,(int)0);
HXLINE(  81)		this->add(this->buttonText,(int)2,(int)1);
HXLINE(  82)		this->add(this->manacostText,(int)38,(int)38);
HXLINE(  83)		{
HXLINE(  83)			int _g = (int)0;
HXDLIN(  83)			::Array< ::Dynamic> _g1 = this->cdSegments;
HXDLIN(  83)			while((_g < _g1->length)){
HXLINE(  83)				 ::openfl::display::Shape seg = _g1->__get(_g).StaticCast<  ::openfl::display::Shape >();
HXDLIN(  83)				_g = (_g + (int)1);
HXLINE(  84)				this->add(seg,(int)28,(int)28);
            			}
            		}
HXLINE(  85)		this->add(this->cdText,(int)0,(int)4);
            	}

Dynamic AbilityCell_obj::__CreateEmpty() { return new AbilityCell_obj; }

void *AbilityCell_obj::_hx_vtable = 0;

Dynamic AbilityCell_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< AbilityCell_obj > _hx_result = new AbilityCell_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4]);
	return _hx_result;
}

bool AbilityCell_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x1b123bf8) {
		if (inClassId<=(int)0x17120186) {
			if (inClassId<=(int)0x0ddfced7) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0ddfced7;
			} else {
				return inClassId==(int)0x17120186;
			}
		} else {
			return inClassId==(int)0x19c29573 || inClassId==(int)0x1b123bf8;
		}
	} else {
		if (inClassId<=(int)0x3f2b00af) {
			return inClassId==(int)0x2340f3c8 || inClassId==(int)0x3f2b00af;
		} else {
			return inClassId==(int)0x739fd0b8;
		}
	}
}

void AbilityCell_obj::decrementCooldown(){
            	HX_STACKFRAME(&_hx_pos_d9cfa635af54f7ed_33_decrementCooldown)
HXDLIN(  33)		if ((this->cd->value > (int)0)) {
HXLINE(  35)			{
HXLINE(  35)				int _g = (int)0;
HXDLIN(  35)				::Array< ::Dynamic> _g1 = this->cdSegments;
HXDLIN(  35)				while((_g < _g1->length)){
HXLINE(  35)					 ::openfl::display::Shape seg = _g1->__get(_g).StaticCast<  ::openfl::display::Shape >();
HXDLIN(  35)					_g = (_g + (int)1);
HXLINE(  36)					if ((seg->get_visible() == true)) {
HXLINE(  38)						seg->set_visible(false);
HXLINE(  39)						goto _hx_goto_2;
            					}
            				}
            				_hx_goto_2:;
            			}
HXLINE(  41)			this->cd->value--;
HXLINE(  42)			this->remove(this->cdText);
HXLINE(  43)			this->setCDText();
HXLINE(  44)			 ::openfl::text::TextField _hx_tmp = this->cdText;
HXDLIN(  44)			::String _hx_tmp1;
HXDLIN(  44)			if ((this->cd->value > (int)0)) {
HXLINE(  44)				_hx_tmp1 = ::lime::text::_UTF8String::UTF8String_Impl__obj::fromDynamic(this->cd->value);
            			}
            			else {
HXLINE(  44)				_hx_tmp1 = HX_("",00,00,00,00);
            			}
HXDLIN(  44)			_hx_tmp->set_text(_hx_tmp1);
HXLINE(  45)			this->add(this->cdText,(int)-4,(int)4);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(AbilityCell_obj,decrementCooldown,(void))

void AbilityCell_obj::changeCooldown(int value){
            	HX_STACKFRAME(&_hx_pos_d9cfa635af54f7ed_50_changeCooldown)
HXLINE( 151)		if ((false == (value <= this->cd->keyValue))) {
HXLINE(  51)			::hxassert::Assert_obj::throwAssertionFailureError(::Array_obj< ::String >::fromData( _hx_array_data_3fe8683c_7,1),hx::SourceInfo(HX_("AbilityCell.hx",f2,95,c8,ae),51,HX_("battle.vision.AbilityCell",3c,68,e8,3f),HX_("changeCooldown",3b,89,dd,52)));
            		}
HXLINE(  52)		{
HXLINE(  52)			int _g1 = (int)0;
HXDLIN(  52)			int _g = value;
HXDLIN(  52)			while((_g1 < _g)){
HXLINE(  52)				_g1 = (_g1 + (int)1);
HXDLIN(  52)				int i = (_g1 - (int)1);
HXLINE(  53)				::Array< ::Dynamic> _hx_tmp = this->cdSegments;
HXDLIN(  53)				_hx_tmp->__get(((this->cd->keyValue - i) - (int)1)).StaticCast<  ::openfl::display::Shape >()->set_visible(true);
            			}
            		}
HXLINE(  54)		{
HXLINE(  54)			int _g11 = value;
HXDLIN(  54)			int _g2 = this->cd->keyValue;
HXDLIN(  54)			while((_g11 < _g2)){
HXLINE(  54)				_g11 = (_g11 + (int)1);
HXDLIN(  54)				int i1 = (_g11 - (int)1);
HXLINE(  55)				::Array< ::Dynamic> _hx_tmp1 = this->cdSegments;
HXDLIN(  55)				_hx_tmp1->__get(((this->cd->keyValue - i1) - (int)1)).StaticCast<  ::openfl::display::Shape >()->set_visible(false);
            			}
            		}
HXLINE(  56)		this->cd->value = value;
HXLINE(  57)		this->remove(this->cdText);
HXLINE(  58)		this->setCDText();
HXLINE(  59)		 ::openfl::text::TextField _hx_tmp2 = this->cdText;
HXDLIN(  59)		::String _hx_tmp3;
HXDLIN(  59)		if ((this->cd->value > (int)0)) {
HXLINE(  59)			_hx_tmp3 = ::lime::text::_UTF8String::UTF8String_Impl__obj::fromDynamic(this->cd->value);
            		}
            		else {
HXLINE(  59)			_hx_tmp3 = HX_("",00,00,00,00);
            		}
HXDLIN(  59)		_hx_tmp2->set_text(_hx_tmp3);
HXLINE(  60)		this->add(this->cdText,(int)-4,(int)4);
            	}


HX_DEFINE_DYNAMIC_FUNC1(AbilityCell_obj,changeCooldown,(void))

void AbilityCell_obj::updateCooldown(){
            	HX_STACKFRAME(&_hx_pos_d9cfa635af54f7ed_65_updateCooldown)
HXDLIN(  65)		this->changeCooldown(this->cd->keyValue);
            	}


HX_DEFINE_DYNAMIC_FUNC0(AbilityCell_obj,updateCooldown,(void))

void AbilityCell_obj::setCDText(){
            	HX_GC_STACKFRAME(&_hx_pos_d9cfa635af54f7ed_89_setCDText)
HXLINE(  90)		 ::openfl::text::TextFormat format =  ::openfl::text::TextFormat_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null());
HXLINE(  91)		format->color = (int)10461087;
HXLINE(  92)		format->size = (int)40;
HXLINE(  93)		format->align = (int)0;
HXLINE(  94)		format->font = ::graphic::Fonts_obj::MIRROR;
HXLINE(  95)		this->cdText =  ::openfl::text::TextField_obj::__alloc( HX_CTX );
HXLINE(  96)		this->cdText->set_embedFonts(true);
HXLINE(  97)		this->cdText->setTextFormat(format,null(),null());
HXLINE(  98)		this->cdText->set_width((int)56);
HXLINE(  99)		 ::openfl::text::TextField _hx_tmp = this->cdText;
HXDLIN(  99)		_hx_tmp->set_filters(::Array_obj< ::Dynamic>::__new(1)->init(0, ::openfl::filters::DropShadowFilter_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null())));
            	}


HX_DEFINE_DYNAMIC_FUNC0(AbilityCell_obj,setCDText,(void))

void AbilityCell_obj::setManaText(int manacost){
            	HX_GC_STACKFRAME(&_hx_pos_d9cfa635af54f7ed_103_setManaText)
HXLINE( 104)		 ::openfl::text::TextFormat format =  ::openfl::text::TextFormat_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null());
HXLINE( 105)		format->color = (int)16777215;
HXLINE( 106)		format->bold = true;
HXLINE( 107)		format->size = (int)10;
HXLINE( 108)		format->align = (int)0;
HXLINE( 109)		this->manacostText =  ::openfl::text::TextField_obj::__alloc( HX_CTX );
HXLINE( 110)		this->manacostText->setTextFormat(format,null(),null());
HXLINE( 111)		this->manacostText->set_width((int)15);
HXLINE( 112)		 ::openfl::text::TextField _hx_tmp = this->manacostText;
HXDLIN( 112)		_hx_tmp->set_text(::lime::text::_UTF8String::UTF8String_Impl__obj::fromDynamic(manacost));
HXLINE( 113)		 ::openfl::text::TextField _hx_tmp1 = this->manacostText;
HXDLIN( 113)		_hx_tmp1->set_filters(::Array_obj< ::Dynamic>::__new(1)->init(0, ::openfl::filters::GlowFilter_obj::__alloc( HX_CTX ,(int)5866495,((Float)0.7),null(),null(),null(),null(),null(),null())));
            	}


HX_DEFINE_DYNAMIC_FUNC1(AbilityCell_obj,setManaText,(void))

void AbilityCell_obj::setButtonText(::String button){
            	HX_GC_STACKFRAME(&_hx_pos_d9cfa635af54f7ed_117_setButtonText)
HXLINE( 118)		 ::openfl::text::TextFormat format =  ::openfl::text::TextFormat_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null());
HXLINE( 119)		format->color = (int)0;
HXLINE( 120)		format->bold = true;
HXLINE( 121)		format->size = (int)13;
HXLINE( 122)		format->align = (int)0;
HXLINE( 123)		this->buttonText =  ::openfl::text::TextField_obj::__alloc( HX_CTX );
HXLINE( 124)		this->buttonText->setTextFormat(format,null(),null());
HXLINE( 125)		this->buttonText->set_width((int)13);
HXLINE( 126)		this->buttonText->set_text(button);
HXLINE( 127)		 ::openfl::text::TextField _hx_tmp = this->buttonText;
HXDLIN( 127)		_hx_tmp->set_filters(::Array_obj< ::Dynamic>::__new(1)->init(0, ::openfl::filters::GlowFilter_obj::__alloc( HX_CTX ,(int)7368816,null(),null(),null(),null(),null(),null(),null())));
            	}


HX_DEFINE_DYNAMIC_FUNC1(AbilityCell_obj,setButtonText,(void))

void AbilityCell_obj::drawSegments(int q){
            	HX_GC_STACKFRAME(&_hx_pos_d9cfa635af54f7ed_131_drawSegments)
HXLINE( 132)		Float angle = ((Float)(int)1 / (Float)q);
HXLINE( 133)		 ::openfl::geom::Point prevPoint =  ::openfl::geom::Point_obj::__alloc( HX_CTX ,(int)0,(int)-28);
HXLINE( 134)		Float t = ((int)2 * ::Math_obj::PI);
HXLINE( 136)		{
HXLINE( 136)			int _g1 = (int)1;
HXDLIN( 136)			int _g = (q + (int)1);
HXDLIN( 136)			while((_g1 < _g)){
HXLINE( 136)				_g1 = (_g1 + (int)1);
HXDLIN( 136)				int i = (_g1 - (int)1);
HXLINE( 138)				 ::openfl::geom::Point vertex = this->iconVertices(prevPoint,(int)4)->__get((int)0).StaticCast<  ::openfl::geom::Point >();
HXLINE( 139)				int len = (int)0;
HXLINE( 140)				 ::openfl::geom::Point nextPoint;
HXLINE( 141)				Float a = (vertex->x - prevPoint->x);
HXDLIN( 141)				Float a1 = -(::Math_obj::pow((a + (vertex->y - prevPoint->y)),(int)2));
HXDLIN( 141)				Float a2 = (a1 + ::Math_obj::pow(prevPoint->x,(int)2));
HXDLIN( 141)				Float a3 = ((a2 + ::Math_obj::pow(prevPoint->y,(int)2)) + (int)1568);
HXDLIN( 141)				Float a4 = (prevPoint->x * prevPoint->x);
HXDLIN( 141)				Float a5 = ((Float)a3 / (Float)((int)56 * ::Math_obj::sqrt(((int)2 * (a4 + (prevPoint->y * prevPoint->y))))));
HXLINE( 143)				if ((q == (int)1)) {
HXLINE( 144)					len = (int)4;
            				}
            				else {
HXLINE( 146)					int _g2 = (int)0;
HXDLIN( 146)					while((_g2 < (int)4)){
HXLINE( 146)						_g2 = (_g2 + (int)1);
HXDLIN( 146)						int j = (_g2 - (int)1);
HXLINE( 147)						bool _hx_tmp;
HXDLIN( 147)						if ((::Math_obj::cos(((angle - (((Float)0.25) * j)) * t)) <= a5)) {
HXLINE( 147)							_hx_tmp = ((angle - (((Float)0.25) * j)) > (int)0);
            						}
            						else {
HXLINE( 147)							_hx_tmp = false;
            						}
HXDLIN( 147)						if (_hx_tmp) {
HXLINE( 148)							len = (len + (int)1);
            						}
            						else {
HXLINE( 150)							goto _hx_goto_13;
            						}
            					}
            					_hx_goto_13:;
            				}
HXLINE( 152)				Float fangle = (angle * i);
HXLINE( 154)				if ((i == q)) {
HXLINE( 155)					nextPoint =  ::openfl::geom::Point_obj::__alloc( HX_CTX ,(int)0,(int)-28);
            				}
            				else {
HXLINE( 156)					if ((fangle < ((Float)0.125))) {
HXLINE( 157)						nextPoint =  ::openfl::geom::Point_obj::__alloc( HX_CTX ,(::Math_obj::tan((t * fangle)) * (int)28),(int)-28);
            					}
            					else {
HXLINE( 158)						if ((fangle < ((Float)0.375))) {
HXLINE( 159)							nextPoint =  ::openfl::geom::Point_obj::__alloc( HX_CTX ,(int)28,(::Math_obj::tan(((fangle - ((Float)0.25)) * t)) * (int)28));
            						}
            						else {
HXLINE( 160)							if ((fangle < ((Float)0.625))) {
HXLINE( 161)								nextPoint =  ::openfl::geom::Point_obj::__alloc( HX_CTX ,(::Math_obj::tan(((((Float)0.5) - fangle) * t)) * (int)28),(int)28);
            							}
            							else {
HXLINE( 162)								if ((fangle < ((Float)0.875))) {
HXLINE( 163)									nextPoint =  ::openfl::geom::Point_obj::__alloc( HX_CTX ,(int)-28,(::Math_obj::tan(((((Float)0.75) - fangle) * t)) * (int)28));
            								}
            								else {
HXLINE( 165)									nextPoint =  ::openfl::geom::Point_obj::__alloc( HX_CTX ,(::Math_obj::tan(((fangle - (int)1) * t)) * (int)28),(int)-28);
            								}
            							}
            						}
            					}
            				}
HXLINE( 167)				::Array< ::Dynamic> _hx_tmp1 = this->cdSegments;
HXDLIN( 167)				_hx_tmp1->push(this->drawSeg(::Array_obj< ::Dynamic>::__new(1)->init(0,prevPoint)->concat(this->iconVertices(prevPoint,len))->concat(::Array_obj< ::Dynamic>::__new(1)->init(0,nextPoint))));
HXLINE( 168)				prevPoint = nextPoint;
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(AbilityCell_obj,drawSegments,(void))

::Array< ::Dynamic> AbilityCell_obj::iconVertices( ::openfl::geom::Point p,int len){
            	HX_GC_STACKFRAME(&_hx_pos_d9cfa635af54f7ed_173_iconVertices)
HXLINE( 174)		 ::openfl::geom::Point a =  ::openfl::geom::Point_obj::__alloc( HX_CTX ,(int)28,(int)-28);
HXDLIN( 174)		 ::openfl::geom::Point a1 =  ::openfl::geom::Point_obj::__alloc( HX_CTX ,(int)28,(int)28);
HXDLIN( 174)		 ::openfl::geom::Point a2 =  ::openfl::geom::Point_obj::__alloc( HX_CTX ,(int)-28,(int)28);
HXDLIN( 174)		::Array< ::Dynamic> a3 = ::Array_obj< ::Dynamic>::__new(4)->init(0,a)->init(1,a1)->init(2,a2)->init(3, ::openfl::geom::Point_obj::__alloc( HX_CTX ,(int)-28,(int)-28));
HXLINE( 176)		int index = (int)0;
HXLINE( 177)		bool _hx_tmp;
HXDLIN( 177)		if ((p->x == (int)28)) {
HXLINE( 177)			_hx_tmp = (p->y != (int)28);
            		}
            		else {
HXLINE( 177)			_hx_tmp = false;
            		}
HXDLIN( 177)		if (_hx_tmp) {
HXLINE( 178)			index = (int)1;
            		}
            		else {
HXLINE( 179)			bool _hx_tmp1;
HXDLIN( 179)			if ((p->x == (int)-28)) {
HXLINE( 179)				_hx_tmp1 = (p->y != (int)-28);
            			}
            			else {
HXLINE( 179)				_hx_tmp1 = false;
            			}
HXDLIN( 179)			if (_hx_tmp1) {
HXLINE( 180)				index = (int)3;
            			}
            			else {
HXLINE( 181)				if ((p->y == (int)28)) {
HXLINE( 182)					index = (int)2;
            				}
            				else {
HXLINE( 183)					if ((p->y == (int)-28)) {
HXLINE( 184)						index = (int)0;
            					}
            				}
            			}
            		}
HXLINE( 186)		::Array< ::Dynamic> _g = ::Array_obj< ::Dynamic>::__new(0);
HXDLIN( 186)		{
HXLINE( 186)			int _g2 = (int)0;
HXDLIN( 186)			int _g1 = len;
HXDLIN( 186)			while((_g2 < _g1)){
HXLINE( 186)				_g2 = (_g2 + (int)1);
HXDLIN( 186)				int i = (_g2 - (int)1);
HXDLIN( 186)				_g->push(a3->__get(hx::Mod((i + index),(int)4)).StaticCast<  ::openfl::geom::Point >());
            			}
            		}
HXDLIN( 186)		return _g;
            	}


HX_DEFINE_DYNAMIC_FUNC2(AbilityCell_obj,iconVertices,return )

 ::openfl::display::Shape AbilityCell_obj::drawSeg(::Array< ::Dynamic> vertices){
            	HX_GC_STACKFRAME(&_hx_pos_d9cfa635af54f7ed_190_drawSeg)
HXLINE( 191)		 ::openfl::display::Shape seg =  ::openfl::display::Shape_obj::__alloc( HX_CTX );
HXLINE( 192)		seg->get_graphics()->lineStyle((int)0,(int)0,((Float)0.135),null(),null(),null(),null(),null());
HXLINE( 193)		seg->get_graphics()->moveTo((int)0,(int)0);
HXLINE( 194)		seg->get_graphics()->beginFill((int)0,((Float)0.7));
HXLINE( 195)		{
HXLINE( 195)			int _g = (int)0;
HXDLIN( 195)			while((_g < vertices->length)){
HXLINE( 195)				 ::openfl::geom::Point p = vertices->__get(_g).StaticCast<  ::openfl::geom::Point >();
HXDLIN( 195)				_g = (_g + (int)1);
HXLINE( 197)				Float x = p->x;
HXDLIN( 197)				Float y = p->y;
HXLINE( 198)				if ((::Math_obj::abs(x) == (int)28)) {
HXLINE( 199)					x = (x - (::MathUtils_obj::sign(x) * ((Float)3.42)));
            				}
HXLINE( 200)				if ((::Math_obj::abs(y) == (int)28)) {
HXLINE( 201)					y = (y - (::MathUtils_obj::sign(y) * ((Float)3.42)));
            				}
HXLINE( 202)				seg->get_graphics()->lineTo(x,y);
            			}
            		}
HXLINE( 204)		seg->get_graphics()->lineTo((int)0,(int)0);
HXLINE( 205)		seg->get_graphics()->endFill();
HXLINE( 206)		return seg;
            	}


HX_DEFINE_DYNAMIC_FUNC1(AbilityCell_obj,drawSeg,return )


hx::ObjectPtr< AbilityCell_obj > AbilityCell_obj::__new( ::ID id,int cooldown,int delay,int manacost,::String button) {
	hx::ObjectPtr< AbilityCell_obj > __this = new AbilityCell_obj();
	__this->__construct(id,cooldown,delay,manacost,button);
	return __this;
}

hx::ObjectPtr< AbilityCell_obj > AbilityCell_obj::__alloc(hx::Ctx *_hx_ctx, ::ID id,int cooldown,int delay,int manacost,::String button) {
	AbilityCell_obj *__this = (AbilityCell_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(AbilityCell_obj), true, "battle.vision.AbilityCell"));
	*(void **)__this = AbilityCell_obj::_hx_vtable;
	__this->__construct(id,cooldown,delay,manacost,button);
	return __this;
}

AbilityCell_obj::AbilityCell_obj()
{
}

void AbilityCell_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(AbilityCell);
	HX_MARK_MEMBER_NAME(cd,"cd");
	HX_MARK_MEMBER_NAME(icon,"icon");
	HX_MARK_MEMBER_NAME(cdSegments,"cdSegments");
	HX_MARK_MEMBER_NAME(cdText,"cdText");
	HX_MARK_MEMBER_NAME(manacostText,"manacostText");
	HX_MARK_MEMBER_NAME(buttonText,"buttonText");
	 ::openfl::display::Sprite_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void AbilityCell_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(cd,"cd");
	HX_VISIT_MEMBER_NAME(icon,"icon");
	HX_VISIT_MEMBER_NAME(cdSegments,"cdSegments");
	HX_VISIT_MEMBER_NAME(cdText,"cdText");
	HX_VISIT_MEMBER_NAME(manacostText,"manacostText");
	HX_VISIT_MEMBER_NAME(buttonText,"buttonText");
	 ::openfl::display::Sprite_obj::__Visit(HX_VISIT_ARG);
}

hx::Val AbilityCell_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"cd") ) { return hx::Val( cd ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"icon") ) { return hx::Val( icon ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"cdText") ) { return hx::Val( cdText ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"drawSeg") ) { return hx::Val( drawSeg_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"setCDText") ) { return hx::Val( setCDText_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"cdSegments") ) { return hx::Val( cdSegments ); }
		if (HX_FIELD_EQ(inName,"buttonText") ) { return hx::Val( buttonText ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"setManaText") ) { return hx::Val( setManaText_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"manacostText") ) { return hx::Val( manacostText ); }
		if (HX_FIELD_EQ(inName,"drawSegments") ) { return hx::Val( drawSegments_dyn() ); }
		if (HX_FIELD_EQ(inName,"iconVertices") ) { return hx::Val( iconVertices_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"setButtonText") ) { return hx::Val( setButtonText_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"changeCooldown") ) { return hx::Val( changeCooldown_dyn() ); }
		if (HX_FIELD_EQ(inName,"updateCooldown") ) { return hx::Val( updateCooldown_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"decrementCooldown") ) { return hx::Val( decrementCooldown_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val AbilityCell_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"cd") ) { cd=inValue.Cast<  ::battle::_hx_struct::Countdown >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"icon") ) { icon=inValue.Cast<  ::openfl::display::MovieClip >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"cdText") ) { cdText=inValue.Cast<  ::openfl::text::TextField >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"cdSegments") ) { cdSegments=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"buttonText") ) { buttonText=inValue.Cast<  ::openfl::text::TextField >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"manacostText") ) { manacostText=inValue.Cast<  ::openfl::text::TextField >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void AbilityCell_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("cd","\xa1","\x56","\x00","\x00"));
	outFields->push(HX_HCSTRING("icon","\x79","\xe7","\xb2","\x45"));
	outFields->push(HX_HCSTRING("cdSegments","\x21","\x09","\xf2","\xea"));
	outFields->push(HX_HCSTRING("cdText","\xee","\xb3","\x39","\x61"));
	outFields->push(HX_HCSTRING("manacostText","\x21","\xfd","\xe9","\x83"));
	outFields->push(HX_HCSTRING("buttonText","\xbf","\x3b","\xf0","\xb6"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo AbilityCell_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::battle::_hx_struct::Countdown*/ ,(int)offsetof(AbilityCell_obj,cd),HX_HCSTRING("cd","\xa1","\x56","\x00","\x00")},
	{hx::fsObject /*::openfl::display::MovieClip*/ ,(int)offsetof(AbilityCell_obj,icon),HX_HCSTRING("icon","\x79","\xe7","\xb2","\x45")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(AbilityCell_obj,cdSegments),HX_HCSTRING("cdSegments","\x21","\x09","\xf2","\xea")},
	{hx::fsObject /*::openfl::text::TextField*/ ,(int)offsetof(AbilityCell_obj,cdText),HX_HCSTRING("cdText","\xee","\xb3","\x39","\x61")},
	{hx::fsObject /*::openfl::text::TextField*/ ,(int)offsetof(AbilityCell_obj,manacostText),HX_HCSTRING("manacostText","\x21","\xfd","\xe9","\x83")},
	{hx::fsObject /*::openfl::text::TextField*/ ,(int)offsetof(AbilityCell_obj,buttonText),HX_HCSTRING("buttonText","\xbf","\x3b","\xf0","\xb6")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *AbilityCell_obj_sStaticStorageInfo = 0;
#endif

static ::String AbilityCell_obj_sMemberFields[] = {
	HX_HCSTRING("cd","\xa1","\x56","\x00","\x00"),
	HX_HCSTRING("icon","\x79","\xe7","\xb2","\x45"),
	HX_HCSTRING("cdSegments","\x21","\x09","\xf2","\xea"),
	HX_HCSTRING("cdText","\xee","\xb3","\x39","\x61"),
	HX_HCSTRING("manacostText","\x21","\xfd","\xe9","\x83"),
	HX_HCSTRING("buttonText","\xbf","\x3b","\xf0","\xb6"),
	HX_HCSTRING("decrementCooldown","\xde","\xc8","\xa6","\x6f"),
	HX_HCSTRING("changeCooldown","\x3b","\x89","\xdd","\x52"),
	HX_HCSTRING("updateCooldown","\xd4","\x3e","\xcc","\x2e"),
	HX_HCSTRING("setCDText","\x10","\x99","\x0e","\x54"),
	HX_HCSTRING("setManaText","\x96","\x4e","\x70","\x59"),
	HX_HCSTRING("setButtonText","\x01","\x7a","\x68","\x58"),
	HX_HCSTRING("drawSegments","\x84","\x79","\x1a","\x24"),
	HX_HCSTRING("iconVertices","\x92","\x04","\x54","\x15"),
	HX_HCSTRING("drawSeg","\xf1","\x81","\xd7","\xfb"),
	::String(null()) };

static void AbilityCell_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(AbilityCell_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void AbilityCell_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(AbilityCell_obj::__mClass,"__mClass");
};

#endif

hx::Class AbilityCell_obj::__mClass;

void AbilityCell_obj::__register()
{
	hx::Object *dummy = new AbilityCell_obj;
	AbilityCell_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("battle.vision.AbilityCell","\x3c","\x68","\xe8","\x3f");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = AbilityCell_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(AbilityCell_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< AbilityCell_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = AbilityCell_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = AbilityCell_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = AbilityCell_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace battle
} // end namespace vision
