// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_BarValuesBox
#include <BarValuesBox.h>
#endif
#ifndef INCLUDED_Element
#include <Element.h>
#endif
#ifndef INCLUDED_ID
#include <ID.h>
#endif
#ifndef INCLUDED_Main
#include <Main.h>
#endif
#ifndef INCLUDED_SSprite
#include <SSprite.h>
#endif
#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_UpperBattleBar
#include <UpperBattleBar.h>
#endif
#ifndef INCLUDED_battle_Buff
#include <battle/Buff.h>
#endif
#ifndef INCLUDED_battle_IModelObserver
#include <battle/IModelObserver.h>
#endif
#ifndef INCLUDED_battle_IObservableModel
#include <battle/IObservableModel.h>
#endif
#ifndef INCLUDED_battle_Unit
#include <battle/Unit.h>
#endif
#ifndef INCLUDED_battle_enums_Source
#include <battle/enums/Source.h>
#endif
#ifndef INCLUDED_battle_enums_StrikeType
#include <battle/enums/StrikeType.h>
#endif
#ifndef INCLUDED_battle_enums_Team
#include <battle/enums/Team.h>
#endif
#ifndef INCLUDED_battle_struct_BuffQueue
#include <battle/struct/BuffQueue.h>
#endif
#ifndef INCLUDED_battle_struct_Pool
#include <battle/struct/Pool.h>
#endif
#ifndef INCLUDED_battle_struct_UPair
#include <battle/struct/UPair.h>
#endif
#ifndef INCLUDED_battle_struct_UnitCoords
#include <battle/struct/UnitCoords.h>
#endif
#ifndef INCLUDED_battle_vision_BarType
#include <battle/vision/BarType.h>
#endif
#ifndef INCLUDED_battle_vision_BuffRect
#include <battle/vision/BuffRect.h>
#endif
#ifndef INCLUDED_battle_vision_TextfieldType
#include <battle/vision/TextfieldType.h>
#endif
#ifndef INCLUDED_battle_vision_UnitStateBar
#include <battle/vision/UnitStateBar.h>
#endif
#ifndef INCLUDED_graphic_ProgressBar
#include <graphic/ProgressBar.h>
#endif
#ifndef INCLUDED_motion_Actuate
#include <motion/Actuate.h>
#endif
#ifndef INCLUDED_motion_actuators_GenericActuator
#include <motion/actuators/GenericActuator.h>
#endif
#ifndef INCLUDED_motion_actuators_IGenericActuator
#include <motion/actuators/IGenericActuator.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_MovieClip
#include <openfl/display/MovieClip.h>
#endif
#ifndef INCLUDED_openfl_display_Shape
#include <openfl/display/Shape.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_text_TextField
#include <openfl/text/TextField.h>
#endif
#ifndef INCLUDED_openfl_text_TextFormat
#include <openfl/text/TextFormat.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_e3da43d7d1adc3c6_60_new,"battle.vision.UnitStateBar","new",0x28589d08,"battle.vision.UnitStateBar.new","battle/vision/UnitStateBar.hx",60,0xe96ecd48)
HX_LOCAL_STACK_FRAME(_hx_pos_e3da43d7d1adc3c6_91_init,"battle.vision.UnitStateBar","init",0x21e98168,"battle.vision.UnitStateBar.init","battle/vision/UnitStateBar.hx",91,0xe96ecd48)
HX_LOCAL_STACK_FRAME(_hx_pos_e3da43d7d1adc3c6_107_createTF,"battle.vision.UnitStateBar","createTF",0x6f00b9c6,"battle.vision.UnitStateBar.createTF","battle/vision/UnitStateBar.hx",107,0xe96ecd48)
HX_LOCAL_STACK_FRAME(_hx_pos_e3da43d7d1adc3c6_141_hpUpdate,"battle.vision.UnitStateBar","hpUpdate",0x6c889d89,"battle.vision.UnitStateBar.hpUpdate","battle/vision/UnitStateBar.hx",141,0xe96ecd48)
HX_LOCAL_STACK_FRAME(_hx_pos_e3da43d7d1adc3c6_147_manaUpdate,"battle.vision.UnitStateBar","manaUpdate",0x3a9e6e48,"battle.vision.UnitStateBar.manaUpdate","battle/vision/UnitStateBar.hx",147,0xe96ecd48)
HX_LOCAL_STACK_FRAME(_hx_pos_e3da43d7d1adc3c6_153_alacUpdate,"battle.vision.UnitStateBar","alacUpdate",0xb31b74ce,"battle.vision.UnitStateBar.alacUpdate","battle/vision/UnitStateBar.hx",153,0xe96ecd48)
HX_LOCAL_STACK_FRAME(_hx_pos_e3da43d7d1adc3c6_158_buffQueueUpdate,"battle.vision.UnitStateBar","buffQueueUpdate",0x70223c0f,"battle.vision.UnitStateBar.buffQueueUpdate","battle/vision/UnitStateBar.hx",158,0xe96ecd48)
HX_LOCAL_STACK_FRAME(_hx_pos_e3da43d7d1adc3c6_174_preTick,"battle.vision.UnitStateBar","preTick",0x190dddc8,"battle.vision.UnitStateBar.preTick","battle/vision/UnitStateBar.hx",174,0xe96ecd48)
HX_LOCAL_STACK_FRAME(_hx_pos_e3da43d7d1adc3c6_180_tick,"battle.vision.UnitStateBar","tick",0x292b09b5,"battle.vision.UnitStateBar.tick","battle/vision/UnitStateBar.hx",180,0xe96ecd48)
HX_LOCAL_STACK_FRAME(_hx_pos_e3da43d7d1adc3c6_186_miss,"battle.vision.UnitStateBar","miss",0x248a9954,"battle.vision.UnitStateBar.miss","battle/vision/UnitStateBar.hx",186,0xe96ecd48)
HX_LOCAL_STACK_FRAME(_hx_pos_e3da43d7d1adc3c6_191_death,"battle.vision.UnitStateBar","death",0xa36dd5dc,"battle.vision.UnitStateBar.death","battle/vision/UnitStateBar.hx",191,0xe96ecd48)
HX_LOCAL_STACK_FRAME(_hx_pos_e3da43d7d1adc3c6_201_abSelected,"battle.vision.UnitStateBar","abSelected",0x84481cb4,"battle.vision.UnitStateBar.abSelected","battle/vision/UnitStateBar.hx",201,0xe96ecd48)
HX_LOCAL_STACK_FRAME(_hx_pos_e3da43d7d1adc3c6_206_abDeselected,"battle.vision.UnitStateBar","abDeselected",0x7d016575,"battle.vision.UnitStateBar.abDeselected","battle/vision/UnitStateBar.hx",206,0xe96ecd48)
HX_LOCAL_STACK_FRAME(_hx_pos_e3da43d7d1adc3c6_212_abThrown,"battle.vision.UnitStateBar","abThrown",0x9db69ea1,"battle.vision.UnitStateBar.abThrown","battle/vision/UnitStateBar.hx",212,0xe96ecd48)
HX_LOCAL_STACK_FRAME(_hx_pos_e3da43d7d1adc3c6_217_abStriked,"battle.vision.UnitStateBar","abStriked",0x00c6a1b9,"battle.vision.UnitStateBar.abStriked","battle/vision/UnitStateBar.hx",217,0xe96ecd48)
HX_LOCAL_STACK_FRAME(_hx_pos_e3da43d7d1adc3c6_221_warn,"battle.vision.UnitStateBar","warn",0x2b20a89e,"battle.vision.UnitStateBar.warn","battle/vision/UnitStateBar.hx",221,0xe96ecd48)
HX_LOCAL_STACK_FRAME(_hx_pos_e3da43d7d1adc3c6_239_MAINY,"battle.vision.UnitStateBar","MAINY",0x4d5878a8,"battle.vision.UnitStateBar.MAINY","battle/vision/UnitStateBar.hx",239,0xe96ecd48)
HX_LOCAL_STACK_FRAME(_hx_pos_e3da43d7d1adc3c6_250_BARX,"battle.vision.UnitStateBar","BARX",0x07fff59d,"battle.vision.UnitStateBar.BARX","battle/vision/UnitStateBar.hx",250,0xe96ecd48)
HX_LOCAL_STACK_FRAME(_hx_pos_e3da43d7d1adc3c6_254_BARBOXX,"battle.vision.UnitStateBar","BARBOXX",0x0c1f37e8,"battle.vision.UnitStateBar.BARBOXX","battle/vision/UnitStateBar.hx",254,0xe96ecd48)
HX_LOCAL_STACK_FRAME(_hx_pos_e3da43d7d1adc3c6_261_TEXTFIELDX,"battle.vision.UnitStateBar","TEXTFIELDX",0xd17ba743,"battle.vision.UnitStateBar.TEXTFIELDX","battle/vision/UnitStateBar.hx",261,0xe96ecd48)
HX_LOCAL_STACK_FRAME(_hx_pos_e3da43d7d1adc3c6_271_TEXTFIELDY,"battle.vision.UnitStateBar","TEXTFIELDY",0xd17ba744,"battle.vision.UnitStateBar.TEXTFIELDY","battle/vision/UnitStateBar.hx",271,0xe96ecd48)
HX_LOCAL_STACK_FRAME(_hx_pos_e3da43d7d1adc3c6_276_TEXTFIELDW,"battle.vision.UnitStateBar","TEXTFIELDW",0xd17ba742,"battle.vision.UnitStateBar.TEXTFIELDW","battle/vision/UnitStateBar.hx",276,0xe96ecd48)
HX_LOCAL_STACK_FRAME(_hx_pos_e3da43d7d1adc3c6_281_BARY,"battle.vision.UnitStateBar","BARY",0x07fff59e,"battle.vision.UnitStateBar.BARY","battle/vision/UnitStateBar.hx",281,0xe96ecd48)
HX_LOCAL_STACK_FRAME(_hx_pos_e3da43d7d1adc3c6_285_BUFFX,"battle.vision.UnitStateBar","BUFFX",0x05260dcd,"battle.vision.UnitStateBar.BUFFX","battle/vision/UnitStateBar.hx",285,0xe96ecd48)
HX_LOCAL_STACK_FRAME(_hx_pos_e3da43d7d1adc3c6_293_BUFFY,"battle.vision.UnitStateBar","BUFFY",0x05260dce,"battle.vision.UnitStateBar.BUFFY","battle/vision/UnitStateBar.hx",293,0xe96ecd48)
HX_LOCAL_STACK_FRAME(_hx_pos_e3da43d7d1adc3c6_44_boot,"battle.vision.UnitStateBar","boot",0x1d49ca8a,"battle.vision.UnitStateBar.boot","battle/vision/UnitStateBar.hx",44,0xe96ecd48)
HX_LOCAL_STACK_FRAME(_hx_pos_e3da43d7d1adc3c6_45_boot,"battle.vision.UnitStateBar","boot",0x1d49ca8a,"battle.vision.UnitStateBar.boot","battle/vision/UnitStateBar.hx",45,0xe96ecd48)
HX_LOCAL_STACK_FRAME(_hx_pos_e3da43d7d1adc3c6_227_boot,"battle.vision.UnitStateBar","boot",0x1d49ca8a,"battle.vision.UnitStateBar.boot","battle/vision/UnitStateBar.hx",227,0xe96ecd48)
HX_LOCAL_STACK_FRAME(_hx_pos_e3da43d7d1adc3c6_229_boot,"battle.vision.UnitStateBar","boot",0x1d49ca8a,"battle.vision.UnitStateBar.boot","battle/vision/UnitStateBar.hx",229,0xe96ecd48)
HX_LOCAL_STACK_FRAME(_hx_pos_e3da43d7d1adc3c6_230_boot,"battle.vision.UnitStateBar","boot",0x1d49ca8a,"battle.vision.UnitStateBar.boot","battle/vision/UnitStateBar.hx",230,0xe96ecd48)
HX_LOCAL_STACK_FRAME(_hx_pos_e3da43d7d1adc3c6_231_boot,"battle.vision.UnitStateBar","boot",0x1d49ca8a,"battle.vision.UnitStateBar.boot","battle/vision/UnitStateBar.hx",231,0xe96ecd48)
HX_LOCAL_STACK_FRAME(_hx_pos_e3da43d7d1adc3c6_232_boot,"battle.vision.UnitStateBar","boot",0x1d49ca8a,"battle.vision.UnitStateBar.boot","battle/vision/UnitStateBar.hx",232,0xe96ecd48)
HX_LOCAL_STACK_FRAME(_hx_pos_e3da43d7d1adc3c6_233_boot,"battle.vision.UnitStateBar","boot",0x1d49ca8a,"battle.vision.UnitStateBar.boot","battle/vision/UnitStateBar.hx",233,0xe96ecd48)
HX_LOCAL_STACK_FRAME(_hx_pos_e3da43d7d1adc3c6_234_boot,"battle.vision.UnitStateBar","boot",0x1d49ca8a,"battle.vision.UnitStateBar.boot","battle/vision/UnitStateBar.hx",234,0xe96ecd48)
HX_LOCAL_STACK_FRAME(_hx_pos_e3da43d7d1adc3c6_235_boot,"battle.vision.UnitStateBar","boot",0x1d49ca8a,"battle.vision.UnitStateBar.boot","battle/vision/UnitStateBar.hx",235,0xe96ecd48)
namespace battle{
namespace vision{

void UnitStateBar_obj::__construct(::Array< ::Dynamic> allies,::Array< ::Dynamic> enemies,::Dynamic model){
            	HX_GC_STACKFRAME(&_hx_pos_e3da43d7d1adc3c6_60_new)
HXLINE(  61)		super::__construct();
HXLINE(  62)		this->model = model;
HXLINE(  64)		::Array< ::Dynamic> _g = ::Array_obj< ::Dynamic>::__new(0);
HXDLIN(  64)		{
HXLINE(  64)			int _g1 = (int)0;
HXDLIN(  64)			while((_g1 < allies->length)){
HXLINE(  64)				 ::battle::Unit a = allies->__get(_g1).StaticCast<  ::battle::Unit >();
HXDLIN(  64)				_g1 = (_g1 + (int)1);
HXDLIN(  64)				_g->push( ::graphic::ProgressBar_obj::__alloc( HX_CTX ,((Float)200),((Float)14),null(),null(),null()));
            			}
            		}
HXDLIN(  64)		::Array< ::Dynamic> aHPBs = _g;
HXLINE(  65)		::Array< ::Dynamic> _g11 = ::Array_obj< ::Dynamic>::__new(0);
HXDLIN(  65)		{
HXLINE(  65)			int _g2 = (int)0;
HXDLIN(  65)			while((_g2 < enemies->length)){
HXLINE(  65)				 ::battle::Unit e = enemies->__get(_g2).StaticCast<  ::battle::Unit >();
HXDLIN(  65)				_g2 = (_g2 + (int)1);
HXDLIN(  65)				_g11->push( ::graphic::ProgressBar_obj::__alloc( HX_CTX ,((Float)200),((Float)14),null(),null(),null()));
            			}
            		}
HXDLIN(  65)		::Array< ::Dynamic> eHPBs = _g11;
HXLINE(  66)		::Array< ::Dynamic> _g21 = ::Array_obj< ::Dynamic>::__new(0);
HXDLIN(  66)		{
HXLINE(  66)			int _g3 = (int)0;
HXDLIN(  66)			while((_g3 < allies->length)){
HXLINE(  66)				 ::battle::Unit a1 = allies->__get(_g3).StaticCast<  ::battle::Unit >();
HXDLIN(  66)				_g3 = (_g3 + (int)1);
HXDLIN(  66)				_g21->push( ::graphic::ProgressBar_obj::__alloc( HX_CTX ,((Float)200),((Float)14),(int)52479,(int)0,null()));
            			}
            		}
HXDLIN(  66)		::Array< ::Dynamic> aManaBars = _g21;
HXLINE(  67)		::Array< ::Dynamic> _g31 = ::Array_obj< ::Dynamic>::__new(0);
HXDLIN(  67)		{
HXLINE(  67)			int _g4 = (int)0;
HXDLIN(  67)			while((_g4 < enemies->length)){
HXLINE(  67)				 ::battle::Unit e1 = enemies->__get(_g4).StaticCast<  ::battle::Unit >();
HXDLIN(  67)				_g4 = (_g4 + (int)1);
HXDLIN(  67)				_g31->push( ::graphic::ProgressBar_obj::__alloc( HX_CTX ,((Float)200),((Float)14),(int)52479,(int)0,null()));
            			}
            		}
HXDLIN(  67)		::Array< ::Dynamic> eManaBars = _g31;
HXLINE(  69)		::Array< ::Dynamic> _g41 = ::Array_obj< ::Dynamic>::__new(0);
HXDLIN(  69)		{
HXLINE(  69)			int _g5 = (int)0;
HXDLIN(  69)			while((_g5 < allies->length)){
HXLINE(  69)				 ::battle::Unit a2 = allies->__get(_g5).StaticCast<  ::battle::Unit >();
HXDLIN(  69)				_g5 = (_g5 + (int)1);
HXDLIN(  69)				_g41->push(this->createTF(a2,::battle::vision::TextfieldType_obj::Name_dyn()));
            			}
            		}
HXDLIN(  69)		::Array< ::Dynamic> aNames = _g41;
HXLINE(  70)		::Array< ::Dynamic> _g51 = ::Array_obj< ::Dynamic>::__new(0);
HXDLIN(  70)		{
HXLINE(  70)			int _g6 = (int)0;
HXDLIN(  70)			while((_g6 < enemies->length)){
HXLINE(  70)				 ::battle::Unit e2 = enemies->__get(_g6).StaticCast<  ::battle::Unit >();
HXDLIN(  70)				_g6 = (_g6 + (int)1);
HXDLIN(  70)				_g51->push(this->createTF(e2,::battle::vision::TextfieldType_obj::Name_dyn()));
            			}
            		}
HXDLIN(  70)		::Array< ::Dynamic> eNames = _g51;
HXLINE(  71)		::Array< ::Dynamic> _g61 = ::Array_obj< ::Dynamic>::__new(0);
HXDLIN(  71)		{
HXLINE(  71)			int _g7 = (int)0;
HXDLIN(  71)			while((_g7 < allies->length)){
HXLINE(  71)				 ::battle::Unit a3 = allies->__get(_g7).StaticCast<  ::battle::Unit >();
HXDLIN(  71)				_g7 = (_g7 + (int)1);
HXDLIN(  71)				_g61->push(this->createTF(a3,::battle::vision::TextfieldType_obj::HP_dyn()));
            			}
            		}
HXDLIN(  71)		::Array< ::Dynamic> aHPs = _g61;
HXLINE(  72)		::Array< ::Dynamic> _g71 = ::Array_obj< ::Dynamic>::__new(0);
HXDLIN(  72)		{
HXLINE(  72)			int _g8 = (int)0;
HXDLIN(  72)			while((_g8 < enemies->length)){
HXLINE(  72)				 ::battle::Unit e3 = enemies->__get(_g8).StaticCast<  ::battle::Unit >();
HXDLIN(  72)				_g8 = (_g8 + (int)1);
HXDLIN(  72)				_g71->push(this->createTF(e3,::battle::vision::TextfieldType_obj::HP_dyn()));
            			}
            		}
HXDLIN(  72)		::Array< ::Dynamic> eHPs = _g71;
HXLINE(  73)		::Array< ::Dynamic> _g81 = ::Array_obj< ::Dynamic>::__new(0);
HXDLIN(  73)		{
HXLINE(  73)			int _g9 = (int)0;
HXDLIN(  73)			while((_g9 < allies->length)){
HXLINE(  73)				 ::battle::Unit a4 = allies->__get(_g9).StaticCast<  ::battle::Unit >();
HXDLIN(  73)				_g9 = (_g9 + (int)1);
HXDLIN(  73)				_g81->push(this->createTF(a4,::battle::vision::TextfieldType_obj::Mana_dyn()));
            			}
            		}
HXDLIN(  73)		::Array< ::Dynamic> aManas = _g81;
HXLINE(  74)		::Array< ::Dynamic> _g91 = ::Array_obj< ::Dynamic>::__new(0);
HXDLIN(  74)		{
HXLINE(  74)			int _g10 = (int)0;
HXDLIN(  74)			while((_g10 < enemies->length)){
HXLINE(  74)				 ::battle::Unit e4 = enemies->__get(_g10).StaticCast<  ::battle::Unit >();
HXDLIN(  74)				_g10 = (_g10 + (int)1);
HXDLIN(  74)				_g91->push(this->createTF(e4,::battle::vision::TextfieldType_obj::Mana_dyn()));
            			}
            		}
HXDLIN(  74)		::Array< ::Dynamic> eManas = _g91;
HXLINE(  76)		::Array< ::Dynamic> _g101 = ::Array_obj< ::Dynamic>::__new(0);
HXDLIN(  76)		{
HXLINE(  76)			int _g111 = (int)0;
HXDLIN(  76)			while((_g111 < allies->length)){
HXLINE(  76)				 ::battle::Unit a5 = allies->__get(_g111).StaticCast<  ::battle::Unit >();
HXDLIN(  76)				_g111 = (_g111 + (int)1);
HXDLIN(  76)				::Array< ::Dynamic> _g12 = ::Array_obj< ::Dynamic>::__new(0);
HXDLIN(  76)				{
HXLINE(  76)					int _g13 = (int)0;
HXDLIN(  76)					::Array< ::Dynamic> _g14 = a5->buffQueue->queue;
HXDLIN(  76)					while((_g13 < _g14->length)){
HXLINE(  76)						 ::battle::Buff buff = _g14->__get(_g13).StaticCast<  ::battle::Buff >();
HXDLIN(  76)						_g13 = (_g13 + (int)1);
HXDLIN(  76)						_g12->push( ::battle::vision::BuffRect_obj::__alloc( HX_CTX ,buff));
            					}
            				}
HXDLIN(  76)				_g101->push(_g12);
            			}
            		}
HXDLIN(  76)		::Array< ::Dynamic> aBuffs = _g101;
HXLINE(  77)		::Array< ::Dynamic> _g112 = ::Array_obj< ::Dynamic>::__new(0);
HXDLIN(  77)		{
HXLINE(  77)			int _g121 = (int)0;
HXDLIN(  77)			while((_g121 < enemies->length)){
HXLINE(  77)				 ::battle::Unit e5 = enemies->__get(_g121).StaticCast<  ::battle::Unit >();
HXDLIN(  77)				_g121 = (_g121 + (int)1);
HXDLIN(  77)				::Array< ::Dynamic> _g131 = ::Array_obj< ::Dynamic>::__new(0);
HXDLIN(  77)				{
HXLINE(  77)					int _g141 = (int)0;
HXDLIN(  77)					::Array< ::Dynamic> _g15 = e5->buffQueue->queue;
HXDLIN(  77)					while((_g141 < _g15->length)){
HXLINE(  77)						 ::battle::Buff buff1 = _g15->__get(_g141).StaticCast<  ::battle::Buff >();
HXDLIN(  77)						_g141 = (_g141 + (int)1);
HXDLIN(  77)						_g131->push( ::battle::vision::BuffRect_obj::__alloc( HX_CTX ,buff1));
            					}
            				}
HXDLIN(  77)				_g112->push(_g131);
            			}
            		}
HXDLIN(  77)		::Array< ::Dynamic> eBuffs = _g112;
HXLINE(  79)		this->HPbars =  ::battle::_hx_struct::UPair_obj::__alloc( HX_CTX ,aHPBs,eHPBs);
HXLINE(  80)		this->manaBars =  ::battle::_hx_struct::UPair_obj::__alloc( HX_CTX ,aManaBars,eManaBars);
HXLINE(  81)		::Array< ::Dynamic> _g122 = ::Array_obj< ::Dynamic>::__new(0);
HXDLIN(  81)		{
HXLINE(  81)			int _g132 = (int)0;
HXDLIN(  81)			while((_g132 < allies->length)){
HXLINE(  81)				 ::battle::Unit a6 = allies->__get(_g132).StaticCast<  ::battle::Unit >();
HXDLIN(  81)				_g132 = (_g132 + (int)1);
HXDLIN(  81)				_g122->push( ::BarValuesBox_obj::__alloc( HX_CTX ));
            			}
            		}
HXDLIN(  81)		::Array< ::Dynamic> _hx_tmp = _g122;
HXDLIN(  81)		::Array< ::Dynamic> _g133 = ::Array_obj< ::Dynamic>::__new(0);
HXDLIN(  81)		{
HXLINE(  81)			int _g142 = (int)0;
HXDLIN(  81)			while((_g142 < enemies->length)){
HXLINE(  81)				 ::battle::Unit e6 = enemies->__get(_g142).StaticCast<  ::battle::Unit >();
HXDLIN(  81)				_g142 = (_g142 + (int)1);
HXDLIN(  81)				_g133->push( ::BarValuesBox_obj::__alloc( HX_CTX ));
            			}
            		}
HXDLIN(  81)		this->boxes =  ::battle::_hx_struct::UPair_obj::__alloc( HX_CTX ,_hx_tmp,_g133);
HXLINE(  82)		this->names =  ::battle::_hx_struct::UPair_obj::__alloc( HX_CTX ,aNames,eNames);
HXLINE(  83)		this->HPs =  ::battle::_hx_struct::UPair_obj::__alloc( HX_CTX ,aHPs,eHPs);
HXLINE(  84)		this->manas =  ::battle::_hx_struct::UPair_obj::__alloc( HX_CTX ,aManas,eManas);
HXLINE(  85)		this->buffs =  ::battle::_hx_struct::UPair_obj::__alloc( HX_CTX ,aBuffs,eBuffs);
HXLINE(  87)		this->upperBar =  ::UpperBattleBar_obj::__alloc( HX_CTX );
            	}

Dynamic UnitStateBar_obj::__CreateEmpty() { return new UnitStateBar_obj; }

void *UnitStateBar_obj::_hx_vtable = 0;

Dynamic UnitStateBar_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< UnitStateBar_obj > _hx_result = new UnitStateBar_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

bool UnitStateBar_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x1b123bf8) {
		if (inClassId<=(int)0x17120186) {
			if (inClassId<=(int)0x0ddfced7) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0ddfced7;
			} else {
				return inClassId==(int)0x17120186;
			}
		} else {
			return inClassId==(int)0x19c29573 || inClassId==(int)0x1b123bf8;
		}
	} else {
		if (inClassId<=(int)0x3f2b00af) {
			return inClassId==(int)0x2e1d480a || inClassId==(int)0x3f2b00af;
		} else {
			return inClassId==(int)0x739fd0b8;
		}
	}
}

static ::battle::IModelObserver_obj _hx_battle_vision_UnitStateBar__hx_battle_IModelObserver= {
	( void (hx::Object::*)( ::battle::Unit,int, ::Element,bool, ::battle::enums::Source))&::battle::vision::UnitStateBar_obj::hpUpdate,
	( void (hx::Object::*)( ::battle::Unit,int, ::battle::enums::Source))&::battle::vision::UnitStateBar_obj::manaUpdate,
	( void (hx::Object::*)( ::battle::Unit,Float, ::battle::enums::Source))&::battle::vision::UnitStateBar_obj::alacUpdate,
	( void (hx::Object::*)( ::battle::_hx_struct::UnitCoords,::Array< ::Dynamic>))&::battle::vision::UnitStateBar_obj::buffQueueUpdate,
	( void (hx::Object::*)( ::battle::Unit))&::battle::vision::UnitStateBar_obj::preTick,
	( void (hx::Object::*)( ::battle::Unit))&::battle::vision::UnitStateBar_obj::tick,
	( void (hx::Object::*)( ::battle::_hx_struct::UnitCoords, ::Element))&::battle::vision::UnitStateBar_obj::miss,
	( void (hx::Object::*)( ::battle::_hx_struct::UnitCoords))&::battle::vision::UnitStateBar_obj::death,
	( void (hx::Object::*)(int))&::battle::vision::UnitStateBar_obj::abSelected,
	( void (hx::Object::*)(int))&::battle::vision::UnitStateBar_obj::abDeselected,
	( void (hx::Object::*)( ::battle::_hx_struct::UnitCoords, ::battle::_hx_struct::UnitCoords, ::ID, ::battle::enums::StrikeType, ::Element))&::battle::vision::UnitStateBar_obj::abThrown,
	( void (hx::Object::*)( ::battle::_hx_struct::UnitCoords, ::battle::_hx_struct::UnitCoords, ::ID, ::battle::enums::StrikeType, ::Element))&::battle::vision::UnitStateBar_obj::abStriked,
	( void (hx::Object::*)(::String))&::battle::vision::UnitStateBar_obj::warn,
};

void *UnitStateBar_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0x2826bace: return &_hx_battle_vision_UnitStateBar__hx_battle_IModelObserver;
	}
	return super::_hx_getInterface(inHash);
}

void UnitStateBar_obj::init( ::battle::_hx_struct::UPair pair){
            	HX_STACKFRAME(&_hx_pos_e3da43d7d1adc3c6_91_init)
HXLINE(  92)		this->add(this->upperBar,(int)0,(int)0);
HXLINE(  94)		{
HXLINE(  94)			 ::Dynamic unit = pair->iterator();
HXDLIN(  94)			while(( (bool)(unit->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE(  94)				 ::battle::Unit unit1 = ( ( ::battle::Unit)(unit->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE(  96)				 ::graphic::ProgressBar _hx_tmp = this->HPbars->getByUnit(unit1).StaticCast<  ::graphic::ProgressBar >();
HXDLIN(  96)				Float _hx_tmp1 = ::battle::vision::UnitStateBar_obj::BARX(unit1->team);
HXDLIN(  96)				this->add(_hx_tmp,_hx_tmp1,::battle::vision::UnitStateBar_obj::BARY(unit1->position,::battle::vision::BarType_obj::HP_dyn()));
HXLINE(  97)				 ::graphic::ProgressBar _hx_tmp2 = this->manaBars->getByUnit(unit1).StaticCast<  ::graphic::ProgressBar >();
HXDLIN(  97)				Float _hx_tmp3 = ::battle::vision::UnitStateBar_obj::BARX(unit1->team);
HXDLIN(  97)				this->add(_hx_tmp2,_hx_tmp3,::battle::vision::UnitStateBar_obj::BARY(unit1->position,::battle::vision::BarType_obj::Mana_dyn()));
HXLINE(  98)				 ::BarValuesBox _hx_tmp4 = this->boxes->getByUnit(unit1).StaticCast<  ::BarValuesBox >();
HXDLIN(  98)				Float _hx_tmp5 = ::battle::vision::UnitStateBar_obj::BARBOXX(unit1->team);
HXDLIN(  98)				this->add(_hx_tmp4,_hx_tmp5,(::battle::vision::UnitStateBar_obj::MAINY(unit1->position) - (int)1));
HXLINE( 100)				 ::openfl::text::TextField _hx_tmp6 = this->names->getByUnit(unit1).StaticCast<  ::openfl::text::TextField >();
HXDLIN( 100)				Float _hx_tmp7 = ::battle::vision::UnitStateBar_obj::TEXTFIELDX(unit1->team,::battle::vision::TextfieldType_obj::Name_dyn());
HXDLIN( 100)				this->add(_hx_tmp6,_hx_tmp7,::battle::vision::UnitStateBar_obj::TEXTFIELDY(unit1->position,::battle::vision::TextfieldType_obj::Name_dyn()));
HXLINE( 101)				 ::openfl::text::TextField _hx_tmp8 = this->HPs->getByUnit(unit1).StaticCast<  ::openfl::text::TextField >();
HXDLIN( 101)				Float _hx_tmp9 = ::battle::vision::UnitStateBar_obj::TEXTFIELDX(unit1->team,::battle::vision::TextfieldType_obj::HP_dyn());
HXDLIN( 101)				this->add(_hx_tmp8,_hx_tmp9,::battle::vision::UnitStateBar_obj::TEXTFIELDY(unit1->position,::battle::vision::TextfieldType_obj::HP_dyn()));
HXLINE( 102)				 ::openfl::text::TextField _hx_tmp10 = this->manas->getByUnit(unit1).StaticCast<  ::openfl::text::TextField >();
HXDLIN( 102)				Float _hx_tmp11 = ::battle::vision::UnitStateBar_obj::TEXTFIELDX(unit1->team,::battle::vision::TextfieldType_obj::Mana_dyn());
HXDLIN( 102)				this->add(_hx_tmp10,_hx_tmp11,::battle::vision::UnitStateBar_obj::TEXTFIELDY(unit1->position,::battle::vision::TextfieldType_obj::Mana_dyn()));
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(UnitStateBar_obj,init,(void))

 ::openfl::text::TextField UnitStateBar_obj::createTF( ::battle::Unit unit, ::battle::vision::TextfieldType type){
            	HX_GC_STACKFRAME(&_hx_pos_e3da43d7d1adc3c6_107_createTF)
HXLINE( 108)		 ::openfl::text::TextField t =  ::openfl::text::TextField_obj::__alloc( HX_CTX );
HXLINE( 109)		 ::openfl::text::TextFormat format =  ::openfl::text::TextFormat_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null());
HXLINE( 110)		switch((int)(_hx_getEnumValueIndex(type))){
            			case (int)0: {
HXLINE( 113)				format->font = HX_("Trebuchet MS",58,b6,dd,d5);
HXLINE( 114)				format->size = (int)12;
HXLINE( 115)				format->color = (int)0;
HXLINE( 116)				t->set_text(unit->name);
            			}
            			break;
            			case (int)1: {
HXLINE( 118)				format->font = HX_("Trebuchet MS",58,b6,dd,d5);
HXLINE( 119)				format->size = (int)11;
HXLINE( 120)				format->align = (int)0;
HXLINE( 121)				format->color = (int)16777215;
HXLINE( 122)				t->set_width(((Float)71));
HXLINE( 123)				t->set_text(((unit->hpPool->value + HX_("/",2f,00,00,00)) + unit->hpPool->maxValue));
            			}
            			break;
            			case (int)2: {
HXLINE( 125)				format->font = HX_("Trebuchet MS",58,b6,dd,d5);
HXLINE( 126)				format->size = (int)11;
HXLINE( 127)				format->align = (int)0;
HXLINE( 128)				format->color = (int)16777215;
HXLINE( 129)				t->set_width(((Float)71));
HXLINE( 130)				t->set_text(((unit->manaPool->value + HX_("/",2f,00,00,00)) + unit->manaPool->maxValue));
            			}
            			break;
            		}
HXLINE( 132)		format->bold = false;
HXLINE( 133)		t->set_selectable(false);
HXLINE( 134)		t->setTextFormat(format,null(),null());
HXLINE( 135)		return t;
            	}


HX_DEFINE_DYNAMIC_FUNC2(UnitStateBar_obj,createTF,return )

void UnitStateBar_obj::hpUpdate( ::battle::Unit target,int dhp, ::Element element,bool crit, ::battle::enums::Source source){
            	HX_STACKFRAME(&_hx_pos_e3da43d7d1adc3c6_141_hpUpdate)
HXLINE( 142)		 ::openfl::text::TextField _hx_tmp = this->HPs->getByUnit(target).StaticCast<  ::openfl::text::TextField >();
HXDLIN( 142)		_hx_tmp->set_text(((target->hpPool->value + HX_("/",2f,00,00,00)) + target->hpPool->maxValue));
HXLINE( 143)		 ::graphic::ProgressBar _hx_tmp1 = this->HPbars->getByUnit(target).StaticCast<  ::graphic::ProgressBar >();
HXDLIN( 143)		::motion::Actuate_obj::tween(_hx_tmp1,((Float)0.4), ::Dynamic(hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("progress",ad,f7,2a,86),((Float)target->hpPool->value / (Float)target->hpPool->maxValue))),null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC5(UnitStateBar_obj,hpUpdate,(void))

void UnitStateBar_obj::manaUpdate( ::battle::Unit target,int dmana, ::battle::enums::Source source){
            	HX_STACKFRAME(&_hx_pos_e3da43d7d1adc3c6_147_manaUpdate)
HXLINE( 148)		 ::openfl::text::TextField _hx_tmp = this->manas->getByUnit(target).StaticCast<  ::openfl::text::TextField >();
HXDLIN( 148)		_hx_tmp->set_text(((target->manaPool->value + HX_("/",2f,00,00,00)) + target->manaPool->maxValue));
HXLINE( 149)		 ::graphic::ProgressBar _hx_tmp1 = this->manaBars->getByUnit(target).StaticCast<  ::graphic::ProgressBar >();
HXDLIN( 149)		::motion::Actuate_obj::tween(_hx_tmp1,((Float)0.2), ::Dynamic(hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("progress",ad,f7,2a,86),((Float)target->manaPool->value / (Float)target->manaPool->maxValue))),null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC3(UnitStateBar_obj,manaUpdate,(void))

void UnitStateBar_obj::alacUpdate( ::battle::Unit unit,Float dalac, ::battle::enums::Source source){
            	HX_STACKFRAME(&_hx_pos_e3da43d7d1adc3c6_153_alacUpdate)
            	}


HX_DEFINE_DYNAMIC_FUNC3(UnitStateBar_obj,alacUpdate,(void))

void UnitStateBar_obj::buffQueueUpdate( ::battle::_hx_struct::UnitCoords unit,::Array< ::Dynamic> queue){
            	HX_GC_STACKFRAME(&_hx_pos_e3da43d7d1adc3c6_158_buffQueueUpdate)
HXLINE( 159)		{
HXLINE( 159)			int _g1 = (int)0;
HXDLIN( 159)			int _g = ( (::Array< ::Dynamic>)(this->buffs->get(unit)) )->length;
HXDLIN( 159)			while((_g1 < _g)){
HXLINE( 159)				_g1 = (_g1 + (int)1);
HXDLIN( 159)				int i = (_g1 - (int)1);
HXLINE( 161)				this->remove(Dynamic( this->buffs->get(unit)->__GetItem((int)0)).StaticCast<  ::battle::vision::BuffRect >());
HXLINE( 162)				( (::Array< ::Dynamic>)(this->buffs->get(unit)) )->removeRange((int)0,(int)1);
            			}
            		}
HXLINE( 165)		{
HXLINE( 165)			int _g11 = (int)0;
HXDLIN( 165)			int _g2 = queue->length;
HXDLIN( 165)			while((_g11 < _g2)){
HXLINE( 165)				_g11 = (_g11 + (int)1);
HXDLIN( 165)				int i1 = (_g11 - (int)1);
HXLINE( 167)				 ::battle::vision::BuffRect rect =  ::battle::vision::BuffRect_obj::__alloc( HX_CTX ,queue->__get(i1).StaticCast<  ::battle::Buff >());
HXLINE( 168)				( (::Array< ::Dynamic>)(this->buffs->get(unit)) )->push(rect);
HXLINE( 169)				Float _hx_tmp = ::battle::vision::UnitStateBar_obj::BUFFX(unit->team,i1);
HXDLIN( 169)				this->add(rect,_hx_tmp,::battle::vision::UnitStateBar_obj::MAINY(unit->pos));
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(UnitStateBar_obj,buffQueueUpdate,(void))

void UnitStateBar_obj::preTick( ::battle::Unit current){
            	HX_STACKFRAME(&_hx_pos_e3da43d7d1adc3c6_174_preTick)
            	}


HX_DEFINE_DYNAMIC_FUNC1(UnitStateBar_obj,preTick,(void))

void UnitStateBar_obj::tick( ::battle::Unit current){
            	HX_STACKFRAME(&_hx_pos_e3da43d7d1adc3c6_180_tick)
HXDLIN( 180)		int _g = (int)0;
HXDLIN( 180)		 ::battle::_hx_struct::UPair _g1 = this->buffs;
HXDLIN( 180)		::Array< ::Dynamic> _g11 = ( (::Array< ::Dynamic>)(_g1->get(::battle::_hx_struct::UnitCoords_obj::get(current))) );
HXDLIN( 180)		while((_g < _g11->length)){
HXDLIN( 180)			 ::battle::vision::BuffRect rect = _g11->__get(_g).StaticCast<  ::battle::vision::BuffRect >();
HXDLIN( 180)			_g = (_g + (int)1);
HXLINE( 181)			if (rect->tickAndIsOver()) {
HXLINE( 182)				 ::battle::_hx_struct::UnitCoords _hx_tmp = ::battle::_hx_struct::UnitCoords_obj::get(current);
HXDLIN( 182)				this->buffQueueUpdate(_hx_tmp,current->buffQueue->queue);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(UnitStateBar_obj,tick,(void))

void UnitStateBar_obj::miss( ::battle::_hx_struct::UnitCoords target, ::Element element){
            	HX_STACKFRAME(&_hx_pos_e3da43d7d1adc3c6_186_miss)
            	}


HX_DEFINE_DYNAMIC_FUNC2(UnitStateBar_obj,miss,(void))

void UnitStateBar_obj::death( ::battle::_hx_struct::UnitCoords unit){
            	HX_STACKFRAME(&_hx_pos_e3da43d7d1adc3c6_191_death)
HXLINE( 192)		this->remove(this->names->get(unit).StaticCast<  ::openfl::text::TextField >());
HXLINE( 193)		this->remove(this->HPs->get(unit).StaticCast<  ::openfl::text::TextField >());
HXLINE( 194)		this->remove(this->boxes->get(unit).StaticCast<  ::BarValuesBox >());
HXLINE( 195)		this->remove(this->manas->get(unit).StaticCast<  ::openfl::text::TextField >());
HXLINE( 196)		this->remove(this->HPbars->get(unit).StaticCast<  ::graphic::ProgressBar >());
HXLINE( 197)		this->remove(this->manaBars->get(unit).StaticCast<  ::graphic::ProgressBar >());
            	}


HX_DEFINE_DYNAMIC_FUNC1(UnitStateBar_obj,death,(void))

void UnitStateBar_obj::abSelected(int num){
            	HX_STACKFRAME(&_hx_pos_e3da43d7d1adc3c6_201_abSelected)
            	}


HX_DEFINE_DYNAMIC_FUNC1(UnitStateBar_obj,abSelected,(void))

void UnitStateBar_obj::abDeselected(int num){
            	HX_STACKFRAME(&_hx_pos_e3da43d7d1adc3c6_206_abDeselected)
            	}


HX_DEFINE_DYNAMIC_FUNC1(UnitStateBar_obj,abDeselected,(void))

void UnitStateBar_obj::abThrown( ::battle::_hx_struct::UnitCoords target, ::battle::_hx_struct::UnitCoords caster, ::ID id, ::battle::enums::StrikeType type, ::Element element){
            	HX_STACKFRAME(&_hx_pos_e3da43d7d1adc3c6_212_abThrown)
HXDLIN( 212)		::battle::IObservableModel_obj::respond(this->model);
            	}


HX_DEFINE_DYNAMIC_FUNC5(UnitStateBar_obj,abThrown,(void))

void UnitStateBar_obj::abStriked( ::battle::_hx_struct::UnitCoords target, ::battle::_hx_struct::UnitCoords caster, ::ID id, ::battle::enums::StrikeType type, ::Element element){
            	HX_STACKFRAME(&_hx_pos_e3da43d7d1adc3c6_217_abStriked)
HXDLIN( 217)		::battle::IObservableModel_obj::respond(this->model);
            	}


HX_DEFINE_DYNAMIC_FUNC5(UnitStateBar_obj,abStriked,(void))

void UnitStateBar_obj::warn(::String text){
            	HX_STACKFRAME(&_hx_pos_e3da43d7d1adc3c6_221_warn)
            	}


HX_DEFINE_DYNAMIC_FUNC1(UnitStateBar_obj,warn,(void))

Float UnitStateBar_obj::xPos;

Float UnitStateBar_obj::yPos;

Float UnitStateBar_obj::XMAINOFFSET;

Float UnitStateBar_obj::BARW;

Float UnitStateBar_obj::BARH;

Float UnitStateBar_obj::BARBOXW;

Float UnitStateBar_obj::BARBOXH;

Float UnitStateBar_obj::BUFFW;

Float UnitStateBar_obj::BUFFH;

Float UnitStateBar_obj::BUFFOFFSET;

Float UnitStateBar_obj::MAINY(int pos){
            	HX_STACKFRAME(&_hx_pos_e3da43d7d1adc3c6_239_MAINY)
HXDLIN( 239)		switch((int)(pos)){
            			case (int)0: {
HXLINE( 241)				return (int)43;
            			}
            			break;
            			case (int)1: {
HXLINE( 242)				return (int)80;
            			}
            			break;
            			case (int)2: {
HXLINE( 243)				return (int)6;
            			}
            			break;
            			default:{
HXLINE( 244)				return (int)-1;
            			}
            		}
HXLINE( 239)		return ((Float)0.);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(UnitStateBar_obj,MAINY,return )

Float UnitStateBar_obj::BARX( ::battle::enums::Team team){
            	HX_STACKFRAME(&_hx_pos_e3da43d7d1adc3c6_250_BARX)
HXDLIN( 250)		if (hx::IsEq( team,::battle::enums::Team_obj::Left_dyn() )) {
HXDLIN( 250)			return ((Float)3);
            		}
            		else {
HXDLIN( 250)			return ((::Main_obj::screenW - ((Float)3)) - ((Float)200));
            		}
HXDLIN( 250)		return ((Float)0.);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(UnitStateBar_obj,BARX,return )

Float UnitStateBar_obj::BARBOXX( ::battle::enums::Team team){
            	HX_STACKFRAME(&_hx_pos_e3da43d7d1adc3c6_254_BARBOXX)
HXLINE( 255)		Float a = ((::battle::vision::UnitStateBar_obj::BARX(::battle::enums::Team_obj::Left_dyn()) + ((Float)200)) + (int)2);
HXLINE( 256)		if (hx::IsEq( team,::battle::enums::Team_obj::Left_dyn() )) {
HXLINE( 256)			return a;
            		}
            		else {
HXLINE( 256)			return ((::Main_obj::screenW - a) - ((Float)71));
            		}
HXDLIN( 256)		return ((Float)0.);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(UnitStateBar_obj,BARBOXX,return )

Float UnitStateBar_obj::TEXTFIELDX( ::battle::enums::Team team, ::battle::vision::TextfieldType type){
            	HX_STACKFRAME(&_hx_pos_e3da43d7d1adc3c6_261_TEXTFIELDX)
HXDLIN( 261)		switch((int)(_hx_getEnumValueIndex(type))){
            			case (int)0: {
HXLINE( 263)				return ::battle::vision::UnitStateBar_obj::BARX(team);
            			}
            			break;
            			case (int)1: {
HXLINE( 264)				return ::battle::vision::UnitStateBar_obj::BARBOXX(team);
            			}
            			break;
            			case (int)2: {
HXLINE( 265)				return ::battle::vision::UnitStateBar_obj::BARBOXX(team);
            			}
            			break;
            		}
HXLINE( 261)		return ((Float)0.);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(UnitStateBar_obj,TEXTFIELDX,return )

Float UnitStateBar_obj::TEXTFIELDY(int pos, ::battle::vision::TextfieldType type){
            	HX_STACKFRAME(&_hx_pos_e3da43d7d1adc3c6_271_TEXTFIELDY)
HXDLIN( 271)		int _hx_tmp;
HXDLIN( 271)		if (hx::IsEq( type,::battle::vision::TextfieldType_obj::Mana_dyn() )) {
HXDLIN( 271)			_hx_tmp = ((Float)14);
            		}
            		else {
HXDLIN( 271)			_hx_tmp = (int)0;
            		}
HXDLIN( 271)		Float _hx_tmp1 = (_hx_tmp + ::battle::vision::UnitStateBar_obj::MAINY(pos));
HXDLIN( 271)		int _hx_tmp2;
HXDLIN( 271)		if (hx::IsEq( type,::battle::vision::TextfieldType_obj::Name_dyn() )) {
HXDLIN( 271)			_hx_tmp2 = (int)1;
            		}
            		else {
HXDLIN( 271)			_hx_tmp2 = (int)0;
            		}
HXDLIN( 271)		return (_hx_tmp1 - _hx_tmp2);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(UnitStateBar_obj,TEXTFIELDY,return )

Float UnitStateBar_obj::TEXTFIELDW( ::battle::vision::TextfieldType type){
            	HX_STACKFRAME(&_hx_pos_e3da43d7d1adc3c6_276_TEXTFIELDW)
HXDLIN( 276)		if (hx::IsEq( type,::battle::vision::TextfieldType_obj::Name_dyn() )) {
HXDLIN( 276)			return ((Float)200);
            		}
            		else {
HXDLIN( 276)			return ((Float)71);
            		}
HXDLIN( 276)		return ((Float)0.);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(UnitStateBar_obj,TEXTFIELDW,return )

Float UnitStateBar_obj::BARY(int pos, ::battle::vision::BarType type){
            	HX_STACKFRAME(&_hx_pos_e3da43d7d1adc3c6_281_BARY)
HXDLIN( 281)		int _hx_tmp;
HXDLIN( 281)		if (hx::IsEq( type,::battle::vision::BarType_obj::Mana_dyn() )) {
HXDLIN( 281)			_hx_tmp = ((Float)14);
            		}
            		else {
HXDLIN( 281)			_hx_tmp = (int)0;
            		}
HXDLIN( 281)		return (_hx_tmp + ::battle::vision::UnitStateBar_obj::MAINY(pos));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(UnitStateBar_obj,BARY,return )

Float UnitStateBar_obj::BUFFX( ::battle::enums::Team team,int n){
            	HX_STACKFRAME(&_hx_pos_e3da43d7d1adc3c6_285_BUFFX)
HXLINE( 286)		Float a = (::battle::vision::UnitStateBar_obj::BARBOXX(team) + ((Float)71));
HXDLIN( 286)		Float a1 = (a + (((Float)6) * (n + (int)1)));
HXDLIN( 286)		Float a2 = (a1 + (((Float)18) * n));
HXLINE( 288)		if (hx::IsEq( team,::battle::enums::Team_obj::Left_dyn() )) {
HXLINE( 288)			return a2;
            		}
            		else {
HXLINE( 288)			return ((::Main_obj::screenW - a2) - ((Float)18));
            		}
HXDLIN( 288)		return ((Float)0.);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(UnitStateBar_obj,BUFFX,return )

Float UnitStateBar_obj::BUFFY(int pos){
            	HX_STACKFRAME(&_hx_pos_e3da43d7d1adc3c6_293_BUFFY)
HXDLIN( 293)		return ::battle::vision::UnitStateBar_obj::MAINY(pos);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(UnitStateBar_obj,BUFFY,return )


hx::ObjectPtr< UnitStateBar_obj > UnitStateBar_obj::__new(::Array< ::Dynamic> allies,::Array< ::Dynamic> enemies,::Dynamic model) {
	hx::ObjectPtr< UnitStateBar_obj > __this = new UnitStateBar_obj();
	__this->__construct(allies,enemies,model);
	return __this;
}

hx::ObjectPtr< UnitStateBar_obj > UnitStateBar_obj::__alloc(hx::Ctx *_hx_ctx,::Array< ::Dynamic> allies,::Array< ::Dynamic> enemies,::Dynamic model) {
	UnitStateBar_obj *__this = (UnitStateBar_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(UnitStateBar_obj), true, "battle.vision.UnitStateBar"));
	*(void **)__this = UnitStateBar_obj::_hx_vtable;
	__this->__construct(allies,enemies,model);
	return __this;
}

UnitStateBar_obj::UnitStateBar_obj()
{
}

void UnitStateBar_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(UnitStateBar);
	HX_MARK_MEMBER_NAME(model,"model");
	HX_MARK_MEMBER_NAME(upperBar,"upperBar");
	HX_MARK_MEMBER_NAME(names,"names");
	HX_MARK_MEMBER_NAME(boxes,"boxes");
	HX_MARK_MEMBER_NAME(HPbars,"HPbars");
	HX_MARK_MEMBER_NAME(HPs,"HPs");
	HX_MARK_MEMBER_NAME(manas,"manas");
	HX_MARK_MEMBER_NAME(manaBars,"manaBars");
	HX_MARK_MEMBER_NAME(buffs,"buffs");
	 ::openfl::display::Sprite_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void UnitStateBar_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(model,"model");
	HX_VISIT_MEMBER_NAME(upperBar,"upperBar");
	HX_VISIT_MEMBER_NAME(names,"names");
	HX_VISIT_MEMBER_NAME(boxes,"boxes");
	HX_VISIT_MEMBER_NAME(HPbars,"HPbars");
	HX_VISIT_MEMBER_NAME(HPs,"HPs");
	HX_VISIT_MEMBER_NAME(manas,"manas");
	HX_VISIT_MEMBER_NAME(manaBars,"manaBars");
	HX_VISIT_MEMBER_NAME(buffs,"buffs");
	 ::openfl::display::Sprite_obj::__Visit(HX_VISIT_ARG);
}

hx::Val UnitStateBar_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"HPs") ) { return hx::Val( HPs ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"init") ) { return hx::Val( init_dyn() ); }
		if (HX_FIELD_EQ(inName,"tick") ) { return hx::Val( tick_dyn() ); }
		if (HX_FIELD_EQ(inName,"miss") ) { return hx::Val( miss_dyn() ); }
		if (HX_FIELD_EQ(inName,"warn") ) { return hx::Val( warn_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"model") ) { return hx::Val( model ); }
		if (HX_FIELD_EQ(inName,"names") ) { return hx::Val( names ); }
		if (HX_FIELD_EQ(inName,"boxes") ) { return hx::Val( boxes ); }
		if (HX_FIELD_EQ(inName,"manas") ) { return hx::Val( manas ); }
		if (HX_FIELD_EQ(inName,"buffs") ) { return hx::Val( buffs ); }
		if (HX_FIELD_EQ(inName,"death") ) { return hx::Val( death_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"HPbars") ) { return hx::Val( HPbars ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"preTick") ) { return hx::Val( preTick_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"upperBar") ) { return hx::Val( upperBar ); }
		if (HX_FIELD_EQ(inName,"manaBars") ) { return hx::Val( manaBars ); }
		if (HX_FIELD_EQ(inName,"createTF") ) { return hx::Val( createTF_dyn() ); }
		if (HX_FIELD_EQ(inName,"hpUpdate") ) { return hx::Val( hpUpdate_dyn() ); }
		if (HX_FIELD_EQ(inName,"abThrown") ) { return hx::Val( abThrown_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"abStriked") ) { return hx::Val( abStriked_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"manaUpdate") ) { return hx::Val( manaUpdate_dyn() ); }
		if (HX_FIELD_EQ(inName,"alacUpdate") ) { return hx::Val( alacUpdate_dyn() ); }
		if (HX_FIELD_EQ(inName,"abSelected") ) { return hx::Val( abSelected_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"abDeselected") ) { return hx::Val( abDeselected_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"buffQueueUpdate") ) { return hx::Val( buffQueueUpdate_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool UnitStateBar_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"xPos") ) { outValue = ( xPos ); return true; }
		if (HX_FIELD_EQ(inName,"yPos") ) { outValue = ( yPos ); return true; }
		if (HX_FIELD_EQ(inName,"BARX") ) { outValue = BARX_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"BARY") ) { outValue = BARY_dyn(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"MAINY") ) { outValue = MAINY_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"BUFFX") ) { outValue = BUFFX_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"BUFFY") ) { outValue = BUFFY_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"BARBOXX") ) { outValue = BARBOXX_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"TEXTFIELDX") ) { outValue = TEXTFIELDX_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"TEXTFIELDY") ) { outValue = TEXTFIELDY_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"TEXTFIELDW") ) { outValue = TEXTFIELDW_dyn(); return true; }
	}
	return false;
}

hx::Val UnitStateBar_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"HPs") ) { HPs=inValue.Cast<  ::battle::_hx_struct::UPair >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"model") ) { model=inValue.Cast< ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"names") ) { names=inValue.Cast<  ::battle::_hx_struct::UPair >(); return inValue; }
		if (HX_FIELD_EQ(inName,"boxes") ) { boxes=inValue.Cast<  ::battle::_hx_struct::UPair >(); return inValue; }
		if (HX_FIELD_EQ(inName,"manas") ) { manas=inValue.Cast<  ::battle::_hx_struct::UPair >(); return inValue; }
		if (HX_FIELD_EQ(inName,"buffs") ) { buffs=inValue.Cast<  ::battle::_hx_struct::UPair >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"HPbars") ) { HPbars=inValue.Cast<  ::battle::_hx_struct::UPair >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"upperBar") ) { upperBar=inValue.Cast<  ::openfl::display::DisplayObject >(); return inValue; }
		if (HX_FIELD_EQ(inName,"manaBars") ) { manaBars=inValue.Cast<  ::battle::_hx_struct::UPair >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool UnitStateBar_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"xPos") ) { xPos=ioValue.Cast< Float >(); return true; }
		if (HX_FIELD_EQ(inName,"yPos") ) { yPos=ioValue.Cast< Float >(); return true; }
	}
	return false;
}

void UnitStateBar_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("model","\xa9","\x23","\x58","\x0c"));
	outFields->push(HX_HCSTRING("upperBar","\x91","\xd9","\x6f","\x90"));
	outFields->push(HX_HCSTRING("names","\xc8","\x8f","\x84","\x96"));
	outFields->push(HX_HCSTRING("boxes","\x39","\xef","\xfe","\xb6"));
	outFields->push(HX_HCSTRING("HPbars","\x48","\x4a","\xd1","\x1a"));
	outFields->push(HX_HCSTRING("HPs","\x6b","\xe8","\x36","\x00"));
	outFields->push(HX_HCSTRING("manas","\x0c","\xba","\x1e","\x03"));
	outFields->push(HX_HCSTRING("manaBars","\x67","\x9f","\x26","\x1d"));
	outFields->push(HX_HCSTRING("buffs","\x40","\x8f","\xe8","\xba"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo UnitStateBar_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::battle::IObservableModel*/ ,(int)offsetof(UnitStateBar_obj,model),HX_HCSTRING("model","\xa9","\x23","\x58","\x0c")},
	{hx::fsObject /*::openfl::display::DisplayObject*/ ,(int)offsetof(UnitStateBar_obj,upperBar),HX_HCSTRING("upperBar","\x91","\xd9","\x6f","\x90")},
	{hx::fsObject /*::battle::_hx_struct::UPair*/ ,(int)offsetof(UnitStateBar_obj,names),HX_HCSTRING("names","\xc8","\x8f","\x84","\x96")},
	{hx::fsObject /*::battle::_hx_struct::UPair*/ ,(int)offsetof(UnitStateBar_obj,boxes),HX_HCSTRING("boxes","\x39","\xef","\xfe","\xb6")},
	{hx::fsObject /*::battle::_hx_struct::UPair*/ ,(int)offsetof(UnitStateBar_obj,HPbars),HX_HCSTRING("HPbars","\x48","\x4a","\xd1","\x1a")},
	{hx::fsObject /*::battle::_hx_struct::UPair*/ ,(int)offsetof(UnitStateBar_obj,HPs),HX_HCSTRING("HPs","\x6b","\xe8","\x36","\x00")},
	{hx::fsObject /*::battle::_hx_struct::UPair*/ ,(int)offsetof(UnitStateBar_obj,manas),HX_HCSTRING("manas","\x0c","\xba","\x1e","\x03")},
	{hx::fsObject /*::battle::_hx_struct::UPair*/ ,(int)offsetof(UnitStateBar_obj,manaBars),HX_HCSTRING("manaBars","\x67","\x9f","\x26","\x1d")},
	{hx::fsObject /*::battle::_hx_struct::UPair*/ ,(int)offsetof(UnitStateBar_obj,buffs),HX_HCSTRING("buffs","\x40","\x8f","\xe8","\xba")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo UnitStateBar_obj_sStaticStorageInfo[] = {
	{hx::fsFloat,(void *) &UnitStateBar_obj::xPos,HX_HCSTRING("xPos","\xfc","\xaf","\x8e","\x4f")},
	{hx::fsFloat,(void *) &UnitStateBar_obj::yPos,HX_HCSTRING("yPos","\x9b","\xe6","\x37","\x50")},
	{hx::fsFloat,(void *) &UnitStateBar_obj::XMAINOFFSET,HX_HCSTRING("XMAINOFFSET","\xe4","\x92","\xd5","\xbf")},
	{hx::fsFloat,(void *) &UnitStateBar_obj::BARW,HX_HCSTRING("BARW","\x44","\xaf","\xd1","\x2b")},
	{hx::fsFloat,(void *) &UnitStateBar_obj::BARH,HX_HCSTRING("BARH","\x35","\xaf","\xd1","\x2b")},
	{hx::fsFloat,(void *) &UnitStateBar_obj::BARBOXW,HX_HCSTRING("BARBOXW","\x3f","\xf7","\x72","\x18")},
	{hx::fsFloat,(void *) &UnitStateBar_obj::BARBOXH,HX_HCSTRING("BARBOXH","\x30","\xf7","\x72","\x18")},
	{hx::fsFloat,(void *) &UnitStateBar_obj::BUFFW,HX_HCSTRING("BUFFW","\x24","\xc7","\xd6","\x38")},
	{hx::fsFloat,(void *) &UnitStateBar_obj::BUFFH,HX_HCSTRING("BUFFH","\x15","\xc7","\xd6","\x38")},
	{hx::fsFloat,(void *) &UnitStateBar_obj::BUFFOFFSET,HX_HCSTRING("BUFFOFFSET","\xa6","\xb5","\xc6","\xb2")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String UnitStateBar_obj_sMemberFields[] = {
	HX_HCSTRING("model","\xa9","\x23","\x58","\x0c"),
	HX_HCSTRING("upperBar","\x91","\xd9","\x6f","\x90"),
	HX_HCSTRING("names","\xc8","\x8f","\x84","\x96"),
	HX_HCSTRING("boxes","\x39","\xef","\xfe","\xb6"),
	HX_HCSTRING("HPbars","\x48","\x4a","\xd1","\x1a"),
	HX_HCSTRING("HPs","\x6b","\xe8","\x36","\x00"),
	HX_HCSTRING("manas","\x0c","\xba","\x1e","\x03"),
	HX_HCSTRING("manaBars","\x67","\x9f","\x26","\x1d"),
	HX_HCSTRING("buffs","\x40","\x8f","\xe8","\xba"),
	HX_HCSTRING("init","\x10","\x3b","\xbb","\x45"),
	HX_HCSTRING("createTF","\x6e","\x67","\xf4","\x2b"),
	HX_HCSTRING("hpUpdate","\x31","\x4b","\x7c","\x29"),
	HX_HCSTRING("manaUpdate","\xf0","\xd5","\x16","\xde"),
	HX_HCSTRING("alacUpdate","\x76","\xdc","\x93","\x56"),
	HX_HCSTRING("buffQueueUpdate","\x67","\x13","\xc9","\x27"),
	HX_HCSTRING("preTick","\x20","\x9d","\x61","\x25"),
	HX_HCSTRING("tick","\x5d","\xc3","\xfc","\x4c"),
	HX_HCSTRING("miss","\xfc","\x52","\x5c","\x48"),
	HX_HCSTRING("death","\x34","\x8f","\x1e","\xd7"),
	HX_HCSTRING("abSelected","\x5c","\x84","\xc0","\x27"),
	HX_HCSTRING("abDeselected","\x1d","\x07","\x21","\x3d"),
	HX_HCSTRING("abThrown","\x49","\x4c","\xaa","\x5a"),
	HX_HCSTRING("abStriked","\x11","\xe7","\x0a","\x99"),
	HX_HCSTRING("warn","\x46","\x62","\xf2","\x4e"),
	::String(null()) };

static void UnitStateBar_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(UnitStateBar_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(UnitStateBar_obj::xPos,"xPos");
	HX_MARK_MEMBER_NAME(UnitStateBar_obj::yPos,"yPos");
	HX_MARK_MEMBER_NAME(UnitStateBar_obj::XMAINOFFSET,"XMAINOFFSET");
	HX_MARK_MEMBER_NAME(UnitStateBar_obj::BARW,"BARW");
	HX_MARK_MEMBER_NAME(UnitStateBar_obj::BARH,"BARH");
	HX_MARK_MEMBER_NAME(UnitStateBar_obj::BARBOXW,"BARBOXW");
	HX_MARK_MEMBER_NAME(UnitStateBar_obj::BARBOXH,"BARBOXH");
	HX_MARK_MEMBER_NAME(UnitStateBar_obj::BUFFW,"BUFFW");
	HX_MARK_MEMBER_NAME(UnitStateBar_obj::BUFFH,"BUFFH");
	HX_MARK_MEMBER_NAME(UnitStateBar_obj::BUFFOFFSET,"BUFFOFFSET");
};

#ifdef HXCPP_VISIT_ALLOCS
static void UnitStateBar_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(UnitStateBar_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(UnitStateBar_obj::xPos,"xPos");
	HX_VISIT_MEMBER_NAME(UnitStateBar_obj::yPos,"yPos");
	HX_VISIT_MEMBER_NAME(UnitStateBar_obj::XMAINOFFSET,"XMAINOFFSET");
	HX_VISIT_MEMBER_NAME(UnitStateBar_obj::BARW,"BARW");
	HX_VISIT_MEMBER_NAME(UnitStateBar_obj::BARH,"BARH");
	HX_VISIT_MEMBER_NAME(UnitStateBar_obj::BARBOXW,"BARBOXW");
	HX_VISIT_MEMBER_NAME(UnitStateBar_obj::BARBOXH,"BARBOXH");
	HX_VISIT_MEMBER_NAME(UnitStateBar_obj::BUFFW,"BUFFW");
	HX_VISIT_MEMBER_NAME(UnitStateBar_obj::BUFFH,"BUFFH");
	HX_VISIT_MEMBER_NAME(UnitStateBar_obj::BUFFOFFSET,"BUFFOFFSET");
};

#endif

hx::Class UnitStateBar_obj::__mClass;

static ::String UnitStateBar_obj_sStaticFields[] = {
	HX_HCSTRING("xPos","\xfc","\xaf","\x8e","\x4f"),
	HX_HCSTRING("yPos","\x9b","\xe6","\x37","\x50"),
	HX_HCSTRING("XMAINOFFSET","\xe4","\x92","\xd5","\xbf"),
	HX_HCSTRING("BARW","\x44","\xaf","\xd1","\x2b"),
	HX_HCSTRING("BARH","\x35","\xaf","\xd1","\x2b"),
	HX_HCSTRING("BARBOXW","\x3f","\xf7","\x72","\x18"),
	HX_HCSTRING("BARBOXH","\x30","\xf7","\x72","\x18"),
	HX_HCSTRING("BUFFW","\x24","\xc7","\xd6","\x38"),
	HX_HCSTRING("BUFFH","\x15","\xc7","\xd6","\x38"),
	HX_HCSTRING("BUFFOFFSET","\xa6","\xb5","\xc6","\xb2"),
	HX_HCSTRING("MAINY","\x00","\x32","\x09","\x81"),
	HX_HCSTRING("BARX","\x45","\xaf","\xd1","\x2b"),
	HX_HCSTRING("BARBOXX","\x40","\xf7","\x72","\x18"),
	HX_HCSTRING("TEXTFIELDX","\xeb","\x0e","\xf4","\x74"),
	HX_HCSTRING("TEXTFIELDY","\xec","\x0e","\xf4","\x74"),
	HX_HCSTRING("TEXTFIELDW","\xea","\x0e","\xf4","\x74"),
	HX_HCSTRING("BARY","\x46","\xaf","\xd1","\x2b"),
	HX_HCSTRING("BUFFX","\x25","\xc7","\xd6","\x38"),
	HX_HCSTRING("BUFFY","\x26","\xc7","\xd6","\x38"),
	::String(null())
};

void UnitStateBar_obj::__register()
{
	hx::Object *dummy = new UnitStateBar_obj;
	UnitStateBar_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("battle.vision.UnitStateBar","\x16","\xb9","\xfb","\x23");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &UnitStateBar_obj::__GetStatic;
	__mClass->mSetStaticField = &UnitStateBar_obj::__SetStatic;
	__mClass->mMarkFunc = UnitStateBar_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(UnitStateBar_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(UnitStateBar_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< UnitStateBar_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = UnitStateBar_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = UnitStateBar_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = UnitStateBar_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void UnitStateBar_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_e3da43d7d1adc3c6_44_boot)
HXDLIN(  44)		xPos = ((Float)0);
            	}
{
            	HX_STACKFRAME(&_hx_pos_e3da43d7d1adc3c6_45_boot)
HXDLIN(  45)		yPos = ((Float)0);
            	}
{
            	HX_STACKFRAME(&_hx_pos_e3da43d7d1adc3c6_227_boot)
HXDLIN( 227)		XMAINOFFSET = ((Float)3);
            	}
{
            	HX_STACKFRAME(&_hx_pos_e3da43d7d1adc3c6_229_boot)
HXDLIN( 229)		BARW = ((Float)200);
            	}
{
            	HX_STACKFRAME(&_hx_pos_e3da43d7d1adc3c6_230_boot)
HXDLIN( 230)		BARH = ((Float)14);
            	}
{
            	HX_STACKFRAME(&_hx_pos_e3da43d7d1adc3c6_231_boot)
HXDLIN( 231)		BARBOXW = ((Float)71);
            	}
{
            	HX_STACKFRAME(&_hx_pos_e3da43d7d1adc3c6_232_boot)
HXDLIN( 232)		BARBOXH = ((Float)28.);
            	}
{
            	HX_STACKFRAME(&_hx_pos_e3da43d7d1adc3c6_233_boot)
HXDLIN( 233)		BUFFW = ((Float)18);
            	}
{
            	HX_STACKFRAME(&_hx_pos_e3da43d7d1adc3c6_234_boot)
HXDLIN( 234)		BUFFH = ((Float)30);
            	}
{
            	HX_STACKFRAME(&_hx_pos_e3da43d7d1adc3c6_235_boot)
HXDLIN( 235)		BUFFOFFSET = ((Float)6);
            	}
}

} // end namespace battle
} // end namespace vision
