// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_BottomBattleBar
#include <BottomBattleBar.h>
#endif
#ifndef INCLUDED_Element
#include <Element.h>
#endif
#ifndef INCLUDED_ID
#include <ID.h>
#endif
#ifndef INCLUDED_LeaveBattle
#include <LeaveBattle.h>
#endif
#ifndef INCLUDED_SSprite
#include <SSprite.h>
#endif
#ifndef INCLUDED_SkipTurn
#include <SkipTurn.h>
#endif
#ifndef INCLUDED_battle_Ability
#include <battle/Ability.h>
#endif
#ifndef INCLUDED_battle_Buff
#include <battle/Buff.h>
#endif
#ifndef INCLUDED_battle_IModelObserver
#include <battle/IModelObserver.h>
#endif
#ifndef INCLUDED_battle_IObservableModel
#include <battle/IObservableModel.h>
#endif
#ifndef INCLUDED_battle_Unit
#include <battle/Unit.h>
#endif
#ifndef INCLUDED_battle_enums_AbilityType
#include <battle/enums/AbilityType.h>
#endif
#ifndef INCLUDED_battle_enums_Source
#include <battle/enums/Source.h>
#endif
#ifndef INCLUDED_battle_enums_StrikeType
#include <battle/enums/StrikeType.h>
#endif
#ifndef INCLUDED_battle_enums_Team
#include <battle/enums/Team.h>
#endif
#ifndef INCLUDED_battle_struct_UnitCoords
#include <battle/struct/UnitCoords.h>
#endif
#ifndef INCLUDED_battle_struct_Wheel
#include <battle/struct/Wheel.h>
#endif
#ifndef INCLUDED_battle_vision_AbilityBar
#include <battle/vision/AbilityBar.h>
#endif
#ifndef INCLUDED_battle_vision_AbilityCell
#include <battle/vision/AbilityCell.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_MovieClip
#include <openfl/display/MovieClip.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_MouseEvent
#include <openfl/events/MouseEvent.h>
#endif
#ifndef INCLUDED_openfl_filters_BitmapFilter
#include <openfl/filters/BitmapFilter.h>
#endif
#ifndef INCLUDED_openfl_filters_GlowFilter
#include <openfl/filters/GlowFilter.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_7889a837201f5c0f_34_new,"battle.vision.AbilityBar","new",0x0fae8deb,"battle.vision.AbilityBar.new","battle/vision/AbilityBar.hx",34,0x9d2b91c5)
HX_LOCAL_STACK_FRAME(_hx_pos_7889a837201f5c0f_46_init,"battle.vision.AbilityBar","init",0xa5c65725,"battle.vision.AbilityBar.init","battle/vision/AbilityBar.hx",46,0x9d2b91c5)
HX_LOCAL_STACK_FRAME(_hx_pos_7889a837201f5c0f_64_preTick,"battle.vision.AbilityBar","preTick",0xae117c2b,"battle.vision.AbilityBar.preTick","battle/vision/AbilityBar.hx",64,0x9d2b91c5)
HX_LOCAL_STACK_FRAME(_hx_pos_7889a837201f5c0f_70_tick,"battle.vision.AbilityBar","tick",0xad07df72,"battle.vision.AbilityBar.tick","battle/vision/AbilityBar.hx",70,0x9d2b91c5)
HX_LOCAL_STACK_FRAME(_hx_pos_7889a837201f5c0f_77_abThrown,"battle.vision.AbilityBar","abThrown",0x6bdd96de,"battle.vision.AbilityBar.abThrown","battle/vision/AbilityBar.hx",77,0x9d2b91c5)
HX_LOCAL_STACK_FRAME(_hx_pos_7889a837201f5c0f_89_skipHandler,"battle.vision.AbilityBar","skipHandler",0x9e3adf96,"battle.vision.AbilityBar.skipHandler","battle/vision/AbilityBar.hx",89,0x9d2b91c5)
HX_LOCAL_STACK_FRAME(_hx_pos_7889a837201f5c0f_94_leaveHandler,"battle.vision.AbilityBar","leaveHandler",0xe862f8a8,"battle.vision.AbilityBar.leaveHandler","battle/vision/AbilityBar.hx",94,0x9d2b91c5)
HX_LOCAL_STACK_FRAME(_hx_pos_7889a837201f5c0f_100_hpUpdate,"battle.vision.AbilityBar","hpUpdate",0x3aaf95c6,"battle.vision.AbilityBar.hpUpdate","battle/vision/AbilityBar.hx",100,0x9d2b91c5)
HX_LOCAL_STACK_FRAME(_hx_pos_7889a837201f5c0f_105_manaUpdate,"battle.vision.AbilityBar","manaUpdate",0x1aa1afc5,"battle.vision.AbilityBar.manaUpdate","battle/vision/AbilityBar.hx",105,0x9d2b91c5)
HX_LOCAL_STACK_FRAME(_hx_pos_7889a837201f5c0f_110_alacUpdate,"battle.vision.AbilityBar","alacUpdate",0x931eb64b,"battle.vision.AbilityBar.alacUpdate","battle/vision/AbilityBar.hx",110,0x9d2b91c5)
HX_LOCAL_STACK_FRAME(_hx_pos_7889a837201f5c0f_115_buffQueueUpdate,"battle.vision.AbilityBar","buffQueueUpdate",0xd24f7572,"battle.vision.AbilityBar.buffQueueUpdate","battle/vision/AbilityBar.hx",115,0x9d2b91c5)
HX_LOCAL_STACK_FRAME(_hx_pos_7889a837201f5c0f_120_miss,"battle.vision.AbilityBar","miss",0xa8676f11,"battle.vision.AbilityBar.miss","battle/vision/AbilityBar.hx",120,0x9d2b91c5)
HX_LOCAL_STACK_FRAME(_hx_pos_7889a837201f5c0f_125_death,"battle.vision.AbilityBar","death",0x80cc057f,"battle.vision.AbilityBar.death","battle/vision/AbilityBar.hx",125,0x9d2b91c5)
HX_LOCAL_STACK_FRAME(_hx_pos_7889a837201f5c0f_131_abSelected,"battle.vision.AbilityBar","abSelected",0x644b5e31,"battle.vision.AbilityBar.abSelected","battle/vision/AbilityBar.hx",131,0x9d2b91c5)
HX_LOCAL_STACK_FRAME(_hx_pos_7889a837201f5c0f_136_abDeselected,"battle.vision.AbilityBar","abDeselected",0xd575c032,"battle.vision.AbilityBar.abDeselected","battle/vision/AbilityBar.hx",136,0x9d2b91c5)
HX_LOCAL_STACK_FRAME(_hx_pos_7889a837201f5c0f_141_abStriked,"battle.vision.AbilityBar","abStriked",0x94b8dedc,"battle.vision.AbilityBar.abStriked","battle/vision/AbilityBar.hx",141,0x9d2b91c5)
HX_LOCAL_STACK_FRAME(_hx_pos_7889a837201f5c0f_145_warn,"battle.vision.AbilityBar","warn",0xaefd7e5b,"battle.vision.AbilityBar.warn","battle/vision/AbilityBar.hx",145,0x9d2b91c5)
HX_LOCAL_STACK_FRAME(_hx_pos_7889a837201f5c0f_60_abilityX,"battle.vision.AbilityBar","abilityX",0x19075e03,"battle.vision.AbilityBar.abilityX","battle/vision/AbilityBar.hx",60,0x9d2b91c5)
namespace battle{
namespace vision{

void AbilityBar_obj::__construct( ::battle::Unit player,::Dynamic model){
            	HX_GC_STACKFRAME(&_hx_pos_7889a837201f5c0f_34_new)
HXLINE(  35)		super::__construct();
HXLINE(  36)		this->model = model;
HXLINE(  38)		this->bottomBar =  ::BottomBattleBar_obj::__alloc( HX_CTX );
HXLINE(  39)		this->skipTurn =  ::SkipTurn_obj::__alloc( HX_CTX );
HXLINE(  40)		this->leaveBattle =  ::LeaveBattle_obj::__alloc( HX_CTX );
HXLINE(  41)		::Array< ::Dynamic> _g = ::Array_obj< ::Dynamic>::__new(0);
HXDLIN(  41)		{
HXLINE(  41)			int _g1 = (int)0;
HXDLIN(  41)			while((_g1 < (int)10)){
HXLINE(  41)				_g1 = (_g1 + (int)1);
HXDLIN(  41)				int i = (_g1 - (int)1);
HXDLIN(  41)				_g->push(player->wheel->get(i));
            			}
            		}
HXDLIN(  41)		this->abs = _g;
HXLINE(  42)		::Array< ::Dynamic> _g11 = ::Array_obj< ::Dynamic>::__new(0);
HXDLIN(  42)		{
HXLINE(  42)			int _g2 = (int)0;
HXDLIN(  42)			while((_g2 < (int)10)){
HXLINE(  42)				_g2 = (_g2 + (int)1);
HXDLIN(  42)				int i1 = (_g2 - (int)1);
HXDLIN(  42)				 ::battle::Ability _hx_tmp = this->abs->__get(i1).StaticCast<  ::battle::Ability >();
HXDLIN(  42)				_g11->push( ::battle::vision::AbilityCell_obj::__alloc( HX_CTX ,_hx_tmp,(HX_("",00,00,00,00) + (i1 + (int)1))));
            			}
            		}
HXDLIN(  42)		this->abilitiesVision = _g11;
            	}

Dynamic AbilityBar_obj::__CreateEmpty() { return new AbilityBar_obj; }

void *AbilityBar_obj::_hx_vtable = 0;

Dynamic AbilityBar_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< AbilityBar_obj > _hx_result = new AbilityBar_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool AbilityBar_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x1b123bf8) {
		if (inClassId<=(int)0x17120186) {
			if (inClassId<=(int)0x0ddfced7) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0ddfced7;
			} else {
				return inClassId==(int)0x17120186;
			}
		} else {
			return inClassId==(int)0x19c29573 || inClassId==(int)0x1b123bf8;
		}
	} else {
		if (inClassId<=(int)0x3f2b00af) {
			return inClassId==(int)0x1bb4e66d || inClassId==(int)0x3f2b00af;
		} else {
			return inClassId==(int)0x739fd0b8;
		}
	}
}

static ::battle::IModelObserver_obj _hx_battle_vision_AbilityBar__hx_battle_IModelObserver= {
	( void (hx::Object::*)( ::battle::Unit, ::battle::Unit,int, ::Element,bool, ::battle::enums::Source))&::battle::vision::AbilityBar_obj::hpUpdate,
	( void (hx::Object::*)( ::battle::Unit,int, ::battle::enums::Source))&::battle::vision::AbilityBar_obj::manaUpdate,
	( void (hx::Object::*)( ::battle::Unit,Float, ::battle::enums::Source))&::battle::vision::AbilityBar_obj::alacUpdate,
	( void (hx::Object::*)( ::battle::_hx_struct::UnitCoords,::Array< ::Dynamic>))&::battle::vision::AbilityBar_obj::buffQueueUpdate,
	( void (hx::Object::*)( ::battle::Unit))&::battle::vision::AbilityBar_obj::preTick,
	( void (hx::Object::*)( ::battle::Unit))&::battle::vision::AbilityBar_obj::tick,
	( void (hx::Object::*)( ::battle::_hx_struct::UnitCoords, ::Element))&::battle::vision::AbilityBar_obj::miss,
	( void (hx::Object::*)( ::battle::_hx_struct::UnitCoords))&::battle::vision::AbilityBar_obj::death,
	( void (hx::Object::*)(int))&::battle::vision::AbilityBar_obj::abSelected,
	( void (hx::Object::*)(int))&::battle::vision::AbilityBar_obj::abDeselected,
	( void (hx::Object::*)( ::battle::_hx_struct::UnitCoords, ::battle::_hx_struct::UnitCoords, ::ID, ::battle::enums::StrikeType, ::Element))&::battle::vision::AbilityBar_obj::abThrown,
	( void (hx::Object::*)( ::battle::_hx_struct::UnitCoords, ::battle::_hx_struct::UnitCoords, ::ID, ::battle::enums::StrikeType, ::Element))&::battle::vision::AbilityBar_obj::abStriked,
	( void (hx::Object::*)(::String))&::battle::vision::AbilityBar_obj::warn,
};

void *AbilityBar_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0x2826bace: return &_hx_battle_vision_AbilityBar__hx_battle_IModelObserver;
	}
	return super::_hx_getInterface(inHash);
}

void AbilityBar_obj::init(){
            	HX_STACKFRAME(&_hx_pos_7889a837201f5c0f_46_init)
HXLINE(  47)		this->add(this->bottomBar,((Float)4.85),(int)0);
HXLINE(  48)		this->add(this->skipTurn,(int)766,(int)21);
HXLINE(  49)		this->add(this->leaveBattle,(int)830,(int)21);
HXLINE(  51)		{
HXLINE(  51)			int _g = (int)0;
HXDLIN(  51)			while((_g < (int)10)){
HXLINE(  51)				_g = (_g + (int)1);
HXDLIN(  51)				int i = (_g - (int)1);
HXLINE(  52)				this->add(this->abilitiesVision->__get(i).StaticCast<  ::battle::vision::AbilityCell >(),((int)15 + (i * (int)70)),(int)17);
            			}
            		}
HXLINE(  54)		this->skipTurn->addEventListener(HX_("click",48,7c,5e,48),this->skipHandler_dyn(),null(),null(),null());
HXLINE(  55)		this->leaveBattle->addEventListener(HX_("click",48,7c,5e,48),this->leaveHandler_dyn(),null(),null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(AbilityBar_obj,init,(void))

void AbilityBar_obj::preTick( ::battle::Unit current){
            	HX_STACKFRAME(&_hx_pos_7889a837201f5c0f_64_preTick)
            	}


HX_DEFINE_DYNAMIC_FUNC1(AbilityBar_obj,preTick,(void))

void AbilityBar_obj::tick( ::battle::Unit current){
            	HX_STACKFRAME(&_hx_pos_7889a837201f5c0f_70_tick)
HXDLIN(  70)		bool _hx_tmp;
HXDLIN(  70)		if (hx::IsEq( current->team,::battle::enums::Team_obj::Left_dyn() )) {
HXDLIN(  70)			_hx_tmp = (current->position == (int)0);
            		}
            		else {
HXDLIN(  70)			_hx_tmp = false;
            		}
HXDLIN(  70)		if (_hx_tmp) {
HXLINE(  71)			int _g = (int)1;
HXDLIN(  71)			while((_g < (int)10)){
HXLINE(  71)				_g = (_g + (int)1);
HXDLIN(  71)				int i = (_g - (int)1);
HXLINE(  72)				bool _hx_tmp1;
HXDLIN(  72)				 ::battle::Ability _this = this->abs->__get(i).StaticCast<  ::battle::Ability >();
HXDLIN(  72)				bool _hx_tmp2;
HXDLIN(  72)				if (hx::IsNotEq( _this->id,::ID_obj::EmptyAbility_dyn() )) {
HXLINE(  72)					_hx_tmp2 = hx::IsEq( _this->id,::ID_obj::LockAbility_dyn() );
            				}
            				else {
HXLINE(  72)					_hx_tmp2 = true;
            				}
HXDLIN(  72)				if (!(_hx_tmp2)) {
HXLINE(  72)					_hx_tmp1 = hx::IsEq( this->abs->__get(i).StaticCast<  ::battle::Ability >()->type,::battle::enums::AbilityType_obj::Active_dyn() );
            				}
            				else {
HXLINE(  72)					_hx_tmp1 = false;
            				}
HXDLIN(  72)				if (_hx_tmp1) {
HXLINE(  73)					this->abilitiesVision->__get(i).StaticCast<  ::battle::vision::AbilityCell >()->decrementCooldown();
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(AbilityBar_obj,tick,(void))

void AbilityBar_obj::abThrown( ::battle::_hx_struct::UnitCoords target, ::battle::_hx_struct::UnitCoords caster, ::ID id, ::battle::enums::StrikeType type, ::Element element){
            	HX_STACKFRAME(&_hx_pos_7889a837201f5c0f_77_abThrown)
HXLINE(  78)		{
HXLINE(  78)			int _g1 = (int)0;
HXDLIN(  78)			int _g = this->abs->length;
HXDLIN(  78)			while((_g1 < _g)){
HXLINE(  78)				_g1 = (_g1 + (int)1);
HXDLIN(  78)				int i = (_g1 - (int)1);
HXLINE(  79)				if (hx::IsEq( this->abs->__get(i).StaticCast<  ::battle::Ability >()->id,id )) {
HXLINE(  81)					this->abilitiesVision->__get(i).StaticCast<  ::battle::vision::AbilityCell >()->updateCooldown();
HXLINE(  82)					goto _hx_goto_8;
            				}
            			}
            			_hx_goto_8:;
            		}
HXLINE(  84)		::battle::IObservableModel_obj::respond(this->model);
            	}


HX_DEFINE_DYNAMIC_FUNC5(AbilityBar_obj,abThrown,(void))

void AbilityBar_obj::skipHandler( ::openfl::events::MouseEvent e){
            	HX_STACKFRAME(&_hx_pos_7889a837201f5c0f_89_skipHandler)
HXDLIN(  89)		::battle::IObservableModel_obj::skipTurn(this->model);
            	}


HX_DEFINE_DYNAMIC_FUNC1(AbilityBar_obj,skipHandler,(void))

void AbilityBar_obj::leaveHandler( ::openfl::events::MouseEvent e){
            	HX_STACKFRAME(&_hx_pos_7889a837201f5c0f_94_leaveHandler)
HXDLIN(  94)		::battle::IObservableModel_obj::quit(this->model);
            	}


HX_DEFINE_DYNAMIC_FUNC1(AbilityBar_obj,leaveHandler,(void))

void AbilityBar_obj::hpUpdate( ::battle::Unit target, ::battle::Unit caster,int dhp, ::Element element,bool crit, ::battle::enums::Source source){
            	HX_STACKFRAME(&_hx_pos_7889a837201f5c0f_100_hpUpdate)
            	}


HX_DEFINE_DYNAMIC_FUNC6(AbilityBar_obj,hpUpdate,(void))

void AbilityBar_obj::manaUpdate( ::battle::Unit target,int dmana, ::battle::enums::Source source){
            	HX_STACKFRAME(&_hx_pos_7889a837201f5c0f_105_manaUpdate)
            	}


HX_DEFINE_DYNAMIC_FUNC3(AbilityBar_obj,manaUpdate,(void))

void AbilityBar_obj::alacUpdate( ::battle::Unit unit,Float dalac, ::battle::enums::Source source){
            	HX_STACKFRAME(&_hx_pos_7889a837201f5c0f_110_alacUpdate)
            	}


HX_DEFINE_DYNAMIC_FUNC3(AbilityBar_obj,alacUpdate,(void))

void AbilityBar_obj::buffQueueUpdate( ::battle::_hx_struct::UnitCoords unit,::Array< ::Dynamic> queue){
            	HX_STACKFRAME(&_hx_pos_7889a837201f5c0f_115_buffQueueUpdate)
            	}


HX_DEFINE_DYNAMIC_FUNC2(AbilityBar_obj,buffQueueUpdate,(void))

void AbilityBar_obj::miss( ::battle::_hx_struct::UnitCoords target, ::Element element){
            	HX_STACKFRAME(&_hx_pos_7889a837201f5c0f_120_miss)
            	}


HX_DEFINE_DYNAMIC_FUNC2(AbilityBar_obj,miss,(void))

void AbilityBar_obj::death( ::battle::_hx_struct::UnitCoords unit){
            	HX_STACKFRAME(&_hx_pos_7889a837201f5c0f_125_death)
            	}


HX_DEFINE_DYNAMIC_FUNC1(AbilityBar_obj,death,(void))

void AbilityBar_obj::abSelected(int num){
            	HX_GC_STACKFRAME(&_hx_pos_7889a837201f5c0f_131_abSelected)
HXDLIN( 131)		 ::battle::vision::AbilityCell _hx_tmp = this->abilitiesVision->__get(num).StaticCast<  ::battle::vision::AbilityCell >();
HXDLIN( 131)		_hx_tmp->set_filters(::Array_obj< ::Dynamic>::__new(1)->init(0, ::openfl::filters::GlowFilter_obj::__alloc( HX_CTX ,(int)4718090,(int)1,(int)20,(int)20,(int)2,(int)1,true,null())));
            	}


HX_DEFINE_DYNAMIC_FUNC1(AbilityBar_obj,abSelected,(void))

void AbilityBar_obj::abDeselected(int num){
            	HX_STACKFRAME(&_hx_pos_7889a837201f5c0f_136_abDeselected)
HXDLIN( 136)		this->abilitiesVision->__get(num).StaticCast<  ::battle::vision::AbilityCell >()->set_filters(::Array_obj< ::Dynamic>::__new(0));
            	}


HX_DEFINE_DYNAMIC_FUNC1(AbilityBar_obj,abDeselected,(void))

void AbilityBar_obj::abStriked( ::battle::_hx_struct::UnitCoords target, ::battle::_hx_struct::UnitCoords caster, ::ID id, ::battle::enums::StrikeType type, ::Element element){
            	HX_STACKFRAME(&_hx_pos_7889a837201f5c0f_141_abStriked)
HXDLIN( 141)		::battle::IObservableModel_obj::respond(this->model);
            	}


HX_DEFINE_DYNAMIC_FUNC5(AbilityBar_obj,abStriked,(void))

void AbilityBar_obj::warn(::String text){
            	HX_STACKFRAME(&_hx_pos_7889a837201f5c0f_145_warn)
            	}


HX_DEFINE_DYNAMIC_FUNC1(AbilityBar_obj,warn,(void))

Float AbilityBar_obj::abilityX(int i){
            	HX_STACKFRAME(&_hx_pos_7889a837201f5c0f_60_abilityX)
HXDLIN(  60)		return ((int)15 + (i * (int)70));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(AbilityBar_obj,abilityX,return )


hx::ObjectPtr< AbilityBar_obj > AbilityBar_obj::__new( ::battle::Unit player,::Dynamic model) {
	hx::ObjectPtr< AbilityBar_obj > __this = new AbilityBar_obj();
	__this->__construct(player,model);
	return __this;
}

hx::ObjectPtr< AbilityBar_obj > AbilityBar_obj::__alloc(hx::Ctx *_hx_ctx, ::battle::Unit player,::Dynamic model) {
	AbilityBar_obj *__this = (AbilityBar_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(AbilityBar_obj), true, "battle.vision.AbilityBar"));
	*(void **)__this = AbilityBar_obj::_hx_vtable;
	__this->__construct(player,model);
	return __this;
}

AbilityBar_obj::AbilityBar_obj()
{
}

void AbilityBar_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(AbilityBar);
	HX_MARK_MEMBER_NAME(model,"model");
	HX_MARK_MEMBER_NAME(bottomBar,"bottomBar");
	HX_MARK_MEMBER_NAME(skipTurn,"skipTurn");
	HX_MARK_MEMBER_NAME(leaveBattle,"leaveBattle");
	HX_MARK_MEMBER_NAME(abs,"abs");
	HX_MARK_MEMBER_NAME(abilitiesVision,"abilitiesVision");
	 ::openfl::display::Sprite_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void AbilityBar_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(model,"model");
	HX_VISIT_MEMBER_NAME(bottomBar,"bottomBar");
	HX_VISIT_MEMBER_NAME(skipTurn,"skipTurn");
	HX_VISIT_MEMBER_NAME(leaveBattle,"leaveBattle");
	HX_VISIT_MEMBER_NAME(abs,"abs");
	HX_VISIT_MEMBER_NAME(abilitiesVision,"abilitiesVision");
	 ::openfl::display::Sprite_obj::__Visit(HX_VISIT_ARG);
}

hx::Val AbilityBar_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"abs") ) { return hx::Val( abs ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"init") ) { return hx::Val( init_dyn() ); }
		if (HX_FIELD_EQ(inName,"tick") ) { return hx::Val( tick_dyn() ); }
		if (HX_FIELD_EQ(inName,"miss") ) { return hx::Val( miss_dyn() ); }
		if (HX_FIELD_EQ(inName,"warn") ) { return hx::Val( warn_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"model") ) { return hx::Val( model ); }
		if (HX_FIELD_EQ(inName,"death") ) { return hx::Val( death_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"preTick") ) { return hx::Val( preTick_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"skipTurn") ) { return hx::Val( skipTurn ); }
		if (HX_FIELD_EQ(inName,"abThrown") ) { return hx::Val( abThrown_dyn() ); }
		if (HX_FIELD_EQ(inName,"hpUpdate") ) { return hx::Val( hpUpdate_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"bottomBar") ) { return hx::Val( bottomBar ); }
		if (HX_FIELD_EQ(inName,"abStriked") ) { return hx::Val( abStriked_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"manaUpdate") ) { return hx::Val( manaUpdate_dyn() ); }
		if (HX_FIELD_EQ(inName,"alacUpdate") ) { return hx::Val( alacUpdate_dyn() ); }
		if (HX_FIELD_EQ(inName,"abSelected") ) { return hx::Val( abSelected_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"leaveBattle") ) { return hx::Val( leaveBattle ); }
		if (HX_FIELD_EQ(inName,"skipHandler") ) { return hx::Val( skipHandler_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"leaveHandler") ) { return hx::Val( leaveHandler_dyn() ); }
		if (HX_FIELD_EQ(inName,"abDeselected") ) { return hx::Val( abDeselected_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"abilitiesVision") ) { return hx::Val( abilitiesVision ); }
		if (HX_FIELD_EQ(inName,"buffQueueUpdate") ) { return hx::Val( buffQueueUpdate_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool AbilityBar_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"abilityX") ) { outValue = abilityX_dyn(); return true; }
	}
	return false;
}

hx::Val AbilityBar_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"abs") ) { abs=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"model") ) { model=inValue.Cast< ::Dynamic >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"skipTurn") ) { skipTurn=inValue.Cast<  ::openfl::display::DisplayObject >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"bottomBar") ) { bottomBar=inValue.Cast<  ::openfl::display::DisplayObject >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"leaveBattle") ) { leaveBattle=inValue.Cast<  ::openfl::display::DisplayObject >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"abilitiesVision") ) { abilitiesVision=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void AbilityBar_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("model","\xa9","\x23","\x58","\x0c"));
	outFields->push(HX_HCSTRING("bottomBar","\xa8","\x67","\x22","\xf8"));
	outFields->push(HX_HCSTRING("skipTurn","\x9c","\xd9","\x5a","\xc3"));
	outFields->push(HX_HCSTRING("leaveBattle","\x8f","\x01","\x59","\x78"));
	outFields->push(HX_HCSTRING("abs","\x72","\xf0","\x49","\x00"));
	outFields->push(HX_HCSTRING("abilitiesVision","\x90","\x72","\x86","\x37"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo AbilityBar_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::battle::IObservableModel*/ ,(int)offsetof(AbilityBar_obj,model),HX_HCSTRING("model","\xa9","\x23","\x58","\x0c")},
	{hx::fsObject /*::openfl::display::DisplayObject*/ ,(int)offsetof(AbilityBar_obj,bottomBar),HX_HCSTRING("bottomBar","\xa8","\x67","\x22","\xf8")},
	{hx::fsObject /*::openfl::display::DisplayObject*/ ,(int)offsetof(AbilityBar_obj,skipTurn),HX_HCSTRING("skipTurn","\x9c","\xd9","\x5a","\xc3")},
	{hx::fsObject /*::openfl::display::DisplayObject*/ ,(int)offsetof(AbilityBar_obj,leaveBattle),HX_HCSTRING("leaveBattle","\x8f","\x01","\x59","\x78")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(AbilityBar_obj,abs),HX_HCSTRING("abs","\x72","\xf0","\x49","\x00")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(AbilityBar_obj,abilitiesVision),HX_HCSTRING("abilitiesVision","\x90","\x72","\x86","\x37")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *AbilityBar_obj_sStaticStorageInfo = 0;
#endif

static ::String AbilityBar_obj_sMemberFields[] = {
	HX_HCSTRING("model","\xa9","\x23","\x58","\x0c"),
	HX_HCSTRING("bottomBar","\xa8","\x67","\x22","\xf8"),
	HX_HCSTRING("skipTurn","\x9c","\xd9","\x5a","\xc3"),
	HX_HCSTRING("leaveBattle","\x8f","\x01","\x59","\x78"),
	HX_HCSTRING("abs","\x72","\xf0","\x49","\x00"),
	HX_HCSTRING("abilitiesVision","\x90","\x72","\x86","\x37"),
	HX_HCSTRING("init","\x10","\x3b","\xbb","\x45"),
	HX_HCSTRING("preTick","\x20","\x9d","\x61","\x25"),
	HX_HCSTRING("tick","\x5d","\xc3","\xfc","\x4c"),
	HX_HCSTRING("abThrown","\x49","\x4c","\xaa","\x5a"),
	HX_HCSTRING("skipHandler","\x0b","\x1f","\x47","\xe1"),
	HX_HCSTRING("leaveHandler","\x93","\x3f","\x0e","\x50"),
	HX_HCSTRING("hpUpdate","\x31","\x4b","\x7c","\x29"),
	HX_HCSTRING("manaUpdate","\xf0","\xd5","\x16","\xde"),
	HX_HCSTRING("alacUpdate","\x76","\xdc","\x93","\x56"),
	HX_HCSTRING("buffQueueUpdate","\x67","\x13","\xc9","\x27"),
	HX_HCSTRING("miss","\xfc","\x52","\x5c","\x48"),
	HX_HCSTRING("death","\x34","\x8f","\x1e","\xd7"),
	HX_HCSTRING("abSelected","\x5c","\x84","\xc0","\x27"),
	HX_HCSTRING("abDeselected","\x1d","\x07","\x21","\x3d"),
	HX_HCSTRING("abStriked","\x11","\xe7","\x0a","\x99"),
	HX_HCSTRING("warn","\x46","\x62","\xf2","\x4e"),
	::String(null()) };

static void AbilityBar_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(AbilityBar_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void AbilityBar_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(AbilityBar_obj::__mClass,"__mClass");
};

#endif

hx::Class AbilityBar_obj::__mClass;

static ::String AbilityBar_obj_sStaticFields[] = {
	HX_HCSTRING("abilityX","\x6e","\x13","\xd4","\x07"),
	::String(null())
};

void AbilityBar_obj::__register()
{
	hx::Object *dummy = new AbilityBar_obj;
	AbilityBar_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("battle.vision.AbilityBar","\x79","\xbc","\x68","\x9c");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &AbilityBar_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = AbilityBar_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(AbilityBar_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(AbilityBar_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< AbilityBar_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = AbilityBar_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = AbilityBar_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = AbilityBar_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace battle
} // end namespace vision
