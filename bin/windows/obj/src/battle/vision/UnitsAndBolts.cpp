// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Assets
#include <Assets.h>
#endif
#ifndef INCLUDED_Element
#include <Element.h>
#endif
#ifndef INCLUDED_ID
#include <ID.h>
#endif
#ifndef INCLUDED_Lambda
#include <Lambda.h>
#endif
#ifndef INCLUDED_Main
#include <Main.h>
#endif
#ifndef INCLUDED_Reflect
#include <Reflect.h>
#endif
#ifndef INCLUDED_SSprite
#include <SSprite.h>
#endif
#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_battle_Buff
#include <battle/Buff.h>
#endif
#ifndef INCLUDED_battle_IModelObserver
#include <battle/IModelObserver.h>
#endif
#ifndef INCLUDED_battle_IObservableModel
#include <battle/IObservableModel.h>
#endif
#ifndef INCLUDED_battle_Unit
#include <battle/Unit.h>
#endif
#ifndef INCLUDED_battle_enums_InputMode
#include <battle/enums/InputMode.h>
#endif
#ifndef INCLUDED_battle_enums_Source
#include <battle/enums/Source.h>
#endif
#ifndef INCLUDED_battle_enums_StrikeType
#include <battle/enums/StrikeType.h>
#endif
#ifndef INCLUDED_battle_enums_Team
#include <battle/enums/Team.h>
#endif
#ifndef INCLUDED_battle_struct_FloatPool
#include <battle/struct/FloatPool.h>
#endif
#ifndef INCLUDED_battle_struct_UPair
#include <battle/struct/UPair.h>
#endif
#ifndef INCLUDED_battle_struct_UnitCoords
#include <battle/struct/UnitCoords.h>
#endif
#ifndef INCLUDED_battle_vision_UnitsAndBolts
#include <battle/vision/UnitsAndBolts.h>
#endif
#ifndef INCLUDED_graphic_Fonts
#include <graphic/Fonts.h>
#endif
#ifndef INCLUDED_graphic_ProgressBar
#include <graphic/ProgressBar.h>
#endif
#ifndef INCLUDED_haxe_Timer
#include <haxe/Timer.h>
#endif
#ifndef INCLUDED_lime_app_IModule
#include <lime/app/IModule.h>
#endif
#ifndef INCLUDED_motion_Actuate
#include <motion/Actuate.h>
#endif
#ifndef INCLUDED_motion_actuators_GenericActuator
#include <motion/actuators/GenericActuator.h>
#endif
#ifndef INCLUDED_motion_actuators_IGenericActuator
#include <motion/actuators/IGenericActuator.h>
#endif
#ifndef INCLUDED_motion_easing_Cubic
#include <motion/easing/Cubic.h>
#endif
#ifndef INCLUDED_motion_easing_IEasing
#include <motion/easing/IEasing.h>
#endif
#ifndef INCLUDED_motion_easing_Quad
#include <motion/easing/Quad.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_MovieClip
#include <openfl/display/MovieClip.h>
#endif
#ifndef INCLUDED_openfl_display_Shape
#include <openfl/display/Shape.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_display_Stage
#include <openfl/display/Stage.h>
#endif
#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_MouseEvent
#include <openfl/events/MouseEvent.h>
#endif
#ifndef INCLUDED_openfl_filters_BitmapFilter
#include <openfl/filters/BitmapFilter.h>
#endif
#ifndef INCLUDED_openfl_filters_DropShadowFilter
#include <openfl/filters/DropShadowFilter.h>
#endif
#ifndef INCLUDED_openfl_filters_GlowFilter
#include <openfl/filters/GlowFilter.h>
#endif
#ifndef INCLUDED_openfl_geom_Point
#include <openfl/geom/Point.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif
#ifndef INCLUDED_openfl_system_System
#include <openfl/system/System.h>
#endif
#ifndef INCLUDED_openfl_text_TextField
#include <openfl/text/TextField.h>
#endif
#ifndef INCLUDED_openfl_text_TextFormat
#include <openfl/text/TextFormat.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_f2cdba6b03aa3b19_95_new,"battle.vision.UnitsAndBolts","new",0xa8204338,"battle.vision.UnitsAndBolts.new","battle/vision/UnitsAndBolts.hx",95,0xaf5ebd58)
HX_DEFINE_STACK_FRAME(_hx_pos_f2cdba6b03aa3b19_38_new,"battle.vision.UnitsAndBolts","new",0xa8204338,"battle.vision.UnitsAndBolts.new","battle/vision/UnitsAndBolts.hx",38,0xaf5ebd58)
HX_LOCAL_STACK_FRAME(_hx_pos_f2cdba6b03aa3b19_58_ALACBARX,"battle.vision.UnitsAndBolts","ALACBARX",0x3bf77a7a,"battle.vision.UnitsAndBolts.ALACBARX","battle/vision/UnitsAndBolts.hx",58,0xaf5ebd58)
HX_LOCAL_STACK_FRAME(_hx_pos_f2cdba6b03aa3b19_63_ALACBARY,"battle.vision.UnitsAndBolts","ALACBARY",0x3bf77a7b,"battle.vision.UnitsAndBolts.ALACBARY","battle/vision/UnitsAndBolts.hx",63,0xaf5ebd58)
HX_LOCAL_STACK_FRAME(_hx_pos_f2cdba6b03aa3b19_67_UNITX,"battle.vision.UnitsAndBolts","UNITX",0xaec67a2c,"battle.vision.UnitsAndBolts.UNITX","battle/vision/UnitsAndBolts.hx",67,0xaf5ebd58)
HX_LOCAL_STACK_FRAME(_hx_pos_f2cdba6b03aa3b19_74_UNITY,"battle.vision.UnitsAndBolts","UNITY",0xaec67a2d,"battle.vision.UnitsAndBolts.UNITY","battle/vision/UnitsAndBolts.hx",74,0xaf5ebd58)
HX_LOCAL_STACK_FRAME(_hx_pos_f2cdba6b03aa3b19_110_init,"battle.vision.UnitsAndBolts","init",0x70d34538,"battle.vision.UnitsAndBolts.init","battle/vision/UnitsAndBolts.hx",110,0xaf5ebd58)
HX_LOCAL_STACK_FRAME(_hx_pos_f2cdba6b03aa3b19_124_animateTF,"battle.vision.UnitsAndBolts","animateTF",0x78fbf32b,"battle.vision.UnitsAndBolts.animateTF","battle/vision/UnitsAndBolts.hx",124,0xaf5ebd58)
HX_LOCAL_STACK_FRAME(_hx_pos_f2cdba6b03aa3b19_144_clickHandler,"battle.vision.UnitsAndBolts","clickHandler",0x9eea668a,"battle.vision.UnitsAndBolts.clickHandler","battle/vision/UnitsAndBolts.hx",144,0xaf5ebd58)
HX_LOCAL_STACK_FRAME(_hx_pos_f2cdba6b03aa3b19_161_moveHandler,"battle.vision.UnitsAndBolts","moveHandler",0xee90f391,"battle.vision.UnitsAndBolts.moveHandler","battle/vision/UnitsAndBolts.hx",161,0xaf5ebd58)
HX_LOCAL_STACK_FRAME(_hx_pos_f2cdba6b03aa3b19_167_findAndGlow,"battle.vision.UnitsAndBolts","findAndGlow",0x505ff8a3,"battle.vision.UnitsAndBolts.findAndGlow","battle/vision/UnitsAndBolts.hx",167,0xaf5ebd58)
HX_LOCAL_STACK_FRAME(_hx_pos_f2cdba6b03aa3b19_186_unglowSelected,"battle.vision.UnitsAndBolts","unglowSelected",0x89715e09,"battle.vision.UnitsAndBolts.unglowSelected","battle/vision/UnitsAndBolts.hx",186,0xaf5ebd58)
HX_LOCAL_STACK_FRAME(_hx_pos_f2cdba6b03aa3b19_197_hpUpdate,"battle.vision.UnitsAndBolts","hpUpdate",0xca688959,"battle.vision.UnitsAndBolts.hpUpdate","battle/vision/UnitsAndBolts.hx",197,0xaf5ebd58)
HX_LOCAL_STACK_FRAME(_hx_pos_f2cdba6b03aa3b19_201_manaUpdate,"battle.vision.UnitsAndBolts","manaUpdate",0xc12cee18,"battle.vision.UnitsAndBolts.manaUpdate","battle/vision/UnitsAndBolts.hx",201,0xaf5ebd58)
HX_LOCAL_STACK_FRAME(_hx_pos_f2cdba6b03aa3b19_206_alacUpdate,"battle.vision.UnitsAndBolts","alacUpdate",0x39a9f49e,"battle.vision.UnitsAndBolts.alacUpdate","battle/vision/UnitsAndBolts.hx",206,0xaf5ebd58)
HX_LOCAL_STACK_FRAME(_hx_pos_f2cdba6b03aa3b19_212_buffQueueUpdate,"battle.vision.UnitsAndBolts","buffQueueUpdate",0xe3e26a3f,"battle.vision.UnitsAndBolts.buffQueueUpdate","battle/vision/UnitsAndBolts.hx",212,0xaf5ebd58)
HX_LOCAL_STACK_FRAME(_hx_pos_f2cdba6b03aa3b19_217_preTick,"battle.vision.UnitsAndBolts","preTick",0xafdc5bf8,"battle.vision.UnitsAndBolts.preTick","battle/vision/UnitsAndBolts.hx",217,0xaf5ebd58)
HX_LOCAL_STACK_FRAME(_hx_pos_f2cdba6b03aa3b19_222_tick,"battle.vision.UnitsAndBolts","tick",0x7814cd85,"battle.vision.UnitsAndBolts.tick","battle/vision/UnitsAndBolts.hx",222,0xaf5ebd58)
HX_LOCAL_STACK_FRAME(_hx_pos_f2cdba6b03aa3b19_228_miss,"battle.vision.UnitsAndBolts","miss",0x73745d24,"battle.vision.UnitsAndBolts.miss","battle/vision/UnitsAndBolts.hx",228,0xaf5ebd58)
HX_LOCAL_STACK_FRAME(_hx_pos_f2cdba6b03aa3b19_233_death,"battle.vision.UnitsAndBolts","death",0x610f680c,"battle.vision.UnitsAndBolts.death","battle/vision/UnitsAndBolts.hx",233,0xaf5ebd58)
HX_LOCAL_STACK_FRAME(_hx_pos_f2cdba6b03aa3b19_238_abSelected,"battle.vision.UnitsAndBolts","abSelected",0x0ad69c84,"battle.vision.UnitsAndBolts.abSelected","battle/vision/UnitsAndBolts.hx",238,0xaf5ebd58)
HX_LOCAL_STACK_FRAME(_hx_pos_f2cdba6b03aa3b19_242_abDeselected,"battle.vision.UnitsAndBolts","abDeselected",0xa40b7945,"battle.vision.UnitsAndBolts.abDeselected","battle/vision/UnitsAndBolts.hx",242,0xaf5ebd58)
HX_LOCAL_STACK_FRAME(_hx_pos_f2cdba6b03aa3b19_248_abThrown,"battle.vision.UnitsAndBolts","abThrown",0xfb968a71,"battle.vision.UnitsAndBolts.abThrown","battle/vision/UnitsAndBolts.hx",248,0xaf5ebd58)
HX_LOCAL_STACK_FRAME(_hx_pos_f2cdba6b03aa3b19_261_abStriked,"battle.vision.UnitsAndBolts","abStriked",0xc6d50be9,"battle.vision.UnitsAndBolts.abStriked","battle/vision/UnitsAndBolts.hx",261,0xaf5ebd58)
HX_LOCAL_STACK_FRAME(_hx_pos_f2cdba6b03aa3b19_277_warn,"battle.vision.UnitsAndBolts","warn",0x7a0a6c6e,"battle.vision.UnitsAndBolts.warn","battle/vision/UnitsAndBolts.hx",277,0xaf5ebd58)
HX_LOCAL_STACK_FRAME(_hx_pos_f2cdba6b03aa3b19_273_warn,"battle.vision.UnitsAndBolts","warn",0x7a0a6c6e,"battle.vision.UnitsAndBolts.warn","battle/vision/UnitsAndBolts.hx",273,0xaf5ebd58)
HX_LOCAL_STACK_FRAME(_hx_pos_f2cdba6b03aa3b19_285_animateBolt,"battle.vision.UnitsAndBolts","animateBolt",0x9a78f7ae,"battle.vision.UnitsAndBolts.animateBolt","battle/vision/UnitsAndBolts.hx",285,0xaf5ebd58)
HX_LOCAL_STACK_FRAME(_hx_pos_f2cdba6b03aa3b19_298_animateKickIn,"battle.vision.UnitsAndBolts","animateKickIn",0x033e03a4,"battle.vision.UnitsAndBolts.animateKickIn","battle/vision/UnitsAndBolts.hx",298,0xaf5ebd58)
HX_LOCAL_STACK_FRAME(_hx_pos_f2cdba6b03aa3b19_296_animateKickIn,"battle.vision.UnitsAndBolts","animateKickIn",0x033e03a4,"battle.vision.UnitsAndBolts.animateKickIn","battle/vision/UnitsAndBolts.hx",296,0xaf5ebd58)
HX_LOCAL_STACK_FRAME(_hx_pos_f2cdba6b03aa3b19_308_animateKickOut,"battle.vision.UnitsAndBolts","animateKickOut",0xd309bfef,"battle.vision.UnitsAndBolts.animateKickOut","battle/vision/UnitsAndBolts.hx",308,0xaf5ebd58)
HX_LOCAL_STACK_FRAME(_hx_pos_f2cdba6b03aa3b19_315_animateSpell,"battle.vision.UnitsAndBolts","animateSpell",0x59d37d6f,"battle.vision.UnitsAndBolts.animateSpell","battle/vision/UnitsAndBolts.hx",315,0xaf5ebd58)
HX_LOCAL_STACK_FRAME(_hx_pos_f2cdba6b03aa3b19_326_playOnce,"battle.vision.UnitsAndBolts","playOnce",0xdab21fbd,"battle.vision.UnitsAndBolts.playOnce","battle/vision/UnitsAndBolts.hx",326,0xaf5ebd58)
HX_LOCAL_STACK_FRAME(_hx_pos_f2cdba6b03aa3b19_324_playOnce,"battle.vision.UnitsAndBolts","playOnce",0xdab21fbd,"battle.vision.UnitsAndBolts.playOnce","battle/vision/UnitsAndBolts.hx",324,0xaf5ebd58)
HX_LOCAL_STACK_FRAME(_hx_pos_f2cdba6b03aa3b19_339_cleanAndRespond,"battle.vision.UnitsAndBolts","cleanAndRespond",0x4c4840ff,"battle.vision.UnitsAndBolts.cleanAndRespond","battle/vision/UnitsAndBolts.hx",339,0xaf5ebd58)
namespace battle{
namespace vision{

void UnitsAndBolts_obj::__construct(::Array< ::Dynamic> allies,::Array< ::Dynamic> enemies,::Dynamic model){
            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0, ::battle::vision::UnitsAndBolts,_gthis) HXARGC(1)
            		 ::graphic::ProgressBar _hx_run( ::battle::Unit t){
            			HX_GC_STACKFRAME(&_hx_pos_f2cdba6b03aa3b19_95_new)
HXLINE(  95)			return  ::graphic::ProgressBar_obj::__alloc( HX_CTX ,_gthis->ALACBARW,(int)5,(int)1421442,((Float)0.5),(int)0);
            		}
            		HX_END_LOCAL_FUNC1(return)

            	HX_GC_STACKFRAME(&_hx_pos_f2cdba6b03aa3b19_38_new)
HXLINE(  54)		this->WARNW = ::Main_obj::screenW;
HXLINE(  53)		this->WARNY = ((Float)125);
HXLINE(  52)		this->WARNX = ((Float)0);
HXLINE(  51)		this->ALACBARW = ((Float)150);
HXLINE(  50)		this->UNITH = ::Assets_obj::getUnit(::ID_obj::PlayerZealon_dyn())->get_height();
HXLINE(  49)		this->UNITW = ((Float)54.5);
HXLINE(  86)		 ::battle::vision::UnitsAndBolts _gthis = hx::ObjectPtr<OBJ_>(this);
HXLINE(  88)		super::__construct();
HXLINE(  90)		this->model = model;
HXLINE(  92)		::Array< ::Dynamic> _g = ::Array_obj< ::Dynamic>::__new(0);
HXDLIN(  92)		{
HXLINE(  92)			int _g1 = (int)0;
HXDLIN(  92)			while((_g1 < allies->length)){
HXLINE(  92)				 ::battle::Unit a = allies->__get(_g1).StaticCast<  ::battle::Unit >();
HXDLIN(  92)				_g1 = (_g1 + (int)1);
HXDLIN(  92)				_g->push(::Assets_obj::getUnit(a->id));
            			}
            		}
HXDLIN(  92)		::Array< ::Dynamic> alliesVision = _g;
HXLINE(  93)		::Array< ::Dynamic> _g11 = ::Array_obj< ::Dynamic>::__new(0);
HXDLIN(  93)		{
HXLINE(  93)			int _g2 = (int)0;
HXDLIN(  93)			while((_g2 < enemies->length)){
HXLINE(  93)				 ::battle::Unit e = enemies->__get(_g2).StaticCast<  ::battle::Unit >();
HXDLIN(  93)				_g2 = (_g2 + (int)1);
HXDLIN(  93)				_g11->push(::Assets_obj::getUnit(e->id));
            			}
            		}
HXDLIN(  93)		::Array< ::Dynamic> enemiesVision = _g11;
HXLINE(  94)		this->unitsVision =  ::battle::_hx_struct::UPair_obj::__alloc( HX_CTX ,alliesVision,enemiesVision);
HXLINE(  95)		this->alacrityBars = ::battle::_hx_struct::UPair_obj::map(allies,enemies, ::Dynamic(new _hx_Closure_0(_gthis)));
HXLINE(  96)		this->selectedUnit = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  98)		 ::openfl::text::TextFormat format =  ::openfl::text::TextFormat_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null());
HXLINE(  99)		format->size = (int)18;
HXLINE( 100)		format->bold = true;
HXLINE( 101)		format->color = (int)13959184;
HXLINE( 102)		format->align = (int)0;
HXLINE( 103)		this->warnField =  ::openfl::text::TextField_obj::__alloc( HX_CTX );
HXLINE( 104)		this->warnField->set_width(this->WARNW);
HXLINE( 105)		this->warnField->set_visible(false);
HXLINE( 106)		this->warnField->setTextFormat(format,null(),null());
            	}

Dynamic UnitsAndBolts_obj::__CreateEmpty() { return new UnitsAndBolts_obj; }

void *UnitsAndBolts_obj::_hx_vtable = 0;

Dynamic UnitsAndBolts_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< UnitsAndBolts_obj > _hx_result = new UnitsAndBolts_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

bool UnitsAndBolts_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x19c29573) {
		if (inClassId<=(int)0x12e7200a) {
			if (inClassId<=(int)0x0ddfced7) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0ddfced7;
			} else {
				return inClassId==(int)0x12e7200a;
			}
		} else {
			return inClassId==(int)0x17120186 || inClassId==(int)0x19c29573;
		}
	} else {
		if (inClassId<=(int)0x3f2b00af) {
			return inClassId==(int)0x1b123bf8 || inClassId==(int)0x3f2b00af;
		} else {
			return inClassId==(int)0x739fd0b8;
		}
	}
}

static ::battle::IModelObserver_obj _hx_battle_vision_UnitsAndBolts__hx_battle_IModelObserver= {
	( void (hx::Object::*)( ::battle::Unit, ::battle::Unit,int, ::Element,bool, ::battle::enums::Source))&::battle::vision::UnitsAndBolts_obj::hpUpdate,
	( void (hx::Object::*)( ::battle::Unit,int, ::battle::enums::Source))&::battle::vision::UnitsAndBolts_obj::manaUpdate,
	( void (hx::Object::*)( ::battle::Unit,Float, ::battle::enums::Source))&::battle::vision::UnitsAndBolts_obj::alacUpdate,
	( void (hx::Object::*)( ::battle::_hx_struct::UnitCoords,::Array< ::Dynamic>))&::battle::vision::UnitsAndBolts_obj::buffQueueUpdate,
	( void (hx::Object::*)( ::battle::Unit))&::battle::vision::UnitsAndBolts_obj::preTick,
	( void (hx::Object::*)( ::battle::Unit))&::battle::vision::UnitsAndBolts_obj::tick,
	( void (hx::Object::*)( ::battle::_hx_struct::UnitCoords, ::Element))&::battle::vision::UnitsAndBolts_obj::miss,
	( void (hx::Object::*)( ::battle::_hx_struct::UnitCoords))&::battle::vision::UnitsAndBolts_obj::death,
	( void (hx::Object::*)(int))&::battle::vision::UnitsAndBolts_obj::abSelected,
	( void (hx::Object::*)(int))&::battle::vision::UnitsAndBolts_obj::abDeselected,
	( void (hx::Object::*)( ::battle::_hx_struct::UnitCoords, ::battle::_hx_struct::UnitCoords, ::ID, ::battle::enums::StrikeType, ::Element))&::battle::vision::UnitsAndBolts_obj::abThrown,
	( void (hx::Object::*)( ::battle::_hx_struct::UnitCoords, ::battle::_hx_struct::UnitCoords, ::ID, ::battle::enums::StrikeType, ::Element))&::battle::vision::UnitsAndBolts_obj::abStriked,
	( void (hx::Object::*)(::String))&::battle::vision::UnitsAndBolts_obj::warn,
};

void *UnitsAndBolts_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0x2826bace: return &_hx_battle_vision_UnitsAndBolts__hx_battle_IModelObserver;
	}
	return super::_hx_getInterface(inHash);
}

Float UnitsAndBolts_obj::ALACBARX( ::battle::_hx_struct::UnitCoords coords){
            	HX_STACKFRAME(&_hx_pos_f2cdba6b03aa3b19_58_ALACBARX)
HXDLIN(  58)		Float a;
HXDLIN(  58)		if ((coords->pos == (int)0)) {
HXDLIN(  58)			a = (int)415;
            		}
            		else {
HXDLIN(  58)			a = (int)250;
            		}
HXDLIN(  58)		Float _hx_tmp;
HXDLIN(  58)		if (hx::IsEq( coords->team,::battle::enums::Team_obj::Left_dyn() )) {
HXDLIN(  58)			_hx_tmp = a;
            		}
            		else {
HXDLIN(  58)			_hx_tmp = (((int)1366 - a) - this->UNITW);
            		}
HXDLIN(  58)		return (_hx_tmp - ((Float)(this->ALACBARW - this->UNITW) / (Float)(int)2));
            	}


HX_DEFINE_DYNAMIC_FUNC1(UnitsAndBolts_obj,ALACBARX,return )

Float UnitsAndBolts_obj::ALACBARY( ::battle::_hx_struct::UnitCoords coords){
            	HX_STACKFRAME(&_hx_pos_f2cdba6b03aa3b19_63_ALACBARY)
HXDLIN(  63)		int _hx_tmp;
HXDLIN(  63)		if ((coords->pos == (int)0)) {
HXDLIN(  63)			_hx_tmp = (int)416;
            		}
            		else {
HXDLIN(  63)			if ((coords->pos == (int)1)) {
HXDLIN(  63)				_hx_tmp = (int)516;
            			}
            			else {
HXDLIN(  63)				if ((coords->pos == (int)2)) {
HXDLIN(  63)					_hx_tmp = (int)307;
            				}
            				else {
HXDLIN(  63)					_hx_tmp = (int)-1;
            				}
            			}
            		}
HXDLIN(  63)		return ((_hx_tmp + this->UNITH) + (int)5);
            	}


HX_DEFINE_DYNAMIC_FUNC1(UnitsAndBolts_obj,ALACBARY,return )

Float UnitsAndBolts_obj::UNITX( ::battle::_hx_struct::UnitCoords coords){
            	HX_STACKFRAME(&_hx_pos_f2cdba6b03aa3b19_67_UNITX)
HXLINE(  68)		Float a;
HXDLIN(  68)		if ((coords->pos == (int)0)) {
HXLINE(  68)			a = (int)415;
            		}
            		else {
HXLINE(  68)			a = (int)250;
            		}
HXLINE(  69)		if (hx::IsEq( coords->team,::battle::enums::Team_obj::Left_dyn() )) {
HXLINE(  69)			return a;
            		}
            		else {
HXLINE(  69)			return (((int)1366 - a) - this->UNITW);
            		}
HXDLIN(  69)		return ((Float)0.);
            	}


HX_DEFINE_DYNAMIC_FUNC1(UnitsAndBolts_obj,UNITX,return )

Float UnitsAndBolts_obj::UNITY( ::battle::_hx_struct::UnitCoords coords){
            	HX_STACKFRAME(&_hx_pos_f2cdba6b03aa3b19_74_UNITY)
HXDLIN(  74)		if ((coords->pos == (int)0)) {
HXLINE(  75)			return (int)416;
            		}
            		else {
HXLINE(  76)			if ((coords->pos == (int)1)) {
HXLINE(  77)				return (int)516;
            			}
            			else {
HXLINE(  78)				if ((coords->pos == (int)2)) {
HXLINE(  79)					return (int)307;
            				}
            				else {
HXLINE(  81)					return (int)-1;
            				}
            			}
            		}
HXLINE(  74)		return ((Float)0.);
            	}


HX_DEFINE_DYNAMIC_FUNC1(UnitsAndBolts_obj,UNITY,return )

void UnitsAndBolts_obj::init(){
            	HX_STACKFRAME(&_hx_pos_f2cdba6b03aa3b19_110_init)
HXLINE( 111)		{
HXLINE( 111)			 ::Dynamic u = this->unitsVision->iterator();
HXDLIN( 111)			while(( (bool)(u->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE( 111)				 ::openfl::display::MovieClip u1 = ( ( ::openfl::display::MovieClip)(u->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE( 113)				 ::battle::_hx_struct::UnitCoords coords = this->unitsVision->find(u1);
HXLINE( 114)				Float a;
HXDLIN( 114)				if ((coords->pos == (int)0)) {
HXLINE( 114)					a = (int)415;
            				}
            				else {
HXLINE( 114)					a = (int)250;
            				}
HXDLIN( 114)				Float _hx_tmp;
HXDLIN( 114)				if (hx::IsEq( coords->team,::battle::enums::Team_obj::Left_dyn() )) {
HXLINE( 114)					_hx_tmp = a;
            				}
            				else {
HXLINE( 114)					_hx_tmp = (((int)1366 - a) - this->UNITW);
            				}
HXDLIN( 114)				int _hx_tmp1;
HXDLIN( 114)				if ((coords->pos == (int)0)) {
HXLINE( 114)					_hx_tmp1 = (int)416;
            				}
            				else {
HXLINE( 114)					if ((coords->pos == (int)1)) {
HXLINE( 114)						_hx_tmp1 = (int)516;
            					}
            					else {
HXLINE( 114)						if ((coords->pos == (int)2)) {
HXLINE( 114)							_hx_tmp1 = (int)307;
            						}
            						else {
HXLINE( 114)							_hx_tmp1 = (int)-1;
            						}
            					}
            				}
HXDLIN( 114)				this->add(u1,_hx_tmp,_hx_tmp1);
HXLINE( 115)				 ::graphic::ProgressBar _hx_tmp2 = this->alacrityBars->get(coords).StaticCast<  ::graphic::ProgressBar >();
HXDLIN( 115)				Float _hx_tmp3 = this->ALACBARX(coords);
HXDLIN( 115)				this->add(_hx_tmp2,_hx_tmp3,this->ALACBARY(coords));
HXLINE( 116)				this->add(this->warnField,this->WARNX,this->WARNY);
            			}
            		}
HXLINE( 119)		this->stage->addEventListener(HX_("click",48,7c,5e,48),this->clickHandler_dyn(),null(),null(),null());
HXLINE( 120)		this->stage->addEventListener(HX_("mouseMove",d6,9b,b5,f4),this->moveHandler_dyn(),null(),null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(UnitsAndBolts_obj,init,(void))

void UnitsAndBolts_obj::animateTF( ::battle::_hx_struct::UnitCoords target, ::Element element,::String text, ::Dynamic __o_heal){
 ::Dynamic heal = __o_heal.Default(false);
            	HX_GC_STACKFRAME(&_hx_pos_f2cdba6b03aa3b19_124_animateTF)
HXLINE( 125)		 ::battle::_hx_struct::UnitCoords coords = target;
HXLINE( 126)		 ::openfl::text::TextField tf =  ::openfl::text::TextField_obj::__alloc( HX_CTX );
HXLINE( 127)		 ::openfl::text::TextFormat format =  ::openfl::text::TextFormat_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null());
HXLINE( 128)		 ::Element _hx_tmp;
HXDLIN( 128)		if (heal) {
HXLINE( 128)			_hx_tmp = null();
            		}
            		else {
HXLINE( 128)			_hx_tmp = element;
            		}
HXDLIN( 128)		format->color = ::graphic::Fonts_obj::color(_hx_tmp);
HXLINE( 129)		format->size = (int)50;
HXLINE( 130)		format->align = (int)0;
HXLINE( 131)		format->font = ::graphic::Fonts_obj::DAMAGE;
HXLINE( 132)		tf->set_text(text);
HXLINE( 133)		tf->set_width((int)200);
HXLINE( 134)		tf->setTextFormat(format,null(),null());
HXLINE( 135)		tf->set_filters(::Array_obj< ::Dynamic>::__new(1)->init(0, ::openfl::filters::GlowFilter_obj::__alloc( HX_CTX ,(int)0,(int)1,(int)0,(int)0,null(),null(),null(),null())));
HXLINE( 137)		Float a;
HXDLIN( 137)		if ((coords->pos == (int)0)) {
HXLINE( 137)			a = (int)415;
            		}
            		else {
HXLINE( 137)			a = (int)250;
            		}
HXDLIN( 137)		Float _hx_tmp1;
HXDLIN( 137)		if (hx::IsEq( coords->team,::battle::enums::Team_obj::Left_dyn() )) {
HXLINE( 137)			_hx_tmp1 = a;
            		}
            		else {
HXLINE( 137)			_hx_tmp1 = (((int)1366 - a) - this->UNITW);
            		}
HXDLIN( 137)		Float _hx_tmp2 = (_hx_tmp1 - (int)90);
HXDLIN( 137)		int _hx_tmp3;
HXDLIN( 137)		if ((coords->pos == (int)0)) {
HXLINE( 137)			_hx_tmp3 = (int)416;
            		}
            		else {
HXLINE( 137)			if ((coords->pos == (int)1)) {
HXLINE( 137)				_hx_tmp3 = (int)516;
            			}
            			else {
HXLINE( 137)				if ((coords->pos == (int)2)) {
HXLINE( 137)					_hx_tmp3 = (int)307;
            				}
            				else {
HXLINE( 137)					_hx_tmp3 = (int)-1;
            				}
            			}
            		}
HXDLIN( 137)		Float _hx_tmp4 = _hx_tmp3;
HXDLIN( 137)		this->add(tf,_hx_tmp2,(_hx_tmp4 + (this->unitsVision->get(coords).StaticCast<  ::openfl::display::MovieClip >()->get_height() * ((Float)0.25))));
HXLINE( 138)		int _hx_tmp5;
HXDLIN( 138)		if ((coords->pos == (int)0)) {
HXLINE( 138)			_hx_tmp5 = (int)416;
            		}
            		else {
HXLINE( 138)			if ((coords->pos == (int)1)) {
HXLINE( 138)				_hx_tmp5 = (int)516;
            			}
            			else {
HXLINE( 138)				if ((coords->pos == (int)2)) {
HXLINE( 138)					_hx_tmp5 = (int)307;
            				}
            				else {
HXLINE( 138)					_hx_tmp5 = (int)-1;
            				}
            			}
            		}
HXDLIN( 138)		Float _hx_tmp6 = _hx_tmp5;
HXDLIN( 138)		::motion::Actuate_obj::tween(tf,(int)1, ::Dynamic(hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("y",79,00,00,00),(_hx_tmp6 + this->unitsVision->get(coords).StaticCast<  ::openfl::display::MovieClip >()->get_height()))
            			->setFixed(1,HX_("alpha",5e,a7,96,21),(int)0)),null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC4(UnitsAndBolts_obj,animateTF,(void))

void UnitsAndBolts_obj::clickHandler( ::openfl::events::MouseEvent e){
            	HX_GC_STACKFRAME(&_hx_pos_f2cdba6b03aa3b19_144_clickHandler)
HXLINE( 145)		 ::openfl::geom::Point clickPoint =  ::openfl::geom::Point_obj::__alloc( HX_CTX ,e->stageX,e->stageY);
HXLINE( 147)		{
HXLINE( 147)			 ::Dynamic unit = this->unitsVision->iterator();
HXDLIN( 147)			while(( (bool)(unit->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE( 147)				 ::openfl::display::MovieClip unit1 = ( ( ::openfl::display::MovieClip)(unit->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE( 148)				 ::openfl::geom::Rectangle field = unit1->getRect(hx::ObjectPtr<OBJ_>(this));
HXDLIN( 148)				bool _hx_tmp;
HXDLIN( 148)				bool _hx_tmp1;
HXDLIN( 148)				bool _hx_tmp2;
HXDLIN( 148)				if ((clickPoint->x >= field->x)) {
HXLINE( 148)					Float clickPoint1 = clickPoint->x;
HXDLIN( 148)					_hx_tmp2 = (clickPoint1 <= (field->x + field->width));
            				}
            				else {
HXLINE( 148)					_hx_tmp2 = false;
            				}
HXDLIN( 148)				if (_hx_tmp2) {
HXLINE( 148)					if ((clickPoint->y >= field->y)) {
HXLINE( 148)						Float clickPoint2 = clickPoint->y;
HXDLIN( 148)						_hx_tmp1 = (clickPoint2 <= (field->y + field->height));
            					}
            					else {
HXLINE( 148)						_hx_tmp1 = false;
            					}
            				}
            				else {
HXLINE( 148)					_hx_tmp1 = false;
            				}
HXDLIN( 148)				if (_hx_tmp1) {
HXLINE( 148)					_hx_tmp = true;
            				}
            				else {
HXLINE( 148)					_hx_tmp = false;
            				}
HXDLIN( 148)				if (_hx_tmp) {
HXLINE( 150)					if (hx::IsEq( ::battle::IObservableModel_obj::getInputMode(this->model),::battle::enums::InputMode_obj::Targeting_dyn() )) {
HXLINE( 152)						this->unglowSelected();
HXLINE( 153)						::Dynamic _hx_tmp3 = this->model;
HXDLIN( 153)						::battle::IObservableModel_obj::targetAndUse(_hx_tmp3,this->unitsVision->find(unit1));
            					}
HXLINE( 155)					return;
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(UnitsAndBolts_obj,clickHandler,(void))

void UnitsAndBolts_obj::moveHandler( ::openfl::events::MouseEvent e){
            	HX_STACKFRAME(&_hx_pos_f2cdba6b03aa3b19_161_moveHandler)
HXDLIN( 161)		if (hx::IsEq( ::battle::IObservableModel_obj::getInputMode(this->model),::battle::enums::InputMode_obj::Targeting_dyn() )) {
HXLINE( 162)			if (!(this->findAndGlow())) {
HXLINE( 163)				this->unglowSelected();
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(UnitsAndBolts_obj,moveHandler,(void))

bool UnitsAndBolts_obj::findAndGlow(){
            	HX_GC_STACKFRAME(&_hx_pos_f2cdba6b03aa3b19_167_findAndGlow)
HXLINE( 168)		::Array< ::Dynamic> array;
HXDLIN( 168)		if ((this->stage->get_mouseX() > (int)450)) {
HXLINE( 168)			array = this->unitsVision->right;
            		}
            		else {
HXLINE( 168)			array = this->unitsVision->left;
            		}
HXLINE( 170)		{
HXLINE( 170)			int _g = (int)0;
HXDLIN( 170)			while((_g < array->length)){
HXLINE( 170)				 ::openfl::display::MovieClip unit = array->__get(_g).StaticCast<  ::openfl::display::MovieClip >();
HXDLIN( 170)				_g = (_g + (int)1);
HXLINE( 171)				Float point = this->stage->get_mouseX();
HXDLIN( 171)				 ::openfl::geom::Point point1 =  ::openfl::geom::Point_obj::__alloc( HX_CTX ,point,this->stage->get_mouseY());
HXDLIN( 171)				 ::openfl::geom::Rectangle field = unit->getRect(hx::ObjectPtr<OBJ_>(this));
HXDLIN( 171)				bool _hx_tmp;
HXDLIN( 171)				bool _hx_tmp1;
HXDLIN( 171)				bool _hx_tmp2;
HXDLIN( 171)				if ((point1->x >= field->x)) {
HXLINE( 171)					Float point2 = point1->x;
HXDLIN( 171)					_hx_tmp2 = (point2 <= (field->x + field->width));
            				}
            				else {
HXLINE( 171)					_hx_tmp2 = false;
            				}
HXDLIN( 171)				if (_hx_tmp2) {
HXLINE( 171)					if ((point1->y >= field->y)) {
HXLINE( 171)						Float point3 = point1->y;
HXDLIN( 171)						_hx_tmp1 = (point3 <= (field->y + field->height));
            					}
            					else {
HXLINE( 171)						_hx_tmp1 = false;
            					}
            				}
            				else {
HXLINE( 171)					_hx_tmp1 = false;
            				}
HXDLIN( 171)				if (_hx_tmp1) {
HXLINE( 171)					_hx_tmp = true;
            				}
            				else {
HXLINE( 171)					_hx_tmp = false;
            				}
HXDLIN( 171)				if (_hx_tmp) {
HXLINE( 173)					bool _hx_tmp3;
HXDLIN( 173)					if (!(::Lambda_obj::empty(this->selectedUnit))) {
HXLINE( 173)						_hx_tmp3 = hx::IsNotEq( this->selectedUnit->__get((int)0).StaticCast<  ::openfl::display::MovieClip >(),unit );
            					}
            					else {
HXLINE( 173)						_hx_tmp3 = false;
            					}
HXDLIN( 173)					if (_hx_tmp3) {
HXLINE( 174)						this->unglowSelected();
            					}
HXLINE( 175)					int color;
HXDLIN( 175)					::Dynamic color1 = this->model;
HXDLIN( 175)					if (::battle::IObservableModel_obj::targetAvaibility(color1,this->unitsVision->find(unit))) {
HXLINE( 175)						color = (int)50225;
            					}
            					else {
HXLINE( 175)						color = (int)15473681;
            					}
HXLINE( 176)					this->selectedUnit->push(unit);
HXLINE( 177)					::openfl::_hx_system::System_obj::gc();
HXLINE( 178)					 ::openfl::filters::DropShadowFilter _hx_tmp4 =  ::openfl::filters::DropShadowFilter_obj::__alloc( HX_CTX ,(int)4,(int)45,color,null(),null(),null(),null(),null(),null(),null(),null());
HXDLIN( 178)					unit->set_filters(::Array_obj< ::Dynamic>::__new(2)->init(0,_hx_tmp4)->init(1, ::openfl::filters::DropShadowFilter_obj::__alloc( HX_CTX ,(int)4,(int)225,color,null(),null(),null(),null(),null(),null(),null(),null())));
HXLINE( 179)					return true;
            				}
            			}
            		}
HXLINE( 181)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(UnitsAndBolts_obj,findAndGlow,return )

void UnitsAndBolts_obj::unglowSelected(){
            	HX_STACKFRAME(&_hx_pos_f2cdba6b03aa3b19_186_unglowSelected)
HXDLIN( 186)		if (!(::Lambda_obj::empty(this->selectedUnit))) {
HXLINE( 188)			this->selectedUnit->__get((int)0).StaticCast<  ::openfl::display::MovieClip >()->set_filters(::Array_obj< ::Dynamic>::__new(0));
HXLINE( 189)			this->selectedUnit = ::Array_obj< ::Dynamic>::__new(0);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(UnitsAndBolts_obj,unglowSelected,(void))

void UnitsAndBolts_obj::hpUpdate( ::battle::Unit target, ::battle::Unit caster,int dhp, ::Element element,bool crit, ::battle::enums::Source source){
            	HX_STACKFRAME(&_hx_pos_f2cdba6b03aa3b19_197_hpUpdate)
HXDLIN( 197)		 ::battle::_hx_struct::UnitCoords _hx_tmp = ::battle::_hx_struct::UnitCoords_obj::get(target);
HXDLIN( 197)		::String _hx_tmp1;
HXDLIN( 197)		if (crit) {
HXDLIN( 197)			_hx_tmp1 = HX_("!",21,00,00,00);
            		}
            		else {
HXDLIN( 197)			_hx_tmp1 = HX_("",00,00,00,00);
            		}
HXDLIN( 197)		::String _hx_tmp2 = (::Math_obj::abs(dhp) + _hx_tmp1);
HXDLIN( 197)		this->animateTF(_hx_tmp,element,_hx_tmp2,(dhp > (int)0));
            	}


HX_DEFINE_DYNAMIC_FUNC6(UnitsAndBolts_obj,hpUpdate,(void))

void UnitsAndBolts_obj::manaUpdate( ::battle::Unit target,int dmana, ::battle::enums::Source source){
            	HX_STACKFRAME(&_hx_pos_f2cdba6b03aa3b19_201_manaUpdate)
            	}


HX_DEFINE_DYNAMIC_FUNC3(UnitsAndBolts_obj,manaUpdate,(void))

void UnitsAndBolts_obj::alacUpdate( ::battle::Unit unit,Float dalac, ::battle::enums::Source source){
            	HX_STACKFRAME(&_hx_pos_f2cdba6b03aa3b19_206_alacUpdate)
HXLINE( 207)		 ::graphic::ProgressBar bar = this->alacrityBars->getByUnit(unit).StaticCast<  ::graphic::ProgressBar >();
HXLINE( 208)		::motion::Actuate_obj::tween(bar,((Float)0.3), ::Dynamic(hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("progress",ad,f7,2a,86),((Float)unit->alacrityPool->value / (Float)unit->alacrityPool->maxValue))),null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC3(UnitsAndBolts_obj,alacUpdate,(void))

void UnitsAndBolts_obj::buffQueueUpdate( ::battle::_hx_struct::UnitCoords unit,::Array< ::Dynamic> queue){
            	HX_STACKFRAME(&_hx_pos_f2cdba6b03aa3b19_212_buffQueueUpdate)
            	}


HX_DEFINE_DYNAMIC_FUNC2(UnitsAndBolts_obj,buffQueueUpdate,(void))

void UnitsAndBolts_obj::preTick( ::battle::Unit current){
            	HX_STACKFRAME(&_hx_pos_f2cdba6b03aa3b19_217_preTick)
            	}


HX_DEFINE_DYNAMIC_FUNC1(UnitsAndBolts_obj,preTick,(void))

void UnitsAndBolts_obj::tick( ::battle::Unit current){
            	HX_STACKFRAME(&_hx_pos_f2cdba6b03aa3b19_222_tick)
            	}


HX_DEFINE_DYNAMIC_FUNC1(UnitsAndBolts_obj,tick,(void))

void UnitsAndBolts_obj::miss( ::battle::_hx_struct::UnitCoords target, ::Element element){
            	HX_STACKFRAME(&_hx_pos_f2cdba6b03aa3b19_228_miss)
HXDLIN( 228)		this->animateTF(target,element,HX_("MISS",fc,1a,1d,33),null());
            	}


HX_DEFINE_DYNAMIC_FUNC2(UnitsAndBolts_obj,miss,(void))

void UnitsAndBolts_obj::death( ::battle::_hx_struct::UnitCoords unit){
            	HX_STACKFRAME(&_hx_pos_f2cdba6b03aa3b19_233_death)
HXDLIN( 233)		this->remove(this->unitsVision->get(unit).StaticCast<  ::openfl::display::MovieClip >());
            	}


HX_DEFINE_DYNAMIC_FUNC1(UnitsAndBolts_obj,death,(void))

void UnitsAndBolts_obj::abSelected(int num){
            	HX_STACKFRAME(&_hx_pos_f2cdba6b03aa3b19_238_abSelected)
HXDLIN( 238)		this->findAndGlow();
            	}


HX_DEFINE_DYNAMIC_FUNC1(UnitsAndBolts_obj,abSelected,(void))

void UnitsAndBolts_obj::abDeselected(int num){
            	HX_STACKFRAME(&_hx_pos_f2cdba6b03aa3b19_242_abDeselected)
            	}


HX_DEFINE_DYNAMIC_FUNC1(UnitsAndBolts_obj,abDeselected,(void))

void UnitsAndBolts_obj::abThrown( ::battle::_hx_struct::UnitCoords target, ::battle::_hx_struct::UnitCoords caster, ::ID id, ::battle::enums::StrikeType type, ::Element element){
            	HX_STACKFRAME(&_hx_pos_f2cdba6b03aa3b19_248_abThrown)
HXDLIN( 248)		switch((int)(_hx_getEnumValueIndex(type))){
            			case (int)0: {
HXLINE( 253)				this->animateKickIn(target,caster);
            			}
            			break;
            			case (int)1: {
HXLINE( 251)				this->animateBolt(target,caster,element);
            			}
            			break;
            			default:{
HXLINE( 255)				::battle::IObservableModel_obj::respond(this->model);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC5(UnitsAndBolts_obj,abThrown,(void))

void UnitsAndBolts_obj::abStriked( ::battle::_hx_struct::UnitCoords target, ::battle::_hx_struct::UnitCoords caster, ::ID id, ::battle::enums::StrikeType type, ::Element element){
            	HX_STACKFRAME(&_hx_pos_f2cdba6b03aa3b19_261_abStriked)
HXDLIN( 261)		switch((int)(_hx_getEnumValueIndex(type))){
            			case (int)0: {
HXLINE( 264)				this->animateKickOut(caster);
            			}
            			break;
            			case (int)2: {
HXLINE( 266)				this->animateSpell(element,target);
            			}
            			break;
            			default:{
HXLINE( 268)				::battle::IObservableModel_obj::respond(this->model);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC5(UnitsAndBolts_obj,abStriked,(void))

void UnitsAndBolts_obj::warn(::String text){
            		HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_0, ::battle::vision::UnitsAndBolts,_gthis, ::haxe::Timer,timer) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_f2cdba6b03aa3b19_277_warn)
HXLINE( 277)			_gthis->warnField->set_visible(false);
HXDLIN( 277)			timer->stop();
            		}
            		HX_END_LOCAL_FUNC0((void))

            	HX_GC_STACKFRAME(&_hx_pos_f2cdba6b03aa3b19_273_warn)
HXLINE( 272)		 ::battle::vision::UnitsAndBolts _gthis = hx::ObjectPtr<OBJ_>(this);
HXLINE( 274)		this->warnField->set_text(text);
HXLINE( 275)		this->warnField->set_visible(true);
HXLINE( 276)		 ::haxe::Timer timer =  ::haxe::Timer_obj::__alloc( HX_CTX ,(int)3000);
HXLINE( 277)		timer->run =  ::Dynamic(new _hx_Closure_0(_gthis,timer));
            	}


HX_DEFINE_DYNAMIC_FUNC1(UnitsAndBolts_obj,warn,(void))

void UnitsAndBolts_obj::animateBolt( ::battle::_hx_struct::UnitCoords target, ::battle::_hx_struct::UnitCoords caster, ::Element element){
            	HX_STACKFRAME(&_hx_pos_f2cdba6b03aa3b19_285_animateBolt)
HXLINE( 286)		 ::openfl::display::MovieClip animation = ::Assets_obj::getBolt(element);
HXLINE( 287)		Float a;
HXDLIN( 287)		if ((caster->pos == (int)0)) {
HXLINE( 287)			a = (int)415;
            		}
            		else {
HXLINE( 287)			a = (int)250;
            		}
HXDLIN( 287)		Float _hx_tmp;
HXDLIN( 287)		if (hx::IsEq( caster->team,::battle::enums::Team_obj::Left_dyn() )) {
HXLINE( 287)			_hx_tmp = a;
            		}
            		else {
HXLINE( 287)			_hx_tmp = (((int)1366 - a) - this->UNITW);
            		}
HXDLIN( 287)		int _hx_tmp1;
HXDLIN( 287)		if ((caster->pos == (int)0)) {
HXLINE( 287)			_hx_tmp1 = (int)416;
            		}
            		else {
HXLINE( 287)			if ((caster->pos == (int)1)) {
HXLINE( 287)				_hx_tmp1 = (int)516;
            			}
            			else {
HXLINE( 287)				if ((caster->pos == (int)2)) {
HXLINE( 287)					_hx_tmp1 = (int)307;
            				}
            				else {
HXLINE( 287)					_hx_tmp1 = (int)-1;
            				}
            			}
            		}
HXDLIN( 287)		this->add(animation,_hx_tmp,(_hx_tmp1 + (int)50));
HXLINE( 288)		animation->play();
HXLINE( 290)		Float a1;
HXDLIN( 290)		if ((target->pos == (int)0)) {
HXLINE( 290)			a1 = (int)415;
            		}
            		else {
HXLINE( 290)			a1 = (int)250;
            		}
HXDLIN( 290)		Float actuator;
HXDLIN( 290)		if (hx::IsEq( target->team,::battle::enums::Team_obj::Left_dyn() )) {
HXLINE( 290)			actuator = a1;
            		}
            		else {
HXLINE( 290)			actuator = (((int)1366 - a1) - this->UNITW);
            		}
HXDLIN( 290)		int actuator1;
HXDLIN( 290)		if ((target->pos == (int)0)) {
HXLINE( 290)			actuator1 = (int)416;
            		}
            		else {
HXLINE( 290)			if ((target->pos == (int)1)) {
HXLINE( 290)				actuator1 = (int)516;
            			}
            			else {
HXLINE( 290)				if ((target->pos == (int)2)) {
HXLINE( 290)					actuator1 = (int)307;
            				}
            				else {
HXLINE( 290)					actuator1 = (int)-1;
            				}
            			}
            		}
HXDLIN( 290)		 ::motion::actuators::GenericActuator actuator2 = ::motion::Actuate_obj::tween(animation,((Float)0.7), ::Dynamic(hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("x",78,00,00,00),actuator)
            			->setFixed(1,HX_("y",79,00,00,00),(actuator1 + (int)50))),null(),null());
HXLINE( 291)		actuator2->ease(::motion::easing::Quad_obj::get_easeIn());
HXLINE( 292)		actuator2->onComplete(this->cleanAndRespond_dyn(),::cpp::VirtualArray_obj::__new(1)->init(0,animation));
            	}


HX_DEFINE_DYNAMIC_FUNC3(UnitsAndBolts_obj,animateBolt,(void))

void UnitsAndBolts_obj::animateKickIn( ::battle::_hx_struct::UnitCoords target, ::battle::_hx_struct::UnitCoords caster){
            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0, ::battle::vision::UnitsAndBolts,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_STACKFRAME(&_hx_pos_f2cdba6b03aa3b19_298_animateKickIn)
HXLINE( 298)			::motion::Actuate_obj::timer(((Float)0.6),null())->onComplete(_gthis->model->__Field(HX_("respond",55,89,0b,68), hx::paccDynamic),null());
            		}
            		HX_END_LOCAL_FUNC0((void))

            	HX_STACKFRAME(&_hx_pos_f2cdba6b03aa3b19_296_animateKickIn)
HXLINE( 295)		 ::battle::vision::UnitsAndBolts _gthis = hx::ObjectPtr<OBJ_>(this);
HXLINE( 297)		 ::Dynamic kick =  ::Dynamic(new _hx_Closure_0(_gthis));
HXLINE( 301)		int kickRange;
HXDLIN( 301)		if (hx::IsEq( caster->team,::battle::enums::Team_obj::Left_dyn() )) {
HXLINE( 301)			kickRange = (int)-20;
            		}
            		else {
HXLINE( 301)			kickRange = (int)20;
            		}
HXLINE( 302)		 ::openfl::display::MovieClip actuator = this->unitsVision->get(caster).StaticCast<  ::openfl::display::MovieClip >();
HXDLIN( 302)		Float a;
HXDLIN( 302)		if ((target->pos == (int)0)) {
HXLINE( 302)			a = (int)415;
            		}
            		else {
HXLINE( 302)			a = (int)250;
            		}
HXDLIN( 302)		Float actuator1;
HXDLIN( 302)		if (hx::IsEq( target->team,::battle::enums::Team_obj::Left_dyn() )) {
HXLINE( 302)			actuator1 = a;
            		}
            		else {
HXLINE( 302)			actuator1 = (((int)1366 - a) - this->UNITW);
            		}
HXDLIN( 302)		int actuator2;
HXDLIN( 302)		if ((target->pos == (int)0)) {
HXLINE( 302)			actuator2 = (int)416;
            		}
            		else {
HXLINE( 302)			if ((target->pos == (int)1)) {
HXLINE( 302)				actuator2 = (int)516;
            			}
            			else {
HXLINE( 302)				if ((target->pos == (int)2)) {
HXLINE( 302)					actuator2 = (int)307;
            				}
            				else {
HXLINE( 302)					actuator2 = (int)-1;
            				}
            			}
            		}
HXDLIN( 302)		 ::motion::actuators::GenericActuator actuator3 = ::motion::Actuate_obj::tween(actuator,((Float)0.5), ::Dynamic(hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("x",78,00,00,00),(actuator1 + kickRange))
            			->setFixed(1,HX_("y",79,00,00,00),actuator2)),null(),null());
HXLINE( 303)		actuator3->ease(::motion::easing::Cubic_obj::get_easeOut());
HXLINE( 304)		actuator3->onComplete(kick,null());
            	}


HX_DEFINE_DYNAMIC_FUNC2(UnitsAndBolts_obj,animateKickIn,(void))

void UnitsAndBolts_obj::animateKickOut( ::battle::_hx_struct::UnitCoords caster){
            	HX_STACKFRAME(&_hx_pos_f2cdba6b03aa3b19_308_animateKickOut)
HXLINE( 309)		 ::openfl::display::MovieClip actuator = this->unitsVision->get(caster).StaticCast<  ::openfl::display::MovieClip >();
HXDLIN( 309)		Float a;
HXDLIN( 309)		if ((caster->pos == (int)0)) {
HXLINE( 309)			a = (int)415;
            		}
            		else {
HXLINE( 309)			a = (int)250;
            		}
HXDLIN( 309)		Float actuator1;
HXDLIN( 309)		if (hx::IsEq( caster->team,::battle::enums::Team_obj::Left_dyn() )) {
HXLINE( 309)			actuator1 = a;
            		}
            		else {
HXLINE( 309)			actuator1 = (((int)1366 - a) - this->UNITW);
            		}
HXDLIN( 309)		int actuator2;
HXDLIN( 309)		if ((caster->pos == (int)0)) {
HXLINE( 309)			actuator2 = (int)416;
            		}
            		else {
HXLINE( 309)			if ((caster->pos == (int)1)) {
HXLINE( 309)				actuator2 = (int)516;
            			}
            			else {
HXLINE( 309)				if ((caster->pos == (int)2)) {
HXLINE( 309)					actuator2 = (int)307;
            				}
            				else {
HXLINE( 309)					actuator2 = (int)-1;
            				}
            			}
            		}
HXDLIN( 309)		 ::motion::actuators::GenericActuator actuator3 = ::motion::Actuate_obj::tween(actuator,((Float)0.5), ::Dynamic(hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("x",78,00,00,00),actuator1)
            			->setFixed(1,HX_("y",79,00,00,00),actuator2)),null(),null());
HXLINE( 310)		actuator3->ease(::motion::easing::Cubic_obj::get_easeOut());
HXLINE( 311)		actuator3->onComplete(this->model->__Field(HX_("respond",55,89,0b,68), hx::paccDynamic),null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(UnitsAndBolts_obj,animateKickOut,(void))

void UnitsAndBolts_obj::animateSpell( ::Element element, ::battle::_hx_struct::UnitCoords target){
            	HX_STACKFRAME(&_hx_pos_f2cdba6b03aa3b19_315_animateSpell)
HXLINE( 316)		 ::openfl::display::MovieClip animation = ::Assets_obj::getSpellAnim(element);
HXLINE( 317)		Float _hx_tmp = this->unitsVision->get(target).StaticCast<  ::openfl::display::MovieClip >()->get_x();
HXDLIN( 317)		this->add(animation,_hx_tmp,this->unitsVision->get(target).StaticCast<  ::openfl::display::MovieClip >()->get_y());
HXLINE( 318)		this->playOnce(animation,this->model->__Field(HX_("respond",55,89,0b,68), hx::paccDynamic));
            	}


HX_DEFINE_DYNAMIC_FUNC2(UnitsAndBolts_obj,animateSpell,(void))

void UnitsAndBolts_obj::playOnce( ::openfl::display::MovieClip mc, ::Dynamic onComplete){
            		HX_BEGIN_LOCAL_FUNC_S4(hx::LocalFunc,_hx_Closure_0, ::battle::vision::UnitsAndBolts,_gthis, ::Dynamic,onComplete,::Array< ::Dynamic>,handler, ::openfl::display::MovieClip,mc) HXARGC(1)
            		void _hx_run( ::openfl::events::Event e){
            			HX_STACKFRAME(&_hx_pos_f2cdba6b03aa3b19_326_playOnce)
HXLINE( 326)			int _hx_tmp = mc->get_currentFrame();
HXDLIN( 326)			if ((_hx_tmp == mc->get_totalFrames())) {
HXLINE( 328)				mc->removeEventListener(HX_("enterFrame",f5,03,50,02),handler->__get((int)0),null());
HXLINE( 329)				_gthis->remove(mc);
HXLINE( 330)				::Reflect_obj::callMethod(onComplete,onComplete,::cpp::VirtualArray_obj::__new(0));
            			}
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_STACKFRAME(&_hx_pos_f2cdba6b03aa3b19_324_playOnce)
HXLINE( 323)		 ::battle::vision::UnitsAndBolts _gthis = hx::ObjectPtr<OBJ_>(this);
HXLINE( 325)		::Array< ::Dynamic> handler = ::Array_obj< ::Dynamic>::__new(1)->init(0,null());
HXDLIN( 325)		handler[(int)0] =  ::Dynamic(new _hx_Closure_0(_gthis,onComplete,handler,mc));
HXDLIN( 325)		 ::Dynamic handler1 = handler->__get((int)0);
HXLINE( 334)		mc->addEventListener(HX_("enterFrame",f5,03,50,02),handler1,null(),null(),null());
HXLINE( 335)		mc->play();
            	}


HX_DEFINE_DYNAMIC_FUNC2(UnitsAndBolts_obj,playOnce,(void))

void UnitsAndBolts_obj::cleanAndRespond( ::openfl::display::MovieClip animation){
            	HX_STACKFRAME(&_hx_pos_f2cdba6b03aa3b19_339_cleanAndRespond)
HXLINE( 340)		this->remove(animation);
HXLINE( 341)		::battle::IObservableModel_obj::respond(this->model);
            	}


HX_DEFINE_DYNAMIC_FUNC1(UnitsAndBolts_obj,cleanAndRespond,(void))


hx::ObjectPtr< UnitsAndBolts_obj > UnitsAndBolts_obj::__new(::Array< ::Dynamic> allies,::Array< ::Dynamic> enemies,::Dynamic model) {
	hx::ObjectPtr< UnitsAndBolts_obj > __this = new UnitsAndBolts_obj();
	__this->__construct(allies,enemies,model);
	return __this;
}

hx::ObjectPtr< UnitsAndBolts_obj > UnitsAndBolts_obj::__alloc(hx::Ctx *_hx_ctx,::Array< ::Dynamic> allies,::Array< ::Dynamic> enemies,::Dynamic model) {
	UnitsAndBolts_obj *__this = (UnitsAndBolts_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(UnitsAndBolts_obj), true, "battle.vision.UnitsAndBolts"));
	*(void **)__this = UnitsAndBolts_obj::_hx_vtable;
	__this->__construct(allies,enemies,model);
	return __this;
}

UnitsAndBolts_obj::UnitsAndBolts_obj()
{
}

void UnitsAndBolts_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(UnitsAndBolts);
	HX_MARK_MEMBER_NAME(model,"model");
	HX_MARK_MEMBER_NAME(warnField,"warnField");
	HX_MARK_MEMBER_NAME(unitsVision,"unitsVision");
	HX_MARK_MEMBER_NAME(alacrityBars,"alacrityBars");
	HX_MARK_MEMBER_NAME(selectedUnit,"selectedUnit");
	HX_MARK_MEMBER_NAME(UNITW,"UNITW");
	HX_MARK_MEMBER_NAME(UNITH,"UNITH");
	HX_MARK_MEMBER_NAME(ALACBARW,"ALACBARW");
	HX_MARK_MEMBER_NAME(WARNX,"WARNX");
	HX_MARK_MEMBER_NAME(WARNY,"WARNY");
	HX_MARK_MEMBER_NAME(WARNW,"WARNW");
	 ::openfl::display::Sprite_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void UnitsAndBolts_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(model,"model");
	HX_VISIT_MEMBER_NAME(warnField,"warnField");
	HX_VISIT_MEMBER_NAME(unitsVision,"unitsVision");
	HX_VISIT_MEMBER_NAME(alacrityBars,"alacrityBars");
	HX_VISIT_MEMBER_NAME(selectedUnit,"selectedUnit");
	HX_VISIT_MEMBER_NAME(UNITW,"UNITW");
	HX_VISIT_MEMBER_NAME(UNITH,"UNITH");
	HX_VISIT_MEMBER_NAME(ALACBARW,"ALACBARW");
	HX_VISIT_MEMBER_NAME(WARNX,"WARNX");
	HX_VISIT_MEMBER_NAME(WARNY,"WARNY");
	HX_VISIT_MEMBER_NAME(WARNW,"WARNW");
	 ::openfl::display::Sprite_obj::__Visit(HX_VISIT_ARG);
}

hx::Val UnitsAndBolts_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"init") ) { return hx::Val( init_dyn() ); }
		if (HX_FIELD_EQ(inName,"tick") ) { return hx::Val( tick_dyn() ); }
		if (HX_FIELD_EQ(inName,"miss") ) { return hx::Val( miss_dyn() ); }
		if (HX_FIELD_EQ(inName,"warn") ) { return hx::Val( warn_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"model") ) { return hx::Val( model ); }
		if (HX_FIELD_EQ(inName,"UNITW") ) { return hx::Val( UNITW ); }
		if (HX_FIELD_EQ(inName,"UNITH") ) { return hx::Val( UNITH ); }
		if (HX_FIELD_EQ(inName,"WARNX") ) { return hx::Val( WARNX ); }
		if (HX_FIELD_EQ(inName,"WARNY") ) { return hx::Val( WARNY ); }
		if (HX_FIELD_EQ(inName,"WARNW") ) { return hx::Val( WARNW ); }
		if (HX_FIELD_EQ(inName,"UNITX") ) { return hx::Val( UNITX_dyn() ); }
		if (HX_FIELD_EQ(inName,"UNITY") ) { return hx::Val( UNITY_dyn() ); }
		if (HX_FIELD_EQ(inName,"death") ) { return hx::Val( death_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"preTick") ) { return hx::Val( preTick_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"ALACBARW") ) { return hx::Val( ALACBARW ); }
		if (HX_FIELD_EQ(inName,"ALACBARX") ) { return hx::Val( ALACBARX_dyn() ); }
		if (HX_FIELD_EQ(inName,"ALACBARY") ) { return hx::Val( ALACBARY_dyn() ); }
		if (HX_FIELD_EQ(inName,"hpUpdate") ) { return hx::Val( hpUpdate_dyn() ); }
		if (HX_FIELD_EQ(inName,"abThrown") ) { return hx::Val( abThrown_dyn() ); }
		if (HX_FIELD_EQ(inName,"playOnce") ) { return hx::Val( playOnce_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"warnField") ) { return hx::Val( warnField ); }
		if (HX_FIELD_EQ(inName,"animateTF") ) { return hx::Val( animateTF_dyn() ); }
		if (HX_FIELD_EQ(inName,"abStriked") ) { return hx::Val( abStriked_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"manaUpdate") ) { return hx::Val( manaUpdate_dyn() ); }
		if (HX_FIELD_EQ(inName,"alacUpdate") ) { return hx::Val( alacUpdate_dyn() ); }
		if (HX_FIELD_EQ(inName,"abSelected") ) { return hx::Val( abSelected_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"unitsVision") ) { return hx::Val( unitsVision ); }
		if (HX_FIELD_EQ(inName,"moveHandler") ) { return hx::Val( moveHandler_dyn() ); }
		if (HX_FIELD_EQ(inName,"findAndGlow") ) { return hx::Val( findAndGlow_dyn() ); }
		if (HX_FIELD_EQ(inName,"animateBolt") ) { return hx::Val( animateBolt_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"alacrityBars") ) { return hx::Val( alacrityBars ); }
		if (HX_FIELD_EQ(inName,"selectedUnit") ) { return hx::Val( selectedUnit ); }
		if (HX_FIELD_EQ(inName,"clickHandler") ) { return hx::Val( clickHandler_dyn() ); }
		if (HX_FIELD_EQ(inName,"abDeselected") ) { return hx::Val( abDeselected_dyn() ); }
		if (HX_FIELD_EQ(inName,"animateSpell") ) { return hx::Val( animateSpell_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"animateKickIn") ) { return hx::Val( animateKickIn_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"unglowSelected") ) { return hx::Val( unglowSelected_dyn() ); }
		if (HX_FIELD_EQ(inName,"animateKickOut") ) { return hx::Val( animateKickOut_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"buffQueueUpdate") ) { return hx::Val( buffQueueUpdate_dyn() ); }
		if (HX_FIELD_EQ(inName,"cleanAndRespond") ) { return hx::Val( cleanAndRespond_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val UnitsAndBolts_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"model") ) { model=inValue.Cast< ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"UNITW") ) { UNITW=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"UNITH") ) { UNITH=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"WARNX") ) { WARNX=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"WARNY") ) { WARNY=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"WARNW") ) { WARNW=inValue.Cast< Float >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"ALACBARW") ) { ALACBARW=inValue.Cast< Float >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"warnField") ) { warnField=inValue.Cast<  ::openfl::text::TextField >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"unitsVision") ) { unitsVision=inValue.Cast<  ::battle::_hx_struct::UPair >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"alacrityBars") ) { alacrityBars=inValue.Cast<  ::battle::_hx_struct::UPair >(); return inValue; }
		if (HX_FIELD_EQ(inName,"selectedUnit") ) { selectedUnit=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void UnitsAndBolts_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("model","\xa9","\x23","\x58","\x0c"));
	outFields->push(HX_HCSTRING("warnField","\x94","\xa4","\xe6","\xcd"));
	outFields->push(HX_HCSTRING("unitsVision","\xb7","\x2e","\xc2","\xc7"));
	outFields->push(HX_HCSTRING("alacrityBars","\xe9","\x75","\x81","\x76"));
	outFields->push(HX_HCSTRING("selectedUnit","\x7f","\xea","\x43","\xde"));
	outFields->push(HX_HCSTRING("UNITW","\x53","\xa1","\xd5","\x24"));
	outFields->push(HX_HCSTRING("UNITH","\x44","\xa1","\xd5","\x24"));
	outFields->push(HX_HCSTRING("ALACBARW","\x51","\x3c","\x0b","\x9b"));
	outFields->push(HX_HCSTRING("WARNX","\x52","\xd3","\x11","\x43"));
	outFields->push(HX_HCSTRING("WARNY","\x53","\xd3","\x11","\x43"));
	outFields->push(HX_HCSTRING("WARNW","\x51","\xd3","\x11","\x43"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo UnitsAndBolts_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::battle::IObservableModel*/ ,(int)offsetof(UnitsAndBolts_obj,model),HX_HCSTRING("model","\xa9","\x23","\x58","\x0c")},
	{hx::fsObject /*::openfl::text::TextField*/ ,(int)offsetof(UnitsAndBolts_obj,warnField),HX_HCSTRING("warnField","\x94","\xa4","\xe6","\xcd")},
	{hx::fsObject /*::battle::_hx_struct::UPair*/ ,(int)offsetof(UnitsAndBolts_obj,unitsVision),HX_HCSTRING("unitsVision","\xb7","\x2e","\xc2","\xc7")},
	{hx::fsObject /*::battle::_hx_struct::UPair*/ ,(int)offsetof(UnitsAndBolts_obj,alacrityBars),HX_HCSTRING("alacrityBars","\xe9","\x75","\x81","\x76")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(UnitsAndBolts_obj,selectedUnit),HX_HCSTRING("selectedUnit","\x7f","\xea","\x43","\xde")},
	{hx::fsFloat,(int)offsetof(UnitsAndBolts_obj,UNITW),HX_HCSTRING("UNITW","\x53","\xa1","\xd5","\x24")},
	{hx::fsFloat,(int)offsetof(UnitsAndBolts_obj,UNITH),HX_HCSTRING("UNITH","\x44","\xa1","\xd5","\x24")},
	{hx::fsFloat,(int)offsetof(UnitsAndBolts_obj,ALACBARW),HX_HCSTRING("ALACBARW","\x51","\x3c","\x0b","\x9b")},
	{hx::fsFloat,(int)offsetof(UnitsAndBolts_obj,WARNX),HX_HCSTRING("WARNX","\x52","\xd3","\x11","\x43")},
	{hx::fsFloat,(int)offsetof(UnitsAndBolts_obj,WARNY),HX_HCSTRING("WARNY","\x53","\xd3","\x11","\x43")},
	{hx::fsFloat,(int)offsetof(UnitsAndBolts_obj,WARNW),HX_HCSTRING("WARNW","\x51","\xd3","\x11","\x43")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *UnitsAndBolts_obj_sStaticStorageInfo = 0;
#endif

static ::String UnitsAndBolts_obj_sMemberFields[] = {
	HX_HCSTRING("model","\xa9","\x23","\x58","\x0c"),
	HX_HCSTRING("warnField","\x94","\xa4","\xe6","\xcd"),
	HX_HCSTRING("unitsVision","\xb7","\x2e","\xc2","\xc7"),
	HX_HCSTRING("alacrityBars","\xe9","\x75","\x81","\x76"),
	HX_HCSTRING("selectedUnit","\x7f","\xea","\x43","\xde"),
	HX_HCSTRING("UNITW","\x53","\xa1","\xd5","\x24"),
	HX_HCSTRING("UNITH","\x44","\xa1","\xd5","\x24"),
	HX_HCSTRING("ALACBARW","\x51","\x3c","\x0b","\x9b"),
	HX_HCSTRING("WARNX","\x52","\xd3","\x11","\x43"),
	HX_HCSTRING("WARNY","\x53","\xd3","\x11","\x43"),
	HX_HCSTRING("WARNW","\x51","\xd3","\x11","\x43"),
	HX_HCSTRING("ALACBARX","\x52","\x3c","\x0b","\x9b"),
	HX_HCSTRING("ALACBARY","\x53","\x3c","\x0b","\x9b"),
	HX_HCSTRING("UNITX","\x54","\xa1","\xd5","\x24"),
	HX_HCSTRING("UNITY","\x55","\xa1","\xd5","\x24"),
	HX_HCSTRING("init","\x10","\x3b","\xbb","\x45"),
	HX_HCSTRING("animateTF","\x53","\xce","\x31","\x4b"),
	HX_HCSTRING("clickHandler","\x62","\xf4","\xff","\x37"),
	HX_HCSTRING("moveHandler","\xb9","\xe8","\x51","\x1e"),
	HX_HCSTRING("findAndGlow","\xcb","\xed","\x20","\x80"),
	HX_HCSTRING("unglowSelected","\xe1","\x11","\x68","\xbd"),
	HX_HCSTRING("hpUpdate","\x31","\x4b","\x7c","\x29"),
	HX_HCSTRING("manaUpdate","\xf0","\xd5","\x16","\xde"),
	HX_HCSTRING("alacUpdate","\x76","\xdc","\x93","\x56"),
	HX_HCSTRING("buffQueueUpdate","\x67","\x13","\xc9","\x27"),
	HX_HCSTRING("preTick","\x20","\x9d","\x61","\x25"),
	HX_HCSTRING("tick","\x5d","\xc3","\xfc","\x4c"),
	HX_HCSTRING("miss","\xfc","\x52","\x5c","\x48"),
	HX_HCSTRING("death","\x34","\x8f","\x1e","\xd7"),
	HX_HCSTRING("abSelected","\x5c","\x84","\xc0","\x27"),
	HX_HCSTRING("abDeselected","\x1d","\x07","\x21","\x3d"),
	HX_HCSTRING("abThrown","\x49","\x4c","\xaa","\x5a"),
	HX_HCSTRING("abStriked","\x11","\xe7","\x0a","\x99"),
	HX_HCSTRING("warn","\x46","\x62","\xf2","\x4e"),
	HX_HCSTRING("animateBolt","\xd6","\xec","\x39","\xca"),
	HX_HCSTRING("animateKickIn","\xcc","\x92","\x04","\x5d"),
	HX_HCSTRING("animateKickOut","\xc7","\x73","\x00","\x07"),
	HX_HCSTRING("animateSpell","\x47","\x0b","\xe9","\xf2"),
	HX_HCSTRING("playOnce","\x95","\xe1","\xc5","\x39"),
	HX_HCSTRING("cleanAndRespond","\x27","\xea","\x2e","\x90"),
	::String(null()) };

static void UnitsAndBolts_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(UnitsAndBolts_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void UnitsAndBolts_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(UnitsAndBolts_obj::__mClass,"__mClass");
};

#endif

hx::Class UnitsAndBolts_obj::__mClass;

void UnitsAndBolts_obj::__register()
{
	hx::Object *dummy = new UnitsAndBolts_obj;
	UnitsAndBolts_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("battle.vision.UnitsAndBolts","\x46","\x87","\x08","\xff");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = UnitsAndBolts_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(UnitsAndBolts_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< UnitsAndBolts_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = UnitsAndBolts_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = UnitsAndBolts_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = UnitsAndBolts_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace battle
} // end namespace vision
