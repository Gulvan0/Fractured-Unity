// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_Assets
#include <Assets.h>
#endif
#ifndef INCLUDED_Element
#include <Element.h>
#endif
#ifndef INCLUDED_ID
#include <ID.h>
#endif
#ifndef INCLUDED_SSprite
#include <SSprite.h>
#endif
#ifndef INCLUDED_battle_Buff
#include <battle/Buff.h>
#endif
#ifndef INCLUDED_battle_struct_Countdown
#include <battle/struct/Countdown.h>
#endif
#ifndef INCLUDED_battle_vision_BuffRect
#include <battle/vision/BuffRect.h>
#endif
#ifndef INCLUDED_lime_text__UTF8String_UTF8String_Impl_
#include <lime/text/_UTF8String/UTF8String_Impl_.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_filters_BitmapFilter
#include <openfl/filters/BitmapFilter.h>
#endif
#ifndef INCLUDED_openfl_filters_DropShadowFilter
#include <openfl/filters/DropShadowFilter.h>
#endif
#ifndef INCLUDED_openfl_text_TextField
#include <openfl/text/TextField.h>
#endif
#ifndef INCLUDED_openfl_text_TextFormat
#include <openfl/text/TextFormat.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_daa148e82ebbbad6_15_new,"battle.vision.BuffRect","new",0xfe515b39,"battle.vision.BuffRect.new","battle/vision/BuffRect.hx",15,0x36b83037)
HX_LOCAL_STACK_FRAME(_hx_pos_daa148e82ebbbad6_28_tickAndIsOver,"battle.vision.BuffRect","tickAndIsOver",0x23863d91,"battle.vision.BuffRect.tickAndIsOver","battle/vision/BuffRect.hx",28,0x36b83037)
HX_LOCAL_STACK_FRAME(_hx_pos_daa148e82ebbbad6_49_createTF,"battle.vision.BuffRect","createTF",0x5c13e9f5,"battle.vision.BuffRect.createTF","battle/vision/BuffRect.hx",49,0x36b83037)
namespace battle{
namespace vision{

void BuffRect_obj::__construct( ::battle::Buff buff){
            	HX_GC_STACKFRAME(&_hx_pos_daa148e82ebbbad6_15_new)
HXLINE(  19)		this->BG_HEIGHT = ((Float)30);
HXLINE(  18)		this->BG_WIDTH = ((Float)18);
HXLINE(  37)		super::__construct();
HXLINE(  38)		this->bg = ::Assets_obj::getBuffBox(buff->element);
HXLINE(  39)		this->symbol = ::Assets_obj::getBuffMark(buff->id);
HXLINE(  40)		this->duration =  ::battle::_hx_struct::Countdown_obj::__alloc( HX_CTX ,buff->duration,buff->duration);
HXLINE(  41)		this->durationText = this->createTF(this->duration->value);
HXLINE(  43)		this->add(this->bg,(int)0,(int)0);
HXLINE(  44)		this->add(this->symbol,(int)0,(int)0);
HXLINE(  45)		this->add(this->durationText,(int)0,(int)10);
            	}

Dynamic BuffRect_obj::__CreateEmpty() { return new BuffRect_obj; }

void *BuffRect_obj::_hx_vtable = 0;

Dynamic BuffRect_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< BuffRect_obj > _hx_result = new BuffRect_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool BuffRect_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x1b123bf8) {
		if (inClassId<=(int)0x17120186) {
			if (inClassId<=(int)0x0ddfced7) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0ddfced7;
			} else {
				return inClassId==(int)0x17120186;
			}
		} else {
			return inClassId==(int)0x19c29573 || inClassId==(int)0x1b123bf8;
		}
	} else {
		if (inClassId<=(int)0x3f2b00af) {
			return inClassId==(int)0x37754fbb || inClassId==(int)0x3f2b00af;
		} else {
			return inClassId==(int)0x739fd0b8;
		}
	}
}

bool BuffRect_obj::tickAndIsOver(){
            	HX_STACKFRAME(&_hx_pos_daa148e82ebbbad6_28_tickAndIsOver)
HXLINE(  29)		if ((--this->duration->value == (int)0)) {
HXLINE(  30)			return true;
            		}
HXLINE(  31)		 ::openfl::text::TextField _hx_tmp = this->durationText;
HXDLIN(  31)		_hx_tmp->set_text(::lime::text::_UTF8String::UTF8String_Impl__obj::fromDynamic(this->duration->value));
HXLINE(  32)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(BuffRect_obj,tickAndIsOver,return )

 ::openfl::text::TextField BuffRect_obj::createTF(int dur){
            	HX_GC_STACKFRAME(&_hx_pos_daa148e82ebbbad6_49_createTF)
HXLINE(  50)		 ::openfl::text::TextField tf =  ::openfl::text::TextField_obj::__alloc( HX_CTX );
HXLINE(  51)		tf->set_text(::lime::text::_UTF8String::UTF8String_Impl__obj::fromDynamic(this->duration->value));
HXLINE(  52)		tf->set_width(this->BG_WIDTH);
HXLINE(  53)		tf->set_selectable(false);
HXLINE(  54)		tf->setTextFormat( ::openfl::text::TextFormat_obj::__alloc( HX_CTX ,HX_("Times New Roman",03,86,44,c3),(int)16,(int)16777215,true,null(),null(),null(),null(),(int)0,null(),null(),null(),null()),null(),null());
HXLINE(  55)		tf->set_filters(::Array_obj< ::Dynamic>::__new(1)->init(0, ::openfl::filters::DropShadowFilter_obj::__alloc( HX_CTX ,(int)1,(int)45,(int)0,(int)1,(int)0,(int)0,null(),null(),null(),null(),null())));
HXLINE(  56)		return tf;
            	}


HX_DEFINE_DYNAMIC_FUNC1(BuffRect_obj,createTF,return )


hx::ObjectPtr< BuffRect_obj > BuffRect_obj::__new( ::battle::Buff buff) {
	hx::ObjectPtr< BuffRect_obj > __this = new BuffRect_obj();
	__this->__construct(buff);
	return __this;
}

hx::ObjectPtr< BuffRect_obj > BuffRect_obj::__alloc(hx::Ctx *_hx_ctx, ::battle::Buff buff) {
	BuffRect_obj *__this = (BuffRect_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(BuffRect_obj), true, "battle.vision.BuffRect"));
	*(void **)__this = BuffRect_obj::_hx_vtable;
	__this->__construct(buff);
	return __this;
}

BuffRect_obj::BuffRect_obj()
{
}

void BuffRect_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(BuffRect);
	HX_MARK_MEMBER_NAME(BG_WIDTH,"BG_WIDTH");
	HX_MARK_MEMBER_NAME(BG_HEIGHT,"BG_HEIGHT");
	HX_MARK_MEMBER_NAME(bg,"bg");
	HX_MARK_MEMBER_NAME(symbol,"symbol");
	HX_MARK_MEMBER_NAME(durationText,"durationText");
	HX_MARK_MEMBER_NAME(duration,"duration");
	 ::openfl::display::Sprite_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void BuffRect_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(BG_WIDTH,"BG_WIDTH");
	HX_VISIT_MEMBER_NAME(BG_HEIGHT,"BG_HEIGHT");
	HX_VISIT_MEMBER_NAME(bg,"bg");
	HX_VISIT_MEMBER_NAME(symbol,"symbol");
	HX_VISIT_MEMBER_NAME(durationText,"durationText");
	HX_VISIT_MEMBER_NAME(duration,"duration");
	 ::openfl::display::Sprite_obj::__Visit(HX_VISIT_ARG);
}

hx::Val BuffRect_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"bg") ) { return hx::Val( bg ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"symbol") ) { return hx::Val( symbol ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"BG_WIDTH") ) { return hx::Val( BG_WIDTH ); }
		if (HX_FIELD_EQ(inName,"duration") ) { return hx::Val( duration ); }
		if (HX_FIELD_EQ(inName,"createTF") ) { return hx::Val( createTF_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"BG_HEIGHT") ) { return hx::Val( BG_HEIGHT ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"durationText") ) { return hx::Val( durationText ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"tickAndIsOver") ) { return hx::Val( tickAndIsOver_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val BuffRect_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"bg") ) { bg=inValue.Cast<  ::openfl::display::Sprite >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"symbol") ) { symbol=inValue.Cast<  ::openfl::display::Sprite >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"BG_WIDTH") ) { BG_WIDTH=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"duration") ) { duration=inValue.Cast<  ::battle::_hx_struct::Countdown >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"BG_HEIGHT") ) { BG_HEIGHT=inValue.Cast< Float >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"durationText") ) { durationText=inValue.Cast<  ::openfl::text::TextField >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void BuffRect_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("BG_WIDTH","\xac","\x90","\xad","\x8b"));
	outFields->push(HX_HCSTRING("BG_HEIGHT","\x61","\x7e","\x80","\x62"));
	outFields->push(HX_HCSTRING("bg","\xc5","\x55","\x00","\x00"));
	outFields->push(HX_HCSTRING("symbol","\x58","\xaf","\xdd","\xee"));
	outFields->push(HX_HCSTRING("durationText","\x21","\x42","\xbd","\x0b"));
	outFields->push(HX_HCSTRING("duration","\x54","\x0f","\x8e","\x14"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo BuffRect_obj_sMemberStorageInfo[] = {
	{hx::fsFloat,(int)offsetof(BuffRect_obj,BG_WIDTH),HX_HCSTRING("BG_WIDTH","\xac","\x90","\xad","\x8b")},
	{hx::fsFloat,(int)offsetof(BuffRect_obj,BG_HEIGHT),HX_HCSTRING("BG_HEIGHT","\x61","\x7e","\x80","\x62")},
	{hx::fsObject /*::openfl::display::Sprite*/ ,(int)offsetof(BuffRect_obj,bg),HX_HCSTRING("bg","\xc5","\x55","\x00","\x00")},
	{hx::fsObject /*::openfl::display::Sprite*/ ,(int)offsetof(BuffRect_obj,symbol),HX_HCSTRING("symbol","\x58","\xaf","\xdd","\xee")},
	{hx::fsObject /*::openfl::text::TextField*/ ,(int)offsetof(BuffRect_obj,durationText),HX_HCSTRING("durationText","\x21","\x42","\xbd","\x0b")},
	{hx::fsObject /*::battle::_hx_struct::Countdown*/ ,(int)offsetof(BuffRect_obj,duration),HX_HCSTRING("duration","\x54","\x0f","\x8e","\x14")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *BuffRect_obj_sStaticStorageInfo = 0;
#endif

static ::String BuffRect_obj_sMemberFields[] = {
	HX_HCSTRING("BG_WIDTH","\xac","\x90","\xad","\x8b"),
	HX_HCSTRING("BG_HEIGHT","\x61","\x7e","\x80","\x62"),
	HX_HCSTRING("bg","\xc5","\x55","\x00","\x00"),
	HX_HCSTRING("symbol","\x58","\xaf","\xdd","\xee"),
	HX_HCSTRING("durationText","\x21","\x42","\xbd","\x0b"),
	HX_HCSTRING("duration","\x54","\x0f","\x8e","\x14"),
	HX_HCSTRING("tickAndIsOver","\x78","\x49","\xef","\xc4"),
	HX_HCSTRING("createTF","\x6e","\x67","\xf4","\x2b"),
	::String(null()) };

static void BuffRect_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(BuffRect_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void BuffRect_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(BuffRect_obj::__mClass,"__mClass");
};

#endif

hx::Class BuffRect_obj::__mClass;

void BuffRect_obj::__register()
{
	hx::Object *dummy = new BuffRect_obj;
	BuffRect_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("battle.vision.BuffRect","\xc7","\x4a","\x6b","\x92");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = BuffRect_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(BuffRect_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< BuffRect_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = BuffRect_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = BuffRect_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = BuffRect_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace battle
} // end namespace vision
