// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_Assets
#include <Assets.h>
#endif
#ifndef INCLUDED_MathUtils
#include <MathUtils.h>
#endif
#ifndef INCLUDED_SSprite
#include <SSprite.h>
#endif
#ifndef INCLUDED_battle_IObservableModel
#include <battle/IObservableModel.h>
#endif
#ifndef INCLUDED_battle_enums_InputMode
#include <battle/enums/InputMode.h>
#endif
#ifndef INCLUDED_battle_vision_Common
#include <battle/vision/Common.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_lime_app_IModule
#include <lime/app/IModule.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_MovieClip
#include <openfl/display/MovieClip.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_display_Stage
#include <openfl/display/Stage.h>
#endif
#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_KeyboardEvent
#include <openfl/events/KeyboardEvent.h>
#endif
#ifndef INCLUDED_openfl_events_MouseEvent
#include <openfl/events/MouseEvent.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_969ed04c7da209a5_91_new,"battle.vision.Common","new",0xa1ea55cd,"battle.vision.Common.new","battle/vision/Common.hx",91,0xf2766c23)
HX_LOCAL_STACK_FRAME(_hx_pos_969ed04c7da209a5_54_keyUpHandler,"battle.vision.Common","keyUpHandler",0x64fc5203,"battle.vision.Common.keyUpHandler","battle/vision/Common.hx",54,0xf2766c23)
HX_LOCAL_STACK_FRAME(_hx_pos_969ed04c7da209a5_62_keyHandler,"battle.vision.Common","keyHandler",0xa14c021e,"battle.vision.Common.keyHandler","battle/vision/Common.hx",62,0xf2766c23)
HX_LOCAL_STACK_FRAME(_hx_pos_969ed04c7da209a5_76_clickHandler,"battle.vision.Common","clickHandler",0x43a5d955,"battle.vision.Common.clickHandler","battle/vision/Common.hx",76,0xf2766c23)
HX_LOCAL_STACK_FRAME(_hx_pos_969ed04c7da209a5_82_init,"battle.vision.Common","init",0x07d97503,"battle.vision.Common.init","battle/vision/Common.hx",82,0xf2766c23)
namespace battle{
namespace vision{

void Common_obj::__construct(int zone,::Dynamic model){
            	HX_STACKFRAME(&_hx_pos_969ed04c7da209a5_91_new)
HXLINE(  92)		super::__construct();
HXLINE(  94)		::battle::vision::Common_obj::shiftKey = false;
HXLINE(  95)		this->model = model;
HXLINE(  96)		this->bg = ::Assets_obj::getBattleBG(zone);
            	}

Dynamic Common_obj::__CreateEmpty() { return new Common_obj; }

void *Common_obj::_hx_vtable = 0;

Dynamic Common_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Common_obj > _hx_result = new Common_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool Common_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x19c29573) {
		if (inClassId<=(int)0x12db1feb) {
			if (inClassId<=(int)0x0ddfced7) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0ddfced7;
			} else {
				return inClassId==(int)0x12db1feb;
			}
		} else {
			return inClassId==(int)0x17120186 || inClassId==(int)0x19c29573;
		}
	} else {
		if (inClassId<=(int)0x3f2b00af) {
			return inClassId==(int)0x1b123bf8 || inClassId==(int)0x3f2b00af;
		} else {
			return inClassId==(int)0x739fd0b8;
		}
	}
}

void Common_obj::keyUpHandler( ::openfl::events::KeyboardEvent e){
            	HX_STACKFRAME(&_hx_pos_969ed04c7da209a5_54_keyUpHandler)
HXLINE(  55)		 ::Dynamic _hx_tmp = ::haxe::Log_obj::trace;
HXDLIN(  55)		_hx_tmp((HX_("keyUp handled: ",9c,93,24,f5) + e->keyCode),hx::SourceInfo(HX_("Common.hx",53,fa,ea,7d),55,HX_("battle.vision.Common",5b,6b,a6,f2),HX_("keyUpHandler",10,6d,56,59)));
HXLINE(  57)		if ((e->keyCode == (int)16)) {
HXLINE(  58)			::battle::vision::Common_obj::shiftKey = false;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Common_obj,keyUpHandler,(void))

void Common_obj::keyHandler( ::openfl::events::KeyboardEvent e){
            	HX_STACKFRAME(&_hx_pos_969ed04c7da209a5_62_keyHandler)
HXLINE(  63)		 ::Dynamic _hx_tmp = ::haxe::Log_obj::trace;
HXDLIN(  63)		_hx_tmp((HX_("key handled: ",a1,ab,d8,b4) + e->keyCode),hx::SourceInfo(HX_("Common.hx",53,fa,ea,7d),63,HX_("battle.vision.Common",5b,6b,a6,f2),HX_("keyHandler",eb,4f,5d,b4)));
HXLINE(  65)		if ((e->keyCode == (int)16)) {
HXLINE(  66)			::battle::vision::Common_obj::shiftKey = true;
            		}
            		else {
HXLINE(  67)			if (::MathUtils_obj::inRange(e->keyCode,(int)49,(int)57,null(),null())) {
HXLINE(  68)				if (::battle::vision::Common_obj::shiftKey) {
HXLINE(  69)					::Dynamic _hx_tmp1 = this->model;
HXDLIN(  69)					::battle::IObservableModel_obj::printAbilityInfo(_hx_tmp1,(e->keyCode - (int)49));
            				}
            				else {
HXLINE(  70)					if (hx::IsNotEq( ::battle::IObservableModel_obj::getInputMode(this->model),::battle::enums::InputMode_obj::None_dyn() )) {
HXLINE(  71)						::Dynamic _hx_tmp2 = this->model;
HXDLIN(  71)						::battle::IObservableModel_obj::choose(_hx_tmp2,(e->keyCode - (int)49));
            					}
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Common_obj,keyHandler,(void))

void Common_obj::clickHandler( ::openfl::events::MouseEvent e){
            	HX_STACKFRAME(&_hx_pos_969ed04c7da209a5_76_clickHandler)
HXDLIN(  76)		 ::Dynamic _hx_tmp = ::haxe::Log_obj::trace;
HXDLIN(  76)		_hx_tmp((((HX_("click handled: ",8a,eb,1c,58) + e->stageX) + HX_(", ",74,26,00,00)) + e->stageY),hx::SourceInfo(HX_("Common.hx",53,fa,ea,7d),76,HX_("battle.vision.Common",5b,6b,a6,f2),HX_("clickHandler",62,f4,ff,37)));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Common_obj,clickHandler,(void))

void Common_obj::init(){
            	HX_STACKFRAME(&_hx_pos_969ed04c7da209a5_82_init)
HXLINE(  83)		this->add(this->bg,(int)0,(int)0);
HXLINE(  85)		this->stage->addEventListener(HX_("keyDown",a1,69,47,9c),this->keyHandler_dyn(),null(),null(),null());
HXLINE(  86)		this->stage->addEventListener(HX_("keyUp",da,b9,fe,de),this->keyUpHandler_dyn(),null(),null(),null());
HXLINE(  87)		this->stage->addEventListener(HX_("click",48,7c,5e,48),this->clickHandler_dyn(),null(),null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(Common_obj,init,(void))

bool Common_obj::shiftKey;


hx::ObjectPtr< Common_obj > Common_obj::__new(int zone,::Dynamic model) {
	hx::ObjectPtr< Common_obj > __this = new Common_obj();
	__this->__construct(zone,model);
	return __this;
}

hx::ObjectPtr< Common_obj > Common_obj::__alloc(hx::Ctx *_hx_ctx,int zone,::Dynamic model) {
	Common_obj *__this = (Common_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Common_obj), true, "battle.vision.Common"));
	*(void **)__this = Common_obj::_hx_vtable;
	__this->__construct(zone,model);
	return __this;
}

Common_obj::Common_obj()
{
}

void Common_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Common);
	HX_MARK_MEMBER_NAME(model,"model");
	HX_MARK_MEMBER_NAME(bg,"bg");
	 ::openfl::display::Sprite_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Common_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(model,"model");
	HX_VISIT_MEMBER_NAME(bg,"bg");
	 ::openfl::display::Sprite_obj::__Visit(HX_VISIT_ARG);
}

hx::Val Common_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"bg") ) { return hx::Val( bg ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"init") ) { return hx::Val( init_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"model") ) { return hx::Val( model ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"keyHandler") ) { return hx::Val( keyHandler_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"keyUpHandler") ) { return hx::Val( keyUpHandler_dyn() ); }
		if (HX_FIELD_EQ(inName,"clickHandler") ) { return hx::Val( clickHandler_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool Common_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"shiftKey") ) { outValue = ( shiftKey ); return true; }
	}
	return false;
}

hx::Val Common_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"bg") ) { bg=inValue.Cast<  ::openfl::display::DisplayObject >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"model") ) { model=inValue.Cast< ::Dynamic >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool Common_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"shiftKey") ) { shiftKey=ioValue.Cast< bool >(); return true; }
	}
	return false;
}

void Common_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("model","\xa9","\x23","\x58","\x0c"));
	outFields->push(HX_HCSTRING("bg","\xc5","\x55","\x00","\x00"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Common_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::battle::IObservableModel*/ ,(int)offsetof(Common_obj,model),HX_HCSTRING("model","\xa9","\x23","\x58","\x0c")},
	{hx::fsObject /*::openfl::display::DisplayObject*/ ,(int)offsetof(Common_obj,bg),HX_HCSTRING("bg","\xc5","\x55","\x00","\x00")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo Common_obj_sStaticStorageInfo[] = {
	{hx::fsBool,(void *) &Common_obj::shiftKey,HX_HCSTRING("shiftKey","\x3d","\x92","\x9f","\x99")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String Common_obj_sMemberFields[] = {
	HX_HCSTRING("model","\xa9","\x23","\x58","\x0c"),
	HX_HCSTRING("bg","\xc5","\x55","\x00","\x00"),
	HX_HCSTRING("keyUpHandler","\x10","\x6d","\x56","\x59"),
	HX_HCSTRING("keyHandler","\xeb","\x4f","\x5d","\xb4"),
	HX_HCSTRING("clickHandler","\x62","\xf4","\xff","\x37"),
	HX_HCSTRING("init","\x10","\x3b","\xbb","\x45"),
	::String(null()) };

static void Common_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Common_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(Common_obj::shiftKey,"shiftKey");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Common_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Common_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(Common_obj::shiftKey,"shiftKey");
};

#endif

hx::Class Common_obj::__mClass;

static ::String Common_obj_sStaticFields[] = {
	HX_HCSTRING("shiftKey","\x3d","\x92","\x9f","\x99"),
	::String(null())
};

void Common_obj::__register()
{
	hx::Object *dummy = new Common_obj;
	Common_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("battle.vision.Common","\x5b","\x6b","\xa6","\xf2");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Common_obj::__GetStatic;
	__mClass->mSetStaticField = &Common_obj::__SetStatic;
	__mClass->mMarkFunc = Common_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Common_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Common_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Common_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Common_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Common_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Common_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace battle
} // end namespace vision
