// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_Element
#include <Element.h>
#endif
#ifndef INCLUDED_ID
#include <ID.h>
#endif
#ifndef INCLUDED_XMLUtils
#include <XMLUtils.h>
#endif
#ifndef INCLUDED_battle_Ability
#include <battle/Ability.h>
#endif
#ifndef INCLUDED_battle_enums_AbilityType
#include <battle/enums/AbilityType.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_b2f5a262082343cd_26_new,"battle.Ability","new",0x18242346,"battle.Ability.new","battle/Ability.hx",26,0x03d8d22b)
HX_LOCAL_STACK_FRAME(_hx_pos_b2f5a262082343cd_39_checkEmpty,"battle.Ability","checkEmpty",0x8ddab27f,"battle.Ability.checkEmpty","battle/Ability.hx",39,0x03d8d22b)
namespace battle{

void Ability_obj::__construct( ::ID id){
            	HX_STACKFRAME(&_hx_pos_b2f5a262082343cd_26_new)
HXLINE(  27)		this->id = id;
HXLINE(  28)		bool _hx_tmp;
HXDLIN(  28)		bool _hx_tmp1;
HXDLIN(  28)		if (hx::IsNotEq( this->id,::ID_obj::EmptyAbility_dyn() )) {
HXLINE(  28)			_hx_tmp1 = hx::IsEq( this->id,::ID_obj::LockAbility_dyn() );
            		}
            		else {
HXLINE(  28)			_hx_tmp1 = true;
            		}
HXDLIN(  28)		if (!(_hx_tmp1)) {
HXLINE(  28)			_hx_tmp = hx::IsNotEq( id,::ID_obj::NullID_dyn() );
            		}
            		else {
HXLINE(  28)			_hx_tmp = false;
            		}
HXDLIN(  28)		if (_hx_tmp) {
HXLINE(  30)			this->name = ( (::String)(::XMLUtils_obj::parseAbility(id,HX_("name",4b,72,ff,48),HX_("",00,00,00,00))) );
HXLINE(  31)			this->description = ( (::String)(::XMLUtils_obj::parseAbility(id,HX_("description",fc,08,1d,5f),HX_("",00,00,00,00))) );
HXLINE(  32)			this->type = ::XMLUtils_obj::parseAbility(id,HX_("type",ba,f2,08,4d),::battle::enums::AbilityType_obj::Active_dyn());
HXLINE(  33)			this->element = ::XMLUtils_obj::parseAbility(id,HX_("element",bc,ae,54,06),::Element_obj::Physical_dyn());
            		}
            	}

Dynamic Ability_obj::__CreateEmpty() { return new Ability_obj; }

void *Ability_obj::_hx_vtable = 0;

Dynamic Ability_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Ability_obj > _hx_result = new Ability_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool Ability_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x76cf12ae;
}

bool Ability_obj::checkEmpty(){
            	HX_STACKFRAME(&_hx_pos_b2f5a262082343cd_39_checkEmpty)
HXDLIN(  39)		if (hx::IsNotEq( this->id,::ID_obj::EmptyAbility_dyn() )) {
HXDLIN(  39)			return hx::IsEq( this->id,::ID_obj::LockAbility_dyn() );
            		}
            		else {
HXDLIN(  39)			return true;
            		}
HXDLIN(  39)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Ability_obj,checkEmpty,return )


hx::ObjectPtr< Ability_obj > Ability_obj::__new( ::ID id) {
	hx::ObjectPtr< Ability_obj > __this = new Ability_obj();
	__this->__construct(id);
	return __this;
}

hx::ObjectPtr< Ability_obj > Ability_obj::__alloc(hx::Ctx *_hx_ctx, ::ID id) {
	Ability_obj *__this = (Ability_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Ability_obj), true, "battle.Ability"));
	*(void **)__this = Ability_obj::_hx_vtable;
	__this->__construct(id);
	return __this;
}

Ability_obj::Ability_obj()
{
}

void Ability_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Ability);
	HX_MARK_MEMBER_NAME(id,"id");
	HX_MARK_MEMBER_NAME(name,"name");
	HX_MARK_MEMBER_NAME(description,"description");
	HX_MARK_MEMBER_NAME(type,"type");
	HX_MARK_MEMBER_NAME(element,"element");
	HX_MARK_END_CLASS();
}

void Ability_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(id,"id");
	HX_VISIT_MEMBER_NAME(name,"name");
	HX_VISIT_MEMBER_NAME(description,"description");
	HX_VISIT_MEMBER_NAME(type,"type");
	HX_VISIT_MEMBER_NAME(element,"element");
}

hx::Val Ability_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"id") ) { return hx::Val( id ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"name") ) { return hx::Val( name ); }
		if (HX_FIELD_EQ(inName,"type") ) { return hx::Val( type ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"element") ) { return hx::Val( element ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"checkEmpty") ) { return hx::Val( checkEmpty_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"description") ) { return hx::Val( description ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Ability_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"id") ) { id=inValue.Cast<  ::ID >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"name") ) { name=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"type") ) { type=inValue.Cast<  ::battle::enums::AbilityType >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"element") ) { element=inValue.Cast<  ::Element >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"description") ) { description=inValue.Cast< ::String >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Ability_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("id","\xdb","\x5b","\x00","\x00"));
	outFields->push(HX_HCSTRING("name","\x4b","\x72","\xff","\x48"));
	outFields->push(HX_HCSTRING("description","\xfc","\x08","\x1d","\x5f"));
	outFields->push(HX_HCSTRING("type","\xba","\xf2","\x08","\x4d"));
	outFields->push(HX_HCSTRING("element","\xbc","\xae","\x54","\x06"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Ability_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::ID*/ ,(int)offsetof(Ability_obj,id),HX_HCSTRING("id","\xdb","\x5b","\x00","\x00")},
	{hx::fsString,(int)offsetof(Ability_obj,name),HX_HCSTRING("name","\x4b","\x72","\xff","\x48")},
	{hx::fsString,(int)offsetof(Ability_obj,description),HX_HCSTRING("description","\xfc","\x08","\x1d","\x5f")},
	{hx::fsObject /*::battle::enums::AbilityType*/ ,(int)offsetof(Ability_obj,type),HX_HCSTRING("type","\xba","\xf2","\x08","\x4d")},
	{hx::fsObject /*::Element*/ ,(int)offsetof(Ability_obj,element),HX_HCSTRING("element","\xbc","\xae","\x54","\x06")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Ability_obj_sStaticStorageInfo = 0;
#endif

static ::String Ability_obj_sMemberFields[] = {
	HX_HCSTRING("id","\xdb","\x5b","\x00","\x00"),
	HX_HCSTRING("name","\x4b","\x72","\xff","\x48"),
	HX_HCSTRING("description","\xfc","\x08","\x1d","\x5f"),
	HX_HCSTRING("type","\xba","\xf2","\x08","\x4d"),
	HX_HCSTRING("element","\xbc","\xae","\x54","\x06"),
	HX_HCSTRING("checkEmpty","\xa5","\x3c","\xca","\x7f"),
	::String(null()) };

static void Ability_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Ability_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Ability_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Ability_obj::__mClass,"__mClass");
};

#endif

hx::Class Ability_obj::__mClass;

void Ability_obj::__register()
{
	hx::Object *dummy = new Ability_obj;
	Ability_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("battle.Ability","\x54","\xc8","\x3b","\x3e");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Ability_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Ability_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Ability_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Ability_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Ability_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Ability_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace battle
