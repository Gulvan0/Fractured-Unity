// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_Element
#include <Element.h>
#endif
#ifndef INCLUDED_battle_EffectData
#include <battle/EffectData.h>
#endif
#ifndef INCLUDED_battle_Unit
#include <battle/Unit.h>
#endif
#ifndef INCLUDED_battle_enums_Source
#include <battle/enums/Source.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_2626cfbdbd1af6bb_20_new,"battle.EffectData","new",0x95b00663,"battle.EffectData.new","battle/EffectHandler.hx",20,0xb41df13c)
namespace battle{

void EffectData_obj::__construct( ::battle::Unit target, ::battle::Unit caster, ::Dynamic delta, ::Element element, ::battle::enums::Source source){
            	HX_STACKFRAME(&_hx_pos_2626cfbdbd1af6bb_20_new)
HXLINE(  21)		this->target = target;
HXLINE(  22)		this->caster = caster;
HXLINE(  23)		this->delta = delta;
HXLINE(  24)		this->element = element;
HXLINE(  25)		this->source = source;
            	}

Dynamic EffectData_obj::__CreateEmpty() { return new EffectData_obj; }

void *EffectData_obj::_hx_vtable = 0;

Dynamic EffectData_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< EffectData_obj > _hx_result = new EffectData_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4]);
	return _hx_result;
}

bool EffectData_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x7de1e0bf;
}


hx::ObjectPtr< EffectData_obj > EffectData_obj::__new( ::battle::Unit target, ::battle::Unit caster, ::Dynamic delta, ::Element element, ::battle::enums::Source source) {
	hx::ObjectPtr< EffectData_obj > __this = new EffectData_obj();
	__this->__construct(target,caster,delta,element,source);
	return __this;
}

hx::ObjectPtr< EffectData_obj > EffectData_obj::__alloc(hx::Ctx *_hx_ctx, ::battle::Unit target, ::battle::Unit caster, ::Dynamic delta, ::Element element, ::battle::enums::Source source) {
	EffectData_obj *__this = (EffectData_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(EffectData_obj), true, "battle.EffectData"));
	*(void **)__this = EffectData_obj::_hx_vtable;
	__this->__construct(target,caster,delta,element,source);
	return __this;
}

EffectData_obj::EffectData_obj()
{
}

void EffectData_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(EffectData);
	HX_MARK_MEMBER_NAME(target,"target");
	HX_MARK_MEMBER_NAME(caster,"caster");
	HX_MARK_MEMBER_NAME(delta,"delta");
	HX_MARK_MEMBER_NAME(element,"element");
	HX_MARK_MEMBER_NAME(source,"source");
	HX_MARK_END_CLASS();
}

void EffectData_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(target,"target");
	HX_VISIT_MEMBER_NAME(caster,"caster");
	HX_VISIT_MEMBER_NAME(delta,"delta");
	HX_VISIT_MEMBER_NAME(element,"element");
	HX_VISIT_MEMBER_NAME(source,"source");
}

hx::Val EffectData_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"delta") ) { return hx::Val( delta ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"target") ) { return hx::Val( target ); }
		if (HX_FIELD_EQ(inName,"caster") ) { return hx::Val( caster ); }
		if (HX_FIELD_EQ(inName,"source") ) { return hx::Val( source ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"element") ) { return hx::Val( element ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val EffectData_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"delta") ) { delta=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"target") ) { target=inValue.Cast<  ::battle::Unit >(); return inValue; }
		if (HX_FIELD_EQ(inName,"caster") ) { caster=inValue.Cast<  ::battle::Unit >(); return inValue; }
		if (HX_FIELD_EQ(inName,"source") ) { source=inValue.Cast<  ::battle::enums::Source >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"element") ) { element=inValue.Cast<  ::Element >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void EffectData_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("target","\x51","\xf3","\xec","\x86"));
	outFields->push(HX_HCSTRING("caster","\xec","\xe4","\x8e","\xbb"));
	outFields->push(HX_HCSTRING("delta","\xf8","\xe7","\x26","\xd7"));
	outFields->push(HX_HCSTRING("element","\xbc","\xae","\x54","\x06"));
	outFields->push(HX_HCSTRING("source","\xdb","\xb0","\x31","\x32"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo EffectData_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::battle::Unit*/ ,(int)offsetof(EffectData_obj,target),HX_HCSTRING("target","\x51","\xf3","\xec","\x86")},
	{hx::fsObject /*::battle::Unit*/ ,(int)offsetof(EffectData_obj,caster),HX_HCSTRING("caster","\xec","\xe4","\x8e","\xbb")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(EffectData_obj,delta),HX_HCSTRING("delta","\xf8","\xe7","\x26","\xd7")},
	{hx::fsObject /*::Element*/ ,(int)offsetof(EffectData_obj,element),HX_HCSTRING("element","\xbc","\xae","\x54","\x06")},
	{hx::fsObject /*::battle::enums::Source*/ ,(int)offsetof(EffectData_obj,source),HX_HCSTRING("source","\xdb","\xb0","\x31","\x32")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *EffectData_obj_sStaticStorageInfo = 0;
#endif

static ::String EffectData_obj_sMemberFields[] = {
	HX_HCSTRING("target","\x51","\xf3","\xec","\x86"),
	HX_HCSTRING("caster","\xec","\xe4","\x8e","\xbb"),
	HX_HCSTRING("delta","\xf8","\xe7","\x26","\xd7"),
	HX_HCSTRING("element","\xbc","\xae","\x54","\x06"),
	HX_HCSTRING("source","\xdb","\xb0","\x31","\x32"),
	::String(null()) };

static void EffectData_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(EffectData_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void EffectData_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(EffectData_obj::__mClass,"__mClass");
};

#endif

hx::Class EffectData_obj::__mClass;

void EffectData_obj::__register()
{
	hx::Object *dummy = new EffectData_obj;
	EffectData_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("battle.EffectData","\xf1","\x98","\x36","\x78");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = EffectData_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(EffectData_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< EffectData_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = EffectData_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = EffectData_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = EffectData_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace battle
