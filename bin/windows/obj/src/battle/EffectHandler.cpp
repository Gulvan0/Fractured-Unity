// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_Element
#include <Element.h>
#endif
#ifndef INCLUDED_ID
#include <ID.h>
#endif
#ifndef INCLUDED_battle_Buff
#include <battle/Buff.h>
#endif
#ifndef INCLUDED_battle_EffectData
#include <battle/EffectData.h>
#endif
#ifndef INCLUDED_battle_EffectHandler
#include <battle/EffectHandler.h>
#endif
#ifndef INCLUDED_battle_IModelObserver
#include <battle/IModelObserver.h>
#endif
#ifndef INCLUDED_battle_ISimpleModel
#include <battle/ISimpleModel.h>
#endif
#ifndef INCLUDED_battle_Unit
#include <battle/Unit.h>
#endif
#ifndef INCLUDED_battle_data_BattleEvent
#include <battle/data/BattleEvent.h>
#endif
#ifndef INCLUDED_battle_data_Buffs
#include <battle/data/Buffs.h>
#endif
#ifndef INCLUDED_battle_data_Passives
#include <battle/data/Passives.h>
#endif
#ifndef INCLUDED_battle_enums_BuffMode
#include <battle/enums/BuffMode.h>
#endif
#ifndef INCLUDED_battle_enums_Source
#include <battle/enums/Source.h>
#endif
#ifndef INCLUDED_battle_enums_StrikeType
#include <battle/enums/StrikeType.h>
#endif
#ifndef INCLUDED_battle_enums_Team
#include <battle/enums/Team.h>
#endif
#ifndef INCLUDED_battle_struct_BuffQueue
#include <battle/struct/BuffQueue.h>
#endif
#ifndef INCLUDED_battle_struct_UPair
#include <battle/struct/UPair.h>
#endif
#ifndef INCLUDED_battle_struct_UnitCoords
#include <battle/struct/UnitCoords.h>
#endif
#ifndef INCLUDED_battle_struct_Wheel
#include <battle/struct/Wheel.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_f054779531114eb1_165_new,"battle.EffectHandler","new",0xd3b5b1d5,"battle.EffectHandler.new","battle/EffectHandler.hx",165,0xb41df13c)
HX_LOCAL_STACK_FRAME(_hx_pos_f054779531114eb1_41_init,"battle.EffectHandler","init",0x67fe9ffb,"battle.EffectHandler.init","battle/EffectHandler.hx",41,0xb41df13c)
HX_LOCAL_STACK_FRAME(_hx_pos_f054779531114eb1_52_procAbilities,"battle.EffectHandler","procAbilities",0x14c26fc7,"battle.EffectHandler.procAbilities","battle/EffectHandler.hx",52,0xb41df13c)
HX_LOCAL_STACK_FRAME(_hx_pos_f054779531114eb1_58_procBuffs,"battle.EffectHandler","procBuffs",0x1e1ddeff,"battle.EffectHandler.procBuffs","battle/EffectHandler.hx",58,0xb41df13c)
HX_LOCAL_STACK_FRAME(_hx_pos_f054779531114eb1_65_hpUpdate,"battle.EffectHandler","hpUpdate",0x8a6c019c,"battle.EffectHandler.hpUpdate","battle/EffectHandler.hx",65,0xb41df13c)
HX_LOCAL_STACK_FRAME(_hx_pos_f054779531114eb1_75_manaUpdate,"battle.EffectHandler","manaUpdate",0x23313d1b,"battle.EffectHandler.manaUpdate","battle/EffectHandler.hx",75,0xb41df13c)
HX_LOCAL_STACK_FRAME(_hx_pos_f054779531114eb1_83_alacUpdate,"battle.EffectHandler","alacUpdate",0x9bae43a1,"battle.EffectHandler.alacUpdate","battle/EffectHandler.hx",83,0xb41df13c)
HX_LOCAL_STACK_FRAME(_hx_pos_f054779531114eb1_91_preTick,"battle.EffectHandler","preTick",0x43a9dd15,"battle.EffectHandler.preTick","battle/EffectHandler.hx",91,0xb41df13c)
HX_LOCAL_STACK_FRAME(_hx_pos_f054779531114eb1_96_tick,"battle.EffectHandler","tick",0x6f402848,"battle.EffectHandler.tick","battle/EffectHandler.hx",96,0xb41df13c)
HX_LOCAL_STACK_FRAME(_hx_pos_f054779531114eb1_104_miss,"battle.EffectHandler","miss",0x6a9fb7e7,"battle.EffectHandler.miss","battle/EffectHandler.hx",104,0xb41df13c)
HX_LOCAL_STACK_FRAME(_hx_pos_f054779531114eb1_113_death,"battle.EffectHandler","death",0xafd377e9,"battle.EffectHandler.death","battle/EffectHandler.hx",113,0xb41df13c)
HX_LOCAL_STACK_FRAME(_hx_pos_f054779531114eb1_121_abStriked,"battle.EffectHandler","abStriked",0x09dace46,"battle.EffectHandler.abStriked","battle/EffectHandler.hx",121,0xb41df13c)
HX_LOCAL_STACK_FRAME(_hx_pos_f054779531114eb1_134_abThrown,"battle.EffectHandler","abThrown",0xbb9a02b4,"battle.EffectHandler.abThrown","battle/EffectHandler.hx",134,0xb41df13c)
HX_LOCAL_STACK_FRAME(_hx_pos_f054779531114eb1_138_buffQueueUpdate,"battle.EffectHandler","buffQueueUpdate",0x17f1d05c,"battle.EffectHandler.buffQueueUpdate","battle/EffectHandler.hx",138,0xb41df13c)
HX_LOCAL_STACK_FRAME(_hx_pos_f054779531114eb1_143_abSelected,"battle.EffectHandler","abSelected",0x6cdaeb87,"battle.EffectHandler.abSelected","battle/EffectHandler.hx",143,0xb41df13c)
HX_LOCAL_STACK_FRAME(_hx_pos_f054779531114eb1_148_abDeselected,"battle.EffectHandler","abDeselected",0xcb03cf08,"battle.EffectHandler.abDeselected","battle/EffectHandler.hx",148,0xb41df13c)
HX_LOCAL_STACK_FRAME(_hx_pos_f054779531114eb1_153_warn,"battle.EffectHandler","warn",0x7135c731,"battle.EffectHandler.warn","battle/EffectHandler.hx",153,0xb41df13c)
HX_LOCAL_STACK_FRAME(_hx_pos_f054779531114eb1_161_getUnit,"battle.EffectHandler","getUnit",0x3e74ba2f,"battle.EffectHandler.getUnit","battle/EffectHandler.hx",161,0xb41df13c)
HX_LOCAL_STACK_FRAME(_hx_pos_f054779531114eb1_37_boot,"battle.EffectHandler","boot",0x635ee91d,"battle.EffectHandler.boot","battle/EffectHandler.hx",37,0xb41df13c)
namespace battle{

void EffectHandler_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_f054779531114eb1_165_new)
            	}

Dynamic EffectHandler_obj::__CreateEmpty() { return new EffectHandler_obj; }

void *EffectHandler_obj::_hx_vtable = 0;

Dynamic EffectHandler_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< EffectHandler_obj > _hx_result = new EffectHandler_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool EffectHandler_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x43c8ba59;
}

static ::battle::IModelObserver_obj _hx_battle_EffectHandler__hx_battle_IModelObserver= {
	( void (hx::Object::*)( ::battle::Unit, ::battle::Unit,int, ::Element,bool, ::battle::enums::Source))&::battle::EffectHandler_obj::hpUpdate,
	( void (hx::Object::*)( ::battle::Unit,int, ::battle::enums::Source))&::battle::EffectHandler_obj::manaUpdate,
	( void (hx::Object::*)( ::battle::Unit,Float, ::battle::enums::Source))&::battle::EffectHandler_obj::alacUpdate,
	( void (hx::Object::*)( ::battle::_hx_struct::UnitCoords,::Array< ::Dynamic>))&::battle::EffectHandler_obj::buffQueueUpdate,
	( void (hx::Object::*)( ::battle::Unit))&::battle::EffectHandler_obj::preTick,
	( void (hx::Object::*)( ::battle::Unit))&::battle::EffectHandler_obj::tick,
	( void (hx::Object::*)( ::battle::_hx_struct::UnitCoords, ::Element))&::battle::EffectHandler_obj::miss,
	( void (hx::Object::*)( ::battle::_hx_struct::UnitCoords))&::battle::EffectHandler_obj::death,
	( void (hx::Object::*)(int))&::battle::EffectHandler_obj::abSelected,
	( void (hx::Object::*)(int))&::battle::EffectHandler_obj::abDeselected,
	( void (hx::Object::*)( ::battle::_hx_struct::UnitCoords, ::battle::_hx_struct::UnitCoords, ::ID, ::battle::enums::StrikeType, ::Element))&::battle::EffectHandler_obj::abThrown,
	( void (hx::Object::*)( ::battle::_hx_struct::UnitCoords, ::battle::_hx_struct::UnitCoords, ::ID, ::battle::enums::StrikeType, ::Element))&::battle::EffectHandler_obj::abStriked,
	( void (hx::Object::*)(::String))&::battle::EffectHandler_obj::warn,
};

void *EffectHandler_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0x2826bace: return &_hx_battle_EffectHandler__hx_battle_IModelObserver;
	}
	#ifdef HXCPP_SCRIPTABLE
	return super::_hx_getInterface(inHash);
	#else
	return 0;
	#endif
}

void EffectHandler_obj::init(::Dynamic m){
            	HX_STACKFRAME(&_hx_pos_f054779531114eb1_41_init)
HXDLIN(  41)		if (::battle::EffectHandler_obj::flag) {
HXLINE(  43)			::battle::EffectHandler_obj::model = m;
HXLINE(  44)			::battle::EffectHandler_obj::flag = false;
            		}
            		else {
HXLINE(  47)			HX_STACK_DO_THROW(HX_("Attempt to re-init",d8,b9,98,2d));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(EffectHandler_obj,init,(void))

void EffectHandler_obj::procAbilities( ::battle::data::BattleEvent e, ::battle::Unit unit, ::battle::EffectData data){
            	HX_STACKFRAME(&_hx_pos_f054779531114eb1_52_procAbilities)
HXDLIN(  52)		int _g = (int)0;
HXDLIN(  52)		::Array< ::Dynamic> _g1 = unit->wheel->passives(e);
HXDLIN(  52)		while((_g < _g1->length)){
HXDLIN(  52)			 ::ID passive = _g1->__get(_g).StaticCast<  ::ID >();
HXDLIN(  52)			_g = (_g + (int)1);
HXLINE(  53)			::battle::data::Passives_obj::handle(passive,e,data);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(EffectHandler_obj,procAbilities,(void))

void EffectHandler_obj::procBuffs( ::battle::data::BattleEvent e, ::battle::Unit unit){
            	HX_STACKFRAME(&_hx_pos_f054779531114eb1_58_procBuffs)
HXDLIN(  58)		int _g = (int)0;
HXDLIN(  58)		::Array< ::Dynamic> _g1 = unit->buffQueue->getTriggering(e);
HXDLIN(  58)		while((_g < _g1->length)){
HXDLIN(  58)			 ::battle::Buff buff = _g1->__get(_g).StaticCast<  ::battle::Buff >();
HXDLIN(  58)			_g = (_g + (int)1);
HXLINE(  59)			::battle::data::Buffs_obj::useBuff(buff->id,buff->owner,buff->caster,::battle::enums::BuffMode_obj::Proc_dyn());
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(EffectHandler_obj,procBuffs,(void))

void EffectHandler_obj::hpUpdate( ::battle::Unit target, ::battle::Unit caster,int dhp, ::Element element,bool crit, ::battle::enums::Source source){
            	HX_GC_STACKFRAME(&_hx_pos_f054779531114eb1_65_hpUpdate)
HXLINE(  66)		 ::battle::EffectData data =  ::battle::EffectData_obj::__alloc( HX_CTX ,target,caster,dhp,element,source);
HXLINE(  68)		this->procAbilities(::battle::data::BattleEvent_obj::HPUpdate_dyn(),target,data);
HXLINE(  69)		this->procBuffs(::battle::data::BattleEvent_obj::HPUpdate_dyn(),target);
HXLINE(  70)		bool _hx_tmp;
HXDLIN(  70)		if (crit) {
HXLINE(  70)			bool _hx_tmp1;
HXDLIN(  70)			if (hx::IsEq( target->team,caster->team )) {
HXLINE(  70)				_hx_tmp1 = (target->position == caster->position);
            			}
            			else {
HXLINE(  70)				_hx_tmp1 = false;
            			}
HXDLIN(  70)			_hx_tmp = !(_hx_tmp1);
            		}
            		else {
HXLINE(  70)			_hx_tmp = false;
            		}
HXDLIN(  70)		if (_hx_tmp) {
HXLINE(  71)			this->procAbilities(::battle::data::BattleEvent_obj::Crit_dyn(),caster,data);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC6(EffectHandler_obj,hpUpdate,(void))

void EffectHandler_obj::manaUpdate( ::battle::Unit target,int dmana, ::battle::enums::Source source){
            	HX_GC_STACKFRAME(&_hx_pos_f054779531114eb1_75_manaUpdate)
HXLINE(  76)		 ::battle::EffectData data =  ::battle::EffectData_obj::__alloc( HX_CTX ,target,null(),dmana,null(),source);
HXLINE(  78)		this->procAbilities(::battle::data::BattleEvent_obj::ManaUpdate_dyn(),target,data);
HXLINE(  79)		this->procBuffs(::battle::data::BattleEvent_obj::ManaUpdate_dyn(),target);
            	}


HX_DEFINE_DYNAMIC_FUNC3(EffectHandler_obj,manaUpdate,(void))

void EffectHandler_obj::alacUpdate( ::battle::Unit unit,Float dalac, ::battle::enums::Source source){
            	HX_GC_STACKFRAME(&_hx_pos_f054779531114eb1_83_alacUpdate)
HXLINE(  84)		 ::battle::EffectData data =  ::battle::EffectData_obj::__alloc( HX_CTX ,unit,null(),dalac,null(),source);
HXLINE(  86)		this->procAbilities(::battle::data::BattleEvent_obj::AlacUpdate_dyn(),unit,data);
HXLINE(  87)		this->procBuffs(::battle::data::BattleEvent_obj::AlacUpdate_dyn(),unit);
            	}


HX_DEFINE_DYNAMIC_FUNC3(EffectHandler_obj,alacUpdate,(void))

void EffectHandler_obj::preTick( ::battle::Unit current){
            	HX_STACKFRAME(&_hx_pos_f054779531114eb1_91_preTick)
            	}


HX_DEFINE_DYNAMIC_FUNC1(EffectHandler_obj,preTick,(void))

void EffectHandler_obj::tick( ::battle::Unit current){
            	HX_GC_STACKFRAME(&_hx_pos_f054779531114eb1_96_tick)
HXLINE(  97)		 ::battle::EffectData data =  ::battle::EffectData_obj::__alloc( HX_CTX ,current,null(),null(),null(),null());
HXLINE(  99)		this->procAbilities(::battle::data::BattleEvent_obj::Tick_dyn(),current,data);
HXLINE( 100)		this->procBuffs(::battle::data::BattleEvent_obj::Tick_dyn(),current);
            	}


HX_DEFINE_DYNAMIC_FUNC1(EffectHandler_obj,tick,(void))

void EffectHandler_obj::miss( ::battle::_hx_struct::UnitCoords target, ::Element element){
            	HX_GC_STACKFRAME(&_hx_pos_f054779531114eb1_104_miss)
HXLINE( 105)		 ::battle::Unit t = this->getUnit(target);
HXLINE( 106)		 ::battle::EffectData data =  ::battle::EffectData_obj::__alloc( HX_CTX ,t,null(),null(),element,null());
HXLINE( 108)		this->procAbilities(::battle::data::BattleEvent_obj::Miss_dyn(),t,data);
HXLINE( 109)		this->procBuffs(::battle::data::BattleEvent_obj::Miss_dyn(),t);
            	}


HX_DEFINE_DYNAMIC_FUNC2(EffectHandler_obj,miss,(void))

void EffectHandler_obj::death( ::battle::_hx_struct::UnitCoords unit){
            	HX_GC_STACKFRAME(&_hx_pos_f054779531114eb1_113_death)
HXLINE( 114)		 ::battle::EffectData data =  ::battle::EffectData_obj::__alloc( HX_CTX ,this->getUnit(unit),null(),null(),null(),null());
HXLINE( 116)		{
HXLINE( 116)			 ::Dynamic u = ::battle::ISimpleModel_obj::getUnits(::battle::EffectHandler_obj::model)->iterator();
HXDLIN( 116)			while(( (bool)(u->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE( 116)				 ::battle::Unit u1 = ( ( ::battle::Unit)(u->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE( 117)				this->procAbilities(::battle::data::BattleEvent_obj::Death_dyn(),u1,data);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(EffectHandler_obj,death,(void))

void EffectHandler_obj::abStriked( ::battle::_hx_struct::UnitCoords target, ::battle::_hx_struct::UnitCoords caster, ::ID id, ::battle::enums::StrikeType type, ::Element element){
            	HX_GC_STACKFRAME(&_hx_pos_f054779531114eb1_121_abStriked)
HXLINE( 122)		 ::battle::Unit t = this->getUnit(target);
HXLINE( 123)		 ::battle::Unit c = this->getUnit(caster);
HXLINE( 124)		 ::battle::EffectData data =  ::battle::EffectData_obj::__alloc( HX_CTX ,t,c,null(),element,null());
HXLINE( 126)		this->procAbilities(::battle::data::BattleEvent_obj::Strike_dyn(),t,data);
HXLINE( 127)		this->procBuffs(::battle::data::BattleEvent_obj::Strike_dyn(),t);
HXLINE( 129)		::battle::ISimpleModel_obj::respond(::battle::EffectHandler_obj::model);
            	}


HX_DEFINE_DYNAMIC_FUNC5(EffectHandler_obj,abStriked,(void))

void EffectHandler_obj::abThrown( ::battle::_hx_struct::UnitCoords target, ::battle::_hx_struct::UnitCoords caster, ::ID id, ::battle::enums::StrikeType type, ::Element element){
            	HX_STACKFRAME(&_hx_pos_f054779531114eb1_134_abThrown)
HXDLIN( 134)		::battle::ISimpleModel_obj::respond(::battle::EffectHandler_obj::model);
            	}


HX_DEFINE_DYNAMIC_FUNC5(EffectHandler_obj,abThrown,(void))

void EffectHandler_obj::buffQueueUpdate( ::battle::_hx_struct::UnitCoords unit,::Array< ::Dynamic> queue){
            	HX_STACKFRAME(&_hx_pos_f054779531114eb1_138_buffQueueUpdate)
            	}


HX_DEFINE_DYNAMIC_FUNC2(EffectHandler_obj,buffQueueUpdate,(void))

void EffectHandler_obj::abSelected(int num){
            	HX_STACKFRAME(&_hx_pos_f054779531114eb1_143_abSelected)
            	}


HX_DEFINE_DYNAMIC_FUNC1(EffectHandler_obj,abSelected,(void))

void EffectHandler_obj::abDeselected(int num){
            	HX_STACKFRAME(&_hx_pos_f054779531114eb1_148_abDeselected)
            	}


HX_DEFINE_DYNAMIC_FUNC1(EffectHandler_obj,abDeselected,(void))

void EffectHandler_obj::warn(::String text){
            	HX_STACKFRAME(&_hx_pos_f054779531114eb1_153_warn)
            	}


HX_DEFINE_DYNAMIC_FUNC1(EffectHandler_obj,warn,(void))

 ::battle::Unit EffectHandler_obj::getUnit( ::battle::_hx_struct::UnitCoords coords){
            	HX_STACKFRAME(&_hx_pos_f054779531114eb1_161_getUnit)
HXDLIN( 161)		return ::battle::ISimpleModel_obj::getUnits(::battle::EffectHandler_obj::model)->get(coords).StaticCast<  ::battle::Unit >();
            	}


HX_DEFINE_DYNAMIC_FUNC1(EffectHandler_obj,getUnit,return )

::Dynamic EffectHandler_obj::model;

bool EffectHandler_obj::flag;


hx::ObjectPtr< EffectHandler_obj > EffectHandler_obj::__new() {
	hx::ObjectPtr< EffectHandler_obj > __this = new EffectHandler_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< EffectHandler_obj > EffectHandler_obj::__alloc(hx::Ctx *_hx_ctx) {
	EffectHandler_obj *__this = (EffectHandler_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(EffectHandler_obj), false, "battle.EffectHandler"));
	*(void **)__this = EffectHandler_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

EffectHandler_obj::EffectHandler_obj()
{
}

hx::Val EffectHandler_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"init") ) { return hx::Val( init_dyn() ); }
		if (HX_FIELD_EQ(inName,"tick") ) { return hx::Val( tick_dyn() ); }
		if (HX_FIELD_EQ(inName,"miss") ) { return hx::Val( miss_dyn() ); }
		if (HX_FIELD_EQ(inName,"warn") ) { return hx::Val( warn_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"death") ) { return hx::Val( death_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"preTick") ) { return hx::Val( preTick_dyn() ); }
		if (HX_FIELD_EQ(inName,"getUnit") ) { return hx::Val( getUnit_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"hpUpdate") ) { return hx::Val( hpUpdate_dyn() ); }
		if (HX_FIELD_EQ(inName,"abThrown") ) { return hx::Val( abThrown_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"procBuffs") ) { return hx::Val( procBuffs_dyn() ); }
		if (HX_FIELD_EQ(inName,"abStriked") ) { return hx::Val( abStriked_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"manaUpdate") ) { return hx::Val( manaUpdate_dyn() ); }
		if (HX_FIELD_EQ(inName,"alacUpdate") ) { return hx::Val( alacUpdate_dyn() ); }
		if (HX_FIELD_EQ(inName,"abSelected") ) { return hx::Val( abSelected_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"abDeselected") ) { return hx::Val( abDeselected_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"procAbilities") ) { return hx::Val( procAbilities_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"buffQueueUpdate") ) { return hx::Val( buffQueueUpdate_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool EffectHandler_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"flag") ) { outValue = ( flag ); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"model") ) { outValue = ( model ); return true; }
	}
	return false;
}

bool EffectHandler_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"flag") ) { flag=ioValue.Cast< bool >(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"model") ) { model=ioValue.Cast< ::Dynamic >(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *EffectHandler_obj_sMemberStorageInfo = 0;
static hx::StaticInfo EffectHandler_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*::battle::ISimpleModel*/ ,(void *) &EffectHandler_obj::model,HX_HCSTRING("model","\xa9","\x23","\x58","\x0c")},
	{hx::fsBool,(void *) &EffectHandler_obj::flag,HX_HCSTRING("flag","\xac","\x0b","\xbe","\x43")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String EffectHandler_obj_sMemberFields[] = {
	HX_HCSTRING("init","\x10","\x3b","\xbb","\x45"),
	HX_HCSTRING("procAbilities","\x12","\x4a","\x36","\x7c"),
	HX_HCSTRING("procBuffs","\xca","\xf7","\x4d","\xad"),
	HX_HCSTRING("hpUpdate","\x31","\x4b","\x7c","\x29"),
	HX_HCSTRING("manaUpdate","\xf0","\xd5","\x16","\xde"),
	HX_HCSTRING("alacUpdate","\x76","\xdc","\x93","\x56"),
	HX_HCSTRING("preTick","\x20","\x9d","\x61","\x25"),
	HX_HCSTRING("tick","\x5d","\xc3","\xfc","\x4c"),
	HX_HCSTRING("miss","\xfc","\x52","\x5c","\x48"),
	HX_HCSTRING("death","\x34","\x8f","\x1e","\xd7"),
	HX_HCSTRING("abStriked","\x11","\xe7","\x0a","\x99"),
	HX_HCSTRING("abThrown","\x49","\x4c","\xaa","\x5a"),
	HX_HCSTRING("buffQueueUpdate","\x67","\x13","\xc9","\x27"),
	HX_HCSTRING("abSelected","\x5c","\x84","\xc0","\x27"),
	HX_HCSTRING("abDeselected","\x1d","\x07","\x21","\x3d"),
	HX_HCSTRING("warn","\x46","\x62","\xf2","\x4e"),
	HX_HCSTRING("getUnit","\x3a","\x7a","\x2c","\x20"),
	::String(null()) };

static void EffectHandler_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(EffectHandler_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(EffectHandler_obj::model,"model");
	HX_MARK_MEMBER_NAME(EffectHandler_obj::flag,"flag");
};

#ifdef HXCPP_VISIT_ALLOCS
static void EffectHandler_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(EffectHandler_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(EffectHandler_obj::model,"model");
	HX_VISIT_MEMBER_NAME(EffectHandler_obj::flag,"flag");
};

#endif

hx::Class EffectHandler_obj::__mClass;

static ::String EffectHandler_obj_sStaticFields[] = {
	HX_HCSTRING("model","\xa9","\x23","\x58","\x0c"),
	HX_HCSTRING("flag","\xac","\x0b","\xbe","\x43"),
	::String(null())
};

void EffectHandler_obj::__register()
{
	hx::Object *dummy = new EffectHandler_obj;
	EffectHandler_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("battle.EffectHandler","\x63","\x23","\x81","\x59");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &EffectHandler_obj::__GetStatic;
	__mClass->mSetStaticField = &EffectHandler_obj::__SetStatic;
	__mClass->mMarkFunc = EffectHandler_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(EffectHandler_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(EffectHandler_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< EffectHandler_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = EffectHandler_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = EffectHandler_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = EffectHandler_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void EffectHandler_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_f054779531114eb1_37_boot)
HXDLIN(  37)		flag = true;
            	}
}

} // end namespace battle
