// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Element
#include <Element.h>
#endif
#ifndef INCLUDED_ID
#include <ID.h>
#endif
#ifndef INCLUDED_Linear
#include <Linear.h>
#endif
#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_battle_IMutableModel
#include <battle/IMutableModel.h>
#endif
#ifndef INCLUDED_battle_Unit
#include <battle/Unit.h>
#endif
#ifndef INCLUDED_battle_data_Abilities
#include <battle/data/Abilities.h>
#endif
#ifndef INCLUDED_battle_enums_Source
#include <battle/enums/Source.h>
#endif
#ifndef INCLUDED_battle_enums_UnitType
#include <battle/enums/UnitType.h>
#endif
#ifndef INCLUDED_battle_struct_BuffQueue
#include <battle/struct/BuffQueue.h>
#endif
#ifndef INCLUDED_battle_struct_FloatPool
#include <battle/struct/FloatPool.h>
#endif
#ifndef INCLUDED_battle_struct_UPair
#include <battle/struct/UPair.h>
#endif
#ifndef INCLUDED_battle_struct_UnitCoords
#include <battle/struct/UnitCoords.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_c416c8142dbc055c_31_init,"battle.data.Abilities","init",0x21136064,"battle.data.Abilities.init","battle/data/Abilities.hx",31,0xdcd32fc4)
HX_LOCAL_STACK_FRAME(_hx_pos_c416c8142dbc055c_41_useAbility,"battle.data.Abilities","useAbility",0xdca16077,"battle.data.Abilities.useAbility","battle/data/Abilities.hx",41,0xdcd32fc4)
HX_LOCAL_STACK_FRAME(_hx_pos_c416c8142dbc055c_84_shockTherapy,"battle.data.Abilities","shockTherapy",0x7b16167b,"battle.data.Abilities.shockTherapy","battle/data/Abilities.hx",84,0xdcd32fc4)
HX_LOCAL_STACK_FRAME(_hx_pos_c416c8142dbc055c_94_highVoltage,"battle.data.Abilities","highVoltage",0xf94a9348,"battle.data.Abilities.highVoltage","battle/data/Abilities.hx",94,0xdcd32fc4)
HX_LOCAL_STACK_FRAME(_hx_pos_c416c8142dbc055c_102_electricalStorm,"battle.data.Abilities","electricalStorm",0x7c96b7ed,"battle.data.Abilities.electricalStorm","battle/data/Abilities.hx",102,0xdcd32fc4)
HX_LOCAL_STACK_FRAME(_hx_pos_c416c8142dbc055c_114_charge,"battle.data.Abilities","charge",0x3520bcc8,"battle.data.Abilities.charge","battle/data/Abilities.hx",114,0xdcd32fc4)
HX_LOCAL_STACK_FRAME(_hx_pos_c416c8142dbc055c_122_lightningBolt,"battle.data.Abilities","lightningBolt",0xdebbc3eb,"battle.data.Abilities.lightningBolt","battle/data/Abilities.hx",122,0xdcd32fc4)
HX_LOCAL_STACK_FRAME(_hx_pos_c416c8142dbc055c_131_voltSnare,"battle.data.Abilities","voltSnare",0xd7d77d04,"battle.data.Abilities.voltSnare","battle/data/Abilities.hx",131,0xdcd32fc4)
HX_LOCAL_STACK_FRAME(_hx_pos_c416c8142dbc055c_140_energize,"battle.data.Abilities","energize",0x51b610b7,"battle.data.Abilities.energize","battle/data/Abilities.hx",140,0xdcd32fc4)
HX_LOCAL_STACK_FRAME(_hx_pos_c416c8142dbc055c_144_disrupt,"battle.data.Abilities","disrupt",0x34b66001,"battle.data.Abilities.disrupt","battle/data/Abilities.hx",144,0xdcd32fc4)
HX_LOCAL_STACK_FRAME(_hx_pos_c416c8142dbc055c_153_arcFlash,"battle.data.Abilities","arcFlash",0xf431dd52,"battle.data.Abilities.arcFlash","battle/data/Abilities.hx",153,0xdcd32fc4)
HX_LOCAL_STACK_FRAME(_hx_pos_c416c8142dbc055c_168_empBlast,"battle.data.Abilities","empBlast",0xee19b2e4,"battle.data.Abilities.empBlast","battle/data/Abilities.hx",168,0xdcd32fc4)
HX_LOCAL_STACK_FRAME(_hx_pos_c416c8142dbc055c_180_ghostStrike,"battle.data.Abilities","ghostStrike",0x0c45fc0d,"battle.data.Abilities.ghostStrike","battle/data/Abilities.hx",180,0xdcd32fc4)
HX_LOCAL_STACK_FRAME(_hx_pos_c416c8142dbc055c_191_stub,"battle.data.Abilities","stub",0x27b41a82,"battle.data.Abilities.stub","battle/data/Abilities.hx",191,0xdcd32fc4)
HX_LOCAL_STACK_FRAME(_hx_pos_c416c8142dbc055c_23_boot,"battle.data.Abilities","boot",0x1c73a986,"battle.data.Abilities.boot","battle/data/Abilities.hx",23,0xdcd32fc4)
namespace battle{
namespace data{

void Abilities_obj::__construct() { }

Dynamic Abilities_obj::__CreateEmpty() { return new Abilities_obj; }

void *Abilities_obj::_hx_vtable = 0;

Dynamic Abilities_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Abilities_obj > _hx_result = new Abilities_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Abilities_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x04bfdce2;
}

::Dynamic Abilities_obj::model;

bool Abilities_obj::flag;

 ::battle::Unit Abilities_obj::target;

 ::battle::Unit Abilities_obj::caster;

 ::Element Abilities_obj::element;

void Abilities_obj::init(::Dynamic m){
            	HX_STACKFRAME(&_hx_pos_c416c8142dbc055c_31_init)
HXDLIN(  31)		if (::battle::data::Abilities_obj::flag) {
HXLINE(  33)			::battle::data::Abilities_obj::model = m;
HXLINE(  34)			::battle::data::Abilities_obj::flag = false;
            		}
            		else {
HXLINE(  37)			HX_STACK_DO_THROW(HX_("Attempt to re-init",d8,b9,98,2d));
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Abilities_obj,init,(void))

void Abilities_obj::useAbility( ::ID id, ::battle::_hx_struct::UnitCoords targetCoords, ::battle::_hx_struct::UnitCoords casterCoords, ::Element e){
            	HX_STACKFRAME(&_hx_pos_c416c8142dbc055c_41_useAbility)
HXLINE(  42)		::battle::data::Abilities_obj::target = ::battle::IMutableModel_obj::getUnits(::battle::data::Abilities_obj::model)->get(targetCoords).StaticCast<  ::battle::Unit >();
HXLINE(  43)		::battle::data::Abilities_obj::caster = ::battle::IMutableModel_obj::getUnits(::battle::data::Abilities_obj::model)->get(casterCoords).StaticCast<  ::battle::Unit >();
HXLINE(  44)		::battle::data::Abilities_obj::element = e;
HXLINE(  46)		switch((int)(_hx_getEnumValueIndex(id))){
            			case (int)0: {
HXLINE(  58)				::battle::data::Abilities_obj::lightningBolt();
            			}
            			break;
            			case (int)2: {
HXLINE(  60)				::battle::data::Abilities_obj::voltSnare();
            			}
            			break;
            			case (int)3: {
HXLINE(  50)				::battle::data::Abilities_obj::shockTherapy();
            			}
            			break;
            			case (int)4: {
HXLINE(  66)				::battle::data::Abilities_obj::arcFlash();
            			}
            			break;
            			case (int)5: {
HXLINE(  64)				::battle::data::Abilities_obj::disrupt();
            			}
            			break;
            			case (int)6: {
HXLINE(  62)				::battle::data::Abilities_obj::energize();
            			}
            			break;
            			case (int)7: {
HXLINE(  54)				::battle::data::Abilities_obj::electricalStorm();
            			}
            			break;
            			case (int)8: {
HXLINE(  68)				::battle::data::Abilities_obj::empBlast();
            			}
            			break;
            			case (int)10: {
HXLINE(  56)				::battle::data::Abilities_obj::charge();
            			}
            			break;
            			case (int)11: {
HXLINE(  52)				::battle::data::Abilities_obj::highVoltage();
            			}
            			break;
            			case (int)12: {
HXLINE(  71)				::battle::data::Abilities_obj::ghostStrike();
            			}
            			break;
            			case (int)25: {
HXLINE(  73)				::battle::data::Abilities_obj::stub();
            			}
            			break;
            			default:{
HXLINE(  75)				HX_STACK_DO_THROW((HX_("Abilities->useAbility() exception: Invalid ID: ",7c,21,94,e0) + ::Type_obj::enumConstructor(id)));
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(Abilities_obj,useAbility,(void))

void Abilities_obj::shockTherapy(){
            	HX_STACKFRAME(&_hx_pos_c416c8142dbc055c_84_shockTherapy)
HXLINE(  85)		int delta = ::Math_obj::round((::battle::data::Abilities_obj::caster->intellect * ((Float)3.3)));
HXLINE(  86)		if (hx::IsEq( ::battle::data::Abilities_obj::caster->figureRelation(::battle::data::Abilities_obj::target),::battle::enums::UnitType_obj::Enemy_dyn() )) {
HXLINE(  87)			delta = -(delta);
            		}
HXLINE(  89)		::Dynamic _hx_tmp = ::battle::data::Abilities_obj::model;
HXDLIN(  89)		 ::battle::_hx_struct::UnitCoords _hx_tmp1 = ::battle::_hx_struct::UnitCoords_obj::get(::battle::data::Abilities_obj::target);
HXDLIN(  89)		 ::battle::_hx_struct::UnitCoords _hx_tmp2 = ::battle::_hx_struct::UnitCoords_obj::get(::battle::data::Abilities_obj::caster);
HXDLIN(  89)		::battle::IMutableModel_obj::changeHP(_hx_tmp,_hx_tmp1,_hx_tmp2,delta,::battle::data::Abilities_obj::element,::battle::enums::Source_obj::Ability_dyn());
HXLINE(  90)		::Dynamic _hx_tmp3 = ::battle::data::Abilities_obj::model;
HXDLIN(  90)		::battle::IMutableModel_obj::dispellBuffs(_hx_tmp3,::battle::_hx_struct::UnitCoords_obj::get(::battle::data::Abilities_obj::target),::Array_obj< ::Dynamic>::__new(1)->init(0,::Element_obj::Lightning_dyn()),null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Abilities_obj,shockTherapy,(void))

void Abilities_obj::highVoltage(){
            	HX_STACKFRAME(&_hx_pos_c416c8142dbc055c_94_highVoltage)
HXLINE(  95)		int damage = (::battle::data::Abilities_obj::caster->intellect * (int)3);
HXLINE(  97)		::Dynamic _hx_tmp = ::battle::data::Abilities_obj::model;
HXDLIN(  97)		 ::battle::_hx_struct::UnitCoords _hx_tmp1 = ::battle::_hx_struct::UnitCoords_obj::get(::battle::data::Abilities_obj::target);
HXDLIN(  97)		 ::battle::_hx_struct::UnitCoords _hx_tmp2 = ::battle::_hx_struct::UnitCoords_obj::get(::battle::data::Abilities_obj::caster);
HXDLIN(  97)		::battle::IMutableModel_obj::changeHP(_hx_tmp,_hx_tmp1,_hx_tmp2,-(damage),::battle::data::Abilities_obj::element,::battle::enums::Source_obj::Ability_dyn());
HXLINE(  98)		::Dynamic _hx_tmp3 = ::battle::data::Abilities_obj::model;
HXDLIN(  98)		 ::battle::_hx_struct::UnitCoords _hx_tmp4 = ::battle::_hx_struct::UnitCoords_obj::get(::battle::data::Abilities_obj::target);
HXDLIN(  98)		::battle::IMutableModel_obj::castBuff(_hx_tmp3,::ID_obj::BuffLgConductivity_dyn(),_hx_tmp4,::battle::_hx_struct::UnitCoords_obj::get(::battle::data::Abilities_obj::caster),(int)2);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Abilities_obj,highVoltage,(void))

void Abilities_obj::electricalStorm(){
            	HX_STACKFRAME(&_hx_pos_c416c8142dbc055c_102_electricalStorm)
HXLINE( 103)		int delta;
HXDLIN( 103)		int _g = ::battle::data::Abilities_obj::target->buffQueue->elementalCount(::Element_obj::Lightning_dyn());
HXDLIN( 103)		switch((int)(_g)){
            			case (int)0: {
HXLINE( 103)				delta = ((int)25 + ((int)10 * ::battle::data::Abilities_obj::caster->intellect));
            			}
            			break;
            			case (int)1: {
HXLINE( 103)				delta = -(((int)20 + ((int)10 * ::battle::data::Abilities_obj::caster->intellect)));
            			}
            			break;
            			default:{
HXLINE( 103)				delta = -(((int)70 + ((int)20 * ::battle::data::Abilities_obj::caster->intellect)));
            			}
            		}
HXLINE( 110)		::Dynamic _hx_tmp = ::battle::data::Abilities_obj::model;
HXDLIN( 110)		 ::battle::_hx_struct::UnitCoords _hx_tmp1 = ::battle::_hx_struct::UnitCoords_obj::get(::battle::data::Abilities_obj::target);
HXDLIN( 110)		 ::battle::_hx_struct::UnitCoords _hx_tmp2 = ::battle::_hx_struct::UnitCoords_obj::get(::battle::data::Abilities_obj::caster);
HXDLIN( 110)		::battle::IMutableModel_obj::changeHP(_hx_tmp,_hx_tmp1,_hx_tmp2,delta,::battle::data::Abilities_obj::element,::battle::enums::Source_obj::Ability_dyn());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Abilities_obj,electricalStorm,(void))

void Abilities_obj::charge(){
            	HX_STACKFRAME(&_hx_pos_c416c8142dbc055c_114_charge)
HXLINE( 115)		int damage = (::battle::data::Abilities_obj::caster->intellect * (int)3);
HXLINE( 117)		::Dynamic _hx_tmp = ::battle::data::Abilities_obj::model;
HXDLIN( 117)		 ::battle::_hx_struct::UnitCoords _hx_tmp1 = ::battle::_hx_struct::UnitCoords_obj::get(::battle::data::Abilities_obj::target);
HXDLIN( 117)		 ::battle::_hx_struct::UnitCoords _hx_tmp2 = ::battle::_hx_struct::UnitCoords_obj::get(::battle::data::Abilities_obj::caster);
HXDLIN( 117)		::battle::IMutableModel_obj::changeHP(_hx_tmp,_hx_tmp1,_hx_tmp2,-(damage),::battle::data::Abilities_obj::element,::battle::enums::Source_obj::Ability_dyn());
HXLINE( 118)		::Dynamic _hx_tmp3 = ::battle::data::Abilities_obj::model;
HXDLIN( 118)		 ::battle::_hx_struct::UnitCoords _hx_tmp4 = ::battle::_hx_struct::UnitCoords_obj::get(::battle::data::Abilities_obj::target);
HXDLIN( 118)		::battle::IMutableModel_obj::castBuff(_hx_tmp3,::ID_obj::BuffLgCharged_dyn(),_hx_tmp4,::battle::_hx_struct::UnitCoords_obj::get(::battle::data::Abilities_obj::caster),(int)3);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Abilities_obj,charge,(void))

void Abilities_obj::lightningBolt(){
            	HX_STACKFRAME(&_hx_pos_c416c8142dbc055c_122_lightningBolt)
HXLINE( 123)		int damage = ::Math_obj::round((::battle::data::Abilities_obj::caster->intellect * ((Float)2.5)));
HXLINE( 125)		::Dynamic _hx_tmp = ::battle::data::Abilities_obj::model;
HXDLIN( 125)		 ::battle::_hx_struct::UnitCoords _hx_tmp1 = ::battle::_hx_struct::UnitCoords_obj::get(::battle::data::Abilities_obj::target);
HXDLIN( 125)		 ::battle::_hx_struct::UnitCoords _hx_tmp2 = ::battle::_hx_struct::UnitCoords_obj::get(::battle::data::Abilities_obj::caster);
HXDLIN( 125)		::battle::IMutableModel_obj::changeHP(_hx_tmp,_hx_tmp1,_hx_tmp2,-(damage),::battle::data::Abilities_obj::element,::battle::enums::Source_obj::Ability_dyn());
HXLINE( 126)		if ((::Math_obj::random() <= ((Float)0.3))) {
HXLINE( 127)			::Dynamic _hx_tmp3 = ::battle::data::Abilities_obj::model;
HXDLIN( 127)			 ::battle::_hx_struct::UnitCoords _hx_tmp4 = ::battle::_hx_struct::UnitCoords_obj::get(::battle::data::Abilities_obj::caster);
HXDLIN( 127)			::battle::IMutableModel_obj::castBuff(_hx_tmp3,::ID_obj::BuffLgEnergized_dyn(),_hx_tmp4,::battle::_hx_struct::UnitCoords_obj::get(::battle::data::Abilities_obj::caster),(int)1);
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Abilities_obj,lightningBolt,(void))

void Abilities_obj::voltSnare(){
            	HX_STACKFRAME(&_hx_pos_c416c8142dbc055c_131_voltSnare)
HXLINE( 132)		int damage = ::battle::data::Abilities_obj::caster->intellect;
HXLINE( 134)		::Dynamic _hx_tmp = ::battle::data::Abilities_obj::model;
HXDLIN( 134)		 ::battle::_hx_struct::UnitCoords _hx_tmp1 = ::battle::_hx_struct::UnitCoords_obj::get(::battle::data::Abilities_obj::target);
HXDLIN( 134)		 ::battle::_hx_struct::UnitCoords _hx_tmp2 = ::battle::_hx_struct::UnitCoords_obj::get(::battle::data::Abilities_obj::caster);
HXDLIN( 134)		::battle::IMutableModel_obj::changeHP(_hx_tmp,_hx_tmp1,_hx_tmp2,-(damage),::battle::data::Abilities_obj::element,::battle::enums::Source_obj::Ability_dyn());
HXLINE( 135)		::Dynamic _hx_tmp3 = ::battle::data::Abilities_obj::model;
HXDLIN( 135)		 ::battle::_hx_struct::UnitCoords _hx_tmp4 = ::battle::_hx_struct::UnitCoords_obj::get(::battle::data::Abilities_obj::target);
HXDLIN( 135)		::battle::IMutableModel_obj::castBuff(_hx_tmp3,::ID_obj::BuffLgSnared_dyn(),_hx_tmp4,::battle::_hx_struct::UnitCoords_obj::get(::battle::data::Abilities_obj::caster),(int)3);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Abilities_obj,voltSnare,(void))

void Abilities_obj::energize(){
            	HX_STACKFRAME(&_hx_pos_c416c8142dbc055c_140_energize)
HXDLIN( 140)		::Dynamic _hx_tmp = ::battle::data::Abilities_obj::model;
HXDLIN( 140)		 ::battle::_hx_struct::UnitCoords _hx_tmp1 = ::battle::_hx_struct::UnitCoords_obj::get(::battle::data::Abilities_obj::caster);
HXDLIN( 140)		::battle::IMutableModel_obj::castBuff(_hx_tmp,::ID_obj::BuffLgReenergizing_dyn(),_hx_tmp1,::battle::_hx_struct::UnitCoords_obj::get(::battle::data::Abilities_obj::caster),(int)5);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Abilities_obj,energize,(void))

void Abilities_obj::disrupt(){
            	HX_STACKFRAME(&_hx_pos_c416c8142dbc055c_144_disrupt)
HXLINE( 145)		int dhp;
HXDLIN( 145)		if (hx::IsEq( ::battle::data::Abilities_obj::caster->figureRelation(::battle::data::Abilities_obj::target),::battle::enums::UnitType_obj::Enemy_dyn() )) {
HXLINE( 145)			dhp = (int)-1;
            		}
            		else {
HXLINE( 145)			dhp = (int)1;
            		}
HXDLIN( 145)		int dhp1 = (dhp * ::battle::data::Abilities_obj::caster->intellect);
HXLINE( 147)		::Dynamic _hx_tmp = ::battle::data::Abilities_obj::model;
HXDLIN( 147)		 ::battle::_hx_struct::UnitCoords _hx_tmp1 = ::battle::_hx_struct::UnitCoords_obj::get(::battle::data::Abilities_obj::target);
HXDLIN( 147)		 ::battle::_hx_struct::UnitCoords _hx_tmp2 = ::battle::_hx_struct::UnitCoords_obj::get(::battle::data::Abilities_obj::caster);
HXDLIN( 147)		::battle::IMutableModel_obj::changeHP(_hx_tmp,_hx_tmp1,_hx_tmp2,dhp1,::battle::data::Abilities_obj::element,::battle::enums::Source_obj::Ability_dyn());
HXLINE( 148)		::Dynamic _hx_tmp3 = ::battle::data::Abilities_obj::model;
HXDLIN( 148)		::battle::IMutableModel_obj::dispellBuffs(_hx_tmp3,::battle::_hx_struct::UnitCoords_obj::get(::battle::data::Abilities_obj::target),null(),null());
HXLINE( 149)		::Dynamic _hx_tmp4 = ::battle::data::Abilities_obj::model;
HXDLIN( 149)		 ::battle::_hx_struct::UnitCoords _hx_tmp5 = ::battle::_hx_struct::UnitCoords_obj::get(::battle::data::Abilities_obj::caster);
HXDLIN( 149)		::battle::IMutableModel_obj::castBuff(_hx_tmp4,::ID_obj::BuffLgClarity_dyn(),_hx_tmp5,::battle::_hx_struct::UnitCoords_obj::get(::battle::data::Abilities_obj::caster),(int)2);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Abilities_obj,disrupt,(void))

void Abilities_obj::arcFlash(){
            	HX_GC_STACKFRAME(&_hx_pos_c416c8142dbc055c_153_arcFlash)
HXLINE( 154)		int damage = ((int)3 * ::battle::data::Abilities_obj::caster->intellect);
HXLINE( 155)		 ::Linear mod =  ::Linear_obj::__alloc( HX_CTX ,((Float)2.5),(int)0);
HXLINE( 157)		if ((::battle::data::Abilities_obj::caster->buffQueue->elementalCount(::Element_obj::Lightning_dyn()) > (int)0)) {
HXLINE( 159)			::battle::data::Abilities_obj::caster->critDamage->combine(mod);
HXLINE( 160)			::Dynamic _hx_tmp = ::battle::data::Abilities_obj::model;
HXDLIN( 160)			 ::battle::_hx_struct::UnitCoords _hx_tmp1 = ::battle::_hx_struct::UnitCoords_obj::get(::battle::data::Abilities_obj::target);
HXDLIN( 160)			 ::battle::_hx_struct::UnitCoords _hx_tmp2 = ::battle::_hx_struct::UnitCoords_obj::get(::battle::data::Abilities_obj::caster);
HXDLIN( 160)			::battle::IMutableModel_obj::changeHP(_hx_tmp,_hx_tmp1,_hx_tmp2,-(damage),::battle::data::Abilities_obj::element,::battle::enums::Source_obj::Ability_dyn());
HXLINE( 161)			::battle::data::Abilities_obj::caster->critDamage->detach(mod);
            		}
            		else {
HXLINE( 164)			::Dynamic _hx_tmp3 = ::battle::data::Abilities_obj::model;
HXDLIN( 164)			 ::battle::_hx_struct::UnitCoords _hx_tmp4 = ::battle::_hx_struct::UnitCoords_obj::get(::battle::data::Abilities_obj::target);
HXDLIN( 164)			 ::battle::_hx_struct::UnitCoords _hx_tmp5 = ::battle::_hx_struct::UnitCoords_obj::get(::battle::data::Abilities_obj::caster);
HXDLIN( 164)			::battle::IMutableModel_obj::changeHP(_hx_tmp3,_hx_tmp4,_hx_tmp5,-(damage),::battle::data::Abilities_obj::element,::battle::enums::Source_obj::Ability_dyn());
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Abilities_obj,arcFlash,(void))

void Abilities_obj::empBlast(){
            	HX_STACKFRAME(&_hx_pos_c416c8142dbc055c_168_empBlast)
HXLINE( 169)		int damage = ::Math_obj::ceil((((Float)3.5) * ::battle::data::Abilities_obj::caster->intellect));
HXLINE( 171)		::Dynamic _hx_tmp = ::battle::data::Abilities_obj::model;
HXDLIN( 171)		 ::battle::_hx_struct::UnitCoords _hx_tmp1 = ::battle::_hx_struct::UnitCoords_obj::get(::battle::data::Abilities_obj::target);
HXDLIN( 171)		 ::battle::_hx_struct::UnitCoords _hx_tmp2 = ::battle::_hx_struct::UnitCoords_obj::get(::battle::data::Abilities_obj::caster);
HXDLIN( 171)		::battle::IMutableModel_obj::changeHP(_hx_tmp,_hx_tmp1,_hx_tmp2,-(damage),::battle::data::Abilities_obj::element,::battle::enums::Source_obj::Ability_dyn());
HXLINE( 172)		::Dynamic _hx_tmp3 = ::battle::data::Abilities_obj::model;
HXDLIN( 172)		 ::battle::_hx_struct::UnitCoords _hx_tmp4 = ::battle::_hx_struct::UnitCoords_obj::get(::battle::data::Abilities_obj::target);
HXDLIN( 172)		 ::battle::_hx_struct::UnitCoords _hx_tmp5 = ::battle::_hx_struct::UnitCoords_obj::get(::battle::data::Abilities_obj::caster);
HXDLIN( 172)		::battle::IMutableModel_obj::changeAlacrity(_hx_tmp3,_hx_tmp4,_hx_tmp5,-(::battle::data::Abilities_obj::target->alacrityPool->value),::battle::enums::Source_obj::Ability_dyn());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Abilities_obj,empBlast,(void))

void Abilities_obj::ghostStrike(){
            	HX_STACKFRAME(&_hx_pos_c416c8142dbc055c_180_ghostStrike)
HXLINE( 181)		int damage = (::battle::data::Abilities_obj::caster->strength * (int)2);
HXLINE( 183)		::Dynamic _hx_tmp = ::battle::data::Abilities_obj::model;
HXDLIN( 183)		 ::battle::_hx_struct::UnitCoords _hx_tmp1 = ::battle::_hx_struct::UnitCoords_obj::get(::battle::data::Abilities_obj::target);
HXDLIN( 183)		 ::battle::_hx_struct::UnitCoords _hx_tmp2 = ::battle::_hx_struct::UnitCoords_obj::get(::battle::data::Abilities_obj::caster);
HXDLIN( 183)		::battle::IMutableModel_obj::changeHP(_hx_tmp,_hx_tmp1,_hx_tmp2,-(damage),::battle::data::Abilities_obj::element,::battle::enums::Source_obj::Ability_dyn());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Abilities_obj,ghostStrike,(void))

void Abilities_obj::stub(){
            	HX_STACKFRAME(&_hx_pos_c416c8142dbc055c_191_stub)
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Abilities_obj,stub,(void))


Abilities_obj::Abilities_obj()
{
}

bool Abilities_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"flag") ) { outValue = ( flag ); return true; }
		if (HX_FIELD_EQ(inName,"init") ) { outValue = init_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"stub") ) { outValue = stub_dyn(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"model") ) { outValue = ( model ); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"target") ) { outValue = ( target ); return true; }
		if (HX_FIELD_EQ(inName,"caster") ) { outValue = ( caster ); return true; }
		if (HX_FIELD_EQ(inName,"charge") ) { outValue = charge_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"element") ) { outValue = ( element ); return true; }
		if (HX_FIELD_EQ(inName,"disrupt") ) { outValue = disrupt_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"energize") ) { outValue = energize_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"arcFlash") ) { outValue = arcFlash_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"empBlast") ) { outValue = empBlast_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"voltSnare") ) { outValue = voltSnare_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"useAbility") ) { outValue = useAbility_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"highVoltage") ) { outValue = highVoltage_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"ghostStrike") ) { outValue = ghostStrike_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"shockTherapy") ) { outValue = shockTherapy_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"lightningBolt") ) { outValue = lightningBolt_dyn(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"electricalStorm") ) { outValue = electricalStorm_dyn(); return true; }
	}
	return false;
}

bool Abilities_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"flag") ) { flag=ioValue.Cast< bool >(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"model") ) { model=ioValue.Cast< ::Dynamic >(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"target") ) { target=ioValue.Cast<  ::battle::Unit >(); return true; }
		if (HX_FIELD_EQ(inName,"caster") ) { caster=ioValue.Cast<  ::battle::Unit >(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"element") ) { element=ioValue.Cast<  ::Element >(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *Abilities_obj_sMemberStorageInfo = 0;
static hx::StaticInfo Abilities_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*::battle::IMutableModel*/ ,(void *) &Abilities_obj::model,HX_HCSTRING("model","\xa9","\x23","\x58","\x0c")},
	{hx::fsBool,(void *) &Abilities_obj::flag,HX_HCSTRING("flag","\xac","\x0b","\xbe","\x43")},
	{hx::fsObject /*::battle::Unit*/ ,(void *) &Abilities_obj::target,HX_HCSTRING("target","\x51","\xf3","\xec","\x86")},
	{hx::fsObject /*::battle::Unit*/ ,(void *) &Abilities_obj::caster,HX_HCSTRING("caster","\xec","\xe4","\x8e","\xbb")},
	{hx::fsObject /*::Element*/ ,(void *) &Abilities_obj::element,HX_HCSTRING("element","\xbc","\xae","\x54","\x06")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static void Abilities_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Abilities_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(Abilities_obj::model,"model");
	HX_MARK_MEMBER_NAME(Abilities_obj::flag,"flag");
	HX_MARK_MEMBER_NAME(Abilities_obj::target,"target");
	HX_MARK_MEMBER_NAME(Abilities_obj::caster,"caster");
	HX_MARK_MEMBER_NAME(Abilities_obj::element,"element");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Abilities_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Abilities_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(Abilities_obj::model,"model");
	HX_VISIT_MEMBER_NAME(Abilities_obj::flag,"flag");
	HX_VISIT_MEMBER_NAME(Abilities_obj::target,"target");
	HX_VISIT_MEMBER_NAME(Abilities_obj::caster,"caster");
	HX_VISIT_MEMBER_NAME(Abilities_obj::element,"element");
};

#endif

hx::Class Abilities_obj::__mClass;

static ::String Abilities_obj_sStaticFields[] = {
	HX_HCSTRING("model","\xa9","\x23","\x58","\x0c"),
	HX_HCSTRING("flag","\xac","\x0b","\xbe","\x43"),
	HX_HCSTRING("target","\x51","\xf3","\xec","\x86"),
	HX_HCSTRING("caster","\xec","\xe4","\x8e","\xbb"),
	HX_HCSTRING("element","\xbc","\xae","\x54","\x06"),
	HX_HCSTRING("init","\x10","\x3b","\xbb","\x45"),
	HX_HCSTRING("useAbility","\x23","\x84","\x14","\xb0"),
	HX_HCSTRING("shockTherapy","\x27","\x7d","\x5a","\x6c"),
	HX_HCSTRING("highVoltage","\x1c","\xa6","\x96","\x2a"),
	HX_HCSTRING("electricalStorm","\xc1","\xc4","\x46","\x8b"),
	HX_HCSTRING("charge","\x74","\x9a","\x75","\xb7"),
	HX_HCSTRING("lightningBolt","\xbf","\x33","\x51","\x09"),
	HX_HCSTRING("voltSnare","\xd8","\x72","\xdb","\x07"),
	HX_HCSTRING("energize","\x63","\xb1","\x3e","\xb9"),
	HX_HCSTRING("disrupt","\xd5","\x78","\xa3","\xbc"),
	HX_HCSTRING("arcFlash","\xfe","\x7d","\xba","\x5b"),
	HX_HCSTRING("empBlast","\x90","\x53","\xa2","\x55"),
	HX_HCSTRING("ghostStrike","\xe1","\x0e","\x92","\x3d"),
	HX_HCSTRING("stub","\x2e","\xf5","\x5b","\x4c"),
	::String(null())
};

void Abilities_obj::__register()
{
	hx::Object *dummy = new Abilities_obj;
	Abilities_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("battle.data.Abilities","\x9a","\x3b","\x96","\x22");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Abilities_obj::__GetStatic;
	__mClass->mSetStaticField = &Abilities_obj::__SetStatic;
	__mClass->mMarkFunc = Abilities_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Abilities_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< Abilities_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Abilities_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Abilities_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Abilities_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Abilities_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_c416c8142dbc055c_23_boot)
HXDLIN(  23)		flag = true;
            	}
}

} // end namespace battle
} // end namespace data
