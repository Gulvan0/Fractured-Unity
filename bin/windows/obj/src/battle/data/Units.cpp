// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_ID
#include <ID.h>
#endif
#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_battle_IMutableModel
#include <battle/IMutableModel.h>
#endif
#ifndef INCLUDED_battle_Unit
#include <battle/Unit.h>
#endif
#ifndef INCLUDED_battle_data_Units
#include <battle/data/Units.h>
#endif
#ifndef INCLUDED_battle_enums_Team
#include <battle/enums/Team.h>
#endif
#ifndef INCLUDED_battle_struct_Pool
#include <battle/struct/Pool.h>
#endif
#ifndef INCLUDED_battle_struct_UPair
#include <battle/struct/UPair.h>
#endif
#ifndef INCLUDED_battle_struct_UnitCoords
#include <battle/struct/UnitCoords.h>
#endif
#ifndef INCLUDED_hxassert_Assert
#include <hxassert/Assert.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_969766e5d43cf58e_22_init,"battle.data.Units","init",0x0837b71d,"battle.data.Units.init","battle/data/Units.hx",22,0x67c8863d)
HX_LOCAL_STACK_FRAME(_hx_pos_969766e5d43cf58e_32_decide,"battle.data.Units","decide",0x1c8628f5,"battle.data.Units.decide","battle/data/Units.hx",32,0x67c8863d)
HX_LOCAL_STACK_FRAME(_hx_pos_969766e5d43cf58e_45_ghost,"battle.data.Units","ghost",0xfdc89ea2,"battle.data.Units.ghost","battle/data/Units.hx",45,0x67c8863d)
HX_LOCAL_STACK_FRAME(_hx_pos_969766e5d43cf58e_56_findWeakestUnit,"battle.data.Units","findWeakestUnit",0x683201cc,"battle.data.Units.findWeakestUnit","battle/data/Units.hx",56,0x67c8863d)
static const ::String _hx_array_data_2e635f81_5[] = {
	HX_("Assertion failed: array.length > 0",2a,41,38,f3),
};
HX_LOCAL_STACK_FRAME(_hx_pos_969766e5d43cf58e_18_boot,"battle.data.Units","boot",0x0398003f,"battle.data.Units.boot","battle/data/Units.hx",18,0x67c8863d)
namespace battle{
namespace data{

void Units_obj::__construct() { }

Dynamic Units_obj::__CreateEmpty() { return new Units_obj; }

void *Units_obj::_hx_vtable = 0;

Dynamic Units_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Units_obj > _hx_result = new Units_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Units_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x25f06ead;
}

::Dynamic Units_obj::model;

bool Units_obj::flag;

void Units_obj::init(::Dynamic m){
            	HX_STACKFRAME(&_hx_pos_969766e5d43cf58e_22_init)
HXDLIN(  22)		if (::battle::data::Units_obj::flag) {
HXLINE(  24)			::battle::data::Units_obj::model = m;
HXLINE(  25)			::battle::data::Units_obj::flag = false;
            		}
            		else {
HXLINE(  28)			HX_STACK_DO_THROW(HX_("Attempt to re-init",d8,b9,98,2d));
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Units_obj,init,(void))

 ::Dynamic Units_obj::decide( ::ID id){
            	HX_STACKFRAME(&_hx_pos_969766e5d43cf58e_32_decide)
HXLINE(  33)		switch((int)(_hx_getEnumValueIndex(id))){
            			case (int)16: case (int)17: {
HXLINE(  36)				return ::battle::data::Units_obj::ghost();
            			}
            			break;
            			default:{
            			}
            		}
HXLINE(  41)		HX_STACK_DO_THROW((HX_("battle.data.Units->decide() exception: Invalid unit ID: ",e4,ec,c0,c6) + ::Type_obj::enumConstructor(id)));
HXDLIN(  41)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Units_obj,decide,return )

 ::Dynamic Units_obj::ghost(){
            	HX_STACKFRAME(&_hx_pos_969766e5d43cf58e_45_ghost)
HXLINE(  46)		 ::battle::_hx_struct::UnitCoords target = ::battle::data::Units_obj::findWeakestUnit(::battle::IMutableModel_obj::getUnits(::battle::data::Units_obj::model)->left);
HXLINE(  48)		return  ::Dynamic(hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("target",51,f3,ec,86),target)
            			->setFixed(1,HX_("abilityNum",bc,1a,8b,b3),(int)0));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Units_obj,ghost,return )

 ::battle::_hx_struct::UnitCoords Units_obj::findWeakestUnit(::Array< ::Dynamic> array){
            	HX_GC_STACKFRAME(&_hx_pos_969766e5d43cf58e_56_findWeakestUnit)
HXLINE( 151)		if ((false == (array->length > (int)0))) {
HXLINE(  57)			::hxassert::Assert_obj::throwAssertionFailureError(::Array_obj< ::String >::fromData( _hx_array_data_2e635f81_5,1),hx::SourceInfo(HX_("Units.hx",cf,e4,13,ee),57,HX_("battle.data.Units",81,5f,63,2e),HX_("findWeakestUnit",b9,6c,5c,c1)));
            		}
HXLINE(  59)		 ::battle::Unit result = array->__get((int)0).StaticCast<  ::battle::Unit >();
HXLINE(  61)		{
HXLINE(  61)			int _g = (int)0;
HXDLIN(  61)			while((_g < array->length)){
HXLINE(  61)				 ::battle::Unit unit = array->__get(_g).StaticCast<  ::battle::Unit >();
HXDLIN(  61)				_g = (_g + (int)1);
HXLINE(  62)				if ((unit->hpPool->value < result->hpPool->value)) {
HXLINE(  63)					result = unit;
            				}
            			}
            		}
HXLINE(  65)		return  ::battle::_hx_struct::UnitCoords_obj::__alloc( HX_CTX ,result->team,result->position);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Units_obj,findWeakestUnit,return )


Units_obj::Units_obj()
{
}

bool Units_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"flag") ) { outValue = ( flag ); return true; }
		if (HX_FIELD_EQ(inName,"init") ) { outValue = init_dyn(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"model") ) { outValue = ( model ); return true; }
		if (HX_FIELD_EQ(inName,"ghost") ) { outValue = ghost_dyn(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"decide") ) { outValue = decide_dyn(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"findWeakestUnit") ) { outValue = findWeakestUnit_dyn(); return true; }
	}
	return false;
}

bool Units_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"flag") ) { flag=ioValue.Cast< bool >(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"model") ) { model=ioValue.Cast< ::Dynamic >(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *Units_obj_sMemberStorageInfo = 0;
static hx::StaticInfo Units_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*::battle::IMutableModel*/ ,(void *) &Units_obj::model,HX_HCSTRING("model","\xa9","\x23","\x58","\x0c")},
	{hx::fsBool,(void *) &Units_obj::flag,HX_HCSTRING("flag","\xac","\x0b","\xbe","\x43")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static void Units_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Units_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(Units_obj::model,"model");
	HX_MARK_MEMBER_NAME(Units_obj::flag,"flag");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Units_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Units_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(Units_obj::model,"model");
	HX_VISIT_MEMBER_NAME(Units_obj::flag,"flag");
};

#endif

hx::Class Units_obj::__mClass;

static ::String Units_obj_sStaticFields[] = {
	HX_HCSTRING("model","\xa9","\x23","\x58","\x0c"),
	HX_HCSTRING("flag","\xac","\x0b","\xbe","\x43"),
	HX_HCSTRING("init","\x10","\x3b","\xbb","\x45"),
	HX_HCSTRING("decide","\xa8","\xcf","\xe8","\x64"),
	HX_HCSTRING("ghost","\x4f","\x8f","\x58","\x93"),
	HX_HCSTRING("findWeakestUnit","\xb9","\x6c","\x5c","\xc1"),
	::String(null())
};

void Units_obj::__register()
{
	hx::Object *dummy = new Units_obj;
	Units_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("battle.data.Units","\x81","\x5f","\x63","\x2e");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Units_obj::__GetStatic;
	__mClass->mSetStaticField = &Units_obj::__SetStatic;
	__mClass->mMarkFunc = Units_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Units_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< Units_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Units_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Units_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Units_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Units_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_969766e5d43cf58e_18_boot)
HXDLIN(  18)		flag = true;
            	}
}

} // end namespace battle
} // end namespace data
