// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_ID
#include <ID.h>
#endif
#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_XMLUtils
#include <XMLUtils.h>
#endif
#ifndef INCLUDED_battle_Ability
#include <battle/Ability.h>
#endif
#ifndef INCLUDED_battle_Active
#include <battle/Active.h>
#endif
#ifndef INCLUDED_battle_enums_AbilityTarget
#include <battle/enums/AbilityTarget.h>
#endif
#ifndef INCLUDED_battle_enums_StrikeType
#include <battle/enums/StrikeType.h>
#endif
#ifndef INCLUDED_battle_enums_UnitType
#include <battle/enums/UnitType.h>
#endif
#ifndef INCLUDED_battle_struct_Countdown
#include <battle/struct/Countdown.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_b6025ebea2650800_35_new,"battle.Active","new",0xac94dd4e,"battle.Active.new","battle/Active.hx",35,0x1ce73dc1)
HX_LOCAL_STACK_FRAME(_hx_pos_b6025ebea2650800_25_putOnCooldown,"battle.Active","putOnCooldown",0xe6d68207,"battle.Active.putOnCooldown","battle/Active.hx",25,0x1ce73dc1)
HX_LOCAL_STACK_FRAME(_hx_pos_b6025ebea2650800_30_tick,"battle.Active","tick",0x59a706af,"battle.Active.tick","battle/Active.hx",30,0x1ce73dc1)
HX_LOCAL_STACK_FRAME(_hx_pos_b6025ebea2650800_54_checkOnCooldown,"battle.Active","checkOnCooldown",0xb94a40c0,"battle.Active.checkOnCooldown","battle/Active.hx",54,0x1ce73dc1)
HX_LOCAL_STACK_FRAME(_hx_pos_b6025ebea2650800_59_checkValidity,"battle.Active","checkValidity",0x10940208,"battle.Active.checkValidity","battle/Active.hx",59,0x1ce73dc1)
HX_LOCAL_STACK_FRAME(_hx_pos_b6025ebea2650800_80_get_cooldown,"battle.Active","get_cooldown",0x3534e506,"battle.Active.get_cooldown","battle/Active.hx",80,0x1ce73dc1)
HX_LOCAL_STACK_FRAME(_hx_pos_b6025ebea2650800_85_get_maxCooldown,"battle.Active","get_maxCooldown",0x98e1c7f4,"battle.Active.get_maxCooldown","battle/Active.hx",85,0x1ce73dc1)
namespace battle{

void Active_obj::__construct( ::ID id){
            	HX_GC_STACKFRAME(&_hx_pos_b6025ebea2650800_35_new)
HXLINE(  36)		super::__construct(id);
HXLINE(  38)		bool _hx_tmp;
HXDLIN(  38)		bool _hx_tmp1;
HXDLIN(  38)		if (hx::IsNotEq( this->id,::ID_obj::EmptyAbility_dyn() )) {
HXLINE(  38)			_hx_tmp1 = hx::IsEq( this->id,::ID_obj::LockAbility_dyn() );
            		}
            		else {
HXLINE(  38)			_hx_tmp1 = true;
            		}
HXDLIN(  38)		if (!(_hx_tmp1)) {
HXLINE(  38)			_hx_tmp = hx::IsNotEq( id,::ID_obj::NullID_dyn() );
            		}
            		else {
HXLINE(  38)			_hx_tmp = false;
            		}
HXDLIN(  38)		if (_hx_tmp) {
HXLINE(  40)			 ::Dynamic _hx_tmp2 = ::XMLUtils_obj::parseAbility(id,HX_("delay",83,d7,26,d7),(int)0);
HXDLIN(  40)			this->_cooldown =  ::battle::_hx_struct::Countdown_obj::__alloc( HX_CTX ,_hx_tmp2,::XMLUtils_obj::parseAbility(id,HX_("cooldown",ab,4b,a2,f9),(int)0));
HXLINE(  41)			this->manacost = ( (int)(::XMLUtils_obj::parseAbility(id,HX_("manacost",54,4a,01,33),(int)0)) );
HXLINE(  42)			this->possibleTarget = ::XMLUtils_obj::parseAbility(id,HX_("target",51,f3,ec,86),::battle::enums::AbilityTarget_obj::All_dyn());
HXLINE(  43)			this->strikeType = ::XMLUtils_obj::parseAbility(id,HX_("strike",32,26,30,11),::battle::enums::StrikeType_obj::Bolt_dyn());
HXLINE(  44)			this->aoe = ( (bool)(::XMLUtils_obj::parseAbility(id,HX_("aoe",b7,fb,49,00),true)) );
            		}
            	}

Dynamic Active_obj::__CreateEmpty() { return new Active_obj; }

void *Active_obj::_hx_vtable = 0;

Dynamic Active_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Active_obj > _hx_result = new Active_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool Active_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x289e35de) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x289e35de;
	} else {
		return inClassId==(int)0x76cf12ae;
	}
}

void Active_obj::putOnCooldown(){
            	HX_STACKFRAME(&_hx_pos_b6025ebea2650800_25_putOnCooldown)
HXDLIN(  25)		this->_cooldown->value = this->_cooldown->keyValue;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Active_obj,putOnCooldown,(void))

void Active_obj::tick(){
            	HX_STACKFRAME(&_hx_pos_b6025ebea2650800_30_tick)
HXDLIN(  30)		if ((this->_cooldown->value > (int)0)) {
HXLINE(  31)			this->_cooldown->value--;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Active_obj,tick,(void))

bool Active_obj::checkOnCooldown(){
            	HX_STACKFRAME(&_hx_pos_b6025ebea2650800_54_checkOnCooldown)
HXDLIN(  54)		return (this->_cooldown->value > (int)0);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Active_obj,checkOnCooldown,return )

bool Active_obj::checkValidity( ::battle::enums::UnitType relation){
            	HX_STACKFRAME(&_hx_pos_b6025ebea2650800_59_checkValidity)
HXDLIN(  59)		 ::battle::enums::AbilityTarget _g = this->possibleTarget;
HXDLIN(  59)		switch((int)(_hx_getEnumValueIndex(_g))){
            			case (int)0: {
HXLINE(  66)				return hx::IsEq( relation,::battle::enums::UnitType_obj::Self_dyn() );
            			}
            			break;
            			case (int)1: {
HXLINE(  64)				if (hx::IsNotEq( relation,::battle::enums::UnitType_obj::Ally_dyn() )) {
HXLINE(  64)					return hx::IsEq( relation,::battle::enums::UnitType_obj::Self_dyn() );
            				}
            				else {
HXLINE(  64)					return true;
            				}
            			}
            			break;
            			case (int)2: {
HXLINE(  62)				return hx::IsEq( relation,::battle::enums::UnitType_obj::Enemy_dyn() );
            			}
            			break;
            			case (int)3: {
HXLINE(  68)				return true;
            			}
            			break;
            		}
HXLINE(  59)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Active_obj,checkValidity,return )

int Active_obj::get_cooldown(){
            	HX_STACKFRAME(&_hx_pos_b6025ebea2650800_80_get_cooldown)
HXDLIN(  80)		return this->_cooldown->value;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Active_obj,get_cooldown,return )

int Active_obj::get_maxCooldown(){
            	HX_STACKFRAME(&_hx_pos_b6025ebea2650800_85_get_maxCooldown)
HXDLIN(  85)		return this->_cooldown->keyValue;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Active_obj,get_maxCooldown,return )


hx::ObjectPtr< Active_obj > Active_obj::__new( ::ID id) {
	hx::ObjectPtr< Active_obj > __this = new Active_obj();
	__this->__construct(id);
	return __this;
}

hx::ObjectPtr< Active_obj > Active_obj::__alloc(hx::Ctx *_hx_ctx, ::ID id) {
	Active_obj *__this = (Active_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Active_obj), true, "battle.Active"));
	*(void **)__this = Active_obj::_hx_vtable;
	__this->__construct(id);
	return __this;
}

Active_obj::Active_obj()
{
}

void Active_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Active);
	HX_MARK_MEMBER_NAME(strikeType,"strikeType");
	HX_MARK_MEMBER_NAME(possibleTarget,"possibleTarget");
	HX_MARK_MEMBER_NAME(aoe,"aoe");
	HX_MARK_MEMBER_NAME(_cooldown,"_cooldown");
	HX_MARK_MEMBER_NAME(cooldown,"cooldown");
	HX_MARK_MEMBER_NAME(maxCooldown,"maxCooldown");
	HX_MARK_MEMBER_NAME(manacost,"manacost");
	 ::battle::Ability_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Active_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(strikeType,"strikeType");
	HX_VISIT_MEMBER_NAME(possibleTarget,"possibleTarget");
	HX_VISIT_MEMBER_NAME(aoe,"aoe");
	HX_VISIT_MEMBER_NAME(_cooldown,"_cooldown");
	HX_VISIT_MEMBER_NAME(cooldown,"cooldown");
	HX_VISIT_MEMBER_NAME(maxCooldown,"maxCooldown");
	HX_VISIT_MEMBER_NAME(manacost,"manacost");
	 ::battle::Ability_obj::__Visit(HX_VISIT_ARG);
}

hx::Val Active_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"aoe") ) { return hx::Val( aoe ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"tick") ) { return hx::Val( tick_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"cooldown") ) { return hx::Val( inCallProp == hx::paccAlways ? get_cooldown() : cooldown ); }
		if (HX_FIELD_EQ(inName,"manacost") ) { return hx::Val( manacost ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"_cooldown") ) { return hx::Val( _cooldown ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"strikeType") ) { return hx::Val( strikeType ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"maxCooldown") ) { return hx::Val( inCallProp == hx::paccAlways ? get_maxCooldown() : maxCooldown ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"get_cooldown") ) { return hx::Val( get_cooldown_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"putOnCooldown") ) { return hx::Val( putOnCooldown_dyn() ); }
		if (HX_FIELD_EQ(inName,"checkValidity") ) { return hx::Val( checkValidity_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"possibleTarget") ) { return hx::Val( possibleTarget ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"checkOnCooldown") ) { return hx::Val( checkOnCooldown_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_maxCooldown") ) { return hx::Val( get_maxCooldown_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Active_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"aoe") ) { aoe=inValue.Cast< bool >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"cooldown") ) { cooldown=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"manacost") ) { manacost=inValue.Cast< int >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"_cooldown") ) { _cooldown=inValue.Cast<  ::battle::_hx_struct::Countdown >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"strikeType") ) { strikeType=inValue.Cast<  ::battle::enums::StrikeType >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"maxCooldown") ) { maxCooldown=inValue.Cast< int >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"possibleTarget") ) { possibleTarget=inValue.Cast<  ::battle::enums::AbilityTarget >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Active_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("strikeType","\x0c","\x46","\x26","\xa5"));
	outFields->push(HX_HCSTRING("possibleTarget","\xa2","\x14","\xea","\xba"));
	outFields->push(HX_HCSTRING("aoe","\xb7","\xfb","\x49","\x00"));
	outFields->push(HX_HCSTRING("_cooldown","\x0a","\x43","\x38","\x41"));
	outFields->push(HX_HCSTRING("cooldown","\xab","\x4b","\xa2","\xf9"));
	outFields->push(HX_HCSTRING("maxCooldown","\x6f","\x56","\x68","\x6f"));
	outFields->push(HX_HCSTRING("manacost","\x54","\x4a","\x01","\x33"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Active_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::battle::enums::StrikeType*/ ,(int)offsetof(Active_obj,strikeType),HX_HCSTRING("strikeType","\x0c","\x46","\x26","\xa5")},
	{hx::fsObject /*::battle::enums::AbilityTarget*/ ,(int)offsetof(Active_obj,possibleTarget),HX_HCSTRING("possibleTarget","\xa2","\x14","\xea","\xba")},
	{hx::fsBool,(int)offsetof(Active_obj,aoe),HX_HCSTRING("aoe","\xb7","\xfb","\x49","\x00")},
	{hx::fsObject /*::battle::_hx_struct::Countdown*/ ,(int)offsetof(Active_obj,_cooldown),HX_HCSTRING("_cooldown","\x0a","\x43","\x38","\x41")},
	{hx::fsInt,(int)offsetof(Active_obj,cooldown),HX_HCSTRING("cooldown","\xab","\x4b","\xa2","\xf9")},
	{hx::fsInt,(int)offsetof(Active_obj,maxCooldown),HX_HCSTRING("maxCooldown","\x6f","\x56","\x68","\x6f")},
	{hx::fsInt,(int)offsetof(Active_obj,manacost),HX_HCSTRING("manacost","\x54","\x4a","\x01","\x33")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Active_obj_sStaticStorageInfo = 0;
#endif

static ::String Active_obj_sMemberFields[] = {
	HX_HCSTRING("strikeType","\x0c","\x46","\x26","\xa5"),
	HX_HCSTRING("possibleTarget","\xa2","\x14","\xea","\xba"),
	HX_HCSTRING("aoe","\xb7","\xfb","\x49","\x00"),
	HX_HCSTRING("_cooldown","\x0a","\x43","\x38","\x41"),
	HX_HCSTRING("cooldown","\xab","\x4b","\xa2","\xf9"),
	HX_HCSTRING("maxCooldown","\x6f","\x56","\x68","\x6f"),
	HX_HCSTRING("manacost","\x54","\x4a","\x01","\x33"),
	HX_HCSTRING("putOnCooldown","\x99","\xbf","\x86","\xc3"),
	HX_HCSTRING("tick","\x5d","\xc3","\xfc","\x4c"),
	HX_HCSTRING("checkOnCooldown","\xd2","\x86","\xb2","\x50"),
	HX_HCSTRING("checkValidity","\x9a","\x3f","\x44","\xed"),
	HX_HCSTRING("get_cooldown","\xb4","\xff","\xbb","\xae"),
	HX_HCSTRING("get_maxCooldown","\x06","\x0e","\x4a","\x30"),
	::String(null()) };

static void Active_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Active_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Active_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Active_obj::__mClass,"__mClass");
};

#endif

hx::Class Active_obj::__mClass;

void Active_obj::__register()
{
	hx::Object *dummy = new Active_obj;
	Active_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("battle.Active","\x5c","\xde","\x34","\x76");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Active_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Active_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Active_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Active_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Active_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Active_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace battle
