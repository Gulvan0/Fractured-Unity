// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_ID
#include <ID.h>
#endif
#ifndef INCLUDED_XMLUtils
#include <XMLUtils.h>
#endif
#ifndef INCLUDED_battle_Ability
#include <battle/Ability.h>
#endif
#ifndef INCLUDED_battle_Passive
#include <battle/Passive.h>
#endif
#ifndef INCLUDED_battle_data_BattleEvent
#include <battle/data/BattleEvent.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_789b1778b0a6cd88_22_new,"battle.Passive","new",0xfb644bc3,"battle.Passive.new","battle/Passive.hx",22,0xede8084e)
HX_LOCAL_STACK_FRAME(_hx_pos_789b1778b0a6cd88_14_reactsTo,"battle.Passive","reactsTo",0x5c62c46c,"battle.Passive.reactsTo","battle/Passive.hx",14,0xede8084e)
namespace battle{

void Passive_obj::__construct( ::ID id){
            	HX_STACKFRAME(&_hx_pos_789b1778b0a6cd88_22_new)
HXLINE(  23)		super::__construct(id);
HXLINE(  24)		this->triggers = ::XMLUtils_obj::parseTriggers(id);
            	}

Dynamic Passive_obj::__CreateEmpty() { return new Passive_obj; }

void *Passive_obj::_hx_vtable = 0;

Dynamic Passive_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Passive_obj > _hx_result = new Passive_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool Passive_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x76cf12ae) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x76cf12ae;
	} else {
		return inClassId==(int)0x7807e88f;
	}
}

bool Passive_obj::reactsTo( ::battle::data::BattleEvent event){
            	HX_STACKFRAME(&_hx_pos_789b1778b0a6cd88_14_reactsTo)
HXLINE(  15)		{
HXLINE(  15)			int _g = (int)0;
HXDLIN(  15)			::Array< ::Dynamic> _g1 = this->triggers;
HXDLIN(  15)			while((_g < _g1->length)){
HXLINE(  15)				 ::battle::data::BattleEvent e = _g1->__get(_g).StaticCast<  ::battle::data::BattleEvent >();
HXDLIN(  15)				_g = (_g + (int)1);
HXLINE(  16)				if (hx::IsEq( e,event )) {
HXLINE(  17)					return true;
            				}
            			}
            		}
HXLINE(  18)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Passive_obj,reactsTo,return )


hx::ObjectPtr< Passive_obj > Passive_obj::__new( ::ID id) {
	hx::ObjectPtr< Passive_obj > __this = new Passive_obj();
	__this->__construct(id);
	return __this;
}

hx::ObjectPtr< Passive_obj > Passive_obj::__alloc(hx::Ctx *_hx_ctx, ::ID id) {
	Passive_obj *__this = (Passive_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Passive_obj), true, "battle.Passive"));
	*(void **)__this = Passive_obj::_hx_vtable;
	__this->__construct(id);
	return __this;
}

Passive_obj::Passive_obj()
{
}

void Passive_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Passive);
	HX_MARK_MEMBER_NAME(triggers,"triggers");
	 ::battle::Ability_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Passive_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(triggers,"triggers");
	 ::battle::Ability_obj::__Visit(HX_VISIT_ARG);
}

hx::Val Passive_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"triggers") ) { return hx::Val( triggers ); }
		if (HX_FIELD_EQ(inName,"reactsTo") ) { return hx::Val( reactsTo_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Passive_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"triggers") ) { triggers=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Passive_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("triggers","\x3b","\x3c","\x8b","\xfd"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Passive_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(Passive_obj,triggers),HX_HCSTRING("triggers","\x3b","\x3c","\x8b","\xfd")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Passive_obj_sStaticStorageInfo = 0;
#endif

static ::String Passive_obj_sMemberFields[] = {
	HX_HCSTRING("triggers","\x3b","\x3c","\x8b","\xfd"),
	HX_HCSTRING("reactsTo","\xaf","\x66","\xbc","\xf6"),
	::String(null()) };

static void Passive_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Passive_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Passive_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Passive_obj::__mClass,"__mClass");
};

#endif

hx::Class Passive_obj::__mClass;

void Passive_obj::__register()
{
	hx::Object *dummy = new Passive_obj;
	Passive_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("battle.Passive","\x51","\xae","\x44","\x0e");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Passive_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Passive_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Passive_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Passive_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Passive_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Passive_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace battle
