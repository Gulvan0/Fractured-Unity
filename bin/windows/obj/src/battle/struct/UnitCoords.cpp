// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_MathUtils
#include <MathUtils.h>
#endif
#ifndef INCLUDED_battle_Unit
#include <battle/Unit.h>
#endif
#ifndef INCLUDED_battle_enums_Team
#include <battle/enums/Team.h>
#endif
#ifndef INCLUDED_battle_struct_UnitCoords
#include <battle/struct/UnitCoords.h>
#endif
#ifndef INCLUDED_hxassert_Assert
#include <hxassert/Assert.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_f0275d2799169c1d_40_new,"battle.struct.UnitCoords","new",0x6e9a0a17,"battle.struct.UnitCoords.new","battle/struct/UnitCoords.hx",40,0x42e7bf19)
static const ::String _hx_array_data_8fffb2a5_1[] = {
	HX_("Assertion failed: pos.inRange(0, 2)",70,cb,2a,21),
};
HX_LOCAL_STACK_FRAME(_hx_pos_f0275d2799169c1d_36_equals,"battle.struct.UnitCoords","equals",0x278c60e8,"battle.struct.UnitCoords.equals","battle/struct/UnitCoords.hx",36,0x42e7bf19)
HX_LOCAL_STACK_FRAME(_hx_pos_f0275d2799169c1d_19_player,"battle.struct.UnitCoords","player",0x9f525e0a,"battle.struct.UnitCoords.player","battle/struct/UnitCoords.hx",19,0x42e7bf19)
HX_LOCAL_STACK_FRAME(_hx_pos_f0275d2799169c1d_23_nullC,"battle.struct.UnitCoords","nullC",0xdb4d6d53,"battle.struct.UnitCoords.nullC","battle/struct/UnitCoords.hx",23,0x42e7bf19)
HX_LOCAL_STACK_FRAME(_hx_pos_f0275d2799169c1d_31_get,"battle.struct.UnitCoords","get",0x6e94ba4d,"battle.struct.UnitCoords.get","battle/struct/UnitCoords.hx",31,0x42e7bf19)
namespace battle{
namespace _hx_struct{

void UnitCoords_obj::__construct( ::battle::enums::Team team,int pos){
            	HX_STACKFRAME(&_hx_pos_f0275d2799169c1d_40_new)
HXLINE( 151)		if ((false == ::MathUtils_obj::inRange(pos,(int)0,(int)2,null(),null()))) {
HXLINE(  41)			::hxassert::Assert_obj::throwAssertionFailureError(::Array_obj< ::String >::fromData( _hx_array_data_8fffb2a5_1,1),hx::SourceInfo(HX_("UnitCoords.hx",1c,7a,e7,e4),41,HX_("battle.struct.UnitCoords",a5,b2,ff,8f),HX_("new",60,d0,53,00)));
            		}
HXLINE(  43)		this->team = team;
HXLINE(  44)		this->pos = pos;
            	}

Dynamic UnitCoords_obj::__CreateEmpty() { return new UnitCoords_obj; }

void *UnitCoords_obj::_hx_vtable = 0;

Dynamic UnitCoords_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< UnitCoords_obj > _hx_result = new UnitCoords_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool UnitCoords_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x2dcd3e6f;
}

bool UnitCoords_obj::equals( ::battle::_hx_struct::UnitCoords coords){
            	HX_STACKFRAME(&_hx_pos_f0275d2799169c1d_36_equals)
HXDLIN(  36)		if ((this->pos == coords->pos)) {
HXDLIN(  36)			return hx::IsEq( this->team,coords->team );
            		}
            		else {
HXDLIN(  36)			return false;
            		}
HXDLIN(  36)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(UnitCoords_obj,equals,return )

 ::battle::_hx_struct::UnitCoords UnitCoords_obj::player(){
            	HX_GC_STACKFRAME(&_hx_pos_f0275d2799169c1d_19_player)
HXDLIN(  19)		return  ::battle::_hx_struct::UnitCoords_obj::__alloc( HX_CTX ,::battle::enums::Team_obj::Left_dyn(),(int)0);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(UnitCoords_obj,player,return )

 ::battle::_hx_struct::UnitCoords UnitCoords_obj::nullC(){
            	HX_GC_STACKFRAME(&_hx_pos_f0275d2799169c1d_23_nullC)
HXLINE(  24)		 ::battle::_hx_struct::UnitCoords a =  ::battle::_hx_struct::UnitCoords_obj::__alloc( HX_CTX ,::battle::enums::Team_obj::Left_dyn(),(int)0);
HXLINE(  25)		a->pos = (int)-1;
HXLINE(  26)		return a;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(UnitCoords_obj,nullC,return )

 ::battle::_hx_struct::UnitCoords UnitCoords_obj::get( ::battle::Unit unit){
            	HX_GC_STACKFRAME(&_hx_pos_f0275d2799169c1d_31_get)
HXDLIN(  31)		return  ::battle::_hx_struct::UnitCoords_obj::__alloc( HX_CTX ,unit->team,unit->position);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(UnitCoords_obj,get,return )


hx::ObjectPtr< UnitCoords_obj > UnitCoords_obj::__new( ::battle::enums::Team team,int pos) {
	hx::ObjectPtr< UnitCoords_obj > __this = new UnitCoords_obj();
	__this->__construct(team,pos);
	return __this;
}

hx::ObjectPtr< UnitCoords_obj > UnitCoords_obj::__alloc(hx::Ctx *_hx_ctx, ::battle::enums::Team team,int pos) {
	UnitCoords_obj *__this = (UnitCoords_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(UnitCoords_obj), true, "battle.struct.UnitCoords"));
	*(void **)__this = UnitCoords_obj::_hx_vtable;
	__this->__construct(team,pos);
	return __this;
}

UnitCoords_obj::UnitCoords_obj()
{
}

void UnitCoords_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(UnitCoords);
	HX_MARK_MEMBER_NAME(team,"team");
	HX_MARK_MEMBER_NAME(pos,"pos");
	HX_MARK_END_CLASS();
}

void UnitCoords_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(team,"team");
	HX_VISIT_MEMBER_NAME(pos,"pos");
}

hx::Val UnitCoords_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"pos") ) { return hx::Val( pos ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"team") ) { return hx::Val( team ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"equals") ) { return hx::Val( equals_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool UnitCoords_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"get") ) { outValue = get_dyn(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"nullC") ) { outValue = nullC_dyn(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"player") ) { outValue = player_dyn(); return true; }
	}
	return false;
}

hx::Val UnitCoords_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"pos") ) { pos=inValue.Cast< int >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"team") ) { team=inValue.Cast<  ::battle::enums::Team >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void UnitCoords_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("team","\x9d","\xb8","\xf9","\x4c"));
	outFields->push(HX_HCSTRING("pos","\x94","\x5d","\x55","\x00"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo UnitCoords_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::battle::enums::Team*/ ,(int)offsetof(UnitCoords_obj,team),HX_HCSTRING("team","\x9d","\xb8","\xf9","\x4c")},
	{hx::fsInt,(int)offsetof(UnitCoords_obj,pos),HX_HCSTRING("pos","\x94","\x5d","\x55","\x00")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *UnitCoords_obj_sStaticStorageInfo = 0;
#endif

static ::String UnitCoords_obj_sMemberFields[] = {
	HX_HCSTRING("team","\x9d","\xb8","\xf9","\x4c"),
	HX_HCSTRING("pos","\x94","\x5d","\x55","\x00"),
	HX_HCSTRING("equals","\x3f","\xee","\xf2","\xbf"),
	::String(null()) };

static void UnitCoords_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(UnitCoords_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void UnitCoords_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(UnitCoords_obj::__mClass,"__mClass");
};

#endif

hx::Class UnitCoords_obj::__mClass;

static ::String UnitCoords_obj_sStaticFields[] = {
	HX_HCSTRING("player","\x61","\xeb","\xb8","\x37"),
	HX_HCSTRING("nullC","\xdc","\x17","\xbc","\xa3"),
	HX_HCSTRING("get","\x96","\x80","\x4e","\x00"),
	::String(null())
};

void UnitCoords_obj::__register()
{
	hx::Object *dummy = new UnitCoords_obj;
	UnitCoords_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("battle.struct.UnitCoords","\xa5","\xb2","\xff","\x8f");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &UnitCoords_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = UnitCoords_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(UnitCoords_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(UnitCoords_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< UnitCoords_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = UnitCoords_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = UnitCoords_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = UnitCoords_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace battle
} // end namespace struct
