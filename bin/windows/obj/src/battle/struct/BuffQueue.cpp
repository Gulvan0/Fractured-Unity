// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_Element
#include <Element.h>
#endif
#ifndef INCLUDED_ID
#include <ID.h>
#endif
#ifndef INCLUDED_MathUtils
#include <MathUtils.h>
#endif
#ifndef INCLUDED_battle_Buff
#include <battle/Buff.h>
#endif
#ifndef INCLUDED_battle_data_BattleEvent
#include <battle/data/BattleEvent.h>
#endif
#ifndef INCLUDED_battle_struct_BuffQueue
#include <battle/struct/BuffQueue.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_hxassert_Assert
#include <hxassert/Assert.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_bf60632022390554_114_new,"battle.struct.BuffQueue","new",0xc06d29ad,"battle.struct.BuffQueue.new","battle/struct/BuffQueue.hx",114,0xb1998c83)
HX_LOCAL_STACK_FRAME(_hx_pos_bf60632022390554_19_addBuff,"battle.struct.BuffQueue","addBuff",0xbd71d061,"battle.struct.BuffQueue.addBuff","battle/struct/BuffQueue.hx",19,0xb1998c83)
HX_LOCAL_STACK_FRAME(_hx_pos_bf60632022390554_38_tick,"battle.struct.BuffQueue","tick",0xa3118d70,"battle.struct.BuffQueue.tick","battle/struct/BuffQueue.hx",38,0xb1998c83)
HX_LOCAL_STACK_FRAME(_hx_pos_bf60632022390554_55_getTriggering,"battle.struct.BuffQueue","getTriggering",0x8ff3026d,"battle.struct.BuffQueue.getTriggering","battle/struct/BuffQueue.hx",55,0xb1998c83)
HX_LOCAL_STACK_FRAME(_hx_pos_bf60632022390554_60_dispellByID,"battle.struct.BuffQueue","dispellByID",0x50edb562,"battle.struct.BuffQueue.dispellByID","battle/struct/BuffQueue.hx",60,0xb1998c83)
HX_LOCAL_STACK_FRAME(_hx_pos_bf60632022390554_64_dispellByElement,"battle.struct.BuffQueue","dispellByElement",0xc2fdf7b5,"battle.struct.BuffQueue.dispellByElement","battle/struct/BuffQueue.hx",64,0xb1998c83)
static const ::String _hx_array_data_8679cf3b_12[] = {
	HX_("Assertion failed: count > 0 || count == -1",17,47,83,66),
};
HX_LOCAL_STACK_FRAME(_hx_pos_bf60632022390554_94_dispellBuff,"battle.struct.BuffQueue","dispellBuff",0x50eac5c3,"battle.struct.BuffQueue.dispellBuff","battle/struct/BuffQueue.hx",94,0xb1998c83)
HX_LOCAL_STACK_FRAME(_hx_pos_bf60632022390554_103_elementalCount,"battle.struct.BuffQueue","elementalCount",0x8cbdcc7b,"battle.struct.BuffQueue.elementalCount","battle/struct/BuffQueue.hx",103,0xb1998c83)
HX_LOCAL_STACK_FRAME(_hx_pos_bf60632022390554_121_indexOfBuff,"battle.struct.BuffQueue","indexOfBuff",0xcebe0589,"battle.struct.BuffQueue.indexOfBuff","battle/struct/BuffQueue.hx",121,0xb1998c83)
namespace battle{
namespace _hx_struct{

void BuffQueue_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_bf60632022390554_114_new)
HXLINE( 115)		this->queue = ::Array_obj< ::Dynamic>::__new();
HXLINE( 116)		this->newBuffs = (int)0;
            	}

Dynamic BuffQueue_obj::__CreateEmpty() { return new BuffQueue_obj; }

void *BuffQueue_obj::_hx_vtable = 0;

Dynamic BuffQueue_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< BuffQueue_obj > _hx_result = new BuffQueue_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool BuffQueue_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x2b584ab1;
}

void BuffQueue_obj::addBuff( ::battle::Buff buff){
            	HX_STACKFRAME(&_hx_pos_bf60632022390554_19_addBuff)
HXLINE(  20)		int index = this->indexOfBuff(buff->id);
HXLINE(  22)		bool _hx_tmp;
HXDLIN(  22)		if ((index != (int)-1)) {
HXLINE(  22)			_hx_tmp = buff->isStackable;
            		}
            		else {
HXLINE(  22)			_hx_tmp = true;
            		}
HXDLIN(  22)		if (_hx_tmp) {
HXLINE(  24)			this->queue->push(buff);
HXLINE(  25)			 ::Dynamic _hx_tmp1 = ::haxe::Log_obj::trace;
HXDLIN(  25)			_hx_tmp1((HX_("Buff casted: ",d1,9e,4d,45) + buff->name),hx::SourceInfo(HX_("BuffQueue.hx",e0,62,f5,9f),25,HX_("battle.struct.BuffQueue",3b,cf,79,86),HX_("addBuff",94,4c,5d,7d)));
HXLINE(  26)			buff->onCast();
HXLINE(  27)			::haxe::Log_obj::trace(HX_("Buff activated",e4,60,c8,b6),hx::SourceInfo(HX_("BuffQueue.hx",e0,62,f5,9f),27,HX_("battle.struct.BuffQueue",3b,cf,79,86),HX_("addBuff",94,4c,5d,7d)));
HXLINE(  28)			this->newBuffs++;
            		}
            		else {
HXLINE(  32)			this->queue[index] = buff;
HXLINE(  33)			 ::Dynamic _hx_tmp2 = ::haxe::Log_obj::trace;
HXDLIN(  33)			_hx_tmp2((HX_("Buff updated: ",34,79,cd,28) + buff->name),hx::SourceInfo(HX_("BuffQueue.hx",e0,62,f5,9f),33,HX_("battle.struct.BuffQueue",3b,cf,79,86),HX_("addBuff",94,4c,5d,7d)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(BuffQueue_obj,addBuff,(void))

void BuffQueue_obj::tick(){
            	HX_STACKFRAME(&_hx_pos_bf60632022390554_38_tick)
HXLINE(  39)		int i = (this->queue->length - (int)1);
HXLINE(  40)		while((i >= (int)0)){
HXLINE(  42)			 ::Dynamic _hx_tmp = ::haxe::Log_obj::trace;
HXDLIN(  42)			_hx_tmp(((((HX_("Ticking: ",6b,87,fa,47) + this->queue->__get(i).StaticCast<  ::battle::Buff >()->name) + HX_(", duration: ",6e,fe,63,48)) + this->queue->__get(i).StaticCast<  ::battle::Buff >()->duration) + HX_("(-1 now)",67,0d,81,8c)),hx::SourceInfo(HX_("BuffQueue.hx",e0,62,f5,9f),42,HX_("battle.struct.BuffQueue",3b,cf,79,86),HX_("tick",5d,c3,fc,4c)));
HXLINE(  43)			if (this->queue->__get(i).StaticCast<  ::battle::Buff >()->tickAndCheckEnded()) {
HXLINE(  45)				this->dispellBuff(i);
HXLINE(  46)				::haxe::Log_obj::trace(HX_("Dispelled",02,63,1b,63),hx::SourceInfo(HX_("BuffQueue.hx",e0,62,f5,9f),46,HX_("battle.struct.BuffQueue",3b,cf,79,86),HX_("tick",5d,c3,fc,4c)));
            			}
HXLINE(  48)			i = (i - (int)1);
            		}
HXLINE(  50)		this->newBuffs = (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC0(BuffQueue_obj,tick,(void))

::Array< ::Dynamic> BuffQueue_obj::getTriggering( ::battle::data::BattleEvent e){
            	HX_STACKFRAME(&_hx_pos_bf60632022390554_55_getTriggering)
HXDLIN(  55)		::Array< ::Dynamic> _g = ::Array_obj< ::Dynamic>::__new(0);
HXDLIN(  55)		{
HXDLIN(  55)			int _g1 = (int)0;
HXDLIN(  55)			::Array< ::Dynamic> _g2 = this->queue;
HXDLIN(  55)			::Array< ::Dynamic> _g21 = _g2->slice((int)0,(this->queue->length - this->newBuffs));
HXDLIN(  55)			while((_g1 < _g21->length)){
HXDLIN(  55)				 ::battle::Buff b = _g21->__get(_g1).StaticCast<  ::battle::Buff >();
HXDLIN(  55)				_g1 = (_g1 + (int)1);
HXDLIN(  55)				if (b->reactsTo(e)) {
HXDLIN(  55)					_g->push(b);
            				}
            			}
            		}
HXDLIN(  55)		return _g;
            	}


HX_DEFINE_DYNAMIC_FUNC1(BuffQueue_obj,getTriggering,return )

void BuffQueue_obj::dispellByID( ::ID id){
            	HX_STACKFRAME(&_hx_pos_bf60632022390554_60_dispellByID)
HXDLIN(  60)		this->dispellBuff(this->indexOfBuff(id));
            	}


HX_DEFINE_DYNAMIC_FUNC1(BuffQueue_obj,dispellByID,(void))

void BuffQueue_obj::dispellByElement(::Array< ::Dynamic> elements, ::Dynamic __o_count){
 ::Dynamic count = __o_count.Default(-1);
            	HX_STACKFRAME(&_hx_pos_bf60632022390554_64_dispellByElement)
HXLINE( 151)		bool _hx_tmp;
HXDLIN( 151)		if (hx::IsLessEq( count,(int)0 )) {
HXLINE( 151)			_hx_tmp = hx::IsEq( count,(int)-1 );
            		}
            		else {
HXLINE( 151)			_hx_tmp = true;
            		}
HXDLIN( 151)		if ((false == _hx_tmp)) {
HXLINE(  65)			::hxassert::Assert_obj::throwAssertionFailureError(::Array_obj< ::String >::fromData( _hx_array_data_8679cf3b_12,1),hx::SourceInfo(HX_("BuffQueue.hx",e0,62,f5,9f),65,HX_("battle.struct.BuffQueue",3b,cf,79,86),HX_("dispellByElement",22,dd,98,8e)));
            		}
HXLINE(  67)		::Array< ::Dynamic> candidates = ::Array_obj< ::Dynamic>::__new();
HXLINE(  69)		if (hx::IsNull( elements )) {
HXLINE(  70)			candidates = this->queue;
            		}
            		else {
HXLINE(  72)			int _g = (int)0;
HXDLIN(  72)			::Array< ::Dynamic> _g1 = this->queue;
HXDLIN(  72)			while((_g < _g1->length)){
HXLINE(  72)				 ::battle::Buff buff = _g1->__get(_g).StaticCast<  ::battle::Buff >();
HXDLIN(  72)				_g = (_g + (int)1);
HXLINE(  73)				{
HXLINE(  73)					int _g2 = (int)0;
HXDLIN(  73)					while((_g2 < elements->length)){
HXLINE(  73)						 ::Element element = elements->__get(_g2).StaticCast<  ::Element >();
HXDLIN(  73)						_g2 = (_g2 + (int)1);
HXLINE(  74)						if (hx::IsEq( buff->element,element )) {
HXLINE(  76)							candidates->push(buff);
HXLINE(  77)							goto _hx_goto_8;
            						}
            					}
            					_hx_goto_8:;
            				}
            			}
            		}
HXLINE(  81)		if (hx::IsEq( count,(int)-1 )) {
HXLINE(  82)			count = candidates->length;
            		}
HXLINE(  84)		if (hx::IsLess( count,candidates->length )) {
HXLINE(  85)			int _g11 = (int)0;
HXDLIN(  85)			int _g3 = count;
HXDLIN(  85)			while((_g11 < _g3)){
HXLINE(  85)				_g11 = (_g11 + (int)1);
HXDLIN(  85)				int i = (_g11 - (int)1);
HXLINE(  86)				this->dispellBuff(::MathUtils_obj::randomInt((int)0,candidates->length));
            			}
            		}
            		else {
HXLINE(  88)			int _g12 = (int)0;
HXDLIN(  88)			int _g4 = candidates->length;
HXDLIN(  88)			while((_g12 < _g4)){
HXLINE(  88)				_g12 = (_g12 + (int)1);
HXDLIN(  88)				int i1 = (_g12 - (int)1);
HXLINE(  89)				this->dispellBuff((int)0);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(BuffQueue_obj,dispellByElement,(void))

void BuffQueue_obj::dispellBuff(int index){
            	HX_STACKFRAME(&_hx_pos_bf60632022390554_94_dispellBuff)
HXDLIN(  94)		if ((index >= (int)0)) {
HXLINE(  96)			 ::Dynamic _hx_tmp = ::haxe::Log_obj::trace;
HXDLIN(  96)			_hx_tmp((HX_("Dispelled buff: ",97,50,0f,fe) + this->queue->__get(index).StaticCast<  ::battle::Buff >()->name),hx::SourceInfo(HX_("BuffQueue.hx",e0,62,f5,9f),96,HX_("battle.struct.BuffQueue",3b,cf,79,86),HX_("dispellBuff",76,d7,b3,ef)));
HXLINE(  97)			this->queue->__get(index).StaticCast<  ::battle::Buff >()->onEnd();
HXLINE(  98)			this->queue->removeRange(index,(int)1);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(BuffQueue_obj,dispellBuff,(void))

int BuffQueue_obj::elementalCount( ::Element element){
            	HX_STACKFRAME(&_hx_pos_bf60632022390554_103_elementalCount)
HXLINE( 104)		int count = (int)0;
HXLINE( 106)		{
HXLINE( 106)			int _g = (int)0;
HXDLIN( 106)			::Array< ::Dynamic> _g1 = this->queue;
HXDLIN( 106)			while((_g < _g1->length)){
HXLINE( 106)				 ::battle::Buff buff = _g1->__get(_g).StaticCast<  ::battle::Buff >();
HXDLIN( 106)				_g = (_g + (int)1);
HXLINE( 107)				if (hx::IsEq( buff->element,element )) {
HXLINE( 108)					count = (count + (int)1);
            				}
            			}
            		}
HXLINE( 110)		return count;
            	}


HX_DEFINE_DYNAMIC_FUNC1(BuffQueue_obj,elementalCount,return )

int BuffQueue_obj::indexOfBuff( ::ID id){
            	HX_STACKFRAME(&_hx_pos_bf60632022390554_121_indexOfBuff)
HXLINE( 122)		{
HXLINE( 122)			int _g = (int)0;
HXDLIN( 122)			::Array< ::Dynamic> _g1 = this->queue;
HXDLIN( 122)			while((_g < _g1->length)){
HXLINE( 122)				 ::battle::Buff buff = _g1->__get(_g).StaticCast<  ::battle::Buff >();
HXDLIN( 122)				_g = (_g + (int)1);
HXLINE( 123)				if (hx::IsEq( buff->id,id )) {
HXLINE( 124)					return this->queue->indexOf(buff,null());
            				}
            			}
            		}
HXLINE( 126)		return (int)-1;
            	}


HX_DEFINE_DYNAMIC_FUNC1(BuffQueue_obj,indexOfBuff,return )


hx::ObjectPtr< BuffQueue_obj > BuffQueue_obj::__new() {
	hx::ObjectPtr< BuffQueue_obj > __this = new BuffQueue_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< BuffQueue_obj > BuffQueue_obj::__alloc(hx::Ctx *_hx_ctx) {
	BuffQueue_obj *__this = (BuffQueue_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(BuffQueue_obj), true, "battle.struct.BuffQueue"));
	*(void **)__this = BuffQueue_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

BuffQueue_obj::BuffQueue_obj()
{
}

void BuffQueue_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(BuffQueue);
	HX_MARK_MEMBER_NAME(queue,"queue");
	HX_MARK_MEMBER_NAME(newBuffs,"newBuffs");
	HX_MARK_END_CLASS();
}

void BuffQueue_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(queue,"queue");
	HX_VISIT_MEMBER_NAME(newBuffs,"newBuffs");
}

hx::Val BuffQueue_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"tick") ) { return hx::Val( tick_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"queue") ) { return hx::Val( queue ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"addBuff") ) { return hx::Val( addBuff_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"newBuffs") ) { return hx::Val( newBuffs ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"dispellByID") ) { return hx::Val( dispellByID_dyn() ); }
		if (HX_FIELD_EQ(inName,"dispellBuff") ) { return hx::Val( dispellBuff_dyn() ); }
		if (HX_FIELD_EQ(inName,"indexOfBuff") ) { return hx::Val( indexOfBuff_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"getTriggering") ) { return hx::Val( getTriggering_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"elementalCount") ) { return hx::Val( elementalCount_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"dispellByElement") ) { return hx::Val( dispellByElement_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val BuffQueue_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"queue") ) { queue=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"newBuffs") ) { newBuffs=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void BuffQueue_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("queue","\x91","\x8d","\xea","\x5d"));
	outFields->push(HX_HCSTRING("newBuffs","\xc0","\xd2","\x32","\xde"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo BuffQueue_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(BuffQueue_obj,queue),HX_HCSTRING("queue","\x91","\x8d","\xea","\x5d")},
	{hx::fsInt,(int)offsetof(BuffQueue_obj,newBuffs),HX_HCSTRING("newBuffs","\xc0","\xd2","\x32","\xde")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *BuffQueue_obj_sStaticStorageInfo = 0;
#endif

static ::String BuffQueue_obj_sMemberFields[] = {
	HX_HCSTRING("queue","\x91","\x8d","\xea","\x5d"),
	HX_HCSTRING("newBuffs","\xc0","\xd2","\x32","\xde"),
	HX_HCSTRING("addBuff","\x94","\x4c","\x5d","\x7d"),
	HX_HCSTRING("tick","\x5d","\xc3","\xfc","\x4c"),
	HX_HCSTRING("getTriggering","\xe0","\x26","\x6a","\x40"),
	HX_HCSTRING("dispellByID","\x15","\xc7","\xb6","\xef"),
	HX_HCSTRING("dispellByElement","\x22","\xdd","\x98","\x8e"),
	HX_HCSTRING("dispellBuff","\x76","\xd7","\xb3","\xef"),
	HX_HCSTRING("elementalCount","\xa8","\x8c","\x86","\x44"),
	HX_HCSTRING("indexOfBuff","\x3c","\x17","\x87","\x6d"),
	::String(null()) };

static void BuffQueue_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(BuffQueue_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void BuffQueue_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(BuffQueue_obj::__mClass,"__mClass");
};

#endif

hx::Class BuffQueue_obj::__mClass;

void BuffQueue_obj::__register()
{
	hx::Object *dummy = new BuffQueue_obj;
	BuffQueue_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("battle.struct.BuffQueue","\x3b","\xcf","\x79","\x86");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = BuffQueue_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(BuffQueue_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< BuffQueue_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = BuffQueue_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = BuffQueue_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = BuffQueue_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace battle
} // end namespace struct
