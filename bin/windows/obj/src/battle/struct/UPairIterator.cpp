// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_battle_struct_UPair
#include <battle/struct/UPair.h>
#endif
#ifndef INCLUDED_battle_struct_UPairIterator
#include <battle/struct/UPairIterator.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_5476b543f65a8de5_26_new,"battle.struct.UPairIterator","new",0xddaed52c,"battle.struct.UPairIterator.new","battle/struct/UPairIterator.hx",26,0x3f1ba5e4)
HX_LOCAL_STACK_FRAME(_hx_pos_5476b543f65a8de5_14_hasNext,"battle.struct.UPairIterator","hasNext",0x4f320039,"battle.struct.UPairIterator.hasNext","battle/struct/UPairIterator.hx",14,0x3f1ba5e4)
HX_LOCAL_STACK_FRAME(_hx_pos_5476b543f65a8de5_19_next,"battle.struct.UPairIterator","next",0x1b4bb2a7,"battle.struct.UPairIterator.next","battle/struct/UPairIterator.hx",19,0x3f1ba5e4)
namespace battle{
namespace _hx_struct{

void UPairIterator_obj::__construct( ::battle::_hx_struct::UPair pair){
            	HX_STACKFRAME(&_hx_pos_5476b543f65a8de5_26_new)
HXLINE(  27)		this->pair = pair;
HXLINE(  28)		this->i = (int)0;
            	}

Dynamic UPairIterator_obj::__CreateEmpty() { return new UPairIterator_obj; }

void *UPairIterator_obj::_hx_vtable = 0;

Dynamic UPairIterator_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< UPairIterator_obj > _hx_result = new UPairIterator_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool UPairIterator_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x15258fe8;
}

bool UPairIterator_obj::hasNext(){
            	HX_STACKFRAME(&_hx_pos_5476b543f65a8de5_14_hasNext)
HXDLIN(  14)		int _hx_tmp = this->i;
HXDLIN(  14)		return (_hx_tmp < (this->pair->left->get_length() + this->pair->right->get_length()));
            	}


HX_DEFINE_DYNAMIC_FUNC0(UPairIterator_obj,hasNext,return )

 ::Dynamic UPairIterator_obj::next(){
            	HX_STACKFRAME(&_hx_pos_5476b543f65a8de5_19_next)
HXDLIN(  19)		if ((this->i < this->pair->left->get_length())) {
HXLINE(  20)			::cpp::VirtualArray _hx_tmp = this->pair->left;
HXDLIN(  20)			return _hx_tmp->__get(this->i++);
            		}
            		else {
HXLINE(  22)			::cpp::VirtualArray _hx_tmp1 = this->pair->right;
HXDLIN(  22)			return _hx_tmp1->__get((this->i++ - this->pair->left->get_length()));
            		}
HXLINE(  19)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(UPairIterator_obj,next,return )


hx::ObjectPtr< UPairIterator_obj > UPairIterator_obj::__new( ::battle::_hx_struct::UPair pair) {
	hx::ObjectPtr< UPairIterator_obj > __this = new UPairIterator_obj();
	__this->__construct(pair);
	return __this;
}

hx::ObjectPtr< UPairIterator_obj > UPairIterator_obj::__alloc(hx::Ctx *_hx_ctx, ::battle::_hx_struct::UPair pair) {
	UPairIterator_obj *__this = (UPairIterator_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(UPairIterator_obj), true, "battle.struct.UPairIterator"));
	*(void **)__this = UPairIterator_obj::_hx_vtable;
	__this->__construct(pair);
	return __this;
}

UPairIterator_obj::UPairIterator_obj()
{
}

void UPairIterator_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(UPairIterator);
	HX_MARK_MEMBER_NAME(pair,"pair");
	HX_MARK_MEMBER_NAME(i,"i");
	HX_MARK_END_CLASS();
}

void UPairIterator_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(pair,"pair");
	HX_VISIT_MEMBER_NAME(i,"i");
}

hx::Val UPairIterator_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"i") ) { return hx::Val( i ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"pair") ) { return hx::Val( pair ); }
		if (HX_FIELD_EQ(inName,"next") ) { return hx::Val( next_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"hasNext") ) { return hx::Val( hasNext_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val UPairIterator_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"i") ) { i=inValue.Cast< int >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"pair") ) { pair=inValue.Cast<  ::battle::_hx_struct::UPair >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void UPairIterator_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("pair","\x1a","\xdc","\x51","\x4a"));
	outFields->push(HX_HCSTRING("i","\x69","\x00","\x00","\x00"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo UPairIterator_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::battle::_hx_struct::UPair*/ ,(int)offsetof(UPairIterator_obj,pair),HX_HCSTRING("pair","\x1a","\xdc","\x51","\x4a")},
	{hx::fsInt,(int)offsetof(UPairIterator_obj,i),HX_HCSTRING("i","\x69","\x00","\x00","\x00")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *UPairIterator_obj_sStaticStorageInfo = 0;
#endif

static ::String UPairIterator_obj_sMemberFields[] = {
	HX_HCSTRING("pair","\x1a","\xdc","\x51","\x4a"),
	HX_HCSTRING("i","\x69","\x00","\x00","\x00"),
	HX_HCSTRING("hasNext","\x6d","\xa5","\x46","\x18"),
	HX_HCSTRING("next","\xf3","\x84","\x02","\x49"),
	::String(null()) };

static void UPairIterator_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(UPairIterator_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void UPairIterator_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(UPairIterator_obj::__mClass,"__mClass");
};

#endif

hx::Class UPairIterator_obj::__mClass;

void UPairIterator_obj::__register()
{
	hx::Object *dummy = new UPairIterator_obj;
	UPairIterator_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("battle.struct.UPairIterator","\x3a","\x0f","\x02","\x2e");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = UPairIterator_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(UPairIterator_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< UPairIterator_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = UPairIterator_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = UPairIterator_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = UPairIterator_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace battle
} // end namespace struct
