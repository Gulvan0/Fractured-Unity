// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_Lambda
#include <Lambda.h>
#endif
#ifndef INCLUDED_List
#include <List.h>
#endif
#ifndef INCLUDED_MathUtils
#include <MathUtils.h>
#endif
#ifndef INCLUDED_battle_Unit
#include <battle/Unit.h>
#endif
#ifndef INCLUDED_battle_enums_Team
#include <battle/enums/Team.h>
#endif
#ifndef INCLUDED_battle_struct_UPair
#include <battle/struct/UPair.h>
#endif
#ifndef INCLUDED_battle_struct_UPairIterator
#include <battle/struct/UPairIterator.h>
#endif
#ifndef INCLUDED_battle_struct_UnitCoords
#include <battle/struct/UnitCoords.h>
#endif
#ifndef INCLUDED_hxassert_Assert
#include <hxassert/Assert.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_c0939df335bc2eac_74_new,"battle.struct.UPair","new",0x1e92a41e,"battle.struct.UPair.new","battle/struct/UPair.hx",74,0x1d235b32)
static const ::String _hx_array_data_2872fd2c_1[] = {
	HX_("Assertion failed: left.length.inRange(1, 3)",69,06,ad,d3),
};
static const ::String _hx_array_data_2872fd2c_2[] = {
	HX_("Assertion failed: right.length.inRange(1, 3)",96,7d,fb,ac),
};
HX_LOCAL_STACK_FRAME(_hx_pos_c0939df335bc2eac_21_get_both,"battle.struct.UPair","get_both",0x86c91f8c,"battle.struct.UPair.get_both","battle/struct/UPair.hx",21,0x1d235b32)
HX_LOCAL_STACK_FRAME(_hx_pos_c0939df335bc2eac_26_get,"battle.struct.UPair","get",0x1e8d5454,"battle.struct.UPair.get","battle/struct/UPair.hx",26,0x1d235b32)
HX_LOCAL_STACK_FRAME(_hx_pos_c0939df335bc2eac_33_getByUnit,"battle.struct.UPair","getByUnit",0xfddc436f,"battle.struct.UPair.getByUnit","battle/struct/UPair.hx",33,0x1d235b32)
HX_LOCAL_STACK_FRAME(_hx_pos_c0939df335bc2eac_41_opposite,"battle.struct.UPair","opposite",0xc1fcb469,"battle.struct.UPair.opposite","battle/struct/UPair.hx",41,0x1d235b32)
HX_LOCAL_STACK_FRAME(_hx_pos_c0939df335bc2eac_47_allied,"battle.struct.UPair","allied",0x11b54d89,"battle.struct.UPair.allied","battle/struct/UPair.hx",47,0x1d235b32)
HX_LOCAL_STACK_FRAME(_hx_pos_c0939df335bc2eac_52_find,"battle.struct.UPair","find",0x9c7642bb,"battle.struct.UPair.find","battle/struct/UPair.hx",52,0x1d235b32)
HX_LOCAL_STACK_FRAME(_hx_pos_c0939df335bc2eac_65_player,"battle.struct.UPair","player",0x09d68263,"battle.struct.UPair.player","battle/struct/UPair.hx",65,0x1d235b32)
HX_LOCAL_STACK_FRAME(_hx_pos_c0939df335bc2eac_84_iterator,"battle.struct.UPair","iterator",0x598d2570,"battle.struct.UPair.iterator","battle/struct/UPair.hx",84,0x1d235b32)
HX_LOCAL_STACK_FRAME(_hx_pos_c0939df335bc2eac_70_map,"battle.struct.UPair","map",0x1e91de5a,"battle.struct.UPair.map","battle/struct/UPair.hx",70,0x1d235b32)
namespace battle{
namespace _hx_struct{

void UPair_obj::__construct(::cpp::VirtualArray left,::cpp::VirtualArray right){
            	HX_STACKFRAME(&_hx_pos_c0939df335bc2eac_74_new)
HXLINE( 151)		if ((false == ::MathUtils_obj::inRange(left->get_length(),(int)1,(int)3,null(),null()))) {
HXLINE(  75)			::hxassert::Assert_obj::throwAssertionFailureError(::Array_obj< ::String >::fromData( _hx_array_data_2872fd2c_1,1),hx::SourceInfo(HX_("UPair.hx",0f,7f,a3,85),75,HX_("battle.struct.UPair",2c,fd,72,28),HX_("new",60,d0,53,00)));
            		}
HXLINE( 151)		if ((false == ::MathUtils_obj::inRange(right->get_length(),(int)1,(int)3,null(),null()))) {
HXLINE(  76)			::hxassert::Assert_obj::throwAssertionFailureError(::Array_obj< ::String >::fromData( _hx_array_data_2872fd2c_2,1),hx::SourceInfo(HX_("UPair.hx",0f,7f,a3,85),76,HX_("battle.struct.UPair",2c,fd,72,28),HX_("new",60,d0,53,00)));
            		}
HXLINE(  78)		this->left = left;
HXLINE(  79)		this->right = right;
            	}

Dynamic UPair_obj::__CreateEmpty() { return new UPair_obj; }

void *UPair_obj::_hx_vtable = 0;

Dynamic UPair_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< UPair_obj > _hx_result = new UPair_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool UPair_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x74fa12be;
}

::cpp::VirtualArray UPair_obj::get_both(){
            	HX_STACKFRAME(&_hx_pos_c0939df335bc2eac_21_get_both)
HXDLIN(  21)		return this->left->concat(this->right);
            	}


HX_DEFINE_DYNAMIC_FUNC0(UPair_obj,get_both,return )

 ::Dynamic UPair_obj::get( ::battle::_hx_struct::UnitCoords coords){
            	HX_STACKFRAME(&_hx_pos_c0939df335bc2eac_26_get)
HXLINE(  27)		::cpp::VirtualArray array;
HXDLIN(  27)		if (hx::IsEq( coords->team,::battle::enums::Team_obj::Left_dyn() )) {
HXLINE(  27)			array = this->left;
            		}
            		else {
HXLINE(  27)			array = this->right;
            		}
HXLINE(  28)		return array->__get(coords->pos);
            	}


HX_DEFINE_DYNAMIC_FUNC1(UPair_obj,get,return )

 ::Dynamic UPair_obj::getByUnit( ::battle::Unit unit){
            	HX_STACKFRAME(&_hx_pos_c0939df335bc2eac_33_getByUnit)
HXLINE(  34)		 ::battle::_hx_struct::UnitCoords coords = ::battle::_hx_struct::UnitCoords_obj::get(unit);
HXLINE(  35)		return this->get(coords);
            	}


HX_DEFINE_DYNAMIC_FUNC1(UPair_obj,getByUnit,return )

::cpp::VirtualArray UPair_obj::opposite( ::battle::_hx_struct::UnitCoords coords){
            	HX_STACKFRAME(&_hx_pos_c0939df335bc2eac_41_opposite)
HXDLIN(  41)		if (hx::IsEq( coords->team,::battle::enums::Team_obj::Left_dyn() )) {
HXDLIN(  41)			return this->right;
            		}
            		else {
HXDLIN(  41)			return this->left;
            		}
HXDLIN(  41)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(UPair_obj,opposite,return )

::cpp::VirtualArray UPair_obj::allied( ::battle::_hx_struct::UnitCoords coords){
            	HX_STACKFRAME(&_hx_pos_c0939df335bc2eac_47_allied)
HXDLIN(  47)		if (hx::IsEq( coords->team,::battle::enums::Team_obj::Left_dyn() )) {
HXDLIN(  47)			return this->left;
            		}
            		else {
HXDLIN(  47)			return this->right;
            		}
HXDLIN(  47)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(UPair_obj,allied,return )

 ::battle::_hx_struct::UnitCoords UPair_obj::find( ::Dynamic obj){
            	HX_GC_STACKFRAME(&_hx_pos_c0939df335bc2eac_52_find)
HXLINE(  53)		{
HXLINE(  53)			int _g1 = (int)0;
HXDLIN(  53)			int _g = this->left->get_length();
HXDLIN(  53)			while((_g1 < _g)){
HXLINE(  53)				_g1 = (_g1 + (int)1);
HXDLIN(  53)				int i = (_g1 - (int)1);
HXLINE(  54)				if (hx::IsEq( this->left->__get(i),obj )) {
HXLINE(  55)					return  ::battle::_hx_struct::UnitCoords_obj::__alloc( HX_CTX ,::battle::enums::Team_obj::Left_dyn(),i);
            				}
            			}
            		}
HXLINE(  56)		{
HXLINE(  56)			int _g11 = (int)0;
HXDLIN(  56)			int _g2 = this->right->get_length();
HXDLIN(  56)			while((_g11 < _g2)){
HXLINE(  56)				_g11 = (_g11 + (int)1);
HXDLIN(  56)				int i1 = (_g11 - (int)1);
HXLINE(  57)				if (hx::IsEq( this->right->__get(i1),obj )) {
HXLINE(  58)					return  ::battle::_hx_struct::UnitCoords_obj::__alloc( HX_CTX ,::battle::enums::Team_obj::Right_dyn(),i1);
            				}
            			}
            		}
HXLINE(  59)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(UPair_obj,find,return )

 ::Dynamic UPair_obj::player(){
            	HX_STACKFRAME(&_hx_pos_c0939df335bc2eac_65_player)
HXDLIN(  65)		return this->left->__get((int)0);
            	}


HX_DEFINE_DYNAMIC_FUNC0(UPair_obj,player,return )

 ::Dynamic UPair_obj::iterator(){
            	HX_GC_STACKFRAME(&_hx_pos_c0939df335bc2eac_84_iterator)
HXDLIN(  84)		return  ::battle::_hx_struct::UPairIterator_obj::__alloc( HX_CTX ,hx::ObjectPtr<OBJ_>(this));
            	}


HX_DEFINE_DYNAMIC_FUNC0(UPair_obj,iterator,return )

 ::battle::_hx_struct::UPair UPair_obj::map(::cpp::VirtualArray left,::cpp::VirtualArray right, ::Dynamic func){
            	HX_GC_STACKFRAME(&_hx_pos_c0939df335bc2eac_70_map)
HXDLIN(  70)		::cpp::VirtualArray _hx_tmp = ::Lambda_obj::array(::Lambda_obj::map(left,func));
HXDLIN(  70)		return  ::battle::_hx_struct::UPair_obj::__alloc( HX_CTX ,_hx_tmp,::Lambda_obj::array(::Lambda_obj::map(right,func)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(UPair_obj,map,return )


hx::ObjectPtr< UPair_obj > UPair_obj::__new(::cpp::VirtualArray left,::cpp::VirtualArray right) {
	hx::ObjectPtr< UPair_obj > __this = new UPair_obj();
	__this->__construct(left,right);
	return __this;
}

hx::ObjectPtr< UPair_obj > UPair_obj::__alloc(hx::Ctx *_hx_ctx,::cpp::VirtualArray left,::cpp::VirtualArray right) {
	UPair_obj *__this = (UPair_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(UPair_obj), true, "battle.struct.UPair"));
	*(void **)__this = UPair_obj::_hx_vtable;
	__this->__construct(left,right);
	return __this;
}

UPair_obj::UPair_obj()
{
}

void UPair_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(UPair);
	HX_MARK_MEMBER_NAME(left,"left");
	HX_MARK_MEMBER_NAME(right,"right");
	HX_MARK_END_CLASS();
}

void UPair_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(left,"left");
	HX_VISIT_MEMBER_NAME(right,"right");
}

hx::Val UPair_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"get") ) { return hx::Val( get_dyn() ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"left") ) { return hx::Val( left ); }
		if (HX_FIELD_EQ(inName,"both") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_both() ); }
		if (HX_FIELD_EQ(inName,"find") ) { return hx::Val( find_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"right") ) { return hx::Val( right ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"allied") ) { return hx::Val( allied_dyn() ); }
		if (HX_FIELD_EQ(inName,"player") ) { return hx::Val( player_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"get_both") ) { return hx::Val( get_both_dyn() ); }
		if (HX_FIELD_EQ(inName,"opposite") ) { return hx::Val( opposite_dyn() ); }
		if (HX_FIELD_EQ(inName,"iterator") ) { return hx::Val( iterator_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"getByUnit") ) { return hx::Val( getByUnit_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool UPair_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"map") ) { outValue = map_dyn(); return true; }
	}
	return false;
}

hx::Val UPair_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"left") ) { left=inValue.Cast< ::cpp::VirtualArray >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"right") ) { right=inValue.Cast< ::cpp::VirtualArray >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void UPair_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("left","\x07","\x08","\xb0","\x47"));
	outFields->push(HX_HCSTRING("right","\xdc","\x0b","\x64","\xe9"));
	outFields->push(HX_HCSTRING("both","\x81","\x88","\x1b","\x41"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo UPair_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*cpp::ArrayBase*/ ,(int)offsetof(UPair_obj,left),HX_HCSTRING("left","\x07","\x08","\xb0","\x47")},
	{hx::fsObject /*cpp::ArrayBase*/ ,(int)offsetof(UPair_obj,right),HX_HCSTRING("right","\xdc","\x0b","\x64","\xe9")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *UPair_obj_sStaticStorageInfo = 0;
#endif

static ::String UPair_obj_sMemberFields[] = {
	HX_HCSTRING("left","\x07","\x08","\xb0","\x47"),
	HX_HCSTRING("right","\xdc","\x0b","\x64","\xe9"),
	HX_HCSTRING("get_both","\x0a","\x44","\xd6","\xc0"),
	HX_HCSTRING("get","\x96","\x80","\x4e","\x00"),
	HX_HCSTRING("getByUnit","\x31","\x0d","\x4f","\x8f"),
	HX_HCSTRING("opposite","\xe7","\xd8","\x09","\xfc"),
	HX_HCSTRING("allied","\x87","\xb6","\x97","\x3f"),
	HX_HCSTRING("find","\x39","\xd0","\xbb","\x43"),
	HX_HCSTRING("player","\x61","\xeb","\xb8","\x37"),
	HX_HCSTRING("iterator","\xee","\x49","\x9a","\x93"),
	::String(null()) };

static void UPair_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(UPair_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void UPair_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(UPair_obj::__mClass,"__mClass");
};

#endif

hx::Class UPair_obj::__mClass;

static ::String UPair_obj_sStaticFields[] = {
	HX_HCSTRING("map","\x9c","\x0a","\x53","\x00"),
	::String(null())
};

void UPair_obj::__register()
{
	hx::Object *dummy = new UPair_obj;
	UPair_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("battle.struct.UPair","\x2c","\xfd","\x72","\x28");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &UPair_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = UPair_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(UPair_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(UPair_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< UPair_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = UPair_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = UPair_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = UPair_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace battle
} // end namespace struct
