// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_battle_struct_Countdown
#include <battle/struct/Countdown.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_542782f44cb1f54e_15_new,"battle.struct.Countdown","new",0xb0dd7920,"battle.struct.Countdown.new","battle/struct/Countdown.hx",15,0x05552c70)
namespace battle{
namespace _hx_struct{

void Countdown_obj::__construct(int startValue,int keyValue){
            	HX_STACKFRAME(&_hx_pos_542782f44cb1f54e_15_new)
HXLINE(  16)		this->value = startValue;
HXLINE(  17)		this->keyValue = keyValue;
            	}

Dynamic Countdown_obj::__CreateEmpty() { return new Countdown_obj; }

void *Countdown_obj::_hx_vtable = 0;

Dynamic Countdown_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Countdown_obj > _hx_result = new Countdown_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool Countdown_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x658924a4;
}


Countdown_obj::Countdown_obj()
{
}

hx::Val Countdown_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"value") ) { return hx::Val( value ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"keyValue") ) { return hx::Val( keyValue ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Countdown_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"value") ) { value=inValue.Cast< int >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"keyValue") ) { keyValue=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Countdown_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("keyValue","\x52","\x25","\x22","\x76"));
	outFields->push(HX_HCSTRING("value","\x71","\x7f","\xb8","\x31"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Countdown_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(Countdown_obj,keyValue),HX_HCSTRING("keyValue","\x52","\x25","\x22","\x76")},
	{hx::fsInt,(int)offsetof(Countdown_obj,value),HX_HCSTRING("value","\x71","\x7f","\xb8","\x31")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Countdown_obj_sStaticStorageInfo = 0;
#endif

static ::String Countdown_obj_sMemberFields[] = {
	HX_HCSTRING("keyValue","\x52","\x25","\x22","\x76"),
	HX_HCSTRING("value","\x71","\x7f","\xb8","\x31"),
	::String(null()) };

static void Countdown_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Countdown_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Countdown_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Countdown_obj::__mClass,"__mClass");
};

#endif

hx::Class Countdown_obj::__mClass;

void Countdown_obj::__register()
{
	hx::Object *dummy = new Countdown_obj;
	Countdown_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("battle.struct.Countdown","\x2e","\xa9","\xaa","\xc0");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Countdown_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Countdown_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Countdown_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Countdown_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Countdown_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Countdown_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace battle
} // end namespace struct
