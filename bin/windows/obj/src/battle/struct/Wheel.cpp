// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_ID
#include <ID.h>
#endif
#ifndef INCLUDED_XMLUtils
#include <XMLUtils.h>
#endif
#ifndef INCLUDED_battle_Ability
#include <battle/Ability.h>
#endif
#ifndef INCLUDED_battle_Active
#include <battle/Active.h>
#endif
#ifndef INCLUDED_battle_Passive
#include <battle/Passive.h>
#endif
#ifndef INCLUDED_battle_data_BattleEvent
#include <battle/data/BattleEvent.h>
#endif
#ifndef INCLUDED_battle_enums_AbilityType
#include <battle/enums/AbilityType.h>
#endif
#ifndef INCLUDED_battle_struct_Wheel
#include <battle/struct/Wheel.h>
#endif
#ifndef INCLUDED_hxassert_Assert
#include <hxassert/Assert.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_e73854b184c8947c_60_new,"battle.struct.Wheel","new",0xb9b1178a,"battle.struct.Wheel.new","battle/struct/Wheel.hx",60,0xbd673946)
static const ::String _hx_array_data_5f204a98_4[] = {
	HX_("Assertion failed: pool.length <= numOfSlots && numOfSlots >= 8 && numOfSlots <= 10",a7,4c,e7,73),
};
HX_LOCAL_STACK_FRAME(_hx_pos_e73854b184c8947c_21_get,"battle.struct.Wheel","get",0xb9abc7c0,"battle.struct.Wheel.get","battle/struct/Wheel.hx",21,0xbd673946)
static const ::String _hx_array_data_5f204a98_6[] = {
	HX_("Assertion failed: pos >= 0 && pos <= 9",a2,db,5a,ce),
};
HX_LOCAL_STACK_FRAME(_hx_pos_e73854b184c8947c_27_getActive,"battle.struct.Wheel","getActive",0x762ecda6,"battle.struct.Wheel.getActive","battle/struct/Wheel.hx",27,0xbd673946)
static const ::String _hx_array_data_5f204a98_8[] = {
	HX_("Assertion failed: pos >= 0 && pos <= 9",a2,db,5a,ce),
};
static const ::String _hx_array_data_5f204a98_9[] = {
	HX_("Assertion failed: wheel[pos].type == AbilityType.Active",ae,40,cc,63),
};
HX_LOCAL_STACK_FRAME(_hx_pos_e73854b184c8947c_34_passives,"battle.struct.Wheel","passives",0x96b2eb82,"battle.struct.Wheel.passives","battle/struct/Wheel.hx",34,0xbd673946)
HX_LOCAL_STACK_FRAME(_hx_pos_e73854b184c8947c_47_set,"battle.struct.Wheel","set",0xb9b4e2cc,"battle.struct.Wheel.set","battle/struct/Wheel.hx",47,0xbd673946)
static const ::String _hx_array_data_5f204a98_13[] = {
	HX_("Assertion failed: pos >= 0 && pos <= 9",a2,db,5a,ce),
};
HX_LOCAL_STACK_FRAME(_hx_pos_e73854b184c8947c_54_tick,"battle.struct.Wheel","tick",0xc53dc0f3,"battle.struct.Wheel.tick","battle/struct/Wheel.hx",54,0xbd673946)
namespace battle{
namespace _hx_struct{

void Wheel_obj::__construct(::Array< ::Dynamic> pool,int numOfSlots){
            	HX_GC_STACKFRAME(&_hx_pos_e73854b184c8947c_60_new)
HXLINE( 151)		bool _hx_tmp;
HXLINE(  61)		bool _hx_tmp1;
HXDLIN(  61)		if ((pool->length <= numOfSlots)) {
HXLINE(  61)			_hx_tmp1 = (numOfSlots >= (int)8);
            		}
            		else {
HXLINE(  61)			_hx_tmp1 = false;
            		}
HXLINE( 151)		if (_hx_tmp1) {
HXLINE( 151)			_hx_tmp = (numOfSlots <= (int)10);
            		}
            		else {
HXLINE( 151)			_hx_tmp = false;
            		}
HXDLIN( 151)		if ((false == _hx_tmp)) {
HXLINE(  61)			::hxassert::Assert_obj::throwAssertionFailureError(::Array_obj< ::String >::fromData( _hx_array_data_5f204a98_4,1),hx::SourceInfo(HX_("Wheel.hx",23,5d,e7,25),61,HX_("battle.struct.Wheel",98,4a,20,5f),HX_("new",60,d0,53,00)));
            		}
HXLINE(  63)		this->wheel = ::Array_obj< ::Dynamic>::__new();
HXLINE(  64)		{
HXLINE(  64)			int _g = (int)0;
HXDLIN(  64)			while((_g < pool->length)){
HXLINE(  64)				 ::ID id = pool->__get(_g).StaticCast<  ::ID >();
HXDLIN(  64)				_g = (_g + (int)1);
HXLINE(  65)				if (hx::IsEq( ::XMLUtils_obj::parseAbility(id,HX_("type",ba,f2,08,4d),::battle::enums::AbilityType_obj::Active_dyn()),::battle::enums::AbilityType_obj::Active_dyn() )) {
HXLINE(  66)					::Array< ::Dynamic> _hx_tmp2 = this->wheel;
HXDLIN(  66)					_hx_tmp2->push( ::battle::Active_obj::__alloc( HX_CTX ,id));
            				}
            				else {
HXLINE(  68)					::Array< ::Dynamic> _hx_tmp3 = this->wheel;
HXDLIN(  68)					_hx_tmp3->push( ::battle::Passive_obj::__alloc( HX_CTX ,id));
            				}
            			}
            		}
HXLINE(  69)		{
HXLINE(  69)			int _g1 = pool->length;
HXDLIN(  69)			int _g2 = numOfSlots;
HXDLIN(  69)			while((_g1 < _g2)){
HXLINE(  69)				_g1 = (_g1 + (int)1);
HXDLIN(  69)				int i = (_g1 - (int)1);
HXLINE(  70)				::Array< ::Dynamic> _hx_tmp4 = this->wheel;
HXDLIN(  70)				_hx_tmp4[i] =  ::battle::Ability_obj::__alloc( HX_CTX ,::ID_obj::EmptyAbility_dyn());
            			}
            		}
HXLINE(  71)		{
HXLINE(  71)			int _g3 = numOfSlots;
HXDLIN(  71)			while((_g3 < (int)10)){
HXLINE(  71)				_g3 = (_g3 + (int)1);
HXDLIN(  71)				int i1 = (_g3 - (int)1);
HXLINE(  72)				::Array< ::Dynamic> _hx_tmp5 = this->wheel;
HXDLIN(  72)				_hx_tmp5[i1] =  ::battle::Ability_obj::__alloc( HX_CTX ,::ID_obj::LockAbility_dyn());
            			}
            		}
HXLINE(  73)		this->numOfSlots = numOfSlots;
            	}

Dynamic Wheel_obj::__CreateEmpty() { return new Wheel_obj; }

void *Wheel_obj::_hx_vtable = 0;

Dynamic Wheel_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Wheel_obj > _hx_result = new Wheel_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool Wheel_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x5a3c6d46;
}

 ::battle::Ability Wheel_obj::get(int pos){
            	HX_STACKFRAME(&_hx_pos_e73854b184c8947c_21_get)
HXLINE( 151)		bool _hx_tmp;
HXDLIN( 151)		if ((pos >= (int)0)) {
HXLINE( 151)			_hx_tmp = (pos <= (int)9);
            		}
            		else {
HXLINE( 151)			_hx_tmp = false;
            		}
HXDLIN( 151)		if ((false == _hx_tmp)) {
HXLINE(  22)			::hxassert::Assert_obj::throwAssertionFailureError(::Array_obj< ::String >::fromData( _hx_array_data_5f204a98_6,1),hx::SourceInfo(HX_("Wheel.hx",23,5d,e7,25),22,HX_("battle.struct.Wheel",98,4a,20,5f),HX_("get",96,80,4e,00)));
            		}
HXLINE(  23)		return this->wheel->__get(pos).StaticCast<  ::battle::Ability >();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Wheel_obj,get,return )

 ::battle::Active Wheel_obj::getActive(int pos){
            	HX_STACKFRAME(&_hx_pos_e73854b184c8947c_27_getActive)
HXLINE( 151)		bool _hx_tmp;
HXDLIN( 151)		if ((pos >= (int)0)) {
HXLINE( 151)			_hx_tmp = (pos <= (int)9);
            		}
            		else {
HXLINE( 151)			_hx_tmp = false;
            		}
HXDLIN( 151)		if ((false == _hx_tmp)) {
HXLINE(  28)			::hxassert::Assert_obj::throwAssertionFailureError(::Array_obj< ::String >::fromData( _hx_array_data_5f204a98_8,1),hx::SourceInfo(HX_("Wheel.hx",23,5d,e7,25),28,HX_("battle.struct.Wheel",98,4a,20,5f),HX_("getActive",fc,ca,9c,92)));
            		}
HXLINE( 151)		if ((false == hx::IsEq( this->wheel->__get(pos).StaticCast<  ::battle::Ability >()->type,::battle::enums::AbilityType_obj::Active_dyn() ))) {
HXLINE(  29)			::hxassert::Assert_obj::throwAssertionFailureError(::Array_obj< ::String >::fromData( _hx_array_data_5f204a98_9,1),hx::SourceInfo(HX_("Wheel.hx",23,5d,e7,25),29,HX_("battle.struct.Wheel",98,4a,20,5f),HX_("getActive",fc,ca,9c,92)));
            		}
HXLINE(  30)		return ( ( ::battle::Active)(this->wheel->__get(pos).StaticCast<  ::battle::Ability >()) );
            	}


HX_DEFINE_DYNAMIC_FUNC1(Wheel_obj,getActive,return )

::Array< ::Dynamic> Wheel_obj::passives( ::battle::data::BattleEvent trigger){
            	HX_STACKFRAME(&_hx_pos_e73854b184c8947c_34_passives)
HXLINE(  35)		::Array< ::Dynamic> res = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  36)		{
HXLINE(  36)			int _g = (int)0;
HXDLIN(  36)			::Array< ::Dynamic> _g1 = this->wheel;
HXDLIN(  36)			while((_g < _g1->length)){
HXLINE(  36)				 ::battle::Ability ab = _g1->__get(_g).StaticCast<  ::battle::Ability >();
HXDLIN(  36)				_g = (_g + (int)1);
HXLINE(  37)				if (hx::IsEq( ab->type,::battle::enums::AbilityType_obj::Passive_dyn() )) {
HXLINE(  39)					 ::battle::Passive p = ( ( ::battle::Passive)(ab) );
HXLINE(  40)					bool _hx_tmp;
HXDLIN(  40)					if (hx::IsNotNull( trigger )) {
HXLINE(  40)						_hx_tmp = p->reactsTo(trigger);
            					}
            					else {
HXLINE(  40)						_hx_tmp = true;
            					}
HXDLIN(  40)					if (_hx_tmp) {
HXLINE(  41)						res->push(p->id);
            					}
            				}
            			}
            		}
HXLINE(  43)		return res;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Wheel_obj,passives,return )

 ::battle::Ability Wheel_obj::set(int pos, ::battle::Ability ability){
            	HX_STACKFRAME(&_hx_pos_e73854b184c8947c_47_set)
HXLINE( 151)		bool _hx_tmp;
HXDLIN( 151)		if ((pos >= (int)0)) {
HXLINE( 151)			_hx_tmp = (pos <= (int)9);
            		}
            		else {
HXLINE( 151)			_hx_tmp = false;
            		}
HXDLIN( 151)		if ((false == _hx_tmp)) {
HXLINE(  48)			::hxassert::Assert_obj::throwAssertionFailureError(::Array_obj< ::String >::fromData( _hx_array_data_5f204a98_13,1),hx::SourceInfo(HX_("Wheel.hx",23,5d,e7,25),48,HX_("battle.struct.Wheel",98,4a,20,5f),HX_("set",a2,9b,57,00)));
            		}
HXLINE(  49)		return (this->wheel[pos] = ability);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Wheel_obj,set,return )

void Wheel_obj::tick(){
            	HX_STACKFRAME(&_hx_pos_e73854b184c8947c_54_tick)
HXDLIN(  54)		int _g = (int)0;
HXDLIN(  54)		::Array< ::Dynamic> _g1 = this->wheel;
HXDLIN(  54)		while((_g < _g1->length)){
HXDLIN(  54)			 ::battle::Ability ability = _g1->__get(_g).StaticCast<  ::battle::Ability >();
HXDLIN(  54)			_g = (_g + (int)1);
HXLINE(  55)			bool _hx_tmp;
HXDLIN(  55)			bool _hx_tmp1;
HXDLIN(  55)			if (hx::IsNotEq( ability->id,::ID_obj::EmptyAbility_dyn() )) {
HXLINE(  55)				_hx_tmp1 = hx::IsEq( ability->id,::ID_obj::LockAbility_dyn() );
            			}
            			else {
HXLINE(  55)				_hx_tmp1 = true;
            			}
HXDLIN(  55)			if (!(_hx_tmp1)) {
HXLINE(  55)				_hx_tmp = hx::IsEq( ability->type,::battle::enums::AbilityType_obj::Active_dyn() );
            			}
            			else {
HXLINE(  55)				_hx_tmp = false;
            			}
HXDLIN(  55)			if (_hx_tmp) {
HXLINE(  56)				hx::TCast<  ::battle::Active >::cast(ability)->tick();
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Wheel_obj,tick,(void))


hx::ObjectPtr< Wheel_obj > Wheel_obj::__new(::Array< ::Dynamic> pool,int numOfSlots) {
	hx::ObjectPtr< Wheel_obj > __this = new Wheel_obj();
	__this->__construct(pool,numOfSlots);
	return __this;
}

hx::ObjectPtr< Wheel_obj > Wheel_obj::__alloc(hx::Ctx *_hx_ctx,::Array< ::Dynamic> pool,int numOfSlots) {
	Wheel_obj *__this = (Wheel_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Wheel_obj), true, "battle.struct.Wheel"));
	*(void **)__this = Wheel_obj::_hx_vtable;
	__this->__construct(pool,numOfSlots);
	return __this;
}

Wheel_obj::Wheel_obj()
{
}

void Wheel_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Wheel);
	HX_MARK_MEMBER_NAME(wheel,"wheel");
	HX_MARK_MEMBER_NAME(numOfSlots,"numOfSlots");
	HX_MARK_END_CLASS();
}

void Wheel_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(wheel,"wheel");
	HX_VISIT_MEMBER_NAME(numOfSlots,"numOfSlots");
}

hx::Val Wheel_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"get") ) { return hx::Val( get_dyn() ); }
		if (HX_FIELD_EQ(inName,"set") ) { return hx::Val( set_dyn() ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"tick") ) { return hx::Val( tick_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"wheel") ) { return hx::Val( wheel ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"passives") ) { return hx::Val( passives_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"getActive") ) { return hx::Val( getActive_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"numOfSlots") ) { return hx::Val( numOfSlots ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Wheel_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"wheel") ) { wheel=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"numOfSlots") ) { numOfSlots=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Wheel_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("wheel","\x9b","\x34","\xba","\xc9"));
	outFields->push(HX_HCSTRING("numOfSlots","\x78","\x5a","\x4f","\x12"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Wheel_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(Wheel_obj,wheel),HX_HCSTRING("wheel","\x9b","\x34","\xba","\xc9")},
	{hx::fsInt,(int)offsetof(Wheel_obj,numOfSlots),HX_HCSTRING("numOfSlots","\x78","\x5a","\x4f","\x12")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Wheel_obj_sStaticStorageInfo = 0;
#endif

static ::String Wheel_obj_sMemberFields[] = {
	HX_HCSTRING("wheel","\x9b","\x34","\xba","\xc9"),
	HX_HCSTRING("numOfSlots","\x78","\x5a","\x4f","\x12"),
	HX_HCSTRING("get","\x96","\x80","\x4e","\x00"),
	HX_HCSTRING("getActive","\xfc","\xca","\x9c","\x92"),
	HX_HCSTRING("passives","\xec","\x6a","\x94","\x3f"),
	HX_HCSTRING("set","\xa2","\x9b","\x57","\x00"),
	HX_HCSTRING("tick","\x5d","\xc3","\xfc","\x4c"),
	::String(null()) };

static void Wheel_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Wheel_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Wheel_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Wheel_obj::__mClass,"__mClass");
};

#endif

hx::Class Wheel_obj::__mClass;

void Wheel_obj::__register()
{
	hx::Object *dummy = new Wheel_obj;
	Wheel_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("battle.struct.Wheel","\x98","\x4a","\x20","\x5f");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Wheel_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Wheel_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Wheel_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Wheel_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Wheel_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Wheel_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace battle
} // end namespace struct
