// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_battle_struct_Pool
#include <battle/struct/Pool.h>
#endif
#ifndef INCLUDED_hxassert_Assert
#include <hxassert/Assert.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_9639cf8c65829289_27_new,"battle.struct.Pool","new",0x948fc5f1,"battle.struct.Pool.new","battle/struct/Pool.hx",27,0xddc5147f)
static const ::String _hx_array_data_23fff97f_1[] = {
	HX_("Assertion failed: maxValue >= minValue && startValue >= minValue && startValue <= maxValue",f8,40,73,13),
};
HX_LOCAL_STACK_FRAME(_hx_pos_9639cf8c65829289_16_set_value,"battle.struct.Pool","set_value",0xe37cc025,"battle.struct.Pool.set_value","battle/struct/Pool.hx",16,0xddc5147f)
namespace battle{
namespace _hx_struct{

void Pool_obj::__construct(int startValue,int maxValue,hx::Null< int >  __o_minValue){
int minValue = __o_minValue.Default(0);
            	HX_STACKFRAME(&_hx_pos_9639cf8c65829289_27_new)
HXLINE( 151)		bool _hx_tmp;
HXLINE(  28)		bool _hx_tmp1;
HXDLIN(  28)		if ((maxValue >= minValue)) {
HXLINE(  28)			_hx_tmp1 = (startValue >= minValue);
            		}
            		else {
HXLINE(  28)			_hx_tmp1 = false;
            		}
HXLINE( 151)		if (_hx_tmp1) {
HXLINE( 151)			_hx_tmp = (startValue <= maxValue);
            		}
            		else {
HXLINE( 151)			_hx_tmp = false;
            		}
HXDLIN( 151)		if ((false == _hx_tmp)) {
HXLINE(  28)			::hxassert::Assert_obj::throwAssertionFailureError(::Array_obj< ::String >::fromData( _hx_array_data_23fff97f_1,1),hx::SourceInfo(HX_("Pool.hx",42,db,52,91),28,HX_("battle.struct.Pool",7f,f9,ff,23),HX_("new",60,d0,53,00)));
            		}
HXLINE(  30)		this->maxValue = maxValue;
HXLINE(  31)		this->minValue = minValue;
HXLINE(  32)		this->set_value(startValue);
            	}

Dynamic Pool_obj::__CreateEmpty() { return new Pool_obj; }

void *Pool_obj::_hx_vtable = 0;

Dynamic Pool_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Pool_obj > _hx_result = new Pool_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

bool Pool_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x395f31c9;
}

int Pool_obj::set_value(int v){
            	HX_STACKFRAME(&_hx_pos_9639cf8c65829289_16_set_value)
HXLINE(  17)		if ((v < this->minValue)) {
HXLINE(  18)			this->value = this->minValue;
            		}
            		else {
HXLINE(  19)			if ((v > this->maxValue)) {
HXLINE(  20)				this->value = this->maxValue;
            			}
            			else {
HXLINE(  22)				this->value = v;
            			}
            		}
HXLINE(  23)		return this->value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Pool_obj,set_value,return )


hx::ObjectPtr< Pool_obj > Pool_obj::__new(int startValue,int maxValue,hx::Null< int >  __o_minValue) {
	hx::ObjectPtr< Pool_obj > __this = new Pool_obj();
	__this->__construct(startValue,maxValue,__o_minValue);
	return __this;
}

hx::ObjectPtr< Pool_obj > Pool_obj::__alloc(hx::Ctx *_hx_ctx,int startValue,int maxValue,hx::Null< int >  __o_minValue) {
	Pool_obj *__this = (Pool_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Pool_obj), false, "battle.struct.Pool"));
	*(void **)__this = Pool_obj::_hx_vtable;
	__this->__construct(startValue,maxValue,__o_minValue);
	return __this;
}

Pool_obj::Pool_obj()
{
}

hx::Val Pool_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"value") ) { return hx::Val( value ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"maxValue") ) { return hx::Val( maxValue ); }
		if (HX_FIELD_EQ(inName,"minValue") ) { return hx::Val( minValue ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"set_value") ) { return hx::Val( set_value_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Pool_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"value") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_value(inValue.Cast< int >()) );value=inValue.Cast< int >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"maxValue") ) { maxValue=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"minValue") ) { minValue=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Pool_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("maxValue","\x2d","\xd2","\xd5","\xdb"));
	outFields->push(HX_HCSTRING("minValue","\x7f","\xec","\xef","\x28"));
	outFields->push(HX_HCSTRING("value","\x71","\x7f","\xb8","\x31"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Pool_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(Pool_obj,maxValue),HX_HCSTRING("maxValue","\x2d","\xd2","\xd5","\xdb")},
	{hx::fsInt,(int)offsetof(Pool_obj,minValue),HX_HCSTRING("minValue","\x7f","\xec","\xef","\x28")},
	{hx::fsInt,(int)offsetof(Pool_obj,value),HX_HCSTRING("value","\x71","\x7f","\xb8","\x31")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Pool_obj_sStaticStorageInfo = 0;
#endif

static ::String Pool_obj_sMemberFields[] = {
	HX_HCSTRING("maxValue","\x2d","\xd2","\xd5","\xdb"),
	HX_HCSTRING("minValue","\x7f","\xec","\xef","\x28"),
	HX_HCSTRING("value","\x71","\x7f","\xb8","\x31"),
	HX_HCSTRING("set_value","\xd4","\xc7","\xb2","\x58"),
	::String(null()) };

static void Pool_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Pool_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Pool_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Pool_obj::__mClass,"__mClass");
};

#endif

hx::Class Pool_obj::__mClass;

void Pool_obj::__register()
{
	hx::Object *dummy = new Pool_obj;
	Pool_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("battle.struct.Pool","\x7f","\xf9","\xff","\x23");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Pool_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Pool_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Pool_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Pool_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Pool_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Pool_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace battle
} // end namespace struct
