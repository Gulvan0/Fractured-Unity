// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_Element
#include <Element.h>
#endif
#ifndef INCLUDED_ID
#include <ID.h>
#endif
#ifndef INCLUDED_XMLUtils
#include <XMLUtils.h>
#endif
#ifndef INCLUDED_battle_Buff
#include <battle/Buff.h>
#endif
#ifndef INCLUDED_battle_data_BattleEvent
#include <battle/data/BattleEvent.h>
#endif
#ifndef INCLUDED_battle_data_Buffs
#include <battle/data/Buffs.h>
#endif
#ifndef INCLUDED_battle_enums_BuffMode
#include <battle/enums/BuffMode.h>
#endif
#ifndef INCLUDED_battle_struct_UnitCoords
#include <battle/struct/UnitCoords.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_2236fa937f18fcad_63_new,"battle.Buff","new",0xb6dffe5b,"battle.Buff.new","battle/Buff.hx",63,0x7b73b794)
HX_LOCAL_STACK_FRAME(_hx_pos_2236fa937f18fcad_31_reactsTo,"battle.Buff","reactsTo",0x6f80aad4,"battle.Buff.reactsTo","battle/Buff.hx",31,0x7b73b794)
HX_LOCAL_STACK_FRAME(_hx_pos_2236fa937f18fcad_39_tickAndCheckEnded,"battle.Buff","tickAndCheckEnded",0xaa716267,"battle.Buff.tickAndCheckEnded","battle/Buff.hx",39,0x7b73b794)
HX_LOCAL_STACK_FRAME(_hx_pos_2236fa937f18fcad_49_onCast,"battle.Buff","onCast",0x31baa863,"battle.Buff.onCast","battle/Buff.hx",49,0x7b73b794)
HX_LOCAL_STACK_FRAME(_hx_pos_2236fa937f18fcad_54_onEnd,"battle.Buff","onEnd",0xc6d47ab7,"battle.Buff.onEnd","battle/Buff.hx",54,0x7b73b794)
HX_LOCAL_STACK_FRAME(_hx_pos_2236fa937f18fcad_59_act,"battle.Buff","act",0xb6d61f4d,"battle.Buff.act","battle/Buff.hx",59,0x7b73b794)
namespace battle{

void Buff_obj::__construct( ::ID id,int duration, ::battle::_hx_struct::UnitCoords target, ::battle::_hx_struct::UnitCoords caster){
            	HX_STACKFRAME(&_hx_pos_2236fa937f18fcad_63_new)
HXLINE(  64)		this->id = id;
HXLINE(  66)		this->name = ( (::String)(::XMLUtils_obj::parseBuff(id,HX_("name",4b,72,ff,48),HX_("",00,00,00,00))) );
HXLINE(  67)		this->description = ( (::String)(::XMLUtils_obj::parseBuff(id,HX_("description",fc,08,1d,5f),HX_("",00,00,00,00))) );
HXLINE(  68)		this->element = ::XMLUtils_obj::parseBuff(id,HX_("element",bc,ae,54,06),::Element_obj::Physical_dyn());
HXLINE(  69)		this->isOverTime = ( (bool)(::XMLUtils_obj::parseBuff(id,HX_("isOverTime",8b,d5,02,b0),true)) );
HXLINE(  70)		this->isStackable = ( (bool)(::XMLUtils_obj::parseBuff(id,HX_("isStackable",98,cf,0d,bf),true)) );
HXLINE(  71)		this->triggers = ::XMLUtils_obj::parseTriggers(id);
HXLINE(  73)		this->owner = target;
HXLINE(  74)		this->caster = caster;
HXLINE(  76)		this->duration = duration;
            	}

Dynamic Buff_obj::__CreateEmpty() { return new Buff_obj; }

void *Buff_obj::_hx_vtable = 0;

Dynamic Buff_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Buff_obj > _hx_result = new Buff_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3]);
	return _hx_result;
}

bool Buff_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x01da47eb;
}

bool Buff_obj::reactsTo( ::battle::data::BattleEvent e){
            	HX_STACKFRAME(&_hx_pos_2236fa937f18fcad_31_reactsTo)
HXLINE(  32)		{
HXLINE(  32)			int _g = (int)0;
HXDLIN(  32)			::Array< ::Dynamic> _g1 = this->triggers;
HXDLIN(  32)			while((_g < _g1->length)){
HXLINE(  32)				 ::battle::data::BattleEvent event = _g1->__get(_g).StaticCast<  ::battle::data::BattleEvent >();
HXDLIN(  32)				_g = (_g + (int)1);
HXLINE(  33)				if (hx::IsEq( e,event )) {
HXLINE(  34)					return true;
            				}
            			}
            		}
HXLINE(  35)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Buff_obj,reactsTo,return )

bool Buff_obj::tickAndCheckEnded(){
            	HX_STACKFRAME(&_hx_pos_2236fa937f18fcad_39_tickAndCheckEnded)
HXLINE(  40)		if (this->isOverTime) {
HXLINE(  41)			this->act(::battle::enums::BuffMode_obj::OverTime_dyn());
            		}
HXLINE(  42)		this->duration--;
HXLINE(  44)		if ((this->duration == (int)0)) {
HXLINE(  44)			return true;
            		}
            		else {
HXLINE(  44)			return false;
            		}
HXDLIN(  44)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Buff_obj,tickAndCheckEnded,return )

void Buff_obj::onCast(){
            	HX_STACKFRAME(&_hx_pos_2236fa937f18fcad_49_onCast)
HXDLIN(  49)		this->act(::battle::enums::BuffMode_obj::Cast_dyn());
            	}


HX_DEFINE_DYNAMIC_FUNC0(Buff_obj,onCast,(void))

void Buff_obj::onEnd(){
            	HX_STACKFRAME(&_hx_pos_2236fa937f18fcad_54_onEnd)
HXDLIN(  54)		this->act(::battle::enums::BuffMode_obj::End_dyn());
            	}


HX_DEFINE_DYNAMIC_FUNC0(Buff_obj,onEnd,(void))

void Buff_obj::act( ::battle::enums::BuffMode mode){
            	HX_STACKFRAME(&_hx_pos_2236fa937f18fcad_59_act)
HXDLIN(  59)		::battle::data::Buffs_obj::useBuff(this->id,this->owner,this->caster,mode);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Buff_obj,act,(void))


hx::ObjectPtr< Buff_obj > Buff_obj::__new( ::ID id,int duration, ::battle::_hx_struct::UnitCoords target, ::battle::_hx_struct::UnitCoords caster) {
	hx::ObjectPtr< Buff_obj > __this = new Buff_obj();
	__this->__construct(id,duration,target,caster);
	return __this;
}

hx::ObjectPtr< Buff_obj > Buff_obj::__alloc(hx::Ctx *_hx_ctx, ::ID id,int duration, ::battle::_hx_struct::UnitCoords target, ::battle::_hx_struct::UnitCoords caster) {
	Buff_obj *__this = (Buff_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Buff_obj), true, "battle.Buff"));
	*(void **)__this = Buff_obj::_hx_vtable;
	__this->__construct(id,duration,target,caster);
	return __this;
}

Buff_obj::Buff_obj()
{
}

void Buff_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Buff);
	HX_MARK_MEMBER_NAME(id,"id");
	HX_MARK_MEMBER_NAME(name,"name");
	HX_MARK_MEMBER_NAME(description,"description");
	HX_MARK_MEMBER_NAME(element,"element");
	HX_MARK_MEMBER_NAME(isOverTime,"isOverTime");
	HX_MARK_MEMBER_NAME(isStackable,"isStackable");
	HX_MARK_MEMBER_NAME(triggers,"triggers");
	HX_MARK_MEMBER_NAME(owner,"owner");
	HX_MARK_MEMBER_NAME(caster,"caster");
	HX_MARK_MEMBER_NAME(duration,"duration");
	HX_MARK_END_CLASS();
}

void Buff_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(id,"id");
	HX_VISIT_MEMBER_NAME(name,"name");
	HX_VISIT_MEMBER_NAME(description,"description");
	HX_VISIT_MEMBER_NAME(element,"element");
	HX_VISIT_MEMBER_NAME(isOverTime,"isOverTime");
	HX_VISIT_MEMBER_NAME(isStackable,"isStackable");
	HX_VISIT_MEMBER_NAME(triggers,"triggers");
	HX_VISIT_MEMBER_NAME(owner,"owner");
	HX_VISIT_MEMBER_NAME(caster,"caster");
	HX_VISIT_MEMBER_NAME(duration,"duration");
}

hx::Val Buff_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"id") ) { return hx::Val( id ); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"act") ) { return hx::Val( act_dyn() ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"name") ) { return hx::Val( name ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"owner") ) { return hx::Val( owner ); }
		if (HX_FIELD_EQ(inName,"onEnd") ) { return hx::Val( onEnd_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"caster") ) { return hx::Val( caster ); }
		if (HX_FIELD_EQ(inName,"onCast") ) { return hx::Val( onCast_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"element") ) { return hx::Val( element ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"triggers") ) { return hx::Val( triggers ); }
		if (HX_FIELD_EQ(inName,"duration") ) { return hx::Val( duration ); }
		if (HX_FIELD_EQ(inName,"reactsTo") ) { return hx::Val( reactsTo_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"isOverTime") ) { return hx::Val( isOverTime ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"description") ) { return hx::Val( description ); }
		if (HX_FIELD_EQ(inName,"isStackable") ) { return hx::Val( isStackable ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"tickAndCheckEnded") ) { return hx::Val( tickAndCheckEnded_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Buff_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"id") ) { id=inValue.Cast<  ::ID >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"name") ) { name=inValue.Cast< ::String >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"owner") ) { owner=inValue.Cast<  ::battle::_hx_struct::UnitCoords >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"caster") ) { caster=inValue.Cast<  ::battle::_hx_struct::UnitCoords >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"element") ) { element=inValue.Cast<  ::Element >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"triggers") ) { triggers=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"duration") ) { duration=inValue.Cast< int >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"isOverTime") ) { isOverTime=inValue.Cast< bool >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"description") ) { description=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"isStackable") ) { isStackable=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Buff_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("id","\xdb","\x5b","\x00","\x00"));
	outFields->push(HX_HCSTRING("name","\x4b","\x72","\xff","\x48"));
	outFields->push(HX_HCSTRING("description","\xfc","\x08","\x1d","\x5f"));
	outFields->push(HX_HCSTRING("element","\xbc","\xae","\x54","\x06"));
	outFields->push(HX_HCSTRING("isOverTime","\x8b","\xd5","\x02","\xb0"));
	outFields->push(HX_HCSTRING("isStackable","\x98","\xcf","\x0d","\xbf"));
	outFields->push(HX_HCSTRING("triggers","\x3b","\x3c","\x8b","\xfd"));
	outFields->push(HX_HCSTRING("owner","\x33","\x98","\x76","\x38"));
	outFields->push(HX_HCSTRING("caster","\xec","\xe4","\x8e","\xbb"));
	outFields->push(HX_HCSTRING("duration","\x54","\x0f","\x8e","\x14"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Buff_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::ID*/ ,(int)offsetof(Buff_obj,id),HX_HCSTRING("id","\xdb","\x5b","\x00","\x00")},
	{hx::fsString,(int)offsetof(Buff_obj,name),HX_HCSTRING("name","\x4b","\x72","\xff","\x48")},
	{hx::fsString,(int)offsetof(Buff_obj,description),HX_HCSTRING("description","\xfc","\x08","\x1d","\x5f")},
	{hx::fsObject /*::Element*/ ,(int)offsetof(Buff_obj,element),HX_HCSTRING("element","\xbc","\xae","\x54","\x06")},
	{hx::fsBool,(int)offsetof(Buff_obj,isOverTime),HX_HCSTRING("isOverTime","\x8b","\xd5","\x02","\xb0")},
	{hx::fsBool,(int)offsetof(Buff_obj,isStackable),HX_HCSTRING("isStackable","\x98","\xcf","\x0d","\xbf")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(Buff_obj,triggers),HX_HCSTRING("triggers","\x3b","\x3c","\x8b","\xfd")},
	{hx::fsObject /*::battle::_hx_struct::UnitCoords*/ ,(int)offsetof(Buff_obj,owner),HX_HCSTRING("owner","\x33","\x98","\x76","\x38")},
	{hx::fsObject /*::battle::_hx_struct::UnitCoords*/ ,(int)offsetof(Buff_obj,caster),HX_HCSTRING("caster","\xec","\xe4","\x8e","\xbb")},
	{hx::fsInt,(int)offsetof(Buff_obj,duration),HX_HCSTRING("duration","\x54","\x0f","\x8e","\x14")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Buff_obj_sStaticStorageInfo = 0;
#endif

static ::String Buff_obj_sMemberFields[] = {
	HX_HCSTRING("id","\xdb","\x5b","\x00","\x00"),
	HX_HCSTRING("name","\x4b","\x72","\xff","\x48"),
	HX_HCSTRING("description","\xfc","\x08","\x1d","\x5f"),
	HX_HCSTRING("element","\xbc","\xae","\x54","\x06"),
	HX_HCSTRING("isOverTime","\x8b","\xd5","\x02","\xb0"),
	HX_HCSTRING("isStackable","\x98","\xcf","\x0d","\xbf"),
	HX_HCSTRING("triggers","\x3b","\x3c","\x8b","\xfd"),
	HX_HCSTRING("owner","\x33","\x98","\x76","\x38"),
	HX_HCSTRING("caster","\xec","\xe4","\x8e","\xbb"),
	HX_HCSTRING("duration","\x54","\x0f","\x8e","\x14"),
	HX_HCSTRING("reactsTo","\xaf","\x66","\xbc","\xf6"),
	HX_HCSTRING("tickAndCheckEnded","\x2c","\xd3","\x1a","\xc9"),
	HX_HCSTRING("onCast","\x7e","\x27","\x44","\xe4"),
	HX_HCSTRING("onEnd","\xfc","\x97","\x64","\x32"),
	HX_HCSTRING("act","\x52","\xf1","\x49","\x00"),
	::String(null()) };

static void Buff_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Buff_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Buff_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Buff_obj::__mClass,"__mClass");
};

#endif

hx::Class Buff_obj::__mClass;

void Buff_obj::__register()
{
	hx::Object *dummy = new Buff_obj;
	Buff_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("battle.Buff","\xe9","\x34","\x1d","\x47");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Buff_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Buff_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Buff_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Buff_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Buff_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Buff_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace battle
