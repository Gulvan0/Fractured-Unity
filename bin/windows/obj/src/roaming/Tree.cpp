// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_Element
#include <Element.h>
#endif
#ifndef INCLUDED_MathUtils
#include <MathUtils.h>
#endif
#ifndef INCLUDED_XMLUtils
#include <XMLUtils.h>
#endif
#ifndef INCLUDED_hxassert_Assert
#include <hxassert/Assert.h>
#endif
#ifndef INCLUDED_roaming_Ability
#include <roaming/Ability.h>
#endif
#ifndef INCLUDED_roaming_Tree
#include <roaming/Tree.h>
#endif
#ifndef INCLUDED_roaming_TreeAbility
#include <roaming/TreeAbility.h>
#endif
#ifndef INCLUDED_roaming_TreeIterator
#include <roaming/TreeIterator.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_44103b15ade1a0d4_72_new,"roaming.Tree","new",0x50f7bde5,"roaming.Tree.new","roaming/Tree.hx",72,0xac5bb74a)
HX_LOCAL_STACK_FRAME(_hx_pos_44103b15ade1a0d4_38_get,"roaming.Tree","get",0x50f26e1b,"roaming.Tree.get","roaming/Tree.hx",38,0xac5bb74a)
HX_LOCAL_STACK_FRAME(_hx_pos_44103b15ade1a0d4_51_learn,"roaming.Tree","learn",0x25f14a49,"roaming.Tree.learn","roaming/Tree.hx",51,0xac5bb74a)
static const ::String _hx_array_data_0ba7e773_6[] = {
	HX_("Assertion failed: i.inRange(0, XMLUtils.getGlobal(\"tree\", \"height\", 1) - 1)",9b,6c,b6,e2),
};
static const ::String _hx_array_data_0ba7e773_7[] = {
	HX_("Assertion failed: j.inRange(0, XMLUtils.getGlobal(\"tree\", \"width\", 1) - 1)",4b,05,cf,70),
};
HX_LOCAL_STACK_FRAME(_hx_pos_44103b15ade1a0d4_63_reset,"roaming.Tree","reset",0x9a666294,"roaming.Tree.reset","roaming/Tree.hx",63,0xac5bb74a)
HX_LOCAL_STACK_FRAME(_hx_pos_44103b15ade1a0d4_79_iterator,"roaming.Tree","iterator",0xd6123a49,"roaming.Tree.iterator","roaming/Tree.hx",79,0xac5bb74a)
namespace roaming{

void Tree_obj::__construct( ::Element element){
            	HX_STACKFRAME(&_hx_pos_44103b15ade1a0d4_72_new)
HXLINE(  73)		this->tree = ::XMLUtils_obj::parseTree(element);
HXLINE(  74)		this->reqDeltaJ = ::XMLUtils_obj::parseTreePaths(element);
            	}

Dynamic Tree_obj::__CreateEmpty() { return new Tree_obj; }

void *Tree_obj::_hx_vtable = 0;

Dynamic Tree_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Tree_obj > _hx_result = new Tree_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool Tree_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x0a7306eb;
}

 ::roaming::TreeAbility Tree_obj::get(int i,int j){
            	HX_GC_STACKFRAME(&_hx_pos_44103b15ade1a0d4_38_get)
HXLINE(  39)		::Array< int > unlocks = ::Array_obj< int >::__new(0);
HXLINE(  40)		if ((i < (::XMLUtils_obj::getGlobal(HX_("tree",5e,99,03,4d),HX_("height",e7,07,4c,02),(int)1) - (int)1))) {
HXLINE(  41)			int _g = (int)-1;
HXDLIN(  41)			while((_g < (int)2)){
HXLINE(  41)				_g = (_g + (int)1);
HXDLIN(  41)				int d = (_g - (int)1);
HXLINE(  42)				if (::MathUtils_obj::inRange((j + d),(int)0,(::XMLUtils_obj::getGlobal(HX_("tree",5e,99,03,4d),HX_("width",06,b6,62,ca),(int)1) - (int)1),null(),null())) {
HXLINE(  43)					int _g1 = (int)0;
HXDLIN(  43)					::Array< ::Dynamic> _g2 = this->reqDeltaJ;
HXDLIN(  43)					::Array< ::Dynamic> _g21 = _g2->__get((i + (int)1)).StaticCast< ::Array< ::Dynamic> >();
HXDLIN(  43)					::Array< int > _g22 = _g21->__get((j + d)).StaticCast< ::Array< int > >();
HXDLIN(  43)					while((_g1 < _g22->length)){
HXLINE(  43)						int dj = _g22->__get(_g1);
HXDLIN(  43)						_g1 = (_g1 + (int)1);
HXLINE(  44)						if ((dj == -(d))) {
HXLINE(  45)							unlocks->push(d);
            						}
            					}
            				}
            			}
            		}
HXLINE(  47)		 ::roaming::Ability _hx_tmp = this->tree->__get(i).StaticCast< ::Array< ::Dynamic> >()->__get(j).StaticCast<  ::roaming::Ability >();
HXDLIN(  47)		return  ::roaming::TreeAbility_obj::__alloc( HX_CTX ,_hx_tmp,i,j,this->reqDeltaJ->__get(i).StaticCast< ::Array< ::Dynamic> >()->__get(j).StaticCast< ::Array< int > >(),unlocks);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Tree_obj,get,return )

bool Tree_obj::learn(int i,int j){
            	HX_STACKFRAME(&_hx_pos_44103b15ade1a0d4_51_learn)
HXLINE( 151)		if ((false == ::MathUtils_obj::inRange(i,(int)0,(::XMLUtils_obj::getGlobal(HX_("tree",5e,99,03,4d),HX_("height",e7,07,4c,02),(int)1) - (int)1),null(),null()))) {
HXLINE(  52)			::hxassert::Assert_obj::throwAssertionFailureError(::Array_obj< ::String >::fromData( _hx_array_data_0ba7e773_6,1),hx::SourceInfo(HX_("Tree.hx",00,80,18,a4),52,HX_("roaming.Tree",73,e7,a7,0b),HX_("learn",84,31,53,72)));
            		}
HXLINE( 151)		if ((false == ::MathUtils_obj::inRange(j,(int)0,(::XMLUtils_obj::getGlobal(HX_("tree",5e,99,03,4d),HX_("width",06,b6,62,ca),(int)1) - (int)1),null(),null()))) {
HXLINE(  53)			::hxassert::Assert_obj::throwAssertionFailureError(::Array_obj< ::String >::fromData( _hx_array_data_0ba7e773_7,1),hx::SourceInfo(HX_("Tree.hx",00,80,18,a4),53,HX_("roaming.Tree",73,e7,a7,0b),HX_("learn",84,31,53,72)));
            		}
HXLINE(  55)		{
HXLINE(  55)			int _g = (int)0;
HXDLIN(  55)			::Array< int > _g1 = this->reqDeltaJ->__get(i).StaticCast< ::Array< ::Dynamic> >()->__get(j).StaticCast< ::Array< int > >();
HXDLIN(  55)			while((_g < _g1->length)){
HXLINE(  55)				int deltaJ = _g1->__get(_g);
HXDLIN(  55)				_g = (_g + (int)1);
HXLINE(  56)				::Array< ::Dynamic> _hx_tmp = this->tree;
HXDLIN(  56)				::Array< ::Dynamic> _hx_tmp1 = _hx_tmp->__get((i - (int)1)).StaticCast< ::Array< ::Dynamic> >();
HXDLIN(  56)				if ((_hx_tmp1->__get((j + deltaJ)).StaticCast<  ::roaming::Ability >()->currentLvl == (int)0)) {
HXLINE(  57)					return false;
            				}
            			}
            		}
HXLINE(  59)		return this->tree->__get(i).StaticCast< ::Array< ::Dynamic> >()->__get(j).StaticCast<  ::roaming::Ability >()->learn();
            	}


HX_DEFINE_DYNAMIC_FUNC2(Tree_obj,learn,return )

int Tree_obj::reset(){
            	HX_STACKFRAME(&_hx_pos_44103b15ade1a0d4_63_reset)
HXLINE(  64)		int sum = (int)0;
HXLINE(  65)		{
HXLINE(  65)			int _g = (int)0;
HXDLIN(  65)			::Array< ::Dynamic> _g1 = this->tree;
HXDLIN(  65)			while((_g < _g1->length)){
HXLINE(  65)				::Array< ::Dynamic> row = _g1->__get(_g).StaticCast< ::Array< ::Dynamic> >();
HXDLIN(  65)				_g = (_g + (int)1);
HXLINE(  66)				{
HXLINE(  66)					int _g2 = (int)0;
HXDLIN(  66)					while((_g2 < row->length)){
HXLINE(  66)						 ::roaming::Ability ability = row->__get(_g2).StaticCast<  ::roaming::Ability >();
HXDLIN(  66)						_g2 = (_g2 + (int)1);
HXLINE(  67)						sum = (sum + ability->reset());
            					}
            				}
            			}
            		}
HXLINE(  68)		return sum;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Tree_obj,reset,return )

 ::Dynamic Tree_obj::iterator(){
            	HX_GC_STACKFRAME(&_hx_pos_44103b15ade1a0d4_79_iterator)
HXDLIN(  79)		return  ::roaming::TreeIterator_obj::__alloc( HX_CTX ,hx::ObjectPtr<OBJ_>(this));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Tree_obj,iterator,return )


hx::ObjectPtr< Tree_obj > Tree_obj::__new( ::Element element) {
	hx::ObjectPtr< Tree_obj > __this = new Tree_obj();
	__this->__construct(element);
	return __this;
}

hx::ObjectPtr< Tree_obj > Tree_obj::__alloc(hx::Ctx *_hx_ctx, ::Element element) {
	Tree_obj *__this = (Tree_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Tree_obj), true, "roaming.Tree"));
	*(void **)__this = Tree_obj::_hx_vtable;
	__this->__construct(element);
	return __this;
}

Tree_obj::Tree_obj()
{
}

void Tree_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Tree);
	HX_MARK_MEMBER_NAME(tree,"tree");
	HX_MARK_MEMBER_NAME(reqDeltaJ,"reqDeltaJ");
	HX_MARK_END_CLASS();
}

void Tree_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(tree,"tree");
	HX_VISIT_MEMBER_NAME(reqDeltaJ,"reqDeltaJ");
}

hx::Val Tree_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"get") ) { return hx::Val( get_dyn() ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"tree") ) { return hx::Val( tree ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"learn") ) { return hx::Val( learn_dyn() ); }
		if (HX_FIELD_EQ(inName,"reset") ) { return hx::Val( reset_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"iterator") ) { return hx::Val( iterator_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"reqDeltaJ") ) { return hx::Val( reqDeltaJ ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Tree_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"tree") ) { tree=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"reqDeltaJ") ) { reqDeltaJ=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Tree_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("tree","\x5e","\x99","\x03","\x4d"));
	outFields->push(HX_HCSTRING("reqDeltaJ","\x50","\xb9","\xd9","\x7a"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Tree_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(Tree_obj,tree),HX_HCSTRING("tree","\x5e","\x99","\x03","\x4d")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(Tree_obj,reqDeltaJ),HX_HCSTRING("reqDeltaJ","\x50","\xb9","\xd9","\x7a")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Tree_obj_sStaticStorageInfo = 0;
#endif

static ::String Tree_obj_sMemberFields[] = {
	HX_HCSTRING("tree","\x5e","\x99","\x03","\x4d"),
	HX_HCSTRING("reqDeltaJ","\x50","\xb9","\xd9","\x7a"),
	HX_HCSTRING("get","\x96","\x80","\x4e","\x00"),
	HX_HCSTRING("learn","\x84","\x31","\x53","\x72"),
	HX_HCSTRING("reset","\xcf","\x49","\xc8","\xe6"),
	HX_HCSTRING("iterator","\xee","\x49","\x9a","\x93"),
	::String(null()) };

static void Tree_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Tree_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Tree_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Tree_obj::__mClass,"__mClass");
};

#endif

hx::Class Tree_obj::__mClass;

void Tree_obj::__register()
{
	hx::Object *dummy = new Tree_obj;
	Tree_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("roaming.Tree","\x73","\xe7","\xa7","\x0b");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Tree_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Tree_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Tree_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Tree_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Tree_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Tree_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace roaming
