// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_XMLUtils
#include <XMLUtils.h>
#endif
#ifndef INCLUDED_roaming_Ability
#include <roaming/Ability.h>
#endif
#ifndef INCLUDED_roaming_Tree
#include <roaming/Tree.h>
#endif
#ifndef INCLUDED_roaming_TreeAbility
#include <roaming/TreeAbility.h>
#endif
#ifndef INCLUDED_roaming_TreeIterator
#include <roaming/TreeIterator.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_b90d9f58746dd70c_38_new,"roaming.TreeIterator","new",0x09fd8df3,"roaming.TreeIterator.new","roaming/TreeIterator.hx",38,0x4eb1d9fc)
HX_LOCAL_STACK_FRAME(_hx_pos_b90d9f58746dd70c_19_hasNext,"roaming.TreeIterator","hasNext",0x09fa2880,"roaming.TreeIterator.hasNext","roaming/TreeIterator.hx",19,0x4eb1d9fc)
HX_LOCAL_STACK_FRAME(_hx_pos_b90d9f58746dd70c_28_next,"roaming.TreeIterator","next",0xb3dea800,"roaming.TreeIterator.next","roaming/TreeIterator.hx",28,0x4eb1d9fc)
namespace roaming{

void TreeIterator_obj::__construct( ::roaming::Tree tree){
            	HX_STACKFRAME(&_hx_pos_b90d9f58746dd70c_38_new)
HXLINE(  39)		this->i = (int)0;
HXLINE(  40)		this->j = (int)0;
HXLINE(  42)		this->tree = tree;
HXLINE(  43)		this->width = ( (int)(::XMLUtils_obj::getGlobal(HX_("tree",5e,99,03,4d),HX_("width",06,b6,62,ca),(int)1)) );
HXLINE(  44)		this->height = ( (int)(::XMLUtils_obj::getGlobal(HX_("tree",5e,99,03,4d),HX_("height",e7,07,4c,02),(int)1)) );
            	}

Dynamic TreeIterator_obj::__CreateEmpty() { return new TreeIterator_obj; }

void *TreeIterator_obj::_hx_vtable = 0;

Dynamic TreeIterator_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< TreeIterator_obj > _hx_result = new TreeIterator_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool TreeIterator_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x403b62dd;
}

bool TreeIterator_obj::hasNext(){
            	HX_STACKFRAME(&_hx_pos_b90d9f58746dd70c_19_hasNext)
HXLINE(  20)		if ((this->j < this->width)) {
HXLINE(  21)			if ((this->i < this->height)) {
HXLINE(  22)				return true;
            			}
            		}
HXLINE(  23)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TreeIterator_obj,hasNext,return )

 ::roaming::TreeAbility TreeIterator_obj::next(){
            	HX_STACKFRAME(&_hx_pos_b90d9f58746dd70c_28_next)
HXDLIN(  28)		int _hx_tmp = this->j;
HXDLIN(  28)		if ((_hx_tmp == (this->width - (int)1))) {
HXLINE(  30)			this->j = (int)0;
HXLINE(  31)			 ::roaming::Tree _hx_tmp1 = this->tree;
HXDLIN(  31)			int _hx_tmp2 = this->i++;
HXDLIN(  31)			return _hx_tmp1->get(_hx_tmp2,(this->width - (int)1));
            		}
            		else {
HXLINE(  34)			 ::roaming::Tree _hx_tmp3 = this->tree;
HXDLIN(  34)			int _hx_tmp4 = this->i;
HXDLIN(  34)			return _hx_tmp3->get(_hx_tmp4,this->j++);
            		}
HXLINE(  28)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(TreeIterator_obj,next,return )


hx::ObjectPtr< TreeIterator_obj > TreeIterator_obj::__new( ::roaming::Tree tree) {
	hx::ObjectPtr< TreeIterator_obj > __this = new TreeIterator_obj();
	__this->__construct(tree);
	return __this;
}

hx::ObjectPtr< TreeIterator_obj > TreeIterator_obj::__alloc(hx::Ctx *_hx_ctx, ::roaming::Tree tree) {
	TreeIterator_obj *__this = (TreeIterator_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(TreeIterator_obj), true, "roaming.TreeIterator"));
	*(void **)__this = TreeIterator_obj::_hx_vtable;
	__this->__construct(tree);
	return __this;
}

TreeIterator_obj::TreeIterator_obj()
{
}

void TreeIterator_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(TreeIterator);
	HX_MARK_MEMBER_NAME(tree,"tree");
	HX_MARK_MEMBER_NAME(width,"width");
	HX_MARK_MEMBER_NAME(height,"height");
	HX_MARK_MEMBER_NAME(i,"i");
	HX_MARK_MEMBER_NAME(j,"j");
	HX_MARK_END_CLASS();
}

void TreeIterator_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(tree,"tree");
	HX_VISIT_MEMBER_NAME(width,"width");
	HX_VISIT_MEMBER_NAME(height,"height");
	HX_VISIT_MEMBER_NAME(i,"i");
	HX_VISIT_MEMBER_NAME(j,"j");
}

hx::Val TreeIterator_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"i") ) { return hx::Val( i ); }
		if (HX_FIELD_EQ(inName,"j") ) { return hx::Val( j ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"tree") ) { return hx::Val( tree ); }
		if (HX_FIELD_EQ(inName,"next") ) { return hx::Val( next_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"width") ) { return hx::Val( width ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"height") ) { return hx::Val( height ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"hasNext") ) { return hx::Val( hasNext_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val TreeIterator_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"i") ) { i=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"j") ) { j=inValue.Cast< int >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"tree") ) { tree=inValue.Cast<  ::roaming::Tree >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"width") ) { width=inValue.Cast< int >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"height") ) { height=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void TreeIterator_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("tree","\x5e","\x99","\x03","\x4d"));
	outFields->push(HX_HCSTRING("width","\x06","\xb6","\x62","\xca"));
	outFields->push(HX_HCSTRING("height","\xe7","\x07","\x4c","\x02"));
	outFields->push(HX_HCSTRING("i","\x69","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("j","\x6a","\x00","\x00","\x00"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo TreeIterator_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::roaming::Tree*/ ,(int)offsetof(TreeIterator_obj,tree),HX_HCSTRING("tree","\x5e","\x99","\x03","\x4d")},
	{hx::fsInt,(int)offsetof(TreeIterator_obj,width),HX_HCSTRING("width","\x06","\xb6","\x62","\xca")},
	{hx::fsInt,(int)offsetof(TreeIterator_obj,height),HX_HCSTRING("height","\xe7","\x07","\x4c","\x02")},
	{hx::fsInt,(int)offsetof(TreeIterator_obj,i),HX_HCSTRING("i","\x69","\x00","\x00","\x00")},
	{hx::fsInt,(int)offsetof(TreeIterator_obj,j),HX_HCSTRING("j","\x6a","\x00","\x00","\x00")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *TreeIterator_obj_sStaticStorageInfo = 0;
#endif

static ::String TreeIterator_obj_sMemberFields[] = {
	HX_HCSTRING("tree","\x5e","\x99","\x03","\x4d"),
	HX_HCSTRING("width","\x06","\xb6","\x62","\xca"),
	HX_HCSTRING("height","\xe7","\x07","\x4c","\x02"),
	HX_HCSTRING("i","\x69","\x00","\x00","\x00"),
	HX_HCSTRING("j","\x6a","\x00","\x00","\x00"),
	HX_HCSTRING("hasNext","\x6d","\xa5","\x46","\x18"),
	HX_HCSTRING("next","\xf3","\x84","\x02","\x49"),
	::String(null()) };

static void TreeIterator_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(TreeIterator_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void TreeIterator_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(TreeIterator_obj::__mClass,"__mClass");
};

#endif

hx::Class TreeIterator_obj::__mClass;

void TreeIterator_obj::__register()
{
	hx::Object *dummy = new TreeIterator_obj;
	TreeIterator_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("roaming.TreeIterator","\x81","\x18","\x25","\x90");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = TreeIterator_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(TreeIterator_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< TreeIterator_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = TreeIterator_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TreeIterator_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TreeIterator_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace roaming
