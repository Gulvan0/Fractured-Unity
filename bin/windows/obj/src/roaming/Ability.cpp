// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_ID
#include <ID.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_hxassert_Assert
#include <hxassert/Assert.h>
#endif
#ifndef INCLUDED_roaming_Ability
#include <roaming/Ability.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_b0dd18c197ef039f_34_new,"roaming.Ability","new",0x7ec4ee27,"roaming.Ability.new","roaming/Ability.hx",34,0x7966be6a)
static const ::String _hx_array_data_49c34eb5_1[] = {
	HX_("Assertion failed: maxLvl > 0",2d,c3,69,21),
};
HX_LOCAL_STACK_FRAME(_hx_pos_b0dd18c197ef039f_17_learn,"roaming.Ability","learn",0x459c8f0b,"roaming.Ability.learn","roaming/Ability.hx",17,0x7966be6a)
HX_LOCAL_STACK_FRAME(_hx_pos_b0dd18c197ef039f_27_reset,"roaming.Ability","reset",0xba11a756,"roaming.Ability.reset","roaming/Ability.hx",27,0x7966be6a)
namespace roaming{

void Ability_obj::__construct( ::ID id,int maxLvl){
            	HX_STACKFRAME(&_hx_pos_b0dd18c197ef039f_34_new)
HXLINE( 151)		if ((false == (maxLvl > (int)0))) {
HXLINE(  35)			::hxassert::Assert_obj::throwAssertionFailureError(::Array_obj< ::String >::fromData( _hx_array_data_49c34eb5_1,1),hx::SourceInfo(HX_("Ability.hx",74,cb,23,aa),35,HX_("roaming.Ability",b5,4e,c3,49),HX_("new",60,d0,53,00)));
            		}
HXLINE(  37)		this->id = id;
HXLINE(  38)		this->maxLvl = maxLvl;
HXLINE(  39)		this->currentLvl = (int)0;
            	}

Dynamic Ability_obj::__CreateEmpty() { return new Ability_obj; }

void *Ability_obj::_hx_vtable = 0;

Dynamic Ability_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Ability_obj > _hx_result = new Ability_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool Ability_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x018921d9;
}

bool Ability_obj::learn(){
            	HX_STACKFRAME(&_hx_pos_b0dd18c197ef039f_17_learn)
HXLINE(  18)		if ((this->currentLvl >= this->maxLvl)) {
HXLINE(  19)			return false;
            		}
HXLINE(  21)		this->currentLvl++;
HXLINE(  22)		 ::Dynamic _hx_tmp = ::haxe::Log_obj::trace;
HXDLIN(  22)		::String _hx_tmp1 = ((HX_("Learning ability ",98,a1,ac,ae) + ::Std_obj::string(this->id)) + HX_(" (",08,1c,00,00));
HXDLIN(  22)		_hx_tmp(((((((_hx_tmp1 + (this->currentLvl - (int)1)) + HX_("->",71,27,00,00)) + this->currentLvl) + HX_("/",2f,00,00,00)) + this->maxLvl) + HX_(")",29,00,00,00)),hx::SourceInfo(HX_("Ability.hx",74,cb,23,aa),22,HX_("roaming.Ability",b5,4e,c3,49),HX_("learn",84,31,53,72)));
HXLINE(  23)		return true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Ability_obj,learn,return )

int Ability_obj::reset(){
            	HX_STACKFRAME(&_hx_pos_b0dd18c197ef039f_27_reset)
HXLINE(  28)		int lvl = this->currentLvl;
HXLINE(  29)		this->currentLvl = (int)0;
HXLINE(  30)		return lvl;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Ability_obj,reset,return )


hx::ObjectPtr< Ability_obj > Ability_obj::__new( ::ID id,int maxLvl) {
	hx::ObjectPtr< Ability_obj > __this = new Ability_obj();
	__this->__construct(id,maxLvl);
	return __this;
}

hx::ObjectPtr< Ability_obj > Ability_obj::__alloc(hx::Ctx *_hx_ctx, ::ID id,int maxLvl) {
	Ability_obj *__this = (Ability_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Ability_obj), true, "roaming.Ability"));
	*(void **)__this = Ability_obj::_hx_vtable;
	__this->__construct(id,maxLvl);
	return __this;
}

Ability_obj::Ability_obj()
{
}

void Ability_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Ability);
	HX_MARK_MEMBER_NAME(id,"id");
	HX_MARK_MEMBER_NAME(maxLvl,"maxLvl");
	HX_MARK_MEMBER_NAME(currentLvl,"currentLvl");
	HX_MARK_END_CLASS();
}

void Ability_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(id,"id");
	HX_VISIT_MEMBER_NAME(maxLvl,"maxLvl");
	HX_VISIT_MEMBER_NAME(currentLvl,"currentLvl");
}

hx::Val Ability_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"id") ) { return hx::Val( id ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"learn") ) { return hx::Val( learn_dyn() ); }
		if (HX_FIELD_EQ(inName,"reset") ) { return hx::Val( reset_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"maxLvl") ) { return hx::Val( maxLvl ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"currentLvl") ) { return hx::Val( currentLvl ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Ability_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"id") ) { id=inValue.Cast<  ::ID >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"maxLvl") ) { maxLvl=inValue.Cast< int >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"currentLvl") ) { currentLvl=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Ability_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("id","\xdb","\x5b","\x00","\x00"));
	outFields->push(HX_HCSTRING("maxLvl","\x5e","\x46","\x50","\xbe"));
	outFields->push(HX_HCSTRING("currentLvl","\xe9","\x1f","\x2d","\xc7"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Ability_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::ID*/ ,(int)offsetof(Ability_obj,id),HX_HCSTRING("id","\xdb","\x5b","\x00","\x00")},
	{hx::fsInt,(int)offsetof(Ability_obj,maxLvl),HX_HCSTRING("maxLvl","\x5e","\x46","\x50","\xbe")},
	{hx::fsInt,(int)offsetof(Ability_obj,currentLvl),HX_HCSTRING("currentLvl","\xe9","\x1f","\x2d","\xc7")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Ability_obj_sStaticStorageInfo = 0;
#endif

static ::String Ability_obj_sMemberFields[] = {
	HX_HCSTRING("id","\xdb","\x5b","\x00","\x00"),
	HX_HCSTRING("maxLvl","\x5e","\x46","\x50","\xbe"),
	HX_HCSTRING("currentLvl","\xe9","\x1f","\x2d","\xc7"),
	HX_HCSTRING("learn","\x84","\x31","\x53","\x72"),
	HX_HCSTRING("reset","\xcf","\x49","\xc8","\xe6"),
	::String(null()) };

static void Ability_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Ability_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Ability_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Ability_obj::__mClass,"__mClass");
};

#endif

hx::Class Ability_obj::__mClass;

void Ability_obj::__register()
{
	hx::Object *dummy = new Ability_obj;
	Ability_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("roaming.Ability","\xb5","\x4e","\xc3","\x49");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Ability_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Ability_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Ability_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Ability_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Ability_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Ability_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace roaming
