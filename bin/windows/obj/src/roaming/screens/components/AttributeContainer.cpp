// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_AddFlow
#include <AddFlow.h>
#endif
#ifndef INCLUDED_AddIntellect
#include <AddIntellect.h>
#endif
#ifndef INCLUDED_AddStrength
#include <AddStrength.h>
#endif
#ifndef INCLUDED_Assets
#include <Assets.h>
#endif
#ifndef INCLUDED_ID
#include <ID.h>
#endif
#ifndef INCLUDED_Main
#include <Main.h>
#endif
#ifndef INCLUDED_MathUtils
#include <MathUtils.h>
#endif
#ifndef INCLUDED_SSprite
#include <SSprite.h>
#endif
#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_haxe_ds_BalancedTree
#include <haxe/ds/BalancedTree.h>
#endif
#ifndef INCLUDED_haxe_ds_EnumValueMap
#include <haxe/ds/EnumValueMap.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_MovieClip
#include <openfl/display/MovieClip.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_geom_Point
#include <openfl/geom/Point.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif
#ifndef INCLUDED_openfl_text_TextField
#include <openfl/text/TextField.h>
#endif
#ifndef INCLUDED_openfl_text_TextFormat
#include <openfl/text/TextFormat.h>
#endif
#ifndef INCLUDED_roaming_Player
#include <roaming/Player.h>
#endif
#ifndef INCLUDED_roaming_Unit
#include <roaming/Unit.h>
#endif
#ifndef INCLUDED_roaming_enums_Attribute
#include <roaming/enums/Attribute.h>
#endif
#ifndef INCLUDED_roaming_screens_ISAbility
#include <roaming/screens/ISAbility.h>
#endif
#ifndef INCLUDED_roaming_screens_components_AttributeContainer
#include <roaming/screens/components/AttributeContainer.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_94c61c434c0d259b_15_new,"roaming.screens.components.AttributeContainer","new",0xa4ae8eb3,"roaming.screens.components.AttributeContainer.new","roaming/screens/components/AttributeContainer.hx",15,0x1e98037e)
HX_LOCAL_STACK_FRAME(_hx_pos_94c61c434c0d259b_47_createTF,"roaming.screens.components.AttributeContainer","createTF",0x7f87dc3b,"roaming.screens.components.AttributeContainer.createTF","roaming/screens/components/AttributeContainer.hx",47,0x1e98037e)
HX_LOCAL_STACK_FRAME(_hx_pos_94c61c434c0d259b_59_updateValue,"roaming.screens.components.AttributeContainer","updateValue",0x35deb1fb,"roaming.screens.components.AttributeContainer.updateValue","roaming/screens/components/AttributeContainer.hx",59,0x1e98037e)
HX_LOCAL_STACK_FRAME(_hx_pos_94c61c434c0d259b_63_onClick,"roaming.screens.components.AttributeContainer","onClick",0xa46ffe7c,"roaming.screens.components.AttributeContainer.onClick","roaming/screens/components/AttributeContainer.hx",63,0x1e98037e)
HX_LOCAL_STACK_FRAME(_hx_pos_94c61c434c0d259b_77_identifyAttribute,"roaming.screens.components.AttributeContainer","identifyAttribute",0x39e29f03,"roaming.screens.components.AttributeContainer.identifyAttribute","roaming/screens/components/AttributeContainer.hx",77,0x1e98037e)
HX_LOCAL_STACK_FRAME(_hx_pos_94c61c434c0d259b_96_lineY,"roaming.screens.components.AttributeContainer","lineY",0xf44716f8,"roaming.screens.components.AttributeContainer.lineY","roaming/screens/components/AttributeContainer.hx",96,0x1e98037e)
namespace roaming{
namespace screens{
namespace components{

void AttributeContainer_obj::__construct(::Dynamic parent){
            	HX_GC_STACKFRAME(&_hx_pos_94c61c434c0d259b_15_new)
HXLINE(  92)		this->plusLineOffset = ((Float)5.5);
HXLINE(  91)		this->plusX = ((Float)382);
HXLINE(  90)		this->valueX = ((Float)328);
HXLINE(  89)		this->attributeX = ((Float)162);
HXLINE(  88)		this->playerIcon =  ::openfl::geom::Point_obj::__alloc( HX_CTX ,(int)0,(int)0);
HXLINE(  25)		 ::haxe::ds::EnumValueMap _g =  ::haxe::ds::EnumValueMap_obj::__alloc( HX_CTX );
HXDLIN(  25)		{
HXLINE(  25)			int _g1 = (int)0;
HXDLIN(  25)			::Array< ::Dynamic> _g2 = ::Type_obj::allEnums(hx::ClassOf< ::roaming::enums::Attribute >());
HXDLIN(  25)			while((_g1 < _g2->length)){
HXLINE(  25)				 ::roaming::enums::Attribute key = _g2->__get(_g1).StaticCast<  ::roaming::enums::Attribute >();
HXDLIN(  25)				_g1 = (_g1 + (int)1);
HXDLIN(  25)				_g->set(key,(::Main_obj::player->attribs->get(key) + HX_("",00,00,00,00)));
            			}
            		}
HXDLIN(  25)		this->attribValues = _g;
HXLINE(  24)		 ::haxe::ds::EnumValueMap _g3 =  ::haxe::ds::EnumValueMap_obj::__alloc( HX_CTX );
HXDLIN(  24)		_g3->set(::roaming::enums::Attribute_obj::Strength_dyn(),(int)16724736);
HXDLIN(  24)		_g3->set(::roaming::enums::Attribute_obj::Flow_dyn(),(int)10541070);
HXDLIN(  24)		_g3->set(::roaming::enums::Attribute_obj::Intellect_dyn(),(int)6684876);
HXDLIN(  24)		this->attribColors = _g3;
HXLINE(  23)		 ::haxe::ds::EnumValueMap _g4 =  ::haxe::ds::EnumValueMap_obj::__alloc( HX_CTX );
HXDLIN(  23)		_g4->set(::roaming::enums::Attribute_obj::Strength_dyn(),HX_("Strength",a1,8e,40,68));
HXDLIN(  23)		_g4->set(::roaming::enums::Attribute_obj::Flow_dyn(),HX_("Flow",0e,44,97,2e));
HXDLIN(  23)		_g4->set(::roaming::enums::Attribute_obj::Intellect_dyn(),HX_("Intellect",60,e7,3f,6b));
HXDLIN(  23)		this->attribNames = _g4;
HXLINE(  21)		 ::haxe::ds::EnumValueMap _g5 =  ::haxe::ds::EnumValueMap_obj::__alloc( HX_CTX );
HXDLIN(  21)		_g5->set(::roaming::enums::Attribute_obj::Strength_dyn(),( ( ::openfl::display::MovieClip)( ::AddStrength_obj::__alloc( HX_CTX )) ));
HXDLIN(  21)		_g5->set(::roaming::enums::Attribute_obj::Flow_dyn(),( ( ::openfl::display::MovieClip)( ::AddFlow_obj::__alloc( HX_CTX )) ));
HXDLIN(  21)		_g5->set(::roaming::enums::Attribute_obj::Intellect_dyn(),( ( ::openfl::display::MovieClip)( ::AddIntellect_obj::__alloc( HX_CTX )) ));
HXDLIN(  21)		this->addButtons = _g5;
HXLINE(  20)		this->values =  ::haxe::ds::EnumValueMap_obj::__alloc( HX_CTX );
HXLINE(  29)		super::__construct();
HXLINE(  30)		this->parentScreen = parent;
HXLINE(  32)		 ::openfl::display::MovieClip unit = ::Assets_obj::getUnit(::Main_obj::player->id);
HXLINE(  33)		Float _hx_tmp = (unit->get_width() * (int)233);
HXDLIN(  33)		unit->set_width(((Float)_hx_tmp / (Float)unit->get_height()));
HXLINE(  34)		unit->set_height((int)233);
HXLINE(  35)		this->add(unit,this->playerIcon->x,this->playerIcon->y);
HXLINE(  37)		{
HXLINE(  37)			int _g6 = (int)0;
HXDLIN(  37)			::Array< ::Dynamic> _g11 = ::Type_obj::allEnums(hx::ClassOf< ::roaming::enums::Attribute >());
HXDLIN(  37)			while((_g6 < _g11->length)){
HXLINE(  37)				 ::roaming::enums::Attribute a = _g11->__get(_g6).StaticCast<  ::roaming::enums::Attribute >();
HXDLIN(  37)				_g6 = (_g6 + (int)1);
HXLINE(  39)				::String _hx_tmp1 = ( (::String)(this->attribNames->get(a)) );
HXDLIN(  39)				 ::openfl::text::TextField _hx_tmp2 = this->createTF(_hx_tmp1,HX_("Eras Demi ITC",16,2b,be,60),(int)21,(int)100,this->attribColors->get(a),(int)1);
HXDLIN(  39)				Float _hx_tmp3 = this->attributeX;
HXDLIN(  39)				this->add(_hx_tmp2,_hx_tmp3,this->lineY(a));
HXLINE(  40)				{
HXLINE(  40)					::Dynamic this1 = this->values;
HXDLIN(  40)					 ::openfl::text::TextField v = this->createTF(( (::String)(this->attribValues->get(a)) ),HX_("Eras Demi ITC",16,2b,be,60),(int)21,(int)35,(int)0,(int)1);
HXDLIN(  40)					( ( ::haxe::ds::EnumValueMap)(this1) )->set(a,v);
            				}
HXLINE(  41)				 ::openfl::text::TextField _hx_tmp4 = this->values->get(a).StaticCast<  ::openfl::text::TextField >();
HXDLIN(  41)				Float _hx_tmp5 = this->valueX;
HXDLIN(  41)				this->add(_hx_tmp4,_hx_tmp5,this->lineY(a));
HXLINE(  42)				 ::openfl::display::MovieClip _hx_tmp6 = this->addButtons->get(a).StaticCast<  ::openfl::display::MovieClip >();
HXDLIN(  42)				Float _hx_tmp7 = this->plusX;
HXDLIN(  42)				Float _hx_tmp8 = this->lineY(a);
HXDLIN(  42)				this->add(_hx_tmp6,_hx_tmp7,(_hx_tmp8 + this->plusLineOffset));
            			}
            		}
            	}

Dynamic AttributeContainer_obj::__CreateEmpty() { return new AttributeContainer_obj; }

void *AttributeContainer_obj::_hx_vtable = 0;

Dynamic AttributeContainer_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< AttributeContainer_obj > _hx_result = new AttributeContainer_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool AttributeContainer_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x19c29573) {
		if (inClassId<=(int)0x0ddfced7) {
			if (inClassId<=(int)0x0204cc3d) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0204cc3d;
			} else {
				return inClassId==(int)0x0ddfced7;
			}
		} else {
			return inClassId==(int)0x17120186 || inClassId==(int)0x19c29573;
		}
	} else {
		if (inClassId<=(int)0x3f2b00af) {
			return inClassId==(int)0x1b123bf8 || inClassId==(int)0x3f2b00af;
		} else {
			return inClassId==(int)0x739fd0b8;
		}
	}
}

 ::openfl::text::TextField AttributeContainer_obj::createTF(::String text,::String font,int size,int width, ::Dynamic color, ::Dynamic spacing){
            	HX_GC_STACKFRAME(&_hx_pos_94c61c434c0d259b_47_createTF)
HXLINE(  48)		 ::openfl::text::TextField t =  ::openfl::text::TextField_obj::__alloc( HX_CTX );
HXLINE(  49)		 ::openfl::text::TextFormat format =  ::openfl::text::TextFormat_obj::__alloc( HX_CTX ,font,size,color,null(),null(),null(),null(),null(),null(),null(),null(),null(),null());
HXLINE(  50)		format->letterSpacing = spacing;
HXLINE(  51)		t->set_width(width);
HXLINE(  52)		t->set_text(text);
HXLINE(  53)		t->setTextFormat(format,null(),null());
HXLINE(  54)		return t;
            	}


HX_DEFINE_DYNAMIC_FUNC6(AttributeContainer_obj,createTF,return )

void AttributeContainer_obj::updateValue( ::roaming::enums::Attribute attrib){
            	HX_STACKFRAME(&_hx_pos_94c61c434c0d259b_59_updateValue)
HXDLIN(  59)		 ::openfl::text::TextField _hx_tmp = this->values->get(attrib).StaticCast<  ::openfl::text::TextField >();
HXDLIN(  59)		_hx_tmp->set_text((::Main_obj::player->attribs->get(attrib) + HX_("",00,00,00,00)));
            	}


HX_DEFINE_DYNAMIC_FUNC1(AttributeContainer_obj,updateValue,(void))

void AttributeContainer_obj::onClick( ::openfl::geom::Point localPoint){
            	HX_STACKFRAME(&_hx_pos_94c61c434c0d259b_63_onClick)
HXLINE(  64)		::haxe::Log_obj::trace(HX_("Attributes recieved click",9a,a2,c7,4c),hx::SourceInfo(HX_("AttributeContainer.hx",39,72,09,b9),64,HX_("roaming.screens.components.AttributeContainer",41,b9,96,f4),HX_("onClick",a9,1a,9c,de)));
HXLINE(  65)		 ::roaming::enums::Attribute attrib = this->identifyAttribute(localPoint);
HXLINE(  66)		if (hx::IsNull( attrib )) {
HXLINE(  67)			return;
            		}
HXLINE(  69)		if (::Main_obj::player->increment(attrib)) {
HXLINE(  70)			::roaming::screens::ISAbility_obj::power(this->parentScreen,attrib);
            		}
            		else {
HXLINE(  72)			::haxe::Log_obj::trace(HX_("Not enough attribute points",ea,d3,97,a6),hx::SourceInfo(HX_("AttributeContainer.hx",39,72,09,b9),72,HX_("roaming.screens.components.AttributeContainer",41,b9,96,f4),HX_("onClick",a9,1a,9c,de)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(AttributeContainer_obj,onClick,(void))

 ::roaming::enums::Attribute AttributeContainer_obj::identifyAttribute( ::openfl::geom::Point localClickPoint){
            	HX_STACKFRAME(&_hx_pos_94c61c434c0d259b_77_identifyAttribute)
HXLINE(  78)		Float localClickPoint1 = localClickPoint->x;
HXDLIN(  78)		Float _hx_tmp = this->plusX;
HXDLIN(  78)		Float _hx_tmp1 = this->plusX;
HXDLIN(  78)		if (::MathUtils_obj::inRange(localClickPoint1,_hx_tmp,(_hx_tmp1 + this->addButtons->get(::roaming::enums::Attribute_obj::Strength_dyn()).StaticCast<  ::openfl::display::MovieClip >()->get_width()),null(),null())) {
HXLINE(  79)			Float localClickPoint2 = localClickPoint->y;
HXDLIN(  79)			Float _hx_tmp2 = this->lineY(::roaming::enums::Attribute_obj::Strength_dyn());
HXDLIN(  79)			Float _hx_tmp3 = ((int)2 * this->lineY(::roaming::enums::Attribute_obj::Intellect_dyn()));
HXDLIN(  79)			if (::MathUtils_obj::inRange(localClickPoint2,_hx_tmp2,(_hx_tmp3 - this->lineY(::roaming::enums::Attribute_obj::Flow_dyn())),null(),null())) {
HXLINE(  80)				int _g = (int)0;
HXDLIN(  80)				::Array< ::Dynamic> _g1 = ::Type_obj::allEnums(hx::ClassOf< ::roaming::enums::Attribute >());
HXDLIN(  80)				while((_g < _g1->length)){
HXLINE(  80)					 ::roaming::enums::Attribute attrib = _g1->__get(_g).StaticCast<  ::roaming::enums::Attribute >();
HXDLIN(  80)					_g = (_g + (int)1);
HXLINE(  81)					 ::openfl::geom::Rectangle field = this->addButtons->get(attrib).StaticCast<  ::openfl::display::MovieClip >()->getRect(hx::ObjectPtr<OBJ_>(this));
HXDLIN(  81)					bool _hx_tmp4;
HXDLIN(  81)					bool _hx_tmp5;
HXDLIN(  81)					bool _hx_tmp6;
HXDLIN(  81)					if ((localClickPoint->x >= field->x)) {
HXLINE(  81)						Float localClickPoint3 = localClickPoint->x;
HXDLIN(  81)						_hx_tmp6 = (localClickPoint3 <= (field->x + field->width));
            					}
            					else {
HXLINE(  81)						_hx_tmp6 = false;
            					}
HXDLIN(  81)					if (_hx_tmp6) {
HXLINE(  81)						if ((localClickPoint->y >= field->y)) {
HXLINE(  81)							Float localClickPoint4 = localClickPoint->y;
HXDLIN(  81)							_hx_tmp5 = (localClickPoint4 <= (field->y + field->height));
            						}
            						else {
HXLINE(  81)							_hx_tmp5 = false;
            						}
            					}
            					else {
HXLINE(  81)						_hx_tmp5 = false;
            					}
HXDLIN(  81)					if (_hx_tmp5) {
HXLINE(  81)						_hx_tmp4 = true;
            					}
            					else {
HXLINE(  81)						_hx_tmp4 = false;
            					}
HXDLIN(  81)					if (_hx_tmp4) {
HXLINE(  82)						return attrib;
            					}
            				}
            			}
            		}
HXLINE(  83)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(AttributeContainer_obj,identifyAttribute,return )

Float AttributeContainer_obj::lineY( ::roaming::enums::Attribute a){
            	HX_STACKFRAME(&_hx_pos_94c61c434c0d259b_96_lineY)
HXDLIN(  96)		switch((int)(_hx_getEnumValueIndex(a))){
            			case (int)0: {
HXLINE(  98)				return (int)33;
            			}
            			break;
            			case (int)1: {
HXLINE(  99)				return (int)79;
            			}
            			break;
            			case (int)2: {
HXLINE( 100)				return (int)125;
            			}
            			break;
            		}
HXLINE(  96)		return ((Float)0.);
            	}


HX_DEFINE_DYNAMIC_FUNC1(AttributeContainer_obj,lineY,return )


hx::ObjectPtr< AttributeContainer_obj > AttributeContainer_obj::__new(::Dynamic parent) {
	hx::ObjectPtr< AttributeContainer_obj > __this = new AttributeContainer_obj();
	__this->__construct(parent);
	return __this;
}

hx::ObjectPtr< AttributeContainer_obj > AttributeContainer_obj::__alloc(hx::Ctx *_hx_ctx,::Dynamic parent) {
	AttributeContainer_obj *__this = (AttributeContainer_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(AttributeContainer_obj), true, "roaming.screens.components.AttributeContainer"));
	*(void **)__this = AttributeContainer_obj::_hx_vtable;
	__this->__construct(parent);
	return __this;
}

AttributeContainer_obj::AttributeContainer_obj()
{
}

void AttributeContainer_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(AttributeContainer);
	HX_MARK_MEMBER_NAME(parentScreen,"parentScreen");
	HX_MARK_MEMBER_NAME(values,"values");
	HX_MARK_MEMBER_NAME(addButtons,"addButtons");
	HX_MARK_MEMBER_NAME(attribNames,"attribNames");
	HX_MARK_MEMBER_NAME(attribColors,"attribColors");
	HX_MARK_MEMBER_NAME(attribValues,"attribValues");
	HX_MARK_MEMBER_NAME(playerIcon,"playerIcon");
	HX_MARK_MEMBER_NAME(attributeX,"attributeX");
	HX_MARK_MEMBER_NAME(valueX,"valueX");
	HX_MARK_MEMBER_NAME(plusX,"plusX");
	HX_MARK_MEMBER_NAME(plusLineOffset,"plusLineOffset");
	 ::openfl::display::Sprite_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void AttributeContainer_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(parentScreen,"parentScreen");
	HX_VISIT_MEMBER_NAME(values,"values");
	HX_VISIT_MEMBER_NAME(addButtons,"addButtons");
	HX_VISIT_MEMBER_NAME(attribNames,"attribNames");
	HX_VISIT_MEMBER_NAME(attribColors,"attribColors");
	HX_VISIT_MEMBER_NAME(attribValues,"attribValues");
	HX_VISIT_MEMBER_NAME(playerIcon,"playerIcon");
	HX_VISIT_MEMBER_NAME(attributeX,"attributeX");
	HX_VISIT_MEMBER_NAME(valueX,"valueX");
	HX_VISIT_MEMBER_NAME(plusX,"plusX");
	HX_VISIT_MEMBER_NAME(plusLineOffset,"plusLineOffset");
	 ::openfl::display::Sprite_obj::__Visit(HX_VISIT_ARG);
}

hx::Val AttributeContainer_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"plusX") ) { return hx::Val( plusX ); }
		if (HX_FIELD_EQ(inName,"lineY") ) { return hx::Val( lineY_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"values") ) { return hx::Val( values ); }
		if (HX_FIELD_EQ(inName,"valueX") ) { return hx::Val( valueX ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"onClick") ) { return hx::Val( onClick_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"createTF") ) { return hx::Val( createTF_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"addButtons") ) { return hx::Val( addButtons ); }
		if (HX_FIELD_EQ(inName,"playerIcon") ) { return hx::Val( playerIcon ); }
		if (HX_FIELD_EQ(inName,"attributeX") ) { return hx::Val( attributeX ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"attribNames") ) { return hx::Val( attribNames ); }
		if (HX_FIELD_EQ(inName,"updateValue") ) { return hx::Val( updateValue_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"parentScreen") ) { return hx::Val( parentScreen ); }
		if (HX_FIELD_EQ(inName,"attribColors") ) { return hx::Val( attribColors ); }
		if (HX_FIELD_EQ(inName,"attribValues") ) { return hx::Val( attribValues ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"plusLineOffset") ) { return hx::Val( plusLineOffset ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"identifyAttribute") ) { return hx::Val( identifyAttribute_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val AttributeContainer_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"plusX") ) { plusX=inValue.Cast< Float >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"values") ) { values=inValue.Cast<  ::haxe::ds::EnumValueMap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"valueX") ) { valueX=inValue.Cast< Float >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"addButtons") ) { addButtons=inValue.Cast<  ::haxe::ds::EnumValueMap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"playerIcon") ) { playerIcon=inValue.Cast<  ::openfl::geom::Point >(); return inValue; }
		if (HX_FIELD_EQ(inName,"attributeX") ) { attributeX=inValue.Cast< Float >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"attribNames") ) { attribNames=inValue.Cast<  ::haxe::ds::EnumValueMap >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"parentScreen") ) { parentScreen=inValue.Cast< ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"attribColors") ) { attribColors=inValue.Cast<  ::haxe::ds::EnumValueMap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"attribValues") ) { attribValues=inValue.Cast<  ::haxe::ds::EnumValueMap >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"plusLineOffset") ) { plusLineOffset=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void AttributeContainer_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("parentScreen","\x36","\xf0","\xc6","\x59"));
	outFields->push(HX_HCSTRING("values","\xe2","\x03","\xb7","\x4f"));
	outFields->push(HX_HCSTRING("addButtons","\x20","\x7e","\xff","\x31"));
	outFields->push(HX_HCSTRING("attribNames","\x1e","\x6c","\xd8","\x6a"));
	outFields->push(HX_HCSTRING("attribColors","\x9a","\xb4","\x93","\xbb"));
	outFields->push(HX_HCSTRING("attribValues","\xcc","\xf2","\xc3","\x44"));
	outFields->push(HX_HCSTRING("playerIcon","\x7a","\xc3","\x74","\xa8"));
	outFields->push(HX_HCSTRING("attributeX","\xbc","\xa8","\x71","\x97"));
	outFields->push(HX_HCSTRING("valueX","\xc7","\x03","\xb7","\x4f"));
	outFields->push(HX_HCSTRING("plusX","\xbe","\x2f","\x9d","\xc4"));
	outFields->push(HX_HCSTRING("plusLineOffset","\xa1","\x4a","\x09","\xb5"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo AttributeContainer_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::roaming::screens::ISAbility*/ ,(int)offsetof(AttributeContainer_obj,parentScreen),HX_HCSTRING("parentScreen","\x36","\xf0","\xc6","\x59")},
	{hx::fsObject /*::haxe::ds::EnumValueMap*/ ,(int)offsetof(AttributeContainer_obj,values),HX_HCSTRING("values","\xe2","\x03","\xb7","\x4f")},
	{hx::fsObject /*::haxe::ds::EnumValueMap*/ ,(int)offsetof(AttributeContainer_obj,addButtons),HX_HCSTRING("addButtons","\x20","\x7e","\xff","\x31")},
	{hx::fsObject /*::haxe::ds::EnumValueMap*/ ,(int)offsetof(AttributeContainer_obj,attribNames),HX_HCSTRING("attribNames","\x1e","\x6c","\xd8","\x6a")},
	{hx::fsObject /*::haxe::ds::EnumValueMap*/ ,(int)offsetof(AttributeContainer_obj,attribColors),HX_HCSTRING("attribColors","\x9a","\xb4","\x93","\xbb")},
	{hx::fsObject /*::haxe::ds::EnumValueMap*/ ,(int)offsetof(AttributeContainer_obj,attribValues),HX_HCSTRING("attribValues","\xcc","\xf2","\xc3","\x44")},
	{hx::fsObject /*::openfl::geom::Point*/ ,(int)offsetof(AttributeContainer_obj,playerIcon),HX_HCSTRING("playerIcon","\x7a","\xc3","\x74","\xa8")},
	{hx::fsFloat,(int)offsetof(AttributeContainer_obj,attributeX),HX_HCSTRING("attributeX","\xbc","\xa8","\x71","\x97")},
	{hx::fsFloat,(int)offsetof(AttributeContainer_obj,valueX),HX_HCSTRING("valueX","\xc7","\x03","\xb7","\x4f")},
	{hx::fsFloat,(int)offsetof(AttributeContainer_obj,plusX),HX_HCSTRING("plusX","\xbe","\x2f","\x9d","\xc4")},
	{hx::fsFloat,(int)offsetof(AttributeContainer_obj,plusLineOffset),HX_HCSTRING("plusLineOffset","\xa1","\x4a","\x09","\xb5")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *AttributeContainer_obj_sStaticStorageInfo = 0;
#endif

static ::String AttributeContainer_obj_sMemberFields[] = {
	HX_HCSTRING("parentScreen","\x36","\xf0","\xc6","\x59"),
	HX_HCSTRING("values","\xe2","\x03","\xb7","\x4f"),
	HX_HCSTRING("addButtons","\x20","\x7e","\xff","\x31"),
	HX_HCSTRING("attribNames","\x1e","\x6c","\xd8","\x6a"),
	HX_HCSTRING("attribColors","\x9a","\xb4","\x93","\xbb"),
	HX_HCSTRING("attribValues","\xcc","\xf2","\xc3","\x44"),
	HX_HCSTRING("createTF","\x6e","\x67","\xf4","\x2b"),
	HX_HCSTRING("updateValue","\xa8","\xe8","\x50","\x17"),
	HX_HCSTRING("onClick","\xa9","\x1a","\x9c","\xde"),
	HX_HCSTRING("identifyAttribute","\x70","\x95","\xe2","\x5d"),
	HX_HCSTRING("playerIcon","\x7a","\xc3","\x74","\xa8"),
	HX_HCSTRING("attributeX","\xbc","\xa8","\x71","\x97"),
	HX_HCSTRING("valueX","\xc7","\x03","\xb7","\x4f"),
	HX_HCSTRING("plusX","\xbe","\x2f","\x9d","\xc4"),
	HX_HCSTRING("plusLineOffset","\xa1","\x4a","\x09","\xb5"),
	HX_HCSTRING("lineY","\xe5","\xdd","\x01","\x75"),
	::String(null()) };

static void AttributeContainer_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(AttributeContainer_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void AttributeContainer_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(AttributeContainer_obj::__mClass,"__mClass");
};

#endif

hx::Class AttributeContainer_obj::__mClass;

void AttributeContainer_obj::__register()
{
	hx::Object *dummy = new AttributeContainer_obj;
	AttributeContainer_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("roaming.screens.components.AttributeContainer","\x41","\xb9","\x96","\xf4");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = AttributeContainer_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(AttributeContainer_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< AttributeContainer_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = AttributeContainer_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = AttributeContainer_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = AttributeContainer_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace roaming
} // end namespace screens
} // end namespace components
