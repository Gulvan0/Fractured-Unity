// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_Assets
#include <Assets.h>
#endif
#ifndef INCLUDED_ID
#include <ID.h>
#endif
#ifndef INCLUDED_Main
#include <Main.h>
#endif
#ifndef INCLUDED_MathUtils
#include <MathUtils.h>
#endif
#ifndef INCLUDED_SSprite
#include <SSprite.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_hxassert_Assert
#include <hxassert/Assert.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_MovieClip
#include <openfl/display/MovieClip.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_geom_Point
#include <openfl/geom/Point.h>
#endif
#ifndef INCLUDED_roaming_Player
#include <roaming/Player.h>
#endif
#ifndef INCLUDED_roaming_Unit
#include <roaming/Unit.h>
#endif
#ifndef INCLUDED_roaming_screens_ISAbility
#include <roaming/screens/ISAbility.h>
#endif
#ifndef INCLUDED_roaming_screens_Utils
#include <roaming/screens/Utils.h>
#endif
#ifndef INCLUDED_roaming_screens_components_WheelContainer
#include <roaming/screens/components/WheelContainer.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_40be5106b7e798d7_15_new,"roaming.screens.components.WheelContainer","new",0xb81a18d4,"roaming.screens.components.WheelContainer.new","roaming/screens/components/WheelContainer.hx",15,0xc70b53fd)
HX_LOCAL_STACK_FRAME(_hx_pos_40be5106b7e798d7_35_drawWheelAb,"roaming.screens.components.WheelContainer","drawWheelAb",0x061f2b2c,"roaming.screens.components.WheelContainer.drawWheelAb","roaming/screens/components/WheelContainer.hx",35,0xc70b53fd)
static const ::String _hx_array_data_0a485ee2_3[] = {
	HX_("Assertion failed: i.inRange(0, 8)",7f,90,11,0f),
};
HX_LOCAL_STACK_FRAME(_hx_pos_40be5106b7e798d7_43_redrawWheelAb,"roaming.screens.components.WheelContainer","redrawWheelAb",0xfbe45359,"roaming.screens.components.WheelContainer.redrawWheelAb","roaming/screens/components/WheelContainer.hx",43,0xc70b53fd)
static const ::String _hx_array_data_0a485ee2_5[] = {
	HX_("Assertion failed: i.inRange(0, 8)",7f,90,11,0f),
};
HX_LOCAL_STACK_FRAME(_hx_pos_40be5106b7e798d7_51_onClick,"roaming.screens.components.WheelContainer","onClick",0x95a1ad1d,"roaming.screens.components.WheelContainer.onClick","roaming/screens/components/WheelContainer.hx",51,0xc70b53fd)
HX_LOCAL_STACK_FRAME(_hx_pos_40be5106b7e798d7_61_identifyAbility,"roaming.screens.components.WheelContainer","identifyAbility",0xc674f072,"roaming.screens.components.WheelContainer.identifyAbility","roaming/screens/components/WheelContainer.hx",61,0xc70b53fd)
HX_LOCAL_STACK_FRAME(_hx_pos_40be5106b7e798d7_62_identifyAbility,"roaming.screens.components.WheelContainer","identifyAbility",0xc674f072,"roaming.screens.components.WheelContainer.identifyAbility","roaming/screens/components/WheelContainer.hx",62,0xc70b53fd)
HX_LOCAL_STACK_FRAME(_hx_pos_40be5106b7e798d7_74_wheelAbX,"roaming.screens.components.WheelContainer","wheelAbX",0xba1e9988,"roaming.screens.components.WheelContainer.wheelAbX","roaming/screens/components/WheelContainer.hx",74,0xc70b53fd)
HX_LOCAL_STACK_FRAME(_hx_pos_40be5106b7e798d7_79_wheelAbXOffset,"roaming.screens.components.WheelContainer","wheelAbXOffset",0x24d27b3b,"roaming.screens.components.WheelContainer.wheelAbXOffset","roaming/screens/components/WheelContainer.hx",79,0xc70b53fd)
namespace roaming{
namespace screens{
namespace components{

void WheelContainer_obj::__construct(::Dynamic parent){
            	HX_STACKFRAME(&_hx_pos_40be5106b7e798d7_15_new)
HXLINE(  70)		this->wheelAbWidth = ((Float)513);
HXLINE(  25)		super::__construct();
HXLINE(  26)		this->parentScreen = parent;
HXLINE(  27)		this->abRadius = ::roaming::screens::ISAbility_obj::getAbRadius(this->parentScreen);
HXLINE(  29)		this->wheel = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  30)		{
HXLINE(  30)			int _g = (int)0;
HXDLIN(  30)			while((_g < (int)8)){
HXLINE(  30)				_g = (_g + (int)1);
HXDLIN(  30)				int i = (_g - (int)1);
HXLINE(  31)				this->drawWheelAb(i);
            			}
            		}
            	}

Dynamic WheelContainer_obj::__CreateEmpty() { return new WheelContainer_obj; }

void *WheelContainer_obj::_hx_vtable = 0;

Dynamic WheelContainer_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< WheelContainer_obj > _hx_result = new WheelContainer_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool WheelContainer_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x1b123bf8) {
		if (inClassId<=(int)0x17120186) {
			if (inClassId<=(int)0x0ddfced7) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0ddfced7;
			} else {
				return inClassId==(int)0x17120186;
			}
		} else {
			return inClassId==(int)0x19c29573 || inClassId==(int)0x1b123bf8;
		}
	} else {
		if (inClassId<=(int)0x3f2b00af) {
			return inClassId==(int)0x3b90d3ea || inClassId==(int)0x3f2b00af;
		} else {
			return inClassId==(int)0x739fd0b8;
		}
	}
}

void WheelContainer_obj::drawWheelAb(int i){
            	HX_STACKFRAME(&_hx_pos_40be5106b7e798d7_35_drawWheelAb)
HXLINE( 151)		if ((false == ::MathUtils_obj::inRange(i,(int)0,(int)8,null(),null()))) {
HXLINE(  36)			::hxassert::Assert_obj::throwAssertionFailureError(::Array_obj< ::String >::fromData( _hx_array_data_0a485ee2_3,1),hx::SourceInfo(HX_("WheelContainer.hx",38,09,da,e2),36,HX_("roaming.screens.components.WheelContainer",e2,5e,48,0a),HX_("drawWheelAb",b8,4e,6d,9d)));
            		}
HXLINE(  37)		 ::ID id;
HXDLIN(  37)		if ((i < ::Main_obj::player->wheel->length)) {
HXLINE(  37)			id = ::Main_obj::player->wheel->__get(i).StaticCast<  ::ID >();
            		}
            		else {
HXLINE(  37)			id = ::ID_obj::EmptyAbility_dyn();
            		}
HXLINE(  38)		::Array< ::Dynamic> _hx_tmp = this->wheel;
HXDLIN(  38)		_hx_tmp[i] = ::roaming::screens::Utils_obj::squareToRound(::Assets_obj::getBattleAbility(id));
HXLINE(  39)		 ::openfl::display::MovieClip _hx_tmp1 = this->wheel->__get(i).StaticCast<  ::openfl::display::MovieClip >();
HXDLIN(  39)		this->add(_hx_tmp1,this->wheelAbX(i),(int)0);
            	}


HX_DEFINE_DYNAMIC_FUNC1(WheelContainer_obj,drawWheelAb,(void))

void WheelContainer_obj::redrawWheelAb(int i){
            	HX_STACKFRAME(&_hx_pos_40be5106b7e798d7_43_redrawWheelAb)
HXLINE(  44)		 ::Dynamic _hx_tmp = ::haxe::Log_obj::trace;
HXDLIN(  44)		_hx_tmp((HX_("ability redrawing: ",fb,7b,91,67) + i),hx::SourceInfo(HX_("WheelContainer.hx",38,09,da,e2),44,HX_("roaming.screens.components.WheelContainer",e2,5e,48,0a),HX_("redrawWheelAb",e5,71,ab,9d)));
HXLINE( 151)		if ((false == ::MathUtils_obj::inRange(i,(int)0,(int)8,null(),null()))) {
HXLINE(  45)			::hxassert::Assert_obj::throwAssertionFailureError(::Array_obj< ::String >::fromData( _hx_array_data_0a485ee2_5,1),hx::SourceInfo(HX_("WheelContainer.hx",38,09,da,e2),45,HX_("roaming.screens.components.WheelContainer",e2,5e,48,0a),HX_("redrawWheelAb",e5,71,ab,9d)));
            		}
HXLINE(  46)		this->remove(this->wheel->__get(i).StaticCast<  ::openfl::display::MovieClip >());
HXLINE(  47)		this->drawWheelAb(i);
            	}


HX_DEFINE_DYNAMIC_FUNC1(WheelContainer_obj,redrawWheelAb,(void))

void WheelContainer_obj::onClick( ::openfl::geom::Point localPoint){
            	HX_STACKFRAME(&_hx_pos_40be5106b7e798d7_51_onClick)
HXLINE(  52)		::haxe::Log_obj::trace(HX_("wheel recieved click",76,53,9a,b3),hx::SourceInfo(HX_("WheelContainer.hx",38,09,da,e2),52,HX_("roaming.screens.components.WheelContainer",e2,5e,48,0a),HX_("onClick",a9,1a,9c,de)));
HXLINE(  53)		int ab = this->identifyAbility(localPoint);
HXLINE(  54)		if ((ab == (int)-1)) {
HXLINE(  55)			return;
            		}
HXLINE(  57)		::roaming::screens::ISAbility_obj::splice(this->parentScreen,ab);
            	}


HX_DEFINE_DYNAMIC_FUNC1(WheelContainer_obj,onClick,(void))

int WheelContainer_obj::identifyAbility( ::openfl::geom::Point localClickPoint){
            	HX_GC_STACKFRAME(&_hx_pos_40be5106b7e798d7_61_identifyAbility)
HXLINE(  60)		 ::roaming::screens::components::WheelContainer _gthis = hx::ObjectPtr<OBJ_>(this);
HXLINE(  62)		{
            			HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0, ::roaming::screens::components::WheelContainer,_gthis) HXARGC(1)
            			Float _hx_run(int i){
            				HX_STACKFRAME(&_hx_pos_40be5106b7e798d7_62_identifyAbility)
HXLINE(  62)				Float _g11 = _gthis->wheelAbX(i);
HXDLIN(  62)				return (_g11 - _gthis->abRadius);
            			}
            			HX_END_LOCAL_FUNC1(return)

HXLINE(  62)			int _g = (int)0;
HXDLIN(  62)			::Array< int > _g1 = ::roaming::screens::Utils_obj::getClickCandidates( ::Dynamic(new _hx_Closure_0(_gthis)),(::Main_obj::player->wheel->length + (int)1),localClickPoint->x);
HXDLIN(  62)			while((_g < _g1->length)){
HXLINE(  62)				int i1 = _g1->__get(_g);
HXDLIN(  62)				_g = (_g + (int)1);
HXLINE(  63)				Float _hx_tmp = ::MathUtils_obj::distance(localClickPoint, ::openfl::geom::Point_obj::__alloc( HX_CTX ,this->wheelAbX(i1),(int)0));
HXDLIN(  63)				if ((_hx_tmp <= this->abRadius)) {
HXLINE(  64)					return i1;
            				}
            			}
            		}
HXLINE(  65)		return (int)-1;
            	}


HX_DEFINE_DYNAMIC_FUNC1(WheelContainer_obj,identifyAbility,return )

Float WheelContainer_obj::wheelAbX(int i){
            	HX_STACKFRAME(&_hx_pos_40be5106b7e798d7_74_wheelAbX)
HXDLIN(  74)		Float _hx_tmp = ((int)2 * this->abRadius);
HXDLIN(  74)		return ((_hx_tmp + this->wheelAbXOffset()) * i);
            	}


HX_DEFINE_DYNAMIC_FUNC1(WheelContainer_obj,wheelAbX,return )

Float WheelContainer_obj::wheelAbXOffset(){
            	HX_STACKFRAME(&_hx_pos_40be5106b7e798d7_79_wheelAbXOffset)
HXDLIN(  79)		Float _hx_tmp = this->wheelAbWidth;
HXDLIN(  79)		return ((Float)(_hx_tmp - (((int)2 * this->abRadius) * (int)7)) / (Float)(int)8);
            	}


HX_DEFINE_DYNAMIC_FUNC0(WheelContainer_obj,wheelAbXOffset,return )


hx::ObjectPtr< WheelContainer_obj > WheelContainer_obj::__new(::Dynamic parent) {
	hx::ObjectPtr< WheelContainer_obj > __this = new WheelContainer_obj();
	__this->__construct(parent);
	return __this;
}

hx::ObjectPtr< WheelContainer_obj > WheelContainer_obj::__alloc(hx::Ctx *_hx_ctx,::Dynamic parent) {
	WheelContainer_obj *__this = (WheelContainer_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(WheelContainer_obj), true, "roaming.screens.components.WheelContainer"));
	*(void **)__this = WheelContainer_obj::_hx_vtable;
	__this->__construct(parent);
	return __this;
}

WheelContainer_obj::WheelContainer_obj()
{
}

void WheelContainer_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(WheelContainer);
	HX_MARK_MEMBER_NAME(parentScreen,"parentScreen");
	HX_MARK_MEMBER_NAME(abRadius,"abRadius");
	HX_MARK_MEMBER_NAME(wheel,"wheel");
	HX_MARK_MEMBER_NAME(wheelAbWidth,"wheelAbWidth");
	 ::openfl::display::Sprite_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void WheelContainer_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(parentScreen,"parentScreen");
	HX_VISIT_MEMBER_NAME(abRadius,"abRadius");
	HX_VISIT_MEMBER_NAME(wheel,"wheel");
	HX_VISIT_MEMBER_NAME(wheelAbWidth,"wheelAbWidth");
	 ::openfl::display::Sprite_obj::__Visit(HX_VISIT_ARG);
}

hx::Val WheelContainer_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"wheel") ) { return hx::Val( wheel ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"onClick") ) { return hx::Val( onClick_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"abRadius") ) { return hx::Val( abRadius ); }
		if (HX_FIELD_EQ(inName,"wheelAbX") ) { return hx::Val( wheelAbX_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"drawWheelAb") ) { return hx::Val( drawWheelAb_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"parentScreen") ) { return hx::Val( parentScreen ); }
		if (HX_FIELD_EQ(inName,"wheelAbWidth") ) { return hx::Val( wheelAbWidth ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"redrawWheelAb") ) { return hx::Val( redrawWheelAb_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"wheelAbXOffset") ) { return hx::Val( wheelAbXOffset_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"identifyAbility") ) { return hx::Val( identifyAbility_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val WheelContainer_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"wheel") ) { wheel=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"abRadius") ) { abRadius=inValue.Cast< Float >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"parentScreen") ) { parentScreen=inValue.Cast< ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"wheelAbWidth") ) { wheelAbWidth=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void WheelContainer_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("parentScreen","\x36","\xf0","\xc6","\x59"));
	outFields->push(HX_HCSTRING("abRadius","\x13","\xf8","\xdf","\x7c"));
	outFields->push(HX_HCSTRING("wheel","\x9b","\x34","\xba","\xc9"));
	outFields->push(HX_HCSTRING("wheelAbWidth","\x0a","\x0e","\xbc","\x3d"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo WheelContainer_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::roaming::screens::ISAbility*/ ,(int)offsetof(WheelContainer_obj,parentScreen),HX_HCSTRING("parentScreen","\x36","\xf0","\xc6","\x59")},
	{hx::fsFloat,(int)offsetof(WheelContainer_obj,abRadius),HX_HCSTRING("abRadius","\x13","\xf8","\xdf","\x7c")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(WheelContainer_obj,wheel),HX_HCSTRING("wheel","\x9b","\x34","\xba","\xc9")},
	{hx::fsFloat,(int)offsetof(WheelContainer_obj,wheelAbWidth),HX_HCSTRING("wheelAbWidth","\x0a","\x0e","\xbc","\x3d")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *WheelContainer_obj_sStaticStorageInfo = 0;
#endif

static ::String WheelContainer_obj_sMemberFields[] = {
	HX_HCSTRING("parentScreen","\x36","\xf0","\xc6","\x59"),
	HX_HCSTRING("abRadius","\x13","\xf8","\xdf","\x7c"),
	HX_HCSTRING("wheel","\x9b","\x34","\xba","\xc9"),
	HX_HCSTRING("drawWheelAb","\xb8","\x4e","\x6d","\x9d"),
	HX_HCSTRING("redrawWheelAb","\xe5","\x71","\xab","\x9d"),
	HX_HCSTRING("onClick","\xa9","\x1a","\x9c","\xde"),
	HX_HCSTRING("identifyAbility","\xfe","\xc9","\x29","\xbf"),
	HX_HCSTRING("wheelAbWidth","\x0a","\x0e","\xbc","\x3d"),
	HX_HCSTRING("wheelAbX","\x7c","\x06","\x44","\x4c"),
	HX_HCSTRING("wheelAbXOffset","\x2f","\x17","\x46","\x11"),
	::String(null()) };

static void WheelContainer_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(WheelContainer_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void WheelContainer_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(WheelContainer_obj::__mClass,"__mClass");
};

#endif

hx::Class WheelContainer_obj::__mClass;

void WheelContainer_obj::__register()
{
	hx::Object *dummy = new WheelContainer_obj;
	WheelContainer_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("roaming.screens.components.WheelContainer","\xe2","\x5e","\x48","\x0a");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = WheelContainer_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(WheelContainer_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< WheelContainer_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = WheelContainer_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = WheelContainer_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = WheelContainer_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace roaming
} // end namespace screens
} // end namespace components
