// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_Main
#include <Main.h>
#endif
#ifndef INCLUDED_MathUtils
#include <MathUtils.h>
#endif
#ifndef INCLUDED_ReSpec
#include <ReSpec.h>
#endif
#ifndef INCLUDED_SSprite
#include <SSprite.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_MovieClip
#include <openfl/display/MovieClip.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_geom_Point
#include <openfl/geom/Point.h>
#endif
#ifndef INCLUDED_openfl_text_TextField
#include <openfl/text/TextField.h>
#endif
#ifndef INCLUDED_openfl_text_TextFormat
#include <openfl/text/TextFormat.h>
#endif
#ifndef INCLUDED_roaming_Player
#include <roaming/Player.h>
#endif
#ifndef INCLUDED_roaming_Unit
#include <roaming/Unit.h>
#endif
#ifndef INCLUDED_roaming_screens_ISAbility
#include <roaming/screens/ISAbility.h>
#endif
#ifndef INCLUDED_roaming_screens_components_PointsAndRespec
#include <roaming/screens/components/PointsAndRespec.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_e7a2c54ec8017cef_13_new,"roaming.screens.components.PointsAndRespec","new",0xd91389b8,"roaming.screens.components.PointsAndRespec.new","roaming/screens/components/PointsAndRespec.hx",13,0xc06ba2b7)
HX_LOCAL_STACK_FRAME(_hx_pos_e7a2c54ec8017cef_38_createTF,"roaming.screens.components.PointsAndRespec","createTF",0x73fdcf16,"roaming.screens.components.PointsAndRespec.createTF","roaming/screens/components/PointsAndRespec.hx",38,0xc06ba2b7)
HX_LOCAL_STACK_FRAME(_hx_pos_e7a2c54ec8017cef_55_updateAbpValue,"roaming.screens.components.PointsAndRespec","updateAbpValue",0x3b039553,"roaming.screens.components.PointsAndRespec.updateAbpValue","roaming/screens/components/PointsAndRespec.hx",55,0xc06ba2b7)
HX_LOCAL_STACK_FRAME(_hx_pos_e7a2c54ec8017cef_60_updateAttpValue,"roaming.screens.components.PointsAndRespec","updateAttpValue",0x1c93d5d1,"roaming.screens.components.PointsAndRespec.updateAttpValue","roaming/screens/components/PointsAndRespec.hx",60,0xc06ba2b7)
HX_LOCAL_STACK_FRAME(_hx_pos_e7a2c54ec8017cef_64_onClick,"roaming.screens.components.PointsAndRespec","onClick",0x4f6f6001,"roaming.screens.components.PointsAndRespec.onClick","roaming/screens/components/PointsAndRespec.hx",64,0xc06ba2b7)
namespace roaming{
namespace screens{
namespace components{

void PointsAndRespec_obj::__construct(::Dynamic parent){
            	HX_GC_STACKFRAME(&_hx_pos_e7a2c54ec8017cef_13_new)
HXLINE(  70)		this->respec =  ::openfl::geom::Point_obj::__alloc( HX_CTX ,(int)235,(int)35);
HXLINE(  23)		super::__construct();
HXLINE(  24)		this->parentScreen = parent;
HXLINE(  26)		this->abPoints = this->createTF(false,(::Main_obj::player->abilityPoints + HX_("",00,00,00,00)));
HXLINE(  27)		this->attrPoints = this->createTF(false,(::Main_obj::player->attributePoints + HX_("",00,00,00,00)));
HXLINE(  29)		this->add(this->createTF(true,HX_("ABILITY POINTS",f9,85,9c,36)),(int)0,(int)0);
HXLINE(  30)		this->add(this->createTF(true,HX_("ATTRIBUTE POINTS",c7,ed,28,fe)),(int)300,(int)0);
HXLINE(  31)		this->add(this->abPoints,(int)70,(int)40);
HXLINE(  32)		this->add(this->attrPoints,(int)384,(int)40);
HXLINE(  34)		this->add( ::ReSpec_obj::__alloc( HX_CTX ),this->respec->x,this->respec->y);
            	}

Dynamic PointsAndRespec_obj::__CreateEmpty() { return new PointsAndRespec_obj; }

void *PointsAndRespec_obj::_hx_vtable = 0;

Dynamic PointsAndRespec_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< PointsAndRespec_obj > _hx_result = new PointsAndRespec_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool PointsAndRespec_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x1b123bf8) {
		if (inClassId<=(int)0x17120186) {
			if (inClassId<=(int)0x0ddfced7) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0ddfced7;
			} else {
				return inClassId==(int)0x17120186;
			}
		} else {
			return inClassId==(int)0x19c29573 || inClassId==(int)0x1b123bf8;
		}
	} else {
		if (inClassId<=(int)0x3f2b00af) {
			return inClassId==(int)0x34b300da || inClassId==(int)0x3f2b00af;
		} else {
			return inClassId==(int)0x739fd0b8;
		}
	}
}

 ::openfl::text::TextField PointsAndRespec_obj::createTF(bool header,::String text){
            	HX_GC_STACKFRAME(&_hx_pos_e7a2c54ec8017cef_38_createTF)
HXLINE(  39)		 ::openfl::text::TextField tf =  ::openfl::text::TextField_obj::__alloc( HX_CTX );
HXLINE(  40)		 ::openfl::text::TextFormat format =  ::openfl::text::TextFormat_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null());
HXLINE(  42)		format->size = (int)20;
HXLINE(  43)		 ::Dynamic _hx_tmp;
HXDLIN(  43)		if (header) {
HXLINE(  43)			_hx_tmp = false;
            		}
            		else {
HXLINE(  43)			_hx_tmp = true;
            		}
HXDLIN(  43)		format->bold = _hx_tmp;
HXLINE(  44)		 ::Dynamic _hx_tmp1;
HXDLIN(  44)		if (header) {
HXLINE(  44)			_hx_tmp1 = true;
            		}
            		else {
HXLINE(  44)			_hx_tmp1 = false;
            		}
HXDLIN(  44)		format->italic = _hx_tmp1;
HXLINE(  45)		 ::Dynamic _hx_tmp2;
HXDLIN(  45)		if (header) {
HXLINE(  45)			_hx_tmp2 = (int)3;
            		}
            		else {
HXLINE(  45)			_hx_tmp2 = (int)0;
            		}
HXDLIN(  45)		format->align = _hx_tmp2;
HXLINE(  46)		Float _hx_tmp3;
HXDLIN(  46)		if (header) {
HXLINE(  46)			_hx_tmp3 = (int)200;
            		}
            		else {
HXLINE(  46)			_hx_tmp3 = (int)20;
            		}
HXDLIN(  46)		tf->set_width(_hx_tmp3);
HXLINE(  47)		tf->set_height((int)20);
HXLINE(  48)		tf->set_text(text);
HXLINE(  49)		tf->setTextFormat(format,null(),null());
HXLINE(  50)		return tf;
            	}


HX_DEFINE_DYNAMIC_FUNC2(PointsAndRespec_obj,createTF,return )

void PointsAndRespec_obj::updateAbpValue(){
            	HX_STACKFRAME(&_hx_pos_e7a2c54ec8017cef_55_updateAbpValue)
HXDLIN(  55)		 ::openfl::text::TextField _hx_tmp = this->abPoints;
HXDLIN(  55)		_hx_tmp->set_text((::Main_obj::player->abilityPoints + HX_("",00,00,00,00)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(PointsAndRespec_obj,updateAbpValue,(void))

void PointsAndRespec_obj::updateAttpValue(){
            	HX_STACKFRAME(&_hx_pos_e7a2c54ec8017cef_60_updateAttpValue)
HXDLIN(  60)		 ::openfl::text::TextField _hx_tmp = this->attrPoints;
HXDLIN(  60)		_hx_tmp->set_text((::Main_obj::player->attributePoints + HX_("",00,00,00,00)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(PointsAndRespec_obj,updateAttpValue,(void))

void PointsAndRespec_obj::onClick( ::openfl::geom::Point localPoint){
            	HX_STACKFRAME(&_hx_pos_e7a2c54ec8017cef_64_onClick)
HXLINE(  65)		::haxe::Log_obj::trace(HX_("Point textfields and re-spec button recieved click",21,b1,2b,f9),hx::SourceInfo(HX_("PointsAndRespec.hx",1c,81,7b,f9),65,HX_("roaming.screens.components.PointsAndRespec",c6,8d,36,e6),HX_("onClick",a9,1a,9c,de)));
HXLINE(  66)		if ((::MathUtils_obj::distance(localPoint,this->respec) <= (int)20)) {
HXLINE(  67)			::roaming::screens::ISAbility_obj::respec(this->parentScreen);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(PointsAndRespec_obj,onClick,(void))


hx::ObjectPtr< PointsAndRespec_obj > PointsAndRespec_obj::__new(::Dynamic parent) {
	hx::ObjectPtr< PointsAndRespec_obj > __this = new PointsAndRespec_obj();
	__this->__construct(parent);
	return __this;
}

hx::ObjectPtr< PointsAndRespec_obj > PointsAndRespec_obj::__alloc(hx::Ctx *_hx_ctx,::Dynamic parent) {
	PointsAndRespec_obj *__this = (PointsAndRespec_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(PointsAndRespec_obj), true, "roaming.screens.components.PointsAndRespec"));
	*(void **)__this = PointsAndRespec_obj::_hx_vtable;
	__this->__construct(parent);
	return __this;
}

PointsAndRespec_obj::PointsAndRespec_obj()
{
}

void PointsAndRespec_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(PointsAndRespec);
	HX_MARK_MEMBER_NAME(parentScreen,"parentScreen");
	HX_MARK_MEMBER_NAME(abPoints,"abPoints");
	HX_MARK_MEMBER_NAME(attrPoints,"attrPoints");
	HX_MARK_MEMBER_NAME(respec,"respec");
	 ::openfl::display::Sprite_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void PointsAndRespec_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(parentScreen,"parentScreen");
	HX_VISIT_MEMBER_NAME(abPoints,"abPoints");
	HX_VISIT_MEMBER_NAME(attrPoints,"attrPoints");
	HX_VISIT_MEMBER_NAME(respec,"respec");
	 ::openfl::display::Sprite_obj::__Visit(HX_VISIT_ARG);
}

hx::Val PointsAndRespec_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"respec") ) { return hx::Val( respec ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"onClick") ) { return hx::Val( onClick_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"abPoints") ) { return hx::Val( abPoints ); }
		if (HX_FIELD_EQ(inName,"createTF") ) { return hx::Val( createTF_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"attrPoints") ) { return hx::Val( attrPoints ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"parentScreen") ) { return hx::Val( parentScreen ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"updateAbpValue") ) { return hx::Val( updateAbpValue_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"updateAttpValue") ) { return hx::Val( updateAttpValue_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val PointsAndRespec_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"respec") ) { respec=inValue.Cast<  ::openfl::geom::Point >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"abPoints") ) { abPoints=inValue.Cast<  ::openfl::text::TextField >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"attrPoints") ) { attrPoints=inValue.Cast<  ::openfl::text::TextField >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"parentScreen") ) { parentScreen=inValue.Cast< ::Dynamic >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void PointsAndRespec_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("parentScreen","\x36","\xf0","\xc6","\x59"));
	outFields->push(HX_HCSTRING("abPoints","\xe4","\x39","\x17","\xc3"));
	outFields->push(HX_HCSTRING("attrPoints","\x34","\x1e","\xc8","\x0c"));
	outFields->push(HX_HCSTRING("respec","\x6e","\x97","\x80","\x08"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo PointsAndRespec_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::roaming::screens::ISAbility*/ ,(int)offsetof(PointsAndRespec_obj,parentScreen),HX_HCSTRING("parentScreen","\x36","\xf0","\xc6","\x59")},
	{hx::fsObject /*::openfl::text::TextField*/ ,(int)offsetof(PointsAndRespec_obj,abPoints),HX_HCSTRING("abPoints","\xe4","\x39","\x17","\xc3")},
	{hx::fsObject /*::openfl::text::TextField*/ ,(int)offsetof(PointsAndRespec_obj,attrPoints),HX_HCSTRING("attrPoints","\x34","\x1e","\xc8","\x0c")},
	{hx::fsObject /*::openfl::geom::Point*/ ,(int)offsetof(PointsAndRespec_obj,respec),HX_HCSTRING("respec","\x6e","\x97","\x80","\x08")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *PointsAndRespec_obj_sStaticStorageInfo = 0;
#endif

static ::String PointsAndRespec_obj_sMemberFields[] = {
	HX_HCSTRING("parentScreen","\x36","\xf0","\xc6","\x59"),
	HX_HCSTRING("abPoints","\xe4","\x39","\x17","\xc3"),
	HX_HCSTRING("attrPoints","\x34","\x1e","\xc8","\x0c"),
	HX_HCSTRING("createTF","\x6e","\x67","\xf4","\x2b"),
	HX_HCSTRING("updateAbpValue","\xab","\xff","\x5c","\x59"),
	HX_HCSTRING("updateAttpValue","\x79","\x78","\x77","\x8c"),
	HX_HCSTRING("onClick","\xa9","\x1a","\x9c","\xde"),
	HX_HCSTRING("respec","\x6e","\x97","\x80","\x08"),
	::String(null()) };

static void PointsAndRespec_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(PointsAndRespec_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void PointsAndRespec_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(PointsAndRespec_obj::__mClass,"__mClass");
};

#endif

hx::Class PointsAndRespec_obj::__mClass;

void PointsAndRespec_obj::__register()
{
	hx::Object *dummy = new PointsAndRespec_obj;
	PointsAndRespec_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("roaming.screens.components.PointsAndRespec","\xc6","\x8d","\x36","\xe6");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = PointsAndRespec_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(PointsAndRespec_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< PointsAndRespec_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = PointsAndRespec_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = PointsAndRespec_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = PointsAndRespec_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace roaming
} // end namespace screens
} // end namespace components
