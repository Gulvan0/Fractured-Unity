// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_Assets
#include <Assets.h>
#endif
#ifndef INCLUDED_ID
#include <ID.h>
#endif
#ifndef INCLUDED_Main
#include <Main.h>
#endif
#ifndef INCLUDED_MathUtils
#include <MathUtils.h>
#endif
#ifndef INCLUDED_SSprite
#include <SSprite.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_TreeBox
#include <TreeBox.h>
#endif
#ifndef INCLUDED_XMLUtils
#include <XMLUtils.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_hxassert_Assert
#include <hxassert/Assert.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_Graphics
#include <openfl/display/Graphics.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_MovieClip
#include <openfl/display/MovieClip.h>
#endif
#ifndef INCLUDED_openfl_display_Shape
#include <openfl/display/Shape.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_geom_Point
#include <openfl/geom/Point.h>
#endif
#ifndef INCLUDED_roaming_Ability
#include <roaming/Ability.h>
#endif
#ifndef INCLUDED_roaming_Player
#include <roaming/Player.h>
#endif
#ifndef INCLUDED_roaming_Tree
#include <roaming/Tree.h>
#endif
#ifndef INCLUDED_roaming_TreeAbility
#include <roaming/TreeAbility.h>
#endif
#ifndef INCLUDED_roaming_Unit
#include <roaming/Unit.h>
#endif
#ifndef INCLUDED_roaming_screens_ISAbility
#include <roaming/screens/ISAbility.h>
#endif
#ifndef INCLUDED_roaming_screens_Utils
#include <roaming/screens/Utils.h>
#endif
#ifndef INCLUDED_roaming_screens_components_TreeContainer
#include <roaming/screens/components/TreeContainer.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_dbdb6c68880fe8e1_18_new,"roaming.screens.components.TreeContainer","new",0x53169239,"roaming.screens.components.TreeContainer.new","roaming/screens/components/TreeContainer.hx",18,0x36e31796)
HX_LOCAL_STACK_FRAME(_hx_pos_dbdb6c68880fe8e1_47_createBranches,"roaming.screens.components.TreeContainer","createBranches",0x29f10d73,"roaming.screens.components.TreeContainer.createBranches","roaming/screens/components/TreeContainer.hx",47,0x36e31796)
HX_LOCAL_STACK_FRAME(_hx_pos_dbdb6c68880fe8e1_62_updateBranches,"roaming.screens.components.TreeContainer","updateBranches",0x0ce08180,"roaming.screens.components.TreeContainer.updateBranches","roaming/screens/components/TreeContainer.hx",62,0x36e31796)
static const ::String _hx_array_data_c08901c7_13[] = {
	HX_("Assertion failed: i.inRange(0, XMLUtils.getGlobal(\"tree\", \"height\", 1) - 1)",9b,6c,b6,e2),
};
static const ::String _hx_array_data_c08901c7_14[] = {
	HX_("Assertion failed: j.inRange(0, XMLUtils.getGlobal(\"tree\", \"width\", 1) - 1)",4b,05,cf,70),
};
HX_LOCAL_STACK_FRAME(_hx_pos_dbdb6c68880fe8e1_85_onClick,"roaming.screens.components.TreeContainer","onClick",0x02473d02,"roaming.screens.components.TreeContainer.onClick","roaming/screens/components/TreeContainer.hx",85,0x36e31796)
HX_LOCAL_STACK_FRAME(_hx_pos_dbdb6c68880fe8e1_95_onRightClick,"roaming.screens.components.TreeContainer","onRightClick",0x8be3bfd2,"roaming.screens.components.TreeContainer.onRightClick","roaming/screens/components/TreeContainer.hx",95,0x36e31796)
HX_LOCAL_STACK_FRAME(_hx_pos_dbdb6c68880fe8e1_105_identifyAbility,"roaming.screens.components.TreeContainer","identifyAbility",0x6bb46d57,"roaming.screens.components.TreeContainer.identifyAbility","roaming/screens/components/TreeContainer.hx",105,0x36e31796)
HX_LOCAL_STACK_FRAME(_hx_pos_dbdb6c68880fe8e1_106_identifyAbility,"roaming.screens.components.TreeContainer","identifyAbility",0x6bb46d57,"roaming.screens.components.TreeContainer.identifyAbility","roaming/screens/components/TreeContainer.hx",106,0x36e31796)
HX_LOCAL_STACK_FRAME(_hx_pos_dbdb6c68880fe8e1_107_identifyAbility,"roaming.screens.components.TreeContainer","identifyAbility",0x6bb46d57,"roaming.screens.components.TreeContainer.identifyAbility","roaming/screens/components/TreeContainer.hx",107,0x36e31796)
HX_LOCAL_STACK_FRAME(_hx_pos_dbdb6c68880fe8e1_117_treeAbX,"roaming.screens.components.TreeContainer","treeAbX",0xfa80dff2,"roaming.screens.components.TreeContainer.treeAbX","roaming/screens/components/TreeContainer.hx",117,0x36e31796)
HX_LOCAL_STACK_FRAME(_hx_pos_dbdb6c68880fe8e1_122_treeAbY,"roaming.screens.components.TreeContainer","treeAbY",0xfa80dff3,"roaming.screens.components.TreeContainer.treeAbY","roaming/screens/components/TreeContainer.hx",122,0x36e31796)
HX_LOCAL_STACK_FRAME(_hx_pos_dbdb6c68880fe8e1_126_treeAbOffsetX,"roaming.screens.components.TreeContainer","treeAbOffsetX",0xb591c05f,"roaming.screens.components.TreeContainer.treeAbOffsetX","roaming/screens/components/TreeContainer.hx",126,0x36e31796)
HX_LOCAL_STACK_FRAME(_hx_pos_dbdb6c68880fe8e1_133_treeAbOffsetY,"roaming.screens.components.TreeContainer","treeAbOffsetY",0xb591c060,"roaming.screens.components.TreeContainer.treeAbOffsetY","roaming/screens/components/TreeContainer.hx",133,0x36e31796)
namespace roaming{
namespace screens{
namespace components{

void TreeContainer_obj::__construct(::Dynamic parent){
            	HX_GC_STACKFRAME(&_hx_pos_dbdb6c68880fe8e1_18_new)
HXLINE(  25)		::Array< ::Dynamic> _g = ::Array_obj< ::Dynamic>::__new(0);
HXDLIN(  25)		{
HXLINE(  25)			int _g2 = (int)0;
HXDLIN(  25)			int _g1 = ( (int)(::XMLUtils_obj::getGlobal(HX_("tree",5e,99,03,4d),HX_("height",e7,07,4c,02),(int)1)) );
HXDLIN(  25)			while((_g2 < _g1)){
HXLINE(  25)				_g2 = (_g2 + (int)1);
HXDLIN(  25)				int i = (_g2 - (int)1);
HXDLIN(  25)				::Array< ::Dynamic> _g3 = ::Array_obj< ::Dynamic>::__new(0);
HXDLIN(  25)				{
HXLINE(  25)					int _g5 = (int)0;
HXDLIN(  25)					int _g4 = ( (int)(::XMLUtils_obj::getGlobal(HX_("tree",5e,99,03,4d),HX_("width",06,b6,62,ca),(int)1)) );
HXDLIN(  25)					while((_g5 < _g4)){
HXLINE(  25)						_g5 = (_g5 + (int)1);
HXDLIN(  25)						int j = (_g5 - (int)1);
HXDLIN(  25)						_g3->push(::Array_obj< ::Dynamic>::__new(0));
            					}
            				}
HXDLIN(  25)				_g->push(_g3);
            			}
            		}
HXDLIN(  25)		this->branches = _g;
HXLINE(  24)		::Array< ::Dynamic> _g6 = ::Array_obj< ::Dynamic>::__new(0);
HXDLIN(  24)		{
HXLINE(  24)			int _g21 = (int)0;
HXDLIN(  24)			int _g11 = ( (int)(::XMLUtils_obj::getGlobal(HX_("tree",5e,99,03,4d),HX_("height",e7,07,4c,02),(int)1)) );
HXDLIN(  24)			while((_g21 < _g11)){
HXLINE(  24)				_g21 = (_g21 + (int)1);
HXDLIN(  24)				int i1 = (_g21 - (int)1);
HXDLIN(  24)				_g6->push(::Array_obj< ::Dynamic>::__new(0));
            			}
            		}
HXDLIN(  24)		this->icons = _g6;
HXLINE(  29)		super::__construct();
HXLINE(  30)		this->parentScreen = parent;
HXLINE(  31)		this->abRadius = ::roaming::screens::ISAbility_obj::getAbRadius(this->parentScreen);
HXLINE(  33)		this->add( ::TreeBox_obj::__alloc( HX_CTX ),(int)0,(int)0);
HXLINE(  35)		{
HXLINE(  35)			 ::Dynamic ability = ::Main_obj::player->tree->iterator();
HXDLIN(  35)			while(( (bool)(ability->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE(  35)				 ::roaming::TreeAbility ability1 = ( ( ::roaming::TreeAbility)(ability->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE(  37)				 ::Dynamic _hx_tmp = ::haxe::Log_obj::trace;
HXDLIN(  37)				::String _hx_tmp1 = (HX_("drawing icon: ",e1,8e,70,ea) + ::Std_obj::string(ability1->id));
HXDLIN(  37)				_hx_tmp(_hx_tmp1,hx::SourceInfo(HX_("TreeContainer.hx",bb,22,be,7a),37,HX_("roaming.screens.components.TreeContainer",c7,01,89,c0),HX_("new",60,d0,53,00)));
HXLINE(  38)				::Array< ::Dynamic> _hx_tmp2 = this->branches->__get(ability1->i).StaticCast< ::Array< ::Dynamic> >();
HXDLIN(  38)				int ability2 = ability1->j;
HXDLIN(  38)				_hx_tmp2[ability2] = this->createBranches(ability1);
HXLINE(  39)				{
HXLINE(  39)					int _g7 = (int)0;
HXDLIN(  39)					::Array< ::Dynamic> _g12 = this->branches->__get(ability1->i).StaticCast< ::Array< ::Dynamic> >()->__get(ability1->j).StaticCast< ::Array< ::Dynamic> >();
HXDLIN(  39)					while((_g7 < _g12->length)){
HXLINE(  39)						 ::openfl::display::Shape branch = _g12->__get(_g7).StaticCast<  ::openfl::display::Shape >();
HXDLIN(  39)						_g7 = (_g7 + (int)1);
HXDLIN(  39)						Float _hx_tmp3 = this->treeAbX(ability1->j);
HXDLIN(  39)						this->add(branch,_hx_tmp3,this->treeAbY(ability1->i));
            					}
            				}
HXLINE(  41)				::Array< ::Dynamic> _hx_tmp4 = this->icons->__get(ability1->i).StaticCast< ::Array< ::Dynamic> >();
HXDLIN(  41)				int ability3 = ability1->j;
HXDLIN(  41)				_hx_tmp4[ability3] = ::roaming::screens::Utils_obj::squareToRound(::Assets_obj::getBattleAbility(ability1->id));
HXLINE(  42)				 ::openfl::display::MovieClip _hx_tmp5 = this->icons->__get(ability1->i).StaticCast< ::Array< ::Dynamic> >()->__get(ability1->j).StaticCast<  ::openfl::display::MovieClip >();
HXDLIN(  42)				Float _hx_tmp6 = this->treeAbX(ability1->j);
HXDLIN(  42)				this->add(_hx_tmp5,_hx_tmp6,this->treeAbY(ability1->i));
            			}
            		}
            	}

Dynamic TreeContainer_obj::__CreateEmpty() { return new TreeContainer_obj; }

void *TreeContainer_obj::_hx_vtable = 0;

Dynamic TreeContainer_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< TreeContainer_obj > _hx_result = new TreeContainer_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool TreeContainer_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x1b123bf8) {
		if (inClassId<=(int)0x17120186) {
			if (inClassId<=(int)0x0ddfced7) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0ddfced7;
			} else {
				return inClassId==(int)0x17120186;
			}
		} else {
			return inClassId==(int)0x19c29573 || inClassId==(int)0x1b123bf8;
		}
	} else {
		if (inClassId<=(int)0x3f2b00af) {
			return inClassId==(int)0x1ee405bf || inClassId==(int)0x3f2b00af;
		} else {
			return inClassId==(int)0x739fd0b8;
		}
	}
}

::Array< ::Dynamic> TreeContainer_obj::createBranches( ::roaming::TreeAbility ab){
            	HX_GC_STACKFRAME(&_hx_pos_dbdb6c68880fe8e1_47_createBranches)
HXLINE(  48)		::Array< ::Dynamic> array = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  50)		{
HXLINE(  50)			int _g = (int)0;
HXDLIN(  50)			::Array< int > _g1 = ab->unlocksJ;
HXDLIN(  50)			while((_g < _g1->length)){
HXLINE(  50)				int dj = _g1->__get(_g);
HXDLIN(  50)				_g = (_g + (int)1);
HXLINE(  52)				 ::openfl::display::Shape line =  ::openfl::display::Shape_obj::__alloc( HX_CTX );
HXLINE(  53)				int _hx_tmp;
HXDLIN(  53)				if ((ab->currentLvl > (int)0)) {
HXLINE(  53)					_hx_tmp = (int)14002690;
            				}
            				else {
HXLINE(  53)					_hx_tmp = (int)7301736;
            				}
HXDLIN(  53)				line->get_graphics()->lineStyle((int)5,_hx_tmp,null(),null(),null(),null(),null(),null());
HXLINE(  54)				 ::openfl::display::Graphics _hx_tmp1 = line->get_graphics();
HXDLIN(  54)				Float _hx_tmp2 = this->treeAbX((ab->j + dj));
HXDLIN(  54)				Float _hx_tmp3 = (_hx_tmp2 - this->treeAbX(ab->j));
HXDLIN(  54)				Float _hx_tmp4 = this->treeAbY((ab->i + (int)1));
HXDLIN(  54)				_hx_tmp1->lineTo(_hx_tmp3,(_hx_tmp4 - this->treeAbY(ab->i)));
HXLINE(  55)				array->push(line);
            			}
            		}
HXLINE(  58)		return array;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TreeContainer_obj,createBranches,return )

void TreeContainer_obj::updateBranches(int i,int j){
            	HX_STACKFRAME(&_hx_pos_dbdb6c68880fe8e1_62_updateBranches)
HXLINE( 151)		if ((false == ::MathUtils_obj::inRange(i,(int)0,(::XMLUtils_obj::getGlobal(HX_("tree",5e,99,03,4d),HX_("height",e7,07,4c,02),(int)1) - (int)1),null(),null()))) {
HXLINE(  63)			::hxassert::Assert_obj::throwAssertionFailureError(::Array_obj< ::String >::fromData( _hx_array_data_c08901c7_13,1),hx::SourceInfo(HX_("TreeContainer.hx",bb,22,be,7a),63,HX_("roaming.screens.components.TreeContainer",c7,01,89,c0),HX_("updateBranches",b9,b6,79,ff)));
            		}
HXLINE( 151)		if ((false == ::MathUtils_obj::inRange(j,(int)0,(::XMLUtils_obj::getGlobal(HX_("tree",5e,99,03,4d),HX_("width",06,b6,62,ca),(int)1) - (int)1),null(),null()))) {
HXLINE(  64)			::hxassert::Assert_obj::throwAssertionFailureError(::Array_obj< ::String >::fromData( _hx_array_data_c08901c7_14,1),hx::SourceInfo(HX_("TreeContainer.hx",bb,22,be,7a),64,HX_("roaming.screens.components.TreeContainer",c7,01,89,c0),HX_("updateBranches",b9,b6,79,ff)));
            		}
HXLINE(  66)		 ::roaming::TreeAbility ability = ::Main_obj::player->tree->get(i,j);
HXLINE(  68)		this->remove(this->icons->__get(i).StaticCast< ::Array< ::Dynamic> >()->__get(j).StaticCast<  ::openfl::display::MovieClip >());
HXLINE(  69)		{
HXLINE(  69)			int _g = (int)0;
HXDLIN(  69)			::Array< int > _g1 = ability->unlocksJ;
HXDLIN(  69)			while((_g < _g1->length)){
HXLINE(  69)				int dj = _g1->__get(_g);
HXDLIN(  69)				_g = (_g + (int)1);
HXLINE(  70)				::Array< ::Dynamic> _hx_tmp = this->icons;
HXDLIN(  70)				::Array< ::Dynamic> _hx_tmp1 = _hx_tmp->__get((i + (int)1)).StaticCast< ::Array< ::Dynamic> >();
HXDLIN(  70)				this->remove(_hx_tmp1->__get((j + dj)).StaticCast<  ::openfl::display::MovieClip >());
            			}
            		}
HXLINE(  71)		{
HXLINE(  71)			int _g2 = (int)0;
HXDLIN(  71)			::Array< ::Dynamic> _g11 = this->branches->__get(i).StaticCast< ::Array< ::Dynamic> >()->__get(j).StaticCast< ::Array< ::Dynamic> >();
HXDLIN(  71)			while((_g2 < _g11->length)){
HXLINE(  71)				 ::openfl::display::Shape branch = _g11->__get(_g2).StaticCast<  ::openfl::display::Shape >();
HXDLIN(  71)				_g2 = (_g2 + (int)1);
HXLINE(  72)				this->remove(branch);
            			}
            		}
HXLINE(  74)		::Array< ::Dynamic> _hx_tmp2 = this->branches->__get(i).StaticCast< ::Array< ::Dynamic> >();
HXDLIN(  74)		_hx_tmp2[j] = this->createBranches(ability);
HXLINE(  76)		{
HXLINE(  76)			int _g3 = (int)0;
HXDLIN(  76)			::Array< ::Dynamic> _g12 = this->branches->__get(i).StaticCast< ::Array< ::Dynamic> >()->__get(j).StaticCast< ::Array< ::Dynamic> >();
HXDLIN(  76)			while((_g3 < _g12->length)){
HXLINE(  76)				 ::openfl::display::Shape branch1 = _g12->__get(_g3).StaticCast<  ::openfl::display::Shape >();
HXDLIN(  76)				_g3 = (_g3 + (int)1);
HXLINE(  77)				Float _hx_tmp3 = this->treeAbX(ability->j);
HXDLIN(  77)				this->add(branch1,_hx_tmp3,this->treeAbY(ability->i));
            			}
            		}
HXLINE(  78)		{
HXLINE(  78)			int _g4 = (int)0;
HXDLIN(  78)			::Array< int > _g13 = ability->unlocksJ;
HXDLIN(  78)			while((_g4 < _g13->length)){
HXLINE(  78)				int dj1 = _g13->__get(_g4);
HXDLIN(  78)				_g4 = (_g4 + (int)1);
HXLINE(  79)				::Array< ::Dynamic> _hx_tmp4 = this->icons;
HXDLIN(  79)				::Array< ::Dynamic> _hx_tmp5 = _hx_tmp4->__get((i + (int)1)).StaticCast< ::Array< ::Dynamic> >();
HXDLIN(  79)				 ::openfl::display::MovieClip _hx_tmp6 = _hx_tmp5->__get((j + dj1)).StaticCast<  ::openfl::display::MovieClip >();
HXDLIN(  79)				Float _hx_tmp7 = this->treeAbX((j + dj1));
HXDLIN(  79)				this->add(_hx_tmp6,_hx_tmp7,this->treeAbY((i + (int)1)));
            			}
            		}
HXLINE(  80)		 ::openfl::display::MovieClip _hx_tmp8 = this->icons->__get(i).StaticCast< ::Array< ::Dynamic> >()->__get(j).StaticCast<  ::openfl::display::MovieClip >();
HXDLIN(  80)		Float _hx_tmp9 = this->treeAbX(j);
HXDLIN(  80)		this->add(_hx_tmp8,_hx_tmp9,this->treeAbY(i));
            	}


HX_DEFINE_DYNAMIC_FUNC2(TreeContainer_obj,updateBranches,(void))

void TreeContainer_obj::onClick( ::openfl::geom::Point localPoint){
            	HX_STACKFRAME(&_hx_pos_dbdb6c68880fe8e1_85_onClick)
HXLINE(  86)		::haxe::Log_obj::trace(HX_("Tree recieved click",f3,39,8e,32),hx::SourceInfo(HX_("TreeContainer.hx",bb,22,be,7a),86,HX_("roaming.screens.components.TreeContainer",c7,01,89,c0),HX_("onClick",a9,1a,9c,de)));
HXLINE(  87)		 ::openfl::geom::Point ab = this->identifyAbility(localPoint);
HXLINE(  88)		if ((ab->x == (int)-1)) {
HXLINE(  89)			return;
            		}
HXLINE(  91)		::roaming::screens::ISAbility_obj::put(this->parentScreen,ab->x,ab->y);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TreeContainer_obj,onClick,(void))

void TreeContainer_obj::onRightClick( ::openfl::geom::Point localPoint){
            	HX_STACKFRAME(&_hx_pos_dbdb6c68880fe8e1_95_onRightClick)
HXLINE(  96)		::haxe::Log_obj::trace(HX_("Tree recieved right-click",c2,e1,4f,d2),hx::SourceInfo(HX_("TreeContainer.hx",bb,22,be,7a),96,HX_("roaming.screens.components.TreeContainer",c7,01,89,c0),HX_("onRightClick",cb,04,67,23)));
HXLINE(  97)		 ::openfl::geom::Point ab = this->identifyAbility(localPoint);
HXLINE(  98)		if ((ab->x == (int)-1)) {
HXLINE(  99)			return;
            		}
HXLINE( 101)		::roaming::screens::ISAbility_obj::learn(this->parentScreen,ab->x,ab->y);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TreeContainer_obj,onRightClick,(void))

 ::openfl::geom::Point TreeContainer_obj::identifyAbility( ::openfl::geom::Point localClickPoint){
            	HX_GC_STACKFRAME(&_hx_pos_dbdb6c68880fe8e1_105_identifyAbility)
HXLINE( 104)		 ::roaming::screens::components::TreeContainer _gthis = hx::ObjectPtr<OBJ_>(this);
HXLINE( 106)		{
            			HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0, ::roaming::screens::components::TreeContainer,_gthis) HXARGC(1)
            			Float _hx_run(int i){
            				HX_STACKFRAME(&_hx_pos_dbdb6c68880fe8e1_106_identifyAbility)
HXLINE( 106)				Float _g12 = _gthis->treeAbY(i);
HXDLIN( 106)				return (_g12 - _gthis->abRadius);
            			}
            			HX_END_LOCAL_FUNC1(return)

HXLINE( 106)			int _g = (int)0;
HXDLIN( 106)			int _g1 = (::XMLUtils_obj::getGlobal(HX_("tree",5e,99,03,4d),HX_("height",e7,07,4c,02),(int)1) + (int)1);
HXDLIN( 106)			::Array< int > _g11 = ::roaming::screens::Utils_obj::getClickCandidates( ::Dynamic(new _hx_Closure_0(_gthis)),_g1,localClickPoint->y);
HXDLIN( 106)			while((_g < _g11->length)){
HXLINE( 106)				int i1 = _g11->__get(_g);
HXDLIN( 106)				_g = (_g + (int)1);
HXLINE( 107)				{
            					HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_1, ::roaming::screens::components::TreeContainer,_gthis) HXARGC(1)
            					Float _hx_run(int i2){
            						HX_STACKFRAME(&_hx_pos_dbdb6c68880fe8e1_107_identifyAbility)
HXLINE( 107)						Float _g32 = _gthis->treeAbX(i2);
HXDLIN( 107)						return (_g32 - _gthis->abRadius);
            					}
            					HX_END_LOCAL_FUNC1(return)

HXLINE( 107)					int _g2 = (int)0;
HXDLIN( 107)					int _g3 = (::XMLUtils_obj::getGlobal(HX_("tree",5e,99,03,4d),HX_("width",06,b6,62,ca),(int)1) + (int)1);
HXDLIN( 107)					::Array< int > _g31 = ::roaming::screens::Utils_obj::getClickCandidates( ::Dynamic(new _hx_Closure_1(_gthis)),_g3,localClickPoint->x);
HXDLIN( 107)					while((_g2 < _g31->length)){
HXLINE( 107)						int j = _g31->__get(_g2);
HXDLIN( 107)						_g2 = (_g2 + (int)1);
HXLINE( 108)						Float _hx_tmp = this->treeAbX(j);
HXDLIN( 108)						Float _hx_tmp1 = ::MathUtils_obj::distance(localClickPoint, ::openfl::geom::Point_obj::__alloc( HX_CTX ,_hx_tmp,this->treeAbY(i1)));
HXDLIN( 108)						if ((_hx_tmp1 <= this->abRadius)) {
HXLINE( 109)							return  ::openfl::geom::Point_obj::__alloc( HX_CTX ,i1,j);
            						}
            					}
            				}
            			}
            		}
HXLINE( 110)		return  ::openfl::geom::Point_obj::__alloc( HX_CTX ,(int)-1,(int)-1);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TreeContainer_obj,identifyAbility,return )

Float TreeContainer_obj::treeAbX(int j){
            	HX_STACKFRAME(&_hx_pos_dbdb6c68880fe8e1_117_treeAbX)
HXDLIN( 117)		Float _hx_tmp = this->treeAbOffsetX();
HXDLIN( 117)		Float _hx_tmp1 = ((_hx_tmp + ((int)2 * this->abRadius)) * j);
HXDLIN( 117)		Float _hx_tmp2 = (_hx_tmp1 + this->treeAbOffsetX());
HXDLIN( 117)		return (_hx_tmp2 + this->abRadius);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TreeContainer_obj,treeAbX,return )

Float TreeContainer_obj::treeAbY(int i){
            	HX_STACKFRAME(&_hx_pos_dbdb6c68880fe8e1_122_treeAbY)
HXDLIN( 122)		Float _hx_tmp = this->treeAbOffsetY();
HXDLIN( 122)		Float _hx_tmp1 = ((_hx_tmp + ((int)2 * this->abRadius)) * i);
HXDLIN( 122)		Float _hx_tmp2 = (_hx_tmp1 + this->treeAbOffsetY());
HXDLIN( 122)		return (_hx_tmp2 + this->abRadius);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TreeContainer_obj,treeAbY,return )

Float TreeContainer_obj::treeAbOffsetX(){
            	HX_GC_STACKFRAME(&_hx_pos_dbdb6c68880fe8e1_126_treeAbOffsetX)
HXLINE( 127)		int count = (int)4;
HXLINE( 128)		Float boxW =  ::TreeBox_obj::__alloc( HX_CTX )->get_width();
HXLINE( 129)		Float _hx_tmp = (boxW - ((count * this->abRadius) * (int)2));
HXDLIN( 129)		return ((Float)_hx_tmp / (Float)(count + (int)1));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TreeContainer_obj,treeAbOffsetX,return )

Float TreeContainer_obj::treeAbOffsetY(){
            	HX_GC_STACKFRAME(&_hx_pos_dbdb6c68880fe8e1_133_treeAbOffsetY)
HXLINE( 134)		int count = (int)7;
HXLINE( 135)		Float boxH =  ::TreeBox_obj::__alloc( HX_CTX )->get_height();
HXLINE( 136)		Float _hx_tmp = (boxH - ((count * this->abRadius) * (int)2));
HXDLIN( 136)		return ((Float)_hx_tmp / (Float)(count + (int)1));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TreeContainer_obj,treeAbOffsetY,return )


hx::ObjectPtr< TreeContainer_obj > TreeContainer_obj::__new(::Dynamic parent) {
	hx::ObjectPtr< TreeContainer_obj > __this = new TreeContainer_obj();
	__this->__construct(parent);
	return __this;
}

hx::ObjectPtr< TreeContainer_obj > TreeContainer_obj::__alloc(hx::Ctx *_hx_ctx,::Dynamic parent) {
	TreeContainer_obj *__this = (TreeContainer_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(TreeContainer_obj), true, "roaming.screens.components.TreeContainer"));
	*(void **)__this = TreeContainer_obj::_hx_vtable;
	__this->__construct(parent);
	return __this;
}

TreeContainer_obj::TreeContainer_obj()
{
}

void TreeContainer_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(TreeContainer);
	HX_MARK_MEMBER_NAME(parentScreen,"parentScreen");
	HX_MARK_MEMBER_NAME(abRadius,"abRadius");
	HX_MARK_MEMBER_NAME(icons,"icons");
	HX_MARK_MEMBER_NAME(branches,"branches");
	 ::openfl::display::Sprite_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void TreeContainer_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(parentScreen,"parentScreen");
	HX_VISIT_MEMBER_NAME(abRadius,"abRadius");
	HX_VISIT_MEMBER_NAME(icons,"icons");
	HX_VISIT_MEMBER_NAME(branches,"branches");
	 ::openfl::display::Sprite_obj::__Visit(HX_VISIT_ARG);
}

hx::Val TreeContainer_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"icons") ) { return hx::Val( icons ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"onClick") ) { return hx::Val( onClick_dyn() ); }
		if (HX_FIELD_EQ(inName,"treeAbX") ) { return hx::Val( treeAbX_dyn() ); }
		if (HX_FIELD_EQ(inName,"treeAbY") ) { return hx::Val( treeAbY_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"abRadius") ) { return hx::Val( abRadius ); }
		if (HX_FIELD_EQ(inName,"branches") ) { return hx::Val( branches ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"parentScreen") ) { return hx::Val( parentScreen ); }
		if (HX_FIELD_EQ(inName,"onRightClick") ) { return hx::Val( onRightClick_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"treeAbOffsetX") ) { return hx::Val( treeAbOffsetX_dyn() ); }
		if (HX_FIELD_EQ(inName,"treeAbOffsetY") ) { return hx::Val( treeAbOffsetY_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"createBranches") ) { return hx::Val( createBranches_dyn() ); }
		if (HX_FIELD_EQ(inName,"updateBranches") ) { return hx::Val( updateBranches_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"identifyAbility") ) { return hx::Val( identifyAbility_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val TreeContainer_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"icons") ) { icons=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"abRadius") ) { abRadius=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"branches") ) { branches=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"parentScreen") ) { parentScreen=inValue.Cast< ::Dynamic >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void TreeContainer_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("parentScreen","\x36","\xf0","\xc6","\x59"));
	outFields->push(HX_HCSTRING("abRadius","\x13","\xf8","\xdf","\x7c"));
	outFields->push(HX_HCSTRING("icons","\xda","\xa2","\xd7","\xb6"));
	outFields->push(HX_HCSTRING("branches","\x90","\xc3","\x4f","\xca"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo TreeContainer_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::roaming::screens::ISAbility*/ ,(int)offsetof(TreeContainer_obj,parentScreen),HX_HCSTRING("parentScreen","\x36","\xf0","\xc6","\x59")},
	{hx::fsFloat,(int)offsetof(TreeContainer_obj,abRadius),HX_HCSTRING("abRadius","\x13","\xf8","\xdf","\x7c")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(TreeContainer_obj,icons),HX_HCSTRING("icons","\xda","\xa2","\xd7","\xb6")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(TreeContainer_obj,branches),HX_HCSTRING("branches","\x90","\xc3","\x4f","\xca")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *TreeContainer_obj_sStaticStorageInfo = 0;
#endif

static ::String TreeContainer_obj_sMemberFields[] = {
	HX_HCSTRING("parentScreen","\x36","\xf0","\xc6","\x59"),
	HX_HCSTRING("abRadius","\x13","\xf8","\xdf","\x7c"),
	HX_HCSTRING("icons","\xda","\xa2","\xd7","\xb6"),
	HX_HCSTRING("branches","\x90","\xc3","\x4f","\xca"),
	HX_HCSTRING("createBranches","\xac","\x42","\x8a","\x1c"),
	HX_HCSTRING("updateBranches","\xb9","\xb6","\x79","\xff"),
	HX_HCSTRING("onClick","\xa9","\x1a","\x9c","\xde"),
	HX_HCSTRING("onRightClick","\xcb","\x04","\x67","\x23"),
	HX_HCSTRING("identifyAbility","\xfe","\xc9","\x29","\xbf"),
	HX_HCSTRING("treeAbX","\x99","\xbd","\xd5","\xd6"),
	HX_HCSTRING("treeAbY","\x9a","\xbd","\xd5","\xd6"),
	HX_HCSTRING("treeAbOffsetX","\x46","\xd5","\xea","\xb0"),
	HX_HCSTRING("treeAbOffsetY","\x47","\xd5","\xea","\xb0"),
	::String(null()) };

static void TreeContainer_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(TreeContainer_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void TreeContainer_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(TreeContainer_obj::__mClass,"__mClass");
};

#endif

hx::Class TreeContainer_obj::__mClass;

void TreeContainer_obj::__register()
{
	hx::Object *dummy = new TreeContainer_obj;
	TreeContainer_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("roaming.screens.components.TreeContainer","\xc7","\x01","\x89","\xc0");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = TreeContainer_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(TreeContainer_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< TreeContainer_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = TreeContainer_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TreeContainer_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TreeContainer_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace roaming
} // end namespace screens
} // end namespace components
