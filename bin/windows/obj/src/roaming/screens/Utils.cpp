// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_CircleAbilityMask
#include <CircleAbilityMask.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_MovieClip
#include <openfl/display/MovieClip.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_roaming_screens_Utils
#include <roaming/screens/Utils.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_9404d364e645619f_15_getClickCandidates,"roaming.screens.Utils","getClickCandidates",0x9dc370bb,"roaming.screens.Utils.getClickCandidates","roaming/screens/Utils.hx",15,0xf2f4f38b)
HX_LOCAL_STACK_FRAME(_hx_pos_9404d364e645619f_30_squareToRound,"roaming.screens.Utils","squareToRound",0xb217fcdd,"roaming.screens.Utils.squareToRound","roaming/screens/Utils.hx",30,0xf2f4f38b)
namespace roaming{
namespace screens{

void Utils_obj::__construct() { }

Dynamic Utils_obj::__CreateEmpty() { return new Utils_obj; }

void *Utils_obj::_hx_vtable = 0;

Dynamic Utils_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Utils_obj > _hx_result = new Utils_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Utils_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x445c4203;
}

::Array< int > Utils_obj::getClickCandidates( ::Dynamic coordFunction,int upperLimit,Float clickCoordinate){
            	HX_STACKFRAME(&_hx_pos_9404d364e645619f_15_getClickCandidates)
HXLINE(  16)		{
HXLINE(  16)			int _g1 = (int)0;
HXDLIN(  16)			int _g = upperLimit;
HXDLIN(  16)			while((_g1 < _g)){
HXLINE(  16)				_g1 = (_g1 + (int)1);
HXDLIN(  16)				int i = (_g1 - (int)1);
HXLINE(  17)				if ((( (Float)(coordFunction(i)) ) > clickCoordinate)) {
HXLINE(  18)					if ((i > (int)0)) {
HXLINE(  19)						return ::Array_obj< int >::__new(2)->init(0,(i - (int)1))->init(1,i);
            					}
            					else {
HXLINE(  21)						return ::Array_obj< int >::__new(0);
            					}
            				}
            			}
            		}
HXLINE(  22)		return ::Array_obj< int >::__new(0);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Utils_obj,getClickCandidates,return )

 ::openfl::display::MovieClip Utils_obj::squareToRound( ::openfl::display::MovieClip ability){
            	HX_GC_STACKFRAME(&_hx_pos_9404d364e645619f_30_squareToRound)
HXLINE(  31)		 ::openfl::display::MovieClip container =  ::openfl::display::MovieClip_obj::__alloc( HX_CTX );
HXLINE(  32)		 ::openfl::display::MovieClip newMask =  ::CircleAbilityMask_obj::__alloc( HX_CTX );
HXLINE(  33)		Float abwidth = (int)56;
HXLINE(  34)		Float abstroke = ((Float)6.85);
HXLINE(  36)		ability->set_x(((Float)-(abwidth) / (Float)(int)2));
HXLINE(  37)		ability->set_y(((Float)-(abwidth) / (Float)(int)2));
HXLINE(  38)		newMask->set_width((abwidth - abstroke));
HXLINE(  39)		newMask->set_height(newMask->get_width());
HXLINE(  40)		newMask->set_x((int)0);
HXLINE(  41)		newMask->set_y((int)0);
HXLINE(  43)		container->addChild(ability);
HXLINE(  44)		container->addChild(newMask);
HXLINE(  45)		ability->set_mask(newMask);
HXLINE(  47)		Float _hx_tmp = ((container->get_width() * (int)18) * (int)2);
HXDLIN(  47)		container->set_width(((Float)_hx_tmp / (Float)newMask->get_width()));
HXLINE(  48)		Float _hx_tmp1 = ((container->get_height() * (int)18) * (int)2);
HXDLIN(  48)		container->set_height(((Float)_hx_tmp1 / (Float)newMask->get_height()));
HXLINE(  50)		return container;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Utils_obj,squareToRound,return )


Utils_obj::Utils_obj()
{
}

bool Utils_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 13:
		if (HX_FIELD_EQ(inName,"squareToRound") ) { outValue = squareToRound_dyn(); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"getClickCandidates") ) { outValue = getClickCandidates_dyn(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *Utils_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *Utils_obj_sStaticStorageInfo = 0;
#endif

static void Utils_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Utils_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Utils_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Utils_obj::__mClass,"__mClass");
};

#endif

hx::Class Utils_obj::__mClass;

static ::String Utils_obj_sStaticFields[] = {
	HX_HCSTRING("getClickCandidates","\x42","\xd1","\x2b","\x3a"),
	HX_HCSTRING("squareToRound","\xb6","\x69","\x79","\x24"),
	::String(null())
};

void Utils_obj::__register()
{
	hx::Object *dummy = new Utils_obj;
	Utils_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("roaming.screens.Utils","\x55","\xcd","\x00","\x9c");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Utils_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Utils_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Utils_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< Utils_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Utils_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Utils_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Utils_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace roaming
} // end namespace screens
