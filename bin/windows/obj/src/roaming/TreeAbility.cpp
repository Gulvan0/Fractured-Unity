// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_ID
#include <ID.h>
#endif
#ifndef INCLUDED_MathUtils
#include <MathUtils.h>
#endif
#ifndef INCLUDED_XMLUtils
#include <XMLUtils.h>
#endif
#ifndef INCLUDED_hxassert_Assert
#include <hxassert/Assert.h>
#endif
#ifndef INCLUDED_roaming_Ability
#include <roaming/Ability.h>
#endif
#ifndef INCLUDED_roaming_TreeAbility
#include <roaming/TreeAbility.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_9c172a28f34b9718_13_new,"roaming.TreeAbility","new",0xd1d46ee9,"roaming.TreeAbility.new","roaming/Tree.hx",13,0xac5bb74a)
static const ::String _hx_array_data_788ec677_1[] = {
	HX_("Assertion failed: i.inRange(0, XMLUtils.getGlobal(\"tree\", \"height\", 1) - 1)",9b,6c,b6,e2),
};
static const ::String _hx_array_data_788ec677_2[] = {
	HX_("Assertion failed: j.inRange(0, XMLUtils.getGlobal(\"tree\", \"width\", 1) - 1)",4b,05,cf,70),
};
namespace roaming{

void TreeAbility_obj::__construct( ::roaming::Ability ability,int i,int j,::Array< int > requiredJ,::Array< int > unlocksJ){
            	HX_STACKFRAME(&_hx_pos_9c172a28f34b9718_13_new)
HXLINE(  14)		super::__construct(ability->id,ability->maxLvl);
HXLINE( 151)		if ((false == ::MathUtils_obj::inRange(i,(int)0,(::XMLUtils_obj::getGlobal(HX_("tree",5e,99,03,4d),HX_("height",e7,07,4c,02),(int)1) - (int)1),null(),null()))) {
HXLINE(  16)			::hxassert::Assert_obj::throwAssertionFailureError(::Array_obj< ::String >::fromData( _hx_array_data_788ec677_1,1),hx::SourceInfo(HX_("Tree.hx",00,80,18,a4),16,HX_("roaming.TreeAbility",77,c6,8e,78),HX_("new",60,d0,53,00)));
            		}
HXLINE( 151)		if ((false == ::MathUtils_obj::inRange(j,(int)0,(::XMLUtils_obj::getGlobal(HX_("tree",5e,99,03,4d),HX_("width",06,b6,62,ca),(int)1) - (int)1),null(),null()))) {
HXLINE(  17)			::hxassert::Assert_obj::throwAssertionFailureError(::Array_obj< ::String >::fromData( _hx_array_data_788ec677_2,1),hx::SourceInfo(HX_("Tree.hx",00,80,18,a4),17,HX_("roaming.TreeAbility",77,c6,8e,78),HX_("new",60,d0,53,00)));
            		}
HXLINE(  19)		this->currentLvl = ability->currentLvl;
HXLINE(  20)		this->i = i;
HXLINE(  21)		this->j = j;
HXLINE(  22)		this->requiredJ = requiredJ;
HXLINE(  23)		this->unlocksJ = unlocksJ;
            	}

Dynamic TreeAbility_obj::__CreateEmpty() { return new TreeAbility_obj; }

void *TreeAbility_obj::_hx_vtable = 0;

Dynamic TreeAbility_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< TreeAbility_obj > _hx_result = new TreeAbility_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4]);
	return _hx_result;
}

bool TreeAbility_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x018921d9) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x018921d9;
	} else {
		return inClassId==(int)0x6fbee6d3;
	}
}


hx::ObjectPtr< TreeAbility_obj > TreeAbility_obj::__new( ::roaming::Ability ability,int i,int j,::Array< int > requiredJ,::Array< int > unlocksJ) {
	hx::ObjectPtr< TreeAbility_obj > __this = new TreeAbility_obj();
	__this->__construct(ability,i,j,requiredJ,unlocksJ);
	return __this;
}

hx::ObjectPtr< TreeAbility_obj > TreeAbility_obj::__alloc(hx::Ctx *_hx_ctx, ::roaming::Ability ability,int i,int j,::Array< int > requiredJ,::Array< int > unlocksJ) {
	TreeAbility_obj *__this = (TreeAbility_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(TreeAbility_obj), true, "roaming.TreeAbility"));
	*(void **)__this = TreeAbility_obj::_hx_vtable;
	__this->__construct(ability,i,j,requiredJ,unlocksJ);
	return __this;
}

TreeAbility_obj::TreeAbility_obj()
{
}

void TreeAbility_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(TreeAbility);
	HX_MARK_MEMBER_NAME(i,"i");
	HX_MARK_MEMBER_NAME(j,"j");
	HX_MARK_MEMBER_NAME(requiredJ,"requiredJ");
	HX_MARK_MEMBER_NAME(unlocksJ,"unlocksJ");
	 ::roaming::Ability_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void TreeAbility_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(i,"i");
	HX_VISIT_MEMBER_NAME(j,"j");
	HX_VISIT_MEMBER_NAME(requiredJ,"requiredJ");
	HX_VISIT_MEMBER_NAME(unlocksJ,"unlocksJ");
	 ::roaming::Ability_obj::__Visit(HX_VISIT_ARG);
}

hx::Val TreeAbility_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"i") ) { return hx::Val( i ); }
		if (HX_FIELD_EQ(inName,"j") ) { return hx::Val( j ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"unlocksJ") ) { return hx::Val( unlocksJ ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"requiredJ") ) { return hx::Val( requiredJ ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val TreeAbility_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"i") ) { i=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"j") ) { j=inValue.Cast< int >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"unlocksJ") ) { unlocksJ=inValue.Cast< ::Array< int > >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"requiredJ") ) { requiredJ=inValue.Cast< ::Array< int > >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void TreeAbility_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("i","\x69","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("j","\x6a","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("requiredJ","\x0b","\xa2","\xdc","\x63"));
	outFields->push(HX_HCSTRING("unlocksJ","\x3b","\x40","\x0e","\x5c"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo TreeAbility_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(TreeAbility_obj,i),HX_HCSTRING("i","\x69","\x00","\x00","\x00")},
	{hx::fsInt,(int)offsetof(TreeAbility_obj,j),HX_HCSTRING("j","\x6a","\x00","\x00","\x00")},
	{hx::fsObject /*Array< int >*/ ,(int)offsetof(TreeAbility_obj,requiredJ),HX_HCSTRING("requiredJ","\x0b","\xa2","\xdc","\x63")},
	{hx::fsObject /*Array< int >*/ ,(int)offsetof(TreeAbility_obj,unlocksJ),HX_HCSTRING("unlocksJ","\x3b","\x40","\x0e","\x5c")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *TreeAbility_obj_sStaticStorageInfo = 0;
#endif

static ::String TreeAbility_obj_sMemberFields[] = {
	HX_HCSTRING("i","\x69","\x00","\x00","\x00"),
	HX_HCSTRING("j","\x6a","\x00","\x00","\x00"),
	HX_HCSTRING("requiredJ","\x0b","\xa2","\xdc","\x63"),
	HX_HCSTRING("unlocksJ","\x3b","\x40","\x0e","\x5c"),
	::String(null()) };

static void TreeAbility_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(TreeAbility_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void TreeAbility_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(TreeAbility_obj::__mClass,"__mClass");
};

#endif

hx::Class TreeAbility_obj::__mClass;

void TreeAbility_obj::__register()
{
	hx::Object *dummy = new TreeAbility_obj;
	TreeAbility_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("roaming.TreeAbility","\x77","\xc6","\x8e","\x78");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = TreeAbility_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(TreeAbility_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< TreeAbility_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = TreeAbility_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TreeAbility_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TreeAbility_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace roaming
