// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_Element
#include <Element.h>
#endif
#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_graphic_Fonts
#include <graphic/Fonts.h>
#endif
#ifndef INCLUDED_graphic__Fonts_Buff
#include <graphic/_Fonts/Buff.h>
#endif
#ifndef INCLUDED_graphic__Fonts_Damage
#include <graphic/_Fonts/Damage.h>
#endif
#ifndef INCLUDED_graphic__Fonts_Mirror
#include <graphic/_Fonts/Mirror.h>
#endif
#ifndef INCLUDED_graphic__Fonts_Time
#include <graphic/_Fonts/Time.h>
#endif
#ifndef INCLUDED_lime_text_Font
#include <lime/text/Font.h>
#endif
#ifndef INCLUDED_openfl_text_Font
#include <openfl/text/Font.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_1987c7115db2a92a_53_new,"graphic.Fonts","new",0xc4253150,"graphic.Fonts.new","graphic/Fonts.hx",53,0x29ebd121)
HX_LOCAL_STACK_FRAME(_hx_pos_1987c7115db2a92a_26_init,"graphic.Fonts","init",0xd91eac20,"graphic.Fonts.init","graphic/Fonts.hx",26,0x29ebd121)
HX_LOCAL_STACK_FRAME(_hx_pos_1987c7115db2a92a_39_color,"graphic.Fonts","color",0xadfbee53,"graphic.Fonts.color","graphic/Fonts.hx",39,0x29ebd121)
namespace graphic{

void Fonts_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_1987c7115db2a92a_53_new)
            	}

Dynamic Fonts_obj::__CreateEmpty() { return new Fonts_obj; }

void *Fonts_obj::_hx_vtable = 0;

Dynamic Fonts_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Fonts_obj > _hx_result = new Fonts_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Fonts_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x08f69604;
}

::String Fonts_obj::MIRROR;

::String Fonts_obj::DAMAGE;

::String Fonts_obj::BUFF;

::String Fonts_obj::TIME;

void Fonts_obj::init(){
            	HX_GC_STACKFRAME(&_hx_pos_1987c7115db2a92a_26_init)
HXLINE(  27)		::openfl::text::Font_obj::registerFont(hx::ClassOf< ::graphic::_Fonts::Mirror >());
HXLINE(  28)		::openfl::text::Font_obj::registerFont(hx::ClassOf< ::graphic::_Fonts::Damage >());
HXLINE(  29)		::openfl::text::Font_obj::registerFont(hx::ClassOf< ::graphic::_Fonts::Buff >());
HXLINE(  30)		::openfl::text::Font_obj::registerFont(hx::ClassOf< ::graphic::_Fonts::Time >());
HXLINE(  31)		::graphic::Fonts_obj::MIRROR =  ::graphic::_Fonts::Mirror_obj::__alloc( HX_CTX )->name;
HXLINE(  32)		::graphic::Fonts_obj::DAMAGE =  ::graphic::_Fonts::Damage_obj::__alloc( HX_CTX )->name;
HXLINE(  33)		::graphic::Fonts_obj::BUFF =  ::graphic::_Fonts::Buff_obj::__alloc( HX_CTX )->name;
HXLINE(  34)		::graphic::Fonts_obj::TIME =  ::graphic::_Fonts::Time_obj::__alloc( HX_CTX )->name;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Fonts_obj,init,(void))

int Fonts_obj::color( ::Element element){
            	HX_STACKFRAME(&_hx_pos_1987c7115db2a92a_39_color)
HXDLIN(  39)		if (hx::IsNull( element )) {
HXLINE(  48)			return (int)3406337;
            		}
            		else {
HXDLIN(  39)			switch((int)(_hx_getEnumValueIndex(element))){
            				case (int)0: {
HXLINE(  47)					return (int)13248552;
            				}
            				break;
            				case (int)1: {
HXLINE(  44)					return (int)10180019;
            				}
            				break;
            				case (int)2: {
HXLINE(  43)					return (int)15921783;
            				}
            				break;
            				case (int)3: {
HXLINE(  42)					return (int)6976587;
            				}
            				break;
            				case (int)4: {
HXLINE(  46)					return (int)4232522;
            				}
            				break;
            				case (int)5: {
HXLINE(  41)					return (int)16737545;
            				}
            				break;
            				case (int)6: {
HXLINE(  45)					return (int)4901627;
            				}
            				break;
            			}
            		}
HXLINE(  39)		return (int)0;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Fonts_obj,color,return )


Fonts_obj::Fonts_obj()
{
}

bool Fonts_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"BUFF") ) { outValue = ( BUFF ); return true; }
		if (HX_FIELD_EQ(inName,"TIME") ) { outValue = ( TIME ); return true; }
		if (HX_FIELD_EQ(inName,"init") ) { outValue = init_dyn(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"color") ) { outValue = color_dyn(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"MIRROR") ) { outValue = ( MIRROR ); return true; }
		if (HX_FIELD_EQ(inName,"DAMAGE") ) { outValue = ( DAMAGE ); return true; }
	}
	return false;
}

bool Fonts_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"BUFF") ) { BUFF=ioValue.Cast< ::String >(); return true; }
		if (HX_FIELD_EQ(inName,"TIME") ) { TIME=ioValue.Cast< ::String >(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"MIRROR") ) { MIRROR=ioValue.Cast< ::String >(); return true; }
		if (HX_FIELD_EQ(inName,"DAMAGE") ) { DAMAGE=ioValue.Cast< ::String >(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *Fonts_obj_sMemberStorageInfo = 0;
static hx::StaticInfo Fonts_obj_sStaticStorageInfo[] = {
	{hx::fsString,(void *) &Fonts_obj::MIRROR,HX_HCSTRING("MIRROR","\x3f","\x1e","\x2d","\x08")},
	{hx::fsString,(void *) &Fonts_obj::DAMAGE,HX_HCSTRING("DAMAGE","\x6f","\x3c","\x67","\xd0")},
	{hx::fsString,(void *) &Fonts_obj::BUFF,HX_HCSTRING("BUFF","\xd3","\xd1","\xe0","\x2b")},
	{hx::fsString,(void *) &Fonts_obj::TIME,HX_HCSTRING("TIME","\x0d","\x94","\xbd","\x37")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static void Fonts_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Fonts_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(Fonts_obj::MIRROR,"MIRROR");
	HX_MARK_MEMBER_NAME(Fonts_obj::DAMAGE,"DAMAGE");
	HX_MARK_MEMBER_NAME(Fonts_obj::BUFF,"BUFF");
	HX_MARK_MEMBER_NAME(Fonts_obj::TIME,"TIME");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Fonts_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Fonts_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(Fonts_obj::MIRROR,"MIRROR");
	HX_VISIT_MEMBER_NAME(Fonts_obj::DAMAGE,"DAMAGE");
	HX_VISIT_MEMBER_NAME(Fonts_obj::BUFF,"BUFF");
	HX_VISIT_MEMBER_NAME(Fonts_obj::TIME,"TIME");
};

#endif

hx::Class Fonts_obj::__mClass;

static ::String Fonts_obj_sStaticFields[] = {
	HX_HCSTRING("MIRROR","\x3f","\x1e","\x2d","\x08"),
	HX_HCSTRING("DAMAGE","\x6f","\x3c","\x67","\xd0"),
	HX_HCSTRING("BUFF","\xd3","\xd1","\xe0","\x2b"),
	HX_HCSTRING("TIME","\x0d","\x94","\xbd","\x37"),
	HX_HCSTRING("init","\x10","\x3b","\xbb","\x45"),
	HX_HCSTRING("color","\x63","\x71","\x5c","\x4a"),
	::String(null())
};

void Fonts_obj::__register()
{
	hx::Object *dummy = new Fonts_obj;
	Fonts_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("graphic.Fonts","\x5e","\x89","\x46","\x85");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Fonts_obj::__GetStatic;
	__mClass->mSetStaticField = &Fonts_obj::__SetStatic;
	__mClass->mMarkFunc = Fonts_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Fonts_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< Fonts_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Fonts_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Fonts_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Fonts_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace graphic
