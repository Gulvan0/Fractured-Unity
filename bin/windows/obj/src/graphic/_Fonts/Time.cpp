// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_graphic__Fonts_Time
#include <graphic/_Fonts/Time.h>
#endif
#ifndef INCLUDED_haxe_Resource
#include <haxe/Resource.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_lime_text_Font
#include <lime/text/Font.h>
#endif
#ifndef INCLUDED_openfl_text_Font
#include <openfl/text/Font.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_808f968cccf42536_312_new,"graphic._Fonts.Time","new",0x03942c82,"graphic._Fonts.Time.new","lime/_macros/AssetsMacro.hx",312,0xfe246b98)
HX_LOCAL_STACK_FRAME(_hx_pos_68ce5534e8d19f5e_1_boot,"graphic._Fonts.Time","boot",0x162bc5d0,"graphic._Fonts.Time.boot","?",1,0x0000003f)
namespace graphic{
namespace _Fonts{

void Time_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_808f968cccf42536_312_new)
HXLINE( 314)		super::__construct(null());
HXLINE( 316)		this->_hx___fromBytes(::haxe::Resource_obj::getBytes(::graphic::_Fonts::Time_obj::resourceName));
            	}

Dynamic Time_obj::__CreateEmpty() { return new Time_obj; }

void *Time_obj::_hx_vtable = 0;

Dynamic Time_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Time_obj > _hx_result = new Time_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Time_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x6aed2e71) {
		if (inClassId<=(int)0x0419b6fa) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x0419b6fa;
		} else {
			return inClassId==(int)0x6aed2e71;
		}
	} else {
		return inClassId==(int)0x7d07fbf0;
	}
}

::String Time_obj::resourceName;


hx::ObjectPtr< Time_obj > Time_obj::__new() {
	hx::ObjectPtr< Time_obj > __this = new Time_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< Time_obj > Time_obj::__alloc(hx::Ctx *_hx_ctx) {
	Time_obj *__this = (Time_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Time_obj), true, "graphic._Fonts.Time"));
	*(void **)__this = Time_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

Time_obj::Time_obj()
{
}

bool Time_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 12:
		if (HX_FIELD_EQ(inName,"resourceName") ) { outValue = ( resourceName ); return true; }
	}
	return false;
}

bool Time_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 12:
		if (HX_FIELD_EQ(inName,"resourceName") ) { resourceName=ioValue.Cast< ::String >(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *Time_obj_sMemberStorageInfo = 0;
static hx::StaticInfo Time_obj_sStaticStorageInfo[] = {
	{hx::fsString,(void *) &Time_obj::resourceName,HX_HCSTRING("resourceName","\x39","\x7a","\x62","\x90")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static void Time_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Time_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(Time_obj::resourceName,"resourceName");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Time_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Time_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(Time_obj::resourceName,"resourceName");
};

#endif

hx::Class Time_obj::__mClass;

static ::String Time_obj_sStaticFields[] = {
	HX_HCSTRING("resourceName","\x39","\x7a","\x62","\x90"),
	::String(null())
};

void Time_obj::__register()
{
	hx::Object *dummy = new Time_obj;
	Time_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("graphic._Fonts.Time","\x90","\x83","\xa7","\x1d");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Time_obj::__GetStatic;
	__mClass->mSetStaticField = &Time_obj::__SetStatic;
	__mClass->mMarkFunc = Time_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Time_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< Time_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Time_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Time_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Time_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Time_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_68ce5534e8d19f5e_1_boot)
HXDLIN(   1)		resourceName = HX_("LIME_font_graphic__Fonts_Time",aa,43,b9,59);
            	}
}

} // end namespace graphic
} // end namespace _Fonts
