// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_SSprite
#include <SSprite.h>
#endif
#ifndef INCLUDED_graphic_HintTextfield
#include <graphic/HintTextfield.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_Graphics
#include <openfl/display/Graphics.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_text_TextField
#include <openfl/text/TextField.h>
#endif
#ifndef INCLUDED_openfl_text_TextFormat
#include <openfl/text/TextFormat.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_c7931fa11ca5032b_22_new,"graphic.HintTextfield","new",0x244d8af2,"graphic.HintTextfield.new","graphic/HintTextfield.hx",22,0x03b06abf)
HX_LOCAL_STACK_FRAME(_hx_pos_c7931fa11ca5032b_35_drawHeader,"graphic.HintTextfield","drawHeader",0xc19a205f,"graphic.HintTextfield.drawHeader","graphic/HintTextfield.hx",35,0x03b06abf)
HX_LOCAL_STACK_FRAME(_hx_pos_c7931fa11ca5032b_56_drawBody,"graphic.HintTextfield","drawBody",0xec23d8f4,"graphic.HintTextfield.drawBody","graphic/HintTextfield.hx",56,0x03b06abf)
HX_LOCAL_STACK_FRAME(_hx_pos_c7931fa11ca5032b_79_get_textHeight,"graphic.HintTextfield","get_textHeight",0xa0ab1b6b,"graphic.HintTextfield.get_textHeight","graphic/HintTextfield.hx",79,0x03b06abf)
namespace graphic{

void HintTextfield_obj::__construct(::String header,::String text){
            	HX_STACKFRAME(&_hx_pos_c7931fa11ca5032b_22_new)
HXLINE(  23)		super::__construct();
HXLINE(  25)		this->drawBody(text);
HXLINE(  26)		this->drawHeader(header);
HXLINE(  28)		this->addChild(this->headerbox);
HXLINE(  29)		this->addChild(this->headertf);
HXLINE(  30)		 ::openfl::display::Sprite _hx_tmp = this->box;
HXDLIN(  30)		this->add(_hx_tmp,(int)0,this->headerbox->get_height());
HXLINE(  31)		 ::openfl::text::TextField _hx_tmp1 = this->tf;
HXDLIN(  31)		this->add(_hx_tmp1,(int)0,this->headerbox->get_height());
            	}

Dynamic HintTextfield_obj::__CreateEmpty() { return new HintTextfield_obj; }

void *HintTextfield_obj::_hx_vtable = 0;

Dynamic HintTextfield_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< HintTextfield_obj > _hx_result = new HintTextfield_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool HintTextfield_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x1b123bf8) {
		if (inClassId<=(int)0x17120186) {
			if (inClassId<=(int)0x0ddfced7) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0ddfced7;
			} else {
				return inClassId==(int)0x17120186;
			}
		} else {
			return inClassId==(int)0x19c29573 || inClassId==(int)0x1b123bf8;
		}
	} else {
		if (inClassId<=(int)0x6d4e35de) {
			return inClassId==(int)0x3f2b00af || inClassId==(int)0x6d4e35de;
		} else {
			return inClassId==(int)0x739fd0b8;
		}
	}
}

void HintTextfield_obj::drawHeader(::String header){
            	HX_GC_STACKFRAME(&_hx_pos_c7931fa11ca5032b_35_drawHeader)
HXLINE(  36)		 ::openfl::text::TextFormat format =  ::openfl::text::TextFormat_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null());
HXLINE(  37)		format->color = (int)0;
HXLINE(  38)		format->size = (int)14;
HXLINE(  39)		format->bold = true;
HXLINE(  41)		this->headertf =  ::openfl::text::TextField_obj::__alloc( HX_CTX );
HXLINE(  42)		this->headertf->set_textColor((int)0);
HXLINE(  43)		 ::openfl::text::TextField _hx_tmp = this->headertf;
HXDLIN(  43)		Float _hx_tmp1;
HXDLIN(  43)		if (((this->headertf->get_textWidth() + (int)5) > (int)150)) {
HXLINE(  43)			_hx_tmp1 = (this->headertf->get_textWidth() + (int)5);
            		}
            		else {
HXLINE(  43)			_hx_tmp1 = (int)150;
            		}
HXDLIN(  43)		_hx_tmp->set_width(_hx_tmp1);
HXLINE(  44)		this->headertf->set_selectable(false);
HXLINE(  45)		this->headertf->set_defaultTextFormat(format);
HXLINE(  46)		this->headertf->set_text(header);
HXLINE(  48)		this->headerbox =  ::openfl::display::Sprite_obj::__alloc( HX_CTX );
HXLINE(  49)		this->headerbox->get_graphics()->lineStyle((int)1,(int)10066329,((Float)0.8),null(),null(),null(),null(),null());
HXLINE(  50)		this->headerbox->get_graphics()->beginFill((int)11579568,null());
HXLINE(  51)		 ::openfl::display::Graphics _hx_tmp2 = this->headerbox->get_graphics();
HXDLIN(  51)		Float _hx_tmp3 = this->headertf->get_width();
HXDLIN(  51)		_hx_tmp2->drawRect((int)0,(int)0,_hx_tmp3,(this->headertf->get_textHeight() + (int)5));
HXLINE(  52)		this->headerbox->get_graphics()->endFill();
            	}


HX_DEFINE_DYNAMIC_FUNC1(HintTextfield_obj,drawHeader,(void))

void HintTextfield_obj::drawBody(::String text){
            	HX_GC_STACKFRAME(&_hx_pos_c7931fa11ca5032b_56_drawBody)
HXLINE(  57)		 ::openfl::text::TextFormat format =  ::openfl::text::TextFormat_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null());
HXLINE(  58)		format->color = (int)16777215;
HXLINE(  59)		format->size = (int)12;
HXLINE(  60)		format->bold = false;
HXLINE(  62)		this->tf =  ::openfl::text::TextField_obj::__alloc( HX_CTX );
HXLINE(  63)		this->tf->set_textColor((int)16777215);
HXLINE(  64)		 ::openfl::text::TextField _hx_tmp = this->tf;
HXDLIN(  64)		Float _hx_tmp1;
HXDLIN(  64)		if (hx::IsNotNull( this->headertf )) {
HXLINE(  64)			_hx_tmp1 = this->headertf->get_width();
            		}
            		else {
HXLINE(  64)			_hx_tmp1 = (int)150;
            		}
HXDLIN(  64)		_hx_tmp->set_width(_hx_tmp1);
HXLINE(  65)		this->tf->set_selectable(false);
HXLINE(  66)		this->tf->set_wordWrap(true);
HXLINE(  67)		this->tf->setTextFormat(format,null(),null());
HXLINE(  68)		this->tf->set_text(text);
HXLINE(  70)		this->box =  ::openfl::display::Sprite_obj::__alloc( HX_CTX );
HXLINE(  71)		this->box->get_graphics()->lineStyle((int)1,(int)10066329,((Float)0.8),null(),null(),null(),null(),null());
HXLINE(  72)		this->box->get_graphics()->beginFill((int)0,((Float)0.7));
HXLINE(  73)		 ::openfl::display::Graphics _hx_tmp2 = this->box->get_graphics();
HXDLIN(  73)		Float _hx_tmp3 = this->tf->get_width();
HXDLIN(  73)		_hx_tmp2->drawRect((int)0,(int)0,_hx_tmp3,(this->tf->get_textHeight() + (int)5));
HXLINE(  74)		this->box->get_graphics()->endFill();
            	}


HX_DEFINE_DYNAMIC_FUNC1(HintTextfield_obj,drawBody,(void))

Float HintTextfield_obj::get_textHeight(){
            	HX_STACKFRAME(&_hx_pos_c7931fa11ca5032b_79_get_textHeight)
HXDLIN(  79)		Float _hx_tmp = this->tf->get_textHeight();
HXDLIN(  79)		return ((_hx_tmp + this->headertf->get_textHeight()) + (int)10);
            	}


HX_DEFINE_DYNAMIC_FUNC0(HintTextfield_obj,get_textHeight,return )


hx::ObjectPtr< HintTextfield_obj > HintTextfield_obj::__new(::String header,::String text) {
	hx::ObjectPtr< HintTextfield_obj > __this = new HintTextfield_obj();
	__this->__construct(header,text);
	return __this;
}

hx::ObjectPtr< HintTextfield_obj > HintTextfield_obj::__alloc(hx::Ctx *_hx_ctx,::String header,::String text) {
	HintTextfield_obj *__this = (HintTextfield_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(HintTextfield_obj), true, "graphic.HintTextfield"));
	*(void **)__this = HintTextfield_obj::_hx_vtable;
	__this->__construct(header,text);
	return __this;
}

HintTextfield_obj::HintTextfield_obj()
{
}

void HintTextfield_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(HintTextfield);
	HX_MARK_MEMBER_NAME(headertf,"headertf");
	HX_MARK_MEMBER_NAME(headerbox,"headerbox");
	HX_MARK_MEMBER_NAME(tf,"tf");
	HX_MARK_MEMBER_NAME(box,"box");
	HX_MARK_MEMBER_NAME(textHeight,"textHeight");
	 ::openfl::display::Sprite_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void HintTextfield_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(headertf,"headertf");
	HX_VISIT_MEMBER_NAME(headerbox,"headerbox");
	HX_VISIT_MEMBER_NAME(tf,"tf");
	HX_VISIT_MEMBER_NAME(box,"box");
	HX_VISIT_MEMBER_NAME(textHeight,"textHeight");
	 ::openfl::display::Sprite_obj::__Visit(HX_VISIT_ARG);
}

hx::Val HintTextfield_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"tf") ) { return hx::Val( tf ); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"box") ) { return hx::Val( box ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"headertf") ) { return hx::Val( headertf ); }
		if (HX_FIELD_EQ(inName,"drawBody") ) { return hx::Val( drawBody_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"headerbox") ) { return hx::Val( headerbox ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"textHeight") ) { return hx::Val( inCallProp == hx::paccAlways ? get_textHeight() : textHeight ); }
		if (HX_FIELD_EQ(inName,"drawHeader") ) { return hx::Val( drawHeader_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"get_textHeight") ) { return hx::Val( get_textHeight_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val HintTextfield_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"tf") ) { tf=inValue.Cast<  ::openfl::text::TextField >(); return inValue; }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"box") ) { box=inValue.Cast<  ::openfl::display::Sprite >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"headertf") ) { headertf=inValue.Cast<  ::openfl::text::TextField >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"headerbox") ) { headerbox=inValue.Cast<  ::openfl::display::Sprite >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"textHeight") ) { textHeight=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void HintTextfield_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("headertf","\x3f","\xac","\x3f","\x44"));
	outFields->push(HX_HCSTRING("headerbox","\x9e","\x6a","\x69","\x73"));
	outFields->push(HX_HCSTRING("tf","\x72","\x65","\x00","\x00"));
	outFields->push(HX_HCSTRING("box","\x0b","\xbe","\x4a","\x00"));
	outFields->push(HX_HCSTRING("textHeight","\x74","\x88","\x3c","\x39"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo HintTextfield_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::openfl::text::TextField*/ ,(int)offsetof(HintTextfield_obj,headertf),HX_HCSTRING("headertf","\x3f","\xac","\x3f","\x44")},
	{hx::fsObject /*::openfl::display::Sprite*/ ,(int)offsetof(HintTextfield_obj,headerbox),HX_HCSTRING("headerbox","\x9e","\x6a","\x69","\x73")},
	{hx::fsObject /*::openfl::text::TextField*/ ,(int)offsetof(HintTextfield_obj,tf),HX_HCSTRING("tf","\x72","\x65","\x00","\x00")},
	{hx::fsObject /*::openfl::display::Sprite*/ ,(int)offsetof(HintTextfield_obj,box),HX_HCSTRING("box","\x0b","\xbe","\x4a","\x00")},
	{hx::fsFloat,(int)offsetof(HintTextfield_obj,textHeight),HX_HCSTRING("textHeight","\x74","\x88","\x3c","\x39")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *HintTextfield_obj_sStaticStorageInfo = 0;
#endif

static ::String HintTextfield_obj_sMemberFields[] = {
	HX_HCSTRING("headertf","\x3f","\xac","\x3f","\x44"),
	HX_HCSTRING("headerbox","\x9e","\x6a","\x69","\x73"),
	HX_HCSTRING("tf","\x72","\x65","\x00","\x00"),
	HX_HCSTRING("box","\x0b","\xbe","\x4a","\x00"),
	HX_HCSTRING("textHeight","\x74","\x88","\x3c","\x39"),
	HX_HCSTRING("drawHeader","\xb1","\x84","\xc3","\x3e"),
	HX_HCSTRING("drawBody","\xc6","\x24","\x85","\x55"),
	HX_HCSTRING("get_textHeight","\xbd","\x10","\x32","\xaf"),
	::String(null()) };

static void HintTextfield_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(HintTextfield_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void HintTextfield_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(HintTextfield_obj::__mClass,"__mClass");
};

#endif

hx::Class HintTextfield_obj::__mClass;

void HintTextfield_obj::__register()
{
	hx::Object *dummy = new HintTextfield_obj;
	HintTextfield_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("graphic.HintTextfield","\x00","\xea","\xd4","\xc7");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = HintTextfield_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(HintTextfield_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< HintTextfield_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = HintTextfield_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = HintTextfield_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = HintTextfield_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace graphic
