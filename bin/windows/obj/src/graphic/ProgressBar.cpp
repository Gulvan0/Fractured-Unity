// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_graphic_ProgressBar
#include <graphic/ProgressBar.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_Graphics
#include <openfl/display/Graphics.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_Shape
#include <openfl/display/Shape.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_575e0c7b4ff12d49_27_new,"graphic.ProgressBar","new",0x8ee9fe32,"graphic.ProgressBar.new","graphic/ProgressBar.hx",27,0x3099ed3f)
HX_LOCAL_STACK_FRAME(_hx_pos_575e0c7b4ff12d49_37_set_progress,"graphic.ProgressBar","set_progress",0x13105718,"graphic.ProgressBar.set_progress","graphic/ProgressBar.hx",37,0x3099ed3f)
HX_LOCAL_STACK_FRAME(_hx_pos_575e0c7b4ff12d49_56_get_colour,"graphic.ProgressBar","get_colour",0x90a94883,"graphic.ProgressBar.get_colour","graphic/ProgressBar.hx",56,0x3099ed3f)
HX_LOCAL_STACK_FRAME(_hx_pos_575e0c7b4ff12d49_66_darken,"graphic.ProgressBar","darken",0x9dccf7cd,"graphic.ProgressBar.darken","graphic/ProgressBar.hx",66,0x3099ed3f)
HX_LOCAL_STACK_FRAME(_hx_pos_575e0c7b4ff12d49_79_get_progress,"graphic.ProgressBar","get_progress",0xfe1733a4,"graphic.ProgressBar.get_progress","graphic/ProgressBar.hx",79,0x3099ed3f)
HX_LOCAL_STACK_FRAME(_hx_pos_575e0c7b4ff12d49_16_boot,"graphic.ProgressBar","boot",0x75ed6e20,"graphic.ProgressBar.boot","graphic/ProgressBar.hx",16,0x3099ed3f)
namespace graphic{

void ProgressBar_obj::__construct(Float width,Float height, ::Dynamic __o_colour, ::Dynamic __o_thickness, ::Dynamic __o_initialProgress){
 ::Dynamic colour = __o_colour.Default(-1);
 ::Dynamic thickness = __o_thickness.Default(((Float)0.5));
 ::Dynamic initialProgress = __o_initialProgress.Default(1);
            	HX_STACKFRAME(&_hx_pos_575e0c7b4ff12d49_27_new)
HXLINE(  28)		super::__construct();
HXLINE(  29)		this->barWidth = width;
HXLINE(  30)		this->barHeight = height;
HXLINE(  31)		this->fillColour = colour;
HXLINE(  32)		this->lineThickness = thickness;
HXLINE(  33)		this->set_progress(initialProgress);
            	}

Dynamic ProgressBar_obj::__CreateEmpty() { return new ProgressBar_obj; }

void *ProgressBar_obj::_hx_vtable = 0;

Dynamic ProgressBar_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ProgressBar_obj > _hx_result = new ProgressBar_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4]);
	return _hx_result;
}

bool ProgressBar_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x19c29573) {
		if (inClassId<=(int)0x01c05e1f) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x01c05e1f;
		} else {
			return inClassId==(int)0x19c29573;
		}
	} else {
		return inClassId==(int)0x1b123bf8 || inClassId==(int)0x5012ca66;
	}
}

Float ProgressBar_obj::set_progress(Float value){
            	HX_STACKFRAME(&_hx_pos_575e0c7b4ff12d49_37_set_progress)
HXLINE(  38)		Float fillWidth = (this->barWidth * value);
HXLINE(  39)		int colour;
HXDLIN(  39)		if ((this->fillColour != ::graphic::ProgressBar_obj::GREEN_TO_RED)) {
HXLINE(  39)			colour = this->fillColour;
            		}
            		else {
HXLINE(  39)			colour = this->get_colour(value);
            		}
HXLINE(  40)		this->_progress = value;
HXLINE(  42)		this->get_graphics()->clear();
HXLINE(  43)		 ::openfl::display::Graphics _hx_tmp = this->get_graphics();
HXDLIN(  43)		Float _hx_tmp1 = this->lineThickness;
HXDLIN(  43)		_hx_tmp->lineStyle(_hx_tmp1,this->darken(colour),(int)1,false,(int)2,(int)1,(int)1,(int)3);
HXLINE(  44)		 ::openfl::display::Graphics _hx_tmp2 = this->get_graphics();
HXDLIN(  44)		_hx_tmp2->beginFill(this->darken(colour),null());
HXLINE(  45)		this->get_graphics()->drawRect((int)0,(int)0,this->barWidth,this->barHeight);
HXLINE(  46)		this->get_graphics()->endFill();
HXLINE(  48)		this->get_graphics()->beginFill(colour,null());
HXLINE(  49)		 ::openfl::display::Graphics _hx_tmp3 = this->get_graphics();
HXDLIN(  49)		_hx_tmp3->drawRect(((Float)1.5),((Float)1.5),(fillWidth - (int)3),(this->barHeight - (int)3));
HXLINE(  50)		this->get_graphics()->endFill();
HXLINE(  52)		return this->get_progress();
            	}


HX_DEFINE_DYNAMIC_FUNC1(ProgressBar_obj,set_progress,return )

int ProgressBar_obj::get_colour(Float prog){
            	HX_STACKFRAME(&_hx_pos_575e0c7b4ff12d49_56_get_colour)
HXLINE(  57)		int rp = ::Math_obj::round(((int)255 * ((int)1 - prog)));
HXLINE(  58)		int gp = ::Math_obj::round(((int)204 * prog));
HXLINE(  59)		int diff = ::Math_obj::round(::Math_obj::min(((int)255 - rp),((int)204 - gp)));
HXLINE(  60)		rp = (rp + diff);
HXLINE(  61)		gp = (gp + diff);
HXLINE(  62)		return (((((rp * (int)16) * (int)16) * (int)16) * (int)16) + ((gp * (int)16) * (int)16));
            	}


HX_DEFINE_DYNAMIC_FUNC1(ProgressBar_obj,get_colour,return )

int ProgressBar_obj::darken(int color){
            	HX_STACKFRAME(&_hx_pos_575e0c7b4ff12d49_66_darken)
HXLINE(  67)		int red = ::Math_obj::floor(((Float)color / (Float)::Math_obj::pow((int)16,(int)4)));
HXLINE(  68)		int blue = ::Math_obj::round(hx::Mod(color,::Math_obj::pow((int)16,(int)2)));
HXLINE(  69)		Float green = ((color - (red * ::Math_obj::pow((int)16,(int)4))) - blue);
HXDLIN(  69)		int green1 = ::Math_obj::round(((Float)green / (Float)::Math_obj::pow((int)16,(int)2)));
HXLINE(  70)		red = (red - ::Math_obj::ceil((red * ((Float)0.6))));
HXLINE(  71)		green1 = (green1 - ::Math_obj::ceil((green1 * ((Float)0.6))));
HXLINE(  72)		blue = (blue - ::Math_obj::ceil((blue * ((Float)0.6))));
HXLINE(  73)		if ((this->fillColour == (int)-1)) {
HXLINE(  73)			blue = ::Math_obj::round(((Float)(red + green1) / (Float)(int)6));
            		}
HXLINE(  74)		Float _hx_tmp = (red * ::Math_obj::pow((int)16,(int)4));
HXDLIN(  74)		return ::Math_obj::round(((_hx_tmp + (green1 * ::Math_obj::pow((int)16,(int)2))) + blue));
            	}


HX_DEFINE_DYNAMIC_FUNC1(ProgressBar_obj,darken,return )

Float ProgressBar_obj::get_progress(){
            	HX_STACKFRAME(&_hx_pos_575e0c7b4ff12d49_79_get_progress)
HXDLIN(  79)		return this->_progress;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ProgressBar_obj,get_progress,return )

int ProgressBar_obj::GREEN_TO_RED;


hx::ObjectPtr< ProgressBar_obj > ProgressBar_obj::__new(Float width,Float height, ::Dynamic __o_colour, ::Dynamic __o_thickness, ::Dynamic __o_initialProgress) {
	hx::ObjectPtr< ProgressBar_obj > __this = new ProgressBar_obj();
	__this->__construct(width,height,__o_colour,__o_thickness,__o_initialProgress);
	return __this;
}

hx::ObjectPtr< ProgressBar_obj > ProgressBar_obj::__alloc(hx::Ctx *_hx_ctx,Float width,Float height, ::Dynamic __o_colour, ::Dynamic __o_thickness, ::Dynamic __o_initialProgress) {
	ProgressBar_obj *__this = (ProgressBar_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(ProgressBar_obj), true, "graphic.ProgressBar"));
	*(void **)__this = ProgressBar_obj::_hx_vtable;
	__this->__construct(width,height,__o_colour,__o_thickness,__o_initialProgress);
	return __this;
}

ProgressBar_obj::ProgressBar_obj()
{
}

hx::Val ProgressBar_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"darken") ) { return hx::Val( darken_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"barWidth") ) { return hx::Val( barWidth ); }
		if (HX_FIELD_EQ(inName,"progress") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_progress() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"barHeight") ) { return hx::Val( barHeight ); }
		if (HX_FIELD_EQ(inName,"_progress") ) { return hx::Val( _progress ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"fillColour") ) { return hx::Val( fillColour ); }
		if (HX_FIELD_EQ(inName,"get_colour") ) { return hx::Val( get_colour_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"set_progress") ) { return hx::Val( set_progress_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_progress") ) { return hx::Val( get_progress_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"lineThickness") ) { return hx::Val( lineThickness ); }
	}
	return super::__Field(inName,inCallProp);
}

bool ProgressBar_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 12:
		if (HX_FIELD_EQ(inName,"GREEN_TO_RED") ) { outValue = ( GREEN_TO_RED ); return true; }
	}
	return false;
}

hx::Val ProgressBar_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"barWidth") ) { barWidth=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"progress") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_progress(inValue.Cast< Float >()) ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"barHeight") ) { barHeight=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_progress") ) { _progress=inValue.Cast< Float >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"fillColour") ) { fillColour=inValue.Cast< int >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"lineThickness") ) { lineThickness=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool ProgressBar_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 12:
		if (HX_FIELD_EQ(inName,"GREEN_TO_RED") ) { GREEN_TO_RED=ioValue.Cast< int >(); return true; }
	}
	return false;
}

void ProgressBar_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("barWidth","\x33","\xf7","\x30","\x99"));
	outFields->push(HX_HCSTRING("barHeight","\x1a","\xce","\xf6","\x27"));
	outFields->push(HX_HCSTRING("fillColour","\x2f","\x4f","\x21","\xca"));
	outFields->push(HX_HCSTRING("lineThickness","\xe0","\x1a","\xe6","\x9d"));
	outFields->push(HX_HCSTRING("progress","\xad","\xf7","\x2a","\x86"));
	outFields->push(HX_HCSTRING("_progress","\x0c","\xef","\xc0","\xcd"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo ProgressBar_obj_sMemberStorageInfo[] = {
	{hx::fsFloat,(int)offsetof(ProgressBar_obj,barWidth),HX_HCSTRING("barWidth","\x33","\xf7","\x30","\x99")},
	{hx::fsFloat,(int)offsetof(ProgressBar_obj,barHeight),HX_HCSTRING("barHeight","\x1a","\xce","\xf6","\x27")},
	{hx::fsInt,(int)offsetof(ProgressBar_obj,fillColour),HX_HCSTRING("fillColour","\x2f","\x4f","\x21","\xca")},
	{hx::fsFloat,(int)offsetof(ProgressBar_obj,lineThickness),HX_HCSTRING("lineThickness","\xe0","\x1a","\xe6","\x9d")},
	{hx::fsFloat,(int)offsetof(ProgressBar_obj,_progress),HX_HCSTRING("_progress","\x0c","\xef","\xc0","\xcd")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo ProgressBar_obj_sStaticStorageInfo[] = {
	{hx::fsInt,(void *) &ProgressBar_obj::GREEN_TO_RED,HX_HCSTRING("GREEN_TO_RED","\x89","\x12","\xfb","\x5f")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String ProgressBar_obj_sMemberFields[] = {
	HX_HCSTRING("barWidth","\x33","\xf7","\x30","\x99"),
	HX_HCSTRING("barHeight","\x1a","\xce","\xf6","\x27"),
	HX_HCSTRING("fillColour","\x2f","\x4f","\x21","\xca"),
	HX_HCSTRING("lineThickness","\xe0","\x1a","\xe6","\x9d"),
	HX_HCSTRING("_progress","\x0c","\xef","\xc0","\xcd"),
	HX_HCSTRING("set_progress","\x2a","\xcf","\x3d","\x50"),
	HX_HCSTRING("get_colour","\x15","\x38","\x0e","\xb7"),
	HX_HCSTRING("darken","\x5f","\x36","\x3a","\x21"),
	HX_HCSTRING("get_progress","\xb6","\xab","\x44","\x3b"),
	::String(null()) };

static void ProgressBar_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ProgressBar_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(ProgressBar_obj::GREEN_TO_RED,"GREEN_TO_RED");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ProgressBar_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ProgressBar_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(ProgressBar_obj::GREEN_TO_RED,"GREEN_TO_RED");
};

#endif

hx::Class ProgressBar_obj::__mClass;

static ::String ProgressBar_obj_sStaticFields[] = {
	HX_HCSTRING("GREEN_TO_RED","\x89","\x12","\xfb","\x5f"),
	::String(null())
};

void ProgressBar_obj::__register()
{
	hx::Object *dummy = new ProgressBar_obj;
	ProgressBar_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("graphic.ProgressBar","\x40","\xbd","\xe6","\xef");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &ProgressBar_obj::__GetStatic;
	__mClass->mSetStaticField = &ProgressBar_obj::__SetStatic;
	__mClass->mMarkFunc = ProgressBar_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(ProgressBar_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(ProgressBar_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< ProgressBar_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ProgressBar_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ProgressBar_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ProgressBar_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void ProgressBar_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_575e0c7b4ff12d49_16_boot)
HXDLIN(  16)		GREEN_TO_RED = (int)-1;
            	}
}

} // end namespace graphic
