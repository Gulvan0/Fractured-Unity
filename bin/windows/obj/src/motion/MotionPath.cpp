// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_motion_BezierPath
#include <motion/BezierPath.h>
#endif
#ifndef INCLUDED_motion_ComponentPath
#include <motion/ComponentPath.h>
#endif
#ifndef INCLUDED_motion_IComponentPath
#include <motion/IComponentPath.h>
#endif
#ifndef INCLUDED_motion_LinearPath
#include <motion/LinearPath.h>
#endif
#ifndef INCLUDED_motion_MotionPath
#include <motion/MotionPath.h>
#endif
#ifndef INCLUDED_motion_RotationPath
#include <motion/RotationPath.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_ec7a95a666d8fcbd_16_new,"motion.MotionPath","new",0xfdf154c5,"motion.MotionPath.new","motion/MotionPath.hx",16,0x95e57daa)
HX_LOCAL_STACK_FRAME(_hx_pos_ec7a95a666d8fcbd_35_bezier,"motion.MotionPath","bezier",0xccd588da,"motion.MotionPath.bezier","motion/MotionPath.hx",35,0x95e57daa)
HX_LOCAL_STACK_FRAME(_hx_pos_ec7a95a666d8fcbd_52_line,"motion.MotionPath","line",0x33e96bef,"motion.MotionPath.line","motion/MotionPath.hx",52,0x95e57daa)
HX_LOCAL_STACK_FRAME(_hx_pos_ec7a95a666d8fcbd_69_get_rotation,"motion.MotionPath","get_rotation",0xe7933842,"motion.MotionPath.get_rotation","motion/MotionPath.hx",69,0x95e57daa)
HX_LOCAL_STACK_FRAME(_hx_pos_ec7a95a666d8fcbd_84_get_x,"motion.MotionPath","get_x",0x54b3ccf4,"motion.MotionPath.get_x","motion/MotionPath.hx",84,0x95e57daa)
HX_LOCAL_STACK_FRAME(_hx_pos_ec7a95a666d8fcbd_91_get_y,"motion.MotionPath","get_y",0x54b3ccf5,"motion.MotionPath.get_y","motion/MotionPath.hx",91,0x95e57daa)
namespace motion{

void MotionPath_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_ec7a95a666d8fcbd_16_new)
HXLINE(  18)		this->_x =  ::motion::ComponentPath_obj::__alloc( HX_CTX );
HXLINE(  19)		this->_y =  ::motion::ComponentPath_obj::__alloc( HX_CTX );
HXLINE(  21)		this->_rotation = null();
            	}

Dynamic MotionPath_obj::__CreateEmpty() { return new MotionPath_obj; }

void *MotionPath_obj::_hx_vtable = 0;

Dynamic MotionPath_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< MotionPath_obj > _hx_result = new MotionPath_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool MotionPath_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x7cab8969;
}

 ::motion::MotionPath MotionPath_obj::bezier(Float x,Float y,Float controlX,Float controlY,hx::Null< Float >  __o_strength){
Float strength = __o_strength.Default(1);
            	HX_GC_STACKFRAME(&_hx_pos_ec7a95a666d8fcbd_35_bezier)
HXLINE(  37)		 ::motion::ComponentPath _hx_tmp = this->_x;
HXDLIN(  37)		_hx_tmp->addPath( ::motion::BezierPath_obj::__alloc( HX_CTX ,x,controlX,strength));
HXLINE(  38)		 ::motion::ComponentPath _hx_tmp1 = this->_y;
HXDLIN(  38)		_hx_tmp1->addPath( ::motion::BezierPath_obj::__alloc( HX_CTX ,y,controlY,strength));
HXLINE(  40)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC5(MotionPath_obj,bezier,return )

 ::motion::MotionPath MotionPath_obj::line(Float x,Float y,hx::Null< Float >  __o_strength){
Float strength = __o_strength.Default(1);
            	HX_GC_STACKFRAME(&_hx_pos_ec7a95a666d8fcbd_52_line)
HXLINE(  54)		 ::motion::ComponentPath _hx_tmp = this->_x;
HXDLIN(  54)		_hx_tmp->addPath( ::motion::LinearPath_obj::__alloc( HX_CTX ,x,strength));
HXLINE(  55)		 ::motion::ComponentPath _hx_tmp1 = this->_y;
HXDLIN(  55)		_hx_tmp1->addPath( ::motion::LinearPath_obj::__alloc( HX_CTX ,y,strength));
HXLINE(  57)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC3(MotionPath_obj,line,return )

 ::motion::RotationPath MotionPath_obj::get_rotation(){
            	HX_GC_STACKFRAME(&_hx_pos_ec7a95a666d8fcbd_69_get_rotation)
HXLINE(  71)		if (hx::IsNull( this->_rotation )) {
HXLINE(  73)			this->_rotation =  ::motion::RotationPath_obj::__alloc( HX_CTX ,this->_x,this->_y);
            		}
HXLINE(  77)		return this->_rotation;
            	}


HX_DEFINE_DYNAMIC_FUNC0(MotionPath_obj,get_rotation,return )

::Dynamic MotionPath_obj::get_x(){
            	HX_STACKFRAME(&_hx_pos_ec7a95a666d8fcbd_84_get_x)
HXDLIN(  84)		return this->_x;
            	}


HX_DEFINE_DYNAMIC_FUNC0(MotionPath_obj,get_x,return )

::Dynamic MotionPath_obj::get_y(){
            	HX_STACKFRAME(&_hx_pos_ec7a95a666d8fcbd_91_get_y)
HXDLIN(  91)		return this->_y;
            	}


HX_DEFINE_DYNAMIC_FUNC0(MotionPath_obj,get_y,return )


hx::ObjectPtr< MotionPath_obj > MotionPath_obj::__new() {
	hx::ObjectPtr< MotionPath_obj > __this = new MotionPath_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< MotionPath_obj > MotionPath_obj::__alloc(hx::Ctx *_hx_ctx) {
	MotionPath_obj *__this = (MotionPath_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(MotionPath_obj), true, "motion.MotionPath"));
	*(void **)__this = MotionPath_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

MotionPath_obj::MotionPath_obj()
{
}

void MotionPath_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(MotionPath);
	HX_MARK_MEMBER_NAME(rotation,"rotation");
	HX_MARK_MEMBER_NAME(x,"x");
	HX_MARK_MEMBER_NAME(y,"y");
	HX_MARK_MEMBER_NAME(_rotation,"_rotation");
	HX_MARK_MEMBER_NAME(_x,"_x");
	HX_MARK_MEMBER_NAME(_y,"_y");
	HX_MARK_END_CLASS();
}

void MotionPath_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(rotation,"rotation");
	HX_VISIT_MEMBER_NAME(x,"x");
	HX_VISIT_MEMBER_NAME(y,"y");
	HX_VISIT_MEMBER_NAME(_rotation,"_rotation");
	HX_VISIT_MEMBER_NAME(_x,"_x");
	HX_VISIT_MEMBER_NAME(_y,"_y");
}

hx::Val MotionPath_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { return hx::Val( inCallProp == hx::paccAlways ? get_x() : x ); }
		if (HX_FIELD_EQ(inName,"y") ) { return hx::Val( inCallProp == hx::paccAlways ? get_y() : y ); }
		break;
	case 2:
		if (HX_FIELD_EQ(inName,"_x") ) { return hx::Val( _x ); }
		if (HX_FIELD_EQ(inName,"_y") ) { return hx::Val( _y ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"line") ) { return hx::Val( line_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"get_x") ) { return hx::Val( get_x_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_y") ) { return hx::Val( get_y_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"bezier") ) { return hx::Val( bezier_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"rotation") ) { return hx::Val( inCallProp == hx::paccAlways ? get_rotation() : rotation ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"_rotation") ) { return hx::Val( _rotation ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"get_rotation") ) { return hx::Val( get_rotation_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val MotionPath_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { x=inValue.Cast< ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"y") ) { y=inValue.Cast< ::Dynamic >(); return inValue; }
		break;
	case 2:
		if (HX_FIELD_EQ(inName,"_x") ) { _x=inValue.Cast<  ::motion::ComponentPath >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_y") ) { _y=inValue.Cast<  ::motion::ComponentPath >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"rotation") ) { rotation=inValue.Cast<  ::motion::RotationPath >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"_rotation") ) { _rotation=inValue.Cast<  ::motion::RotationPath >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void MotionPath_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("rotation","\x3e","\x3d","\x86","\x08"));
	outFields->push(HX_HCSTRING("x","\x78","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("y","\x79","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("_rotation","\x9d","\x34","\x1c","\x50"));
	outFields->push(HX_HCSTRING("_x","\x39","\x53","\x00","\x00"));
	outFields->push(HX_HCSTRING("_y","\x3a","\x53","\x00","\x00"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo MotionPath_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::motion::RotationPath*/ ,(int)offsetof(MotionPath_obj,rotation),HX_HCSTRING("rotation","\x3e","\x3d","\x86","\x08")},
	{hx::fsObject /*::motion::IComponentPath*/ ,(int)offsetof(MotionPath_obj,x),HX_HCSTRING("x","\x78","\x00","\x00","\x00")},
	{hx::fsObject /*::motion::IComponentPath*/ ,(int)offsetof(MotionPath_obj,y),HX_HCSTRING("y","\x79","\x00","\x00","\x00")},
	{hx::fsObject /*::motion::RotationPath*/ ,(int)offsetof(MotionPath_obj,_rotation),HX_HCSTRING("_rotation","\x9d","\x34","\x1c","\x50")},
	{hx::fsObject /*::motion::ComponentPath*/ ,(int)offsetof(MotionPath_obj,_x),HX_HCSTRING("_x","\x39","\x53","\x00","\x00")},
	{hx::fsObject /*::motion::ComponentPath*/ ,(int)offsetof(MotionPath_obj,_y),HX_HCSTRING("_y","\x3a","\x53","\x00","\x00")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *MotionPath_obj_sStaticStorageInfo = 0;
#endif

static ::String MotionPath_obj_sMemberFields[] = {
	HX_HCSTRING("rotation","\x3e","\x3d","\x86","\x08"),
	HX_HCSTRING("x","\x78","\x00","\x00","\x00"),
	HX_HCSTRING("y","\x79","\x00","\x00","\x00"),
	HX_HCSTRING("_rotation","\x9d","\x34","\x1c","\x50"),
	HX_HCSTRING("_x","\x39","\x53","\x00","\x00"),
	HX_HCSTRING("_y","\x3a","\x53","\x00","\x00"),
	HX_HCSTRING("bezier","\x1f","\x00","\x66","\xa7"),
	HX_HCSTRING("line","\xf4","\x17","\xb3","\x47"),
	HX_HCSTRING("get_rotation","\x47","\xf1","\x9f","\xbd"),
	HX_HCSTRING("get_x","\x4f","\xa5","\x60","\x91"),
	HX_HCSTRING("get_y","\x50","\xa5","\x60","\x91"),
	::String(null()) };

static void MotionPath_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(MotionPath_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void MotionPath_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(MotionPath_obj::__mClass,"__mClass");
};

#endif

hx::Class MotionPath_obj::__mClass;

void MotionPath_obj::__register()
{
	hx::Object *dummy = new MotionPath_obj;
	MotionPath_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("motion.MotionPath","\x53","\x8e","\x94","\x54");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = MotionPath_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(MotionPath_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< MotionPath_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = MotionPath_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = MotionPath_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = MotionPath_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace motion
