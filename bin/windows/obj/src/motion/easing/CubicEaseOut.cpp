// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_motion_easing_CubicEaseOut
#include <motion/easing/CubicEaseOut.h>
#endif
#ifndef INCLUDED_motion_easing_IEasing
#include <motion/easing/IEasing.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_681605d226b1a088_100_new,"motion.easing.CubicEaseOut","new",0xf5de9a13,"motion.easing.CubicEaseOut.new","motion/easing/Cubic.hx",100,0x157bb7df)
HX_LOCAL_STACK_FRAME(_hx_pos_681605d226b1a088_109_calculate,"motion.easing.CubicEaseOut","calculate",0x2c342759,"motion.easing.CubicEaseOut.calculate","motion/easing/Cubic.hx",109,0x157bb7df)
HX_LOCAL_STACK_FRAME(_hx_pos_681605d226b1a088_116_ease,"motion.easing.CubicEaseOut","ease",0x26f23edb,"motion.easing.CubicEaseOut.ease","motion/easing/Cubic.hx",116,0x157bb7df)
namespace motion{
namespace easing{

void CubicEaseOut_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_681605d226b1a088_100_new)
            	}

Dynamic CubicEaseOut_obj::__CreateEmpty() { return new CubicEaseOut_obj; }

void *CubicEaseOut_obj::_hx_vtable = 0;

Dynamic CubicEaseOut_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< CubicEaseOut_obj > _hx_result = new CubicEaseOut_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool CubicEaseOut_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x2ef83dbb;
}

static ::motion::easing::IEasing_obj _hx_motion_easing_CubicEaseOut__hx_motion_easing_IEasing= {
	( Float (hx::Object::*)(Float))&::motion::easing::CubicEaseOut_obj::calculate,
	( Float (hx::Object::*)(Float,Float,Float,Float))&::motion::easing::CubicEaseOut_obj::ease,
};

void *CubicEaseOut_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0x864e8b53: return &_hx_motion_easing_CubicEaseOut__hx_motion_easing_IEasing;
	}
	#ifdef HXCPP_SCRIPTABLE
	return super::_hx_getInterface(inHash);
	#else
	return 0;
	#endif
}

Float CubicEaseOut_obj::calculate(Float k){
            	HX_STACKFRAME(&_hx_pos_681605d226b1a088_109_calculate)
HXDLIN( 109)		k = (k - (int)1);
HXDLIN( 109)		return (((k * k) * k) + (int)1);
            	}


HX_DEFINE_DYNAMIC_FUNC1(CubicEaseOut_obj,calculate,return )

Float CubicEaseOut_obj::ease(Float t,Float b,Float c,Float d){
            	HX_STACKFRAME(&_hx_pos_681605d226b1a088_116_ease)
HXDLIN( 116)		t = (((Float)t / (Float)d) - (int)1);
HXDLIN( 116)		return ((c * (((t * t) * t) + (int)1)) + b);
            	}


HX_DEFINE_DYNAMIC_FUNC4(CubicEaseOut_obj,ease,return )


hx::ObjectPtr< CubicEaseOut_obj > CubicEaseOut_obj::__new() {
	hx::ObjectPtr< CubicEaseOut_obj > __this = new CubicEaseOut_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< CubicEaseOut_obj > CubicEaseOut_obj::__alloc(hx::Ctx *_hx_ctx) {
	CubicEaseOut_obj *__this = (CubicEaseOut_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(CubicEaseOut_obj), false, "motion.easing.CubicEaseOut"));
	*(void **)__this = CubicEaseOut_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

CubicEaseOut_obj::CubicEaseOut_obj()
{
}

hx::Val CubicEaseOut_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"ease") ) { return hx::Val( ease_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"calculate") ) { return hx::Val( calculate_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *CubicEaseOut_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *CubicEaseOut_obj_sStaticStorageInfo = 0;
#endif

static ::String CubicEaseOut_obj_sMemberFields[] = {
	HX_HCSTRING("calculate","\x66","\x95","\x6a","\x05"),
	HX_HCSTRING("ease","\xee","\x8b","\x0c","\x43"),
	::String(null()) };

static void CubicEaseOut_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(CubicEaseOut_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void CubicEaseOut_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(CubicEaseOut_obj::__mClass,"__mClass");
};

#endif

hx::Class CubicEaseOut_obj::__mClass;

void CubicEaseOut_obj::__register()
{
	hx::Object *dummy = new CubicEaseOut_obj;
	CubicEaseOut_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("motion.easing.CubicEaseOut","\xa1","\x94","\x45","\x4f");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = CubicEaseOut_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(CubicEaseOut_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< CubicEaseOut_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = CubicEaseOut_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = CubicEaseOut_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = CubicEaseOut_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace motion
} // end namespace easing
