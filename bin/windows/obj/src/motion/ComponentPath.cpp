// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_motion_BezierPath
#include <motion/BezierPath.h>
#endif
#ifndef INCLUDED_motion_ComponentPath
#include <motion/ComponentPath.h>
#endif
#ifndef INCLUDED_motion_IComponentPath
#include <motion/IComponentPath.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_4f75829ddb546d7e_109_new,"motion.ComponentPath","new",0xeba5e69c,"motion.ComponentPath.new","motion/MotionPath.hx",109,0x95e57daa)
HX_LOCAL_STACK_FRAME(_hx_pos_4f75829ddb546d7e_118_addPath,"motion.ComponentPath","addPath",0xdfaf0ca2,"motion.ComponentPath.addPath","motion/MotionPath.hx",118,0x95e57daa)
HX_LOCAL_STACK_FRAME(_hx_pos_4f75829ddb546d7e_126_calculate,"motion.ComponentPath","calculate",0xd17900a2,"motion.ComponentPath.calculate","motion/MotionPath.hx",126,0x95e57daa)
HX_LOCAL_STACK_FRAME(_hx_pos_4f75829ddb546d7e_167_get_end,"motion.ComponentPath","get_end",0x7fe1b0ae,"motion.ComponentPath.get_end","motion/MotionPath.hx",167,0x95e57daa)
namespace motion{

void ComponentPath_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_4f75829ddb546d7e_109_new)
HXLINE( 111)		this->paths = ::Array_obj< ::Dynamic>::__new();
HXLINE( 112)		this->start = (int)0;
HXLINE( 113)		this->totalStrength = (int)0;
            	}

Dynamic ComponentPath_obj::__CreateEmpty() { return new ComponentPath_obj; }

void *ComponentPath_obj::_hx_vtable = 0;

Dynamic ComponentPath_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ComponentPath_obj > _hx_result = new ComponentPath_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool ComponentPath_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x79b0fdc8;
}

static ::motion::IComponentPath_obj _hx_motion_ComponentPath__hx_motion_IComponentPath= {
	( Float (hx::Object::*)())&::motion::ComponentPath_obj::get_end,
	( Float (hx::Object::*)(Float))&::motion::ComponentPath_obj::calculate,
};

void *ComponentPath_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0xe9f30fef: return &_hx_motion_ComponentPath__hx_motion_IComponentPath;
	}
	#ifdef HXCPP_SCRIPTABLE
	return super::_hx_getInterface(inHash);
	#else
	return 0;
	#endif
}

void ComponentPath_obj::addPath( ::motion::BezierPath path){
            	HX_STACKFRAME(&_hx_pos_4f75829ddb546d7e_118_addPath)
HXLINE( 120)		this->paths->push(path);
HXLINE( 121)		 ::motion::ComponentPath _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 121)		_hx_tmp->totalStrength = (_hx_tmp->totalStrength + path->strength);
            	}


HX_DEFINE_DYNAMIC_FUNC1(ComponentPath_obj,addPath,(void))

Float ComponentPath_obj::calculate(Float k){
            	HX_STACKFRAME(&_hx_pos_4f75829ddb546d7e_126_calculate)
HXLINE( 128)		if ((this->paths->length == (int)1)) {
HXLINE( 130)			return this->paths->__get((int)0).StaticCast<  ::motion::BezierPath >()->calculate(this->start,k);
            		}
            		else {
HXLINE( 134)			Float ratio = (k * this->totalStrength);
HXLINE( 135)			Float lastEnd = this->start;
HXLINE( 137)			{
HXLINE( 137)				int _g = (int)0;
HXDLIN( 137)				::Array< ::Dynamic> _g1 = this->paths;
HXDLIN( 137)				while((_g < _g1->length)){
HXLINE( 137)					 ::motion::BezierPath path = _g1->__get(_g).StaticCast<  ::motion::BezierPath >();
HXDLIN( 137)					_g = (_g + (int)1);
HXLINE( 139)					if ((ratio > path->strength)) {
HXLINE( 141)						ratio = (ratio - path->strength);
HXLINE( 142)						lastEnd = path->end;
            					}
            					else {
HXLINE( 146)						return path->calculate(lastEnd,((Float)ratio / (Float)path->strength));
            					}
            				}
            			}
            		}
HXLINE( 154)		return (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ComponentPath_obj,calculate,return )

Float ComponentPath_obj::get_end(){
            	HX_STACKFRAME(&_hx_pos_4f75829ddb546d7e_167_get_end)
HXDLIN( 167)		if ((this->paths->length > (int)0)) {
HXLINE( 169)			::Array< ::Dynamic> path = this->paths;
HXDLIN( 169)			 ::motion::BezierPath path1 = path->__get((this->paths->length - (int)1)).StaticCast<  ::motion::BezierPath >();
HXLINE( 170)			return path1->end;
            		}
            		else {
HXLINE( 174)			return this->start;
            		}
HXLINE( 167)		return ((Float)0.);
            	}


HX_DEFINE_DYNAMIC_FUNC0(ComponentPath_obj,get_end,return )


hx::ObjectPtr< ComponentPath_obj > ComponentPath_obj::__new() {
	hx::ObjectPtr< ComponentPath_obj > __this = new ComponentPath_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< ComponentPath_obj > ComponentPath_obj::__alloc(hx::Ctx *_hx_ctx) {
	ComponentPath_obj *__this = (ComponentPath_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(ComponentPath_obj), true, "motion.ComponentPath"));
	*(void **)__this = ComponentPath_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

ComponentPath_obj::ComponentPath_obj()
{
}

void ComponentPath_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ComponentPath);
	HX_MARK_MEMBER_NAME(start,"start");
	HX_MARK_MEMBER_NAME(end,"end");
	HX_MARK_MEMBER_NAME(paths,"paths");
	HX_MARK_MEMBER_NAME(totalStrength,"totalStrength");
	HX_MARK_END_CLASS();
}

void ComponentPath_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(start,"start");
	HX_VISIT_MEMBER_NAME(end,"end");
	HX_VISIT_MEMBER_NAME(paths,"paths");
	HX_VISIT_MEMBER_NAME(totalStrength,"totalStrength");
}

hx::Val ComponentPath_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"end") ) { return hx::Val( inCallProp == hx::paccAlways ? get_end() : end ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"start") ) { return hx::Val( start ); }
		if (HX_FIELD_EQ(inName,"paths") ) { return hx::Val( paths ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"addPath") ) { return hx::Val( addPath_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_end") ) { return hx::Val( get_end_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"calculate") ) { return hx::Val( calculate_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"totalStrength") ) { return hx::Val( totalStrength ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val ComponentPath_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"end") ) { end=inValue.Cast< Float >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"start") ) { start=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"paths") ) { paths=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"totalStrength") ) { totalStrength=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void ComponentPath_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("start","\x62","\x74","\x0b","\x84"));
	outFields->push(HX_HCSTRING("end","\xdb","\x03","\x4d","\x00"));
	outFields->push(HX_HCSTRING("paths","\x2e","\x0b","\x57","\xbd"));
	outFields->push(HX_HCSTRING("totalStrength","\x65","\x46","\x52","\xc4"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo ComponentPath_obj_sMemberStorageInfo[] = {
	{hx::fsFloat,(int)offsetof(ComponentPath_obj,start),HX_HCSTRING("start","\x62","\x74","\x0b","\x84")},
	{hx::fsFloat,(int)offsetof(ComponentPath_obj,end),HX_HCSTRING("end","\xdb","\x03","\x4d","\x00")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(ComponentPath_obj,paths),HX_HCSTRING("paths","\x2e","\x0b","\x57","\xbd")},
	{hx::fsFloat,(int)offsetof(ComponentPath_obj,totalStrength),HX_HCSTRING("totalStrength","\x65","\x46","\x52","\xc4")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *ComponentPath_obj_sStaticStorageInfo = 0;
#endif

static ::String ComponentPath_obj_sMemberFields[] = {
	HX_HCSTRING("start","\x62","\x74","\x0b","\x84"),
	HX_HCSTRING("end","\xdb","\x03","\x4d","\x00"),
	HX_HCSTRING("paths","\x2e","\x0b","\x57","\xbd"),
	HX_HCSTRING("totalStrength","\x65","\x46","\x52","\xc4"),
	HX_HCSTRING("addPath","\x66","\x28","\x8f","\x86"),
	HX_HCSTRING("calculate","\x66","\x95","\x6a","\x05"),
	HX_HCSTRING("get_end","\x72","\xcc","\xc1","\x26"),
	::String(null()) };

static void ComponentPath_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ComponentPath_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ComponentPath_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ComponentPath_obj::__mClass,"__mClass");
};

#endif

hx::Class ComponentPath_obj::__mClass;

void ComponentPath_obj::__register()
{
	hx::Object *dummy = new ComponentPath_obj;
	ComponentPath_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("motion.ComponentPath","\xaa","\xa8","\xd7","\x61");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = ComponentPath_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(ComponentPath_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< ComponentPath_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ComponentPath_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ComponentPath_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ComponentPath_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace motion
