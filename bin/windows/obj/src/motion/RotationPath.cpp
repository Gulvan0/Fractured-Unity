// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_motion_ComponentPath
#include <motion/ComponentPath.h>
#endif
#ifndef INCLUDED_motion_IComponentPath
#include <motion/IComponentPath.h>
#endif
#ifndef INCLUDED_motion_RotationPath
#include <motion/RotationPath.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_8cdd143290cf25ca_243_new,"motion.RotationPath","new",0x0c20d9cd,"motion.RotationPath.new","motion/MotionPath.hx",243,0x95e57daa)
HX_LOCAL_STACK_FRAME(_hx_pos_8cdd143290cf25ca_267_calculate,"motion.RotationPath","calculate",0x5ec7ee93,"motion.RotationPath.calculate","motion/MotionPath.hx",267,0x95e57daa)
HX_LOCAL_STACK_FRAME(_hx_pos_8cdd143290cf25ca_289_get_end,"motion.RotationPath","get_end",0xfaf4905f,"motion.RotationPath.get_end","motion/MotionPath.hx",289,0x95e57daa)
namespace motion{

void RotationPath_obj::__construct( ::motion::ComponentPath x, ::motion::ComponentPath y){
            	HX_STACKFRAME(&_hx_pos_8cdd143290cf25ca_243_new)
HXLINE( 250)		this->step = ((Float)0.01);
HXLINE( 257)		this->_x = x;
HXLINE( 258)		this->_y = y;
HXLINE( 260)		this->offset = (int)0;
HXLINE( 262)		this->start = this->calculate(((Float)0.0));
            	}

Dynamic RotationPath_obj::__CreateEmpty() { return new RotationPath_obj; }

void *RotationPath_obj::_hx_vtable = 0;

Dynamic RotationPath_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< RotationPath_obj > _hx_result = new RotationPath_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool RotationPath_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x04af1d99;
}

static ::motion::IComponentPath_obj _hx_motion_RotationPath__hx_motion_IComponentPath= {
	( Float (hx::Object::*)())&::motion::RotationPath_obj::get_end,
	( Float (hx::Object::*)(Float))&::motion::RotationPath_obj::calculate,
};

void *RotationPath_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0xe9f30fef: return &_hx_motion_RotationPath__hx_motion_IComponentPath;
	}
	#ifdef HXCPP_SCRIPTABLE
	return super::_hx_getInterface(inHash);
	#else
	return 0;
	#endif
}

Float RotationPath_obj::calculate(Float k){
            	HX_STACKFRAME(&_hx_pos_8cdd143290cf25ca_267_calculate)
HXLINE( 269)		Float dX = this->_x->calculate(k);
HXDLIN( 269)		 ::motion::ComponentPath dX1 = this->_x;
HXDLIN( 269)		Float dX2 = (dX - dX1->calculate((k + this->step)));
HXLINE( 270)		Float dY = this->_y->calculate(k);
HXDLIN( 270)		 ::motion::ComponentPath dY1 = this->_y;
HXDLIN( 270)		Float dY2 = (dY - dY1->calculate((k + this->step)));
HXLINE( 272)		Float angle = ::Math_obj::atan2(dY2,dX2);
HXDLIN( 272)		Float angle1 = (angle * ((Float)(int)180 / (Float)::Math_obj::PI));
HXLINE( 273)		angle1 = hx::Mod((angle1 + this->offset),(int)360);
HXLINE( 275)		return angle1;
            	}


HX_DEFINE_DYNAMIC_FUNC1(RotationPath_obj,calculate,return )

Float RotationPath_obj::get_end(){
            	HX_STACKFRAME(&_hx_pos_8cdd143290cf25ca_289_get_end)
HXDLIN( 289)		return this->calculate(((Float)1.0));
            	}


HX_DEFINE_DYNAMIC_FUNC0(RotationPath_obj,get_end,return )


hx::ObjectPtr< RotationPath_obj > RotationPath_obj::__new( ::motion::ComponentPath x, ::motion::ComponentPath y) {
	hx::ObjectPtr< RotationPath_obj > __this = new RotationPath_obj();
	__this->__construct(x,y);
	return __this;
}

hx::ObjectPtr< RotationPath_obj > RotationPath_obj::__alloc(hx::Ctx *_hx_ctx, ::motion::ComponentPath x, ::motion::ComponentPath y) {
	RotationPath_obj *__this = (RotationPath_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(RotationPath_obj), true, "motion.RotationPath"));
	*(void **)__this = RotationPath_obj::_hx_vtable;
	__this->__construct(x,y);
	return __this;
}

RotationPath_obj::RotationPath_obj()
{
}

void RotationPath_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(RotationPath);
	HX_MARK_MEMBER_NAME(end,"end");
	HX_MARK_MEMBER_NAME(offset,"offset");
	HX_MARK_MEMBER_NAME(start,"start");
	HX_MARK_MEMBER_NAME(step,"step");
	HX_MARK_MEMBER_NAME(_x,"_x");
	HX_MARK_MEMBER_NAME(_y,"_y");
	HX_MARK_END_CLASS();
}

void RotationPath_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(end,"end");
	HX_VISIT_MEMBER_NAME(offset,"offset");
	HX_VISIT_MEMBER_NAME(start,"start");
	HX_VISIT_MEMBER_NAME(step,"step");
	HX_VISIT_MEMBER_NAME(_x,"_x");
	HX_VISIT_MEMBER_NAME(_y,"_y");
}

hx::Val RotationPath_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"_x") ) { return hx::Val( _x ); }
		if (HX_FIELD_EQ(inName,"_y") ) { return hx::Val( _y ); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"end") ) { return hx::Val( inCallProp == hx::paccAlways ? get_end() : end ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"step") ) { return hx::Val( step ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"start") ) { return hx::Val( start ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"offset") ) { return hx::Val( offset ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"get_end") ) { return hx::Val( get_end_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"calculate") ) { return hx::Val( calculate_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val RotationPath_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"_x") ) { _x=inValue.Cast<  ::motion::ComponentPath >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_y") ) { _y=inValue.Cast<  ::motion::ComponentPath >(); return inValue; }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"end") ) { end=inValue.Cast< Float >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"step") ) { step=inValue.Cast< Float >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"start") ) { start=inValue.Cast< Float >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"offset") ) { offset=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void RotationPath_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("end","\xdb","\x03","\x4d","\x00"));
	outFields->push(HX_HCSTRING("offset","\x93","\x97","\x3f","\x60"));
	outFields->push(HX_HCSTRING("start","\x62","\x74","\x0b","\x84"));
	outFields->push(HX_HCSTRING("step","\x4c","\xe7","\x5b","\x4c"));
	outFields->push(HX_HCSTRING("_x","\x39","\x53","\x00","\x00"));
	outFields->push(HX_HCSTRING("_y","\x3a","\x53","\x00","\x00"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo RotationPath_obj_sMemberStorageInfo[] = {
	{hx::fsFloat,(int)offsetof(RotationPath_obj,end),HX_HCSTRING("end","\xdb","\x03","\x4d","\x00")},
	{hx::fsFloat,(int)offsetof(RotationPath_obj,offset),HX_HCSTRING("offset","\x93","\x97","\x3f","\x60")},
	{hx::fsFloat,(int)offsetof(RotationPath_obj,start),HX_HCSTRING("start","\x62","\x74","\x0b","\x84")},
	{hx::fsFloat,(int)offsetof(RotationPath_obj,step),HX_HCSTRING("step","\x4c","\xe7","\x5b","\x4c")},
	{hx::fsObject /*::motion::ComponentPath*/ ,(int)offsetof(RotationPath_obj,_x),HX_HCSTRING("_x","\x39","\x53","\x00","\x00")},
	{hx::fsObject /*::motion::ComponentPath*/ ,(int)offsetof(RotationPath_obj,_y),HX_HCSTRING("_y","\x3a","\x53","\x00","\x00")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *RotationPath_obj_sStaticStorageInfo = 0;
#endif

static ::String RotationPath_obj_sMemberFields[] = {
	HX_HCSTRING("end","\xdb","\x03","\x4d","\x00"),
	HX_HCSTRING("offset","\x93","\x97","\x3f","\x60"),
	HX_HCSTRING("start","\x62","\x74","\x0b","\x84"),
	HX_HCSTRING("step","\x4c","\xe7","\x5b","\x4c"),
	HX_HCSTRING("_x","\x39","\x53","\x00","\x00"),
	HX_HCSTRING("_y","\x3a","\x53","\x00","\x00"),
	HX_HCSTRING("calculate","\x66","\x95","\x6a","\x05"),
	HX_HCSTRING("get_end","\x72","\xcc","\xc1","\x26"),
	::String(null()) };

static void RotationPath_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(RotationPath_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void RotationPath_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(RotationPath_obj::__mClass,"__mClass");
};

#endif

hx::Class RotationPath_obj::__mClass;

void RotationPath_obj::__register()
{
	hx::Object *dummy = new RotationPath_obj;
	RotationPath_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("motion.RotationPath","\x5b","\xef","\x4a","\xd6");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = RotationPath_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(RotationPath_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< RotationPath_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = RotationPath_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = RotationPath_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = RotationPath_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace motion
