// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_motion_BezierPath
#include <motion/BezierPath.h>
#endif
#ifndef INCLUDED_motion_LinearPath
#include <motion/LinearPath.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_d9fc247df9f32b0a_228_new,"motion.LinearPath","new",0xd27de774,"motion.LinearPath.new","motion/MotionPath.hx",228,0x95e57daa)
HX_LOCAL_STACK_FRAME(_hx_pos_d9fc247df9f32b0a_235_calculate,"motion.LinearPath","calculate",0x806d337a,"motion.LinearPath.calculate","motion/MotionPath.hx",235,0x95e57daa)
namespace motion{

void LinearPath_obj::__construct(Float end,Float strength){
            	HX_STACKFRAME(&_hx_pos_d9fc247df9f32b0a_228_new)
HXDLIN( 228)		super::__construct(end,(int)0,strength);
            	}

Dynamic LinearPath_obj::__CreateEmpty() { return new LinearPath_obj; }

void *LinearPath_obj::_hx_vtable = 0;

Dynamic LinearPath_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< LinearPath_obj > _hx_result = new LinearPath_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool LinearPath_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x7aeb41fc) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x7aeb41fc;
	} else {
		return inClassId==(int)0x7ecd3ac6;
	}
}

Float LinearPath_obj::calculate(Float start,Float k){
            	HX_STACKFRAME(&_hx_pos_d9fc247df9f32b0a_235_calculate)
HXDLIN( 235)		return (start + (k * (this->end - start)));
            	}



LinearPath_obj::LinearPath_obj()
{
}

hx::Val LinearPath_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"calculate") ) { return hx::Val( calculate_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *LinearPath_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *LinearPath_obj_sStaticStorageInfo = 0;
#endif

static ::String LinearPath_obj_sMemberFields[] = {
	HX_HCSTRING("calculate","\x66","\x95","\x6a","\x05"),
	::String(null()) };

static void LinearPath_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(LinearPath_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void LinearPath_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(LinearPath_obj::__mClass,"__mClass");
};

#endif

hx::Class LinearPath_obj::__mClass;

void LinearPath_obj::__register()
{
	hx::Object *dummy = new LinearPath_obj;
	LinearPath_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("motion.LinearPath","\x82","\x5d","\xb8","\x59");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = LinearPath_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(LinearPath_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< LinearPath_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = LinearPath_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = LinearPath_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = LinearPath_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace motion
