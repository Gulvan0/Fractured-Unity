// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_MathUtils
#include <MathUtils.h>
#endif
#ifndef INCLUDED_openfl_geom_Point
#include <openfl/geom/Point.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_be2d3859dc9d0715_14_sign,"MathUtils","sign",0x53d3e7a2,"MathUtils.sign","MathUtils.hx",14,0xbb0b9f35)
HX_LOCAL_STACK_FRAME(_hx_pos_be2d3859dc9d0715_18_inRange,"MathUtils","inRange",0xedaf1153,"MathUtils.inRange","MathUtils.hx",18,0xbb0b9f35)
HX_LOCAL_STACK_FRAME(_hx_pos_be2d3859dc9d0715_27_inside,"MathUtils","inside",0xc7b0faa1,"MathUtils.inside","MathUtils.hx",27,0xbb0b9f35)
HX_LOCAL_STACK_FRAME(_hx_pos_be2d3859dc9d0715_34_distance,"MathUtils","distance",0x376a011a,"MathUtils.distance","MathUtils.hx",34,0xbb0b9f35)
HX_LOCAL_STACK_FRAME(_hx_pos_be2d3859dc9d0715_45_randomInt,"MathUtils","randomInt",0xde354127,"MathUtils.randomInt","MathUtils.hx",45,0xbb0b9f35)
HX_LOCAL_STACK_FRAME(_hx_pos_be2d3859dc9d0715_50_flip,"MathUtils","flip",0x4b3e6a12,"MathUtils.flip","MathUtils.hx",50,0xbb0b9f35)

void MathUtils_obj::__construct() { }

Dynamic MathUtils_obj::__CreateEmpty() { return new MathUtils_obj; }

void *MathUtils_obj::_hx_vtable = 0;

Dynamic MathUtils_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< MathUtils_obj > _hx_result = new MathUtils_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool MathUtils_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x03cae961;
}

int MathUtils_obj::sign(Float v){
            	HX_STACKFRAME(&_hx_pos_be2d3859dc9d0715_14_sign)
HXDLIN(  14)		if ((v == (int)0)) {
HXDLIN(  14)			return (int)0;
            		}
            		else {
HXDLIN(  14)			if ((v > (int)0)) {
HXDLIN(  14)				return (int)1;
            			}
            			else {
HXDLIN(  14)				return (int)-1;
            			}
            		}
HXDLIN(  14)		return (int)0;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(MathUtils_obj,sign,return )

bool MathUtils_obj::inRange(Float number,Float leftBorder,Float rightBorder, ::Dynamic __o_leftIncluded, ::Dynamic __o_rightIncluded){
 ::Dynamic leftIncluded = __o_leftIncluded.Default(true);
 ::Dynamic rightIncluded = __o_rightIncluded.Default(true);
            	HX_STACKFRAME(&_hx_pos_be2d3859dc9d0715_18_inRange)
HXLINE(  19)		bool _hx_tmp;
HXDLIN(  19)		if ((number >= leftBorder)) {
HXLINE(  19)			_hx_tmp = (number <= rightBorder);
            		}
            		else {
HXLINE(  19)			_hx_tmp = false;
            		}
HXDLIN(  19)		if (_hx_tmp) {
HXLINE(  20)			bool _hx_tmp1;
HXDLIN(  20)			if (!(leftIncluded)) {
HXLINE(  20)				_hx_tmp1 = (number != leftBorder);
            			}
            			else {
HXLINE(  20)				_hx_tmp1 = true;
            			}
HXDLIN(  20)			if (_hx_tmp1) {
HXLINE(  21)				bool _hx_tmp2;
HXDLIN(  21)				if (!(rightIncluded)) {
HXLINE(  21)					_hx_tmp2 = (number != rightBorder);
            				}
            				else {
HXLINE(  21)					_hx_tmp2 = true;
            				}
HXDLIN(  21)				if (_hx_tmp2) {
HXLINE(  22)					return true;
            				}
            			}
            		}
HXLINE(  23)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(MathUtils_obj,inRange,return )

bool MathUtils_obj::inside( ::openfl::geom::Point point, ::openfl::geom::Rectangle field){
            	HX_STACKFRAME(&_hx_pos_be2d3859dc9d0715_27_inside)
HXLINE(  28)		bool _hx_tmp;
HXDLIN(  28)		bool _hx_tmp1;
HXDLIN(  28)		if ((point->x >= field->x)) {
HXLINE(  28)			Float point1 = point->x;
HXDLIN(  28)			_hx_tmp1 = (point1 <= (field->x + field->width));
            		}
            		else {
HXLINE(  28)			_hx_tmp1 = false;
            		}
HXDLIN(  28)		if (_hx_tmp1) {
HXLINE(  28)			if ((point->y >= field->y)) {
HXLINE(  28)				Float point2 = point->y;
HXDLIN(  28)				_hx_tmp = (point2 <= (field->y + field->height));
            			}
            			else {
HXLINE(  28)				_hx_tmp = false;
            			}
            		}
            		else {
HXLINE(  28)			_hx_tmp = false;
            		}
HXDLIN(  28)		if (_hx_tmp) {
HXLINE(  29)			return true;
            		}
HXLINE(  30)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(MathUtils_obj,inside,return )

Float MathUtils_obj::distance( ::openfl::geom::Point point1, ::openfl::geom::Point point2){
            	HX_STACKFRAME(&_hx_pos_be2d3859dc9d0715_34_distance)
HXLINE(  35)		Float x1 = point1->x;
HXLINE(  36)		Float x2 = point2->x;
HXLINE(  37)		Float y1 = point1->y;
HXLINE(  38)		Float y2 = point2->y;
HXLINE(  40)		return ::Math_obj::sqrt((((x1 - x2) * (x1 - x2)) + ((y1 - y2) * (y1 - y2))));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(MathUtils_obj,distance,return )

int MathUtils_obj::randomInt(int leftBorder,int rightBorder){
            	HX_STACKFRAME(&_hx_pos_be2d3859dc9d0715_45_randomInt)
HXDLIN(  45)		Float _hx_tmp = ::Math_obj::random();
HXDLIN(  45)		return (leftBorder + ::Math_obj::round((_hx_tmp * (rightBorder - leftBorder))));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(MathUtils_obj,randomInt,return )

bool MathUtils_obj::flip(){
            	HX_STACKFRAME(&_hx_pos_be2d3859dc9d0715_50_flip)
HXDLIN(  50)		return (::Math_obj::random() >= ((Float)0.5));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(MathUtils_obj,flip,return )


MathUtils_obj::MathUtils_obj()
{
}

bool MathUtils_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"sign") ) { outValue = sign_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"flip") ) { outValue = flip_dyn(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"inside") ) { outValue = inside_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"inRange") ) { outValue = inRange_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"distance") ) { outValue = distance_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"randomInt") ) { outValue = randomInt_dyn(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *MathUtils_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *MathUtils_obj_sStaticStorageInfo = 0;
#endif

static void MathUtils_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(MathUtils_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void MathUtils_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(MathUtils_obj::__mClass,"__mClass");
};

#endif

hx::Class MathUtils_obj::__mClass;

static ::String MathUtils_obj_sStaticFields[] = {
	HX_HCSTRING("sign","\x3d","\x90","\x53","\x4c"),
	HX_HCSTRING("inRange","\x98","\x7b","\xdc","\x80"),
	HX_HCSTRING("inside","\xfc","\x3f","\xe0","\x9d"),
	HX_HCSTRING("distance","\x35","\x93","\xf9","\x6b"),
	HX_HCSTRING("randomInt","\xac","\x86","\x45","\xa7"),
	HX_HCSTRING("flip","\xad","\x12","\xbe","\x43"),
	::String(null())
};

void MathUtils_obj::__register()
{
	hx::Object *dummy = new MathUtils_obj;
	MathUtils_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("MathUtils","\x29","\x43","\x9d","\xc9");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &MathUtils_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = MathUtils_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(MathUtils_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< MathUtils_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = MathUtils_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = MathUtils_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = MathUtils_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

