// Generated by Haxe 3.4.7
#ifndef INCLUDED_Linear
#define INCLUDED_Linear

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_STACK_FRAME(_hx_pos_8cfeffb7702d53f0_49_new)
HX_DECLARE_CLASS0(Linear)



class HXCPP_CLASS_ATTRIBUTES Linear_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef Linear_obj OBJ_;
		Linear_obj();

	public:
		enum { _hx_ClassId = 0x2134c605 };

		void __construct(Float k,Float b);
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="Linear")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,false,"Linear"); }

		hx::ObjectPtr< Linear_obj > __new(Float k,Float b) {
			hx::ObjectPtr< Linear_obj > __this = new Linear_obj();
			__this->__construct(k,b);
			return __this;
		}

		static hx::ObjectPtr< Linear_obj > __alloc(hx::Ctx *_hx_ctx,Float k,Float b) {
			Linear_obj *__this = (Linear_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Linear_obj), false, "Linear"));
			*(void **)__this = Linear_obj::_hx_vtable;
{
            	HX_STACKFRAME(&_hx_pos_8cfeffb7702d53f0_49_new)
HXLINE(  50)		( ( ::Linear)(__this) )->k = k;
HXLINE(  51)		( ( ::Linear)(__this) )->b = b;
            	}
		
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Linear_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("Linear","\x05","\xc6","\x34","\x21"); }

		static  ::Linear combination(::Array< ::Dynamic> linears);
		static ::Dynamic combination_dyn();

		Float k;
		Float b;
		Float apply(Float x);
		::Dynamic apply_dyn();

		void combine( ::Linear lin2);
		::Dynamic combine_dyn();

		void detach( ::Linear lin2);
		::Dynamic detach_dyn();

		virtual ::String toString();
		::Dynamic toString_dyn();

};


#endif /* INCLUDED_Linear */ 
