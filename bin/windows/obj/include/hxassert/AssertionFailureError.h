// Generated by Haxe 3.4.7
#ifndef INCLUDED_hxassert_AssertionFailureError
#define INCLUDED_hxassert_AssertionFailureError

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS1(haxe,IMap)
HX_DECLARE_CLASS1(haxe,StackItem)
HX_DECLARE_CLASS2(haxe,ds,StringMap)
HX_DECLARE_CLASS1(hxassert,AssertionFailureError)

namespace hxassert{


class HXCPP_CLASS_ATTRIBUTES AssertionFailureError_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef AssertionFailureError_obj OBJ_;
		AssertionFailureError_obj();

	public:
		enum { _hx_ClassId = 0x689bdf0a };

		void __construct(::Array< ::String > messages, ::Dynamic infos);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="hxassert.AssertionFailureError")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"hxassert.AssertionFailureError"); }
		static hx::ObjectPtr< AssertionFailureError_obj > __new(::Array< ::String > messages, ::Dynamic infos);
		static hx::ObjectPtr< AssertionFailureError_obj > __alloc(hx::Ctx *_hx_ctx,::Array< ::String > messages, ::Dynamic infos);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~AssertionFailureError_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("AssertionFailureError","\xe0","\xdc","\x81","\xed"); }

		::Array< ::Dynamic> callstack;
		 ::Dynamic position;
		bool recovered;
		::Array< ::String > _messages;
		 ::haxe::ds::StringMap _evaluations;
		virtual ::String toString();
		::Dynamic toString_dyn();

		::String getCallStackText();
		::Dynamic getCallStackText_dyn();

		void recovery();
		::Dynamic recovery_dyn();

};

} // end namespace hxassert

#endif /* INCLUDED_hxassert_AssertionFailureError */ 
