// Generated by Haxe 3.4.7
#ifndef INCLUDED_battle_struct_UPair
#define INCLUDED_battle_struct_UPair

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS1(battle,Unit)
HX_DECLARE_CLASS2(battle,_hx_struct,UPair)
HX_DECLARE_CLASS2(battle,_hx_struct,UnitCoords)

namespace battle{
namespace _hx_struct{


class HXCPP_CLASS_ATTRIBUTES UPair_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef UPair_obj OBJ_;
		UPair_obj();

	public:
		enum { _hx_ClassId = 0x74fa12be };

		void __construct(::cpp::VirtualArray left,::cpp::VirtualArray right);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="battle.struct.UPair")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"battle.struct.UPair"); }
		static hx::ObjectPtr< UPair_obj > __new(::cpp::VirtualArray left,::cpp::VirtualArray right);
		static hx::ObjectPtr< UPair_obj > __alloc(hx::Ctx *_hx_ctx,::cpp::VirtualArray left,::cpp::VirtualArray right);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~UPair_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("UPair","\x0f","\x57","\x3a","\x26"); }

		static  ::battle::_hx_struct::UPair map(::cpp::VirtualArray left,::cpp::VirtualArray right, ::Dynamic func);
		static ::Dynamic map_dyn();

		::cpp::VirtualArray left;
		::cpp::VirtualArray right;
		::cpp::VirtualArray get_both();
		::Dynamic get_both_dyn();

		 ::Dynamic get( ::battle::_hx_struct::UnitCoords coords);
		::Dynamic get_dyn();

		 ::Dynamic getByUnit( ::battle::Unit unit);
		::Dynamic getByUnit_dyn();

		::cpp::VirtualArray opposite( ::battle::_hx_struct::UnitCoords coords);
		::Dynamic opposite_dyn();

		::cpp::VirtualArray allied( ::battle::_hx_struct::UnitCoords coords);
		::Dynamic allied_dyn();

		 ::battle::_hx_struct::UnitCoords find( ::Dynamic obj);
		::Dynamic find_dyn();

		 ::Dynamic player();
		::Dynamic player_dyn();

		 ::Dynamic iterator();
		::Dynamic iterator_dyn();

};

} // end namespace battle
} // end namespace struct

#endif /* INCLUDED_battle_struct_UPair */ 
