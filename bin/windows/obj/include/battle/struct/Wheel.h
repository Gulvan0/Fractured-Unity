// Generated by Haxe 3.4.7
#ifndef INCLUDED_battle_struct_Wheel
#define INCLUDED_battle_struct_Wheel

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS0(ID)
HX_DECLARE_CLASS1(battle,Ability)
HX_DECLARE_CLASS1(battle,Active)
HX_DECLARE_CLASS2(battle,data,BattleEvent)
HX_DECLARE_CLASS2(battle,_hx_struct,Wheel)

namespace battle{
namespace _hx_struct{


class HXCPP_CLASS_ATTRIBUTES Wheel_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef Wheel_obj OBJ_;
		Wheel_obj();

	public:
		enum { _hx_ClassId = 0x5a3c6d46 };

		void __construct(::Array< ::Dynamic> pool,int numOfSlots);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="battle.struct.Wheel")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"battle.struct.Wheel"); }
		static hx::ObjectPtr< Wheel_obj > __new(::Array< ::Dynamic> pool,int numOfSlots);
		static hx::ObjectPtr< Wheel_obj > __alloc(hx::Ctx *_hx_ctx,::Array< ::Dynamic> pool,int numOfSlots);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Wheel_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("Wheel","\x7b","\xa4","\xe7","\x5c"); }

		::Array< ::Dynamic> wheel;
		int numOfSlots;
		 ::battle::Ability get(int pos);
		::Dynamic get_dyn();

		 ::battle::Active getActive(int pos);
		::Dynamic getActive_dyn();

		::Array< ::Dynamic> passives( ::battle::data::BattleEvent trigger);
		::Dynamic passives_dyn();

		 ::battle::Ability set(int pos, ::battle::Ability ability);
		::Dynamic set_dyn();

		void tick();
		::Dynamic tick_dyn();

};

} // end namespace battle
} // end namespace struct

#endif /* INCLUDED_battle_struct_Wheel */ 
