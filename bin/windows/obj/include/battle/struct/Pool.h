// Generated by Haxe 3.4.7
#ifndef INCLUDED_battle_struct_Pool
#define INCLUDED_battle_struct_Pool

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(battle,_hx_struct,Pool)

namespace battle{
namespace _hx_struct{


class HXCPP_CLASS_ATTRIBUTES Pool_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef Pool_obj OBJ_;
		Pool_obj();

	public:
		enum { _hx_ClassId = 0x395f31c9 };

		void __construct(int startValue,int maxValue,hx::Null< int >  __o_minValue);
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="battle.struct.Pool")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,false,"battle.struct.Pool"); }
		static hx::ObjectPtr< Pool_obj > __new(int startValue,int maxValue,hx::Null< int >  __o_minValue);
		static hx::ObjectPtr< Pool_obj > __alloc(hx::Ctx *_hx_ctx,int startValue,int maxValue,hx::Null< int >  __o_minValue);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Pool_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("Pool","\xfc","\xac","\x35","\x35"); }

		int maxValue;
		int minValue;
		int value;
		int set_value(int v);
		::Dynamic set_value_dyn();

};

} // end namespace battle
} // end namespace struct

#endif /* INCLUDED_battle_struct_Pool */ 
