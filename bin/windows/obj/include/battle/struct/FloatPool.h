// Generated by Haxe 3.4.7
#ifndef INCLUDED_battle_struct_FloatPool
#define INCLUDED_battle_struct_FloatPool

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(battle,_hx_struct,FloatPool)

namespace battle{
namespace _hx_struct{


class HXCPP_CLASS_ATTRIBUTES FloatPool_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef FloatPool_obj OBJ_;
		FloatPool_obj();

	public:
		enum { _hx_ClassId = 0x6b410fa7 };

		void __construct(Float startValue,Float maxValue,hx::Null< Float >  __o_minValue);
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="battle.struct.FloatPool")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,false,"battle.struct.FloatPool"); }
		static hx::ObjectPtr< FloatPool_obj > __new(Float startValue,Float maxValue,hx::Null< Float >  __o_minValue);
		static hx::ObjectPtr< FloatPool_obj > __alloc(hx::Ctx *_hx_ctx,Float startValue,Float maxValue,hx::Null< Float >  __o_minValue);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~FloatPool_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("FloatPool","\x78","\x50","\x68","\x9f"); }

		Float maxValue;
		Float minValue;
		Float value;
		Float set_value(Float v);
		::Dynamic set_value_dyn();

};

} // end namespace battle
} // end namespace struct

#endif /* INCLUDED_battle_struct_FloatPool */ 
