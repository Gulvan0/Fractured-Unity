// Generated by Haxe 3.4.7
#ifndef INCLUDED_battle_struct_UPairIterator
#define INCLUDED_battle_struct_UPairIterator

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(battle,_hx_struct,UPair)
HX_DECLARE_CLASS2(battle,_hx_struct,UPairIterator)

namespace battle{
namespace _hx_struct{


class HXCPP_CLASS_ATTRIBUTES UPairIterator_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef UPairIterator_obj OBJ_;
		UPairIterator_obj();

	public:
		enum { _hx_ClassId = 0x15258fe8 };

		void __construct( ::battle::_hx_struct::UPair pair);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="battle.struct.UPairIterator")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"battle.struct.UPairIterator"); }
		static hx::ObjectPtr< UPairIterator_obj > __new( ::battle::_hx_struct::UPair pair);
		static hx::ObjectPtr< UPairIterator_obj > __alloc(hx::Ctx *_hx_ctx, ::battle::_hx_struct::UPair pair);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~UPairIterator_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("UPairIterator","\x1d","\x84","\x5a","\xc4"); }

		 ::battle::_hx_struct::UPair pair;
		int i;
		bool hasNext();
		::Dynamic hasNext_dyn();

		 ::Dynamic next();
		::Dynamic next_dyn();

};

} // end namespace battle
} // end namespace struct

#endif /* INCLUDED_battle_struct_UPairIterator */ 
