// Generated by Haxe 3.4.7
#ifndef INCLUDED_battle_vision_AbilityCell
#define INCLUDED_battle_vision_AbilityCell

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_SSprite
#include <SSprite.h>
#endif
HX_DECLARE_CLASS0(ID)
HX_DECLARE_CLASS0(SSprite)
HX_DECLARE_CLASS2(battle,_hx_struct,Countdown)
HX_DECLARE_CLASS2(battle,vision,AbilityCell)
HX_DECLARE_CLASS2(openfl,display,DisplayObject)
HX_DECLARE_CLASS2(openfl,display,DisplayObjectContainer)
HX_DECLARE_CLASS2(openfl,display,IBitmapDrawable)
HX_DECLARE_CLASS2(openfl,display,InteractiveObject)
HX_DECLARE_CLASS2(openfl,display,MovieClip)
HX_DECLARE_CLASS2(openfl,display,Shape)
HX_DECLARE_CLASS2(openfl,display,Sprite)
HX_DECLARE_CLASS2(openfl,events,EventDispatcher)
HX_DECLARE_CLASS2(openfl,events,IEventDispatcher)
HX_DECLARE_CLASS2(openfl,geom,Point)
HX_DECLARE_CLASS2(openfl,text,TextField)

namespace battle{
namespace vision{


class HXCPP_CLASS_ATTRIBUTES AbilityCell_obj : public  ::SSprite_obj
{
	public:
		typedef  ::SSprite_obj super;
		typedef AbilityCell_obj OBJ_;
		AbilityCell_obj();

	public:
		enum { _hx_ClassId = 0x2340f3c8 };

		void __construct( ::ID id,int cooldown,int delay,int manacost,::String button);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="battle.vision.AbilityCell")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"battle.vision.AbilityCell"); }
		static hx::ObjectPtr< AbilityCell_obj > __new( ::ID id,int cooldown,int delay,int manacost,::String button);
		static hx::ObjectPtr< AbilityCell_obj > __alloc(hx::Ctx *_hx_ctx, ::ID id,int cooldown,int delay,int manacost,::String button);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~AbilityCell_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("AbilityCell","\x4c","\x64","\x0d","\x43"); }

		 ::battle::_hx_struct::Countdown cd;
		 ::openfl::display::MovieClip icon;
		::Array< ::Dynamic> cdSegments;
		 ::openfl::text::TextField cdText;
		 ::openfl::text::TextField manacostText;
		 ::openfl::text::TextField buttonText;
		void decrementCooldown();
		::Dynamic decrementCooldown_dyn();

		void changeCooldown(int value);
		::Dynamic changeCooldown_dyn();

		void updateCooldown();
		::Dynamic updateCooldown_dyn();

		void setCDText();
		::Dynamic setCDText_dyn();

		void setManaText(int manacost);
		::Dynamic setManaText_dyn();

		void setButtonText(::String button);
		::Dynamic setButtonText_dyn();

		void drawSegments(int q);
		::Dynamic drawSegments_dyn();

		::Array< ::Dynamic> iconVertices( ::openfl::geom::Point p,int len);
		::Dynamic iconVertices_dyn();

		 ::openfl::display::Shape drawSeg(::Array< ::Dynamic> vertices);
		::Dynamic drawSeg_dyn();

};

} // end namespace battle
} // end namespace vision

#endif /* INCLUDED_battle_vision_AbilityCell */ 
