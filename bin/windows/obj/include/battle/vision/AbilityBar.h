// Generated by Haxe 3.4.7
#ifndef INCLUDED_battle_vision_AbilityBar
#define INCLUDED_battle_vision_AbilityBar

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_SSprite
#include <SSprite.h>
#endif
#ifndef INCLUDED_battle_IModelObserver
#include <battle/IModelObserver.h>
#endif
HX_DECLARE_CLASS0(Element)
HX_DECLARE_CLASS0(ID)
HX_DECLARE_CLASS0(SSprite)
HX_DECLARE_CLASS1(battle,Ability)
HX_DECLARE_CLASS1(battle,Buff)
HX_DECLARE_CLASS1(battle,IModelObserver)
HX_DECLARE_CLASS1(battle,IObservableModel)
HX_DECLARE_CLASS1(battle,Unit)
HX_DECLARE_CLASS2(battle,enums,Source)
HX_DECLARE_CLASS2(battle,enums,StrikeType)
HX_DECLARE_CLASS2(battle,_hx_struct,UnitCoords)
HX_DECLARE_CLASS2(battle,vision,AbilityBar)
HX_DECLARE_CLASS2(battle,vision,AbilityCell)
HX_DECLARE_CLASS2(openfl,display,DisplayObject)
HX_DECLARE_CLASS2(openfl,display,DisplayObjectContainer)
HX_DECLARE_CLASS2(openfl,display,IBitmapDrawable)
HX_DECLARE_CLASS2(openfl,display,InteractiveObject)
HX_DECLARE_CLASS2(openfl,display,Sprite)
HX_DECLARE_CLASS2(openfl,events,Event)
HX_DECLARE_CLASS2(openfl,events,EventDispatcher)
HX_DECLARE_CLASS2(openfl,events,IEventDispatcher)
HX_DECLARE_CLASS2(openfl,events,MouseEvent)

namespace battle{
namespace vision{


class HXCPP_CLASS_ATTRIBUTES AbilityBar_obj : public  ::SSprite_obj
{
	public:
		typedef  ::SSprite_obj super;
		typedef AbilityBar_obj OBJ_;
		AbilityBar_obj();

	public:
		enum { _hx_ClassId = 0x1bb4e66d };

		void __construct( ::battle::Unit player,::Dynamic model);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="battle.vision.AbilityBar")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"battle.vision.AbilityBar"); }
		static hx::ObjectPtr< AbilityBar_obj > __new( ::battle::Unit player,::Dynamic model);
		static hx::ObjectPtr< AbilityBar_obj > __alloc(hx::Ctx *_hx_ctx, ::battle::Unit player,::Dynamic model);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~AbilityBar_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		void *_hx_getInterface(int inHash);
		::String __ToString() const { return HX_HCSTRING("AbilityBar","\x69","\xf2","\x32","\xaa"); }

		static Float abilityX(int i);
		static ::Dynamic abilityX_dyn();

		::Dynamic model;
		 ::openfl::display::DisplayObject bottomBar;
		 ::openfl::display::DisplayObject skipTurn;
		 ::openfl::display::DisplayObject leaveBattle;
		::Array< ::Dynamic> abs;
		::Array< ::Dynamic> abilitiesVision;
		void init();
		::Dynamic init_dyn();

		void preTick( ::battle::Unit current);
		::Dynamic preTick_dyn();

		void tick( ::battle::Unit current);
		::Dynamic tick_dyn();

		void abThrown( ::battle::_hx_struct::UnitCoords target, ::battle::_hx_struct::UnitCoords caster, ::ID id, ::battle::enums::StrikeType type, ::Element element);
		::Dynamic abThrown_dyn();

		void skipHandler( ::openfl::events::MouseEvent e);
		::Dynamic skipHandler_dyn();

		void leaveHandler( ::openfl::events::MouseEvent e);
		::Dynamic leaveHandler_dyn();

		void hpUpdate( ::battle::Unit target, ::battle::Unit caster,int dhp, ::Element element,bool crit, ::battle::enums::Source source);
		::Dynamic hpUpdate_dyn();

		void manaUpdate( ::battle::Unit target,int dmana, ::battle::enums::Source source);
		::Dynamic manaUpdate_dyn();

		void alacUpdate( ::battle::Unit unit,Float dalac, ::battle::enums::Source source);
		::Dynamic alacUpdate_dyn();

		void buffQueueUpdate( ::battle::_hx_struct::UnitCoords unit,::Array< ::Dynamic> queue);
		::Dynamic buffQueueUpdate_dyn();

		void miss( ::battle::_hx_struct::UnitCoords target, ::Element element);
		::Dynamic miss_dyn();

		void death( ::battle::_hx_struct::UnitCoords unit);
		::Dynamic death_dyn();

		void abSelected(int num);
		::Dynamic abSelected_dyn();

		void abDeselected(int num);
		::Dynamic abDeselected_dyn();

		void abStriked( ::battle::_hx_struct::UnitCoords target, ::battle::_hx_struct::UnitCoords caster, ::ID id, ::battle::enums::StrikeType type, ::Element element);
		::Dynamic abStriked_dyn();

		void warn(::String text);
		::Dynamic warn_dyn();

};

} // end namespace battle
} // end namespace vision

#endif /* INCLUDED_battle_vision_AbilityBar */ 
