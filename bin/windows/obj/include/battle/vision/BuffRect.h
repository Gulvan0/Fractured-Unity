// Generated by Haxe 3.4.7
#ifndef INCLUDED_battle_vision_BuffRect
#define INCLUDED_battle_vision_BuffRect

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_SSprite
#include <SSprite.h>
#endif
HX_DECLARE_CLASS0(SSprite)
HX_DECLARE_CLASS1(battle,Buff)
HX_DECLARE_CLASS2(battle,_hx_struct,Countdown)
HX_DECLARE_CLASS2(battle,vision,BuffRect)
HX_DECLARE_CLASS2(openfl,display,DisplayObject)
HX_DECLARE_CLASS2(openfl,display,DisplayObjectContainer)
HX_DECLARE_CLASS2(openfl,display,IBitmapDrawable)
HX_DECLARE_CLASS2(openfl,display,InteractiveObject)
HX_DECLARE_CLASS2(openfl,display,Sprite)
HX_DECLARE_CLASS2(openfl,events,EventDispatcher)
HX_DECLARE_CLASS2(openfl,events,IEventDispatcher)
HX_DECLARE_CLASS2(openfl,text,TextField)

namespace battle{
namespace vision{


class HXCPP_CLASS_ATTRIBUTES BuffRect_obj : public  ::SSprite_obj
{
	public:
		typedef  ::SSprite_obj super;
		typedef BuffRect_obj OBJ_;
		BuffRect_obj();

	public:
		enum { _hx_ClassId = 0x37754fbb };

		void __construct( ::battle::Buff buff);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="battle.vision.BuffRect")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"battle.vision.BuffRect"); }
		static hx::ObjectPtr< BuffRect_obj > __new( ::battle::Buff buff);
		static hx::ObjectPtr< BuffRect_obj > __alloc(hx::Ctx *_hx_ctx, ::battle::Buff buff);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~BuffRect_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("BuffRect","\xb7","\x24","\x17","\x7a"); }

		Float BG_WIDTH;
		Float BG_HEIGHT;
		 ::openfl::display::Sprite bg;
		 ::openfl::display::Sprite symbol;
		 ::openfl::text::TextField durationText;
		 ::battle::_hx_struct::Countdown duration;
		bool tickAndIsOver();
		::Dynamic tickAndIsOver_dyn();

		 ::openfl::text::TextField createTF(int dur);
		::Dynamic createTF_dyn();

};

} // end namespace battle
} // end namespace vision

#endif /* INCLUDED_battle_vision_BuffRect */ 
