// Generated by Haxe 3.4.7
#ifndef INCLUDED_battle_data_Units
#define INCLUDED_battle_data_Units

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS0(ID)
HX_DECLARE_CLASS1(battle,IMutableModel)
HX_DECLARE_CLASS1(battle,Unit)
HX_DECLARE_CLASS2(battle,data,Units)
HX_DECLARE_CLASS2(battle,_hx_struct,UnitCoords)

namespace battle{
namespace data{


class HXCPP_CLASS_ATTRIBUTES Units_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef Units_obj OBJ_;
		Units_obj();

	public:
		enum { _hx_ClassId = 0x25f06ead };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="battle.data.Units")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,false,"battle.data.Units"); }

		hx::ObjectPtr< Units_obj > __new() {
			hx::ObjectPtr< Units_obj > __this = new Units_obj();
			__this->__construct();
			return __this;
		}

		static hx::ObjectPtr< Units_obj > __alloc(hx::Ctx *_hx_ctx) {
			Units_obj *__this = (Units_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Units_obj), false, "battle.data.Units"));
			*(void **)__this = Units_obj::_hx_vtable;
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Units_obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("Units","\x4f","\xd9","\x14","\x3a"); }

		static void __boot();
		static ::Dynamic model;
		static bool flag;
		static void init(::Dynamic m);
		static ::Dynamic init_dyn();

		static  ::Dynamic decide( ::ID id);
		static ::Dynamic decide_dyn();

		static  ::Dynamic ghost();
		static ::Dynamic ghost_dyn();

		static  ::battle::_hx_struct::UnitCoords findWeakestUnit(::Array< ::Dynamic> array);
		static ::Dynamic findWeakestUnit_dyn();

};

} // end namespace battle
} // end namespace data

#endif /* INCLUDED_battle_data_Units */ 
