// Generated by Haxe 3.4.7
#ifndef INCLUDED_battle_Buff
#define INCLUDED_battle_Buff

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS0(Element)
HX_DECLARE_CLASS0(ID)
HX_DECLARE_CLASS1(battle,Buff)
HX_DECLARE_CLASS2(battle,data,BattleEvent)
HX_DECLARE_CLASS2(battle,enums,BuffMode)
HX_DECLARE_CLASS2(battle,_hx_struct,UnitCoords)

namespace battle{


class HXCPP_CLASS_ATTRIBUTES Buff_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef Buff_obj OBJ_;
		Buff_obj();

	public:
		enum { _hx_ClassId = 0x01da47eb };

		void __construct( ::ID id,int duration, ::battle::_hx_struct::UnitCoords target, ::battle::_hx_struct::UnitCoords caster);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="battle.Buff")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"battle.Buff"); }
		static hx::ObjectPtr< Buff_obj > __new( ::ID id,int duration, ::battle::_hx_struct::UnitCoords target, ::battle::_hx_struct::UnitCoords caster);
		static hx::ObjectPtr< Buff_obj > __alloc(hx::Ctx *_hx_ctx, ::ID id,int duration, ::battle::_hx_struct::UnitCoords target, ::battle::_hx_struct::UnitCoords caster);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Buff_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("Buff","\xf3","\x35","\xf9","\x2b"); }

		 ::ID id;
		::String name;
		::String description;
		 ::Element element;
		bool isOverTime;
		bool isStackable;
		::Array< ::Dynamic> triggers;
		 ::battle::_hx_struct::UnitCoords owner;
		 ::battle::_hx_struct::UnitCoords caster;
		int duration;
		bool reactsTo( ::battle::data::BattleEvent e);
		::Dynamic reactsTo_dyn();

		bool tickAndCheckEnded();
		::Dynamic tickAndCheckEnded_dyn();

		void onCast();
		::Dynamic onCast_dyn();

		void onEnd();
		::Dynamic onEnd_dyn();

		void act( ::battle::enums::BuffMode mode);
		::Dynamic act_dyn();

};

} // end namespace battle

#endif /* INCLUDED_battle_Buff */ 
