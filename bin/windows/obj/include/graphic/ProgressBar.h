// Generated by Haxe 3.4.7
#ifndef INCLUDED_graphic_ProgressBar
#define INCLUDED_graphic_ProgressBar

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_openfl_display_Shape
#include <openfl/display/Shape.h>
#endif
HX_DECLARE_CLASS1(graphic,ProgressBar)
HX_DECLARE_CLASS2(openfl,display,DisplayObject)
HX_DECLARE_CLASS2(openfl,display,IBitmapDrawable)
HX_DECLARE_CLASS2(openfl,display,Shape)
HX_DECLARE_CLASS2(openfl,events,EventDispatcher)
HX_DECLARE_CLASS2(openfl,events,IEventDispatcher)

namespace graphic{


class HXCPP_CLASS_ATTRIBUTES ProgressBar_obj : public  ::openfl::display::Shape_obj
{
	public:
		typedef  ::openfl::display::Shape_obj super;
		typedef ProgressBar_obj OBJ_;
		ProgressBar_obj();

	public:
		enum { _hx_ClassId = 0x5012ca66 };

		void __construct(Float width,Float height, ::Dynamic __o_colour, ::Dynamic __o_thickness, ::Dynamic __o_initialProgress);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="graphic.ProgressBar")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"graphic.ProgressBar"); }
		static hx::ObjectPtr< ProgressBar_obj > __new(Float width,Float height, ::Dynamic __o_colour, ::Dynamic __o_thickness, ::Dynamic __o_initialProgress);
		static hx::ObjectPtr< ProgressBar_obj > __alloc(hx::Ctx *_hx_ctx,Float width,Float height, ::Dynamic __o_colour, ::Dynamic __o_thickness, ::Dynamic __o_initialProgress);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~ProgressBar_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("ProgressBar","\x06","\x54","\x88","\xca"); }

		static void __boot();
		static int GREEN_TO_RED;
		Float barWidth;
		Float barHeight;
		int fillColour;
		Float lineThickness;
		Float _progress;
		Float set_progress(Float value);
		::Dynamic set_progress_dyn();

		int get_colour(Float prog);
		::Dynamic get_colour_dyn();

		int darken(int color);
		::Dynamic darken_dyn();

		Float get_progress();
		::Dynamic get_progress_dyn();

};

} // end namespace graphic

#endif /* INCLUDED_graphic_ProgressBar */ 
