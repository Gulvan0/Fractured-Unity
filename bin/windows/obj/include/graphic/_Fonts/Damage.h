// Generated by Haxe 3.4.7
#ifndef INCLUDED_graphic__Fonts_Damage
#define INCLUDED_graphic__Fonts_Damage

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_openfl_text_Font
#include <openfl/text/Font.h>
#endif
HX_DECLARE_CLASS2(graphic,_Fonts,Damage)
HX_DECLARE_CLASS2(lime,text,Font)
HX_DECLARE_CLASS2(openfl,text,Font)

namespace graphic{
namespace _Fonts{


class HXCPP_CLASS_ATTRIBUTES Damage_obj : public  ::openfl::text::Font_obj
{
	public:
		typedef  ::openfl::text::Font_obj super;
		typedef Damage_obj OBJ_;
		Damage_obj();

	public:
		enum { _hx_ClassId = 0x15d2e8d4 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="graphic._Fonts.Damage")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"graphic._Fonts.Damage"); }
		static hx::ObjectPtr< Damage_obj > __new();
		static hx::ObjectPtr< Damage_obj > __alloc(hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Damage_obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("Damage","\x8f","\x04","\x79","\x52"); }

		static void __boot();
		static ::String resourceName;
};

} // end namespace graphic
} // end namespace _Fonts

#endif /* INCLUDED_graphic__Fonts_Damage */ 
