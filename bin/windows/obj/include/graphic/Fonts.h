// Generated by Haxe 3.4.7
#ifndef INCLUDED_graphic_Fonts
#define INCLUDED_graphic_Fonts

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_STACK_FRAME(_hx_pos_1987c7115db2a92a_53_new)
HX_DECLARE_CLASS0(Element)
HX_DECLARE_CLASS1(graphic,Fonts)

namespace graphic{


class HXCPP_CLASS_ATTRIBUTES Fonts_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef Fonts_obj OBJ_;
		Fonts_obj();

	public:
		enum { _hx_ClassId = 0x08f69604 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="graphic.Fonts")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,false,"graphic.Fonts"); }

		hx::ObjectPtr< Fonts_obj > __new() {
			hx::ObjectPtr< Fonts_obj > __this = new Fonts_obj();
			__this->__construct();
			return __this;
		}

		static hx::ObjectPtr< Fonts_obj > __alloc(hx::Ctx *_hx_ctx) {
			Fonts_obj *__this = (Fonts_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Fonts_obj), false, "graphic.Fonts"));
			*(void **)__this = Fonts_obj::_hx_vtable;
{
            	HX_STACKFRAME(&_hx_pos_1987c7115db2a92a_53_new)
            	}
		
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Fonts_obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("Fonts","\xa4","\x27","\xbf","\x97"); }

		static ::String MIRROR;
		static ::String DAMAGE;
		static ::String BUFF;
		static ::String TIME;
		static void init();
		static ::Dynamic init_dyn();

		static int color( ::Element element);
		static ::Dynamic color_dyn();

};

} // end namespace graphic

#endif /* INCLUDED_graphic_Fonts */ 
