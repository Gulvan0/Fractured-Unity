// Generated by Haxe 3.4.7
#ifndef INCLUDED_Progress
#define INCLUDED_Progress

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS0(Progress)
HX_DECLARE_CLASS0(Zone)
HX_DECLARE_CLASS1(haxe,IMap)
HX_DECLARE_CLASS2(haxe,ds,BalancedTree)
HX_DECLARE_CLASS2(haxe,ds,EnumValueMap)



class HXCPP_CLASS_ATTRIBUTES Progress_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef Progress_obj OBJ_;
		Progress_obj();

	public:
		enum { _hx_ClassId = 0x5fdcb3cd };

		void __construct( ::haxe::ds::EnumValueMap prog, ::Zone current);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="Progress")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"Progress"); }
		static hx::ObjectPtr< Progress_obj > __new( ::haxe::ds::EnumValueMap prog, ::Zone current);
		static hx::ObjectPtr< Progress_obj > __alloc(hx::Ctx *_hx_ctx, ::haxe::ds::EnumValueMap prog, ::Zone current);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Progress_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("Progress","\xcd","\xb3","\xdc","\x5f"); }

		 ::haxe::ds::EnumValueMap progress;
		 ::Zone currentZone;
		void proceed();
		::Dynamic proceed_dyn();

		 ::Zone set_currentZone( ::Zone value);
		::Dynamic set_currentZone_dyn();

};


#endif /* INCLUDED_Progress */ 
