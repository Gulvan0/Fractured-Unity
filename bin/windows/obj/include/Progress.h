// Generated by Haxe 3.4.7
#ifndef INCLUDED_Progress
#define INCLUDED_Progress

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_STACK_FRAME(_hx_pos_86b0c476afc0fd4f_14_new)
HX_DECLARE_CLASS0(Progress)



class HXCPP_CLASS_ATTRIBUTES Progress_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef Progress_obj OBJ_;
		Progress_obj();

	public:
		enum { _hx_ClassId = 0x5fdcb3cd };

		void __construct(int zone,int stage);
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="Progress")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,false,"Progress"); }

		hx::ObjectPtr< Progress_obj > __new(int zone,int stage) {
			hx::ObjectPtr< Progress_obj > __this = new Progress_obj();
			__this->__construct(zone,stage);
			return __this;
		}

		static hx::ObjectPtr< Progress_obj > __alloc(hx::Ctx *_hx_ctx,int zone,int stage) {
			Progress_obj *__this = (Progress_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Progress_obj), false, "Progress"));
			*(void **)__this = Progress_obj::_hx_vtable;
{
            	HX_STACKFRAME(&_hx_pos_86b0c476afc0fd4f_14_new)
HXLINE(  15)		( ( ::Progress)(__this) )->zone = zone;
HXLINE(  16)		( ( ::Progress)(__this) )->stage = stage;
            	}
		
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Progress_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("Progress","\xcd","\xb3","\xdc","\x5f"); }

		int zone;
		int stage;
};


#endif /* INCLUDED_Progress */ 
