// Generated by Haxe 3.4.7
#ifndef INCLUDED_XMLUtils
#define INCLUDED_XMLUtils

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS0(Element)
HX_DECLARE_CLASS0(ID)
HX_DECLARE_CLASS0(XMLUtils)
HX_DECLARE_CLASS0(Xml)
HX_DECLARE_CLASS2(battle,data,BattleEvent)
HX_DECLARE_CLASS1(roaming,Ability)



class HXCPP_CLASS_ATTRIBUTES XMLUtils_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef XMLUtils_obj OBJ_;
		XMLUtils_obj();

	public:
		enum { _hx_ClassId = 0x32c47d5e };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="XMLUtils")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,false,"XMLUtils"); }

		hx::ObjectPtr< XMLUtils_obj > __new() {
			hx::ObjectPtr< XMLUtils_obj > __this = new XMLUtils_obj();
			__this->__construct();
			return __this;
		}

		static hx::ObjectPtr< XMLUtils_obj > __alloc(hx::Ctx *_hx_ctx) {
			XMLUtils_obj *__this = (XMLUtils_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(XMLUtils_obj), false, "XMLUtils"));
			*(void **)__this = XMLUtils_obj::_hx_vtable;
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~XMLUtils_obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("XMLUtils","\xfa","\x78","\x77","\xcc"); }

		static  ::Dynamic getGlobal(::String node,::String attribute, ::Dynamic typeObj);
		static ::Dynamic getGlobal_dyn();

		static ::Array< ::Dynamic> parseTree( ::Element element);
		static ::Dynamic parseTree_dyn();

		static ::Array< ::Dynamic> parseTreePaths( ::Element element);
		static ::Dynamic parseTreePaths_dyn();

		static ::Array< ::Dynamic> parseStage(int zone,int stage);
		static ::Dynamic parseStage_dyn();

		static  ::Dynamic parseAbility( ::ID ability,::String param, ::Dynamic paramType);
		static ::Dynamic parseAbility_dyn();

		static ::Array< ::Dynamic> parseTriggers( ::ID object);
		static ::Dynamic parseTriggers_dyn();

		static  ::Dynamic parseBuff( ::ID buff,::String param, ::Dynamic paramType);
		static ::Dynamic parseBuff_dyn();

		static  ::Dynamic parseUnit( ::ID unit);
		static ::Dynamic parseUnit_dyn();

		static  ::Xml getTree( ::Element element);
		static ::Dynamic getTree_dyn();

		static  ::Dynamic castNode( ::Dynamic value, ::Dynamic type);
		static ::Dynamic castNode_dyn();

		static  ::Xml findNode( ::Xml xml,::String nodeName,::String keyAtt,::String keyAttValue);
		static ::Dynamic findNode_dyn();

		static ::Array< ::String > parseValueArray( ::Xml node);
		static ::Dynamic parseValueArray_dyn();

		static  ::Xml fromFile(::String path);
		static ::Dynamic fromFile_dyn();

};


#endif /* INCLUDED_XMLUtils */ 
