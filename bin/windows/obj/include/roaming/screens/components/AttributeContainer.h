// Generated by Haxe 3.4.7
#ifndef INCLUDED_roaming_screens_components_AttributeContainer
#define INCLUDED_roaming_screens_components_AttributeContainer

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_SSprite
#include <SSprite.h>
#endif
HX_DECLARE_CLASS0(SSprite)
HX_DECLARE_CLASS1(haxe,IMap)
HX_DECLARE_CLASS2(haxe,ds,BalancedTree)
HX_DECLARE_CLASS2(haxe,ds,EnumValueMap)
HX_DECLARE_CLASS2(openfl,display,DisplayObject)
HX_DECLARE_CLASS2(openfl,display,DisplayObjectContainer)
HX_DECLARE_CLASS2(openfl,display,IBitmapDrawable)
HX_DECLARE_CLASS2(openfl,display,InteractiveObject)
HX_DECLARE_CLASS2(openfl,display,Sprite)
HX_DECLARE_CLASS2(openfl,events,EventDispatcher)
HX_DECLARE_CLASS2(openfl,events,IEventDispatcher)
HX_DECLARE_CLASS2(openfl,geom,Point)
HX_DECLARE_CLASS2(openfl,text,TextField)
HX_DECLARE_CLASS2(roaming,enums,Attribute)
HX_DECLARE_CLASS2(roaming,screens,ISAbility)
HX_DECLARE_CLASS3(roaming,screens,components,AttributeContainer)

namespace roaming{
namespace screens{
namespace components{


class HXCPP_CLASS_ATTRIBUTES AttributeContainer_obj : public  ::SSprite_obj
{
	public:
		typedef  ::SSprite_obj super;
		typedef AttributeContainer_obj OBJ_;
		AttributeContainer_obj();

	public:
		enum { _hx_ClassId = 0x0204cc3d };

		void __construct(::Dynamic parent);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="roaming.screens.components.AttributeContainer")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"roaming.screens.components.AttributeContainer"); }
		static hx::ObjectPtr< AttributeContainer_obj > __new(::Dynamic parent);
		static hx::ObjectPtr< AttributeContainer_obj > __alloc(hx::Ctx *_hx_ctx,::Dynamic parent);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~AttributeContainer_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("AttributeContainer","\xa5","\x25","\x6f","\xd8"); }

		::Dynamic parentScreen;
		 ::haxe::ds::EnumValueMap values;
		 ::haxe::ds::EnumValueMap addButtons;
		 ::haxe::ds::EnumValueMap attribNames;
		 ::haxe::ds::EnumValueMap attribColors;
		 ::haxe::ds::EnumValueMap attribValues;
		 ::openfl::text::TextField createTF(::String text,::String font,int size,int width, ::Dynamic color, ::Dynamic spacing);
		::Dynamic createTF_dyn();

		void updateValue( ::roaming::enums::Attribute attrib);
		::Dynamic updateValue_dyn();

		void onClick( ::openfl::geom::Point localPoint);
		::Dynamic onClick_dyn();

		 ::roaming::enums::Attribute identifyAttribute( ::openfl::geom::Point localClickPoint);
		::Dynamic identifyAttribute_dyn();

		 ::openfl::geom::Point playerIcon;
		Float attributeX;
		Float valueX;
		Float plusX;
		Float plusLineOffset;
		Float lineY( ::roaming::enums::Attribute a);
		::Dynamic lineY_dyn();

};

} // end namespace roaming
} // end namespace screens
} // end namespace components

#endif /* INCLUDED_roaming_screens_components_AttributeContainer */ 
