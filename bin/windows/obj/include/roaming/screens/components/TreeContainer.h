// Generated by Haxe 3.4.7
#ifndef INCLUDED_roaming_screens_components_TreeContainer
#define INCLUDED_roaming_screens_components_TreeContainer

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_SSprite
#include <SSprite.h>
#endif
HX_DECLARE_CLASS0(SSprite)
HX_DECLARE_CLASS2(openfl,display,DisplayObject)
HX_DECLARE_CLASS2(openfl,display,DisplayObjectContainer)
HX_DECLARE_CLASS2(openfl,display,IBitmapDrawable)
HX_DECLARE_CLASS2(openfl,display,InteractiveObject)
HX_DECLARE_CLASS2(openfl,display,MovieClip)
HX_DECLARE_CLASS2(openfl,display,Shape)
HX_DECLARE_CLASS2(openfl,display,Sprite)
HX_DECLARE_CLASS2(openfl,events,EventDispatcher)
HX_DECLARE_CLASS2(openfl,events,IEventDispatcher)
HX_DECLARE_CLASS2(openfl,geom,Point)
HX_DECLARE_CLASS1(roaming,Ability)
HX_DECLARE_CLASS1(roaming,TreeAbility)
HX_DECLARE_CLASS2(roaming,screens,ISAbility)
HX_DECLARE_CLASS3(roaming,screens,components,TreeContainer)

namespace roaming{
namespace screens{
namespace components{


class HXCPP_CLASS_ATTRIBUTES TreeContainer_obj : public  ::SSprite_obj
{
	public:
		typedef  ::SSprite_obj super;
		typedef TreeContainer_obj OBJ_;
		TreeContainer_obj();

	public:
		enum { _hx_ClassId = 0x1ee405bf };

		void __construct(::Dynamic parent);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="roaming.screens.components.TreeContainer")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"roaming.screens.components.TreeContainer"); }
		static hx::ObjectPtr< TreeContainer_obj > __new(::Dynamic parent);
		static hx::ObjectPtr< TreeContainer_obj > __alloc(hx::Ctx *_hx_ctx,::Dynamic parent);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~TreeContainer_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("TreeContainer","\xe3","\xef","\xcf","\x40"); }

		::Dynamic parentScreen;
		Float abRadius;
		::Array< ::Dynamic> icons;
		::Array< ::Dynamic> branches;
		::Array< ::Dynamic> createBranches( ::roaming::TreeAbility ab);
		::Dynamic createBranches_dyn();

		void updateBranches(int i,int j);
		::Dynamic updateBranches_dyn();

		void onClick( ::openfl::geom::Point localPoint);
		::Dynamic onClick_dyn();

		void onRightClick( ::openfl::geom::Point localPoint);
		::Dynamic onRightClick_dyn();

		 ::openfl::geom::Point identifyAbility( ::openfl::geom::Point localClickPoint);
		::Dynamic identifyAbility_dyn();

		Float treeAbX(int j);
		::Dynamic treeAbX_dyn();

		Float treeAbY(int i);
		::Dynamic treeAbY_dyn();

		Float treeAbOffsetX();
		::Dynamic treeAbOffsetX_dyn();

		Float treeAbOffsetY();
		::Dynamic treeAbOffsetY_dyn();

};

} // end namespace roaming
} // end namespace screens
} // end namespace components

#endif /* INCLUDED_roaming_screens_components_TreeContainer */ 
