// Generated by Haxe 3.4.7
#ifndef INCLUDED_roaming_TreeAbility
#define INCLUDED_roaming_TreeAbility

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_roaming_Ability
#include <roaming/Ability.h>
#endif
HX_DECLARE_CLASS1(roaming,Ability)
HX_DECLARE_CLASS1(roaming,TreeAbility)

namespace roaming{


class HXCPP_CLASS_ATTRIBUTES TreeAbility_obj : public  ::roaming::Ability_obj
{
	public:
		typedef  ::roaming::Ability_obj super;
		typedef TreeAbility_obj OBJ_;
		TreeAbility_obj();

	public:
		enum { _hx_ClassId = 0x6fbee6d3 };

		void __construct( ::roaming::Ability ability,int i,int j,::Array< int > requiredJ,::Array< int > unlocksJ);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="roaming.TreeAbility")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"roaming.TreeAbility"); }
		static hx::ObjectPtr< TreeAbility_obj > __new( ::roaming::Ability ability,int i,int j,::Array< int > requiredJ,::Array< int > unlocksJ);
		static hx::ObjectPtr< TreeAbility_obj > __alloc(hx::Ctx *_hx_ctx, ::roaming::Ability ability,int i,int j,::Array< int > requiredJ,::Array< int > unlocksJ);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~TreeAbility_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("TreeAbility","\xcc","\x8f","\xfc","\x2e"); }

		int i;
		int j;
		::Array< int > requiredJ;
		::Array< int > unlocksJ;
};

} // end namespace roaming

#endif /* INCLUDED_roaming_TreeAbility */ 
