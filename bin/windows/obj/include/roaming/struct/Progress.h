// Generated by Haxe 3.4.7
#ifndef INCLUDED_roaming_struct_Progress
#define INCLUDED_roaming_struct_Progress

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(roaming,_hx_struct,Progress)

namespace roaming{
namespace _hx_struct{


class HXCPP_CLASS_ATTRIBUTES Progress_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef Progress_obj OBJ_;
		Progress_obj();

	public:
		enum { _hx_ClassId = 0x26c697d7 };

		void __construct(int zone,int stage);
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="roaming.struct.Progress")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,false,"roaming.struct.Progress"); }
		static hx::ObjectPtr< Progress_obj > __new(int zone,int stage);
		static hx::ObjectPtr< Progress_obj > __alloc(hx::Ctx *_hx_ctx,int zone,int stage);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Progress_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("Progress","\xcd","\xb3","\xdc","\x5f"); }

		int stage;
		int zone;
};

} // end namespace roaming
} // end namespace struct

#endif /* INCLUDED_roaming_struct_Progress */ 
