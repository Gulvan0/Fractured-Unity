// Generated by Haxe 3.4.7
#ifndef INCLUDED_roaming_Ability
#define INCLUDED_roaming_Ability

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS0(ID)
HX_DECLARE_CLASS1(roaming,Ability)

namespace roaming{


class HXCPP_CLASS_ATTRIBUTES Ability_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef Ability_obj OBJ_;
		Ability_obj();

	public:
		enum { _hx_ClassId = 0x018921d9 };

		void __construct( ::ID id,int maxLvl);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="roaming.Ability")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"roaming.Ability"); }
		static hx::ObjectPtr< Ability_obj > __new( ::ID id,int maxLvl);
		static hx::ObjectPtr< Ability_obj > __alloc(hx::Ctx *_hx_ctx, ::ID id,int maxLvl);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Ability_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("Ability","\x8a","\x89","\xb2","\x7a"); }

		 ::ID id;
		int maxLvl;
		int currentLvl;
		bool learn();
		::Dynamic learn_dyn();

		int reset();
		::Dynamic reset_dyn();

};

} // end namespace roaming

#endif /* INCLUDED_roaming_Ability */ 
