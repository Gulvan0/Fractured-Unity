// Generated by Haxe 3.4.7
#ifndef INCLUDED_openfl_display_ShaderParameter_Int
#define INCLUDED_openfl_display_ShaderParameter_Int

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS3(lime,_backend,native,NativeGLRenderContext)
HX_DECLARE_CLASS2(lime,utils,ArrayBufferView)
HX_DECLARE_CLASS2(openfl,display,ShaderParameter_Int)

namespace openfl{
namespace display{


class HXCPP_CLASS_ATTRIBUTES ShaderParameter_Int_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef ShaderParameter_Int_obj OBJ_;
		ShaderParameter_Int_obj();

	public:
		enum { _hx_ClassId = 0x19b649e6 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="openfl.display.ShaderParameter_Int")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"openfl.display.ShaderParameter_Int"); }
		static hx::ObjectPtr< ShaderParameter_Int_obj > __new();
		static hx::ObjectPtr< ShaderParameter_Int_obj > __alloc(hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~ShaderParameter_Int_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("ShaderParameter_Int","\x74","\x7d","\x98","\x74"); }

		int index;
		::String name;
		 ::Dynamic type;
		::Array< int > value;
		int _hx___arrayLength;
		bool _hx___isBool;
		bool _hx___isFloat;
		bool _hx___isInt;
		bool _hx___isUniform;
		int __length;
		 ::lime::utils::ArrayBufferView _hx___uniformMatrix;
		bool _hx___useArray;
		void _hx___disableGL( ::lime::_backend::native::NativeGLRenderContext gl);
		::Dynamic _hx___disableGL_dyn();

		void _hx___updateGL( ::lime::_backend::native::NativeGLRenderContext gl,::Array< int > overrideValue);
		::Dynamic _hx___updateGL_dyn();

		void _hx___updateGLFromBuffer( ::lime::_backend::native::NativeGLRenderContext gl, ::lime::utils::ArrayBufferView buffer,int position,int length);
		::Dynamic _hx___updateGLFromBuffer_dyn();

};

} // end namespace openfl
} // end namespace display

#endif /* INCLUDED_openfl_display_ShaderParameter_Int */ 
