// Generated by Haxe 3.4.7
#ifndef INCLUDED_openfl__internal_renderer_opengl_GLGraphics
#define INCLUDED_openfl__internal_renderer_opengl_GLGraphics

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS4(openfl,_internal,renderer,opengl,GLGraphics)
HX_DECLARE_CLASS2(openfl,display,BitmapData)
HX_DECLARE_CLASS2(openfl,display,DisplayObjectRenderer)
HX_DECLARE_CLASS2(openfl,display,Graphics)
HX_DECLARE_CLASS2(openfl,display,IBitmapDrawable)
HX_DECLARE_CLASS2(openfl,display,OpenGLRenderer)
HX_DECLARE_CLASS2(openfl,events,EventDispatcher)
HX_DECLARE_CLASS2(openfl,events,IEventDispatcher)
HX_DECLARE_CLASS2(openfl,geom,ColorTransform)

namespace openfl{
namespace _internal{
namespace renderer{
namespace opengl{


class HXCPP_CLASS_ATTRIBUTES GLGraphics_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef GLGraphics_obj OBJ_;
		GLGraphics_obj();

	public:
		enum { _hx_ClassId = 0x0b6e1f86 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="openfl._internal.renderer.opengl.GLGraphics")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,false,"openfl._internal.renderer.opengl.GLGraphics"); }

		hx::ObjectPtr< GLGraphics_obj > __new() {
			hx::ObjectPtr< GLGraphics_obj > __this = new GLGraphics_obj();
			__this->__construct();
			return __this;
		}

		static hx::ObjectPtr< GLGraphics_obj > __alloc(hx::Ctx *_hx_ctx) {
			GLGraphics_obj *__this = (GLGraphics_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(GLGraphics_obj), false, "openfl._internal.renderer.opengl.GLGraphics"));
			*(void **)__this = GLGraphics_obj::_hx_vtable;
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~GLGraphics_obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("GLGraphics","\x10","\x20","\x6c","\xe0"); }

		static void __boot();
		static  ::openfl::display::BitmapData blankBitmapData;
		static  ::openfl::geom::ColorTransform tempColorTransform;
		static void buildBuffer( ::openfl::display::Graphics graphics, ::openfl::display::OpenGLRenderer renderer);
		static ::Dynamic buildBuffer_dyn();

		static bool isCompatible( ::openfl::display::Graphics graphics);
		static ::Dynamic isCompatible_dyn();

		static void render( ::openfl::display::Graphics graphics, ::openfl::display::OpenGLRenderer renderer);
		static ::Dynamic render_dyn();

		static void renderMask( ::openfl::display::Graphics graphics, ::openfl::display::OpenGLRenderer renderer);
		static ::Dynamic renderMask_dyn();

		static void resizeBuffer( ::openfl::display::Graphics graphics,int length);
		static ::Dynamic resizeBuffer_dyn();

};

} // end namespace openfl
} // end namespace _internal
} // end namespace renderer
} // end namespace opengl

#endif /* INCLUDED_openfl__internal_renderer_opengl_GLGraphics */ 
